//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\VerticalWidgetRun.java
//

#include "BaselineDimensionDependency.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "Dependency.h"
#include "DependencyNode.h"
#include "DimensionDependency.h"
#include "Helper.h"
#include "HorizontalWidgetRun.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RunGroup.h"
#include "VerticalWidgetRun.h"
#include "WidgetRun.h"
#include "java/util/List.h"


@implementation ADXVerticalWidgetRun

- (instancetype)initWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  ADXVerticalWidgetRun_initWithADXConstraintWidget_(self, widget);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", @"VerticalRun ", [((ADXConstraintWidget *) nil_chk(widget_)) getDebugName]);
}

- (void)clear {
  JreStrongAssign(&runGroup_, nil);
  [((ADXDependencyNode *) nil_chk(start_)) clear];
  [((ADXDependencyNode *) nil_chk(end_)) clear];
  [((ADXDependencyNode *) nil_chk(baseline_)) clear];
  [((ADXDimensionDependency *) nil_chk(dimension_)) clear];
  resolved_ = false;
}

- (void)reset {
  resolved_ = false;
  [((ADXDependencyNode *) nil_chk(start_)) clear];
  ((ADXDependencyNode *) nil_chk(start_))->resolved_ = false;
  [((ADXDependencyNode *) nil_chk(end_)) clear];
  ((ADXDependencyNode *) nil_chk(end_))->resolved_ = false;
  [((ADXDependencyNode *) nil_chk(baseline_)) clear];
  ((ADXDependencyNode *) nil_chk(baseline_))->resolved_ = false;
  ((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ = false;
}

- (jboolean)supportsWrapComputation {
  if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    if (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      return true;
    }
    return false;
  }
  return true;
}

- (void)updateWithADXDependency:(id<ADXDependency>)dependency {
  switch ([mRunType_ ordinal]) {
    case ADXWidgetRun_RunType_Enum_START:
    {
      [self updateRunStartWithADXDependency:dependency];
    }
    break;
    case ADXWidgetRun_RunType_Enum_END:
    {
      [self updateRunEndWithADXDependency:dependency];
    }
    break;
    case ADXWidgetRun_RunType_Enum_CENTER:
    {
      [self updateRunCenterWithADXDependency:dependency withADXConstraintAnchor:((ADXConstraintWidget *) nil_chk(widget_))->mTop_ withADXConstraintAnchor:widget_->mBottom_ withInt:ADXConstraintWidget_VERTICAL];
      return;
    }
    default:
    break;
  }
  {
    if (((ADXDimensionDependency *) nil_chk(dimension_))->readyToSolve_ && !dimension_->resolved_) {
      if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        switch (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultHeight_) {
          case ADXConstraintWidget_MATCH_CONSTRAINT_RATIO:
          {
            if (((ADXHorizontalWidgetRun *) nil_chk(widget_->horizontalRun_))->dimension_->resolved_) {
              jint size = 0;
              jint ratioSide = [widget_ getDimensionRatioSide];
              switch (ratioSide) {
                case ADXConstraintWidget_HORIZONTAL:
                {
                  size = JreFpToInt((0.5f + ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimension_))->value_ * [widget_ getDimensionRatio]));
                }
                break;
                case ADXConstraintWidget_VERTICAL:
                {
                  size = JreFpToInt((0.5f + ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimension_))->value_ / [widget_ getDimensionRatio]));
                }
                break;
                case ADXConstraintWidget_UNKNOWN:
                {
                  size = JreFpToInt((0.5f + ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimension_))->value_ / [widget_ getDimensionRatio]));
                }
                break;
                default:
                break;
              }
              [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:size];
            }
          }
          break;
          case ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT:
          {
            ADXConstraintWidget *parent = JreRetainedLocalValue([widget_ getParent]);
            if (parent != nil) {
              if (((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->dimension_))->resolved_) {
                jfloat percent = ((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintPercentHeight_;
                jint targetDimensionValue = parent->verticalRun_->dimension_->value_;
                jint size = JreFpToInt((0.5f + targetDimensionValue * percent));
                [dimension_ resolveWithInt:size];
              }
            }
          }
          break;
          default:
          break;
        }
      }
    }
  }
  if (!(((ADXDependencyNode *) nil_chk(start_))->readyToSolve_ && ((ADXDependencyNode *) nil_chk(end_))->readyToSolve_)) {
    return;
  }
  if (start_->resolved_ && ((ADXDependencyNode *) nil_chk(end_))->resolved_ && ((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    return;
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ && dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && ((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD && ![widget_ isInVerticalChain]) {
    ADXDependencyNode *startTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]);
    ADXDependencyNode *endTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]);
    jint startPos = ((ADXDependencyNode *) nil_chk(startTarget))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
    jint endPos = ((ADXDependencyNode *) nil_chk(endTarget))->value_ + ((ADXDependencyNode *) nil_chk(end_))->margin_;
    jint distance = endPos - startPos;
    [start_ resolveWithInt:startPos];
    [((ADXDependencyNode *) nil_chk(end_)) resolveWithInt:endPos];
    [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:distance];
    return;
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ && dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintsType_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
    if ([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) size] > 0 && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) size] > 0) {
      ADXDependencyNode *startTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]);
      ADXDependencyNode *endTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]);
      jint startPos = ((ADXDependencyNode *) nil_chk(startTarget))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
      jint endPos = ((ADXDependencyNode *) nil_chk(endTarget))->value_ + ((ADXDependencyNode *) nil_chk(end_))->margin_;
      jint availableSpace = endPos - startPos;
      if (availableSpace < ((ADXDimensionDependency *) nil_chk(dimension_))->wrapValue_) {
        [dimension_ resolveWithInt:availableSpace];
      }
      else {
        [dimension_ resolveWithInt:dimension_->wrapValue_];
      }
    }
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    return;
  }
  if ([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) size] > 0 && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) size] > 0) {
    ADXDependencyNode *startTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]);
    ADXDependencyNode *endTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]);
    jint startPos = ((ADXDependencyNode *) nil_chk(startTarget))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
    jint endPos = ((ADXDependencyNode *) nil_chk(endTarget))->value_ + ((ADXDependencyNode *) nil_chk(end_))->margin_;
    jfloat bias = [((ADXConstraintWidget *) nil_chk(widget_)) getVerticalBiasPercent];
    if (startTarget == endTarget) {
      startPos = startTarget->value_;
      endPos = endTarget->value_;
      bias = 0.5f;
    }
    jint distance = (endPos - startPos - ((ADXDimensionDependency *) nil_chk(dimension_))->value_);
    [((ADXDependencyNode *) nil_chk(start_)) resolveWithInt:JreFpToInt((0.5f + startPos + distance * bias))];
    [((ADXDependencyNode *) nil_chk(end_)) resolveWithInt:((ADXDependencyNode *) nil_chk(start_))->value_ + ((ADXDimensionDependency *) nil_chk(dimension_))->value_];
  }
}

- (void)apply {
  if (((ADXConstraintWidget *) nil_chk(widget_))->measured_) {
    [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:[widget_ getHeight]];
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    JreStrongAssign(&dimensionBehavior_, [((ADXConstraintWidget *) nil_chk(widget_)) getVerticalDimensionBehaviour]);
    if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
      JreStrongAssignAndConsume(&baselineDimension_, new_ADXBaselineDimensionDependency_initPackagePrivateWithADXWidgetRun_(self));
    }
    if (dimensionBehavior_ != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
        ADXConstraintWidget *parent = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(widget_)) getParent]);
        if (parent != nil && [parent getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
          jint resolvedDimension = [parent getHeight] - [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mTop_)) getMargin] - [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mBottom_)) getMargin];
          [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->start_ withInt:[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mTop_)) getMargin]];
          [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->end_ withInt:-[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mBottom_)) getMargin]];
          [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:resolvedDimension];
          return;
        }
      }
      if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
        [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:[((ADXConstraintWidget *) nil_chk(widget_)) getHeight]];
      }
    }
  }
  else {
    if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
      ADXConstraintWidget *parent = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(widget_)) getParent]);
      if (parent != nil && [parent getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->start_ withInt:[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mTop_)) getMargin]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->end_ withInt:-[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mBottom_)) getMargin]];
        return;
      }
    }
  }
  if (((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ && ((ADXConstraintWidget *) nil_chk(widget_))->measured_) {
    if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP)))->mTarget_ != nil && ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)))->mTarget_ != nil) {
      if ([widget_ isInVerticalChain]) {
        ((ADXDependencyNode *) nil_chk(start_))->margin_ = [((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP))) getMargin];
        ((ADXDependencyNode *) nil_chk(end_))->margin_ = -[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM))) getMargin];
      }
      else {
        ADXDependencyNode *startTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP)]);
        if (startTarget != nil) {
          [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:startTarget withInt:[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP))) getMargin]];
        }
        ADXDependencyNode *endTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM)]);
        if (endTarget != nil) {
          [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:endTarget withInt:-[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM))) getMargin]];
        }
        ((ADXDependencyNode *) nil_chk(start_))->delegateToWidgetRun_ = true;
        ((ADXDependencyNode *) nil_chk(end_))->delegateToWidgetRun_ = true;
      }
      if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
        [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getBaselineDistance]];
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_TOP)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_TOP)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:target withInt:[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP))) getMargin]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:((ADXDimensionDependency *) nil_chk(dimension_))->value_];
        if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
          [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getBaselineDistance]];
        }
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:target withInt:-[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM))) getMargin]];
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:end_ withInt:-((ADXDimensionDependency *) nil_chk(dimension_))->value_];
      }
      if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
        [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getBaselineDistance]];
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BASELINE)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BASELINE)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:target withInt:0];
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:baseline_ withInt:-[((ADXConstraintWidget *) nil_chk(widget_)) getBaselineDistance]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:((ADXDimensionDependency *) nil_chk(dimension_))->value_];
      }
    }
    else {
      if (!([ADXHelper_class_() isInstance:widget_]) && [widget_ getParent] != nil && ((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget_)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]))->mTarget_ == nil) {
        ADXDependencyNode *top = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk([((ADXConstraintWidget *) nil_chk(widget_)) getParent]))->verticalRun_))->start_);
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:top withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getY]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:((ADXDimensionDependency *) nil_chk(dimension_))->value_];
        if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
          [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getBaselineDistance]];
        }
      }
    }
  }
  else {
    if (!dimension_->resolved_ && dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      switch (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultHeight_) {
        case ADXConstraintWidget_MATCH_CONSTRAINT_RATIO:
        {
          if (![widget_ isInVerticalChain]) {
            if (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
              break;
            }
            ADXDependencyNode *targetDimension = JreRetainedLocalValue(((ADXHorizontalWidgetRun *) nil_chk(widget_->horizontalRun_))->dimension_);
            [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:targetDimension];
            [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(targetDimension))->dependencies_)) addWithId:dimension_];
            ((ADXDimensionDependency *) nil_chk(dimension_))->delegateToWidgetRun_ = true;
            [((id<JavaUtilList>) nil_chk(dimension_->dependencies_)) addWithId:start_];
            [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->dependencies_)) addWithId:end_];
          }
        }
        break;
        case ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT:
        {
          ADXConstraintWidget *parent = JreRetainedLocalValue([widget_ getParent]);
          if (parent == nil) {
            break;
          }
          ADXDependencyNode *targetDimension = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->dimension_);
          [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:targetDimension];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(targetDimension))->dependencies_)) addWithId:dimension_];
          ((ADXDimensionDependency *) nil_chk(dimension_))->delegateToWidgetRun_ = true;
          [((id<JavaUtilList>) nil_chk(dimension_->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->dependencies_)) addWithId:end_];
        }
        break;
        case ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD:
        {
        }
        break;
        default:
        break;
      }
    }
    else {
      [dimension_ addDependencyWithADXDependency:self];
    }
    if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP)))->mTarget_ != nil && ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)))->mTarget_ != nil) {
      if ([widget_ isInVerticalChain]) {
        ((ADXDependencyNode *) nil_chk(start_))->margin_ = [((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP))) getMargin];
        ((ADXDependencyNode *) nil_chk(end_))->margin_ = -[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM))) getMargin];
      }
      else {
        ADXDependencyNode *startTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP)]);
        ADXDependencyNode *endTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM)]);
        {
          if (startTarget != nil) {
            [startTarget addDependencyWithADXDependency:self];
          }
          if (endTarget != nil) {
            [endTarget addDependencyWithADXDependency:self];
          }
        }
        JreStrongAssign(&mRunType_, JreLoadEnum(ADXWidgetRun_RunType, CENTER));
      }
      if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
        [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:baselineDimension_];
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_TOP)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_TOP)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:target withInt:[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP))) getMargin]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:dimension_];
        if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
          [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:baselineDimension_];
        }
        if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
          if ([((ADXConstraintWidget *) nil_chk(widget_)) getDimensionRatio] > 0) {
            if (((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(widget_->horizontalRun_->dimension_))->dependencies_)) addWithId:dimension_];
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimension_];
              JreStrongAssign(&((ADXDimensionDependency *) nil_chk(dimension_))->updateDelegate_, self);
            }
          }
        }
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:target withInt:-[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_BOTTOM))) getMargin]];
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:end_ withInt:-1 withADXDimensionDependency:dimension_];
        if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
          [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:baselineDimension_];
        }
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BASELINE)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_BASELINE)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:target withInt:0];
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:baseline_ withInt:-1 withADXDimensionDependency:baselineDimension_];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:dimension_];
      }
    }
    else {
      if (!([ADXHelper_class_() isInstance:widget_]) && [widget_ getParent] != nil) {
        ADXDependencyNode *top = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk([((ADXConstraintWidget *) nil_chk(widget_)) getParent]))->verticalRun_))->start_);
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:top withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getY]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:dimension_];
        if ([((ADXConstraintWidget *) nil_chk(widget_)) hasBaseline]) {
          [self addTargetWithADXDependencyNode:baseline_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:baselineDimension_];
        }
        if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
          if ([((ADXConstraintWidget *) nil_chk(widget_)) getDimensionRatio] > 0) {
            if (((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(widget_->horizontalRun_->dimension_))->dependencies_)) addWithId:dimension_];
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->dimension_];
              JreStrongAssign(&((ADXDimensionDependency *) nil_chk(dimension_))->updateDelegate_, self);
            }
          }
        }
      }
    }
    if ([((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) size] == 0) {
      ((ADXDimensionDependency *) nil_chk(dimension_))->readyToSolve_ = true;
    }
  }
}

- (void)applyToWidget {
  if (((ADXDependencyNode *) nil_chk(start_))->resolved_) {
    [((ADXConstraintWidget *) nil_chk(widget_)) setYWithInt:start_->value_];
  }
}

- (void)dealloc {
  RELEASE_(baseline_);
  RELEASE_(baselineDimension_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXConstraintWidget:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(clear);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(supportsWrapComputation);
  methods[5].selector = @selector(updateWithADXDependency:);
  methods[6].selector = @selector(apply);
  methods[7].selector = @selector(applyToWidget);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "baseline_", "LADXDependencyNode;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineDimension_", "LADXDimensionDependency;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXConstraintWidget;", "toString", "update", "LADXDependency;" };
  static const J2ObjcClassInfo _ADXVerticalWidgetRun = { "VerticalWidgetRun", "androidx.constraintlayout.core.widgets.analyzer", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_ADXVerticalWidgetRun;
}

@end

void ADXVerticalWidgetRun_initWithADXConstraintWidget_(ADXVerticalWidgetRun *self, ADXConstraintWidget *widget) {
  ADXWidgetRun_initWithADXConstraintWidget_(self, widget);
  JreStrongAssignAndConsume(&self->baseline_, new_ADXDependencyNode_initWithADXWidgetRun_(self));
  JreStrongAssign(&self->baselineDimension_, nil);
  JreStrongAssign(&((ADXDependencyNode *) nil_chk(self->start_))->type_, JreLoadEnum(ADXDependencyNode_Type, TOP));
  JreStrongAssign(&((ADXDependencyNode *) nil_chk(self->end_))->type_, JreLoadEnum(ADXDependencyNode_Type, BOTTOM));
  JreStrongAssign(&self->baseline_->type_, JreLoadEnum(ADXDependencyNode_Type, BASELINE));
  self->orientation_ = ADXConstraintWidget_VERTICAL;
}

ADXVerticalWidgetRun *new_ADXVerticalWidgetRun_initWithADXConstraintWidget_(ADXConstraintWidget *widget) {
  J2OBJC_NEW_IMPL(ADXVerticalWidgetRun, initWithADXConstraintWidget_, widget)
}

ADXVerticalWidgetRun *create_ADXVerticalWidgetRun_initWithADXConstraintWidget_(ADXConstraintWidget *widget) {
  J2OBJC_CREATE_IMPL(ADXVerticalWidgetRun, initWithADXConstraintWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXVerticalWidgetRun)
