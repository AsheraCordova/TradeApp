//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\graphics\drawable\ShapeDrawable.java
//

#include "Drawable.h"
#include "J2ObjC_source.h"
#include "ShapeDrawable.h"
#include "java/lang/Math.h"


@interface ADShapeDrawable () {
 @public
  NSString *type_;
  ADShapeDrawable_Stroke *stroke_;
  ADShapeDrawable_Size *size_;
}

@end

J2OBJC_FIELD_SETTER(ADShapeDrawable, type_, NSString *)
J2OBJC_FIELD_SETTER(ADShapeDrawable, stroke_, ADShapeDrawable_Stroke *)
J2OBJC_FIELD_SETTER(ADShapeDrawable, size_, ADShapeDrawable_Size *)

@implementation ADShapeDrawable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADShapeDrawable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getType {
  return type_;
}

- (void)setTypeWithNSString:(NSString *)type {
  JreStrongAssign(&self->type_, type);
}

- (jint)getStrokeWidth {
  return ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->width_;
}

- (void)setStrokeWidthWithInt:(jint)width {
  ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->width_ = width;
}

- (jint)getStrokeHeight {
  return ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->height_;
}

- (void)setStrokeHeightWithInt:(jint)height {
  ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->height_ = height;
}

- (id)getStrokeColor {
  return ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->color_;
}

- (void)setStrokeColorWithId:(id)color {
  JreStrongAssign(&((ADShapeDrawable_Stroke *) nil_chk(stroke_))->color_, color);
}

- (jint)getStrokeDashWidth {
  return ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->dashWidth_;
}

- (void)setStrokDashWidthWithInt:(jint)dashWidth {
  ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->dashWidth_ = dashWidth;
}

- (jint)getStrokeDashGap {
  return ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->dashGap_;
}

- (void)setStrokDashGapWithInt:(jint)dashGap {
  ((ADShapeDrawable_Stroke *) nil_chk(stroke_))->dashGap_ = dashGap;
}

- (jint)getHeight {
  return ((ADShapeDrawable_Size *) nil_chk(size_))->height_;
}

- (void)setHeightWithInt:(jint)height {
  ((ADShapeDrawable_Size *) nil_chk(size_))->height_ = height;
}

- (jint)getWidth {
  return ((ADShapeDrawable_Size *) nil_chk(size_))->width_;
}

- (void)setWidthWithInt:(jint)width {
  ((ADShapeDrawable_Size *) nil_chk(size_))->width_ = width;
}

- (jint)getMinimumWidth {
  return JavaLangMath_maxWithInt_withInt_([super getMinimumWidth], ((ADShapeDrawable_Size *) nil_chk(size_))->width_);
}

- (jint)getMinimumHeight {
  return JavaLangMath_maxWithInt_withInt_([super getMinimumHeight], ((ADShapeDrawable_Size *) nil_chk(size_))->height_);
}

- (void)invalidateSelf {
  [super invalidateSelf];
  [self setRedrawWithBoolean:true];
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(stroke_);
  RELEASE_(size_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getType);
  methods[2].selector = @selector(setTypeWithNSString:);
  methods[3].selector = @selector(getStrokeWidth);
  methods[4].selector = @selector(setStrokeWidthWithInt:);
  methods[5].selector = @selector(getStrokeHeight);
  methods[6].selector = @selector(setStrokeHeightWithInt:);
  methods[7].selector = @selector(getStrokeColor);
  methods[8].selector = @selector(setStrokeColorWithId:);
  methods[9].selector = @selector(getStrokeDashWidth);
  methods[10].selector = @selector(setStrokDashWidthWithInt:);
  methods[11].selector = @selector(getStrokeDashGap);
  methods[12].selector = @selector(setStrokDashGapWithInt:);
  methods[13].selector = @selector(getHeight);
  methods[14].selector = @selector(setHeightWithInt:);
  methods[15].selector = @selector(getWidth);
  methods[16].selector = @selector(setWidthWithInt:);
  methods[17].selector = @selector(getMinimumWidth);
  methods[18].selector = @selector(getMinimumHeight);
  methods[19].selector = @selector(invalidateSelf);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "stroke_", "LADShapeDrawable_Stroke;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "size_", "LADShapeDrawable_Size;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setType", "LNSString;", "setStrokeWidth", "I", "setStrokeHeight", "setStrokeColor", "LNSObject;", "setStrokDashWidth", "setStrokDashGap", "setHeight", "setWidth", "LADShapeDrawable_Stroke;LADShapeDrawable_Size;" };
  static const J2ObjcClassInfo _ADShapeDrawable = { "ShapeDrawable", "r.android.graphics.drawable", ptrTable, methods, fields, 7, 0x1, 20, 3, -1, 11, -1, -1, -1 };
  return &_ADShapeDrawable;
}

@end

void ADShapeDrawable_init(ADShapeDrawable *self) {
  ADDrawable_init(self);
  JreStrongAssignAndConsume(&self->stroke_, new_ADShapeDrawable_Stroke_initWithADShapeDrawable_(self));
  JreStrongAssignAndConsume(&self->size_, new_ADShapeDrawable_Size_initWithADShapeDrawable_(self));
}

ADShapeDrawable *new_ADShapeDrawable_init() {
  J2OBJC_NEW_IMPL(ADShapeDrawable, init)
}

ADShapeDrawable *create_ADShapeDrawable_init() {
  J2OBJC_CREATE_IMPL(ADShapeDrawable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADShapeDrawable)

@implementation ADShapeDrawable_Stroke

- (instancetype)initWithADShapeDrawable:(ADShapeDrawable *)outer$ {
  ADShapeDrawable_Stroke_initWithADShapeDrawable_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(color_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADShapeDrawable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "width_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "height_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "color_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dashWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dashGap_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADShapeDrawable;" };
  static const J2ObjcClassInfo _ADShapeDrawable_Stroke = { "Stroke", "r.android.graphics.drawable", ptrTable, methods, fields, 7, 0x0, 1, 5, 0, -1, -1, -1, -1 };
  return &_ADShapeDrawable_Stroke;
}

@end

void ADShapeDrawable_Stroke_initWithADShapeDrawable_(ADShapeDrawable_Stroke *self, ADShapeDrawable *outer$) {
  NSObject_init(self);
  self->width_ = -1;
  self->height_ = -1;
  self->dashWidth_ = -1;
  self->dashGap_ = -1;
}

ADShapeDrawable_Stroke *new_ADShapeDrawable_Stroke_initWithADShapeDrawable_(ADShapeDrawable *outer$) {
  J2OBJC_NEW_IMPL(ADShapeDrawable_Stroke, initWithADShapeDrawable_, outer$)
}

ADShapeDrawable_Stroke *create_ADShapeDrawable_Stroke_initWithADShapeDrawable_(ADShapeDrawable *outer$) {
  J2OBJC_CREATE_IMPL(ADShapeDrawable_Stroke, initWithADShapeDrawable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADShapeDrawable_Stroke)

@implementation ADShapeDrawable_Size

- (instancetype)initWithADShapeDrawable:(ADShapeDrawable *)outer$ {
  ADShapeDrawable_Size_initWithADShapeDrawable_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADShapeDrawable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "height_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADShapeDrawable;" };
  static const J2ObjcClassInfo _ADShapeDrawable_Size = { "Size", "r.android.graphics.drawable", ptrTable, methods, fields, 7, 0x0, 1, 2, 0, -1, -1, -1, -1 };
  return &_ADShapeDrawable_Size;
}

@end

void ADShapeDrawable_Size_initWithADShapeDrawable_(ADShapeDrawable_Size *self, ADShapeDrawable *outer$) {
  NSObject_init(self);
  self->height_ = -1;
  self->width_ = -1;
}

ADShapeDrawable_Size *new_ADShapeDrawable_Size_initWithADShapeDrawable_(ADShapeDrawable *outer$) {
  J2OBJC_NEW_IMPL(ADShapeDrawable_Size, initWithADShapeDrawable_, outer$)
}

ADShapeDrawable_Size *create_ADShapeDrawable_Size_initWithADShapeDrawable_(ADShapeDrawable *outer$) {
  J2OBJC_CREATE_IMPL(ADShapeDrawable_Size, initWithADShapeDrawable_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADShapeDrawable_Size)
