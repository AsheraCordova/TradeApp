//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_HtmlParser\src\com\ashera\parser\html\HtmlToSpannedConverter.java
//

#include "AttributedString.h"
#include "AugmentedIntervalTree.h"
#include "BulletInterval.h"
#include "CssDataHolder.h"
#include "CssResult.h"
#include "CssTree.h"
#include "Html.h"
#include "HtmlToSpannedConverter.h"
#include "IFragment.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ImageInterval.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "StyleInterval.h"
#include "StyleSheet.h"
#include "TagSoupParser.h"
#include "UrlInterval.h"
#include "WidgetAttribute.h"
#include "WidgetAttributeMap.h"
#include "WidgetAttributeValue.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/Stack.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/Locator.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/XMLReader.h"

@class JavaLangStringBuilder;
@class JavaUtilStack;
@protocol JavaUtilMap;
@protocol OrgXmlSaxAttributes;
@protocol OrgXmlSaxXMLReader;


@interface ASHtmlToSpannedConverter () {
 @public
  NSString *mSource_;
  id<OrgXmlSaxXMLReader> mReader_;
  JavaUtilStack *lineStart_;
  JavaUtilStack *attributesStack_;
  JavaLangStringBuilder *text_;
  ASAugmentedIntervalTree *intervalTree_;
  id<ASAttributedString> spannableString_;
  id<ASIFragment> fragment_;
  jint bulletIndent_;
  jint bulletIndentInc_;
  jint bulletSpacing_;
  CSSCssDataHolder *pageData_;
  JavaUtilStack *widgetAttributeMaps_;
  id<JavaUtilMap> htmlConfig_;
}

- (ASWidgetAttributeMap *)getAttributesWithNSString:(NSString *)localName
                            withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts;

- (jboolean)checkIfNotSupportedWithNSString:(NSString *)localName
                               withNSString:(NSString *)key;

@end

J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, mSource_, NSString *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, mReader_, id<OrgXmlSaxXMLReader>)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, lineStart_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, attributesStack_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, text_, JavaLangStringBuilder *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, intervalTree_, ASAugmentedIntervalTree *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, spannableString_, id<ASAttributedString>)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, fragment_, id<ASIFragment>)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, pageData_, CSSCssDataHolder *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, widgetAttributeMaps_, JavaUtilStack *)
J2OBJC_FIELD_SETTER(ASHtmlToSpannedConverter, htmlConfig_, id<JavaUtilMap>)

__attribute__((unused)) static ASWidgetAttributeMap *ASHtmlToSpannedConverter_getAttributesWithNSString_withOrgXmlSaxAttributes_(ASHtmlToSpannedConverter *self, NSString *localName, id<OrgXmlSaxAttributes> atts);

__attribute__((unused)) static jboolean ASHtmlToSpannedConverter_checkIfNotSupportedWithNSString_withNSString_(ASHtmlToSpannedConverter *self, NSString *localName, NSString *key);

@interface ASHtmlToSpannedConverter_1 : NSObject < CSSCssResult > {
 @public
  ASHtmlToSpannedConverter *this$0_;
  NSString *val$localName_;
  ASWidgetAttributeMap *val$styles_;
}

- (instancetype)initWithASHtmlToSpannedConverter:(ASHtmlToSpannedConverter *)outer$
                                    withNSString:(NSString *)capture$0
                        withASWidgetAttributeMap:(ASWidgetAttributeMap *)capture$1;

- (void)putWithNSString:(NSString *)key
withCSSCssTree_Attribute:(CSSCssTree_Attribute *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(ASHtmlToSpannedConverter_1)

__attribute__((unused)) static void ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(ASHtmlToSpannedConverter_1 *self, ASHtmlToSpannedConverter *outer$, NSString *capture$0, ASWidgetAttributeMap *capture$1);

__attribute__((unused)) static ASHtmlToSpannedConverter_1 *new_ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(ASHtmlToSpannedConverter *outer$, NSString *capture$0, ASWidgetAttributeMap *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASHtmlToSpannedConverter_1 *create_ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(ASHtmlToSpannedConverter *outer$, NSString *capture$0, ASWidgetAttributeMap *capture$1);

@implementation ASHtmlToSpannedConverter

- (instancetype)initWithNSString:(NSString *)source
             withTSTagSoupParser:(TSTagSoupParser *)parser
                 withJavaUtilMap:(id<JavaUtilMap>)htmlConfig
                 withASIFragment:(id<ASIFragment>)fragment {
  ASHtmlToSpannedConverter_initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_(self, source, parser, htmlConfig, fragment);
  return self;
}

- (id<ASAttributedString>)convert {
  if (mSource_ == nil) {
    JreStrongAssign(&mSource_, @"");
  }
  [((id<OrgXmlSaxXMLReader>) nil_chk(mReader_)) setContentHandlerWithOrgXmlSaxContentHandler:self];
  @try {
    [((id<OrgXmlSaxXMLReader>) nil_chk(mReader_)) parseWithOrgXmlSaxInputSource:create_OrgXmlSaxInputSource_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(mSource_))];
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  [((ASAugmentedIntervalTree *) nil_chk(intervalTree_)) setTextWithNSString:[((JavaLangStringBuilder *) nil_chk(text_)) description]];
  JreStrongAssign(&spannableString_, ASPluginInvoker_createAttributedStringWithASIFragment_withNSString_(fragment_, [((JavaLangStringBuilder *) nil_chk(text_)) description]));
  [((ASAugmentedIntervalTree *) nil_chk(intervalTree_)) applyWithASAttributedString:spannableString_];
  return spannableString_;
}

- (void)setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>)locator {
}

- (void)startDocument {
}

- (void)endDocument {
}

- (void)startPrefixMappingWithNSString:(NSString *)prefix
                          withNSString:(NSString *)uri {
}

- (void)endPrefixMappingWithNSString:(NSString *)prefix {
}

- (void)startElementWithNSString:(NSString *)uri
                    withNSString:(NSString *)localName
                    withNSString:(NSString *)qName
         withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)attributes {
  localName = [((NSString *) nil_chk(localName)) lowercaseString];
  if ([((NSString *) nil_chk(localName)) isEqual:@"body"] || [localName isEqual:@"html"]) {
    return;
  }
  ASWidgetAttributeMap *parent = nil;
  if (![((JavaUtilStack *) nil_chk(widgetAttributeMaps_)) isEmpty]) {
    parent = [((JavaUtilStack *) nil_chk(widgetAttributeMaps_)) peek];
  }
  ASWidgetAttributeMap *widgetAttributeMap = ASHtmlToSpannedConverter_getAttributesWithNSString_withOrgXmlSaxAttributes_(self, localName, attributes);
  [((JavaUtilStack *) nil_chk(widgetAttributeMaps_)) pushWithId:widgetAttributeMap];
  if (parent != nil) {
    [((ASWidgetAttributeMap *) nil_chk(widgetAttributeMap)) setParentWithASWidgetAttributeMap:parent];
  }
  if ([localName isEqual:ASHtml_UNORDERED_LIST]) {
    bulletIndent_ += bulletIndentInc_;
  }
  else if ([localName isEqual:@"div"] && ![((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(text_)) description])) isEqual:@""] && ![((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(text_)) description])) java_hasSuffix:@"\n"]) {
    [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:@"\n"];
  }
  [((JavaUtilStack *) nil_chk(lineStart_)) pushWithId:JavaLangInteger_valueOfWithInt_([((JavaLangStringBuilder *) nil_chk(text_)) java_length])];
  if ([localName isEqual:ASHtml_LIST_ITEM]) {
    NSString *bulletString = ASPluginInvoker_getAttributedBulletHtml();
    if (bulletString != nil) {
      [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:bulletString];
    }
  }
  [((JavaUtilStack *) nil_chk(attributesStack_)) pushWithId:attributes];
}

- (void)endElementWithNSString:(NSString *)uri
                  withNSString:(NSString *)localName
                  withNSString:(NSString *)qName {
  localName = [((NSString *) nil_chk(localName)) lowercaseString];
  if ([((NSString *) nil_chk(localName)) isEqual:@"body"] || [localName isEqual:@"html"]) {
    return;
  }
  if ([localName isEqual:@"div"] && ![((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(text_)) description])) isEqual:@""] && ![((NSString *) nil_chk([((JavaLangStringBuilder *) nil_chk(text_)) description])) java_hasSuffix:@"\n"]) {
    [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:@"\n"];
  }
  jint start = [((JavaLangInteger *) nil_chk([((JavaUtilStack *) nil_chk(lineStart_)) pop])) intValue];
  ASWidgetAttributeMap *style = JreRetainedLocalValue([((JavaUtilStack *) nil_chk(widgetAttributeMaps_)) pop]);
  id<OrgXmlSaxAttributes> attributes = JreRetainedLocalValue([((JavaUtilStack *) nil_chk(attributesStack_)) pop]);
  if ([localName isEqual:@"br"]) {
    [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:@"\n"];
  }
  else if ([localName isEqual:@"a"]) {
    [((ASAugmentedIntervalTree *) nil_chk(intervalTree_)) insertNodeWithASInterval:create_ASUrlInterval_initWithInt_withInt_withASWidgetAttributeMap_withNSString_(start, [((JavaLangStringBuilder *) nil_chk(text_)) java_length], style, [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"" withNSString:@"href"])];
  }
  else if ([localName isEqual:@"img"]) {
    JreStrongAssign(&text_, [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:@"\ufffc"]);
    [((ASAugmentedIntervalTree *) nil_chk(intervalTree_)) insertNodeWithASInterval:create_ASImageInterval_initWithInt_withInt_withNSString_(start, [((JavaLangStringBuilder *) nil_chk(text_)) java_length], [((id<OrgXmlSaxAttributes>) nil_chk(attributes)) getValueWithNSString:@"" withNSString:@"src"])];
  }
  else if ([localName isEqual:ASHtml_UNORDERED_LIST]) {
    bulletIndent_ = bulletIndent_ - bulletIndentInc_;
  }
  else if ([localName isEqual:ASHtml_LIST_ITEM]) {
    JreStrongAssign(&text_, [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:@"\n"]);
    [((ASAugmentedIntervalTree *) nil_chk(intervalTree_)) insertNodeWithASInterval:create_ASBulletInterval_initWithInt_withInt_withASWidgetAttributeMap_withInt_withInt_(start, [((JavaLangStringBuilder *) nil_chk(text_)) java_length], style, bulletIndent_, bulletSpacing_)];
  }
  else {
    [((ASAugmentedIntervalTree *) nil_chk(intervalTree_)) insertNodeWithASInterval:create_ASStyleInterval_initWithInt_withInt_withASWidgetAttributeMap_(start, [((JavaLangStringBuilder *) nil_chk(text_)) java_length], style)];
  }
}

- (void)charactersWithCharArray:(IOSCharArray *)ch
                        withInt:(jint)start
                        withInt:(jint)length {
  NSString *str = [NSString java_stringWithCharacters:ch offset:start length:length];
  id textAllCaps = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(htmlConfig_)) getWithId:@"textAllCaps"]);
  if (textAllCaps != nil && [(JavaLangBoolean *) cast_chk(textAllCaps, [JavaLangBoolean class]) booleanValue]) {
    str = [str uppercaseString];
  }
  IOSObjectArray *arr = [((NSString *) nil_chk(str)) java_split:@"\n"];
  id password = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(htmlConfig_)) getWithId:@"password"]);
  {
    IOSObjectArray *a__ = arr;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *splitStr = *b__++;
      if (password != nil && [(JavaLangBoolean *) cast_chk(password, [JavaLangBoolean class]) booleanValue]) {
        NSString *result = @"";
        for (jint i = 0; i < [((NSString *) nil_chk(splitStr)) java_length]; i++) {
          JreStrAppend(&result, "$", @"*");
        }
        splitStr = result;
      }
      JreStrongAssign(&text_, [((JavaLangStringBuilder *) nil_chk(text_)) appendWithNSString:splitStr]);
    }
  }
}

- (void)ignorableWhitespaceWithCharArray:(IOSCharArray *)ch
                                 withInt:(jint)start
                                 withInt:(jint)length {
}

- (void)processingInstructionWithNSString:(NSString *)target
                             withNSString:(NSString *)data {
}

- (void)skippedEntityWithNSString:(NSString *)name {
}

- (ASWidgetAttributeMap *)getAttributesWithNSString:(NSString *)localName
                            withOrgXmlSaxAttributes:(id<OrgXmlSaxAttributes>)atts {
  return ASHtmlToSpannedConverter_getAttributesWithNSString_withOrgXmlSaxAttributes_(self, localName, atts);
}

- (jboolean)checkIfNotSupportedWithNSString:(NSString *)localName
                               withNSString:(NSString *)key {
  return ASHtmlToSpannedConverter_checkIfNotSupportedWithNSString_withNSString_(self, localName, key);
}

- (void)dealloc {
  RELEASE_(mSource_);
  RELEASE_(mReader_);
  RELEASE_(lineStart_);
  RELEASE_(attributesStack_);
  RELEASE_(text_);
  RELEASE_(intervalTree_);
  RELEASE_(spannableString_);
  RELEASE_(fragment_);
  RELEASE_(pageData_);
  RELEASE_(widgetAttributeMaps_);
  RELEASE_(htmlConfig_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LASAttributedString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 6, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 8, 4, -1, -1, -1 },
    { NULL, "LASWidgetAttributeMap;", 0x2, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 20, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withTSTagSoupParser:withJavaUtilMap:withASIFragment:);
  methods[1].selector = @selector(convert);
  methods[2].selector = @selector(setDocumentLocatorWithOrgXmlSaxLocator:);
  methods[3].selector = @selector(startDocument);
  methods[4].selector = @selector(endDocument);
  methods[5].selector = @selector(startPrefixMappingWithNSString:withNSString:);
  methods[6].selector = @selector(endPrefixMappingWithNSString:);
  methods[7].selector = @selector(startElementWithNSString:withNSString:withNSString:withOrgXmlSaxAttributes:);
  methods[8].selector = @selector(endElementWithNSString:withNSString:withNSString:);
  methods[9].selector = @selector(charactersWithCharArray:withInt:withInt:);
  methods[10].selector = @selector(ignorableWhitespaceWithCharArray:withInt:withInt:);
  methods[11].selector = @selector(processingInstructionWithNSString:withNSString:);
  methods[12].selector = @selector(skippedEntityWithNSString:);
  methods[13].selector = @selector(getAttributesWithNSString:withOrgXmlSaxAttributes:);
  methods[14].selector = @selector(checkIfNotSupportedWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSource_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mReader_", "LOrgXmlSaxXMLReader;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lineStart_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 21, -1 },
    { "attributesStack_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 22, -1 },
    { "text_", "LJavaLangStringBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intervalTree_", "LASAugmentedIntervalTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "spannableString_", "LASAttributedString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LASIFragment;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bulletIndent_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bulletIndentInc_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bulletSpacing_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "pageData_", "LCSSCssDataHolder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widgetAttributeMaps_", "LJavaUtilStack;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LTSTagSoupParser;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Lrepackaged/org/ccil/cowan/tagsoup/TagSoupParser;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)V", "setDocumentLocator", "LOrgXmlSaxLocator;", "LOrgXmlSaxSAXException;", "startPrefixMapping", "LNSString;LNSString;", "endPrefixMapping", "LNSString;", "startElement", "LNSString;LNSString;LNSString;LOrgXmlSaxAttributes;", "endElement", "LNSString;LNSString;LNSString;", "characters", "[CII", "ignorableWhitespace", "processingInstruction", "skippedEntity", "getAttributes", "LNSString;LOrgXmlSaxAttributes;", "checkIfNotSupported", "Ljava/util/Stack<Ljava/lang/Integer;>;", "Ljava/util/Stack<Lorg/xml/sax/Attributes;>;", "Ljava/util/Stack<Lcom/ashera/widget/WidgetAttributeMap;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASHtmlToSpannedConverter = { "HtmlToSpannedConverter", "com.ashera.parser.html", ptrTable, methods, fields, 7, 0x1, 15, 14, -1, -1, -1, -1, -1 };
  return &_ASHtmlToSpannedConverter;
}

@end

void ASHtmlToSpannedConverter_initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_(ASHtmlToSpannedConverter *self, NSString *source, TSTagSoupParser *parser, id<JavaUtilMap> htmlConfig, id<ASIFragment> fragment) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->lineStart_, new_JavaUtilStack_init());
  JreStrongAssignAndConsume(&self->attributesStack_, new_JavaUtilStack_init());
  JreStrongAssignAndConsume(&self->text_, new_JavaLangStringBuilder_init());
  JreStrongAssignAndConsume(&self->widgetAttributeMaps_, new_JavaUtilStack_init());
  JreStrongAssign(&self->mSource_, source);
  JreStrongAssign(&self->mReader_, parser);
  JreStrongAssign(&self->htmlConfig_, htmlConfig);
  if (self->htmlConfig_ == nil) {
    JreStrongAssignAndConsume(&self->htmlConfig_, new_JavaUtilHashMap_initWithInt_(0));
  }
  JreStrongAssign(&self->fragment_, fragment);
  JreStrongAssign(&self->pageData_, (CSSCssDataHolder *) cast_chk([((id<ASIFragment>) nil_chk(fragment)) getStyleSheet], [CSSCssDataHolder class]));
  JreStrongAssignAndConsume(&self->intervalTree_, new_ASAugmentedIntervalTree_initWithJavaUtilMap_withASIFragment_(htmlConfig, fragment));
  self->bulletIndentInc_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"20dp"));
  self->bulletIndent_ = self->bulletIndentInc_ * -1;
  self->bulletSpacing_ = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"10dp"));
}

ASHtmlToSpannedConverter *new_ASHtmlToSpannedConverter_initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_(NSString *source, TSTagSoupParser *parser, id<JavaUtilMap> htmlConfig, id<ASIFragment> fragment) {
  J2OBJC_NEW_IMPL(ASHtmlToSpannedConverter, initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_, source, parser, htmlConfig, fragment)
}

ASHtmlToSpannedConverter *create_ASHtmlToSpannedConverter_initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_(NSString *source, TSTagSoupParser *parser, id<JavaUtilMap> htmlConfig, id<ASIFragment> fragment) {
  J2OBJC_CREATE_IMPL(ASHtmlToSpannedConverter, initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_, source, parser, htmlConfig, fragment)
}

ASWidgetAttributeMap *ASHtmlToSpannedConverter_getAttributesWithNSString_withOrgXmlSaxAttributes_(ASHtmlToSpannedConverter *self, NSString *localName, id<OrgXmlSaxAttributes> atts) {
  ASWidgetAttributeMap *styles = create_ASWidgetAttributeMap_init();
  [((CSSCssDataHolder *) nil_chk(self->pageData_)) getCssWithNSString:localName withNSString:[((id<OrgXmlSaxAttributes>) nil_chk(atts)) getValueWithNSString:@"class"] withNSString:[atts getValueWithNSString:@"id"] withCSSCssResult:create_ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(self, localName, styles)];
  for (jint i = 0; i < [atts getLength]; i++) {
    NSString *key = JreRetainedLocalValue([atts getLocalNameWithInt:i]);
    ASWidgetAttribute *attribute = [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk(ASWidgetAttribute_builder())) withNameWithNSString:key])) withTypeWithNSString:@"string"])) build];
    if (ASHtmlToSpannedConverter_checkIfNotSupportedWithNSString_withNSString_(self, localName, key)) {
      continue;
    }
    if (attribute != nil) {
      ASWidgetAttributeValue *attributeValue = create_ASWidgetAttributeValue_initWithNSString_([atts getValueWithNSString:key]);
      [styles putWithASWidgetAttribute:attribute withASWidgetAttributeValue:attributeValue];
    }
  }
  return styles;
}

jboolean ASHtmlToSpannedConverter_checkIfNotSupportedWithNSString_withNSString_(ASHtmlToSpannedConverter *self, NSString *localName, NSString *key) {
  jboolean textAlign = ([((NSString *) nil_chk(key)) isEqual:@"text-align"] || [key isEqual:@"textAlign"]) && ![((NSString *) nil_chk(localName)) isEqual:@"div"];
  jboolean background = ([key isEqual:@"background-color"] || [key isEqual:@"background"]) && [((NSString *) nil_chk(localName)) isEqual:@"div"];
  return textAlign || background;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHtmlToSpannedConverter)

@implementation ASHtmlToSpannedConverter_1

- (instancetype)initWithASHtmlToSpannedConverter:(ASHtmlToSpannedConverter *)outer$
                                    withNSString:(NSString *)capture$0
                        withASWidgetAttributeMap:(ASWidgetAttributeMap *)capture$1 {
  ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(self, outer$, capture$0, capture$1);
  return self;
}

- (void)putWithNSString:(NSString *)key
withCSSCssTree_Attribute:(CSSCssTree_Attribute *)value {
  ASWidgetAttribute *attribute = JreRetainedLocalValue([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk(ASWidgetAttribute_builder())) withNameWithNSString:key])) withTypeWithNSString:@"string"])) build]);
  if (ASHtmlToSpannedConverter_checkIfNotSupportedWithNSString_withNSString_(this$0_, val$localName_, key)) {
    return;
  }
  if (attribute != nil) {
    ASWidgetAttributeValue *attributeValue = create_ASWidgetAttributeValue_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(((CSSCssTree_Attribute *) nil_chk(value))->value_, value->orientation_, value->minWidth_, value->minHeight_, value->maxWidth_, value->maxHeight_);
    [((ASWidgetAttributeMap *) nil_chk(val$styles_)) putWithASWidgetAttribute:attribute withASWidgetAttributeValue:attributeValue];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$localName_);
  RELEASE_(val$styles_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASHtmlToSpannedConverter:withNSString:withASWidgetAttributeMap:);
  methods[1].selector = @selector(putWithNSString:withCSSCssTree_Attribute:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASHtmlToSpannedConverter;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$localName_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$styles_", "LASWidgetAttributeMap;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASHtmlToSpannedConverter;LNSString;LASWidgetAttributeMap;", "put", "LNSString;LCSSCssTree_Attribute;", "LASHtmlToSpannedConverter;", "getAttributesWithNSString:withOrgXmlSaxAttributes:" };
  static const J2ObjcClassInfo _ASHtmlToSpannedConverter_1 = { "", "com.ashera.parser.html", ptrTable, methods, fields, 7, 0x8010, 2, 3, 3, -1, 4, -1, -1 };
  return &_ASHtmlToSpannedConverter_1;
}

@end

void ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(ASHtmlToSpannedConverter_1 *self, ASHtmlToSpannedConverter *outer$, NSString *capture$0, ASWidgetAttributeMap *capture$1) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$localName_, capture$0);
  JreStrongAssign(&self->val$styles_, capture$1);
  NSObject_init(self);
}

ASHtmlToSpannedConverter_1 *new_ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(ASHtmlToSpannedConverter *outer$, NSString *capture$0, ASWidgetAttributeMap *capture$1) {
  J2OBJC_NEW_IMPL(ASHtmlToSpannedConverter_1, initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_, outer$, capture$0, capture$1)
}

ASHtmlToSpannedConverter_1 *create_ASHtmlToSpannedConverter_1_initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_(ASHtmlToSpannedConverter *outer$, NSString *capture$0, ASWidgetAttributeMap *capture$1) {
  J2OBJC_CREATE_IMPL(ASHtmlToSpannedConverter_1, initWithASHtmlToSpannedConverter_withNSString_withASWidgetAttributeMap_, outer$, capture$0, capture$1)
}
