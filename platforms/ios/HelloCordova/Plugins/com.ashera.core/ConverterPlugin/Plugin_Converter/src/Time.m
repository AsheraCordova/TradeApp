//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\Time.java
//

#include "BaseValidator.h"
#include "IFragment.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "ResourceBundleUtils.h"
#include "Time.h"
#include "Validation.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class JavaUtilRegexMatcher;
@class JavaUtilRegexPattern;


@interface ASTime () {
 @public
  JavaUtilRegexPattern *pattern_;
  JavaUtilRegexMatcher *matcher_;
}

@end

J2OBJC_FIELD_SETTER(ASTime, pattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(ASTime, matcher_, JavaUtilRegexMatcher *)

inline NSString *ASTime_get_TIME24HOURS_PATTERN(void);
static NSString *ASTime_TIME24HOURS_PATTERN = @"([01]?[0-9]|2[0-3]):[0-5][0-9]";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTime, TIME24HOURS_PATTERN, NSString *)

@implementation ASTime

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  return create_ASTime_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTime_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/time_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
  return res;
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil || [text java_isEmpty]) {
    return true;
  }
  return [self validateWithNSString:text];
}

- (jboolean)validateWithNSString:(NSString *)time {
  JreStrongAssign(&pattern_, JavaUtilRegexPattern_compileWithNSString_(ASTime_TIME24HOURS_PATTERN));
  JreStrongAssign(&matcher_, [((JavaUtilRegexPattern *) nil_chk(pattern_)) matcherWithJavaLangCharSequence:time]);
  return [((JavaUtilRegexMatcher *) nil_chk(matcher_)) matches];
}

- (void)dealloc {
  RELEASE_(pattern_);
  RELEASE_(matcher_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstanceWithNSStringArray:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[3].selector = @selector(isValidWithNSString:withASIWidget:);
  methods[4].selector = @selector(validateWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "pattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "matcher_", "LJavaUtilRegexMatcher;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TIME24HOURS_PATTERN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;", "validate", "LNSString;", &ASTime_TIME24HOURS_PATTERN };
  static const J2ObjcClassInfo _ASTime = { "Time", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 5, 3, -1, -1, -1, -1, -1 };
  return &_ASTime;
}

@end

void ASTime_init(ASTime *self) {
  ASBaseValidator_init(self);
}

ASTime *new_ASTime_init() {
  J2OBJC_NEW_IMPL(ASTime, init)
}

ASTime *create_ASTime_init() {
  J2OBJC_CREATE_IMPL(ASTime, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTime)
