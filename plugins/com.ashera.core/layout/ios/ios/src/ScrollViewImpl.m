//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ScrollViewImpl.java
//

#include "BaseHasWidgets.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FrameLayout.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "ScrollView.h"
#include "ScrollViewImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIScrollView.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASScrollViewImpl () {
 @public
  id uiView_;
  ADScrollView *scrollView_;
  ASScrollViewImpl_ScrollViewCommandBuilder *builder_;
  ASScrollViewImpl_ScrollViewBean *bean_;
  ASScrollViewImpl_ScrollViewCommandParamsBuilder *paramsBuilder_;
  ASScrollViewImpl_ScrollViewParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setScrollXWithId:(id)objValue;

- (void)setScrollYWithId:(id)objValue;

- (void)setOnScrollWithId:(id)objValue;

- (void)setPreventAutoScrollWithId:(id)objValue;

- (void)nativeSetPreventAutoScrollWithBoolean:(jboolean)preventAutoScroll;

@end

J2OBJC_FIELD_SETTER(ASScrollViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASScrollViewImpl, scrollView_, ADScrollView *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl, builder_, ASScrollViewImpl_ScrollViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl, bean_, ASScrollViewImpl_ScrollViewBean *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl, paramsBuilder_, ASScrollViewImpl_ScrollViewCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl, paramsBean_, ASScrollViewImpl_ScrollViewParamsBean *)

__attribute__((unused)) static void ASScrollViewImpl_setWidgetOnNativeClass(ASScrollViewImpl *self);

__attribute__((unused)) static void ASScrollViewImpl_createLayoutParamsWithADView_(ASScrollViewImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASScrollViewImpl_getLayoutParamsWithADView_(ASScrollViewImpl *self, ADView *view);

__attribute__((unused)) static void ASScrollViewImpl_nativeCreateWithJavaUtilMap_(ASScrollViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASScrollViewImpl_setScrollXWithId_(ASScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASScrollViewImpl_setScrollYWithId_(ASScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASScrollViewImpl_setOnScrollWithId_(ASScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASScrollViewImpl_setPreventAutoScrollWithId_(ASScrollViewImpl *self, id objValue);

__attribute__((unused)) static void ASScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(ASScrollViewImpl *self, jboolean preventAutoScroll);

@interface ASScrollViewImpl_ScrollViewExt () {
 @public
  __unsafe_unretained ASScrollViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASScrollViewImpl_ScrollViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl_ScrollViewExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASScrollViewImpl_OnScrollChangeListener : NSObject < ADView_OnScrollChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onScrollChangeWithADView:(ADView *)v
                         withInt:(jint)scrollX
                         withInt:(jint)scrollY
                         withInt:(jint)oldScrollX
                         withInt:(jint)oldScrollY;

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADView:(ADView *)v
                                               withInt:(jint)scrollX
                                               withInt:(jint)scrollY
                                               withInt:(jint)oldScrollX
                                               withInt:(jint)oldScrollY;

@end

J2OBJC_EMPTY_STATIC_INIT(ASScrollViewImpl_OnScrollChangeListener)

J2OBJC_FIELD_SETTER(ASScrollViewImpl_OnScrollChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASScrollViewImpl_OnScrollChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl_OnScrollChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASScrollViewImpl_OnScrollChangeListener, action_, NSString *)

__attribute__((unused)) static void ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(ASScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASScrollViewImpl_OnScrollChangeListener *new_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASScrollViewImpl_OnScrollChangeListener *create_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(ASScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASScrollViewImpl_OnScrollChangeListener *new_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASScrollViewImpl_OnScrollChangeListener *create_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASScrollViewImpl_OnScrollChangeListener)

@interface ASScrollViewImpl_ScrollViewCommandBuilder () {
 @public
  ASScrollViewImpl *this$0_;
}

@end

@interface ASScrollViewImpl_ScrollViewBean () {
 @public
  ASScrollViewImpl *this$0_;
}

@end

@interface ASScrollViewImpl_ScrollViewParamsBean () {
 @public
  ASScrollViewImpl *this$0_;
}

@end

@interface ASScrollViewImpl_MyUIScrollViewDelegate () {
 @public
  __unsafe_unretained ASScrollViewImpl *this$0_;
  id<ADView_OnScrollChangeListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASScrollViewImpl_MyUIScrollViewDelegate, listener_, id<ADView_OnScrollChangeListener>)

NSString *ASScrollViewImpl_LOCAL_NAME = @"ScrollView";
NSString *ASScrollViewImpl_GROUP_NAME = @"ScrollView";

@implementation ASScrollViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureAllChildren"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fillViewport"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollY"])) withTypeWithNSString:@"dimension"])) withBufferStrategyWithInt:ASIWidget_BUFFER_STRATEGY_DURING_INIT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onScrollChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPreventAutoScroll"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASScrollViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASScrollViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASScrollViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASScrollViewImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  scrollView_ = new_ASScrollViewImpl_ScrollViewExt_initWithASScrollViewImpl_(self);
  ASScrollViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASScrollViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASScrollViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return scrollView_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADScrollView *) nil_chk(scrollView_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADScrollView *) nil_chk(scrollView_)) getChildCount]) {
    [((ADScrollView *) nil_chk(scrollView_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASScrollViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADScrollView *) nil_chk(scrollView_)) addViewWithADView:view];
    }
    else {
      [((ADScrollView *) nil_chk(scrollView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASScrollViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASScrollViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASScrollViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASScrollViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity" }, 3)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASScrollViewImpl_ScrollViewExt *) nil_chk(((ASScrollViewImpl_ScrollViewExt *) cast_chk(scrollView_, [ASScrollViewImpl_ScrollViewExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"foregroundGravity", @"measureAllChildren", @"fillViewport", @"scrollY", @"onScrollChange", @"iosPreventAutoScroll" }, 6)) {
    case 0:
    {
      [((ADScrollView *) nil_chk(scrollView_)) setForegroundGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADScrollView *) nil_chk(scrollView_)) setMeasureAllChildrenWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 2:
    {
      [((ADScrollView *) nil_chk(scrollView_)) setFillViewportWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 3:
    {
      ASScrollViewImpl_setScrollYWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASScrollViewImpl_setOnScrollWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASScrollViewImpl_setPreventAutoScrollWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"measureAllChildren", @"fillViewport", @"scrollY" }, 3)) {
    case 0:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADScrollView *) nil_chk(scrollView_)) getMeasureAllChildren]);
      }
    }
    case 1:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADScrollView *) nil_chk(scrollView_)) isFillViewport]);
    }
    case 2:
    {
      return [self getScrollY];
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADScrollView *) nil_chk(scrollView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASScrollViewImpl_ScrollViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASScrollViewImpl_ScrollViewBean_initWithASScrollViewImpl_(self);
  }
  return bean_;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASScrollViewImpl_ScrollViewCommandBuilder_initWithASScrollViewImpl_(self);
  }
  return builder_;
}

- (ASScrollViewImpl_ScrollViewParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASScrollViewImpl_ScrollViewParamsBean_initWithASScrollViewImpl_(self);
  }
  return paramsBean_;
}

- (ASScrollViewImpl_ScrollViewCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASScrollViewImpl_ScrollViewCommandParamsBuilder_initWithASScrollViewImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASScrollViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativescrollViewCreate {
  ASUIScrollView* uiView = [ASUIScrollView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView.showsVerticalScrollIndicator=YES;
  uiView.scrollEnabled=YES;
  uiView.delaysContentTouches=YES;
  uiView.userInteractionEnabled=YES;
  return uiView;
}

- (void)setScrollXWithId:(id)objValue {
  ASScrollViewImpl_setScrollXWithId_(self, objValue);
}

- (void)nativeSetScrollXWithId:(id)view
                       withInt:(jint)value {
  [((ASUIScrollView*)view) setContentOffset:CGPointMake(value ,((ASUIScrollView*)view).contentOffset.y)];
}

- (void)setScrollYWithId:(id)objValue {
  ASScrollViewImpl_setScrollYWithId_(self, objValue);
}

- (void)nativeSetScrollYWithId:(id)view
                       withInt:(jint)value {
  [((ASUIScrollView*)view) setContentOffset:CGPointMake(((ASUIScrollView*)view).contentOffset.x, value)];
}

- (id)getScrollX {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollXWithId:[self asNativeWidget]]);
}

- (jdouble)nativeGetScrollXWithId:(id)view {
  return ((ASUIScrollView*)view).contentOffset.x;
}

- (id)getScrollY {
  return JavaLangDouble_valueOfWithDouble_([self nativeGetScrollYWithId:[self asNativeWidget]]);
}

- (jdouble)nativeGetScrollYWithId:(id)view {
  return ((ASUIScrollView*)view).contentOffset.y;
}

- (void)setOnScrollWithId:(id)objValue {
  ASScrollViewImpl_setOnScrollWithId_(self, objValue);
}

- (void)setPreventAutoScrollWithId:(id)objValue {
  ASScrollViewImpl_setPreventAutoScrollWithId_(self, objValue);
}

- (void)nativeSetPreventAutoScrollWithBoolean:(jboolean)preventAutoScroll {
  ASScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(self, preventAutoScroll);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 26, 1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 35, 33, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 36, 31, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x101, 37, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 40, 41, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(requestLayout);
  methods[21].selector = @selector(invalidate);
  methods[22].selector = @selector(setIdWithNSString:);
  methods[23].selector = @selector(getPluginWithNSString:);
  methods[24].selector = @selector(getBean);
  methods[25].selector = @selector(getBuilder);
  methods[26].selector = @selector(getParamsBean);
  methods[27].selector = @selector(getParamsBuilder);
  methods[28].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[29].selector = @selector(nativescrollViewCreate);
  methods[30].selector = @selector(setScrollXWithId:);
  methods[31].selector = @selector(nativeSetScrollXWithId:withInt:);
  methods[32].selector = @selector(setScrollYWithId:);
  methods[33].selector = @selector(nativeSetScrollYWithId:withInt:);
  methods[34].selector = @selector(getScrollX);
  methods[35].selector = @selector(nativeGetScrollXWithId:);
  methods[36].selector = @selector(getScrollY);
  methods[37].selector = @selector(nativeGetScrollYWithId:);
  methods[38].selector = @selector(setOnScrollWithId:);
  methods[39].selector = @selector(setPreventAutoScrollWithId:);
  methods[40].selector = @selector(nativeSetPreventAutoScrollWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 42, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 43, -1, -1 },
    { "scrollView_", "LADScrollView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASScrollViewImpl_ScrollViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASScrollViewImpl_ScrollViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASScrollViewImpl_ScrollViewCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASScrollViewImpl_ScrollViewParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setScrollX", "LNSObject;", "nativeSetScrollX", "LNSObject;I", "setScrollY", "nativeSetScrollY", "nativeGetScrollX", "nativeGetScrollY", "setOnScroll", "setPreventAutoScroll", "nativeSetPreventAutoScroll", "Z", &ASScrollViewImpl_LOCAL_NAME, &ASScrollViewImpl_GROUP_NAME, "LASScrollViewImpl_ScrollViewExt;LASScrollViewImpl_OnScrollChangeListener;LASScrollViewImpl_ScrollViewCommandBuilder;LASScrollViewImpl_ScrollViewBean;LASScrollViewImpl_ScrollViewParamsBean;LASScrollViewImpl_ScrollViewCommandParamsBuilder;LASScrollViewImpl_MyUIScrollViewDelegate;" };
  static const J2ObjcClassInfo _ASScrollViewImpl = { "ScrollViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 41, 8, -1, 44, -1, -1, -1 };
  return &_ASScrollViewImpl;
}

@end

void ASScrollViewImpl_init(ASScrollViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASScrollViewImpl_GROUP_NAME, ASScrollViewImpl_LOCAL_NAME);
}

ASScrollViewImpl *new_ASScrollViewImpl_init() {
  J2OBJC_NEW_IMPL(ASScrollViewImpl, init)
}

ASScrollViewImpl *create_ASScrollViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl, init)
}

void ASScrollViewImpl_initWithNSString_(ASScrollViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASScrollViewImpl_GROUP_NAME, localname);
}

ASScrollViewImpl *new_ASScrollViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl, initWithNSString_, localname)
}

ASScrollViewImpl *create_ASScrollViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl, initWithNSString_, localname)
}

void ASScrollViewImpl_initWithNSString_withNSString_(ASScrollViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASScrollViewImpl *new_ASScrollViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASScrollViewImpl *create_ASScrollViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASScrollViewImpl_setWidgetOnNativeClass(ASScrollViewImpl *self) {
  ((ASUIScrollView*) [self asNativeWidget]).widget = self;
}

void ASScrollViewImpl_createLayoutParamsWithADView_(ASScrollViewImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASScrollViewImpl_getLayoutParamsWithADView_(ASScrollViewImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASScrollViewImpl_nativeCreateWithJavaUtilMap_(ASScrollViewImpl *self, id<JavaUtilMap> params) {
  self->uiView_ = [self nativescrollViewCreate];
}

void ASScrollViewImpl_setScrollXWithId_(ASScrollViewImpl *self, id objValue) {
  [self nativeSetScrollXWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASScrollViewImpl_setScrollYWithId_(ASScrollViewImpl *self, id objValue) {
  [self nativeSetScrollYWithId:[self asNativeWidget] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASScrollViewImpl_setOnScrollWithId_(ASScrollViewImpl *self, id objValue) {
  id<ADView_OnScrollChangeListener> listener;
  if ([objValue isKindOfClass:[NSString class]]) {
    listener = new_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    listener = (id<ADView_OnScrollChangeListener>) cast_check(objValue, ADView_OnScrollChangeListener_class_());
  }
  ASScrollViewImpl_MyUIScrollViewDelegate *myUIScrollViewDelegate = new_ASScrollViewImpl_MyUIScrollViewDelegate_initWithASScrollViewImpl_withADView_OnScrollChangeListener_(self, listener);
  [myUIScrollViewDelegate nativeScrollChangeListenerWithId:[self asNativeWidget]];
}

void ASScrollViewImpl_setPreventAutoScrollWithId_(ASScrollViewImpl *self, id objValue) {
  ASScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASScrollViewImpl_nativeSetPreventAutoScrollWithBoolean_(ASScrollViewImpl *self, jboolean preventAutoScroll) {
  ASUIScrollView* scrollview = ((ASUIScrollView*)self.uiView);
  scrollview.preventAutoScroll = preventAutoScroll;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl)

@implementation ASScrollViewImpl_ScrollViewExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASScrollViewImpl:(ASScrollViewImpl *)outer$ {
  ASScrollViewImpl_ScrollViewExt_initWithASScrollViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b, (jint) ([self computeVerticalScrollRange]));
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASScrollViewImpl_ScrollViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASScrollViewImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASScrollViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASScrollViewImpl_ScrollViewExt = { "ScrollViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASScrollViewImpl_ScrollViewExt;
}

@end

void ASScrollViewImpl_ScrollViewExt_initWithASScrollViewImpl_(ASScrollViewImpl_ScrollViewExt *self, ASScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ADScrollView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASScrollViewImpl_ScrollViewExt *new_ASScrollViewImpl_ScrollViewExt_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_ScrollViewExt, initWithASScrollViewImpl_, outer$)
}

ASScrollViewImpl_ScrollViewExt *create_ASScrollViewImpl_ScrollViewExt_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_ScrollViewExt, initWithASScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_ScrollViewExt)

@implementation ASScrollViewImpl_OnScrollChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onScrollChangeWithADView:(ADView *)v
                         withInt:(jint)scrollX
                         withInt:(jint)scrollY
                         withInt:(jint)oldScrollX
                         withInt:(jint)oldScrollY {
  if (action_ == nil || [action_ isEqual:@"onScrollChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrollChange"];
    id<JavaUtilMap> obj = [self getOnScrollChangeEventObjWithADView:v withInt:scrollX withInt:scrollY withInt:oldScrollX withInt:oldScrollY];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(scrollX), JavaLangInteger_valueOfWithInt_(scrollY), JavaLangInteger_valueOfWithInt_(oldScrollX), JavaLangInteger_valueOfWithInt_(oldScrollY) } count:5 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnScrollChangeEventObjWithADView:(ADView *)v
                                               withInt:(jint)scrollX
                                               withInt:(jint)scrollY
                                               withInt:(jint)oldScrollX
                                               withInt:(jint)oldScrollY {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrollchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollX", JavaLangInteger_valueOfWithInt_(scrollX));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"scrollY", JavaLangInteger_valueOfWithInt_(scrollY));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"oldScrollX", JavaLangInteger_valueOfWithInt_(oldScrollX));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"oldScrollY", JavaLangInteger_valueOfWithInt_(oldScrollY));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrollChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onScrollChangeWithADView:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getOnScrollChangeEventObjWithADView:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onScrollChange", "LADView;IIII", "getOnScrollChangeEventObj", "(Lr/android/view/View;IIII)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASScrollViewImpl;" };
  static const J2ObjcClassInfo _ASScrollViewImpl_OnScrollChangeListener = { "OnScrollChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASScrollViewImpl_OnScrollChangeListener;
}

@end

void ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(ASScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASScrollViewImpl_OnScrollChangeListener *new_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASScrollViewImpl_OnScrollChangeListener *create_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(ASScrollViewImpl_OnScrollChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASScrollViewImpl_OnScrollChangeListener *new_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASScrollViewImpl_OnScrollChangeListener *create_ASScrollViewImpl_OnScrollChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_OnScrollChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_OnScrollChangeListener)

@implementation ASScrollViewImpl_ScrollViewCommandBuilder

- (instancetype)initWithASScrollViewImpl:(ASScrollViewImpl *)outer$ {
  ASScrollViewImpl_ScrollViewCommandBuilder_initWithASScrollViewImpl_(self, outer$);
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)setForegroundGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)tryGetMeasureAllChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureAllChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isMeasureAllChildren {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureAllChildren"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)setMeasureAllChildrenWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureAllChildren"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)tryGetFillViewport {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fillViewport"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isFillViewport {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fillViewport"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)setFillViewportWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fillViewport"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)tryGetScrollY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getScrollY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollY"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)setScrollYWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)setOnScrollChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onScrollChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandBuilder *)setIosPreventAutoScrollWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPreventAutoScroll"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandBuilder;", 0x1, 9, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASScrollViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setForegroundGravityWithNSString:);
  methods[3].selector = @selector(tryGetMeasureAllChildren);
  methods[4].selector = @selector(isMeasureAllChildren);
  methods[5].selector = @selector(setMeasureAllChildrenWithBoolean:);
  methods[6].selector = @selector(tryGetFillViewport);
  methods[7].selector = @selector(isFillViewport);
  methods[8].selector = @selector(setFillViewportWithBoolean:);
  methods[9].selector = @selector(tryGetScrollY);
  methods[10].selector = @selector(getScrollY);
  methods[11].selector = @selector(setScrollYWithNSString:);
  methods[12].selector = @selector(setOnScrollChangeWithNSString:);
  methods[13].selector = @selector(setIosPreventAutoScrollWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASScrollViewImpl;", "execute", "Z", "setForegroundGravity", "LNSString;", "setMeasureAllChildren", "setFillViewport", "setScrollY", "setOnScrollChange", "setIosPreventAutoScroll", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/layout/ScrollViewImpl$ScrollViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASScrollViewImpl_ScrollViewCommandBuilder = { "ScrollViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 14, 1, 0, -1, -1, 10, -1 };
  return &_ASScrollViewImpl_ScrollViewCommandBuilder;
}

@end

void ASScrollViewImpl_ScrollViewCommandBuilder_initWithASScrollViewImpl_(ASScrollViewImpl_ScrollViewCommandBuilder *self, ASScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASScrollViewImpl_ScrollViewCommandBuilder *new_ASScrollViewImpl_ScrollViewCommandBuilder_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_ScrollViewCommandBuilder, initWithASScrollViewImpl_, outer$)
}

ASScrollViewImpl_ScrollViewCommandBuilder *create_ASScrollViewImpl_ScrollViewCommandBuilder_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_ScrollViewCommandBuilder, initWithASScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_ScrollViewCommandBuilder)

@implementation ASScrollViewImpl_ScrollViewBean

- (instancetype)initWithASScrollViewImpl:(ASScrollViewImpl *)outer$ {
  ASScrollViewImpl_ScrollViewBean_initWithASScrollViewImpl_(self, outer$);
  return self;
}

- (void)setForegroundGravityWithNSString:(NSString *)value {
  (void) [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setForegroundGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)isMeasureAllChildren {
  return [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMeasureAllChildren])) executeWithBoolean:false])) isMeasureAllChildren];
}

- (void)setMeasureAllChildrenWithBoolean:(jboolean)value {
  (void) [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMeasureAllChildrenWithBoolean:value])) executeWithBoolean:true];
}

- (id)isFillViewport {
  return [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetFillViewport])) executeWithBoolean:false])) isFillViewport];
}

- (void)setFillViewportWithBoolean:(jboolean)value {
  (void) [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFillViewportWithBoolean:value])) executeWithBoolean:true];
}

- (id)getScrollY {
  return [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetScrollY])) executeWithBoolean:false])) getScrollY];
}

- (void)setScrollYWithNSString:(NSString *)value {
  (void) [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollYWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnScrollChangeWithNSString:(NSString *)value {
  (void) [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnScrollChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosPreventAutoScrollWithBoolean:(jboolean)value {
  (void) [((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosPreventAutoScrollWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASScrollViewImpl:);
  methods[1].selector = @selector(setForegroundGravityWithNSString:);
  methods[2].selector = @selector(isMeasureAllChildren);
  methods[3].selector = @selector(setMeasureAllChildrenWithBoolean:);
  methods[4].selector = @selector(isFillViewport);
  methods[5].selector = @selector(setFillViewportWithBoolean:);
  methods[6].selector = @selector(getScrollY);
  methods[7].selector = @selector(setScrollYWithNSString:);
  methods[8].selector = @selector(setOnScrollChangeWithNSString:);
  methods[9].selector = @selector(setIosPreventAutoScrollWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASScrollViewImpl;", "setForegroundGravity", "LNSString;", "setMeasureAllChildren", "Z", "setFillViewport", "setScrollY", "setOnScrollChange", "setIosPreventAutoScroll" };
  static const J2ObjcClassInfo _ASScrollViewImpl_ScrollViewBean = { "ScrollViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 10, 1, 0, -1, -1, -1, -1 };
  return &_ASScrollViewImpl_ScrollViewBean;
}

@end

void ASScrollViewImpl_ScrollViewBean_initWithASScrollViewImpl_(ASScrollViewImpl_ScrollViewBean *self, ASScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASScrollViewImpl_ScrollViewBean *new_ASScrollViewImpl_ScrollViewBean_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_ScrollViewBean, initWithASScrollViewImpl_, outer$)
}

ASScrollViewImpl_ScrollViewBean *create_ASScrollViewImpl_ScrollViewBean_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_ScrollViewBean, initWithASScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_ScrollViewBean)

@implementation ASScrollViewImpl_ScrollViewParamsBean

- (instancetype)initWithASScrollViewImpl:(ASScrollViewImpl *)outer$ {
  ASScrollViewImpl_ScrollViewParamsBean_initWithASScrollViewImpl_(self, outer$);
  return self;
}

- (id)getLayoutGravityWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutGravity])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutGravity];
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([((ASScrollViewImpl_ScrollViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASScrollViewImpl:);
  methods[1].selector = @selector(getLayoutGravityWithASIWidget:);
  methods[2].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASScrollViewImpl;", "getLayoutGravity", "LASIWidget;", "setLayoutGravity", "LASIWidget;LNSString;" };
  static const J2ObjcClassInfo _ASScrollViewImpl_ScrollViewParamsBean = { "ScrollViewParamsBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASScrollViewImpl_ScrollViewParamsBean;
}

@end

void ASScrollViewImpl_ScrollViewParamsBean_initWithASScrollViewImpl_(ASScrollViewImpl_ScrollViewParamsBean *self, ASScrollViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASScrollViewImpl_ScrollViewParamsBean *new_ASScrollViewImpl_ScrollViewParamsBean_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_ScrollViewParamsBean, initWithASScrollViewImpl_, outer$)
}

ASScrollViewImpl_ScrollViewParamsBean *create_ASScrollViewImpl_ScrollViewParamsBean_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_ScrollViewParamsBean, initWithASScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_ScrollViewParamsBean)

@implementation ASScrollViewImpl_ScrollViewCommandParamsBuilder

- (instancetype)initWithASScrollViewImpl:(ASScrollViewImpl *)outer$ {
  ASScrollViewImpl_ScrollViewCommandParamsBuilder_initWithASScrollViewImpl_(self, outer$);
  return self;
}

- (ASScrollViewImpl_ScrollViewCommandParamsBuilder *)tryGetLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASScrollViewImpl_ScrollViewCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASScrollViewImpl_ScrollViewCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASScrollViewImpl:);
  methods[1].selector = @selector(tryGetLayoutGravity);
  methods[2].selector = @selector(getLayoutGravity);
  methods[3].selector = @selector(setLayoutGravityWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASScrollViewImpl;", "setLayoutGravity", "LNSString;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/layout/ScrollViewImpl$ScrollViewCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASScrollViewImpl_ScrollViewCommandParamsBuilder = { "ScrollViewCommandParamsBuilder", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 4, 0, 0, -1, -1, 3, -1 };
  return &_ASScrollViewImpl_ScrollViewCommandParamsBuilder;
}

@end

void ASScrollViewImpl_ScrollViewCommandParamsBuilder_initWithASScrollViewImpl_(ASScrollViewImpl_ScrollViewCommandParamsBuilder *self, ASScrollViewImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASScrollViewImpl_ScrollViewCommandParamsBuilder *new_ASScrollViewImpl_ScrollViewCommandParamsBuilder_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_ScrollViewCommandParamsBuilder, initWithASScrollViewImpl_, outer$)
}

ASScrollViewImpl_ScrollViewCommandParamsBuilder *create_ASScrollViewImpl_ScrollViewCommandParamsBuilder_initWithASScrollViewImpl_(ASScrollViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_ScrollViewCommandParamsBuilder, initWithASScrollViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_ScrollViewCommandParamsBuilder)

@implementation ASScrollViewImpl_MyUIScrollViewDelegate

- (instancetype)initWithASScrollViewImpl:(ASScrollViewImpl *)outer$
       withADView_OnScrollChangeListener:(id<ADView_OnScrollChangeListener>)listener {
  ASScrollViewImpl_MyUIScrollViewDelegate_initWithASScrollViewImpl_withADView_OnScrollChangeListener_(self, outer$, listener);
  return self;
}

- (void)nativeScrollChangeListenerWithId:(id)nativeWidget {
  UIScrollView* scrollview = ((UIScrollView*)nativeWidget);
  scrollview.delegate = self;
}

- (void)onscrollWithInt:(jint)scrollX
                withInt:(jint)scrollY {
  [((id<ADView_OnScrollChangeListener>) nil_chk(listener_)) onScrollChangeWithADView:(ADView *) cast_chk([this$0_ asWidget], [ADView class]) withInt:scrollX withInt:scrollY withInt:oldScrollX_ withInt:oldScrollY_];
  oldScrollX_ = scrollX;
  oldScrollY_ = scrollY;
}

- (void)__javaClone:(ASScrollViewImpl_MyUIScrollViewDelegate *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
  [self onscrollWithInt:scrollView.contentOffset.x withInt:scrollView.contentOffset.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASScrollViewImpl:withADView_OnScrollChangeListener:);
  methods[1].selector = @selector(nativeScrollChangeListenerWithId:);
  methods[2].selector = @selector(onscrollWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASScrollViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "oldScrollY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldScrollX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "listener_", "LADView_OnScrollChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASScrollViewImpl;LADView_OnScrollChangeListener;", "nativeScrollChangeListener", "LNSObject;", "onscroll", "II", "LASScrollViewImpl;" };
  static const J2ObjcClassInfo _ASScrollViewImpl_MyUIScrollViewDelegate = { "MyUIScrollViewDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 3, 4, 5, -1, -1, -1, -1 };
  return &_ASScrollViewImpl_MyUIScrollViewDelegate;
}

@end

void ASScrollViewImpl_MyUIScrollViewDelegate_initWithASScrollViewImpl_withADView_OnScrollChangeListener_(ASScrollViewImpl_MyUIScrollViewDelegate *self, ASScrollViewImpl *outer$, id<ADView_OnScrollChangeListener> listener) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->oldScrollY_ = 0;
  self->oldScrollX_ = 0;
  self->listener_ = listener;
  [((id<ASIFragment>) nil_chk([outer$ getFragment])) addListenerWithASIWidget:outer$ withId:self];
}

ASScrollViewImpl_MyUIScrollViewDelegate *new_ASScrollViewImpl_MyUIScrollViewDelegate_initWithASScrollViewImpl_withADView_OnScrollChangeListener_(ASScrollViewImpl *outer$, id<ADView_OnScrollChangeListener> listener) {
  J2OBJC_NEW_IMPL(ASScrollViewImpl_MyUIScrollViewDelegate, initWithASScrollViewImpl_withADView_OnScrollChangeListener_, outer$, listener)
}

ASScrollViewImpl_MyUIScrollViewDelegate *create_ASScrollViewImpl_MyUIScrollViewDelegate_initWithASScrollViewImpl_withADView_OnScrollChangeListener_(ASScrollViewImpl *outer$, id<ADView_OnScrollChangeListener> listener) {
  J2OBJC_CREATE_IMPL(ASScrollViewImpl_MyUIScrollViewDelegate, initWithASScrollViewImpl_withADView_OnScrollChangeListener_, outer$, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASScrollViewImpl_MyUIScrollViewDelegate)
