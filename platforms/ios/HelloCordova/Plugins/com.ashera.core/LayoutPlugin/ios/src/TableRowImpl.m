//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\TableRowImpl.java
//

#include "BaseHasWidgets.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "TableRow.h"
#include "TableRowImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASTableRowImpl () {
 @public
  id uiView_;
  ADTableRow *tableRow_;
  ASTableRowImpl_TableRowCommandBuilder *builder_;
  ASTableRowImpl_TableRowBean *bean_;
  ASTableRowImpl_TableRowCommandParamsBuilder *paramsBuilder_;
  ASTableRowImpl_TableRowParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADTableRow_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

@end

J2OBJC_FIELD_SETTER(ASTableRowImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASTableRowImpl, tableRow_, ADTableRow *)
J2OBJC_FIELD_SETTER(ASTableRowImpl, builder_, ASTableRowImpl_TableRowCommandBuilder *)
J2OBJC_FIELD_SETTER(ASTableRowImpl, bean_, ASTableRowImpl_TableRowBean *)
J2OBJC_FIELD_SETTER(ASTableRowImpl, paramsBuilder_, ASTableRowImpl_TableRowCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASTableRowImpl, paramsBean_, ASTableRowImpl_TableRowParamsBean *)

__attribute__((unused)) static void ASTableRowImpl_setWidgetOnNativeClass(ASTableRowImpl *self);

__attribute__((unused)) static void ASTableRowImpl_createLayoutParamsWithADView_(ASTableRowImpl *self, ADView *view);

__attribute__((unused)) static ADTableRow_LayoutParams *ASTableRowImpl_getLayoutParamsWithADView_(ASTableRowImpl *self, ADView *view);

@interface ASTableRowImpl_TableRowExt () {
 @public
  __unsafe_unretained ASTableRowImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASTableRowImpl_TableRowExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASTableRowImpl_TableRowExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASTableRowImpl_OnHierarchyChangeListener : NSObject < ADViewGroup_OnHierarchyChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child;

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child;

- (id<JavaUtilMap>)getOnChildViewRemovedEventObjWithADView:(ADView *)parent
                                                withADView:(ADView *)child;

- (id<JavaUtilMap>)getOnChildViewAddedEventObjWithADView:(ADView *)parent
                                              withADView:(ADView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTableRowImpl_OnHierarchyChangeListener)

J2OBJC_FIELD_SETTER(ASTableRowImpl_OnHierarchyChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTableRowImpl_OnHierarchyChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASTableRowImpl_OnHierarchyChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASTableRowImpl_OnHierarchyChangeListener, action_, NSString *)

__attribute__((unused)) static void ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(ASTableRowImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASTableRowImpl_OnHierarchyChangeListener *new_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTableRowImpl_OnHierarchyChangeListener *create_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(ASTableRowImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASTableRowImpl_OnHierarchyChangeListener *new_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTableRowImpl_OnHierarchyChangeListener *create_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASTableRowImpl_OnHierarchyChangeListener)

@interface ASTableRowImpl_TableRowCommandBuilder () {
 @public
  ASTableRowImpl *this$0_;
}

@end

@interface ASTableRowImpl_TableRowBean () {
 @public
  ASTableRowImpl *this$0_;
}

@end

@interface ASTableRowImpl_TableRowParamsBean () {
 @public
  ASTableRowImpl *this$0_;
}

@end

NSString *ASTableRowImpl_LOCAL_NAME = @"TableRow";
NSString *ASTableRowImpl_GROUP_NAME = @"TableRow";

@implementation ASTableRowImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"weightSum"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_weight"])) withTypeWithNSString:@"float"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_column"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_span"])) withTypeWithNSString:@"int"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTableRowImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASTableRowImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASTableRowImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASTableRowImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  tableRow_ = new_ASTableRowImpl_TableRowExt_initWithASTableRowImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASTableRowImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASTableRowImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return tableRow_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADTableRow *) nil_chk(tableRow_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADTableRow *) nil_chk(tableRow_)) getChildCount]) {
    [((ADTableRow *) nil_chk(tableRow_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASTableRowImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADTableRow *) nil_chk(tableRow_)) addViewWithADView:view];
    }
    else {
      [((ADTableRow *) nil_chk(tableRow_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASTableRowImpl_createLayoutParamsWithADView_(self, view);
}

- (ADTableRow_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASTableRowImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADTableRow_LayoutParams *layoutParams = ASTableRowImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight", @"layout_column", @"layout_span" }, 6)) {
    case 0:
    ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->weight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    case 4:
    {
      ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->column_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 5:
    {
      ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->span_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADTableRow_LayoutParams *layoutParams = ASTableRowImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight", @"layout_column", @"layout_span" }, 6)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADTableRow_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADTableRow_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADTableRow_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
    case 3:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADTableRow_LayoutParams *) nil_chk(layoutParams))->weight_);
    }
    case 4:
    {
      return JavaLangInteger_valueOfWithInt_(((ADTableRow_LayoutParams *) nil_chk(layoutParams))->column_);
    }
    case 5:
    {
      return JavaLangInteger_valueOfWithInt_(((ADTableRow_LayoutParams *) nil_chk(layoutParams))->span_);
    }
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASTableRowImpl_TableRowExt *) nil_chk(((ASTableRowImpl_TableRowExt *) cast_chk(tableRow_, [ASTableRowImpl_TableRowExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity", @"weightSum" }, 2)) {
    case 0:
    {
      [((ADTableRow *) nil_chk(tableRow_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADTableRow *) nil_chk(tableRow_)) setWeightSumWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity", @"weightSum" }, 2)) {
    case 0:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADTableRow *) nil_chk(tableRow_)) getGravity]);
      }
    }
    case 1:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADTableRow *) nil_chk(tableRow_)) getWeightSum]);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADTableRow *) nil_chk(tableRow_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASTableRowImpl_TableRowBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASTableRowImpl_TableRowBean_initWithASTableRowImpl_(self);
  }
  return bean_;
}

- (ASTableRowImpl_TableRowCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASTableRowImpl_TableRowCommandBuilder_initWithASTableRowImpl_(self);
  }
  return builder_;
}

- (ASTableRowImpl_TableRowParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASTableRowImpl_TableRowParamsBean_initWithASTableRowImpl_(self);
  }
  return paramsBean_;
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASTableRowImpl_TableRowCommandParamsBuilder_initWithASTableRowImpl_(self);
  }
  return paramsBuilder_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADTableRow_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 29, 1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(setIdWithNSString:);
  methods[24].selector = @selector(getPluginWithNSString:);
  methods[25].selector = @selector(getBean);
  methods[26].selector = @selector(getBuilder);
  methods[27].selector = @selector(getParamsBean);
  methods[28].selector = @selector(getParamsBuilder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 31, -1, -1 },
    { "tableRow_", "LADTableRow;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASTableRowImpl_TableRowCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASTableRowImpl_TableRowBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASTableRowImpl_TableRowCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASTableRowImpl_TableRowParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setId", "getPlugin", &ASTableRowImpl_LOCAL_NAME, &ASTableRowImpl_GROUP_NAME, "LASTableRowImpl_TableRowExt;LASTableRowImpl_OnHierarchyChangeListener;LASTableRowImpl_TableRowCommandBuilder;LASTableRowImpl_TableRowBean;LASTableRowImpl_TableRowParamsBean;LASTableRowImpl_TableRowCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASTableRowImpl = { "TableRowImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 29, 8, -1, 32, -1, -1, -1 };
  return &_ASTableRowImpl;
}

@end

void ASTableRowImpl_init(ASTableRowImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTableRowImpl_GROUP_NAME, ASTableRowImpl_LOCAL_NAME);
}

ASTableRowImpl *new_ASTableRowImpl_init() {
  J2OBJC_NEW_IMPL(ASTableRowImpl, init)
}

ASTableRowImpl *create_ASTableRowImpl_init() {
  J2OBJC_CREATE_IMPL(ASTableRowImpl, init)
}

void ASTableRowImpl_initWithNSString_(ASTableRowImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTableRowImpl_GROUP_NAME, localname);
}

ASTableRowImpl *new_ASTableRowImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASTableRowImpl, initWithNSString_, localname)
}

ASTableRowImpl *create_ASTableRowImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl, initWithNSString_, localname)
}

void ASTableRowImpl_initWithNSString_withNSString_(ASTableRowImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASTableRowImpl *new_ASTableRowImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASTableRowImpl, initWithNSString_withNSString_, groupName, localname)
}

ASTableRowImpl *create_ASTableRowImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASTableRowImpl_setWidgetOnNativeClass(ASTableRowImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASTableRowImpl_createLayoutParamsWithADView_(ASTableRowImpl *self, ADView *view) {
  ADTableRow_LayoutParams *layoutParams = (ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADTableRow_LayoutParams class]);
  layoutParams = (ADTableRow_LayoutParams *) cast_chk([view getLayoutParams], [ADTableRow_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADTableRow_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADTableRow_LayoutParams *ASTableRowImpl_getLayoutParamsWithADView_(ASTableRowImpl *self, ADView *view) {
  return (ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADTableRow_LayoutParams class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl)

@implementation ASTableRowImpl_TableRowExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASTableRowImpl:(ASTableRowImpl *)outer$ {
  ASTableRowImpl_TableRowExt_initWithASTableRowImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASTableRowImpl_TableRowExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASTableRowImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTableRowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASTableRowImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASTableRowImpl_TableRowExt = { "TableRowExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASTableRowImpl_TableRowExt;
}

@end

void ASTableRowImpl_TableRowExt_initWithASTableRowImpl_(ASTableRowImpl_TableRowExt *self, ASTableRowImpl *outer$) {
  self->this$0_ = outer$;
  ADTableRow_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASTableRowImpl_TableRowExt *new_ASTableRowImpl_TableRowExt_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_TableRowExt, initWithASTableRowImpl_, outer$)
}

ASTableRowImpl_TableRowExt *create_ASTableRowImpl_TableRowExt_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_TableRowExt, initWithASTableRowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl_TableRowExt)

@implementation ASTableRowImpl_OnHierarchyChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onChildViewAddedWithADView:(ADView *)parent
                        withADView:(ADView *)child {
  if (action_ == nil || [action_ isEqual:@"onChildViewAdded"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onChildViewAdded"];
    id<JavaUtilMap> obj = [self getOnChildViewAddedEventObjWithADView:parent withADView:child];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, child } count:2 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)onChildViewRemovedWithADView:(ADView *)parent
                          withADView:(ADView *)child {
  if (action_ == nil || [action_ isEqual:@"onChildViewRemoved"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onChildViewRemoved"];
    id<JavaUtilMap> obj = [self getOnChildViewRemovedEventObjWithADView:parent withADView:child];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ parent, child } count:2 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnChildViewRemovedEventObjWithADView:(ADView *)parent
                                                withADView:(ADView *)child {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"childviewremoved"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onChildViewRemoved" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnChildViewAddedEventObjWithADView:(ADView *)parent
                                              withADView:(ADView *)child {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"childviewadded"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onChildViewAdded" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 5, 3, -1, 6, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 3, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onChildViewAddedWithADView:withADView:);
  methods[4].selector = @selector(onChildViewRemovedWithADView:withADView:);
  methods[5].selector = @selector(getOnChildViewRemovedEventObjWithADView:withADView:);
  methods[6].selector = @selector(getOnChildViewAddedEventObjWithADView:withADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onChildViewAdded", "LADView;LADView;", "onChildViewRemoved", "getOnChildViewRemovedEventObj", "(Lr/android/view/View;Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnChildViewAddedEventObj", "LASTableRowImpl;" };
  static const J2ObjcClassInfo _ASTableRowImpl_OnHierarchyChangeListener = { "OnHierarchyChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 7, 4, 8, -1, -1, -1, -1 };
  return &_ASTableRowImpl_OnHierarchyChangeListener;
}

@end

void ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(ASTableRowImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASTableRowImpl_OnHierarchyChangeListener *new_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASTableRowImpl_OnHierarchyChangeListener *create_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(ASTableRowImpl_OnHierarchyChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASTableRowImpl_OnHierarchyChangeListener *new_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASTableRowImpl_OnHierarchyChangeListener *create_ASTableRowImpl_OnHierarchyChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_OnHierarchyChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl_OnHierarchyChangeListener)

@implementation ASTableRowImpl_TableRowCommandBuilder

- (instancetype)initWithASTableRowImpl:(ASTableRowImpl *)outer$ {
  ASTableRowImpl_TableRowCommandBuilder_initWithASTableRowImpl_(self, outer$);
  return self;
}

- (ASTableRowImpl_TableRowCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASTableRowImpl_TableRowCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTableRowImpl_TableRowCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTableRowImpl_TableRowCommandBuilder *)tryGetWeightSum {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWeightSum {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTableRowImpl_TableRowCommandBuilder *)setWeightSumWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandBuilder;", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTableRowImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetGravity);
  methods[3].selector = @selector(getGravity);
  methods[4].selector = @selector(setGravityWithNSString:);
  methods[5].selector = @selector(tryGetWeightSum);
  methods[6].selector = @selector(getWeightSum);
  methods[7].selector = @selector(setWeightSumWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTableRowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTableRowImpl;", "execute", "Z", "setGravity", "LNSString;", "setWeightSum", "F", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/layout/TableRowImpl$TableRowCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASTableRowImpl_TableRowCommandBuilder = { "TableRowCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 8, 1, 0, -1, -1, 7, -1 };
  return &_ASTableRowImpl_TableRowCommandBuilder;
}

@end

void ASTableRowImpl_TableRowCommandBuilder_initWithASTableRowImpl_(ASTableRowImpl_TableRowCommandBuilder *self, ASTableRowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASTableRowImpl_TableRowCommandBuilder *new_ASTableRowImpl_TableRowCommandBuilder_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_TableRowCommandBuilder, initWithASTableRowImpl_, outer$)
}

ASTableRowImpl_TableRowCommandBuilder *create_ASTableRowImpl_TableRowCommandBuilder_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_TableRowCommandBuilder, initWithASTableRowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl_TableRowCommandBuilder)

@implementation ASTableRowImpl_TableRowBean

- (instancetype)initWithASTableRowImpl:(ASTableRowImpl *)outer$ {
  ASTableRowImpl_TableRowBean_initWithASTableRowImpl_(self, outer$);
  return self;
}

- (id)getGravity {
  return [((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)getWeightSum {
  return [((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWeightSum])) executeWithBoolean:false])) getWeightSum];
}

- (void)setWeightSumWithFloat:(jfloat)value {
  (void) [((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWeightSumWithFloat:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTableRowImpl:);
  methods[1].selector = @selector(getGravity);
  methods[2].selector = @selector(setGravityWithNSString:);
  methods[3].selector = @selector(getWeightSum);
  methods[4].selector = @selector(setWeightSumWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTableRowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTableRowImpl;", "setGravity", "LNSString;", "setWeightSum", "F" };
  static const J2ObjcClassInfo _ASTableRowImpl_TableRowBean = { "TableRowBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 5, 1, 0, -1, -1, -1, -1 };
  return &_ASTableRowImpl_TableRowBean;
}

@end

void ASTableRowImpl_TableRowBean_initWithASTableRowImpl_(ASTableRowImpl_TableRowBean *self, ASTableRowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASTableRowImpl_TableRowBean *new_ASTableRowImpl_TableRowBean_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_TableRowBean, initWithASTableRowImpl_, outer$)
}

ASTableRowImpl_TableRowBean *create_ASTableRowImpl_TableRowBean_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_TableRowBean, initWithASTableRowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl_TableRowBean)

@implementation ASTableRowImpl_TableRowParamsBean

- (instancetype)initWithASTableRowImpl:(ASTableRowImpl *)outer$ {
  ASTableRowImpl_TableRowParamsBean_initWithASTableRowImpl_(self, outer$);
  return self;
}

- (id)getLayoutGravityWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutGravity])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutGravity];
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutWeightWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutWeight])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutWeight];
}

- (void)setLayoutWeightWithASIWidget:(id<ASIWidget>)w
                           withFloat:(jfloat)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutWeightWithFloat:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutColumnWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutColumn])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutColumn];
}

- (void)setLayoutColumnWithASIWidget:(id<ASIWidget>)w
                             withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutColumnWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutSpanWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutSpan])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutSpan];
}

- (void)setLayoutSpanWithASIWidget:(id<ASIWidget>)w
                           withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([((ASTableRowImpl_TableRowCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutSpanWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTableRowImpl:);
  methods[1].selector = @selector(getLayoutGravityWithASIWidget:);
  methods[2].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  methods[3].selector = @selector(getLayoutWeightWithASIWidget:);
  methods[4].selector = @selector(setLayoutWeightWithASIWidget:withFloat:);
  methods[5].selector = @selector(getLayoutColumnWithASIWidget:);
  methods[6].selector = @selector(setLayoutColumnWithASIWidget:withInt:);
  methods[7].selector = @selector(getLayoutSpanWithASIWidget:);
  methods[8].selector = @selector(setLayoutSpanWithASIWidget:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTableRowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTableRowImpl;", "getLayoutGravity", "LASIWidget;", "setLayoutGravity", "LASIWidget;LNSString;", "getLayoutWeight", "setLayoutWeight", "LASIWidget;F", "getLayoutColumn", "setLayoutColumn", "LASIWidget;I", "getLayoutSpan", "setLayoutSpan" };
  static const J2ObjcClassInfo _ASTableRowImpl_TableRowParamsBean = { "TableRowParamsBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 9, 1, 0, -1, -1, -1, -1 };
  return &_ASTableRowImpl_TableRowParamsBean;
}

@end

void ASTableRowImpl_TableRowParamsBean_initWithASTableRowImpl_(ASTableRowImpl_TableRowParamsBean *self, ASTableRowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASTableRowImpl_TableRowParamsBean *new_ASTableRowImpl_TableRowParamsBean_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_TableRowParamsBean, initWithASTableRowImpl_, outer$)
}

ASTableRowImpl_TableRowParamsBean *create_ASTableRowImpl_TableRowParamsBean_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_TableRowParamsBean, initWithASTableRowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl_TableRowParamsBean)

@implementation ASTableRowImpl_TableRowCommandParamsBuilder

- (instancetype)initWithASTableRowImpl:(ASTableRowImpl *)outer$ {
  ASTableRowImpl_TableRowCommandParamsBuilder_initWithASTableRowImpl_(self, outer$);
  return self;
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)tryGetLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)tryGetLayoutWeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutWeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)setLayoutWeightWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)tryGetLayoutColumn {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_column"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutColumn {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_column"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)setLayoutColumnWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_column"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)tryGetLayoutSpan {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_span"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutSpan {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_span"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTableRowImpl_TableRowCommandParamsBuilder *)setLayoutSpanWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_span"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTableRowImpl_TableRowCommandParamsBuilder;", 0x1, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTableRowImpl:);
  methods[1].selector = @selector(tryGetLayoutGravity);
  methods[2].selector = @selector(getLayoutGravity);
  methods[3].selector = @selector(setLayoutGravityWithNSString:);
  methods[4].selector = @selector(tryGetLayoutWeight);
  methods[5].selector = @selector(getLayoutWeight);
  methods[6].selector = @selector(setLayoutWeightWithFloat:);
  methods[7].selector = @selector(tryGetLayoutColumn);
  methods[8].selector = @selector(getLayoutColumn);
  methods[9].selector = @selector(setLayoutColumnWithInt:);
  methods[10].selector = @selector(tryGetLayoutSpan);
  methods[11].selector = @selector(getLayoutSpan);
  methods[12].selector = @selector(setLayoutSpanWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTableRowImpl;", "setLayoutGravity", "LNSString;", "setLayoutWeight", "F", "setLayoutColumn", "I", "setLayoutSpan", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/layout/TableRowImpl$TableRowCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASTableRowImpl_TableRowCommandParamsBuilder = { "TableRowCommandParamsBuilder", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 13, 0, 0, -1, -1, 8, -1 };
  return &_ASTableRowImpl_TableRowCommandParamsBuilder;
}

@end

void ASTableRowImpl_TableRowCommandParamsBuilder_initWithASTableRowImpl_(ASTableRowImpl_TableRowCommandParamsBuilder *self, ASTableRowImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASTableRowImpl_TableRowCommandParamsBuilder *new_ASTableRowImpl_TableRowCommandParamsBuilder_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTableRowImpl_TableRowCommandParamsBuilder, initWithASTableRowImpl_, outer$)
}

ASTableRowImpl_TableRowCommandParamsBuilder *create_ASTableRowImpl_TableRowCommandParamsBuilder_initWithASTableRowImpl_(ASTableRowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTableRowImpl_TableRowCommandParamsBuilder, initWithASTableRowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTableRowImpl_TableRowCommandParamsBuilder)
