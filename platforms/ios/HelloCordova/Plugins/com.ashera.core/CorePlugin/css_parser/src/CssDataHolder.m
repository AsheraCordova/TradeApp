//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\css_parser\src\com\ashera\parser\css\CssDataHolder.java
//

#include "CssDataHolder.h"
#include "CssResult.h"
#include "CssTree.h"
#include "Evaluator.h"
#include "J2ObjC_source.h"
#include "ParseException.h"
#include "java/io/StringReader.h"
#include "java/util/List.h"


@interface CSSCssDataHolder () {
 @public
  CSSCssTree *cssTree_;
}

@end

J2OBJC_FIELD_SETTER(CSSCssDataHolder, cssTree_, CSSCssTree *)

@implementation CSSCssDataHolder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CSSCssDataHolder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addCssWithNSString:(NSString *)cssContentStr {
  @try {
    [create_CSSEvaluator_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(cssContentStr)) SWithCSSCssTree:cssTree_];
  }
  @catch (CSSParseException *e) {
    [e printStackTrace];
  }
}

- (void)getCssWithNSString:(NSString *)tag
              withNSString:(NSString *)classNames
              withNSString:(NSString *)id_
          withCSSCssResult:(id<CSSCssResult>)cssResult {
  [((CSSCssTree *) nil_chk(cssTree_)) getCssWithNSString:tag withNSString:classNames withNSString:id_ withCSSCssResult:cssResult];
}

- (id<JavaUtilList>)getFonts {
  return [((CSSCssTree *) nil_chk(cssTree_)) getFontFaces];
}

- (id<JavaUtilList>)getStyleWithNSString:(NSString *)selector {
  return [((CSSCssTree *) nil_chk(cssTree_)) getStyleWithNSString:selector];
}

- (void)dealloc {
  RELEASE_(cssTree_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 5, 1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addCssWithNSString:);
  methods[2].selector = @selector(getCssWithNSString:withNSString:withNSString:withCSSCssResult:);
  methods[3].selector = @selector(getFonts);
  methods[4].selector = @selector(getStyleWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cssTree_", "LCSSCssTree;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addCss", "LNSString;", "getCss", "LNSString;LNSString;LNSString;LCSSCssResult;", "()Ljava/util/List<Lcom/ashera/parser/css/FontFace;>;", "getStyle", "(Ljava/lang/String;)Ljava/util/List<Lcom/ashera/css/CssTree$Attribute;>;" };
  static const J2ObjcClassInfo _CSSCssDataHolder = { "CssDataHolder", "com.ashera.parser.css", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_CSSCssDataHolder;
}

@end

void CSSCssDataHolder_init(CSSCssDataHolder *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->cssTree_, new_CSSCssTree_init());
}

CSSCssDataHolder *new_CSSCssDataHolder_init() {
  J2OBJC_NEW_IMPL(CSSCssDataHolder, init)
}

CSSCssDataHolder *create_CSSCssDataHolder_init() {
  J2OBJC_CREATE_IMPL(CSSCssDataHolder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CSSCssDataHolder)
