//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\widget\Placeholder.java
//

#include "ConstraintLayout.h"
#include "ConstraintWidget.h"
#include "J2ObjC_source.h"
#include "Placeholder.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"

static void (*ADXPlaceholder_super$_setVisibilityWithInt_)(id, SEL, jint);


@interface ADXPlaceholder () {
 @public
  jint mContentId_;
  ADView *mContent_;
  jint mEmptyVisibility_;
}

@end

J2OBJC_FIELD_SETTER(ADXPlaceholder, mContent_, ADView *)

J2OBJC_INITIALIZED_DEFN(ADXPlaceholder)

@implementation ADXPlaceholder

- (void)setEmptyVisibilityWithInt:(jint)visibility {
  mEmptyVisibility_ = visibility;
}

- (jint)getEmptyVisibility {
  return mEmptyVisibility_;
}

- (ADView *)getContent {
  return mContent_;
}

- (void)updatePreLayoutWithADXConstraintLayout:(ADXConstraintLayout *)container {
  if (mContentId_ == -1) {
    if (![self isInEditMode]) {
      [self setVisibilityWithInt:mEmptyVisibility_];
    }
  }
  JreStrongAssign(&mContent_, [((ADXConstraintLayout *) nil_chk(container)) findViewByIdWithInt:mContentId_]);
  if (mContent_ != nil) {
    ADXConstraintLayout_LayoutParams *layoutParamsContent = (ADXConstraintLayout_LayoutParams *) cast_chk([mContent_ getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParamsContent))->isInPlaceholder_ = true;
    [((ADView *) nil_chk(mContent_)) setVisibilityWithInt:ADView_VISIBLE];
    [self setVisibilityWithInt:ADView_VISIBLE];
  }
}

- (void)setContentIdWithInt:(jint)id_ {
  if (mContentId_ == id_) {
    return;
  }
  if (mContent_ != nil) {
    [mContent_ setVisibilityWithInt:ADView_VISIBLE];
    ADXConstraintLayout_LayoutParams *layoutParamsContent = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(mContent_)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParamsContent))->isInPlaceholder_ = false;
    JreStrongAssign(&mContent_, nil);
  }
  mContentId_ = id_;
  if (id_ != ADXConstraintLayout_LayoutParams_UNSET) {
    ADView *v = JreRetainedLocalValue([((ADView *) nil_chk(((ADView *) cast_chk([self getParent], [ADView class])))) findViewByIdWithInt:id_]);
    if (v != nil) {
      [v setVisibilityWithInt:ADView_GONE];
    }
  }
}

- (void)updatePostMeasureWithADXConstraintLayout:(ADXConstraintLayout *)container {
  if (mContent_ == nil) {
    return;
  }
  ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([self getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  ADXConstraintLayout_LayoutParams *layoutParamsContent = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(mContent_)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  [((ADXConstraintWidget *) nil_chk(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParamsContent))->widget_)) setVisibilityWithInt:ADView_VISIBLE];
  if ([((ADXConstraintWidget *) nil_chk(((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->widget_)) getHorizontalDimensionBehaviour] != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
    [((ADXConstraintWidget *) nil_chk(layoutParams->widget_)) setWidthWithInt:[layoutParamsContent->widget_ getWidth]];
  }
  if ([((ADXConstraintWidget *) nil_chk(layoutParams->widget_)) getVerticalDimensionBehaviour] != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
    [((ADXConstraintWidget *) nil_chk(layoutParams->widget_)) setHeightWithInt:[layoutParamsContent->widget_ getHeight]];
  }
  [((ADXConstraintWidget *) nil_chk(layoutParamsContent->widget_)) setVisibilityWithInt:ADView_GONE];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXPlaceholder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mContent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setEmptyVisibilityWithInt:);
  methods[1].selector = @selector(getEmptyVisibility);
  methods[2].selector = @selector(getContent);
  methods[3].selector = @selector(updatePreLayoutWithADXConstraintLayout:);
  methods[4].selector = @selector(setContentIdWithInt:);
  methods[5].selector = @selector(updatePostMeasureWithADXConstraintLayout:);
  methods[6].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mContentId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContent_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEmptyVisibility_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setEmptyVisibility", "I", "updatePreLayout", "LADXConstraintLayout;", "setContentId", "updatePostMeasure" };
  static const J2ObjcClassInfo _ADXPlaceholder = { "Placeholder", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, -1, -1, -1, -1 };
  return &_ADXPlaceholder;
}

+ (void)initialize {
  if (self == [ADXPlaceholder class]) {
    ADXPlaceholder_super$_setVisibilityWithInt_ = (void (*)(id, SEL, jint))[ADView instanceMethodForSelector:@selector(setVisibilityWithInt:)];
    J2OBJC_SET_INITIALIZED(ADXPlaceholder)
  }
}

@end

void ADXPlaceholder_init(ADXPlaceholder *self) {
  ADView_init(self);
  self->mContentId_ = -1;
  JreStrongAssign(&self->mContent_, nil);
  self->mEmptyVisibility_ = ADView_INVISIBLE;
  ADXPlaceholder_super$_setVisibilityWithInt_(self, @selector(setVisibilityWithInt:), self->mEmptyVisibility_);
  self->mContentId_ = -1;
}

ADXPlaceholder *new_ADXPlaceholder_init() {
  J2OBJC_NEW_IMPL(ADXPlaceholder, init)
}

ADXPlaceholder *create_ADXPlaceholder_init() {
  J2OBJC_CREATE_IMPL(ADXPlaceholder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXPlaceholder)
