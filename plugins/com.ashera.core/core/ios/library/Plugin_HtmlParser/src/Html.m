//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_HtmlParser\src\com\ashera\parser\html\Html.java
//

#include "AttributedString.h"
#include "HTMLSchema.h"
#include "Html.h"
#include "HtmlToSpannedConverter.h"
#include "IFragment.h"
#include "J2ObjC_source.h"
#include "TagSoupParser.h"
#include "java/io/IOException.h"
#include "java/io/StringReader.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Map.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"


@interface ASHtml ()

- (instancetype)init;

@end

__attribute__((unused)) static void ASHtml_init(ASHtml *self);

__attribute__((unused)) static ASHtml *new_ASHtml_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASHtml *create_ASHtml_init(void);

/*!
 @brief Lazy initialization holder for HTML parser.This class will
  a) be preloaded by the zygote, or b) not loaded until absolutely
  necessary.
 */
@interface ASHtml_HtmlParser : NSObject

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ASHtml_HtmlParser)

inline TSHTMLSchema *ASHtml_HtmlParser_get_schema(void);
static TSHTMLSchema *ASHtml_HtmlParser_schema;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASHtml_HtmlParser, schema, TSHTMLSchema *)

__attribute__((unused)) static void ASHtml_HtmlParser_init(ASHtml_HtmlParser *self);

__attribute__((unused)) static ASHtml_HtmlParser *new_ASHtml_HtmlParser_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASHtml_HtmlParser *create_ASHtml_HtmlParser_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASHtml_HtmlParser)

NSString *ASHtml_UNORDERED_LIST = @"ul";
NSString *ASHtml_ORDERED_LIST = @"ol";
NSString *ASHtml_LIST_ITEM = @"li";

@implementation ASHtml

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASHtml_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<ASAttributedString>)fromHtmlWithNSString:(NSString *)source
                               withJavaUtilMap:(id<JavaUtilMap>)htmlConfig
                               withASIFragment:(id<ASIFragment>)fragment {
  return ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(source, htmlConfig, fragment);
}

+ (void)parseHtmlWithNSString:(NSString *)source
  withOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)contentHandler {
  ASHtml_parseHtmlWithNSString_withOrgXmlSaxContentHandler_(source, contentHandler);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAttributedString;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fromHtmlWithNSString:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(parseHtmlWithNSString:withOrgXmlSaxContentHandler:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNORDERED_LIST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "ORDERED_LIST", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "LIST_ITEM", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
  };
  static const void *ptrTable[] = { "fromHtml", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Lcom/ashera/attributedtext/AttributedString;", "parseHtml", "LNSString;LOrgXmlSaxContentHandler;", &ASHtml_UNORDERED_LIST, &ASHtml_ORDERED_LIST, &ASHtml_LIST_ITEM, "LASHtml_HtmlParser;" };
  static const J2ObjcClassInfo _ASHtml = { "Html", "com.ashera.parser.html", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, 8, -1, -1, -1 };
  return &_ASHtml;
}

@end

void ASHtml_init(ASHtml *self) {
  NSObject_init(self);
}

ASHtml *new_ASHtml_init() {
  J2OBJC_NEW_IMPL(ASHtml, init)
}

ASHtml *create_ASHtml_init() {
  J2OBJC_CREATE_IMPL(ASHtml, init)
}

id<ASAttributedString> ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(NSString *source, id<JavaUtilMap> htmlConfig, id<ASIFragment> fragment) {
  ASHtml_initialize();
  if (source == nil) {
    source = @"";
  }
  TSTagSoupParser *parser = create_TSTagSoupParser_init();
  @try {
    [parser setPropertyWithNSString:TSTagSoupParser_schemaProperty withId:JreLoadStatic(ASHtml_HtmlParser, schema)];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (OrgXmlSaxSAXNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  ASHtmlToSpannedConverter *converter = create_ASHtmlToSpannedConverter_initWithNSString_withTSTagSoupParser_withJavaUtilMap_withASIFragment_(source, parser, htmlConfig, fragment);
  return [converter convert];
}

void ASHtml_parseHtmlWithNSString_withOrgXmlSaxContentHandler_(NSString *source, id<OrgXmlSaxContentHandler> contentHandler) {
  ASHtml_initialize();
  if (source == nil) {
    source = @"";
  }
  TSTagSoupParser *parser = create_TSTagSoupParser_init();
  @try {
    [parser setPropertyWithNSString:TSTagSoupParser_schemaProperty withId:JreLoadStatic(ASHtml_HtmlParser, schema)];
    [parser setContentHandlerWithOrgXmlSaxContentHandler:contentHandler];
    [parser parseWithOrgXmlSaxInputSource:create_OrgXmlSaxInputSource_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(source))];
  }
  @catch (OrgXmlSaxSAXNotRecognizedException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (OrgXmlSaxSAXNotSupportedException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  @catch (OrgXmlSaxSAXException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHtml)

J2OBJC_INITIALIZED_DEFN(ASHtml_HtmlParser)

@implementation ASHtml_HtmlParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASHtml_HtmlParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "schema", "LTSHTMLSchema;", .constantValue.asLong = 0, 0x1a, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &ASHtml_HtmlParser_schema, "LASHtml;" };
  static const J2ObjcClassInfo _ASHtml_HtmlParser = { "HtmlParser", "com.ashera.parser.html", ptrTable, methods, fields, 7, 0xa, 1, 1, 1, -1, -1, -1, -1 };
  return &_ASHtml_HtmlParser;
}

+ (void)initialize {
  if (self == [ASHtml_HtmlParser class]) {
    JreStrongAssignAndConsume(&ASHtml_HtmlParser_schema, new_TSHTMLSchema_init());
    J2OBJC_SET_INITIALIZED(ASHtml_HtmlParser)
  }
}

@end

void ASHtml_HtmlParser_init(ASHtml_HtmlParser *self) {
  NSObject_init(self);
}

ASHtml_HtmlParser *new_ASHtml_HtmlParser_init() {
  J2OBJC_NEW_IMPL(ASHtml_HtmlParser, init)
}

ASHtml_HtmlParser *create_ASHtml_HtmlParser_init() {
  J2OBJC_CREATE_IMPL(ASHtml_HtmlParser, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHtml_HtmlParser)
