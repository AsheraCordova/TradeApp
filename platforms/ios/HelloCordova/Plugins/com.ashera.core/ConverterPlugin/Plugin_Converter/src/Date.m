//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\Date.java
//

#include "BaseValidator.h"
#include "Date.h"
#include "IFragment.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "ResourceBundleUtils.h"
#include "Validation.h"
#include "java/lang/Exception.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Date.h"


@interface ASDate () {
 @public
  NSString *format_;
}

@end

J2OBJC_FIELD_SETTER(ASDate, format_, NSString *)

@implementation ASDate

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  ASDate *date = create_ASDate_init();
  JreStrongAssign(&date->format_, IOSObjectArray_Get(nil_chk(argument), 0));
  return date;
}

+ (ASDate *)build {
  return ASDate_build();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASDate_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  return ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/date_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil || [((NSString *) nil_chk([text java_trim])) isEqual:@""]) {
    return true;
  }
  JavaTextSimpleDateFormat *dateFormat = create_JavaTextSimpleDateFormat_initWithNSString_(format_);
  [dateFormat setLenientWithBoolean:false];
  JavaUtilDate *date = nil;
  jboolean result = false;
  @try {
    date = [dateFormat parseWithNSString:text];
    result = [((NSString *) nil_chk([dateFormat formatWithJavaUtilDate:date])) isEqual:text];
    if ([text java_length] > 10) {
      result = false;
    }
  }
  @catch (JavaLangException *e) {
    result = false;
  }
  return result;
}

- (void)dealloc {
  RELEASE_(format_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "LASDate;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstanceWithNSStringArray:);
  methods[1].selector = @selector(build);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[4].selector = @selector(isValidWithNSString:withASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "format_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;" };
  static const J2ObjcClassInfo _ASDate = { "Date", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ASDate;
}

@end

ASDate *ASDate_build() {
  ASDate_initialize();
  return create_ASDate_init();
}

void ASDate_init(ASDate *self) {
  ASBaseValidator_init(self);
}

ASDate *new_ASDate_init() {
  J2OBJC_NEW_IMPL(ASDate, init)
}

ASDate *create_ASDate_init() {
  J2OBJC_CREATE_IMPL(ASDate, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDate)
