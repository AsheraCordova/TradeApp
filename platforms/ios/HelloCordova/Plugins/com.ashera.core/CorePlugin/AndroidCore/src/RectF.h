//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\graphics\RectF.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_RectF")
#ifdef RESTRICT_RectF
#define INCLUDE_ALL_RectF 0
#else
#define INCLUDE_ALL_RectF 1
#endif
#undef RESTRICT_RectF

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADRectF_) && (INCLUDE_ALL_RectF || defined(INCLUDE_ADRectF))
#define ADRectF_

#define RESTRICT_Parcelable 1
#define INCLUDE_ADParcelable 1
#include "Parcelable.h"

@class ADParcelable_Creator;
@class ADRect;
@class JavaIoPrintWriter;
@class JavaLangStringBuilder;
@protocol ADParcel;

/*!
 @brief RectF holds four float coordinates for a rectangle.The rectangle is
  represented by the coordinates of its 4 edges (left, top, right, bottom).
 These fields can be accessed directly. Use width() and height() to retrieve
  the rectangle's width and height. Note: most methods do not check to see that
  the coordinates are sorted correctly (i.e. left <= right and top <= bottom).
 */
@interface ADRectF : NSObject < ADParcelable > {
 @public
  jfloat left_;
  jfloat top_;
  jfloat right_;
  jfloat bottom_;
}

#pragma mark Public

/*!
 @brief Create a new empty RectF.All coordinates are initialized to 0.
 */
- (instancetype)init;

/*!
 @brief Create a new rectangle with the specified coordinates.Note: no range
  checking is performed, so the caller must ensure that left <= right and
  top <= bottom.
 @param left The X coordinate of the left side of the rectangle
 @param top The Y coordinate of the top of the rectangle
 @param right The X coordinate of the right side of the rectangle
 @param bottom The Y coordinate of the bottom of the rectangle
 */
- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom;

- (instancetype)initWithADRect:(ADRect *)r;

/*!
 @brief Create a new rectangle, initialized with the values in the specified
  rectangle (which is left unmodified).
 @param r The rectangle whose coordinates are copied into the new           rectangle.
 */
- (instancetype)initWithADRectF:(ADRectF *)r;

/*!
 @return the horizontal center of the rectangle. This does not check for
  a valid rectangle (i.e. left <= right)
 */
- (jfloat)centerX;

/*!
 @return the vertical center of the rectangle. This does not check for
  a valid rectangle (i.e. top <= bottom)
 */
- (jfloat)centerY;

/*!
 @brief Returns true if (x,y) is inside the rectangle.The left and top are
  considered to be inside, while the right and bottom are not.
 This means
  that for a x,y to be contained: left <= x < right and top <= y < bottom.
  An empty rectangle never contains any point.
 @param x The X coordinate of the point being tested for containment
 @param y The Y coordinate of the point being tested for containment
 @return true iff (x,y) are contained by the rectangle, where containment
               means left <= x < right and top <= y < bottom
 */
- (jboolean)containsWithFloat:(jfloat)x
                    withFloat:(jfloat)y;

/*!
 @brief Returns true iff the 4 specified sides of a rectangle are inside or equal
  to this rectangle.i.e. is this rectangle a superset of the specified
  rectangle.
 An empty rectangle never contains another rectangle.
 @param left The left side of the rectangle being tested for containment
 @param top The top of the rectangle being tested for containment
 @param right The right side of the rectangle being tested for containment
 @param bottom The bottom of the rectangle being tested for containment
 @return true iff the the 4 specified sides of a rectangle are inside or
               equal to this rectangle
 */
- (jboolean)containsWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom;

/*!
 @brief Returns true iff the specified rectangle r is inside or equal to this
  rectangle.An empty rectangle never contains another rectangle.
 @param r The rectangle being tested for containment.
 @return true iff the specified rectangle r is inside or equal to this
               rectangle
 */
- (jboolean)containsWithADRectF:(ADRectF *)r;

/*!
 @brief Parcelable interface methods
 */
- (jint)describeContents;

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

/*!
 @return the rectangle's height. This does not check for a valid rectangle
  (i.e. top <= bottom) so the result may be negative.
 */
- (jfloat)height;

/*!
 @brief Inset the rectangle by (dx,dy).If dx is positive, then the sides are
  moved inwards, making the rectangle narrower.
 If dx is negative, then the
  sides are moved outwards, making the rectangle wider. The same holds true
  for dy and the top and bottom.
 @param dx The amount to add(subtract) from the rectangle's left(right)
 @param dy The amount to add(subtract) from the rectangle's top(bottom)
 */
- (void)insetWithFloat:(jfloat)dx
             withFloat:(jfloat)dy;

/*!
 @brief If the rectangle specified by left,top,right,bottom intersects this
  rectangle, return true and set this rectangle to that intersection,
  otherwise return false and do not change this rectangle.No check is
  performed to see if either rectangle is empty.
 Note: To just test for
  intersection, use intersects()
 @param left The left side of the rectangle being intersected with this              rectangle
 @param top The top of the rectangle being intersected with this rectangle
 @param right The right side of the rectangle being intersected with this               rectangle.
 @param bottom The bottom of the rectangle being intersected with this              rectangle.
 @return true if the specified rectangle and this rectangle intersect
               (and this rectangle is then set to that intersection) else
               return false and do not change this rectangle.
 */
- (jboolean)intersectWithFloat:(jfloat)left
                     withFloat:(jfloat)top
                     withFloat:(jfloat)right
                     withFloat:(jfloat)bottom;

/*!
 @brief If the specified rectangle intersects this rectangle, return true and set
  this rectangle to that intersection, otherwise return false and do not
  change this rectangle.No check is performed to see if either rectangle
  is empty.
 To just test for intersection, use intersects()
 @param r The rectangle being intersected with this rectangle.
 @return true if the specified rectangle and this rectangle intersect
               (and this rectangle is then set to that intersection) else
               return false and do not change this rectangle.
 */
- (jboolean)intersectWithADRectF:(ADRectF *)r;

/*!
 @brief Returns true if this rectangle intersects the specified rectangle.
 In no event is this rectangle modified. No check is performed to see
  if either rectangle is empty. To record the intersection, use intersect()
  or setIntersect().
 @param left The left side of the rectangle being tested for intersection
 @param top The top of the rectangle being tested for intersection
 @param right The right side of the rectangle being tested for               intersection
 @param bottom The bottom of the rectangle being tested for intersection
 @return true iff the specified rectangle intersects this rectangle. In
               no event is this rectangle modified.
 */
- (jboolean)intersectsWithFloat:(jfloat)left
                      withFloat:(jfloat)top
                      withFloat:(jfloat)right
                      withFloat:(jfloat)bottom;

/*!
 @brief Returns true iff the two specified rectangles intersect.In no event are
  either of the rectangles modified.
 To record the intersection,
  use intersect() or setIntersect().
 @param a The first rectangle being tested for intersection
 @param b The second rectangle being tested for intersection
 @return true iff the two specified rectangles intersect. In no event are
               either of the rectangles modified.
 */
+ (jboolean)intersectsWithADRectF:(ADRectF *)a
                      withADRectF:(ADRectF *)b;

/*!
 @brief Returns true if the rectangle is empty (left >= right or top >= bottom)
 */
- (jboolean)isEmpty;

/*!
 @brief Offset the rectangle by adding dx to its left and right coordinates, and
  adding dy to its top and bottom coordinates.
 @param dx The amount to add to the rectangle's left and right coordinates
 @param dy The amount to add to the rectangle's top and bottom coordinates
 */
- (void)offsetWithFloat:(jfloat)dx
              withFloat:(jfloat)dy;

/*!
 @brief Offset the rectangle to a specific (left, top) position,
  keeping its width and height the same.
 @param newLeft The new "left" coordinate for the rectangle
 @param newTop The new "top" coordinate for the rectangle
 */
- (void)offsetToWithFloat:(jfloat)newLeft
                withFloat:(jfloat)newTop;

/*!
 @brief Print short representation to given writer.
 */
- (void)printShortStringWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw;

/*!
 @brief Set the rectangle's coordinates from the data stored in the specified
  parcel.To write a rectangle to a parcel, call writeToParcel().
 @param inArg The parcel to read the rectangle's coordinates from
 */
- (void)readFromParcelWithADParcel:(id<ADParcel>)inArg;

/*!
 @brief Set the dst integer Rect by rounding this rectangle's coordinates
  to their nearest integer values.
 */
- (void)roundWithADRect:(ADRect *)dst;

/*!
 @brief Set the dst integer Rect by rounding "out" this rectangle, choosing the
  floor of top and left, and the ceiling of right and bottom.
 */
- (void)roundOutWithADRect:(ADRect *)dst;

/*!
 @brief Scales up the rect by the given scale.
 */
- (void)scale__WithFloat:(jfloat)scale_;

/*!
 @brief Set the rectangle's coordinates to the specified values.Note: no range
  checking is performed, so it is up to the caller to ensure that
  left <= right and top <= bottom.
 @param left The X coordinate of the left side of the rectangle
 @param top The Y coordinate of the top of the rectangle
 @param right The X coordinate of the right side of the rectangle
 @param bottom The Y coordinate of the bottom of the rectangle
 */
- (void)setWithFloat:(jfloat)left
           withFloat:(jfloat)top
           withFloat:(jfloat)right
           withFloat:(jfloat)bottom;

/*!
 @brief Copy the coordinates from src into this rectangle.
 @param src The rectangle whose coordinates are copied into this            rectangle.
 */
- (void)setWithADRect:(ADRect *)src;

/*!
 @brief Copy the coordinates from src into this rectangle.
 @param src The rectangle whose coordinates are copied into this            rectangle.
 */
- (void)setWithADRectF:(ADRectF *)src;

/*!
 @brief Set the rectangle to (0,0,0,0)
 */
- (void)setEmpty;

/*!
 @brief If rectangles a and b intersect, return true and set this rectangle to
  that intersection, otherwise return false and do not change this
  rectangle.No check is performed to see if either rectangle is empty.
 To just test for intersection, use intersects()
 @param a The first rectangle being intersected with
 @param b The second rectangle being intersected with
 @return true iff the two specified rectangles intersect. If they do, set
               this rectangle to that intersection. If they do not, return
               false and do not change this rectangle.
 */
- (jboolean)setIntersectWithADRectF:(ADRectF *)a
                        withADRectF:(ADRectF *)b;

/*!
 @brief Swap top/bottom or left/right if there are flipped (i.e.left > right
  and/or top > bottom).
 This can be called if
  the edges are computed separately, and may have crossed over each other.
  If the edges are already correct (i.e. left <= right and top <= bottom)
  then nothing is done.
 */
- (void)sort;

/*!
 @brief Return a string representation of the rectangle in a compact form.
 */
- (NSString *)toShortString;

/*!
 @brief Return a string representation of the rectangle in a compact form.
 */
- (NSString *)toShortStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

- (NSString *)description;

/*!
 @brief Update this Rect to enclose itself and the [x,y] coordinate.There is no
  check to see that this rectangle is non-empty.
 @param x The x coordinate of the point to add to the rectangle
 @param y The y coordinate of the point to add to the rectangle
 */
- (void)union__WithFloat:(jfloat)x
               withFloat:(jfloat)y;

/*!
 @brief Update this Rect to enclose itself and the specified rectangle.If the
  specified rectangle is empty, nothing is done.
 If this rectangle is empty
  it is set to the specified rectangle.
 @param left The left edge being unioned with this rectangle
 @param top The top edge being unioned with this rectangle
 @param right The right edge being unioned with this rectangle
 @param bottom The bottom edge being unioned with this rectangle
 */
- (void)union__WithFloat:(jfloat)left
               withFloat:(jfloat)top
               withFloat:(jfloat)right
               withFloat:(jfloat)bottom;

/*!
 @brief Update this Rect to enclose itself and the specified rectangle.If the
  specified rectangle is empty, nothing is done.
 If this rectangle is empty
  it is set to the specified rectangle.
 @param r The rectangle being unioned with this rectangle
 */
- (void)union__WithADRectF:(ADRectF *)r;

/*!
 @return the rectangle's width. This does not check for a valid rectangle
  (i.e. left <= right) so the result may be negative.
 */
- (jfloat)width;

/*!
 @brief Write this rectangle to the specified parcel.To restore a rectangle from
  a parcel, use readFromParcel()
 @param outArg The parcel to write the rectangle's coordinates into
 */
- (void)writeToParcelWithADParcel:(id<ADParcel>)outArg
                          withInt:(jint)flags;

@end

J2OBJC_STATIC_INIT(ADRectF)

inline ADParcelable_Creator *ADRectF_get_CREATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADParcelable_Creator *ADRectF_CREATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADRectF, CREATOR, ADParcelable_Creator *)

FOUNDATION_EXPORT void ADRectF_init(ADRectF *self);

FOUNDATION_EXPORT ADRectF *new_ADRectF_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADRectF *create_ADRectF_init(void);

FOUNDATION_EXPORT void ADRectF_initWithFloat_withFloat_withFloat_withFloat_(ADRectF *self, jfloat left, jfloat top, jfloat right, jfloat bottom);

FOUNDATION_EXPORT ADRectF *new_ADRectF_initWithFloat_withFloat_withFloat_withFloat_(jfloat left, jfloat top, jfloat right, jfloat bottom) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADRectF *create_ADRectF_initWithFloat_withFloat_withFloat_withFloat_(jfloat left, jfloat top, jfloat right, jfloat bottom);

FOUNDATION_EXPORT void ADRectF_initWithADRectF_(ADRectF *self, ADRectF *r);

FOUNDATION_EXPORT ADRectF *new_ADRectF_initWithADRectF_(ADRectF *r) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADRectF *create_ADRectF_initWithADRectF_(ADRectF *r);

FOUNDATION_EXPORT void ADRectF_initWithADRect_(ADRectF *self, ADRect *r);

FOUNDATION_EXPORT ADRectF *new_ADRectF_initWithADRect_(ADRect *r) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADRectF *create_ADRectF_initWithADRect_(ADRect *r);

FOUNDATION_EXPORT jboolean ADRectF_intersectsWithADRectF_withADRectF_(ADRectF *a, ADRectF *b);

J2OBJC_TYPE_LITERAL_HEADER(ADRectF)

@compatibility_alias RAndroidGraphicsRectF ADRectF;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_RectF")
