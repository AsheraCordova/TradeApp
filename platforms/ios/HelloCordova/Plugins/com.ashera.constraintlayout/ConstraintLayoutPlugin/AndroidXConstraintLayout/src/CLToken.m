//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLToken.java
//

#include "CLElement.h"
#include "CLParser.h"
#include "CLParsingException.h"
#include "CLToken.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/StringBuilder.h"


__attribute__((unused)) static void ADXCLToken_Type_initWithNSString_withInt_(ADXCLToken_Type *self, NSString *__name, jint __ordinal);

@implementation ADXCLToken

- (jboolean)getBoolean {
  if (type_ == JreLoadEnum(ADXCLToken_Type, TRUE)) {
    return true;
  }
  if (type_ == JreLoadEnum(ADXCLToken_Type, FALSE)) {
    return false;
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$C", @"this token is not a boolean: <", [self content], '>'), self);
}

- (jboolean)isNull {
  if (type_ == JreLoadEnum(ADXCLToken_Type, NULL)) {
    return true;
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$C", @"this token is not a null: <", [self content], '>'), self);
}

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLToken_initWithCharArray_(self, content);
  return self;
}

+ (ADXCLElement *)allocateWithCharArray:(IOSCharArray *)content {
  return ADXCLToken_allocateWithCharArray_(content);
}

- (NSString *)toJSON {
  if (JreLoadStatic(ADXCLParser, DEBUG)) {
    return JreStrcat("C$C", '<', [self content], '>');
  }
  else {
    return [self content];
  }
}

- (NSString *)toFormattedJSONWithInt:(jint)indent
                             withInt:(jint)forceIndent {
  JavaLangStringBuilder *json = create_JavaLangStringBuilder_init();
  [self addIndentWithJavaLangStringBuilder:json withInt:indent];
  [json appendWithNSString:[self content]];
  return [json description];
}

- (ADXCLToken_Type *)getType {
  return type_;
}

- (jboolean)validateWithChar:(jchar)c
                    withLong:(jlong)position {
  jboolean isValid = false;
  switch ([type_ ordinal]) {
    case ADXCLToken_Type_Enum_TRUE:
    {
      isValid = (IOSCharArray_Get(nil_chk(tokenTrue_), index_) == c);
      if (isValid && index_ + 1 == tokenTrue_->size_) {
        [self setEndWithLong:position];
      }
    }
    break;
    case ADXCLToken_Type_Enum_FALSE:
    {
      isValid = (IOSCharArray_Get(nil_chk(tokenFalse_), index_) == c);
      if (isValid && index_ + 1 == tokenFalse_->size_) {
        [self setEndWithLong:position];
      }
    }
    break;
    case ADXCLToken_Type_Enum_NULL:
    {
      isValid = (IOSCharArray_Get(nil_chk(tokenNull_), index_) == c);
      if (isValid && index_ + 1 == tokenNull_->size_) {
        [self setEndWithLong:position];
      }
    }
    break;
    case ADXCLToken_Type_Enum_UNKNOWN:
    {
      if (IOSCharArray_Get(nil_chk(tokenTrue_), index_) == c) {
        JreStrongAssign(&type_, JreLoadEnum(ADXCLToken_Type, TRUE));
        isValid = true;
      }
      else if (IOSCharArray_Get(nil_chk(tokenFalse_), index_) == c) {
        JreStrongAssign(&type_, JreLoadEnum(ADXCLToken_Type, FALSE));
        isValid = true;
      }
      else if (IOSCharArray_Get(nil_chk(tokenNull_), index_) == c) {
        JreStrongAssign(&type_, JreLoadEnum(ADXCLToken_Type, NULL));
        isValid = true;
      }
    }
  }
  index_++;
  return isValid;
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(tokenTrue_);
  RELEASE_(tokenFalse_);
  RELEASE_(tokenNull_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 0, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXCLToken_Type;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getBoolean);
  methods[1].selector = @selector(isNull);
  methods[2].selector = @selector(initWithCharArray:);
  methods[3].selector = @selector(allocateWithCharArray:);
  methods[4].selector = @selector(toJSON);
  methods[5].selector = @selector(toFormattedJSONWithInt:withInt:);
  methods[6].selector = @selector(getType);
  methods[7].selector = @selector(validateWithChar:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "type_", "LADXCLToken_Type;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tokenTrue_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tokenFalse_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "tokenNull_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCLParsingException;", "[C", "allocate", "toFormattedJSON", "II", "validate", "CJ", "LADXCLToken_Type;" };
  static const J2ObjcClassInfo _ADXCLToken = { "CLToken", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x1, 8, 5, -1, 7, -1, -1, -1 };
  return &_ADXCLToken;
}

@end

void ADXCLToken_initWithCharArray_(ADXCLToken *self, IOSCharArray *content) {
  ADXCLElement_initWithCharArray_(self, content);
  self->index_ = 0;
  JreStrongAssign(&self->type_, JreLoadEnum(ADXCLToken_Type, UNKNOWN));
  JreStrongAssign(&self->tokenTrue_, [@"true" java_toCharArray]);
  JreStrongAssign(&self->tokenFalse_, [@"false" java_toCharArray]);
  JreStrongAssign(&self->tokenNull_, [@"null" java_toCharArray]);
}

ADXCLToken *new_ADXCLToken_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLToken, initWithCharArray_, content)
}

ADXCLToken *create_ADXCLToken_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLToken, initWithCharArray_, content)
}

ADXCLElement *ADXCLToken_allocateWithCharArray_(IOSCharArray *content) {
  ADXCLToken_initialize();
  return create_ADXCLToken_initWithCharArray_(content);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLToken)

J2OBJC_INITIALIZED_DEFN(ADXCLToken_Type)

ADXCLToken_Type *ADXCLToken_Type_values_[4];

@implementation ADXCLToken_Type

+ (IOSObjectArray *)values {
  return ADXCLToken_Type_values();
}

+ (ADXCLToken_Type *)valueOfWithNSString:(NSString *)name {
  return ADXCLToken_Type_valueOfWithNSString_(name);
}

- (ADXCLToken_Type_Enum)toNSEnum {
  return (ADXCLToken_Type_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXCLToken_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXCLToken_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNKNOWN", "LADXCLToken_Type;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "TRUE", "LADXCLToken_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "FALSE", "LADXCLToken_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "NULL", "LADXCLToken_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXCLToken_Type, UNKNOWN), &JreEnum(ADXCLToken_Type, TRUE), &JreEnum(ADXCLToken_Type, FALSE), &JreEnum(ADXCLToken_Type, NULL), "LADXCLToken;", "Ljava/lang/Enum<Landroidx/constraintlayout/core/parser/CLToken$Type;>;" };
  static const J2ObjcClassInfo _ADXCLToken_Type = { "Type", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x4018, 2, 4, 6, -1, -1, 7, -1 };
  return &_ADXCLToken_Type;
}

+ (void)initialize {
  if (self == [ADXCLToken_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(ADXCLToken_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXCLToken_Type_initWithNSString_withInt_(e, JreEnumConstantName(ADXCLToken_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXCLToken_Type)
  }
}

@end

void ADXCLToken_Type_initWithNSString_withInt_(ADXCLToken_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXCLToken_Type_values() {
  ADXCLToken_Type_initialize();
  return [IOSObjectArray arrayWithObjects:ADXCLToken_Type_values_ count:4 type:ADXCLToken_Type_class_()];
}

ADXCLToken_Type *ADXCLToken_Type_valueOfWithNSString_(NSString *name) {
  ADXCLToken_Type_initialize();
  for (int i = 0; i < 4; i++) {
    ADXCLToken_Type *e = ADXCLToken_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXCLToken_Type *ADXCLToken_Type_fromOrdinal(NSUInteger ordinal) {
  ADXCLToken_Type_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ADXCLToken_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLToken_Type)
