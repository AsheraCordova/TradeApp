//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\TypedValues.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TypedValues")
#ifdef RESTRICT_TypedValues
#define INCLUDE_ALL_TypedValues 0
#else
#define INCLUDE_ALL_TypedValues 1
#endif
#undef RESTRICT_TypedValues

#if !defined (ADXTypedValues_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues))
#define ADXTypedValues_

/*!
 @brief Provides an interface to values used in KeyFrames and in
  Starting and Ending Widgets
 */
@protocol ADXTypedValues < JavaObject >

/*!
 @brief Used to set integer values
 @param id_
 @param value
 @return true if it accepted the value
 */
- (jboolean)setValueWithInt:(jint)id_
                    withInt:(jint)value;

/*!
 @brief Used to set float values
 @param id_
 @param value
 @return true if it accepted the value
 */
- (jboolean)setValueWithInt:(jint)id_
                  withFloat:(jfloat)value;

/*!
 @brief Used to set String values
 @param id_
 @param value
 @return true if it accepted the value
 */
- (jboolean)setValueWithInt:(jint)id_
               withNSString:(NSString *)value;

/*!
 @brief Used to set boolean values
 @param id_
 @param value
 @return true if it accepted the value
 */
- (jboolean)setValueWithInt:(jint)id_
                withBoolean:(jboolean)value;

- (jint)getIdWithNSString:(NSString *)name;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXTypedValues)

inline NSString *ADXTypedValues_get_S_CUSTOM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_S_CUSTOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues, S_CUSTOM, NSString *)

inline jint ADXTypedValues_get_BOOLEAN_MASK(void);
#define ADXTypedValues_BOOLEAN_MASK 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues, BOOLEAN_MASK, jint)

inline jint ADXTypedValues_get_INT_MASK(void);
#define ADXTypedValues_INT_MASK 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues, INT_MASK, jint)

inline jint ADXTypedValues_get_FLOAT_MASK(void);
#define ADXTypedValues_FLOAT_MASK 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues, FLOAT_MASK, jint)

inline jint ADXTypedValues_get_STRING_MASK(void);
#define ADXTypedValues_STRING_MASK 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues, STRING_MASK, jint)

inline jint ADXTypedValues_get_TYPE_FRAME_POSITION(void);
#define ADXTypedValues_TYPE_FRAME_POSITION 100
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues, TYPE_FRAME_POSITION, jint)

inline jint ADXTypedValues_get_TYPE_TARGET(void);
#define ADXTypedValues_TYPE_TARGET 101
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues, TYPE_TARGET, jint)

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues)

#define AndroidxConstraintlayoutCoreMotionUtilsTypedValues ADXTypedValues

#endif

#if !defined (ADXTypedValues_Attributes_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues_Attributes))
#define ADXTypedValues_Attributes_

@class IOSObjectArray;

@protocol ADXTypedValues_Attributes < JavaObject >

@end

@interface ADXTypedValues_Attributes : NSObject

/*!
 @brief Method to go from String names of values to id of the values
  IDs are use for efficiency
 @param name the name of the value
 @return the id of the vlalue or -1 if no value exist
 */
+ (jint)getIdWithNSString:(NSString *)name;

+ (jint)getTypeWithInt:(jint)name;

@end

J2OBJC_STATIC_INIT(ADXTypedValues_Attributes)

inline jint ADXTypedValues_Attributes_get_TYPE_CURVE_FIT(void);
#define ADXTypedValues_Attributes_TYPE_CURVE_FIT 301
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_CURVE_FIT, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_VISIBILITY(void);
#define ADXTypedValues_Attributes_TYPE_VISIBILITY 302
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_VISIBILITY, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_ALPHA(void);
#define ADXTypedValues_Attributes_TYPE_ALPHA 303
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_ALPHA, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_TRANSLATION_X(void);
#define ADXTypedValues_Attributes_TYPE_TRANSLATION_X 304
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_TRANSLATION_X, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_TRANSLATION_Y(void);
#define ADXTypedValues_Attributes_TYPE_TRANSLATION_Y 305
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_TRANSLATION_Y, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_TRANSLATION_Z(void);
#define ADXTypedValues_Attributes_TYPE_TRANSLATION_Z 306
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_TRANSLATION_Z, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_ELEVATION(void);
#define ADXTypedValues_Attributes_TYPE_ELEVATION 307
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_ELEVATION, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_ROTATION_X(void);
#define ADXTypedValues_Attributes_TYPE_ROTATION_X 308
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_ROTATION_X, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_ROTATION_Y(void);
#define ADXTypedValues_Attributes_TYPE_ROTATION_Y 309
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_ROTATION_Y, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_ROTATION_Z(void);
#define ADXTypedValues_Attributes_TYPE_ROTATION_Z 310
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_ROTATION_Z, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_SCALE_X(void);
#define ADXTypedValues_Attributes_TYPE_SCALE_X 311
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_SCALE_X, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_SCALE_Y(void);
#define ADXTypedValues_Attributes_TYPE_SCALE_Y 312
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_SCALE_Y, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_PIVOT_X(void);
#define ADXTypedValues_Attributes_TYPE_PIVOT_X 313
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_PIVOT_X, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_PIVOT_Y(void);
#define ADXTypedValues_Attributes_TYPE_PIVOT_Y 314
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_PIVOT_Y, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_PROGRESS(void);
#define ADXTypedValues_Attributes_TYPE_PROGRESS 315
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_PROGRESS, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_PATH_ROTATE(void);
#define ADXTypedValues_Attributes_TYPE_PATH_ROTATE 316
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_PATH_ROTATE, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_EASING(void);
#define ADXTypedValues_Attributes_TYPE_EASING 317
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_EASING, jint)

inline jint ADXTypedValues_Attributes_get_TYPE_PIVOT_TARGET(void);
#define ADXTypedValues_Attributes_TYPE_PIVOT_TARGET 318
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Attributes, TYPE_PIVOT_TARGET, jint)

inline NSString *ADXTypedValues_Attributes_get_S_CURVE_FIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_CURVE_FIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_CURVE_FIT, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_VISIBILITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_VISIBILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_VISIBILITY, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_ALPHA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_ALPHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_ALPHA, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_TRANSLATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_TRANSLATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_TRANSLATION_X, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_TRANSLATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_TRANSLATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_TRANSLATION_Y, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_TRANSLATION_Z(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_TRANSLATION_Z;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_TRANSLATION_Z, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_ELEVATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_ELEVATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_ELEVATION, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_ROTATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_ROTATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_ROTATION_X, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_ROTATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_ROTATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_ROTATION_Y, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_ROTATION_Z(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_ROTATION_Z;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_ROTATION_Z, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_SCALE_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_SCALE_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_SCALE_X, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_SCALE_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_SCALE_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_SCALE_Y, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_PIVOT_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_PIVOT_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_PIVOT_X, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_PIVOT_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_PIVOT_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_PIVOT_Y, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_PROGRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_PROGRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_PROGRESS, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_PATH_ROTATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_PATH_ROTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_PATH_ROTATE, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_EASING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_EASING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_EASING, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_CUSTOM(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_CUSTOM;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_CUSTOM, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_FRAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_FRAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_FRAME, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_TARGET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_TARGET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_TARGET, NSString *)

inline NSString *ADXTypedValues_Attributes_get_S_PIVOT_TARGET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Attributes_S_PIVOT_TARGET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, S_PIVOT_TARGET, NSString *)

inline IOSObjectArray *ADXTypedValues_Attributes_get_KEY_WORDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXTypedValues_Attributes_KEY_WORDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Attributes, KEY_WORDS, IOSObjectArray *)

FOUNDATION_EXPORT jint ADXTypedValues_Attributes_getIdWithNSString_(NSString *name);

FOUNDATION_EXPORT jint ADXTypedValues_Attributes_getTypeWithInt_(jint name);

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues_Attributes)

#endif

#if !defined (ADXTypedValues_Cycle_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues_Cycle))
#define ADXTypedValues_Cycle_

@class IOSObjectArray;

@protocol ADXTypedValues_Cycle < JavaObject >

@end

@interface ADXTypedValues_Cycle : NSObject

/*!
 @brief Method to go from String names of values to id of the values
  IDs are use for efficiency
 @param name the name of the value
 @return the id of the vlalue or -1 if no value exist
 */
+ (jint)getIdWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(ADXTypedValues_Cycle)

inline jint ADXTypedValues_Cycle_get_TYPE_CURVE_FIT(void);
#define ADXTypedValues_Cycle_TYPE_CURVE_FIT 401
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_CURVE_FIT, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_VISIBILITY(void);
#define ADXTypedValues_Cycle_TYPE_VISIBILITY 402
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_VISIBILITY, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_ALPHA(void);
#define ADXTypedValues_Cycle_TYPE_ALPHA 403
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_ALPHA, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_TRANSLATION_X(void);
#define ADXTypedValues_Cycle_TYPE_TRANSLATION_X 304
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_TRANSLATION_X, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_TRANSLATION_Y(void);
#define ADXTypedValues_Cycle_TYPE_TRANSLATION_Y 305
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_TRANSLATION_Y, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_TRANSLATION_Z(void);
#define ADXTypedValues_Cycle_TYPE_TRANSLATION_Z 306
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_TRANSLATION_Z, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_ELEVATION(void);
#define ADXTypedValues_Cycle_TYPE_ELEVATION 307
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_ELEVATION, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_ROTATION_X(void);
#define ADXTypedValues_Cycle_TYPE_ROTATION_X 308
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_ROTATION_X, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_ROTATION_Y(void);
#define ADXTypedValues_Cycle_TYPE_ROTATION_Y 309
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_ROTATION_Y, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_ROTATION_Z(void);
#define ADXTypedValues_Cycle_TYPE_ROTATION_Z 310
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_ROTATION_Z, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_SCALE_X(void);
#define ADXTypedValues_Cycle_TYPE_SCALE_X 311
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_SCALE_X, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_SCALE_Y(void);
#define ADXTypedValues_Cycle_TYPE_SCALE_Y 312
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_SCALE_Y, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_PIVOT_X(void);
#define ADXTypedValues_Cycle_TYPE_PIVOT_X 313
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_PIVOT_X, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_PIVOT_Y(void);
#define ADXTypedValues_Cycle_TYPE_PIVOT_Y 314
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_PIVOT_Y, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_PROGRESS(void);
#define ADXTypedValues_Cycle_TYPE_PROGRESS 315
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_PROGRESS, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_PATH_ROTATE(void);
#define ADXTypedValues_Cycle_TYPE_PATH_ROTATE 416
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_PATH_ROTATE, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_EASING(void);
#define ADXTypedValues_Cycle_TYPE_EASING 420
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_EASING, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_WAVE_SHAPE(void);
#define ADXTypedValues_Cycle_TYPE_WAVE_SHAPE 421
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_WAVE_SHAPE, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_CUSTOM_WAVE_SHAPE(void);
#define ADXTypedValues_Cycle_TYPE_CUSTOM_WAVE_SHAPE 422
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_CUSTOM_WAVE_SHAPE, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_WAVE_PERIOD(void);
#define ADXTypedValues_Cycle_TYPE_WAVE_PERIOD 423
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_WAVE_PERIOD, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_WAVE_OFFSET(void);
#define ADXTypedValues_Cycle_TYPE_WAVE_OFFSET 424
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_WAVE_OFFSET, jint)

inline jint ADXTypedValues_Cycle_get_TYPE_WAVE_PHASE(void);
#define ADXTypedValues_Cycle_TYPE_WAVE_PHASE 425
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Cycle, TYPE_WAVE_PHASE, jint)

inline NSString *ADXTypedValues_Cycle_get_S_CURVE_FIT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_CURVE_FIT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_CURVE_FIT, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_VISIBILITY(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_VISIBILITY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_VISIBILITY, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_ALPHA(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_ALPHA;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_ALPHA, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_TRANSLATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_TRANSLATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_TRANSLATION_X, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_TRANSLATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_TRANSLATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_TRANSLATION_Y, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_TRANSLATION_Z(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_TRANSLATION_Z;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_TRANSLATION_Z, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_ELEVATION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_ELEVATION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_ELEVATION, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_ROTATION_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_ROTATION_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_ROTATION_X, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_ROTATION_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_ROTATION_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_ROTATION_Y, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_ROTATION_Z(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_ROTATION_Z;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_ROTATION_Z, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_SCALE_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_SCALE_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_SCALE_X, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_SCALE_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_SCALE_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_SCALE_Y, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_PIVOT_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_PIVOT_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_PIVOT_X, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_PIVOT_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_PIVOT_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_PIVOT_Y, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_PROGRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_PROGRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_PROGRESS, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_PATH_ROTATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_PATH_ROTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_PATH_ROTATE, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_EASING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_EASING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_EASING, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_WAVE_SHAPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_WAVE_SHAPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_WAVE_SHAPE, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_CUSTOM_WAVE_SHAPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_CUSTOM_WAVE_SHAPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_CUSTOM_WAVE_SHAPE, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_WAVE_PERIOD(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_WAVE_PERIOD;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_WAVE_PERIOD, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_WAVE_OFFSET(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_WAVE_OFFSET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_WAVE_OFFSET, NSString *)

inline NSString *ADXTypedValues_Cycle_get_S_WAVE_PHASE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Cycle_S_WAVE_PHASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, S_WAVE_PHASE, NSString *)

inline IOSObjectArray *ADXTypedValues_Cycle_get_KEY_WORDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXTypedValues_Cycle_KEY_WORDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Cycle, KEY_WORDS, IOSObjectArray *)

FOUNDATION_EXPORT jint ADXTypedValues_Cycle_getIdWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues_Cycle)

#endif

#if !defined (ADXTypedValues_Trigger_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues_Trigger))
#define ADXTypedValues_Trigger_

@class IOSObjectArray;

@protocol ADXTypedValues_Trigger < JavaObject >

@end

@interface ADXTypedValues_Trigger : NSObject

/*!
 @brief Method to go from String names of values to id of the values
  IDs are use for efficiency
 @param name the name of the value
 @return the id of the vlalue or -1 if no value exist
 */
+ (jint)getIdWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(ADXTypedValues_Trigger)

inline NSString *ADXTypedValues_Trigger_get_VIEW_TRANSITION_ON_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_VIEW_TRANSITION_ON_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, VIEW_TRANSITION_ON_CROSS, NSString *)

inline NSString *ADXTypedValues_Trigger_get_VIEW_TRANSITION_ON_POSITIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_VIEW_TRANSITION_ON_POSITIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, VIEW_TRANSITION_ON_POSITIVE_CROSS, NSString *)

inline NSString *ADXTypedValues_Trigger_get_VIEW_TRANSITION_ON_NEGATIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_VIEW_TRANSITION_ON_NEGATIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, VIEW_TRANSITION_ON_NEGATIVE_CROSS, NSString *)

inline NSString *ADXTypedValues_Trigger_get_POST_LAYOUT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_POST_LAYOUT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, POST_LAYOUT, NSString *)

inline NSString *ADXTypedValues_Trigger_get_TRIGGER_SLACK(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_TRIGGER_SLACK;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, TRIGGER_SLACK, NSString *)

inline NSString *ADXTypedValues_Trigger_get_TRIGGER_COLLISION_VIEW(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_TRIGGER_COLLISION_VIEW;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, TRIGGER_COLLISION_VIEW, NSString *)

inline NSString *ADXTypedValues_Trigger_get_TRIGGER_COLLISION_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_TRIGGER_COLLISION_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, TRIGGER_COLLISION_ID, NSString *)

inline NSString *ADXTypedValues_Trigger_get_TRIGGER_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_TRIGGER_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, TRIGGER_ID, NSString *)

inline NSString *ADXTypedValues_Trigger_get_POSITIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_POSITIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, POSITIVE_CROSS, NSString *)

inline NSString *ADXTypedValues_Trigger_get_NEGATIVE_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_NEGATIVE_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, NEGATIVE_CROSS, NSString *)

inline NSString *ADXTypedValues_Trigger_get_TRIGGER_RECEIVER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_TRIGGER_RECEIVER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, TRIGGER_RECEIVER, NSString *)

inline NSString *ADXTypedValues_Trigger_get_CROSS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Trigger_CROSS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, CROSS, NSString *)

inline IOSObjectArray *ADXTypedValues_Trigger_get_KEY_WORDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXTypedValues_Trigger_KEY_WORDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Trigger, KEY_WORDS, IOSObjectArray *)

inline jint ADXTypedValues_Trigger_get_TYPE_VIEW_TRANSITION_ON_CROSS(void);
#define ADXTypedValues_Trigger_TYPE_VIEW_TRANSITION_ON_CROSS 301
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_VIEW_TRANSITION_ON_CROSS, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_VIEW_TRANSITION_ON_POSITIVE_CROSS(void);
#define ADXTypedValues_Trigger_TYPE_VIEW_TRANSITION_ON_POSITIVE_CROSS 302
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_VIEW_TRANSITION_ON_POSITIVE_CROSS, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_VIEW_TRANSITION_ON_NEGATIVE_CROSS(void);
#define ADXTypedValues_Trigger_TYPE_VIEW_TRANSITION_ON_NEGATIVE_CROSS 303
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_VIEW_TRANSITION_ON_NEGATIVE_CROSS, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_POST_LAYOUT(void);
#define ADXTypedValues_Trigger_TYPE_POST_LAYOUT 304
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_POST_LAYOUT, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_TRIGGER_SLACK(void);
#define ADXTypedValues_Trigger_TYPE_TRIGGER_SLACK 305
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_TRIGGER_SLACK, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_TRIGGER_COLLISION_VIEW(void);
#define ADXTypedValues_Trigger_TYPE_TRIGGER_COLLISION_VIEW 306
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_TRIGGER_COLLISION_VIEW, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_TRIGGER_COLLISION_ID(void);
#define ADXTypedValues_Trigger_TYPE_TRIGGER_COLLISION_ID 307
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_TRIGGER_COLLISION_ID, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_TRIGGER_ID(void);
#define ADXTypedValues_Trigger_TYPE_TRIGGER_ID 308
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_TRIGGER_ID, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_POSITIVE_CROSS(void);
#define ADXTypedValues_Trigger_TYPE_POSITIVE_CROSS 309
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_POSITIVE_CROSS, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_NEGATIVE_CROSS(void);
#define ADXTypedValues_Trigger_TYPE_NEGATIVE_CROSS 310
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_NEGATIVE_CROSS, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_TRIGGER_RECEIVER(void);
#define ADXTypedValues_Trigger_TYPE_TRIGGER_RECEIVER 311
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_TRIGGER_RECEIVER, jint)

inline jint ADXTypedValues_Trigger_get_TYPE_CROSS(void);
#define ADXTypedValues_Trigger_TYPE_CROSS 312
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Trigger, TYPE_CROSS, jint)

FOUNDATION_EXPORT jint ADXTypedValues_Trigger_getIdWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues_Trigger)

#endif

#if !defined (ADXTypedValues_Position_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues_Position))
#define ADXTypedValues_Position_

@class IOSObjectArray;

@protocol ADXTypedValues_Position < JavaObject >

@end

@interface ADXTypedValues_Position : NSObject

/*!
 @brief Method to go from String names of values to id of the values
  IDs are use for efficiency
 @param name the name of the value
 @return the id of the vlalue or -1 if no value exist
 */
+ (jint)getIdWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(ADXTypedValues_Position)

inline NSString *ADXTypedValues_Position_get_S_TRANSITION_EASING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_TRANSITION_EASING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_TRANSITION_EASING, NSString *)

inline NSString *ADXTypedValues_Position_get_S_DRAWPATH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_DRAWPATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_DRAWPATH, NSString *)

inline NSString *ADXTypedValues_Position_get_S_PERCENT_WIDTH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_PERCENT_WIDTH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_PERCENT_WIDTH, NSString *)

inline NSString *ADXTypedValues_Position_get_S_PERCENT_HEIGHT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_PERCENT_HEIGHT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_PERCENT_HEIGHT, NSString *)

inline NSString *ADXTypedValues_Position_get_S_SIZE_PERCENT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_SIZE_PERCENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_SIZE_PERCENT, NSString *)

inline NSString *ADXTypedValues_Position_get_S_PERCENT_X(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_PERCENT_X;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_PERCENT_X, NSString *)

inline NSString *ADXTypedValues_Position_get_S_PERCENT_Y(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Position_S_PERCENT_Y;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, S_PERCENT_Y, NSString *)

inline jint ADXTypedValues_Position_get_TYPE_TRANSITION_EASING(void);
#define ADXTypedValues_Position_TYPE_TRANSITION_EASING 501
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_TRANSITION_EASING, jint)

inline jint ADXTypedValues_Position_get_TYPE_DRAWPATH(void);
#define ADXTypedValues_Position_TYPE_DRAWPATH 502
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_DRAWPATH, jint)

inline jint ADXTypedValues_Position_get_TYPE_PERCENT_WIDTH(void);
#define ADXTypedValues_Position_TYPE_PERCENT_WIDTH 503
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_PERCENT_WIDTH, jint)

inline jint ADXTypedValues_Position_get_TYPE_PERCENT_HEIGHT(void);
#define ADXTypedValues_Position_TYPE_PERCENT_HEIGHT 504
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_PERCENT_HEIGHT, jint)

inline jint ADXTypedValues_Position_get_TYPE_SIZE_PERCENT(void);
#define ADXTypedValues_Position_TYPE_SIZE_PERCENT 505
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_SIZE_PERCENT, jint)

inline jint ADXTypedValues_Position_get_TYPE_PERCENT_X(void);
#define ADXTypedValues_Position_TYPE_PERCENT_X 506
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_PERCENT_X, jint)

inline jint ADXTypedValues_Position_get_TYPE_PERCENT_Y(void);
#define ADXTypedValues_Position_TYPE_PERCENT_Y 507
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_PERCENT_Y, jint)

inline jint ADXTypedValues_Position_get_TYPE_CURVE_FIT(void);
#define ADXTypedValues_Position_TYPE_CURVE_FIT 508
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_CURVE_FIT, jint)

inline jint ADXTypedValues_Position_get_TYPE_PATH_MOTION_ARC(void);
#define ADXTypedValues_Position_TYPE_PATH_MOTION_ARC 509
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_PATH_MOTION_ARC, jint)

inline jint ADXTypedValues_Position_get_TYPE_POSITION_TYPE(void);
#define ADXTypedValues_Position_TYPE_POSITION_TYPE 510
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Position, TYPE_POSITION_TYPE, jint)

inline IOSObjectArray *ADXTypedValues_Position_get_KEY_WORDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXTypedValues_Position_KEY_WORDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Position, KEY_WORDS, IOSObjectArray *)

FOUNDATION_EXPORT jint ADXTypedValues_Position_getIdWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues_Position)

#endif

#if !defined (ADXTypedValues_Motion_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues_Motion))
#define ADXTypedValues_Motion_

@class IOSObjectArray;

@protocol ADXTypedValues_Motion < JavaObject >

@end

@interface ADXTypedValues_Motion : NSObject

/*!
 @brief Method to go from String names of values to id of the values
  IDs are use for efficiency
 @param name the name of the value
 @return the id of the vlalue or -1 if no value exist
 */
+ (jint)getIdWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(ADXTypedValues_Motion)

inline NSString *ADXTypedValues_Motion_get_S_STAGGER(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_STAGGER;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_STAGGER, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_PATH_ROTATE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_PATH_ROTATE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_PATH_ROTATE, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_QUANTIZE_MOTION_PHASE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_QUANTIZE_MOTION_PHASE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_QUANTIZE_MOTION_PHASE, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_EASING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_EASING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_EASING, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_QUANTIZE_INTERPOLATOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_QUANTIZE_INTERPOLATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_QUANTIZE_INTERPOLATOR, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_ANIMATE_RELATIVE_TO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_ANIMATE_RELATIVE_TO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_ANIMATE_RELATIVE_TO, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_ANIMATE_CIRCLEANGLE_TO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_ANIMATE_CIRCLEANGLE_TO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_ANIMATE_CIRCLEANGLE_TO, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_PATHMOTION_ARC(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_PATHMOTION_ARC;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_PATHMOTION_ARC, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_DRAW_PATH(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_DRAW_PATH;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_DRAW_PATH, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_POLAR_RELATIVETO(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_POLAR_RELATIVETO;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_POLAR_RELATIVETO, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_QUANTIZE_MOTIONSTEPS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_QUANTIZE_MOTIONSTEPS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_QUANTIZE_MOTIONSTEPS, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_QUANTIZE_INTERPOLATOR_TYPE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_QUANTIZE_INTERPOLATOR_TYPE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_QUANTIZE_INTERPOLATOR_TYPE, NSString *)

inline NSString *ADXTypedValues_Motion_get_S_QUANTIZE_INTERPOLATOR_ID(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Motion_S_QUANTIZE_INTERPOLATOR_ID;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, S_QUANTIZE_INTERPOLATOR_ID, NSString *)

inline IOSObjectArray *ADXTypedValues_Motion_get_KEY_WORDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXTypedValues_Motion_KEY_WORDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Motion, KEY_WORDS, IOSObjectArray *)

inline jint ADXTypedValues_Motion_get_TYPE_STAGGER(void);
#define ADXTypedValues_Motion_TYPE_STAGGER 600
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_STAGGER, jint)

inline jint ADXTypedValues_Motion_get_TYPE_PATH_ROTATE(void);
#define ADXTypedValues_Motion_TYPE_PATH_ROTATE 601
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_PATH_ROTATE, jint)

inline jint ADXTypedValues_Motion_get_TYPE_QUANTIZE_MOTION_PHASE(void);
#define ADXTypedValues_Motion_TYPE_QUANTIZE_MOTION_PHASE 602
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_QUANTIZE_MOTION_PHASE, jint)

inline jint ADXTypedValues_Motion_get_TYPE_EASING(void);
#define ADXTypedValues_Motion_TYPE_EASING 603
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_EASING, jint)

inline jint ADXTypedValues_Motion_get_TYPE_QUANTIZE_INTERPOLATOR(void);
#define ADXTypedValues_Motion_TYPE_QUANTIZE_INTERPOLATOR 604
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_QUANTIZE_INTERPOLATOR, jint)

inline jint ADXTypedValues_Motion_get_TYPE_ANIMATE_RELATIVE_TO(void);
#define ADXTypedValues_Motion_TYPE_ANIMATE_RELATIVE_TO 605
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_ANIMATE_RELATIVE_TO, jint)

inline jint ADXTypedValues_Motion_get_TYPE_ANIMATE_CIRCLEANGLE_TO(void);
#define ADXTypedValues_Motion_TYPE_ANIMATE_CIRCLEANGLE_TO 606
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_ANIMATE_CIRCLEANGLE_TO, jint)

inline jint ADXTypedValues_Motion_get_TYPE_PATHMOTION_ARC(void);
#define ADXTypedValues_Motion_TYPE_PATHMOTION_ARC 607
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_PATHMOTION_ARC, jint)

inline jint ADXTypedValues_Motion_get_TYPE_DRAW_PATH(void);
#define ADXTypedValues_Motion_TYPE_DRAW_PATH 608
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_DRAW_PATH, jint)

inline jint ADXTypedValues_Motion_get_TYPE_POLAR_RELATIVETO(void);
#define ADXTypedValues_Motion_TYPE_POLAR_RELATIVETO 609
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_POLAR_RELATIVETO, jint)

inline jint ADXTypedValues_Motion_get_TYPE_QUANTIZE_MOTIONSTEPS(void);
#define ADXTypedValues_Motion_TYPE_QUANTIZE_MOTIONSTEPS 610
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_QUANTIZE_MOTIONSTEPS, jint)

inline jint ADXTypedValues_Motion_get_TYPE_QUANTIZE_INTERPOLATOR_TYPE(void);
#define ADXTypedValues_Motion_TYPE_QUANTIZE_INTERPOLATOR_TYPE 611
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_QUANTIZE_INTERPOLATOR_TYPE, jint)

inline jint ADXTypedValues_Motion_get_TYPE_QUANTIZE_INTERPOLATOR_ID(void);
#define ADXTypedValues_Motion_TYPE_QUANTIZE_INTERPOLATOR_ID 612
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Motion, TYPE_QUANTIZE_INTERPOLATOR_ID, jint)

FOUNDATION_EXPORT jint ADXTypedValues_Motion_getIdWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues_Motion)

#endif

#if !defined (ADXTypedValues_Custom_) && (INCLUDE_ALL_TypedValues || defined(INCLUDE_ADXTypedValues_Custom))
#define ADXTypedValues_Custom_

@class IOSObjectArray;

@protocol ADXTypedValues_Custom < JavaObject >

@end

@interface ADXTypedValues_Custom : NSObject

/*!
 @brief Method to go from String names of values to id of the values
  IDs are use for efficiency
 @param name the name of the value
 @return the id of the vlalue or -1 if no value exist
 */
+ (jint)getIdWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(ADXTypedValues_Custom)

inline NSString *ADXTypedValues_Custom_get_S_INT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_INT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_INT, NSString *)

inline NSString *ADXTypedValues_Custom_get_S_FLOAT(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_FLOAT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_FLOAT, NSString *)

inline NSString *ADXTypedValues_Custom_get_S_COLOR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_COLOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_COLOR, NSString *)

inline NSString *ADXTypedValues_Custom_get_S_STRING(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_STRING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_STRING, NSString *)

inline NSString *ADXTypedValues_Custom_get_S_BOOLEAN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_BOOLEAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_BOOLEAN, NSString *)

inline NSString *ADXTypedValues_Custom_get_S_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_DIMENSION, NSString *)

inline NSString *ADXTypedValues_Custom_get_S_REFERENCE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXTypedValues_Custom_S_REFERENCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, S_REFERENCE, NSString *)

inline IOSObjectArray *ADXTypedValues_Custom_get_KEY_WORDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXTypedValues_Custom_KEY_WORDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTypedValues_Custom, KEY_WORDS, IOSObjectArray *)

inline jint ADXTypedValues_Custom_get_TYPE_INT(void);
#define ADXTypedValues_Custom_TYPE_INT 900
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_INT, jint)

inline jint ADXTypedValues_Custom_get_TYPE_FLOAT(void);
#define ADXTypedValues_Custom_TYPE_FLOAT 901
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_FLOAT, jint)

inline jint ADXTypedValues_Custom_get_TYPE_COLOR(void);
#define ADXTypedValues_Custom_TYPE_COLOR 902
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_COLOR, jint)

inline jint ADXTypedValues_Custom_get_TYPE_STRING(void);
#define ADXTypedValues_Custom_TYPE_STRING 903
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_STRING, jint)

inline jint ADXTypedValues_Custom_get_TYPE_BOOLEAN(void);
#define ADXTypedValues_Custom_TYPE_BOOLEAN 904
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_BOOLEAN, jint)

inline jint ADXTypedValues_Custom_get_TYPE_DIMENSION(void);
#define ADXTypedValues_Custom_TYPE_DIMENSION 905
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_DIMENSION, jint)

inline jint ADXTypedValues_Custom_get_TYPE_REFERENCE(void);
#define ADXTypedValues_Custom_TYPE_REFERENCE 906
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedValues_Custom, TYPE_REFERENCE, jint)

FOUNDATION_EXPORT jint ADXTypedValues_Custom_getIdWithNSString_(NSString *name);

J2OBJC_TYPE_LITERAL_HEADER(ADXTypedValues_Custom)

#endif

#pragma pop_macro("INCLUDE_ALL_TypedValues")
