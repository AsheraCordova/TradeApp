//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSJSONAdapter\src\main\java\com\ashera\jsonadapter\JSONAdapterImpl.java
//

#include "Error.h"
#include "Errors.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "JSONAdapterImpl.h"
#include "NSMutableArrayJSONSafeList.h"
#include "PluginManager.h"
#include "StringUtils.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASDictionaryMap.h"


@interface ASJSONAdapterImpl ()

- (id)getASDictionaryMapWithId:(id)payload;

- (id)getNativeArrayWithId:(id)nsarray;

- (jboolean)isClassNSMutableArrayWithId:(id)object;

- (id)tryNativeTypeWithId:(id)object;

- (id)tryNativeIntTypeWithId:(id)object;

- (NSString *)getJSONStringWithId:(id)payload;

- (id)unmarshalWithNSString:(NSString *)jsonString;

- (id)convertToNSIntegerWithInt:(jint)value;

- (id)convertToNSDoubleWithDouble:(jdouble)value;

- (id)convertToNSFloatWithFloat:(jfloat)value;

- (id)convertToNSLongWithLong:(jlong)value;

- (id)getNSDictionaryWithId:(id)payload;

- (id)tryNativeDoubleTypeWithId:(id)object;

- (id)tryNativeFloatTypeWithId:(id)object;

@end

__attribute__((unused)) static id ASJSONAdapterImpl_getASDictionaryMapWithId_(ASJSONAdapterImpl *self, id payload);

__attribute__((unused)) static id ASJSONAdapterImpl_getNativeArrayWithId_(ASJSONAdapterImpl *self, id nsarray);

__attribute__((unused)) static jboolean ASJSONAdapterImpl_isClassNSMutableArrayWithId_(ASJSONAdapterImpl *self, id object);

__attribute__((unused)) static id ASJSONAdapterImpl_tryNativeTypeWithId_(ASJSONAdapterImpl *self, id object);

__attribute__((unused)) static id ASJSONAdapterImpl_tryNativeIntTypeWithId_(ASJSONAdapterImpl *self, id object);

__attribute__((unused)) static NSString *ASJSONAdapterImpl_getJSONStringWithId_(ASJSONAdapterImpl *self, id payload);

__attribute__((unused)) static id ASJSONAdapterImpl_unmarshalWithNSString_(ASJSONAdapterImpl *self, NSString *jsonString);

__attribute__((unused)) static id ASJSONAdapterImpl_convertToNSIntegerWithInt_(ASJSONAdapterImpl *self, jint value);

__attribute__((unused)) static id ASJSONAdapterImpl_convertToNSDoubleWithDouble_(ASJSONAdapterImpl *self, jdouble value);

__attribute__((unused)) static id ASJSONAdapterImpl_convertToNSFloatWithFloat_(ASJSONAdapterImpl *self, jfloat value);

__attribute__((unused)) static id ASJSONAdapterImpl_convertToNSLongWithLong_(ASJSONAdapterImpl *self, jlong value);

__attribute__((unused)) static id ASJSONAdapterImpl_getNSDictionaryWithId_(ASJSONAdapterImpl *self, id payload);

__attribute__((unused)) static id ASJSONAdapterImpl_tryNativeDoubleTypeWithId_(ASJSONAdapterImpl *self, id object);

__attribute__((unused)) static id ASJSONAdapterImpl_tryNativeFloatTypeWithId_(ASJSONAdapterImpl *self, id object);

@implementation ASJSONAdapterImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASJSONAdapterImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)invokeWithNSString:(NSString *)name
       withNSObjectArray:(IOSObjectArray *)args {
  switch (JreIndexOfStr(name, (id[]){ @"getMap", @"getNativeMap", @"putJSONSafeObjectIntoMap", @"getArray", @"getList", @"isBoolean", @"getBoolean", @"getString", @"getInt", @"getFloat", @"getDouble", @"marshal", @"toJsonTree", @"unmarshal", @"getJSONCompatMap", @"getJSONSafeObj" }, 16)) {
    case 0:
    return [self getMapWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 1:
    return [self getNativeMapWithJavaUtilMap:(id<JavaUtilMap>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), JavaUtilMap_class_())];
    case 2:
    [self putJSONSafeObjectIntoMapWithJavaUtilMap:(id<JavaUtilMap>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), JavaUtilMap_class_()) withNSString:(NSString *) cast_chk(IOSObjectArray_Get(args, 1), [NSString class]) withId:IOSObjectArray_Get(args, 2)];
    return nil;
    case 3:
    return [self getArrayWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 4:
    return [self getListWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 5:
    return JavaLangBoolean_valueOfWithBoolean_([self isBooleanWithId:IOSObjectArray_Get(nil_chk(args), 0)]);
    case 6:
    return [self getBooleanWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 7:
    return [self getStringWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 8:
    return [self getIntWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 9:
    return [self getFloatWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 10:
    return [self getDoubleWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 11:
    return [self marshalWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 12:
    return [self toJsonTreeWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    case 13:
    return [self unmarshalWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]) withIOSClass:(IOSClass *) cast_chk(IOSObjectArray_Get(args, 1), [IOSClass class])];
    case 14:
    return [self getJSONCompatMap];
    case 15:
    return [self getJSONSafeObjWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    default:
    break;
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown method ", name));
}

- (id<JavaUtilMap>)getMapWithId:(id)payLoad {
  if ([JavaUtilMap_class_() isInstance:payLoad]) {
    return (id<JavaUtilMap>) cast_check(payLoad, JavaUtilMap_class_());
  }
  if (payLoad != nil && [((NSString *) nil_chk([[payLoad java_getClass] getSimpleName])) isEqual:@"__NSDictionaryM"]) {
    return (id<JavaUtilMap>) cast_check(ASJSONAdapterImpl_getASDictionaryMapWithId_(self, payLoad), JavaUtilMap_class_());
  }
  return nil;
}

- (id)getASDictionaryMapWithId:(id)payload {
  return ASJSONAdapterImpl_getASDictionaryMapWithId_(self, payload);
}

- (IOSObjectArray *)getArrayWithId:(id)payLoad {
  if ([JavaUtilList_class_() isInstance:payLoad]) {
    return [((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check(payLoad, JavaUtilList_class_())))) toArray];
  }
  return (IOSObjectArray *) cast_check(ASJSONAdapterImpl_getNativeArrayWithId_(self, payLoad), IOSClass_arrayType(NSObject_class_(), 1));
}

- (id)getNativeArrayWithId:(id)nsarray {
  return ASJSONAdapterImpl_getNativeArrayWithId_(self, nsarray);
}

- (id<JavaUtilList>)getListWithId:(id)payLoad {
  if ((payLoad != nil && [((NSString *) nil_chk([[payLoad java_getClass] getSimpleName])) isEqual:@"__NSDictionaryM"]) || [JavaUtilMap_class_() isInstance:payLoad]) {
    return nil;
  }
  if ([JavaUtilList_class_() isInstance:payLoad]) {
    return ((id<JavaUtilList>) cast_check(payLoad, JavaUtilList_class_()));
  }
  if (ASJSONAdapterImpl_isClassNSMutableArrayWithId_(self, payLoad)) {
    return new_ASNSMutableArrayJSONSafeList_initWithId_(payLoad);
  }
  IOSObjectArray *array = [self getArrayWithId:payLoad];
  if (array == nil) {
    return nil;
  }
  return new_JavaUtilArrayList_initWithJavaUtilCollection_(JavaUtilArrays_asListWithNSObjectArray_(array));
}

- (JavaLangBoolean *)getBooleanWithId:(id)payLoad {
  return ASStringUtils_getBooleanWithId_(payLoad);
}

- (jboolean)isClassNSMutableArrayWithId:(id)object {
  return ASJSONAdapterImpl_isClassNSMutableArrayWithId_(self, object);
}

- (NSString *)getStringWithId:(id)object {
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) object;
  }
  if ([object isKindOfClass:[JavaLangDouble class]]) {
    JavaLangDouble *doubleVar = (JavaLangDouble *) object;
    if ([((JavaLangDouble *) nil_chk(doubleVar)) doubleValue] == [doubleVar intValue]) {
      return NSString_java_valueOfInt_([doubleVar intValue]);
    }
    return NSString_java_valueOfDouble_([doubleVar doubleValue]);
  }
  if ([object isKindOfClass:[JavaLangFloat class]]) {
    JavaLangFloat *doubleVar = (JavaLangFloat *) object;
    if ([((JavaLangFloat *) nil_chk(doubleVar)) floatValue] == [doubleVar intValue]) {
      return NSString_java_valueOfInt_([doubleVar intValue]);
    }
    return NSString_java_valueOfFloat_([doubleVar floatValue]);
  }
  if ([object isKindOfClass:[JavaLangInteger class]]) {
    return NSString_java_valueOfInt_([((JavaLangInteger *) nil_chk(((JavaLangInteger *) object))) intValue]);
  }
  if ([object isKindOfClass:[JavaLangBoolean class]]) {
    return NSString_java_valueOfBool_([((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) object))) booleanValue]);
  }
  id result = ASJSONAdapterImpl_tryNativeTypeWithId_(self, object);
  if (result != nil) {
    return (NSString *) cast_chk(result, [NSString class]);
  }
  return nil;
}

- (id)tryNativeTypeWithId:(id)object {
  return ASJSONAdapterImpl_tryNativeTypeWithId_(self, object);
}

- (NSString *)getName {
  return @"jsonadapter";
}

- (JavaLangInteger *)getIntWithId:(id)object {
  if (object == nil) {
    return JavaLangInteger_valueOfWithInt_(0);
  }
  id result = ASJSONAdapterImpl_tryNativeIntTypeWithId_(self, object);
  if (result != nil) {
    return (JavaLangInteger *) cast_chk(result, [JavaLangInteger class]);
  }
  if ([object isKindOfClass:[JavaLangInteger class]]) {
    return (JavaLangInteger *) object;
  }
  if ([object isKindOfClass:[NSString class]]) {
    return JavaLangInteger_valueOfWithInt_(JavaLangInteger_parseIntWithNSString_((NSString *) object));
  }
  if ([object isKindOfClass:[JavaLangDouble class]]) {
    return JavaLangInteger_valueOfWithInt_([((JavaLangDouble *) object) intValue]);
  }
  if ([object isKindOfClass:[JavaLangFloat class]]) {
    return JavaLangInteger_valueOfWithInt_([((JavaLangFloat *) object) intValue]);
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unable to convert to int value");
}

- (id)tryNativeIntTypeWithId:(id)object {
  return ASJSONAdapterImpl_tryNativeIntTypeWithId_(self, object);
}

- (NSString *)marshalWithId:(id)payload {
  if ([JavaUtilMap_class_() isInstance:payload]) {
    payload = ASJSONAdapterImpl_getNSDictionaryWithId_(self, payload);
  }
  if ([JavaUtilList_class_() isInstance:payload]) {
    payload = [self nsArrayFromListWithJavaUtilList:(id<JavaUtilList>) cast_check(payload, JavaUtilList_class_())];
  }
  return ASJSONAdapterImpl_getJSONStringWithId_(self, payload);
}

- (id)toJsonTreeWithId:(id)object {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unsupported method");
}

- (NSString *)getJSONStringWithId:(id)payload {
  return ASJSONAdapterImpl_getJSONStringWithId_(self, payload);
}

- (id)unmarshalWithNSString:(NSString *)json
               withIOSClass:(IOSClass *)clazz {
  if (clazz == JavaUtilList_class_()) {
    id mutableArray = ASJSONAdapterImpl_unmarshalWithNSString_(self, json);
    return [self getListWithId:mutableArray];
  }
  id mutableArray = ASJSONAdapterImpl_unmarshalWithNSString_(self, json);
  return [self getMapWithId:mutableArray];
}

- (id)unmarshalWithNSString:(NSString *)jsonString {
  return ASJSONAdapterImpl_unmarshalWithNSString_(self, jsonString);
}

- (id<JavaUtilMap>)getJSONCompatMap {
  return [[ASDictionaryMap alloc] initWithDictionary:[NSDictionary new]];
}

- (id)getJSONSafeObjWithId:(id)obj {
  if ([JavaUtilMap_class_() isInstance:obj]) {
    return ASJSONAdapterImpl_getNSDictionaryWithId_(self, obj);
  }
  if ([obj isKindOfClass:[JavaLangBoolean class]]) {
    return ASJSONAdapterImpl_convertToNSIntegerWithInt_(self, [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) obj))) booleanValue] ? 1 : 0);
  }
  if ([obj isKindOfClass:[JavaLangInteger class]]) {
    return ASJSONAdapterImpl_convertToNSIntegerWithInt_(self, [((JavaLangInteger *) nil_chk(((JavaLangInteger *) obj))) intValue]);
  }
  if ([obj isKindOfClass:[JavaLangDouble class]]) {
    return ASJSONAdapterImpl_convertToNSDoubleWithDouble_(self, [((JavaLangDouble *) nil_chk(((JavaLangDouble *) obj))) doubleValue]);
  }
  if ([obj isKindOfClass:[JavaLangFloat class]]) {
    return ASJSONAdapterImpl_convertToNSFloatWithFloat_(self, [((JavaLangFloat *) nil_chk(((JavaLangFloat *) obj))) floatValue]);
  }
  if ([obj isKindOfClass:[JavaLangLong class]]) {
    return ASJSONAdapterImpl_convertToNSLongWithLong_(self, [((JavaLangLong *) nil_chk(((JavaLangLong *) obj))) longLongValue]);
  }
  if ([JavaUtilList_class_() isInstance:obj]) {
    return [self nsArrayFromListWithJavaUtilList:(id<JavaUtilList>) cast_check(obj, JavaUtilList_class_())];
  }
  if ([obj isKindOfClass:[ASErrors class]]) {
    id<JavaUtilList> jsonErrors = new_JavaUtilArrayList_init();
    id<JavaUtilList> errors = [((ASErrors *) nil_chk(((ASErrors *) obj))) getErrors];
    for (ASError * __strong error in nil_chk(errors)) {
      id<JavaUtilMap> jsonError = [self getJSONCompatMap];
      (void) [((id<JavaUtilMap>) nil_chk(jsonError)) putWithId:@"path" withId:[((ASError *) nil_chk(error)) getPath]];
      (void) [jsonError putWithId:@"description" withId:[error getDescription]];
      (void) [jsonError putWithId:@"stackTrace" withId:[error getStackTrace]];
      [jsonErrors addWithId:ASJSONAdapterImpl_getNSDictionaryWithId_(self, jsonError)];
    }
    id<JavaUtilMap> jsonErrorMap = [self getJSONCompatMap];
    (void) [((id<JavaUtilMap>) nil_chk(jsonErrorMap)) putWithId:@"errors" withId:[self nsArrayFromListWithJavaUtilList:jsonErrors]];
    return ASJSONAdapterImpl_getNSDictionaryWithId_(self, jsonErrorMap);
  }
  return obj;
}

- (id)convertToNSIntegerWithInt:(jint)value {
  return ASJSONAdapterImpl_convertToNSIntegerWithInt_(self, value);
}

- (id)convertToNSDoubleWithDouble:(jdouble)value {
  return ASJSONAdapterImpl_convertToNSDoubleWithDouble_(self, value);
}

- (id)convertToNSFloatWithFloat:(jfloat)value {
  return ASJSONAdapterImpl_convertToNSFloatWithFloat_(self, value);
}

- (id)convertToNSLongWithLong:(jlong)value {
  return ASJSONAdapterImpl_convertToNSLongWithLong_(self, value);
}

- (id)nsArrayFromListWithJavaUtilList:(id<JavaUtilList>)list {
  NSMutableArray *result = [NSMutableArray array];
  for (id object in list) {
    [result addObject:object];
  }
  return result;
}

- (id)addObjectWithId:(id)list
               withId:(id)object {
  [list addObject:object];
}

- (id)getNSDictionaryWithId:(id)payload {
  return ASJSONAdapterImpl_getNSDictionaryWithId_(self, payload);
}

+ (void)initPlugin {
  ASJSONAdapterImpl_initPlugin();
}

- (JavaLangDouble *)getDoubleWithId:(id)object {
  if (object == nil) {
    return JavaLangDouble_valueOfWithDouble_(0.0);
  }
  id result = ASJSONAdapterImpl_tryNativeDoubleTypeWithId_(self, object);
  if (result != nil) {
    return (JavaLangDouble *) cast_chk(result, [JavaLangDouble class]);
  }
  if ([object isKindOfClass:[JavaLangDouble class]]) {
    return (JavaLangDouble *) object;
  }
  if ([object isKindOfClass:[NSString class]]) {
    return JavaLangDouble_valueOfWithDouble_(JavaLangDouble_parseDoubleWithNSString_((NSString *) object));
  }
  if ([object isKindOfClass:[JavaLangFloat class]]) {
    return JavaLangDouble_valueOfWithDouble_([((JavaLangFloat *) object) doubleValue]);
  }
  if ([object isKindOfClass:[JavaLangInteger class]]) {
    return JavaLangDouble_valueOfWithDouble_([((JavaLangInteger *) object) doubleValue]);
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unable to convert to double value");
}

- (id)tryNativeDoubleTypeWithId:(id)object {
  return ASJSONAdapterImpl_tryNativeDoubleTypeWithId_(self, object);
}

- (id)tryNativeFloatTypeWithId:(id)object {
  return ASJSONAdapterImpl_tryNativeFloatTypeWithId_(self, object);
}

- (JavaLangFloat *)getFloatWithId:(id)object {
  if (object == nil) {
    return JavaLangFloat_valueOfWithFloat_(0.0f);
  }
  id result = ASJSONAdapterImpl_tryNativeFloatTypeWithId_(self, object);
  if (result != nil) {
    return (JavaLangFloat *) cast_chk(result, [JavaLangFloat class]);
  }
  if ([object isKindOfClass:[JavaLangFloat class]]) {
    return (JavaLangFloat *) object;
  }
  if ([object isKindOfClass:[NSString class]]) {
    return JavaLangFloat_valueOfWithFloat_(JavaLangFloat_parseFloatWithNSString_((NSString *) object));
  }
  if ([object isKindOfClass:[JavaLangFloat class]]) {
    return JavaLangFloat_valueOfWithFloat_([((JavaLangFloat *) object) floatValue]);
  }
  if ([object isKindOfClass:[JavaLangInteger class]]) {
    return JavaLangFloat_valueOfWithFloat_([((JavaLangInteger *) object) floatValue]);
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unable to convert to float value");
}

- (id)getNativeMapWithJavaUtilMap:(id<JavaUtilMap>)payLoad {
  return ((ASDictionaryMap*) payLoad)->dictionary_;
}

- (void)putJSONSafeObjectIntoMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                   withNSString:(NSString *)key
                                         withId:(id)value {
  if (value != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(map)) putWithId:key withId:[self getJSONSafeObjWithId:value]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(map)) removeWithId:key];
  }
}

- (jboolean)isBooleanWithId:(id)obj {
  if ([obj isKindOfClass:[JavaLangBoolean class]]) {
    return true;
  }
  if (obj != nil && [((NSString *) nil_chk([[obj java_getClass] getName])) isEqual:@"__NSCFBoolean"]) {
    return true;
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x102, 5, 3, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 7, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 8, 3, -1, 9, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 11, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 12, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 13, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 14, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 15, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 16, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x102, 18, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 20, -1, 21, -1, -1 },
    { NULL, "LNSObject;", 0x102, 19, 22, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x101, -1, -1, -1, 23, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 33, 34, -1, 35, -1, -1 },
    { NULL, "LNSObject;", 0x101, 36, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 38, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x1, 39, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 40, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 41, 3, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 42, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 43, 44, -1, 45, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, 48, -1, -1 },
    { NULL, "Z", 0x1, 49, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(invokeWithNSString:withNSObjectArray:);
  methods[2].selector = @selector(getMapWithId:);
  methods[3].selector = @selector(getASDictionaryMapWithId:);
  methods[4].selector = @selector(getArrayWithId:);
  methods[5].selector = @selector(getNativeArrayWithId:);
  methods[6].selector = @selector(getListWithId:);
  methods[7].selector = @selector(getBooleanWithId:);
  methods[8].selector = @selector(isClassNSMutableArrayWithId:);
  methods[9].selector = @selector(getStringWithId:);
  methods[10].selector = @selector(tryNativeTypeWithId:);
  methods[11].selector = @selector(getName);
  methods[12].selector = @selector(getIntWithId:);
  methods[13].selector = @selector(tryNativeIntTypeWithId:);
  methods[14].selector = @selector(marshalWithId:);
  methods[15].selector = @selector(toJsonTreeWithId:);
  methods[16].selector = @selector(getJSONStringWithId:);
  methods[17].selector = @selector(unmarshalWithNSString:withIOSClass:);
  methods[18].selector = @selector(unmarshalWithNSString:);
  methods[19].selector = @selector(getJSONCompatMap);
  methods[20].selector = @selector(getJSONSafeObjWithId:);
  methods[21].selector = @selector(convertToNSIntegerWithInt:);
  methods[22].selector = @selector(convertToNSDoubleWithDouble:);
  methods[23].selector = @selector(convertToNSFloatWithFloat:);
  methods[24].selector = @selector(convertToNSLongWithLong:);
  methods[25].selector = @selector(nsArrayFromListWithJavaUtilList:);
  methods[26].selector = @selector(addObjectWithId:withId:);
  methods[27].selector = @selector(getNSDictionaryWithId:);
  methods[28].selector = @selector(initPlugin);
  methods[29].selector = @selector(getDoubleWithId:);
  methods[30].selector = @selector(tryNativeDoubleTypeWithId:);
  methods[31].selector = @selector(tryNativeFloatTypeWithId:);
  methods[32].selector = @selector(getFloatWithId:);
  methods[33].selector = @selector(getNativeMapWithJavaUtilMap:);
  methods[34].selector = @selector(putJSONSafeObjectIntoMapWithJavaUtilMap:withNSString:withId:);
  methods[35].selector = @selector(isBooleanWithId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "invoke", "LNSString;[LNSObject;", "getMap", "LNSObject;", "(Ljava/lang/Object;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getASDictionaryMap", "getArray", "getNativeArray", "getList", "(Ljava/lang/Object;)Ljava/util/List<Ljava/lang/Object;>;", "getBoolean", "isClassNSMutableArray", "getString", "tryNativeType", "getInt", "tryNativeIntType", "marshal", "toJsonTree", "getJSONString", "unmarshal", "LNSString;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)TT;", "LNSString;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getJSONSafeObj", "convertToNSInteger", "I", "convertToNSDouble", "D", "convertToNSFloat", "F", "convertToNSLong", "J", "nsArrayFromList", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Object;>;)Ljava/lang/Object;", "addObject", "LNSObject;LNSObject;", "getNSDictionary", "getDouble", "tryNativeDoubleType", "tryNativeFloatType", "getFloat", "getNativeMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/lang/Object;", "putJSONSafeObjectIntoMap", "LJavaUtilMap;LNSString;LNSObject;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/Object;)V", "isBoolean" };
  static const J2ObjcClassInfo _ASJSONAdapterImpl = { "JSONAdapterImpl", "com.ashera.jsonadapter", ptrTable, methods, NULL, 7, 0x1, 36, 0, -1, -1, -1, -1, -1 };
  return &_ASJSONAdapterImpl;
}

@end

void ASJSONAdapterImpl_init(ASJSONAdapterImpl *self) {
  NSObject_init(self);
}

ASJSONAdapterImpl *new_ASJSONAdapterImpl_init() {
  J2OBJC_NEW_IMPL(ASJSONAdapterImpl, init)
}

ASJSONAdapterImpl *create_ASJSONAdapterImpl_init() {
  J2OBJC_CREATE_IMPL(ASJSONAdapterImpl, init)
}

id ASJSONAdapterImpl_getASDictionaryMapWithId_(ASJSONAdapterImpl *self, id payload) {
  return [[ASDictionaryMap alloc] initWithDictionary:payload];
}

id ASJSONAdapterImpl_getNativeArrayWithId_(ASJSONAdapterImpl *self, id nsarray) {
  if ([nsarray isKindOfClass:[NSMutableArray class]]) {
    return [IOSObjectArray arrayWithNSArray:nsarray type:[IOSClass forName: @"java.lang.Object"]];
  }
  return nil;
}

jboolean ASJSONAdapterImpl_isClassNSMutableArrayWithId_(ASJSONAdapterImpl *self, id object) {
  return [object isKindOfClass:[NSMutableArray class]];
}

id ASJSONAdapterImpl_tryNativeTypeWithId_(ASJSONAdapterImpl *self, id object) {
  if ([object isKindOfClass:[NSNumber class]]) {
    return [(NSNumber*)object stringValue];
  }
  return nil;
}

id ASJSONAdapterImpl_tryNativeIntTypeWithId_(ASJSONAdapterImpl *self, id object) {
  if ([object isKindOfClass:[NSNumber class]]) {
    return [JavaLangInteger valueOfWithInt:[(NSNumber*) object intValue] ];
  }
  return nil;
}

NSString *ASJSONAdapterImpl_getJSONStringWithId_(ASJSONAdapterImpl *self, id payload) {
  if (payload == nil) {
    payload = [NSDictionary new];
  }
  NSError *err;
  NSData *jsonData = [NSJSONSerialization dataWithJSONObject:payload options:NSJSONWritingPrettyPrinted error:&err];
  NSString *jsonString = [[NSString alloc] initWithData:jsonData encoding:NSUTF8StringEncoding];
  return jsonString;
}

id ASJSONAdapterImpl_unmarshalWithNSString_(ASJSONAdapterImpl *self, NSString *jsonString) {
  NSData *jsonData = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
  NSError *e = nil;
  id jsonArray = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingMutableContainers error:&e];
  return jsonArray;
}

id ASJSONAdapterImpl_convertToNSIntegerWithInt_(ASJSONAdapterImpl *self, jint value) {
  return [NSNumber numberWithInteger:value];
}

id ASJSONAdapterImpl_convertToNSDoubleWithDouble_(ASJSONAdapterImpl *self, jdouble value) {
  return [NSNumber numberWithDouble:value];
}

id ASJSONAdapterImpl_convertToNSFloatWithFloat_(ASJSONAdapterImpl *self, jfloat value) {
  return [NSNumber numberWithFloat:value];
}

id ASJSONAdapterImpl_convertToNSLongWithLong_(ASJSONAdapterImpl *self, jlong value) {
  return [NSNumber numberWithLong:value];
}

id ASJSONAdapterImpl_getNSDictionaryWithId_(ASJSONAdapterImpl *self, id payload) {
  return ((ASDictionaryMap*) payload)->dictionary_;
}

void ASJSONAdapterImpl_initPlugin() {
  ASJSONAdapterImpl_initialize();
  ASPluginManager_register__WithASIPlugin_(new_ASJSONAdapterImpl_init());
}

id ASJSONAdapterImpl_tryNativeDoubleTypeWithId_(ASJSONAdapterImpl *self, id object) {
  if ([object isKindOfClass:[NSNumber class]]) {
    return [JavaLangDouble valueOfWithDouble:[(NSNumber*) object doubleValue] ];
  }
  return nil;
}

id ASJSONAdapterImpl_tryNativeFloatTypeWithId_(ASJSONAdapterImpl *self, id object) {
  if ([object isKindOfClass:[NSNumber class]]) {
    return [JavaLangFloat valueOfWithFloat:[(NSNumber*) object floatValue] ];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASJSONAdapterImpl)
