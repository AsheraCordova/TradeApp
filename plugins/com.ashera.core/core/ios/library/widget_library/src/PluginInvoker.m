//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\PluginInvoker.java
//

#include "AttributedString.h"
#include "FontMetricsDescriptor.h"
#include "HasWidgets.h"
#include "IConverter.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IPlugin.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "PluginManager.h"
#include "java/io/File.h"
#include "java/io/InputStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Double.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Runnable.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@implementation ASPluginInvoker

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASPluginInvoker_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id)convertFromWithASIConverter:(id<ASIConverter>)converter
                  withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                           withId:(id)value
                  withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(converter, dependentAttributesMap, value, fragment);
}

+ (id)convertToWithASIConverter:(id<ASIConverter>)converter
                         withId:(id)objValue
                withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_convertToWithASIConverter_withId_withASIFragment_(converter, objValue, fragment);
}

+ (id<ASIConverter>)getConverterWithNSString:(NSString *)name {
  return ASPluginInvoker_getConverterWithNSString_(name);
}

+ (id<JavaUtilList>)getDependentAttributesWithASIConverter:(id<ASIConverter>)converter {
  return ASPluginInvoker_getDependentAttributesWithASIConverter_(converter);
}

+ (id)getColorWithNSString:(NSString *)color {
  return ASPluginInvoker_getColorWithNSString_(color);
}

+ (jfloat)convertDpToPixelWithNSString:(NSString *)dimen {
  return ASPluginInvoker_convertDpToPixelWithNSString_(dimen);
}

+ (jfloat)convertSpToPixelWithNSString:(NSString *)dimen {
  return ASPluginInvoker_convertSpToPixelWithNSString_(dimen);
}

+ (NSString *)convertPixelToDpWithId:(id)dimen
                         withBoolean:(jboolean)isInt {
  return ASPluginInvoker_convertPixelToDpWithId_withBoolean_(dimen, isInt);
}

+ (NSString *)convertPixelToSpWithId:(id)dimen
                         withBoolean:(jboolean)isInt {
  return ASPluginInvoker_convertPixelToSpWithId_withBoolean_(dimen, isInt);
}

+ (id<JavaUtilMap>)getMapWithId:(id)payLoad {
  return ASPluginInvoker_getMapWithId_(payLoad);
}

+ (id)getNativeMapWithJavaUtilMap:(id<JavaUtilMap>)payLoad {
  return ASPluginInvoker_getNativeMapWithJavaUtilMap_(payLoad);
}

+ (void)putJSONSafeObjectIntoMapWithJavaUtilMap:(id<JavaUtilMap>)map
                                   withNSString:(NSString *)key
                                         withId:(id)value {
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(map, key, value);
}

+ (IOSObjectArray *)getArrayWithId:(id)payLoad {
  return ASPluginInvoker_getArrayWithId_(payLoad);
}

+ (id<JavaUtilList>)getListWithId:(id)payLoad {
  return ASPluginInvoker_getListWithId_(payLoad);
}

+ (jboolean)isBooleanWithId:(id)obj {
  return ASPluginInvoker_isBooleanWithId_(obj);
}

+ (JavaLangBoolean *)getBooleanWithId:(id)payLoad {
  return ASPluginInvoker_getBooleanWithId_(payLoad);
}

+ (NSString *)getStringWithId:(id)object {
  return ASPluginInvoker_getStringWithId_(object);
}

+ (JavaLangInteger *)getIntWithId:(id)object {
  return ASPluginInvoker_getIntWithId_(object);
}

+ (JavaLangFloat *)getFloatWithId:(id)object {
  return ASPluginInvoker_getFloatWithId_(object);
}

+ (JavaLangDouble *)getDoubleWithId:(id)object {
  return ASPluginInvoker_getDoubleWithId_(object);
}

+ (NSString *)marshalWithId:(id)object {
  return ASPluginInvoker_marshalWithId_(object);
}

+ (id)toJsonTreeWithId:(id)object {
  return ASPluginInvoker_toJsonTreeWithId_(object);
}

+ (id)unmarshalWithNSString:(NSString *)json
               withIOSClass:(IOSClass *)clazz {
  return ASPluginInvoker_unmarshalWithNSString_withIOSClass_(json, clazz);
}

+ (id<JavaUtilMap>)getJSONCompatMap {
  return ASPluginInvoker_getJSONCompatMap();
}

+ (id)getJSONSafeObjWithId:(id)obj {
  return ASPluginInvoker_getJSONSafeObjWithId_(obj);
}

+ (void)navigateWithNSString:(NSString *)actionId
                withNSString:(NSString *)varExpression
                      withId:(id)payload
             withASIFragment:(id<ASIFragment>)fragment {
  ASPluginInvoker_navigateWithNSString_withNSString_withId_withASIFragment_(actionId, varExpression, payload, fragment);
}

+ (id<ASIWidget>)parseWithNSString:(NSString *)html
                       withBoolean:(jboolean)template_
                   withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_parseWithNSString_withBoolean_withASIFragment_(html, template_, fragment);
}

+ (id<ASIWidget>)parseWithParentWithNSString:(NSString *)html
                                 withBoolean:(jboolean)template_
                            withASHasWidgets:(id<ASHasWidgets>)parent
                             withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_parseWithParentWithNSString_withBoolean_withASHasWidgets_withASIFragment_(html, template_, parent, fragment);
}

+ (id<ASIWidget>)parseFileWithNSString:(NSString *)fileName
                           withBoolean:(jboolean)template_
                       withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_parseFileWithNSString_withBoolean_withASIFragment_(fileName, template_, fragment);
}

+ (void)parseIncludeWithASHasWidgets:(id<ASHasWidgets>)parent
                        withNSString:(NSString *)fileName
                         withBoolean:(jboolean)template_
                     withASIFragment:(id<ASIFragment>)fragment {
  ASPluginInvoker_parseIncludeWithASHasWidgets_withNSString_withBoolean_withASIFragment_(parent, fileName, template_, fragment);
}

+ (id)getHandlerWithASHasWidgets:(id<ASHasWidgets>)parent
                         withInt:(jint)index
                 withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_getHandlerWithASHasWidgets_withInt_withASIFragment_(parent, index, fragment);
}

+ (id<ASIWidget>)handlerStartWithId:(id)handler
                      withASIWidget:(id<ASIWidget>)widget
                            withInt:(jint)index {
  return ASPluginInvoker_handlerStartWithId_withASIWidget_withInt_(handler, widget, index);
}

+ (void)handlerEndWithId:(id)handler
           withASIWidget:(id<ASIWidget>)widget {
  ASPluginInvoker_handlerEndWithId_withASIWidget_(handler, widget);
}

+ (void)addToCurrentParentWithId:(id)handler
                   withASIWidget:(id<ASIWidget>)widget {
  ASPluginInvoker_addToCurrentParentWithId_withASIWidget_(handler, widget);
}

+ (NSString *)getAssetModeWithASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_getAssetModeWithASIFragment_(fragment);
}

+ (NSString *)getDevServerIpWithASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_getDevServerIpWithASIFragment_(fragment);
}

+ (NSString *)getOrientation {
  return ASPluginInvoker_getOrientation();
}

+ (jint)getScreenWidth {
  return ASPluginInvoker_getScreenWidth();
}

+ (jint)getScreenHeight {
  return ASPluginInvoker_getScreenHeight();
}

+ (jint)getScreenWidthDp {
  return ASPluginInvoker_getScreenWidthDp();
}

+ (jint)getScreenHeightDp {
  return ASPluginInvoker_getScreenHeightDp();
}

+ (NSString *)getOS {
  return ASPluginInvoker_getOS();
}

+ (NSString *)getFileAssetWithNSString:(NSString *)path
                       withASIFragment:(id<ASIFragment>)fragment {
  return ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(path, fragment);
}

+ (NSString *)getDensityName {
  return ASPluginInvoker_getDensityName();
}

+ (jint)getDensity {
  return ASPluginInvoker_getDensity();
}

+ (id)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable
                              withInt:(jint)delay {
  return ASPluginInvoker_postDelayedWithJavaLangRunnable_withInt_(mTickRunnable, delay);
}

+ (void)removeCallbacksWithId:(id)handler
         withJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable {
  ASPluginInvoker_removeCallbacksWithId_withJavaLangRunnable_(handler, mTickRunnable);
}

+ (void)putObjectToBundleWithId:(id)bundle
                   withNSString:(NSString *)key
                         withId:(id)data {
  ASPluginInvoker_putObjectToBundleWithId_withNSString_withId_(bundle, key, data);
}

+ (void)releaseNativeResourcesWithJavaUtilList:(id<JavaUtilList>)object {
  ASPluginInvoker_releaseNativeResourcesWithJavaUtilList_(object);
}

+ (ASFontMetricsDescriptor *)getFontMetricsWithId:(id)font {
  return ASPluginInvoker_getFontMetricsWithId_(font);
}

+ (id)createDrawableWithNSString:(NSString *)type {
  return ASPluginInvoker_createDrawableWithNSString_(type);
}

+ (id<ASAttributedString>)createAttributedStringWithASIFragment:(id<ASIFragment>)fragment
                                                   withNSString:(NSString *)text {
  return ASPluginInvoker_createAttributedStringWithASIFragment_withNSString_(fragment, text);
}

+ (jfloat)getDisplayMetricDensity {
  return ASPluginInvoker_getDisplayMetricDensity();
}

+ (NSString *)getAttributedBulletHtml {
  return ASPluginInvoker_getAttributedBulletHtml();
}

+ (JavaIoFile *)getExternalFilesDirWithId:(id)context {
  return ASPluginInvoker_getExternalFilesDirWithId_(context);
}

+ (jint)getMaxMemoryWithId:(id)context {
  return ASPluginInvoker_getMaxMemoryWithId_(context);
}

+ (id)decodeBitmapStreamWithJavaIoInputStream:(JavaIoInputStream *)stream
                                       withId:(id)options {
  return ASPluginInvoker_decodeBitmapStreamWithJavaIoInputStream_withId_(stream, options);
}

+ (void)runOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ASPluginInvoker_runOnMainThreadWithJavaLangRunnable_(runnable);
}

+ (void)registerFontWithNSString:(NSString *)fontFamily
                    withNSString:(NSString *)src
                    withNSString:(NSString *)fontStyle
                    withNSString:(NSString *)fontWeight
                 withJavaUtilMap:(id<JavaUtilMap>)metadata {
  ASPluginInvoker_registerFontWithNSString_withNSString_withNSString_withNSString_withJavaUtilMap_(fontFamily, src, fontStyle, fontWeight, metadata);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASIConverter;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 7, 8, -1, 9, -1, -1 },
    { NULL, "LNSObject;", 0x9, 10, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 11, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 12, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 15, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 16, 17, -1, 18, -1, -1 },
    { NULL, "LNSObject;", 0x9, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x9, 22, 23, -1, 24, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 25, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 26, 17, -1, 27, -1, -1 },
    { NULL, "Z", 0x9, 28, 17, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x9, 29, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 30, 17, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x9, 31, 17, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x9, 32, 17, -1, -1, -1, -1 },
    { NULL, "LJavaLangDouble;", 0x9, 33, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 34, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 35, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 36, 37, -1, 38, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, -1, -1, -1, 39, -1, -1 },
    { NULL, "LNSObject;", 0x9, 40, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 41, 42, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x9, 43, 44, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x9, 45, 46, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x9, 47, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 48, 49, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 50, 51, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x9, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 54, 55, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 56, 55, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 59, 58, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 60, 61, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 64, 65, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 68, 69, -1, 70, -1, -1 },
    { NULL, "LASFontMetricsDescriptor;", 0x9, 71, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 72, 6, -1, -1, -1, -1 },
    { NULL, "LASAttributedString;", 0x9, 73, 74, -1, -1, -1, -1 },
    { NULL, "F", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x9, 75, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 76, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 77, 78, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 79, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 81, 82, -1, 83, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithASIConverter:withJavaUtilMap:withId:withASIFragment:);
  methods[2].selector = @selector(convertToWithASIConverter:withId:withASIFragment:);
  methods[3].selector = @selector(getConverterWithNSString:);
  methods[4].selector = @selector(getDependentAttributesWithASIConverter:);
  methods[5].selector = @selector(getColorWithNSString:);
  methods[6].selector = @selector(convertDpToPixelWithNSString:);
  methods[7].selector = @selector(convertSpToPixelWithNSString:);
  methods[8].selector = @selector(convertPixelToDpWithId:withBoolean:);
  methods[9].selector = @selector(convertPixelToSpWithId:withBoolean:);
  methods[10].selector = @selector(getMapWithId:);
  methods[11].selector = @selector(getNativeMapWithJavaUtilMap:);
  methods[12].selector = @selector(putJSONSafeObjectIntoMapWithJavaUtilMap:withNSString:withId:);
  methods[13].selector = @selector(getArrayWithId:);
  methods[14].selector = @selector(getListWithId:);
  methods[15].selector = @selector(isBooleanWithId:);
  methods[16].selector = @selector(getBooleanWithId:);
  methods[17].selector = @selector(getStringWithId:);
  methods[18].selector = @selector(getIntWithId:);
  methods[19].selector = @selector(getFloatWithId:);
  methods[20].selector = @selector(getDoubleWithId:);
  methods[21].selector = @selector(marshalWithId:);
  methods[22].selector = @selector(toJsonTreeWithId:);
  methods[23].selector = @selector(unmarshalWithNSString:withIOSClass:);
  methods[24].selector = @selector(getJSONCompatMap);
  methods[25].selector = @selector(getJSONSafeObjWithId:);
  methods[26].selector = @selector(navigateWithNSString:withNSString:withId:withASIFragment:);
  methods[27].selector = @selector(parseWithNSString:withBoolean:withASIFragment:);
  methods[28].selector = @selector(parseWithParentWithNSString:withBoolean:withASHasWidgets:withASIFragment:);
  methods[29].selector = @selector(parseFileWithNSString:withBoolean:withASIFragment:);
  methods[30].selector = @selector(parseIncludeWithASHasWidgets:withNSString:withBoolean:withASIFragment:);
  methods[31].selector = @selector(getHandlerWithASHasWidgets:withInt:withASIFragment:);
  methods[32].selector = @selector(handlerStartWithId:withASIWidget:withInt:);
  methods[33].selector = @selector(handlerEndWithId:withASIWidget:);
  methods[34].selector = @selector(addToCurrentParentWithId:withASIWidget:);
  methods[35].selector = @selector(getAssetModeWithASIFragment:);
  methods[36].selector = @selector(getDevServerIpWithASIFragment:);
  methods[37].selector = @selector(getOrientation);
  methods[38].selector = @selector(getScreenWidth);
  methods[39].selector = @selector(getScreenHeight);
  methods[40].selector = @selector(getScreenWidthDp);
  methods[41].selector = @selector(getScreenHeightDp);
  methods[42].selector = @selector(getOS);
  methods[43].selector = @selector(getFileAssetWithNSString:withASIFragment:);
  methods[44].selector = @selector(getDensityName);
  methods[45].selector = @selector(getDensity);
  methods[46].selector = @selector(postDelayedWithJavaLangRunnable:withInt:);
  methods[47].selector = @selector(removeCallbacksWithId:withJavaLangRunnable:);
  methods[48].selector = @selector(putObjectToBundleWithId:withNSString:withId:);
  methods[49].selector = @selector(releaseNativeResourcesWithJavaUtilList:);
  methods[50].selector = @selector(getFontMetricsWithId:);
  methods[51].selector = @selector(createDrawableWithNSString:);
  methods[52].selector = @selector(createAttributedStringWithASIFragment:withNSString:);
  methods[53].selector = @selector(getDisplayMetricDensity);
  methods[54].selector = @selector(getAttributedBulletHtml);
  methods[55].selector = @selector(getExternalFilesDirWithId:);
  methods[56].selector = @selector(getMaxMemoryWithId:);
  methods[57].selector = @selector(decodeBitmapStreamWithJavaIoInputStream:withId:);
  methods[58].selector = @selector(runOnMainThreadWithJavaLangRunnable:);
  methods[59].selector = @selector(registerFontWithNSString:withNSString:withNSString:withNSString:withJavaUtilMap:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LASIConverter;LJavaUtilMap;LNSObject;LASIFragment;", "(Lcom/ashera/converter/IConverter;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/Object;Lcom/ashera/core/IFragment;)Ljava/lang/Object;", "convertTo", "LASIConverter;LNSObject;LASIFragment;", "getConverter", "LNSString;", "getDependentAttributes", "LASIConverter;", "(Lcom/ashera/converter/IConverter;)Ljava/util/List<Ljava/lang/String;>;", "getColor", "convertDpToPixel", "convertSpToPixel", "convertPixelToDp", "LNSObject;Z", "convertPixelToSp", "getMap", "LNSObject;", "(Ljava/lang/Object;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getNativeMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/lang/Object;", "putJSONSafeObjectIntoMap", "LJavaUtilMap;LNSString;LNSObject;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/Object;)V", "getArray", "getList", "(Ljava/lang/Object;)Ljava/util/List<Ljava/lang/Object;>;", "isBoolean", "getBoolean", "getString", "getInt", "getFloat", "getDouble", "marshal", "toJsonTree", "unmarshal", "LNSString;LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/String;Ljava/lang/Class<TT;>;)TT;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getJSONSafeObj", "navigate", "LNSString;LNSString;LNSObject;LASIFragment;", "parse", "LNSString;ZLASIFragment;", "parseWithParent", "LNSString;ZLASHasWidgets;LASIFragment;", "parseFile", "parseInclude", "LASHasWidgets;LNSString;ZLASIFragment;", "getHandler", "LASHasWidgets;ILASIFragment;", "handlerStart", "LNSObject;LASIWidget;I", "handlerEnd", "LNSObject;LASIWidget;", "addToCurrentParent", "getAssetMode", "LASIFragment;", "getDevServerIp", "getFileAsset", "LNSString;LASIFragment;", "postDelayed", "LJavaLangRunnable;I", "removeCallbacks", "LNSObject;LJavaLangRunnable;", "putObjectToBundle", "LNSObject;LNSString;LNSObject;", "releaseNativeResources", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Object;>;)V", "getFontMetrics", "createDrawable", "createAttributedString", "LASIFragment;LNSString;", "getExternalFilesDir", "getMaxMemory", "decodeBitmapStream", "LJavaIoInputStream;LNSObject;", "runOnMainThread", "LJavaLangRunnable;", "registerFont", "LNSString;LNSString;LNSString;LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V" };
  static const J2ObjcClassInfo _ASPluginInvoker = { "PluginInvoker", "com.ashera.widget", ptrTable, methods, NULL, 7, 0x1, 60, 0, -1, -1, -1, -1, -1 };
  return &_ASPluginInvoker;
}

@end

void ASPluginInvoker_init(ASPluginInvoker *self) {
  NSObject_init(self);
}

ASPluginInvoker *new_ASPluginInvoker_init() {
  J2OBJC_NEW_IMPL(ASPluginInvoker, init)
}

ASPluginInvoker *create_ASPluginInvoker_init() {
  J2OBJC_CREATE_IMPL(ASPluginInvoker, init)
}

id ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(id<ASIConverter> converter, id<JavaUtilMap> dependentAttributesMap, id value, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"convertFrom" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ converter, dependentAttributesMap, value, fragment } count:4 type:NSObject_class_()]];
}

id ASPluginInvoker_convertToWithASIConverter_withId_withASIFragment_(id<ASIConverter> converter, id objValue, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"convertTo" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ converter, objValue, fragment } count:3 type:NSObject_class_()]];
}

id<ASIConverter> ASPluginInvoker_getConverterWithNSString_(NSString *name) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return (id<ASIConverter>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getConverter" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ name } count:1 type:NSObject_class_()]], ASIConverter_class_());
}

id<JavaUtilList> ASPluginInvoker_getDependentAttributesWithASIConverter_(id<ASIConverter> converter) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return (id<JavaUtilList>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getDependentAttributes" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ converter } count:1 type:NSObject_class_()]], JavaUtilList_class_());
}

id ASPluginInvoker_getColorWithNSString_(NSString *color) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getColor" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ color } count:1 type:NSObject_class_()]];
}

jfloat ASPluginInvoker_convertDpToPixelWithNSString_(NSString *dimen) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"convertDpToPixel" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ dimen } count:1 type:NSObject_class_()]], [JavaLangFloat class]))) floatValue];
}

jfloat ASPluginInvoker_convertSpToPixelWithNSString_(NSString *dimen) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"convertSpToPixel" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ dimen } count:1 type:NSObject_class_()]], [JavaLangFloat class]))) floatValue];
}

NSString *ASPluginInvoker_convertPixelToDpWithId_withBoolean_(id dimen, jboolean isInt) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"convertPixelToDp" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ dimen, JavaLangBoolean_valueOfWithBoolean_(isInt) } count:2 type:NSObject_class_()]], [NSString class]);
}

NSString *ASPluginInvoker_convertPixelToSpWithId_withBoolean_(id dimen, jboolean isInt) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"converter");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"convertPixelToSp" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ dimen, JavaLangBoolean_valueOfWithBoolean_(isInt) } count:2 type:NSObject_class_()]], [NSString class]);
}

id<JavaUtilMap> ASPluginInvoker_getMapWithId_(id payLoad) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (id<JavaUtilMap>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getMap" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ payLoad } count:1 type:NSObject_class_()]], JavaUtilMap_class_());
}

id ASPluginInvoker_getNativeMapWithJavaUtilMap_(id<JavaUtilMap> payLoad) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getNativeMap" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ payLoad } count:1 type:NSObject_class_()]];
}

void ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(id<JavaUtilMap> map, NSString *key, id value) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"putJSONSafeObjectIntoMap" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ map, key, value } count:3 type:NSObject_class_()]];
}

IOSObjectArray *ASPluginInvoker_getArrayWithId_(id payLoad) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (IOSObjectArray *) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getArray" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ payLoad } count:1 type:NSObject_class_()]], IOSClass_arrayType(NSObject_class_(), 1));
}

id<JavaUtilList> ASPluginInvoker_getListWithId_(id payLoad) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (id<JavaUtilList>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getList" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ payLoad } count:1 type:NSObject_class_()]], JavaUtilList_class_());
}

jboolean ASPluginInvoker_isBooleanWithId_(id obj) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"isBoolean" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ obj } count:1 type:NSObject_class_()]], [JavaLangBoolean class]))) booleanValue];
}

JavaLangBoolean *ASPluginInvoker_getBooleanWithId_(id payLoad) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (JavaLangBoolean *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getBoolean" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ payLoad } count:1 type:NSObject_class_()]], [JavaLangBoolean class]);
}

NSString *ASPluginInvoker_getStringWithId_(id object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getString" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]], [NSString class]);
}

JavaLangInteger *ASPluginInvoker_getIntWithId_(id object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getInt" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]], [JavaLangInteger class]);
}

JavaLangFloat *ASPluginInvoker_getFloatWithId_(id object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (JavaLangFloat *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getFloat" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]], [JavaLangFloat class]);
}

JavaLangDouble *ASPluginInvoker_getDoubleWithId_(id object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (JavaLangDouble *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getDouble" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]], [JavaLangDouble class]);
}

NSString *ASPluginInvoker_marshalWithId_(id object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"marshal" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]], [NSString class]);
}

id ASPluginInvoker_toJsonTreeWithId_(id object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"toJsonTree" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]];
}

id ASPluginInvoker_unmarshalWithNSString_withIOSClass_(NSString *json, IOSClass *clazz) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"unmarshal" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ json, clazz } count:2 type:NSObject_class_()]];
}

id<JavaUtilMap> ASPluginInvoker_getJSONCompatMap() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return (id<JavaUtilMap>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getJSONCompatMap" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], JavaUtilMap_class_());
}

id ASPluginInvoker_getJSONSafeObjWithId_(id obj) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"jsonadapter");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getJSONSafeObj" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ obj } count:1 type:NSObject_class_()]];
}

void ASPluginInvoker_navigateWithNSString_withNSString_withId_withASIFragment_(NSString *actionId, NSString *varExpression, id payload, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"navigator");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"navigate" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ actionId, varExpression, payload, fragment } count:4 type:NSObject_class_()]];
}

id<ASIWidget> ASPluginInvoker_parseWithNSString_withBoolean_withASIFragment_(NSString *html, jboolean template_, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  return (id<ASIWidget>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"parse" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ html, JavaLangBoolean_valueOfWithBoolean_(template_), fragment } count:3 type:NSObject_class_()]], ASIWidget_class_());
}

id<ASIWidget> ASPluginInvoker_parseWithParentWithNSString_withBoolean_withASHasWidgets_withASIFragment_(NSString *html, jboolean template_, id<ASHasWidgets> parent, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  return (id<ASIWidget>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"parseWithParent" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ html, JavaLangBoolean_valueOfWithBoolean_(template_), parent, fragment } count:4 type:NSObject_class_()]], ASIWidget_class_());
}

id<ASIWidget> ASPluginInvoker_parseFileWithNSString_withBoolean_withASIFragment_(NSString *fileName, jboolean template_, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  return (id<ASIWidget>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"parseFile" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fileName, JavaLangBoolean_valueOfWithBoolean_(template_), fragment } count:3 type:NSObject_class_()]], ASIWidget_class_());
}

void ASPluginInvoker_parseIncludeWithASHasWidgets_withNSString_withBoolean_withASIFragment_(id<ASHasWidgets> parent, NSString *fileName, jboolean template_, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"parseInclude" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ parent, fileName, JavaLangBoolean_valueOfWithBoolean_(template_), fragment } count:4 type:NSObject_class_()]];
}

id ASPluginInvoker_getHandlerWithASHasWidgets_withInt_withASIFragment_(id<ASHasWidgets> parent, jint index, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getHandler" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ parent, JavaLangInteger_valueOfWithInt_(index), fragment } count:3 type:NSObject_class_()]];
}

id<ASIWidget> ASPluginInvoker_handlerStartWithId_withASIWidget_withInt_(id handler, id<ASIWidget> widget, jint index) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  return (id<ASIWidget>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"handlerStart" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ handler, widget, JavaLangInteger_valueOfWithInt_(index) } count:3 type:NSObject_class_()]], ASIWidget_class_());
}

void ASPluginInvoker_handlerEndWithId_withASIWidget_(id handler, id<ASIWidget> widget) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"handlerEnd" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ handler, widget } count:2 type:NSObject_class_()]];
}

void ASPluginInvoker_addToCurrentParentWithId_withASIWidget_(id handler, id<ASIWidget> widget) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"htmlparser");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"addToCurrentParent" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ handler, widget } count:2 type:NSObject_class_()]];
}

NSString *ASPluginInvoker_getAssetModeWithASIFragment_(id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getAssetMode" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fragment } count:1 type:NSObject_class_()]], [NSString class]);
}

NSString *ASPluginInvoker_getDevServerIpWithASIFragment_(id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getDevServerIp" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fragment } count:1 type:NSObject_class_()]], [NSString class]);
}

NSString *ASPluginInvoker_getOrientation() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getOrientation" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
}

jint ASPluginInvoker_getScreenWidth() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getScreenWidth" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
}

jint ASPluginInvoker_getScreenHeight() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getScreenHeight" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
}

jint ASPluginInvoker_getScreenWidthDp() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getScreenWidthDp" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
}

jint ASPluginInvoker_getScreenHeightDp() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getScreenHeightDp" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
}

NSString *ASPluginInvoker_getOS() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getOS" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
}

NSString *ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(NSString *path, id<ASIFragment> fragment) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getFileAsset" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ path, fragment } count:2 type:NSObject_class_()]], [NSString class]);
}

NSString *ASPluginInvoker_getDensityName() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getDensityName" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
}

jint ASPluginInvoker_getDensity() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getDensity" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
}

id ASPluginInvoker_postDelayedWithJavaLangRunnable_withInt_(id<JavaLangRunnable> mTickRunnable, jint delay) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"postDelayed" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ mTickRunnable, JavaLangInteger_valueOfWithInt_(delay) } count:2 type:NSObject_class_()]];
}

void ASPluginInvoker_removeCallbacksWithId_withJavaLangRunnable_(id handler, id<JavaLangRunnable> mTickRunnable) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"removeCallbacks" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ handler, mTickRunnable } count:2 type:NSObject_class_()]];
}

void ASPluginInvoker_putObjectToBundleWithId_withNSString_withId_(id bundle, NSString *key, id data) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"putObjectToBundle" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ bundle, key, data } count:3 type:NSObject_class_()]];
}

void ASPluginInvoker_releaseNativeResourcesWithJavaUtilList_(id<JavaUtilList> object) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"releaseNativeResources" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ object } count:1 type:NSObject_class_()]];
}

ASFontMetricsDescriptor *ASPluginInvoker_getFontMetricsWithId_(id font) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (ASFontMetricsDescriptor *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getFontMetrics" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ font } count:1 type:NSObject_class_()]], [ASFontMetricsDescriptor class]);
}

id ASPluginInvoker_createDrawableWithNSString_(NSString *type) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"createDrawable" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ type } count:1 type:NSObject_class_()]];
}

id<ASAttributedString> ASPluginInvoker_createAttributedStringWithASIFragment_withNSString_(id<ASIFragment> fragment, NSString *text) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (id<ASAttributedString>) cast_check([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"createAttributedString" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fragment, text } count:2 type:NSObject_class_()]], ASAttributedString_class_());
}

jfloat ASPluginInvoker_getDisplayMetricDensity() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getDisplayMetricDensity" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [JavaLangFloat class]))) floatValue];
}

NSString *ASPluginInvoker_getAttributedBulletHtml() {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (NSString *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getAttributedBulletHtml" withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]], [NSString class]);
}

JavaIoFile *ASPluginInvoker_getExternalFilesDirWithId_(id context) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return (JavaIoFile *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getExternalFilesDir" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ context } count:1 type:NSObject_class_()]], [JavaIoFile class]);
}

jint ASPluginInvoker_getMaxMemoryWithId_(id context) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"getMaxMemory" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ context } count:1 type:NSObject_class_()]], [JavaLangInteger class]))) intValue];
}

id ASPluginInvoker_decodeBitmapStreamWithJavaIoInputStream_withId_(JavaIoInputStream *stream, id options) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  return [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"decodeBitmapStream" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ stream, options } count:2 type:NSObject_class_()]];
}

void ASPluginInvoker_runOnMainThreadWithJavaLangRunnable_(id<JavaLangRunnable> runnable) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"core");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"runOnMainThread" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ runnable } count:1 type:NSObject_class_()]];
}

void ASPluginInvoker_registerFontWithNSString_withNSString_withNSString_withNSString_withJavaUtilMap_(NSString *fontFamily, NSString *src, NSString *fontStyle, NSString *fontWeight, id<JavaUtilMap> metadata) {
  ASPluginInvoker_initialize();
  id<ASIPlugin> plugin = ASPluginManager_getWithNSString_(@"font");
  [((id<ASIPlugin>) nil_chk(plugin)) invokeWithNSString:@"registerFont" withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ fontFamily, src, fontStyle, fontWeight, metadata } count:5 type:NSObject_class_()]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPluginInvoker)
