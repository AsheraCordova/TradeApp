//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\state\ConstraintReference.java
//

#include "ConstraintAnchor.h"
#include "ConstraintReference.h"
#include "ConstraintWidget.h"
#include "Dimension.h"
#include "Facade.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "Reference.h"
#include "State.h"
#include "TypedValues.h"
#include "WidgetFrame.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"

@class JavaUtilArrayList;
@class JavaUtilHashMap;


@interface ADXConstraintReference () {
 @public
  id key_;
  jfloat mCircularAngle_;
  jfloat mCircularDistance_;
  id mView_;
  ADXConstraintWidget *mConstraintWidget_;
  JavaUtilHashMap *mCustomColors_;
  JavaUtilHashMap *mCustomFloats_;
}

- (id)getWithId:(id)reference;

- (void)dereference;

- (ADXConstraintWidget *)getTargetWithId:(id)target;

- (void)applyConnectionWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                        withId:(id)opaqueTarget
                       withADXState_Constraint:(ADXState_Constraint *)type;

@end

J2OBJC_FIELD_SETTER(ADXConstraintReference, key_, id)
J2OBJC_FIELD_SETTER(ADXConstraintReference, mView_, id)
J2OBJC_FIELD_SETTER(ADXConstraintReference, mConstraintWidget_, ADXConstraintWidget *)
J2OBJC_FIELD_SETTER(ADXConstraintReference, mCustomColors_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXConstraintReference, mCustomFloats_, JavaUtilHashMap *)

__attribute__((unused)) static id ADXConstraintReference_getWithId_(ADXConstraintReference *self, id reference);

__attribute__((unused)) static void ADXConstraintReference_dereference(ADXConstraintReference *self);

__attribute__((unused)) static ADXConstraintWidget *ADXConstraintReference_getTargetWithId_(ADXConstraintReference *self, id target);

__attribute__((unused)) static void ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(ADXConstraintReference *self, ADXConstraintWidget *widget, id opaqueTarget, ADXState_Constraint *type);

@interface ADXConstraintReference_ConstraintReferenceFactory : NSObject

@end

@interface ADXConstraintReference_IncorrectConstraintException () {
 @public
  JavaUtilArrayList *mErrors_;
}

@end

J2OBJC_FIELD_SETTER(ADXConstraintReference_IncorrectConstraintException, mErrors_, JavaUtilArrayList *)

@implementation ADXConstraintReference

- (void)setKeyWithId:(id)key {
  JreStrongAssign(&self->key_, key);
}

- (id)getKey {
  return key_;
}

- (void)setTagWithNSString:(NSString *)tag {
  JreStrongAssign(&mTag_, tag);
}

- (NSString *)getTag {
  return mTag_;
}

- (void)setViewWithId:(id)view {
  JreStrongAssign(&mView_, view);
  if (mConstraintWidget_ != nil) {
    [mConstraintWidget_ setCompanionWidgetWithId:mView_];
  }
}

- (id)getView {
  return mView_;
}

- (void)setFacadeWithADXFacade:(id<ADXFacade>)facade {
  JreStrongAssign(&mFacade_, facade);
  if (facade != nil) {
    [self setConstraintWidgetWithADXConstraintWidget:[facade getConstraintWidget]];
  }
}

- (id<ADXFacade>)getFacade {
  return mFacade_;
}

- (void)setConstraintWidgetWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  if (widget == nil) {
    return;
  }
  JreStrongAssign(&mConstraintWidget_, widget);
  [mConstraintWidget_ setCompanionWidgetWithId:mView_];
}

- (ADXConstraintWidget *)getConstraintWidget {
  if (mConstraintWidget_ == nil) {
    JreStrongAssign(&mConstraintWidget_, [self createConstraintWidget]);
    [((ADXConstraintWidget *) nil_chk(mConstraintWidget_)) setCompanionWidgetWithId:mView_];
  }
  return mConstraintWidget_;
}

- (ADXConstraintWidget *)createConstraintWidget {
  return create_ADXConstraintWidget_initWithInt_withInt_([((ADXDimension *) nil_chk([self getWidth])) getValue], [((ADXDimension *) nil_chk([self getHeight])) getValue]);
}

- (void)validate {
  JavaUtilArrayList *errors = create_JavaUtilArrayList_init();
  if (mLeftToLeft_ != nil && mLeftToRight_ != nil) {
    [errors addWithId:@"LeftToLeft and LeftToRight both defined"];
  }
  if (mRightToLeft_ != nil && mRightToRight_ != nil) {
    [errors addWithId:@"RightToLeft and RightToRight both defined"];
  }
  if (mStartToStart_ != nil && mStartToEnd_ != nil) {
    [errors addWithId:@"StartToStart and StartToEnd both defined"];
  }
  if (mEndToStart_ != nil && mEndToEnd_ != nil) {
    [errors addWithId:@"EndToStart and EndToEnd both defined"];
  }
  if ((mLeftToLeft_ != nil || mLeftToRight_ != nil || mRightToLeft_ != nil || mRightToRight_ != nil) && (mStartToStart_ != nil || mStartToEnd_ != nil || mEndToStart_ != nil || mEndToEnd_ != nil)) {
    [errors addWithId:@"Both left/right and start/end constraints defined"];
  }
  if ([errors size] > 0) {
    @throw create_ADXConstraintReference_IncorrectConstraintException_initWithJavaUtilArrayList_(errors);
  }
}

- (id)getWithId:(id)reference {
  return ADXConstraintReference_getWithId_(self, reference);
}

- (instancetype)initWithADXState:(ADXState *)state {
  ADXConstraintReference_initWithADXState_(self, state);
  return self;
}

- (void)setHorizontalChainStyleWithInt:(jint)chainStyle {
  mHorizontalChainStyle_ = chainStyle;
}

- (jint)getHorizontalChainStyle {
  return mHorizontalChainStyle_;
}

- (void)setVerticalChainStyleWithInt:(jint)chainStyle {
  mVerticalChainStyle_ = chainStyle;
}

- (jint)getVerticalChainStyleWithInt:(jint)chainStyle {
  return mVerticalChainStyle_;
}

- (ADXConstraintReference *)clearVertical {
  [((ADXConstraintReference *) nil_chk([self top])) clear];
  [((ADXConstraintReference *) nil_chk([self baseline])) clear];
  [((ADXConstraintReference *) nil_chk([self bottom])) clear];
  return self;
}

- (ADXConstraintReference *)clearHorizontal {
  [((ADXConstraintReference *) nil_chk([self start])) clear];
  [((ADXConstraintReference *) nil_chk([self end])) clear];
  [((ADXConstraintReference *) nil_chk([self left])) clear];
  [((ADXConstraintReference *) nil_chk([self right])) clear];
  return self;
}

- (jfloat)getTranslationX {
  return mTranslationX_;
}

- (jfloat)getTranslationY {
  return mTranslationY_;
}

- (jfloat)getTranslationZ {
  return mTranslationZ_;
}

- (jfloat)getScaleX {
  return mScaleX_;
}

- (jfloat)getScaleY {
  return mScaleY_;
}

- (jfloat)getAlpha {
  return mAlpha_;
}

- (jfloat)getPivotX {
  return mPivotX_;
}

- (jfloat)getPivotY {
  return mPivotY_;
}

- (jfloat)getRotationX {
  return mRotationX_;
}

- (jfloat)getRotationY {
  return mRotationY_;
}

- (jfloat)getRotationZ {
  return mRotationZ_;
}

- (ADXConstraintReference *)pivotXWithFloat:(jfloat)x {
  mPivotX_ = x;
  return self;
}

- (ADXConstraintReference *)pivotYWithFloat:(jfloat)y {
  mPivotY_ = y;
  return self;
}

- (ADXConstraintReference *)rotationXWithFloat:(jfloat)x {
  mRotationX_ = x;
  return self;
}

- (ADXConstraintReference *)rotationYWithFloat:(jfloat)y {
  mRotationY_ = y;
  return self;
}

- (ADXConstraintReference *)rotationZWithFloat:(jfloat)z {
  mRotationZ_ = z;
  return self;
}

- (ADXConstraintReference *)translationXWithFloat:(jfloat)x {
  mTranslationX_ = x;
  return self;
}

- (ADXConstraintReference *)translationYWithFloat:(jfloat)y {
  mTranslationY_ = y;
  return self;
}

- (ADXConstraintReference *)translationZWithFloat:(jfloat)z {
  mTranslationZ_ = z;
  return self;
}

- (ADXConstraintReference *)scaleXWithFloat:(jfloat)x {
  mScaleX_ = x;
  return self;
}

- (ADXConstraintReference *)scaleYWithFloat:(jfloat)y {
  mScaleY_ = y;
  return self;
}

- (ADXConstraintReference *)alphaWithFloat:(jfloat)alpha {
  mAlpha_ = alpha;
  return self;
}

- (ADXConstraintReference *)visibilityWithInt:(jint)visibility {
  mVisibility_ = visibility;
  return self;
}

- (ADXConstraintReference *)left {
  if (mLeftToLeft_ != nil) {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, LEFT_TO_LEFT));
  }
  else {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, LEFT_TO_RIGHT));
  }
  return self;
}

- (ADXConstraintReference *)right {
  if (mRightToLeft_ != nil) {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, RIGHT_TO_LEFT));
  }
  else {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, RIGHT_TO_RIGHT));
  }
  return self;
}

- (ADXConstraintReference *)start {
  if (mStartToStart_ != nil) {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, START_TO_START));
  }
  else {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, START_TO_END));
  }
  return self;
}

- (ADXConstraintReference *)end {
  if (mEndToStart_ != nil) {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, END_TO_START));
  }
  else {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, END_TO_END));
  }
  return self;
}

- (ADXConstraintReference *)top {
  if (mTopToTop_ != nil) {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, TOP_TO_TOP));
  }
  else {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, TOP_TO_BOTTOM));
  }
  return self;
}

- (ADXConstraintReference *)bottom {
  if (mBottomToTop_ != nil) {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, BOTTOM_TO_TOP));
  }
  else {
    JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, BOTTOM_TO_BOTTOM));
  }
  return self;
}

- (ADXConstraintReference *)baseline {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, BASELINE_TO_BASELINE));
  return self;
}

- (void)addCustomColorWithNSString:(NSString *)name
                           withInt:(jint)color {
  [((JavaUtilHashMap *) nil_chk(mCustomColors_)) putWithId:name withId:JavaLangInteger_valueOfWithInt_(color)];
}

- (void)addCustomFloatWithNSString:(NSString *)name
                         withFloat:(jfloat)value {
  if (mCustomFloats_ == nil) {
    JreStrongAssignAndConsume(&mCustomFloats_, new_JavaUtilHashMap_init());
  }
  [mCustomFloats_ putWithId:name withId:JavaLangFloat_valueOfWithFloat_(value)];
}

- (void)dereference {
  ADXConstraintReference_dereference(self);
}

- (ADXConstraintReference *)leftToLeftWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, LEFT_TO_LEFT));
  JreStrongAssign(&mLeftToLeft_, reference);
  return self;
}

- (ADXConstraintReference *)leftToRightWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, LEFT_TO_RIGHT));
  JreStrongAssign(&mLeftToRight_, reference);
  return self;
}

- (ADXConstraintReference *)rightToLeftWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, RIGHT_TO_LEFT));
  JreStrongAssign(&mRightToLeft_, reference);
  return self;
}

- (ADXConstraintReference *)rightToRightWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, RIGHT_TO_RIGHT));
  JreStrongAssign(&mRightToRight_, reference);
  return self;
}

- (ADXConstraintReference *)startToStartWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, START_TO_START));
  JreStrongAssign(&mStartToStart_, reference);
  return self;
}

- (ADXConstraintReference *)startToEndWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, START_TO_END));
  JreStrongAssign(&mStartToEnd_, reference);
  return self;
}

- (ADXConstraintReference *)endToStartWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, END_TO_START));
  JreStrongAssign(&mEndToStart_, reference);
  return self;
}

- (ADXConstraintReference *)endToEndWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, END_TO_END));
  JreStrongAssign(&mEndToEnd_, reference);
  return self;
}

- (ADXConstraintReference *)topToTopWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, TOP_TO_TOP));
  JreStrongAssign(&mTopToTop_, reference);
  return self;
}

- (ADXConstraintReference *)topToBottomWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, TOP_TO_BOTTOM));
  JreStrongAssign(&mTopToBottom_, reference);
  return self;
}

- (ADXConstraintReference *)bottomToTopWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, BOTTOM_TO_TOP));
  JreStrongAssign(&mBottomToTop_, reference);
  return self;
}

- (ADXConstraintReference *)bottomToBottomWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, BOTTOM_TO_BOTTOM));
  JreStrongAssign(&mBottomToBottom_, reference);
  return self;
}

- (ADXConstraintReference *)baselineToBaselineWithId:(id)reference {
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, BASELINE_TO_BASELINE));
  JreStrongAssign(&mBaselineToBaseline_, reference);
  return self;
}

- (ADXConstraintReference *)centerHorizontallyWithId:(id)reference {
  id ref = ADXConstraintReference_getWithId_(self, reference);
  JreStrongAssign(&mStartToStart_, ref);
  JreStrongAssign(&mEndToEnd_, ref);
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, CENTER_HORIZONTALLY));
  mHorizontalBias_ = 0.5f;
  return self;
}

- (ADXConstraintReference *)centerVerticallyWithId:(id)reference {
  id ref = ADXConstraintReference_getWithId_(self, reference);
  JreStrongAssign(&mTopToTop_, ref);
  JreStrongAssign(&mBottomToBottom_, ref);
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, CENTER_VERTICALLY));
  mVerticalBias_ = 0.5f;
  return self;
}

- (ADXConstraintReference *)circularConstraintWithId:(id)reference
                                           withFloat:(jfloat)angle
                                           withFloat:(jfloat)distance {
  id ref = ADXConstraintReference_getWithId_(self, reference);
  JreStrongAssign(&mCircularConstraint_, ref);
  mCircularAngle_ = angle;
  mCircularDistance_ = distance;
  JreStrongAssign(&mLast_, JreLoadEnum(ADXState_Constraint, CIRCULAR_CONSTRAINT));
  return self;
}

- (ADXConstraintReference *)widthWithADXDimension:(ADXDimension *)dimension {
  return [self setWidthWithADXDimension:dimension];
}

- (ADXConstraintReference *)heightWithADXDimension:(ADXDimension *)dimension {
  return [self setHeightWithADXDimension:dimension];
}

- (ADXDimension *)getWidth {
  return mHorizontalDimension_;
}

- (ADXConstraintReference *)setWidthWithADXDimension:(ADXDimension *)dimension {
  JreStrongAssign(&mHorizontalDimension_, dimension);
  return self;
}

- (ADXDimension *)getHeight {
  return mVerticalDimension_;
}

- (ADXConstraintReference *)setHeightWithADXDimension:(ADXDimension *)dimension {
  JreStrongAssign(&mVerticalDimension_, dimension);
  return self;
}

- (ADXConstraintReference *)marginWithId:(id)marginValue {
  return [self marginWithInt:[((ADXState *) nil_chk(mState_)) convertDimensionWithId:marginValue]];
}

- (ADXConstraintReference *)marginWithInt:(jint)value {
  if (mLast_ != nil) {
    switch ([mLast_ ordinal]) {
      case ADXState_Constraint_Enum_LEFT_TO_LEFT:
      case ADXState_Constraint_Enum_LEFT_TO_RIGHT:
      {
        mMarginLeft_ = value;
      }
      break;
      case ADXState_Constraint_Enum_RIGHT_TO_LEFT:
      case ADXState_Constraint_Enum_RIGHT_TO_RIGHT:
      {
        mMarginRight_ = value;
      }
      break;
      case ADXState_Constraint_Enum_START_TO_START:
      case ADXState_Constraint_Enum_START_TO_END:
      {
        mMarginStart_ = value;
      }
      break;
      case ADXState_Constraint_Enum_END_TO_START:
      case ADXState_Constraint_Enum_END_TO_END:
      {
        mMarginEnd_ = value;
      }
      break;
      case ADXState_Constraint_Enum_TOP_TO_TOP:
      case ADXState_Constraint_Enum_TOP_TO_BOTTOM:
      {
        mMarginTop_ = value;
      }
      break;
      case ADXState_Constraint_Enum_BOTTOM_TO_TOP:
      case ADXState_Constraint_Enum_BOTTOM_TO_BOTTOM:
      {
        mMarginBottom_ = value;
      }
      break;
      case ADXState_Constraint_Enum_BASELINE_TO_BASELINE:
      {
      }
      break;
      case ADXState_Constraint_Enum_CIRCULAR_CONSTRAINT:
      {
        mCircularDistance_ = value;
      }
      break;
      default:
      break;
    }
  }
  else {
    mMarginLeft_ = value;
    mMarginRight_ = value;
    mMarginStart_ = value;
    mMarginEnd_ = value;
    mMarginTop_ = value;
    mMarginBottom_ = value;
  }
  return self;
}

- (ADXConstraintReference *)marginGoneWithInt:(jint)value {
  if (mLast_ != nil) {
    switch ([mLast_ ordinal]) {
      case ADXState_Constraint_Enum_LEFT_TO_LEFT:
      case ADXState_Constraint_Enum_LEFT_TO_RIGHT:
      {
        mMarginLeftGone_ = value;
      }
      break;
      case ADXState_Constraint_Enum_RIGHT_TO_LEFT:
      case ADXState_Constraint_Enum_RIGHT_TO_RIGHT:
      {
        mMarginRightGone_ = value;
      }
      break;
      case ADXState_Constraint_Enum_START_TO_START:
      case ADXState_Constraint_Enum_START_TO_END:
      {
        mMarginStartGone_ = value;
      }
      break;
      case ADXState_Constraint_Enum_END_TO_START:
      case ADXState_Constraint_Enum_END_TO_END:
      {
        mMarginEndGone_ = value;
      }
      break;
      case ADXState_Constraint_Enum_TOP_TO_TOP:
      case ADXState_Constraint_Enum_TOP_TO_BOTTOM:
      {
        mMarginTopGone_ = value;
      }
      break;
      case ADXState_Constraint_Enum_BOTTOM_TO_TOP:
      case ADXState_Constraint_Enum_BOTTOM_TO_BOTTOM:
      {
        mMarginBottomGone_ = value;
      }
      break;
      case ADXState_Constraint_Enum_BASELINE_TO_BASELINE:
      {
      }
      break;
      default:
      break;
    }
  }
  else {
    mMarginLeftGone_ = value;
    mMarginRightGone_ = value;
    mMarginStartGone_ = value;
    mMarginEndGone_ = value;
    mMarginTopGone_ = value;
    mMarginBottomGone_ = value;
  }
  return self;
}

- (ADXConstraintReference *)horizontalBiasWithFloat:(jfloat)value {
  mHorizontalBias_ = value;
  return self;
}

- (ADXConstraintReference *)verticalBiasWithFloat:(jfloat)value {
  mVerticalBias_ = value;
  return self;
}

- (ADXConstraintReference *)biasWithFloat:(jfloat)value {
  if (mLast_ == nil) {
    return self;
  }
  switch ([mLast_ ordinal]) {
    case ADXState_Constraint_Enum_CENTER_HORIZONTALLY:
    case ADXState_Constraint_Enum_LEFT_TO_LEFT:
    case ADXState_Constraint_Enum_LEFT_TO_RIGHT:
    case ADXState_Constraint_Enum_RIGHT_TO_LEFT:
    case ADXState_Constraint_Enum_RIGHT_TO_RIGHT:
    case ADXState_Constraint_Enum_START_TO_START:
    case ADXState_Constraint_Enum_START_TO_END:
    case ADXState_Constraint_Enum_END_TO_START:
    case ADXState_Constraint_Enum_END_TO_END:
    {
      mHorizontalBias_ = value;
    }
    break;
    case ADXState_Constraint_Enum_CENTER_VERTICALLY:
    case ADXState_Constraint_Enum_TOP_TO_TOP:
    case ADXState_Constraint_Enum_TOP_TO_BOTTOM:
    case ADXState_Constraint_Enum_BOTTOM_TO_TOP:
    case ADXState_Constraint_Enum_BOTTOM_TO_BOTTOM:
    {
      mVerticalBias_ = value;
    }
    break;
    default:
    break;
  }
  return self;
}

- (ADXConstraintReference *)clear {
  if (mLast_ != nil) {
    switch ([mLast_ ordinal]) {
      case ADXState_Constraint_Enum_LEFT_TO_LEFT:
      case ADXState_Constraint_Enum_LEFT_TO_RIGHT:
      {
        JreStrongAssign(&mLeftToLeft_, nil);
        JreStrongAssign(&mLeftToRight_, nil);
        mMarginLeft_ = 0;
        mMarginLeftGone_ = 0;
      }
      break;
      case ADXState_Constraint_Enum_RIGHT_TO_LEFT:
      case ADXState_Constraint_Enum_RIGHT_TO_RIGHT:
      {
        JreStrongAssign(&mRightToLeft_, nil);
        JreStrongAssign(&mRightToRight_, nil);
        mMarginRight_ = 0;
        mMarginRightGone_ = 0;
      }
      break;
      case ADXState_Constraint_Enum_START_TO_START:
      case ADXState_Constraint_Enum_START_TO_END:
      {
        JreStrongAssign(&mStartToStart_, nil);
        JreStrongAssign(&mStartToEnd_, nil);
        mMarginStart_ = 0;
        mMarginStartGone_ = 0;
      }
      break;
      case ADXState_Constraint_Enum_END_TO_START:
      case ADXState_Constraint_Enum_END_TO_END:
      {
        JreStrongAssign(&mEndToStart_, nil);
        JreStrongAssign(&mEndToEnd_, nil);
        mMarginEnd_ = 0;
        mMarginEndGone_ = 0;
      }
      break;
      case ADXState_Constraint_Enum_TOP_TO_TOP:
      case ADXState_Constraint_Enum_TOP_TO_BOTTOM:
      {
        JreStrongAssign(&mTopToTop_, nil);
        JreStrongAssign(&mTopToBottom_, nil);
        mMarginTop_ = 0;
        mMarginTopGone_ = 0;
      }
      break;
      case ADXState_Constraint_Enum_BOTTOM_TO_TOP:
      case ADXState_Constraint_Enum_BOTTOM_TO_BOTTOM:
      {
        JreStrongAssign(&mBottomToTop_, nil);
        JreStrongAssign(&mBottomToBottom_, nil);
        mMarginBottom_ = 0;
        mMarginBottomGone_ = 0;
      }
      break;
      case ADXState_Constraint_Enum_BASELINE_TO_BASELINE:
      {
        JreStrongAssign(&mBaselineToBaseline_, nil);
      }
      break;
      case ADXState_Constraint_Enum_CIRCULAR_CONSTRAINT:
      {
        JreStrongAssign(&mCircularConstraint_, nil);
      }
      break;
      default:
      break;
    }
  }
  else {
    JreStrongAssign(&mLeftToLeft_, nil);
    JreStrongAssign(&mLeftToRight_, nil);
    mMarginLeft_ = 0;
    JreStrongAssign(&mRightToLeft_, nil);
    JreStrongAssign(&mRightToRight_, nil);
    mMarginRight_ = 0;
    JreStrongAssign(&mStartToStart_, nil);
    JreStrongAssign(&mStartToEnd_, nil);
    mMarginStart_ = 0;
    JreStrongAssign(&mEndToStart_, nil);
    JreStrongAssign(&mEndToEnd_, nil);
    mMarginEnd_ = 0;
    JreStrongAssign(&mTopToTop_, nil);
    JreStrongAssign(&mTopToBottom_, nil);
    mMarginTop_ = 0;
    JreStrongAssign(&mBottomToTop_, nil);
    JreStrongAssign(&mBottomToBottom_, nil);
    mMarginBottom_ = 0;
    JreStrongAssign(&mBaselineToBaseline_, nil);
    JreStrongAssign(&mCircularConstraint_, nil);
    mHorizontalBias_ = 0.5f;
    mVerticalBias_ = 0.5f;
    mMarginLeftGone_ = 0;
    mMarginRightGone_ = 0;
    mMarginStartGone_ = 0;
    mMarginEndGone_ = 0;
    mMarginTopGone_ = 0;
    mMarginBottomGone_ = 0;
  }
  return self;
}

- (ADXConstraintWidget *)getTargetWithId:(id)target {
  return ADXConstraintReference_getTargetWithId_(self, target);
}

- (void)applyConnectionWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                        withId:(id)opaqueTarget
                       withADXState_Constraint:(ADXState_Constraint *)type {
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, widget, opaqueTarget, type);
}

- (void)apply {
  if (mConstraintWidget_ == nil) {
    return;
  }
  if (mFacade_ != nil) {
    [mFacade_ apply];
  }
  [((ADXDimension *) nil_chk(mHorizontalDimension_)) applyWithADXState:mState_ withADXConstraintWidget:mConstraintWidget_ withInt:ADXConstraintWidget_HORIZONTAL];
  [((ADXDimension *) nil_chk(mVerticalDimension_)) applyWithADXState:mState_ withADXConstraintWidget:mConstraintWidget_ withInt:ADXConstraintWidget_VERTICAL];
  ADXConstraintReference_dereference(self);
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mLeftToLeft_, JreLoadEnum(ADXState_Constraint, LEFT_TO_LEFT));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mLeftToRight_, JreLoadEnum(ADXState_Constraint, LEFT_TO_RIGHT));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mRightToLeft_, JreLoadEnum(ADXState_Constraint, RIGHT_TO_LEFT));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mRightToRight_, JreLoadEnum(ADXState_Constraint, RIGHT_TO_RIGHT));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mStartToStart_, JreLoadEnum(ADXState_Constraint, START_TO_START));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mStartToEnd_, JreLoadEnum(ADXState_Constraint, START_TO_END));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mEndToStart_, JreLoadEnum(ADXState_Constraint, END_TO_START));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mEndToEnd_, JreLoadEnum(ADXState_Constraint, END_TO_END));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mTopToTop_, JreLoadEnum(ADXState_Constraint, TOP_TO_TOP));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mTopToBottom_, JreLoadEnum(ADXState_Constraint, TOP_TO_BOTTOM));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mBottomToTop_, JreLoadEnum(ADXState_Constraint, BOTTOM_TO_TOP));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mBottomToBottom_, JreLoadEnum(ADXState_Constraint, BOTTOM_TO_BOTTOM));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mBaselineToBaseline_, JreLoadEnum(ADXState_Constraint, BASELINE_TO_BASELINE));
  ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(self, mConstraintWidget_, mCircularConstraint_, JreLoadEnum(ADXState_Constraint, CIRCULAR_CONSTRAINT));
  if (mHorizontalChainStyle_ != ADXConstraintWidget_CHAIN_SPREAD) {
    [((ADXConstraintWidget *) nil_chk(mConstraintWidget_)) setHorizontalChainStyleWithInt:mHorizontalChainStyle_];
  }
  if (mVerticalChainStyle_ != ADXConstraintWidget_CHAIN_SPREAD) {
    [((ADXConstraintWidget *) nil_chk(mConstraintWidget_)) setVerticalChainStyleWithInt:mVerticalChainStyle_];
  }
  [((ADXConstraintWidget *) nil_chk(mConstraintWidget_)) setHorizontalBiasPercentWithFloat:mHorizontalBias_];
  [((ADXConstraintWidget *) nil_chk(mConstraintWidget_)) setVerticalBiasPercentWithFloat:mVerticalBias_];
  ((ADXWidgetFrame *) nil_chk(((ADXConstraintWidget *) nil_chk(mConstraintWidget_))->frame_))->pivotX_ = mPivotX_;
  mConstraintWidget_->frame_->pivotY_ = mPivotY_;
  mConstraintWidget_->frame_->rotationX_ = mRotationX_;
  mConstraintWidget_->frame_->rotationY_ = mRotationY_;
  mConstraintWidget_->frame_->rotationZ_ = mRotationZ_;
  mConstraintWidget_->frame_->translationX_ = mTranslationX_;
  mConstraintWidget_->frame_->translationY_ = mTranslationY_;
  mConstraintWidget_->frame_->translationZ_ = mTranslationZ_;
  mConstraintWidget_->frame_->scaleX_ = mScaleX_;
  mConstraintWidget_->frame_->scaleY_ = mScaleY_;
  mConstraintWidget_->frame_->alpha_ = mAlpha_;
  mConstraintWidget_->frame_->visibility_ = mVisibility_;
  [mConstraintWidget_ setVisibilityWithInt:mVisibility_];
  if (mCustomColors_ != nil) {
    for (NSString * __strong key in nil_chk([mCustomColors_ keySet])) {
      JavaLangInteger *color = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mCustomColors_)) getWithId:key]);
      [((ADXWidgetFrame *) nil_chk(((ADXConstraintWidget *) nil_chk(mConstraintWidget_))->frame_)) setCustomAttributeWithNSString:key withInt:ADXTypedValues_Custom_TYPE_COLOR withInt:[((JavaLangInteger *) nil_chk(color)) intValue]];
    }
  }
  if (mCustomFloats_ != nil) {
    for (NSString * __strong key in nil_chk([mCustomFloats_ keySet])) {
      jfloat value = [((JavaLangFloat *) nil_chk([((JavaUtilHashMap *) nil_chk(mCustomFloats_)) getWithId:key])) floatValue];
      [((ADXWidgetFrame *) nil_chk(((ADXConstraintWidget *) nil_chk(mConstraintWidget_))->frame_)) setCustomAttributeWithNSString:key withInt:ADXTypedValues_Custom_TYPE_FLOAT withFloat:value];
    }
  }
}

- (void)dealloc {
  RELEASE_(key_);
  RELEASE_(mState_);
  RELEASE_(mTag_);
  RELEASE_(mFacade_);
  RELEASE_(mLeftToLeft_);
  RELEASE_(mLeftToRight_);
  RELEASE_(mRightToLeft_);
  RELEASE_(mRightToRight_);
  RELEASE_(mStartToStart_);
  RELEASE_(mStartToEnd_);
  RELEASE_(mEndToStart_);
  RELEASE_(mEndToEnd_);
  RELEASE_(mTopToTop_);
  RELEASE_(mTopToBottom_);
  RELEASE_(mBottomToTop_);
  RELEASE_(mBottomToBottom_);
  RELEASE_(mBaselineToBaseline_);
  RELEASE_(mCircularConstraint_);
  RELEASE_(mLast_);
  RELEASE_(mHorizontalDimension_);
  RELEASE_(mVerticalDimension_);
  RELEASE_(mView_);
  RELEASE_(mConstraintWidget_);
  RELEASE_(mCustomColors_);
  RELEASE_(mCustomFloats_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADXFacade;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 9, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 10, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 19, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 20, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 21, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 22, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 23, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 24, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 25, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 26, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 27, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 28, 13, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 33, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 34, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 37, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 38, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 39, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 40, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 41, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 42, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 44, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 45, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 46, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 47, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 50, 51, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 52, 51, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 53, 51, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 54, 51, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 55, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 55, 13, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 56, 13, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 57, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 58, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 59, 17, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x2, 60, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setKeyWithId:);
  methods[1].selector = @selector(getKey);
  methods[2].selector = @selector(setTagWithNSString:);
  methods[3].selector = @selector(getTag);
  methods[4].selector = @selector(setViewWithId:);
  methods[5].selector = @selector(getView);
  methods[6].selector = @selector(setFacadeWithADXFacade:);
  methods[7].selector = @selector(getFacade);
  methods[8].selector = @selector(setConstraintWidgetWithADXConstraintWidget:);
  methods[9].selector = @selector(getConstraintWidget);
  methods[10].selector = @selector(createConstraintWidget);
  methods[11].selector = @selector(validate);
  methods[12].selector = @selector(getWithId:);
  methods[13].selector = @selector(initWithADXState:);
  methods[14].selector = @selector(setHorizontalChainStyleWithInt:);
  methods[15].selector = @selector(getHorizontalChainStyle);
  methods[16].selector = @selector(setVerticalChainStyleWithInt:);
  methods[17].selector = @selector(getVerticalChainStyleWithInt:);
  methods[18].selector = @selector(clearVertical);
  methods[19].selector = @selector(clearHorizontal);
  methods[20].selector = @selector(getTranslationX);
  methods[21].selector = @selector(getTranslationY);
  methods[22].selector = @selector(getTranslationZ);
  methods[23].selector = @selector(getScaleX);
  methods[24].selector = @selector(getScaleY);
  methods[25].selector = @selector(getAlpha);
  methods[26].selector = @selector(getPivotX);
  methods[27].selector = @selector(getPivotY);
  methods[28].selector = @selector(getRotationX);
  methods[29].selector = @selector(getRotationY);
  methods[30].selector = @selector(getRotationZ);
  methods[31].selector = @selector(pivotXWithFloat:);
  methods[32].selector = @selector(pivotYWithFloat:);
  methods[33].selector = @selector(rotationXWithFloat:);
  methods[34].selector = @selector(rotationYWithFloat:);
  methods[35].selector = @selector(rotationZWithFloat:);
  methods[36].selector = @selector(translationXWithFloat:);
  methods[37].selector = @selector(translationYWithFloat:);
  methods[38].selector = @selector(translationZWithFloat:);
  methods[39].selector = @selector(scaleXWithFloat:);
  methods[40].selector = @selector(scaleYWithFloat:);
  methods[41].selector = @selector(alphaWithFloat:);
  methods[42].selector = @selector(visibilityWithInt:);
  methods[43].selector = @selector(left);
  methods[44].selector = @selector(right);
  methods[45].selector = @selector(start);
  methods[46].selector = @selector(end);
  methods[47].selector = @selector(top);
  methods[48].selector = @selector(bottom);
  methods[49].selector = @selector(baseline);
  methods[50].selector = @selector(addCustomColorWithNSString:withInt:);
  methods[51].selector = @selector(addCustomFloatWithNSString:withFloat:);
  methods[52].selector = @selector(dereference);
  methods[53].selector = @selector(leftToLeftWithId:);
  methods[54].selector = @selector(leftToRightWithId:);
  methods[55].selector = @selector(rightToLeftWithId:);
  methods[56].selector = @selector(rightToRightWithId:);
  methods[57].selector = @selector(startToStartWithId:);
  methods[58].selector = @selector(startToEndWithId:);
  methods[59].selector = @selector(endToStartWithId:);
  methods[60].selector = @selector(endToEndWithId:);
  methods[61].selector = @selector(topToTopWithId:);
  methods[62].selector = @selector(topToBottomWithId:);
  methods[63].selector = @selector(bottomToTopWithId:);
  methods[64].selector = @selector(bottomToBottomWithId:);
  methods[65].selector = @selector(baselineToBaselineWithId:);
  methods[66].selector = @selector(centerHorizontallyWithId:);
  methods[67].selector = @selector(centerVerticallyWithId:);
  methods[68].selector = @selector(circularConstraintWithId:withFloat:withFloat:);
  methods[69].selector = @selector(widthWithADXDimension:);
  methods[70].selector = @selector(heightWithADXDimension:);
  methods[71].selector = @selector(getWidth);
  methods[72].selector = @selector(setWidthWithADXDimension:);
  methods[73].selector = @selector(getHeight);
  methods[74].selector = @selector(setHeightWithADXDimension:);
  methods[75].selector = @selector(marginWithId:);
  methods[76].selector = @selector(marginWithInt:);
  methods[77].selector = @selector(marginGoneWithInt:);
  methods[78].selector = @selector(horizontalBiasWithFloat:);
  methods[79].selector = @selector(verticalBiasWithFloat:);
  methods[80].selector = @selector(biasWithFloat:);
  methods[81].selector = @selector(clear);
  methods[82].selector = @selector(getTargetWithId:);
  methods[83].selector = @selector(applyConnectionWithADXConstraintWidget:withId:withADXState_Constraint:);
  methods[84].selector = @selector(apply);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "key_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mState_", "LADXState;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mTag_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFacade_", "LADXFacade;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalChainStyle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalChainStyle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalBias_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalBias_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginRight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginStart_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMarginEnd_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMarginTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginBottom_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginLeftGone_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginRightGone_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginStartGone_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginEndGone_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginTopGone_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMarginBottomGone_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPivotX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPivotY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRotationX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRotationY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRotationZ_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTranslationX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTranslationY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTranslationZ_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAlpha_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScaleX_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScaleY_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVisibility_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLeftToLeft_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLeftToRight_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRightToLeft_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRightToRight_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mStartToStart_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mStartToEnd_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mEndToStart_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mEndToEnd_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTopToTop_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTopToBottom_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBottomToTop_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBottomToBottom_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBaselineToBaseline_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCircularConstraint_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCircularAngle_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCircularDistance_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLast_", "LADXState_Constraint;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalDimension_", "LADXDimension;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalDimension_", "LADXDimension;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConstraintWidget_", "LADXConstraintWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCustomColors_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 63, -1 },
    { "mCustomFloats_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 64, -1 },
  };
  static const void *ptrTable[] = { "setKey", "LNSObject;", "setTag", "LNSString;", "setView", "setFacade", "LADXFacade;", "setConstraintWidget", "LADXConstraintWidget;", "LADXConstraintReference_IncorrectConstraintException;", "get", "LADXState;", "setHorizontalChainStyle", "I", "setVerticalChainStyle", "getVerticalChainStyle", "pivotX", "F", "pivotY", "rotationX", "rotationY", "rotationZ", "translationX", "translationY", "translationZ", "scaleX", "scaleY", "alpha", "visibility", "addCustomColor", "LNSString;I", "addCustomFloat", "LNSString;F", "leftToLeft", "leftToRight", "rightToLeft", "rightToRight", "startToStart", "startToEnd", "endToStart", "endToEnd", "topToTop", "topToBottom", "bottomToTop", "bottomToBottom", "baselineToBaseline", "centerHorizontally", "centerVertically", "circularConstraint", "LNSObject;FF", "width", "LADXDimension;", "height", "setWidth", "setHeight", "margin", "marginGone", "horizontalBias", "verticalBias", "bias", "getTarget", "applyConnection", "LADXConstraintWidget;LNSObject;LADXState_Constraint;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Float;>;", "LADXConstraintReference_ConstraintReferenceFactory;LADXConstraintReference_IncorrectConstraintException;" };
  static const J2ObjcClassInfo _ADXConstraintReference = { "ConstraintReference", "androidx.constraintlayout.core.state", ptrTable, methods, fields, 7, 0x1, 85, 55, -1, 65, -1, -1, -1 };
  return &_ADXConstraintReference;
}

@end

id ADXConstraintReference_getWithId_(ADXConstraintReference *self, id reference) {
  if (reference == nil) {
    return nil;
  }
  if (!([reference isKindOfClass:[ADXConstraintReference class]])) {
    return [((ADXState *) nil_chk(self->mState_)) referenceWithId:reference];
  }
  return reference;
}

void ADXConstraintReference_initWithADXState_(ADXConstraintReference *self, ADXState *state) {
  NSObject_init(self);
  JreStrongAssign(&self->mTag_, nil);
  JreStrongAssign(&self->mFacade_, nil);
  self->mHorizontalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  self->mVerticalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  self->mHorizontalBias_ = 0.5f;
  self->mVerticalBias_ = 0.5f;
  self->mMarginLeft_ = 0;
  self->mMarginRight_ = 0;
  self->mMarginStart_ = 0;
  self->mMarginEnd_ = 0;
  self->mMarginTop_ = 0;
  self->mMarginBottom_ = 0;
  self->mMarginLeftGone_ = 0;
  self->mMarginRightGone_ = 0;
  self->mMarginStartGone_ = 0;
  self->mMarginEndGone_ = 0;
  self->mMarginTopGone_ = 0;
  self->mMarginBottomGone_ = 0;
  self->mPivotX_ = JavaLangFloat_NaN;
  self->mPivotY_ = JavaLangFloat_NaN;
  self->mRotationX_ = JavaLangFloat_NaN;
  self->mRotationY_ = JavaLangFloat_NaN;
  self->mRotationZ_ = JavaLangFloat_NaN;
  self->mTranslationX_ = JavaLangFloat_NaN;
  self->mTranslationY_ = JavaLangFloat_NaN;
  self->mTranslationZ_ = JavaLangFloat_NaN;
  self->mAlpha_ = JavaLangFloat_NaN;
  self->mScaleX_ = JavaLangFloat_NaN;
  self->mScaleY_ = JavaLangFloat_NaN;
  self->mVisibility_ = ADXConstraintWidget_VISIBLE;
  JreStrongAssign(&self->mLeftToLeft_, nil);
  JreStrongAssign(&self->mLeftToRight_, nil);
  JreStrongAssign(&self->mRightToLeft_, nil);
  JreStrongAssign(&self->mRightToRight_, nil);
  JreStrongAssign(&self->mStartToStart_, nil);
  JreStrongAssign(&self->mStartToEnd_, nil);
  JreStrongAssign(&self->mEndToStart_, nil);
  JreStrongAssign(&self->mEndToEnd_, nil);
  JreStrongAssign(&self->mTopToTop_, nil);
  JreStrongAssign(&self->mTopToBottom_, nil);
  JreStrongAssign(&self->mBottomToTop_, nil);
  JreStrongAssign(&self->mBottomToBottom_, nil);
  JreStrongAssign(&self->mBaselineToBaseline_, nil);
  JreStrongAssign(&self->mCircularConstraint_, nil);
  JreStrongAssign(&self->mLast_, nil);
  JreStrongAssign(&self->mHorizontalDimension_, ADXDimension_FixedWithId_(JreLoadStatic(ADXDimension, WRAP_DIMENSION)));
  JreStrongAssign(&self->mVerticalDimension_, ADXDimension_FixedWithId_(JreLoadStatic(ADXDimension, WRAP_DIMENSION)));
  JreStrongAssignAndConsume(&self->mCustomColors_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->mCustomFloats_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->mState_, state);
}

ADXConstraintReference *new_ADXConstraintReference_initWithADXState_(ADXState *state) {
  J2OBJC_NEW_IMPL(ADXConstraintReference, initWithADXState_, state)
}

ADXConstraintReference *create_ADXConstraintReference_initWithADXState_(ADXState *state) {
  J2OBJC_CREATE_IMPL(ADXConstraintReference, initWithADXState_, state)
}

void ADXConstraintReference_dereference(ADXConstraintReference *self) {
  JreStrongAssign(&self->mLeftToLeft_, ADXConstraintReference_getWithId_(self, self->mLeftToLeft_));
  JreStrongAssign(&self->mLeftToRight_, ADXConstraintReference_getWithId_(self, self->mLeftToRight_));
  JreStrongAssign(&self->mRightToLeft_, ADXConstraintReference_getWithId_(self, self->mRightToLeft_));
  JreStrongAssign(&self->mRightToRight_, ADXConstraintReference_getWithId_(self, self->mRightToRight_));
  JreStrongAssign(&self->mStartToStart_, ADXConstraintReference_getWithId_(self, self->mStartToStart_));
  JreStrongAssign(&self->mStartToEnd_, ADXConstraintReference_getWithId_(self, self->mStartToEnd_));
  JreStrongAssign(&self->mEndToStart_, ADXConstraintReference_getWithId_(self, self->mEndToStart_));
  JreStrongAssign(&self->mEndToEnd_, ADXConstraintReference_getWithId_(self, self->mEndToEnd_));
  JreStrongAssign(&self->mTopToTop_, ADXConstraintReference_getWithId_(self, self->mTopToTop_));
  JreStrongAssign(&self->mTopToBottom_, ADXConstraintReference_getWithId_(self, self->mTopToBottom_));
  JreStrongAssign(&self->mBottomToTop_, ADXConstraintReference_getWithId_(self, self->mBottomToTop_));
  JreStrongAssign(&self->mBottomToBottom_, ADXConstraintReference_getWithId_(self, self->mBottomToBottom_));
  JreStrongAssign(&self->mBaselineToBaseline_, ADXConstraintReference_getWithId_(self, self->mBaselineToBaseline_));
}

ADXConstraintWidget *ADXConstraintReference_getTargetWithId_(ADXConstraintReference *self, id target) {
  if ([ADXReference_class_() isInstance:target]) {
    id<ADXReference> referenceTarget = (id<ADXReference>) cast_check(target, ADXReference_class_());
    return [((id<ADXReference>) nil_chk(referenceTarget)) getConstraintWidget];
  }
  return nil;
}

void ADXConstraintReference_applyConnectionWithADXConstraintWidget_withId_withADXState_Constraint_(ADXConstraintReference *self, ADXConstraintWidget *widget, id opaqueTarget, ADXState_Constraint *type) {
  ADXConstraintWidget *target = ADXConstraintReference_getTargetWithId_(self, opaqueTarget);
  if (target == nil) {
    return;
  }
  switch ([type ordinal]) {
    default:
    break;
  }
  switch ([type ordinal]) {
    case ADXState_Constraint_Enum_START_TO_START:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)] withInt:self->mMarginStart_ withInt:self->mMarginStartGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_START_TO_END:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)] withInt:self->mMarginStart_ withInt:self->mMarginStartGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_END_TO_START:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)] withInt:self->mMarginEnd_ withInt:self->mMarginEndGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_END_TO_END:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)] withInt:self->mMarginEnd_ withInt:self->mMarginEndGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_LEFT_TO_LEFT:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)] withInt:self->mMarginLeft_ withInt:self->mMarginLeftGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_LEFT_TO_RIGHT:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)] withInt:self->mMarginLeft_ withInt:self->mMarginLeftGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_RIGHT_TO_LEFT:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)] withInt:self->mMarginRight_ withInt:self->mMarginRightGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_RIGHT_TO_RIGHT:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)] withInt:self->mMarginRight_ withInt:self->mMarginRightGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_TOP_TO_TOP:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)] withInt:self->mMarginTop_ withInt:self->mMarginTopGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_TOP_TO_BOTTOM:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)] withInt:self->mMarginTop_ withInt:self->mMarginTopGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_BOTTOM_TO_TOP:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)] withInt:self->mMarginBottom_ withInt:self->mMarginBottomGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_BOTTOM_TO_BOTTOM:
    {
      [((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)])) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)] withInt:self->mMarginBottom_ withInt:self->mMarginBottomGone_ withBoolean:false];
    }
    break;
    case ADXState_Constraint_Enum_BASELINE_TO_BASELINE:
    {
      [((ADXConstraintWidget *) nil_chk(widget)) immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BASELINE) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BASELINE) withInt:0 withInt:0];
    }
    break;
    case ADXState_Constraint_Enum_CIRCULAR_CONSTRAINT:
    {
      [((ADXConstraintWidget *) nil_chk(widget)) connectCircularConstraintWithADXConstraintWidget:target withFloat:self->mCircularAngle_ withInt:JreFpToInt(self->mCircularDistance_)];
    }
    break;
    default:
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintReference)

@implementation ADXConstraintReference_ConstraintReferenceFactory

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXConstraintReference;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(createWithADXState:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "create", "LADXState;", "LADXConstraintReference;" };
  static const J2ObjcClassInfo _ADXConstraintReference_ConstraintReferenceFactory = { "ConstraintReferenceFactory", "androidx.constraintlayout.core.state", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXConstraintReference_ConstraintReferenceFactory;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXConstraintReference_ConstraintReferenceFactory)

@implementation ADXConstraintReference_IncorrectConstraintException

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)errors {
  ADXConstraintReference_IncorrectConstraintException_initWithJavaUtilArrayList_(self, errors);
  return self;
}

- (JavaUtilArrayList *)getErrors {
  return mErrors_;
}

- (NSString *)description {
  return JreStrcat("$$", @"IncorrectConstraintException: ", [((JavaUtilArrayList *) nil_chk(mErrors_)) description]);
}

- (void)dealloc {
  RELEASE_(mErrors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilArrayList:);
  methods[1].selector = @selector(getErrors);
  methods[2].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mErrors_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Ljava/lang/String;>;)V", "()Ljava/util/ArrayList<Ljava/lang/String;>;", "toString", "Ljava/util/ArrayList<Ljava/lang/String;>;", "LADXConstraintReference;" };
  static const J2ObjcClassInfo _ADXConstraintReference_IncorrectConstraintException = { "IncorrectConstraintException", "androidx.constraintlayout.core.state", ptrTable, methods, fields, 7, 0x8, 3, 1, 5, -1, -1, -1, -1 };
  return &_ADXConstraintReference_IncorrectConstraintException;
}

@end

void ADXConstraintReference_IncorrectConstraintException_initWithJavaUtilArrayList_(ADXConstraintReference_IncorrectConstraintException *self, JavaUtilArrayList *errors) {
  JavaLangException_init(self);
  JreStrongAssign(&self->mErrors_, errors);
}

ADXConstraintReference_IncorrectConstraintException *new_ADXConstraintReference_IncorrectConstraintException_initWithJavaUtilArrayList_(JavaUtilArrayList *errors) {
  J2OBJC_NEW_IMPL(ADXConstraintReference_IncorrectConstraintException, initWithJavaUtilArrayList_, errors)
}

ADXConstraintReference_IncorrectConstraintException *create_ADXConstraintReference_IncorrectConstraintException_initWithJavaUtilArrayList_(JavaUtilArrayList *errors) {
  J2OBJC_CREATE_IMPL(ADXConstraintReference_IncorrectConstraintException, initWithJavaUtilArrayList_, errors)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintReference_IncorrectConstraintException)
