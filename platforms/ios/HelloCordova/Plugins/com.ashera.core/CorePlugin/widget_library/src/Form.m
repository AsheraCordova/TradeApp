//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\validations\Form.java
//

#include "Field.h"
#include "FieldValidationException.h"
#include "Form.h"
#include "FormElement.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@class JavaUtilHashMap;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilList;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASForm () {
 @public
  id<JavaUtilList> mFields_;
  jboolean requireOrdering_;
  JavaUtilHashMap *widgetMap_;
}

@end

J2OBJC_FIELD_SETTER(ASForm, mFields_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASForm, widgetMap_, JavaUtilHashMap *)

@interface ASForm_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(ASField *)lhs
               withId:(ASField *)rhs;

@end

J2OBJC_EMPTY_STATIC_INIT(ASForm_1)

__attribute__((unused)) static void ASForm_1_init(ASForm_1 *self);

__attribute__((unused)) static ASForm_1 *new_ASForm_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASForm_1 *create_ASForm_1_init(void);

@implementation ASForm

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASForm_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addFieldWithASField:(ASField *)field {
  if (!requireOrdering_ && [((ASField *) nil_chk(field)) getOrder] != ASField_DEFAULT_ORDER) {
    requireOrdering_ = true;
  }
  [((JavaUtilHashMap *) nil_chk(widgetMap_)) putWithId:[((id<ASFormElement>) nil_chk([((ASField *) nil_chk(field)) getViewWrapper])) getId] withId:[field getViewWrapper]];
  [((id<JavaUtilList>) nil_chk(mFields_)) addWithId:field];
}

- (jboolean)isValid {
  if (requireOrdering_) {
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(mFields_, create_ASForm_1_init());
  }
  jboolean result = true;
  jboolean focus = false;
  [self resetErrors];
  for (ASField * __strong field in nil_chk(mFields_)) {
    @try {
      result &= [((ASField *) nil_chk(field)) isValid];
    }
    @catch (ASFieldValidationException *e) {
      result = false;
      [self showErrorMessageWithASFieldValidationException:e];
      if (!focus) {
        id<ASFormElement> viewWrapper = [e getViewWrapper];
        [((id<ASFormElement>) nil_chk(viewWrapper)) focus];
        focus = true;
      }
    }
  }
  return result;
}

- (void)resetErrors {
  for (ASField * __strong field in nil_chk(mFields_)) {
    [((id<ASFormElement>) nil_chk([((ASField *) nil_chk(field)) getViewWrapper])) resetError];
  }
}

- (id<JavaUtilMap>)getFormElementValues {
  JavaUtilHashMap *formElementsMap = create_JavaUtilHashMap_init();
  for (ASField * __strong field in nil_chk(mFields_)) {
    id<ASFormElement> viewWrapper = JreRetainedLocalValue([((ASField *) nil_chk(field)) getViewWrapper]);
    if ([((id<ASFormElement>) nil_chk(viewWrapper)) getId] != nil) {
      [formElementsMap putWithId:[viewWrapper getId] withId:[viewWrapper getTextEntered]];
    }
  }
  return formElementsMap;
}

- (void)showErrorMessageWithASFieldValidationException:(ASFieldValidationException *)e {
  [((id<ASFormElement>) nil_chk([((ASFieldValidationException *) nil_chk(e)) getViewWrapper])) showErrorWithNSString:[e getMessage]];
}

- (void)dealloc {
  RELEASE_(mFields_);
  RELEASE_(widgetMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addFieldWithASField:);
  methods[2].selector = @selector(isValid);
  methods[3].selector = @selector(resetErrors);
  methods[4].selector = @selector(getFormElementValues);
  methods[5].selector = @selector(showErrorMessageWithASFieldValidationException:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mFields_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 5, -1 },
    { "requireOrdering_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widgetMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "addField", "LASField;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "showErrorMessage", "LASFieldValidationException;", "Ljava/util/List<Lcom/ashera/validations/Field;>;", "Ljava/util/HashMap<Ljava/lang/String;Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASForm = { "Form", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_ASForm;
}

@end

void ASForm_init(ASForm *self) {
  NSObject_init(self);
  self->requireOrdering_ = false;
  JreStrongAssignAndConsume(&self->widgetMap_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->mFields_, new_JavaUtilArrayList_init());
}

ASForm *new_ASForm_init() {
  J2OBJC_NEW_IMPL(ASForm, init)
}

ASForm *create_ASForm_init() {
  J2OBJC_CREATE_IMPL(ASForm, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASForm)

@implementation ASForm_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASForm_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(ASField *)lhs
               withId:(ASField *)rhs {
  return [create_JavaLangInteger_initWithInt_([((ASField *) nil_chk(lhs)) getOrder]) compareToWithId:JavaLangInteger_valueOfWithInt_([((ASField *) nil_chk(rhs)) getOrder])];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LASField;LASField;", "LASForm;", "isValid", "Ljava/lang/Object;Ljava/util/Comparator<Lcom/ashera/validations/Field;>;" };
  static const J2ObjcClassInfo _ASForm_1 = { "", "com.ashera.validations", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, 4, -1 };
  return &_ASForm_1;
}

@end

void ASForm_1_init(ASForm_1 *self) {
  NSObject_init(self);
}

ASForm_1 *new_ASForm_1_init() {
  J2OBJC_NEW_IMPL(ASForm_1, init)
}

ASForm_1 *create_ASForm_1_init() {
  J2OBJC_CREATE_IMPL(ASForm_1, init)
}
