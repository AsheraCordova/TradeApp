//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\jaxp\SAXParserImpl.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "SAX1ParserAdapter.h"
#include "SAXParserImpl.h"
#include "TagSoupParser.h"
#include "java/lang/Boolean.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "javax/xml/parsers/SAXParser.h"
#include "org/xml/sax/Parser.h"
#include "org/xml/sax/SAXException.h"
#include "org/xml/sax/XMLReader.h"


@implementation TSSAXParserImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TSSAXParserImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (TSSAXParserImpl *)newInstanceWithJavaUtilMap:(id<JavaUtilMap>)features {
  return TSSAXParserImpl_newInstanceWithJavaUtilMap_(features);
}

- (id<OrgXmlSaxParser>)getParser {
  return create_TSSAX1ParserAdapter_initWithOrgXmlSaxXMLReader_(parser_);
}

- (id<OrgXmlSaxXMLReader>)getXMLReader {
  return parser_;
}

- (jboolean)isNamespaceAware {
  @try {
    return [((TSTagSoupParser *) nil_chk(parser_)) getFeatureWithNSString:TSTagSoupParser_namespacesFeature];
  }
  @catch (OrgXmlSaxSAXException *sex) {
    @throw create_JavaLangRuntimeException_initWithNSString_([sex getMessage]);
  }
}

- (jboolean)isValidating {
  @try {
    return [((TSTagSoupParser *) nil_chk(parser_)) getFeatureWithNSString:TSTagSoupParser_validationFeature];
  }
  @catch (OrgXmlSaxSAXException *sex) {
    @throw create_JavaLangRuntimeException_initWithNSString_([sex getMessage]);
  }
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  [((TSTagSoupParser *) nil_chk(parser_)) setPropertyWithNSString:name withId:value];
}

- (id)getPropertyWithNSString:(NSString *)name {
  return [((TSTagSoupParser *) nil_chk(parser_)) getPropertyWithNSString:name];
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value {
  [((TSTagSoupParser *) nil_chk(parser_)) setFeatureWithNSString:name withBoolean:value];
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  return [((TSTagSoupParser *) nil_chk(parser_)) getFeatureWithNSString:name];
}

- (void)dealloc {
  RELEASE_(parser_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LTSSAXParserImpl;", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "LOrgXmlSaxParser;", 0x1, -1, -1, 2, -1, -1, -1 },
    { NULL, "LOrgXmlSaxXMLReader;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, 5, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 7, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstanceWithJavaUtilMap:);
  methods[2].selector = @selector(getParser);
  methods[3].selector = @selector(getXMLReader);
  methods[4].selector = @selector(isNamespaceAware);
  methods[5].selector = @selector(isValidating);
  methods[6].selector = @selector(setPropertyWithNSString:withId:);
  methods[7].selector = @selector(getPropertyWithNSString:);
  methods[8].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[9].selector = @selector(getFeatureWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parser_", "LTSTagSoupParser;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "LJavaUtilMap;", "LOrgXmlSaxSAXException;", "setProperty", "LNSString;LNSObject;", "LOrgXmlSaxSAXNotRecognizedException;LOrgXmlSaxSAXNotSupportedException;", "getProperty", "LNSString;", "setFeature", "LNSString;Z", "getFeature" };
  static const J2ObjcClassInfo _TSSAXParserImpl = { "SAXParserImpl", "repackaged.org.ccil.cowan.tagsoup.jaxp", ptrTable, methods, fields, 7, 0x1, 10, 1, -1, -1, -1, -1, -1 };
  return &_TSSAXParserImpl;
}

@end

void TSSAXParserImpl_init(TSSAXParserImpl *self) {
  JavaxXmlParsersSAXParser_init(self);
  JreStrongAssignAndConsume(&self->parser_, new_TSTagSoupParser_init());
}

TSSAXParserImpl *new_TSSAXParserImpl_init() {
  J2OBJC_NEW_IMPL(TSSAXParserImpl, init)
}

TSSAXParserImpl *create_TSSAXParserImpl_init() {
  J2OBJC_CREATE_IMPL(TSSAXParserImpl, init)
}

TSSAXParserImpl *TSSAXParserImpl_newInstanceWithJavaUtilMap_(id<JavaUtilMap> features) {
  TSSAXParserImpl_initialize();
  TSSAXParserImpl *parser = create_TSSAXParserImpl_init();
  if (features != nil) {
    id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk([features entrySet])) iterator]);
    while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
      id<JavaUtilMap_Entry> entry_ = (id<JavaUtilMap_Entry>) cast_check([it next], JavaUtilMap_Entry_class_());
      [parser setFeatureWithNSString:(NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey], [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk([entry_ getValue], [JavaLangBoolean class])))) booleanValue]];
    }
  }
  return parser;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TSSAXParserImpl)
