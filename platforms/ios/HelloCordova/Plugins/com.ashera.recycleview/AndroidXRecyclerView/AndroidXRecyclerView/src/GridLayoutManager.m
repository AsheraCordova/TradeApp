//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\GridLayoutManager.java
//

#include "Context.h"
#include "GridLayoutManager.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearLayoutManager.h"
#include "Log.h"
#include "OrientationHelper.h"
#include "Rect.h"
#include "RecyclerView.h"
#include "SparseIntArray.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Arrays.h"


@interface ADXGridLayoutManager () {
 @public
  jboolean mUsingSpansToEstimateScrollBarDimensions_;
}

- (void)clearPreLayoutSpanMappingCache;

- (void)cachePreLayoutSpanMapping;

- (void)updateMeasurements;

/*!
 @param totalSpace Total available space after padding is removed
 */
- (void)calculateItemBordersWithInt:(jint)totalSpace;

- (void)ensureViewSet;

- (void)ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                          withADXLinearLayoutManager_AnchorInfo:(ADXLinearLayoutManager_AnchorInfo *)anchorInfo
                                                        withInt:(jint)itemDirection;

- (jint)getSpanGroupIndexWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                            withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                              withInt:(jint)viewPosition;

- (jint)getSpanIndexWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                       withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                         withInt:(jint)pos;

- (jint)getSpanSizeWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                        withInt:(jint)pos;

/*!
 @brief Measures a child with currently known information.This is not necessarily the child's final
  measurement.
 (see fillChunk for details).
 @param view The child view to be measured
 @param otherDirParentSpecMode The RV measure spec that should be used in the secondary                                orientation
 @param alreadyMeasured True if we've already measured this view once
 */
- (void)measureChildWithADView:(ADView *)view
                       withInt:(jint)otherDirParentSpecMode
                   withBoolean:(jboolean)alreadyMeasured;

/*!
 @brief This is called after laying out a row (if vertical) or a column (if horizontal) when the
  RecyclerView does not have exact measurement specs.
 <p>
  Here we try to assign a best guess width or height and re-do the layout to update other
  views that wanted to MATCH_PARENT in the non-scroll orientation.
 @param maxSizeInOther The maximum size per span ratio from the measurement of the children.
 @param currentOtherDirSize The size before this layout chunk. There is no reason to go below.
 */
- (void)guessMeasurementWithFloat:(jfloat)maxSizeInOther
                          withInt:(jint)currentOtherDirSize;

- (void)measureChildWithDecorationsAndMarginWithADView:(ADView *)child
                                               withInt:(jint)widthSpec
                                               withInt:(jint)heightSpec
                                           withBoolean:(jboolean)alreadyMeasured;

- (void)assignSpansWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                        withInt:(jint)count
                                    withBoolean:(jboolean)layingOutInPrimaryDirection;

- (jint)computeScrollRangeWithSpanInfoWithADXRecyclerView_State:(ADXRecyclerView_State *)state;

- (jint)computeScrollOffsetWithSpanInfoWithADXRecyclerView_State:(ADXRecyclerView_State *)state;

@end

inline jboolean ADXGridLayoutManager_get_DEBUG(void);
#define ADXGridLayoutManager_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayoutManager, DEBUG, jboolean)

inline NSString *ADXGridLayoutManager_get_TAG(void);
static NSString *ADXGridLayoutManager_TAG = @"GridLayoutManager";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXGridLayoutManager, TAG, NSString *)

__attribute__((unused)) static void ADXGridLayoutManager_clearPreLayoutSpanMappingCache(ADXGridLayoutManager *self);

__attribute__((unused)) static void ADXGridLayoutManager_cachePreLayoutSpanMapping(ADXGridLayoutManager *self);

__attribute__((unused)) static void ADXGridLayoutManager_updateMeasurements(ADXGridLayoutManager *self);

__attribute__((unused)) static void ADXGridLayoutManager_calculateItemBordersWithInt_(ADXGridLayoutManager *self, jint totalSpace);

__attribute__((unused)) static void ADXGridLayoutManager_ensureViewSet(ADXGridLayoutManager *self);

__attribute__((unused)) static void ADXGridLayoutManager_ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler_withADXRecyclerView_State_withADXLinearLayoutManager_AnchorInfo_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, ADXLinearLayoutManager_AnchorInfo *anchorInfo, jint itemDirection);

__attribute__((unused)) static jint ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint viewPosition);

__attribute__((unused)) static jint ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint pos);

__attribute__((unused)) static jint ADXGridLayoutManager_getSpanSizeWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint pos);

__attribute__((unused)) static void ADXGridLayoutManager_measureChildWithADView_withInt_withBoolean_(ADXGridLayoutManager *self, ADView *view, jint otherDirParentSpecMode, jboolean alreadyMeasured);

__attribute__((unused)) static void ADXGridLayoutManager_guessMeasurementWithFloat_withInt_(ADXGridLayoutManager *self, jfloat maxSizeInOther, jint currentOtherDirSize);

__attribute__((unused)) static void ADXGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(ADXGridLayoutManager *self, ADView *child, jint widthSpec, jint heightSpec, jboolean alreadyMeasured);

__attribute__((unused)) static void ADXGridLayoutManager_assignSpansWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_withBoolean_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint count, jboolean layingOutInPrimaryDirection);

__attribute__((unused)) static jint ADXGridLayoutManager_computeScrollRangeWithSpanInfoWithADXRecyclerView_State_(ADXGridLayoutManager *self, ADXRecyclerView_State *state);

__attribute__((unused)) static jint ADXGridLayoutManager_computeScrollOffsetWithSpanInfoWithADXRecyclerView_State_(ADXGridLayoutManager *self, ADXRecyclerView_State *state);

@interface ADXGridLayoutManager_SpanSizeLookup () {
 @public
  jboolean mCacheSpanIndices_;
  jboolean mCacheSpanGroupIndices_;
}

@end

@implementation ADXGridLayoutManager

- (instancetype)initWithADContext:(ADContext *)context
                          withInt:(jint)spanCount {
  ADXGridLayoutManager_initWithADContext_withInt_(self, context, spanCount);
  return self;
}

- (instancetype)initWithADContext:(ADContext *)context
                          withInt:(jint)spanCount
                          withInt:(jint)orientation
                      withBoolean:(jboolean)reverseLayout {
  ADXGridLayoutManager_initWithADContext_withInt_withInt_withBoolean_(self, context, spanCount, orientation, reverseLayout);
  return self;
}

- (void)setStackFromEndWithBoolean:(jboolean)stackFromEnd {
  if (stackFromEnd) {
    @throw create_JavaLangUnsupportedOperationException_initWithNSString_(@"GridLayoutManager does not support stack from end. Consider using reverse layout");
  }
  [super setStackFromEndWithBoolean:false];
}

- (jint)getRowCountForAccessibilityWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                      withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if (mOrientation_ == ADXLinearLayoutManager_HORIZONTAL) {
    return mSpanCount_;
  }
  if ([((ADXRecyclerView_State *) nil_chk(state)) getItemCount] < 1) {
    return 0;
  }
  return ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, [state getItemCount] - 1) + 1;
}

- (jint)getColumnCountForAccessibilityWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                         withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if (mOrientation_ == ADXLinearLayoutManager_VERTICAL) {
    return mSpanCount_;
  }
  if ([((ADXRecyclerView_State *) nil_chk(state)) getItemCount] < 1) {
    return 0;
  }
  return ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, [state getItemCount] - 1) + 1;
}

- (void)onLayoutChildrenWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                           withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if ([((ADXRecyclerView_State *) nil_chk(state)) isPreLayout]) {
    ADXGridLayoutManager_cachePreLayoutSpanMapping(self);
  }
  [super onLayoutChildrenWithADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
  ADXGridLayoutManager_clearPreLayoutSpanMappingCache(self);
}

- (void)onLayoutCompletedWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  [super onLayoutCompletedWithADXRecyclerView_State:state];
  mPendingSpanCountChange_ = false;
}

- (void)clearPreLayoutSpanMappingCache {
  ADXGridLayoutManager_clearPreLayoutSpanMappingCache(self);
}

- (void)cachePreLayoutSpanMapping {
  ADXGridLayoutManager_cachePreLayoutSpanMapping(self);
}

- (void)onItemsAddedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                withInt:(jint)positionStart
                                withInt:(jint)itemCount {
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanIndexCache];
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanGroupIndexCache];
}

- (void)onItemsChangedWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanIndexCache];
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanGroupIndexCache];
}

- (void)onItemsRemovedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount {
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanIndexCache];
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanGroupIndexCache];
}

- (void)onItemsUpdatedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount
                                   withId:(id)payload {
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanIndexCache];
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanGroupIndexCache];
}

- (void)onItemsMovedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                withInt:(jint)from
                                withInt:(jint)to
                                withInt:(jint)itemCount {
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanIndexCache];
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanGroupIndexCache];
}

- (ADXRecyclerView_LayoutParams *)generateDefaultLayoutParams {
  if (mOrientation_ == ADXLinearLayoutManager_HORIZONTAL) {
    return create_ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_MATCH_PARENT);
  }
  else {
    return create_ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  }
}

- (jboolean)checkLayoutParamsWithADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)lp {
  return [lp isKindOfClass:[ADXGridLayoutManager_LayoutParams class]];
}

- (void)setSpanSizeLookupWithADXGridLayoutManager_SpanSizeLookup:(ADXGridLayoutManager_SpanSizeLookup *)spanSizeLookup {
  JreStrongAssign(&mSpanSizeLookup_, spanSizeLookup);
}

- (ADXGridLayoutManager_SpanSizeLookup *)getSpanSizeLookup {
  return mSpanSizeLookup_;
}

- (void)updateMeasurements {
  ADXGridLayoutManager_updateMeasurements(self);
}

- (void)setMeasuredDimensionWithADRect:(ADRect *)childrenBounds
                               withInt:(jint)wSpec
                               withInt:(jint)hSpec {
  if (mCachedBorders_ == nil) {
    [super setMeasuredDimensionWithADRect:childrenBounds withInt:wSpec withInt:hSpec];
  }
  jint width;
  jint height;
  jint horizontalPadding = [self getPaddingLeft] + [self getPaddingRight];
  jint verticalPadding = [self getPaddingTop] + [self getPaddingBottom];
  if (mOrientation_ == ADXLinearLayoutManager_VERTICAL) {
    jint usedHeight = [((ADRect *) nil_chk(childrenBounds)) height] + verticalPadding;
    height = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(hSpec, usedHeight, [self getMinimumHeight]);
    width = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(wSpec, IOSIntArray_Get(mCachedBorders_, ((IOSIntArray *) nil_chk(mCachedBorders_))->size_ - 1) + horizontalPadding, [self getMinimumWidth]);
  }
  else {
    jint usedWidth = [((ADRect *) nil_chk(childrenBounds)) width] + horizontalPadding;
    width = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(wSpec, usedWidth, [self getMinimumWidth]);
    height = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(hSpec, IOSIntArray_Get(mCachedBorders_, ((IOSIntArray *) nil_chk(mCachedBorders_))->size_ - 1) + verticalPadding, [self getMinimumHeight]);
  }
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (void)calculateItemBordersWithInt:(jint)totalSpace {
  ADXGridLayoutManager_calculateItemBordersWithInt_(self, totalSpace);
}

+ (IOSIntArray *)calculateItemBordersWithIntArray:(IOSIntArray *)cachedBorders
                                          withInt:(jint)spanCount
                                          withInt:(jint)totalSpace {
  return ADXGridLayoutManager_calculateItemBordersWithIntArray_withInt_withInt_(cachedBorders, spanCount, totalSpace);
}

- (jint)getSpaceForSpanRangeWithInt:(jint)startSpan
                            withInt:(jint)spanSize {
  if (mOrientation_ == ADXLinearLayoutManager_VERTICAL && [self isLayoutRTL]) {
    return IOSIntArray_Get(nil_chk(mCachedBorders_), mSpanCount_ - startSpan) - IOSIntArray_Get(mCachedBorders_, mSpanCount_ - startSpan - spanSize);
  }
  else {
    return IOSIntArray_Get(nil_chk(mCachedBorders_), startSpan + spanSize) - IOSIntArray_Get(mCachedBorders_, startSpan);
  }
}

- (void)onAnchorReadyWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                        withADXRecyclerView_State:(ADXRecyclerView_State *)state
            withADXLinearLayoutManager_AnchorInfo:(ADXLinearLayoutManager_AnchorInfo *)anchorInfo
                                          withInt:(jint)itemDirection {
  [super onAnchorReadyWithADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state withADXLinearLayoutManager_AnchorInfo:anchorInfo withInt:itemDirection];
  ADXGridLayoutManager_updateMeasurements(self);
  if ([((ADXRecyclerView_State *) nil_chk(state)) getItemCount] > 0 && ![state isPreLayout]) {
    ADXGridLayoutManager_ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler_withADXRecyclerView_State_withADXLinearLayoutManager_AnchorInfo_withInt_(self, recycler, state, anchorInfo, itemDirection);
  }
  ADXGridLayoutManager_ensureViewSet(self);
}

- (void)ensureViewSet {
  ADXGridLayoutManager_ensureViewSet(self);
}

- (jint)scrollHorizontallyByWithInt:(jint)dx
       withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
          withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADXGridLayoutManager_updateMeasurements(self);
  ADXGridLayoutManager_ensureViewSet(self);
  return [super scrollHorizontallyByWithInt:dx withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
}

- (jint)scrollVerticallyByWithInt:(jint)dy
     withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
        withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADXGridLayoutManager_updateMeasurements(self);
  ADXGridLayoutManager_ensureViewSet(self);
  return [super scrollVerticallyByWithInt:dy withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
}

- (void)ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                          withADXLinearLayoutManager_AnchorInfo:(ADXLinearLayoutManager_AnchorInfo *)anchorInfo
                                                        withInt:(jint)itemDirection {
  ADXGridLayoutManager_ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler_withADXRecyclerView_State_withADXLinearLayoutManager_AnchorInfo_withInt_(self, recycler, state, anchorInfo, itemDirection);
}

- (ADView *)findReferenceChildWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                 withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                               withBoolean:(jboolean)layoutFromEnd
                                               withBoolean:(jboolean)traverseChildrenInReverseOrder {
  jint start = 0;
  jint end = [self getChildCount];
  jint diff = 1;
  if (traverseChildrenInReverseOrder) {
    start = [self getChildCount] - 1;
    end = -1;
    diff = -1;
  }
  jint itemCount = [((ADXRecyclerView_State *) nil_chk(state)) getItemCount];
  [self ensureLayoutState];
  ADView *invalidMatch = nil;
  ADView *outOfBoundsMatch = nil;
  jint boundsStart = [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getStartAfterPadding];
  jint boundsEnd = [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getEndAfterPadding];
  for (jint i = start; i != end; i += diff) {
    ADView *view = [self getChildAtWithInt:i];
    jint position = [self getPositionWithADView:view];
    if (position >= 0 && position < itemCount) {
      jint span = ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, position);
      if (span != 0) {
        continue;
      }
      if ([((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class])))) isItemRemoved]) {
        if (invalidMatch == nil) {
          invalidMatch = view;
        }
      }
      else if ([((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedStartWithADView:view] >= boundsEnd || [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedEndWithADView:view] < boundsStart) {
        if (outOfBoundsMatch == nil) {
          outOfBoundsMatch = view;
        }
      }
      else {
        return view;
      }
    }
  }
  return outOfBoundsMatch != nil ? outOfBoundsMatch : invalidMatch;
}

- (jint)getSpanGroupIndexWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                            withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                              withInt:(jint)viewPosition {
  return ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, viewPosition);
}

- (jint)getSpanIndexWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                       withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                         withInt:(jint)pos {
  return ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, pos);
}

- (jint)getSpanSizeWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                        withInt:(jint)pos {
  return ADXGridLayoutManager_getSpanSizeWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, pos);
}

- (void)collectPrefetchPositionsForLayoutStateWithADXRecyclerView_State:(ADXRecyclerView_State *)state
                                 withADXLinearLayoutManager_LayoutState:(ADXLinearLayoutManager_LayoutState *)layoutState
               withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:(id<ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry>)layoutPrefetchRegistry {
  jint remainingSpan = mSpanCount_;
  jint count = 0;
  while (count < mSpanCount_ && [((ADXLinearLayoutManager_LayoutState *) nil_chk(layoutState)) hasMoreWithADXRecyclerView_State:state] && remainingSpan > 0) {
    jint pos = ((ADXLinearLayoutManager_LayoutState *) nil_chk(layoutState))->mCurrentPosition_;
    [((id<ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry>) nil_chk(layoutPrefetchRegistry)) addPositionWithInt:pos withInt:JavaLangMath_maxWithInt_withInt_(0, layoutState->mScrollingOffset_)];
    jint spanSize = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) getSpanSizeWithInt:pos];
    remainingSpan -= spanSize;
    layoutState->mCurrentPosition_ += layoutState->mItemDirection_;
    count++;
  }
}

- (void)layoutChunkWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
         withADXLinearLayoutManager_LayoutState:(ADXLinearLayoutManager_LayoutState *)layoutState
   withADXLinearLayoutManager_LayoutChunkResult:(ADXLinearLayoutManager_LayoutChunkResult *)result {
  jint otherDirSpecMode = [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getModeInOther];
  jboolean flexibleInOtherDir = otherDirSpecMode != ADView_MeasureSpec_EXACTLY;
  jint currentOtherDirSize = [self getChildCount] > 0 ? IOSIntArray_Get(nil_chk(mCachedBorders_), mSpanCount_) : 0;
  if (flexibleInOtherDir) {
    ADXGridLayoutManager_updateMeasurements(self);
  }
  jboolean layingOutInPrimaryDirection = ((ADXLinearLayoutManager_LayoutState *) nil_chk(layoutState))->mItemDirection_ == ADXLinearLayoutManager_LayoutState_ITEM_DIRECTION_TAIL;
  jint count = 0;
  jint remainingSpan = mSpanCount_;
  if (!layingOutInPrimaryDirection) {
    jint itemSpanIndex = ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, layoutState->mCurrentPosition_);
    jint itemSpanSize = ADXGridLayoutManager_getSpanSizeWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, layoutState->mCurrentPosition_);
    remainingSpan = itemSpanIndex + itemSpanSize;
  }
  while (count < mSpanCount_ && [layoutState hasMoreWithADXRecyclerView_State:state] && remainingSpan > 0) {
    jint pos = layoutState->mCurrentPosition_;
    jint spanSize = ADXGridLayoutManager_getSpanSizeWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, pos);
    if (spanSize > mSpanCount_) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$I$I$", @"Item at position ", pos, @" requires ", spanSize, @" spans but GridLayoutManager has only ", mSpanCount_, @" spans."));
    }
    remainingSpan -= spanSize;
    if (remainingSpan < 0) {
      break;
    }
    ADView *view = JreRetainedLocalValue([layoutState nextWithADXRecyclerView_Recycler:recycler]);
    if (view == nil) {
      break;
    }
    IOSObjectArray_Set(nil_chk(mSet_), count, view);
    count++;
  }
  if (count == 0) {
    ((ADXLinearLayoutManager_LayoutChunkResult *) nil_chk(result))->mFinished_ = true;
    return;
  }
  jint maxSize = 0;
  jfloat maxSizeInOther = 0;
  ADXGridLayoutManager_assignSpansWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_withBoolean_(self, recycler, state, count, layingOutInPrimaryDirection);
  for (jint i = 0; i < count; i++) {
    ADView *view = IOSObjectArray_Get(nil_chk(mSet_), i);
    if (layoutState->mScrapList_ == nil) {
      if (layingOutInPrimaryDirection) {
        [self addViewWithADView:view];
      }
      else {
        [self addViewWithADView:view withInt:0];
      }
    }
    else {
      if (layingOutInPrimaryDirection) {
        [self addDisappearingViewWithADView:view];
      }
      else {
        [self addDisappearingViewWithADView:view withInt:0];
      }
    }
    [self calculateItemDecorationsForChildWithADView:view withADRect:mDecorInsets_];
    ADXGridLayoutManager_measureChildWithADView_withInt_withBoolean_(self, view, otherDirSpecMode, false);
    jint size = [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementWithADView:view];
    if (size > maxSize) {
      maxSize = size;
    }
    ADXGridLayoutManager_LayoutParams *lp = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
    jfloat otherSize = 1.0f * [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementInOtherWithADView:view] / ((ADXGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpanSize_;
    if (otherSize > maxSizeInOther) {
      maxSizeInOther = otherSize;
    }
  }
  if (flexibleInOtherDir) {
    ADXGridLayoutManager_guessMeasurementWithFloat_withInt_(self, maxSizeInOther, currentOtherDirSize);
    maxSize = 0;
    for (jint i = 0; i < count; i++) {
      ADView *view = IOSObjectArray_Get(nil_chk(mSet_), i);
      ADXGridLayoutManager_measureChildWithADView_withInt_withBoolean_(self, view, ADView_MeasureSpec_EXACTLY, true);
      jint size = [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementWithADView:view];
      if (size > maxSize) {
        maxSize = size;
      }
    }
  }
  for (jint i = 0; i < count; i++) {
    ADView *view = IOSObjectArray_Get(nil_chk(mSet_), i);
    if ([((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementWithADView:view] != maxSize) {
      ADXGridLayoutManager_LayoutParams *lp = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
      ADRect *decorInsets = ((ADXGridLayoutManager_LayoutParams *) nil_chk(lp))->mDecorInsets_;
      jint verticalInsets = ((ADRect *) nil_chk(decorInsets))->top_ + decorInsets->bottom_ + lp->topMargin_ + lp->bottomMargin_;
      jint horizontalInsets = decorInsets->left_ + decorInsets->right_ + lp->leftMargin_ + lp->rightMargin_;
      jint totalSpaceInOther = [self getSpaceForSpanRangeWithInt:lp->mSpanIndex_ withInt:lp->mSpanSize_];
      jint wSpec;
      jint hSpec;
      if (mOrientation_ == ADXLinearLayoutManager_VERTICAL) {
        wSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(totalSpaceInOther, ADView_MeasureSpec_EXACTLY, horizontalInsets, lp->width_, false);
        hSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxSize - verticalInsets, ADView_MeasureSpec_EXACTLY);
      }
      else {
        wSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxSize - horizontalInsets, ADView_MeasureSpec_EXACTLY);
        hSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(totalSpaceInOther, ADView_MeasureSpec_EXACTLY, verticalInsets, lp->height_, false);
      }
      ADXGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, view, wSpec, hSpec, true);
    }
  }
  ((ADXLinearLayoutManager_LayoutChunkResult *) nil_chk(result))->mConsumed_ = maxSize;
  jint left = 0;
  jint right = 0;
  jint top = 0;
  jint bottom = 0;
  if (mOrientation_ == ADXLinearLayoutManager_VERTICAL) {
    if (layoutState->mLayoutDirection_ == ADXLinearLayoutManager_LayoutState_LAYOUT_START) {
      bottom = layoutState->mOffset_;
      top = bottom - maxSize;
    }
    else {
      top = layoutState->mOffset_;
      bottom = top + maxSize;
    }
  }
  else {
    if (layoutState->mLayoutDirection_ == ADXLinearLayoutManager_LayoutState_LAYOUT_START) {
      right = layoutState->mOffset_;
      left = right - maxSize;
    }
    else {
      left = layoutState->mOffset_;
      right = left + maxSize;
    }
  }
  for (jint i = 0; i < count; i++) {
    ADView *view = IOSObjectArray_Get(nil_chk(mSet_), i);
    ADXGridLayoutManager_LayoutParams *params = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
    if (mOrientation_ == ADXLinearLayoutManager_VERTICAL) {
      if ([self isLayoutRTL]) {
        right = [self getPaddingLeft] + IOSIntArray_Get(nil_chk(mCachedBorders_), mSpanCount_ - ((ADXGridLayoutManager_LayoutParams *) nil_chk(params))->mSpanIndex_);
        left = right - [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementInOtherWithADView:view];
      }
      else {
        left = [self getPaddingLeft] + IOSIntArray_Get(nil_chk(mCachedBorders_), ((ADXGridLayoutManager_LayoutParams *) nil_chk(params))->mSpanIndex_);
        right = left + [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementInOtherWithADView:view];
      }
    }
    else {
      top = [self getPaddingTop] + IOSIntArray_Get(nil_chk(mCachedBorders_), ((ADXGridLayoutManager_LayoutParams *) nil_chk(params))->mSpanIndex_);
      bottom = top + [((ADXOrientationHelper *) nil_chk(mOrientationHelper_)) getDecoratedMeasurementInOtherWithADView:view];
    }
    [self layoutDecoratedWithMarginsWithADView:view withInt:left withInt:top withInt:right withInt:bottom];
    if ([params isItemRemoved] || [params isItemChanged]) {
      result->mIgnoreConsumed_ = true;
    }
    result->mFocusable_ |= false;
  }
  JavaUtilArrays_fillWithNSObjectArray_withId_(mSet_, nil);
}

- (void)measureChildWithADView:(ADView *)view
                       withInt:(jint)otherDirParentSpecMode
                   withBoolean:(jboolean)alreadyMeasured {
  ADXGridLayoutManager_measureChildWithADView_withInt_withBoolean_(self, view, otherDirParentSpecMode, alreadyMeasured);
}

- (void)guessMeasurementWithFloat:(jfloat)maxSizeInOther
                          withInt:(jint)currentOtherDirSize {
  ADXGridLayoutManager_guessMeasurementWithFloat_withInt_(self, maxSizeInOther, currentOtherDirSize);
}

- (void)measureChildWithDecorationsAndMarginWithADView:(ADView *)child
                                               withInt:(jint)widthSpec
                                               withInt:(jint)heightSpec
                                           withBoolean:(jboolean)alreadyMeasured {
  ADXGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, child, widthSpec, heightSpec, alreadyMeasured);
}

- (void)assignSpansWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                        withInt:(jint)count
                                    withBoolean:(jboolean)layingOutInPrimaryDirection {
  ADXGridLayoutManager_assignSpansWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_withBoolean_(self, recycler, state, count, layingOutInPrimaryDirection);
}

- (jint)getSpanCount {
  return mSpanCount_;
}

- (void)setSpanCountWithInt:(jint)spanCount {
  if (spanCount == mSpanCount_) {
    return;
  }
  mPendingSpanCountChange_ = true;
  if (spanCount < 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I", @"Span count should be at least 1. Provided ", spanCount));
  }
  mSpanCount_ = spanCount;
  [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(mSpanSizeLookup_)) invalidateSpanIndexCache];
  [self requestLayout];
}

- (ADView *)onFocusSearchFailedWithADView:(ADView *)focused
                                  withInt:(jint)direction
             withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADView *prevFocusedChild = JreRetainedLocalValue([self findContainingItemViewWithADView:focused]);
  if (prevFocusedChild == nil) {
    return nil;
  }
  ADXGridLayoutManager_LayoutParams *lp = (ADXGridLayoutManager_LayoutParams *) cast_chk([prevFocusedChild getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
  jint prevSpanStart = ((ADXGridLayoutManager_LayoutParams *) nil_chk(lp))->mSpanIndex_;
  jint prevSpanEnd = lp->mSpanIndex_ + lp->mSpanSize_;
  ADView *view = [super onFocusSearchFailedWithADView:focused withInt:direction withADXRecyclerView_Recycler:recycler withADXRecyclerView_State:state];
  if (view == nil) {
    return nil;
  }
  jint layoutDir = [self convertFocusDirectionToLayoutDirectionWithInt:direction];
  jboolean ascend = (layoutDir == ADXLinearLayoutManager_LayoutState_LAYOUT_END) != mShouldReverseLayout_;
  jint start;
  jint inc;
  jint limit;
  if (ascend) {
    start = [self getChildCount] - 1;
    inc = -1;
    limit = -1;
  }
  else {
    start = 0;
    inc = 1;
    limit = [self getChildCount];
  }
  jboolean preferLastSpan = mOrientation_ == ADXLinearLayoutManager_VERTICAL && [self isLayoutRTL];
  ADView *focusableWeakCandidate = nil;
  jint focusableWeakCandidateSpanIndex = -1;
  jint focusableWeakCandidateOverlap = 0;
  ADView *unfocusableWeakCandidate = nil;
  jint unfocusableWeakCandidateSpanIndex = -1;
  jint unfocusableWeakCandidateOverlap = 0;
  jint focusableSpanGroupIndex = ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, start);
  for (jint i = start; i != limit; i += inc) {
    jint spanGroupIndex = ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, i);
    ADView *candidate = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if (candidate == prevFocusedChild) {
      break;
    }
    ADXGridLayoutManager_LayoutParams *candidateLp = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(candidate)) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
    jint candidateStart = ((ADXGridLayoutManager_LayoutParams *) nil_chk(candidateLp))->mSpanIndex_;
    jint candidateEnd = candidateLp->mSpanIndex_ + candidateLp->mSpanSize_;
    jboolean assignAsWeek = false;
    if (unfocusableWeakCandidate == nil) {
      assignAsWeek = true;
    }
    else {
      jint maxStart = JavaLangMath_maxWithInt_withInt_(candidateStart, prevSpanStart);
      jint minEnd = JavaLangMath_minWithInt_withInt_(candidateEnd, prevSpanEnd);
      jint overlap = minEnd - maxStart;
    }
    if (assignAsWeek) {
      {
        unfocusableWeakCandidate = candidate;
        unfocusableWeakCandidateSpanIndex = candidateLp->mSpanIndex_;
        unfocusableWeakCandidateOverlap = JavaLangMath_minWithInt_withInt_(candidateEnd, prevSpanEnd) - JavaLangMath_maxWithInt_withInt_(candidateStart, prevSpanStart);
      }
    }
  }
  return (focusableWeakCandidate != nil) ? focusableWeakCandidate : unfocusableWeakCandidate;
}

- (jboolean)supportsPredictiveItemAnimations {
  return mPendingSavedState_ == nil && !mPendingSpanCountChange_;
}

- (jint)computeHorizontalScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if (mUsingSpansToEstimateScrollBarDimensions_) {
    return ADXGridLayoutManager_computeScrollRangeWithSpanInfoWithADXRecyclerView_State_(self, state);
  }
  else {
    return [super computeHorizontalScrollRangeWithADXRecyclerView_State:state];
  }
}

- (jint)computeVerticalScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if (mUsingSpansToEstimateScrollBarDimensions_) {
    return ADXGridLayoutManager_computeScrollRangeWithSpanInfoWithADXRecyclerView_State_(self, state);
  }
  else {
    return [super computeVerticalScrollRangeWithADXRecyclerView_State:state];
  }
}

- (jint)computeHorizontalScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if (mUsingSpansToEstimateScrollBarDimensions_) {
    return ADXGridLayoutManager_computeScrollOffsetWithSpanInfoWithADXRecyclerView_State_(self, state);
  }
  else {
    return [super computeHorizontalScrollOffsetWithADXRecyclerView_State:state];
  }
}

- (jint)computeVerticalScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  if (mUsingSpansToEstimateScrollBarDimensions_) {
    return ADXGridLayoutManager_computeScrollOffsetWithSpanInfoWithADXRecyclerView_State_(self, state);
  }
  else {
    return [super computeVerticalScrollOffsetWithADXRecyclerView_State:state];
  }
}

- (void)setUsingSpansToEstimateScrollbarDimensionsWithBoolean:(jboolean)useSpansToEstimateScrollBarDimensions {
  mUsingSpansToEstimateScrollBarDimensions_ = useSpansToEstimateScrollBarDimensions;
}

- (jboolean)isUsingSpansToEstimateScrollbarDimensions {
  return mUsingSpansToEstimateScrollBarDimensions_;
}

- (jint)computeScrollRangeWithSpanInfoWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXGridLayoutManager_computeScrollRangeWithSpanInfoWithADXRecyclerView_State_(self, state);
}

- (jint)computeScrollOffsetWithSpanInfoWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return ADXGridLayoutManager_computeScrollOffsetWithSpanInfoWithADXRecyclerView_State_(self, state);
}

- (void)dealloc {
  RELEASE_(mCachedBorders_);
  RELEASE_(mSet_);
  RELEASE_(mPreLayoutSpanSizeCache_);
  RELEASE_(mPreLayoutSpanIndexCache_);
  RELEASE_(mSpanSizeLookup_);
  RELEASE_(mDecorInsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_LayoutParams;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LADXGridLayoutManager_SpanSizeLookup;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "[I", 0x8, 25, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 31, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 36, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 40, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 41, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 53, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 26, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 58, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 59, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 60, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 62, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 63, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADContext:withInt:);
  methods[1].selector = @selector(initWithADContext:withInt:withInt:withBoolean:);
  methods[2].selector = @selector(setStackFromEndWithBoolean:);
  methods[3].selector = @selector(getRowCountForAccessibilityWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[4].selector = @selector(getColumnCountForAccessibilityWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[5].selector = @selector(onLayoutChildrenWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[6].selector = @selector(onLayoutCompletedWithADXRecyclerView_State:);
  methods[7].selector = @selector(clearPreLayoutSpanMappingCache);
  methods[8].selector = @selector(cachePreLayoutSpanMapping);
  methods[9].selector = @selector(onItemsAddedWithADXRecyclerView:withInt:withInt:);
  methods[10].selector = @selector(onItemsChangedWithADXRecyclerView:);
  methods[11].selector = @selector(onItemsRemovedWithADXRecyclerView:withInt:withInt:);
  methods[12].selector = @selector(onItemsUpdatedWithADXRecyclerView:withInt:withInt:withId:);
  methods[13].selector = @selector(onItemsMovedWithADXRecyclerView:withInt:withInt:withInt:);
  methods[14].selector = @selector(generateDefaultLayoutParams);
  methods[15].selector = @selector(checkLayoutParamsWithADXRecyclerView_LayoutParams:);
  methods[16].selector = @selector(setSpanSizeLookupWithADXGridLayoutManager_SpanSizeLookup:);
  methods[17].selector = @selector(getSpanSizeLookup);
  methods[18].selector = @selector(updateMeasurements);
  methods[19].selector = @selector(setMeasuredDimensionWithADRect:withInt:withInt:);
  methods[20].selector = @selector(calculateItemBordersWithInt:);
  methods[21].selector = @selector(calculateItemBordersWithIntArray:withInt:withInt:);
  methods[22].selector = @selector(getSpaceForSpanRangeWithInt:withInt:);
  methods[23].selector = @selector(onAnchorReadyWithADXRecyclerView_Recycler:withADXRecyclerView_State:withADXLinearLayoutManager_AnchorInfo:withInt:);
  methods[24].selector = @selector(ensureViewSet);
  methods[25].selector = @selector(scrollHorizontallyByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[26].selector = @selector(scrollVerticallyByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[27].selector = @selector(ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler:withADXRecyclerView_State:withADXLinearLayoutManager_AnchorInfo:withInt:);
  methods[28].selector = @selector(findReferenceChildWithADXRecyclerView_Recycler:withADXRecyclerView_State:withBoolean:withBoolean:);
  methods[29].selector = @selector(getSpanGroupIndexWithADXRecyclerView_Recycler:withADXRecyclerView_State:withInt:);
  methods[30].selector = @selector(getSpanIndexWithADXRecyclerView_Recycler:withADXRecyclerView_State:withInt:);
  methods[31].selector = @selector(getSpanSizeWithADXRecyclerView_Recycler:withADXRecyclerView_State:withInt:);
  methods[32].selector = @selector(collectPrefetchPositionsForLayoutStateWithADXRecyclerView_State:withADXLinearLayoutManager_LayoutState:withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:);
  methods[33].selector = @selector(layoutChunkWithADXRecyclerView_Recycler:withADXRecyclerView_State:withADXLinearLayoutManager_LayoutState:withADXLinearLayoutManager_LayoutChunkResult:);
  methods[34].selector = @selector(measureChildWithADView:withInt:withBoolean:);
  methods[35].selector = @selector(guessMeasurementWithFloat:withInt:);
  methods[36].selector = @selector(measureChildWithDecorationsAndMarginWithADView:withInt:withInt:withBoolean:);
  methods[37].selector = @selector(assignSpansWithADXRecyclerView_Recycler:withADXRecyclerView_State:withInt:withBoolean:);
  methods[38].selector = @selector(getSpanCount);
  methods[39].selector = @selector(setSpanCountWithInt:);
  methods[40].selector = @selector(onFocusSearchFailedWithADView:withInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[41].selector = @selector(supportsPredictiveItemAnimations);
  methods[42].selector = @selector(computeHorizontalScrollRangeWithADXRecyclerView_State:);
  methods[43].selector = @selector(computeVerticalScrollRangeWithADXRecyclerView_State:);
  methods[44].selector = @selector(computeHorizontalScrollOffsetWithADXRecyclerView_State:);
  methods[45].selector = @selector(computeVerticalScrollOffsetWithADXRecyclerView_State:);
  methods[46].selector = @selector(setUsingSpansToEstimateScrollbarDimensionsWithBoolean:);
  methods[47].selector = @selector(isUsingSpansToEstimateScrollbarDimensions);
  methods[48].selector = @selector(computeScrollRangeWithSpanInfoWithADXRecyclerView_State:);
  methods[49].selector = @selector(computeScrollOffsetWithSpanInfoWithADXRecyclerView_State:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXGridLayoutManager_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "DEFAULT_SPAN_COUNT", "I", .constantValue.asInt = ADXGridLayoutManager_DEFAULT_SPAN_COUNT, 0x19, -1, -1, -1, -1 },
    { "mPendingSpanCountChange_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCachedBorders_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSet_", "[LADView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPreLayoutSpanSizeCache_", "LADSparseIntArray;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mPreLayoutSpanIndexCache_", "LADSparseIntArray;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mSpanSizeLookup_", "LADXGridLayoutManager_SpanSizeLookup;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDecorInsets_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mUsingSpansToEstimateScrollBarDimensions_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADContext;I", "LADContext;IIZ", "setStackFromEnd", "Z", "getRowCountForAccessibility", "LADXRecyclerView_Recycler;LADXRecyclerView_State;", "getColumnCountForAccessibility", "onLayoutChildren", "onLayoutCompleted", "LADXRecyclerView_State;", "onItemsAdded", "LADXRecyclerView;II", "onItemsChanged", "LADXRecyclerView;", "onItemsRemoved", "onItemsUpdated", "LADXRecyclerView;IILNSObject;", "onItemsMoved", "LADXRecyclerView;III", "checkLayoutParams", "LADXRecyclerView_LayoutParams;", "setSpanSizeLookup", "LADXGridLayoutManager_SpanSizeLookup;", "setMeasuredDimension", "LADRect;II", "calculateItemBorders", "I", "[III", "getSpaceForSpanRange", "II", "onAnchorReady", "LADXRecyclerView_Recycler;LADXRecyclerView_State;LADXLinearLayoutManager_AnchorInfo;I", "scrollHorizontallyBy", "ILADXRecyclerView_Recycler;LADXRecyclerView_State;", "scrollVerticallyBy", "ensureAnchorIsInCorrectSpan", "findReferenceChild", "LADXRecyclerView_Recycler;LADXRecyclerView_State;ZZ", "getSpanGroupIndex", "LADXRecyclerView_Recycler;LADXRecyclerView_State;I", "getSpanIndex", "getSpanSize", "collectPrefetchPositionsForLayoutState", "LADXRecyclerView_State;LADXLinearLayoutManager_LayoutState;LADXRecyclerView_LayoutManager_LayoutPrefetchRegistry;", "layoutChunk", "LADXRecyclerView_Recycler;LADXRecyclerView_State;LADXLinearLayoutManager_LayoutState;LADXLinearLayoutManager_LayoutChunkResult;", "measureChild", "LADView;IZ", "guessMeasurement", "FI", "measureChildWithDecorationsAndMargin", "LADView;IIZ", "assignSpans", "LADXRecyclerView_Recycler;LADXRecyclerView_State;IZ", "setSpanCount", "onFocusSearchFailed", "LADView;ILADXRecyclerView_Recycler;LADXRecyclerView_State;", "computeHorizontalScrollRange", "computeVerticalScrollRange", "computeHorizontalScrollOffset", "computeVerticalScrollOffset", "setUsingSpansToEstimateScrollbarDimensions", "computeScrollRangeWithSpanInfo", "computeScrollOffsetWithSpanInfo", &ADXGridLayoutManager_TAG, "LADXGridLayoutManager_SpanSizeLookup;LADXGridLayoutManager_DefaultSpanSizeLookup;LADXGridLayoutManager_LayoutParams;" };
  static const J2ObjcClassInfo _ADXGridLayoutManager = { "GridLayoutManager", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x1, 50, 12, -1, 65, -1, -1, -1 };
  return &_ADXGridLayoutManager;
}

@end

void ADXGridLayoutManager_initWithADContext_withInt_(ADXGridLayoutManager *self, ADContext *context, jint spanCount) {
  ADXLinearLayoutManager_initWithADContext_(self, context);
  self->mPendingSpanCountChange_ = false;
  self->mSpanCount_ = ADXGridLayoutManager_DEFAULT_SPAN_COUNT;
  JreStrongAssignAndConsume(&self->mPreLayoutSpanSizeCache_, new_ADSparseIntArray_init());
  JreStrongAssignAndConsume(&self->mPreLayoutSpanIndexCache_, new_ADSparseIntArray_init());
  JreStrongAssignAndConsume(&self->mSpanSizeLookup_, new_ADXGridLayoutManager_DefaultSpanSizeLookup_init());
  JreStrongAssignAndConsume(&self->mDecorInsets_, new_ADRect_init());
  [self setSpanCountWithInt:spanCount];
}

ADXGridLayoutManager *new_ADXGridLayoutManager_initWithADContext_withInt_(ADContext *context, jint spanCount) {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager, initWithADContext_withInt_, context, spanCount)
}

ADXGridLayoutManager *create_ADXGridLayoutManager_initWithADContext_withInt_(ADContext *context, jint spanCount) {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager, initWithADContext_withInt_, context, spanCount)
}

void ADXGridLayoutManager_initWithADContext_withInt_withInt_withBoolean_(ADXGridLayoutManager *self, ADContext *context, jint spanCount, jint orientation, jboolean reverseLayout) {
  ADXLinearLayoutManager_initWithADContext_withInt_withBoolean_(self, context, orientation, reverseLayout);
  self->mPendingSpanCountChange_ = false;
  self->mSpanCount_ = ADXGridLayoutManager_DEFAULT_SPAN_COUNT;
  JreStrongAssignAndConsume(&self->mPreLayoutSpanSizeCache_, new_ADSparseIntArray_init());
  JreStrongAssignAndConsume(&self->mPreLayoutSpanIndexCache_, new_ADSparseIntArray_init());
  JreStrongAssignAndConsume(&self->mSpanSizeLookup_, new_ADXGridLayoutManager_DefaultSpanSizeLookup_init());
  JreStrongAssignAndConsume(&self->mDecorInsets_, new_ADRect_init());
  [self setSpanCountWithInt:spanCount];
}

ADXGridLayoutManager *new_ADXGridLayoutManager_initWithADContext_withInt_withInt_withBoolean_(ADContext *context, jint spanCount, jint orientation, jboolean reverseLayout) {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager, initWithADContext_withInt_withInt_withBoolean_, context, spanCount, orientation, reverseLayout)
}

ADXGridLayoutManager *create_ADXGridLayoutManager_initWithADContext_withInt_withInt_withBoolean_(ADContext *context, jint spanCount, jint orientation, jboolean reverseLayout) {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager, initWithADContext_withInt_withInt_withBoolean_, context, spanCount, orientation, reverseLayout)
}

void ADXGridLayoutManager_clearPreLayoutSpanMappingCache(ADXGridLayoutManager *self) {
  [((ADSparseIntArray *) nil_chk(self->mPreLayoutSpanSizeCache_)) clear];
  [((ADSparseIntArray *) nil_chk(self->mPreLayoutSpanIndexCache_)) clear];
}

void ADXGridLayoutManager_cachePreLayoutSpanMapping(ADXGridLayoutManager *self) {
  jint childCount = [self getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXGridLayoutManager_LayoutParams *lp = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk([self getChildAtWithInt:i])) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
    jint viewPosition = [((ADXGridLayoutManager_LayoutParams *) nil_chk(lp)) getViewLayoutPosition];
    [((ADSparseIntArray *) nil_chk(self->mPreLayoutSpanSizeCache_)) putWithInt:viewPosition withInt:[lp getSpanSize]];
    [((ADSparseIntArray *) nil_chk(self->mPreLayoutSpanIndexCache_)) putWithInt:viewPosition withInt:[lp getSpanIndex]];
  }
}

void ADXGridLayoutManager_updateMeasurements(ADXGridLayoutManager *self) {
  jint totalSpace;
  if ([self getOrientation] == ADXLinearLayoutManager_VERTICAL) {
    totalSpace = [self getWidth] - [self getPaddingRight] - [self getPaddingLeft];
  }
  else {
    totalSpace = [self getHeight] - [self getPaddingBottom] - [self getPaddingTop];
  }
  ADXGridLayoutManager_calculateItemBordersWithInt_(self, totalSpace);
}

void ADXGridLayoutManager_calculateItemBordersWithInt_(ADXGridLayoutManager *self, jint totalSpace) {
  JreStrongAssign(&self->mCachedBorders_, ADXGridLayoutManager_calculateItemBordersWithIntArray_withInt_withInt_(self->mCachedBorders_, self->mSpanCount_, totalSpace));
}

IOSIntArray *ADXGridLayoutManager_calculateItemBordersWithIntArray_withInt_withInt_(IOSIntArray *cachedBorders, jint spanCount, jint totalSpace) {
  ADXGridLayoutManager_initialize();
  if (cachedBorders == nil || cachedBorders->size_ != spanCount + 1 || IOSIntArray_Get(cachedBorders, cachedBorders->size_ - 1) != totalSpace) {
    cachedBorders = [IOSIntArray arrayWithLength:spanCount + 1];
  }
  *IOSIntArray_GetRef(cachedBorders, 0) = 0;
  jint sizePerSpan = JreIntDiv(totalSpace, spanCount);
  jint sizePerSpanRemainder = JreIntMod(totalSpace, spanCount);
  jint consumedPixels = 0;
  jint additionalSize = 0;
  for (jint i = 1; i <= spanCount; i++) {
    jint itemSize = sizePerSpan;
    additionalSize += sizePerSpanRemainder;
    if (additionalSize > 0 && (spanCount - additionalSize) < sizePerSpanRemainder) {
      itemSize += 1;
      additionalSize -= spanCount;
    }
    consumedPixels += itemSize;
    *IOSIntArray_GetRef(cachedBorders, i) = consumedPixels;
  }
  return cachedBorders;
}

void ADXGridLayoutManager_ensureViewSet(ADXGridLayoutManager *self) {
  if (self->mSet_ == nil || self->mSet_->size_ != self->mSpanCount_) {
    JreStrongAssignAndConsume(&self->mSet_, [IOSObjectArray newArrayWithLength:self->mSpanCount_ type:ADView_class_()]);
  }
}

void ADXGridLayoutManager_ensureAnchorIsInCorrectSpanWithADXRecyclerView_Recycler_withADXRecyclerView_State_withADXLinearLayoutManager_AnchorInfo_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, ADXLinearLayoutManager_AnchorInfo *anchorInfo, jint itemDirection) {
  jboolean layingOutInPrimaryDirection = itemDirection == ADXLinearLayoutManager_LayoutState_ITEM_DIRECTION_TAIL;
  jint span = ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, ((ADXLinearLayoutManager_AnchorInfo *) nil_chk(anchorInfo))->mPosition_);
  if (layingOutInPrimaryDirection) {
    while (span > 0 && anchorInfo->mPosition_ > 0) {
      anchorInfo->mPosition_--;
      span = ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, anchorInfo->mPosition_);
    }
  }
  else {
    jint indexLimit = [((ADXRecyclerView_State *) nil_chk(state)) getItemCount] - 1;
    jint pos = anchorInfo->mPosition_;
    jint bestSpan = span;
    while (pos < indexLimit) {
      jint next = ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, pos + 1);
      if (next > bestSpan) {
        pos += 1;
        bestSpan = next;
      }
      else {
        break;
      }
    }
    anchorInfo->mPosition_ = pos;
  }
}

jint ADXGridLayoutManager_getSpanGroupIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint viewPosition) {
  if (![((ADXRecyclerView_State *) nil_chk(state)) isPreLayout]) {
    return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:viewPosition withInt:self->mSpanCount_];
  }
  jint adapterPosition = [((ADXRecyclerView_Recycler *) nil_chk(recycler)) convertPreLayoutPositionToPostLayoutWithInt:viewPosition];
  if (adapterPosition == -1) {
    ADLog_wWithNSString_withNSString_(ADXGridLayoutManager_TAG, JreStrcat("$I", @"Cannot find span size for pre layout position. ", viewPosition));
    return 0;
  }
  return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:adapterPosition withInt:self->mSpanCount_];
}

jint ADXGridLayoutManager_getSpanIndexWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint pos) {
  if (![((ADXRecyclerView_State *) nil_chk(state)) isPreLayout]) {
    return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanIndexWithInt:pos withInt:self->mSpanCount_];
  }
  jint cached = [((ADSparseIntArray *) nil_chk(self->mPreLayoutSpanIndexCache_)) getWithInt:pos withInt:-1];
  if (cached != -1) {
    return cached;
  }
  jint adapterPosition = [((ADXRecyclerView_Recycler *) nil_chk(recycler)) convertPreLayoutPositionToPostLayoutWithInt:pos];
  if (adapterPosition == -1) {
    ADLog_wWithNSString_withNSString_(ADXGridLayoutManager_TAG, JreStrcat("$I", @"Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:", pos));
    return 0;
  }
  return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanIndexWithInt:adapterPosition withInt:self->mSpanCount_];
}

jint ADXGridLayoutManager_getSpanSizeWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint pos) {
  if (![((ADXRecyclerView_State *) nil_chk(state)) isPreLayout]) {
    return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getSpanSizeWithInt:pos];
  }
  jint cached = [((ADSparseIntArray *) nil_chk(self->mPreLayoutSpanSizeCache_)) getWithInt:pos withInt:-1];
  if (cached != -1) {
    return cached;
  }
  jint adapterPosition = [((ADXRecyclerView_Recycler *) nil_chk(recycler)) convertPreLayoutPositionToPostLayoutWithInt:pos];
  if (adapterPosition == -1) {
    ADLog_wWithNSString_withNSString_(ADXGridLayoutManager_TAG, JreStrcat("$I", @"Cannot find span size for pre layout position. It is not cached, not in the adapter. Pos:", pos));
    return 1;
  }
  return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getSpanSizeWithInt:adapterPosition];
}

void ADXGridLayoutManager_measureChildWithADView_withInt_withBoolean_(ADXGridLayoutManager *self, ADView *view, jint otherDirParentSpecMode, jboolean alreadyMeasured) {
  ADXGridLayoutManager_LayoutParams *lp = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
  ADRect *decorInsets = ((ADXGridLayoutManager_LayoutParams *) nil_chk(lp))->mDecorInsets_;
  jint verticalInsets = ((ADRect *) nil_chk(decorInsets))->top_ + decorInsets->bottom_ + lp->topMargin_ + lp->bottomMargin_;
  jint horizontalInsets = decorInsets->left_ + decorInsets->right_ + lp->leftMargin_ + lp->rightMargin_;
  jint availableSpaceInOther = [self getSpaceForSpanRangeWithInt:lp->mSpanIndex_ withInt:lp->mSpanSize_];
  jint wSpec;
  jint hSpec;
  if (self->mOrientation_ == ADXLinearLayoutManager_VERTICAL) {
    wSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(availableSpaceInOther, otherDirParentSpecMode, horizontalInsets, lp->width_, false);
    hSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getTotalSpace], [self getHeightMode], verticalInsets, lp->height_, true);
  }
  else {
    hSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(availableSpaceInOther, otherDirParentSpecMode, verticalInsets, lp->height_, false);
    wSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getTotalSpace], [self getWidthMode], horizontalInsets, lp->width_, true);
  }
  ADXGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(self, view, wSpec, hSpec, alreadyMeasured);
}

void ADXGridLayoutManager_guessMeasurementWithFloat_withInt_(ADXGridLayoutManager *self, jfloat maxSizeInOther, jint currentOtherDirSize) {
  jint contentSize = JavaLangMath_roundWithFloat_(maxSizeInOther * self->mSpanCount_);
  ADXGridLayoutManager_calculateItemBordersWithInt_(self, JavaLangMath_maxWithInt_withInt_(contentSize, currentOtherDirSize));
}

void ADXGridLayoutManager_measureChildWithDecorationsAndMarginWithADView_withInt_withInt_withBoolean_(ADXGridLayoutManager *self, ADView *child, jint widthSpec, jint heightSpec, jboolean alreadyMeasured) {
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  jboolean measure;
  if (alreadyMeasured) {
    measure = [self shouldReMeasureChildWithADView:child withInt:widthSpec withInt:heightSpec withADXRecyclerView_LayoutParams:lp];
  }
  else {
    measure = [self shouldMeasureChildWithADView:child withInt:widthSpec withInt:heightSpec withADXRecyclerView_LayoutParams:lp];
  }
  if (measure) {
    [child measureWithInt:widthSpec withInt:heightSpec];
  }
}

void ADXGridLayoutManager_assignSpansWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_withBoolean_(ADXGridLayoutManager *self, ADXRecyclerView_Recycler *recycler, ADXRecyclerView_State *state, jint count, jboolean layingOutInPrimaryDirection) {
  jint span;
  jint start;
  jint end;
  jint diff;
  if (layingOutInPrimaryDirection) {
    start = 0;
    end = count;
    diff = 1;
  }
  else {
    start = count - 1;
    end = -1;
    diff = -1;
  }
  span = 0;
  for (jint i = start; i != end; i += diff) {
    ADView *view = IOSObjectArray_Get(nil_chk(self->mSet_), i);
    ADXGridLayoutManager_LayoutParams *params = (ADXGridLayoutManager_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayoutManager_LayoutParams class]);
    ((ADXGridLayoutManager_LayoutParams *) nil_chk(params))->mSpanSize_ = ADXGridLayoutManager_getSpanSizeWithADXRecyclerView_Recycler_withADXRecyclerView_State_withInt_(self, recycler, state, [self getPositionWithADView:view]);
    params->mSpanIndex_ = span;
    span += params->mSpanSize_;
  }
}

jint ADXGridLayoutManager_computeScrollRangeWithSpanInfoWithADXRecyclerView_State_(ADXGridLayoutManager *self, ADXRecyclerView_State *state) {
  if ([self getChildCount] == 0 || [((ADXRecyclerView_State *) nil_chk(state)) getItemCount] == 0) {
    return 0;
  }
  [self ensureLayoutState];
  ADView *startChild = JreRetainedLocalValue([self findFirstVisibleChildClosestToStartWithBoolean:![self isSmoothScrollbarEnabled] withBoolean:true]);
  ADView *endChild = JreRetainedLocalValue([self findFirstVisibleChildClosestToEndWithBoolean:![self isSmoothScrollbarEnabled] withBoolean:true]);
  if (startChild == nil || endChild == nil) {
    return 0;
  }
  if (![self isSmoothScrollbarEnabled]) {
    return [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[((ADXRecyclerView_State *) nil_chk(state)) getItemCount] - 1 withInt:self->mSpanCount_] + 1;
  }
  jint laidOutArea = [((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getDecoratedEndWithADView:endChild] - [((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getDecoratedStartWithADView:startChild];
  jint firstVisibleSpan = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[self getPositionWithADView:startChild] withInt:self->mSpanCount_];
  jint lastVisibleSpan = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[self getPositionWithADView:endChild] withInt:self->mSpanCount_];
  jint totalSpans = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[((ADXRecyclerView_State *) nil_chk(state)) getItemCount] - 1 withInt:self->mSpanCount_] + 1;
  jint laidOutSpans = lastVisibleSpan - firstVisibleSpan + 1;
  return JreFpToInt((((jfloat) laidOutArea / laidOutSpans) * totalSpans));
}

jint ADXGridLayoutManager_computeScrollOffsetWithSpanInfoWithADXRecyclerView_State_(ADXGridLayoutManager *self, ADXRecyclerView_State *state) {
  if ([self getChildCount] == 0 || [((ADXRecyclerView_State *) nil_chk(state)) getItemCount] == 0) {
    return 0;
  }
  [self ensureLayoutState];
  jboolean smoothScrollEnabled = [self isSmoothScrollbarEnabled];
  ADView *startChild = JreRetainedLocalValue([self findFirstVisibleChildClosestToStartWithBoolean:!smoothScrollEnabled withBoolean:true]);
  ADView *endChild = JreRetainedLocalValue([self findFirstVisibleChildClosestToEndWithBoolean:!smoothScrollEnabled withBoolean:true]);
  if (startChild == nil || endChild == nil) {
    return 0;
  }
  jint startChildSpan = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[self getPositionWithADView:startChild] withInt:self->mSpanCount_];
  jint endChildSpan = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[self getPositionWithADView:endChild] withInt:self->mSpanCount_];
  jint minSpan = JavaLangMath_minWithInt_withInt_(startChildSpan, endChildSpan);
  jint maxSpan = JavaLangMath_maxWithInt_withInt_(startChildSpan, endChildSpan);
  jint totalSpans = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[((ADXRecyclerView_State *) nil_chk(state)) getItemCount] - 1 withInt:self->mSpanCount_] + 1;
  jint spansBefore = self->mShouldReverseLayout_ ? JavaLangMath_maxWithInt_withInt_(0, totalSpans - maxSpan - 1) : JavaLangMath_maxWithInt_withInt_(0, minSpan);
  if (!smoothScrollEnabled) {
    return spansBefore;
  }
  jint laidOutArea = JavaLangMath_absWithInt_([((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getDecoratedEndWithADView:endChild] - [((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getDecoratedStartWithADView:startChild]);
  jint firstVisibleSpan = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[self getPositionWithADView:startChild] withInt:self->mSpanCount_];
  jint lastVisibleSpan = [((ADXGridLayoutManager_SpanSizeLookup *) nil_chk(self->mSpanSizeLookup_)) getCachedSpanGroupIndexWithInt:[self getPositionWithADView:endChild] withInt:self->mSpanCount_];
  jint laidOutSpans = lastVisibleSpan - firstVisibleSpan + 1;
  jfloat avgSizePerSpan = (jfloat) laidOutArea / laidOutSpans;
  return JavaLangMath_roundWithFloat_(spansBefore * avgSizePerSpan + ([((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getStartAfterPadding] - [((ADXOrientationHelper *) nil_chk(self->mOrientationHelper_)) getDecoratedStartWithADView:startChild]));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayoutManager)

@implementation ADXGridLayoutManager_SpanSizeLookup

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayoutManager_SpanSizeLookup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getSpanSizeWithInt:(jint)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)setSpanIndexCacheEnabledWithBoolean:(jboolean)cacheSpanIndices {
  if (!cacheSpanIndices) {
    [((ADSparseIntArray *) nil_chk(mSpanGroupIndexCache_)) clear];
  }
  mCacheSpanIndices_ = cacheSpanIndices;
}

- (void)setSpanGroupIndexCacheEnabledWithBoolean:(jboolean)cacheSpanGroupIndices {
  if (!cacheSpanGroupIndices) {
    [((ADSparseIntArray *) nil_chk(mSpanGroupIndexCache_)) clear];
  }
  mCacheSpanGroupIndices_ = cacheSpanGroupIndices;
}

- (void)invalidateSpanIndexCache {
  [((ADSparseIntArray *) nil_chk(mSpanIndexCache_)) clear];
}

- (void)invalidateSpanGroupIndexCache {
  [((ADSparseIntArray *) nil_chk(mSpanGroupIndexCache_)) clear];
}

- (jboolean)isSpanIndexCacheEnabled {
  return mCacheSpanIndices_;
}

- (jboolean)isSpanGroupIndexCacheEnabled {
  return mCacheSpanGroupIndices_;
}

- (jint)getCachedSpanIndexWithInt:(jint)position
                          withInt:(jint)spanCount {
  if (!mCacheSpanIndices_) {
    return [self getSpanIndexWithInt:position withInt:spanCount];
  }
  jint existing = [((ADSparseIntArray *) nil_chk(mSpanIndexCache_)) getWithInt:position withInt:-1];
  if (existing != -1) {
    return existing;
  }
  jint value = [self getSpanIndexWithInt:position withInt:spanCount];
  [mSpanIndexCache_ putWithInt:position withInt:value];
  return value;
}

- (jint)getCachedSpanGroupIndexWithInt:(jint)position
                               withInt:(jint)spanCount {
  if (!mCacheSpanGroupIndices_) {
    return [self getSpanGroupIndexWithInt:position withInt:spanCount];
  }
  jint existing = [((ADSparseIntArray *) nil_chk(mSpanGroupIndexCache_)) getWithInt:position withInt:-1];
  if (existing != -1) {
    return existing;
  }
  jint value = [self getSpanGroupIndexWithInt:position withInt:spanCount];
  [mSpanGroupIndexCache_ putWithInt:position withInt:value];
  return value;
}

- (jint)getSpanIndexWithInt:(jint)position
                    withInt:(jint)spanCount {
  jint positionSpanSize = [self getSpanSizeWithInt:position];
  if (positionSpanSize == spanCount) {
    return 0;
  }
  jint span = 0;
  jint startPos = 0;
  if (mCacheSpanIndices_) {
    jint prevKey = ADXGridLayoutManager_SpanSizeLookup_findFirstKeyLessThanWithADSparseIntArray_withInt_(mSpanIndexCache_, position);
    if (prevKey >= 0) {
      span = [((ADSparseIntArray *) nil_chk(mSpanIndexCache_)) getWithInt:prevKey] + [self getSpanSizeWithInt:prevKey];
      startPos = prevKey + 1;
    }
  }
  for (jint i = startPos; i < position; i++) {
    jint size = [self getSpanSizeWithInt:i];
    span += size;
    if (span == spanCount) {
      span = 0;
    }
    else if (span > spanCount) {
      span = size;
    }
  }
  if (span + positionSpanSize <= spanCount) {
    return span;
  }
  return 0;
}

+ (jint)findFirstKeyLessThanWithADSparseIntArray:(ADSparseIntArray *)cache
                                         withInt:(jint)position {
  return ADXGridLayoutManager_SpanSizeLookup_findFirstKeyLessThanWithADSparseIntArray_withInt_(cache, position);
}

- (jint)getSpanGroupIndexWithInt:(jint)adapterPosition
                         withInt:(jint)spanCount {
  jint span = 0;
  jint group = 0;
  jint start = 0;
  if (mCacheSpanGroupIndices_) {
    jint prevKey = ADXGridLayoutManager_SpanSizeLookup_findFirstKeyLessThanWithADSparseIntArray_withInt_(mSpanGroupIndexCache_, adapterPosition);
    if (prevKey != -1) {
      group = [((ADSparseIntArray *) nil_chk(mSpanGroupIndexCache_)) getWithInt:prevKey];
      start = prevKey + 1;
      span = [self getCachedSpanIndexWithInt:prevKey withInt:spanCount] + [self getSpanSizeWithInt:prevKey];
      if (span == spanCount) {
        span = 0;
        group++;
      }
    }
  }
  jint positionSpanSize = [self getSpanSizeWithInt:adapterPosition];
  for (jint i = start; i < adapterPosition; i++) {
    jint size = [self getSpanSizeWithInt:i];
    span += size;
    if (span == spanCount) {
      span = 0;
      group++;
    }
    else if (span > spanCount) {
      span = size;
      group++;
    }
  }
  if (span + positionSpanSize > spanCount) {
    group++;
  }
  return group;
}

- (void)dealloc {
  RELEASE_(mSpanIndexCache_);
  RELEASE_(mSpanGroupIndexCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSpanSizeWithInt:);
  methods[2].selector = @selector(setSpanIndexCacheEnabledWithBoolean:);
  methods[3].selector = @selector(setSpanGroupIndexCacheEnabledWithBoolean:);
  methods[4].selector = @selector(invalidateSpanIndexCache);
  methods[5].selector = @selector(invalidateSpanGroupIndexCache);
  methods[6].selector = @selector(isSpanIndexCacheEnabled);
  methods[7].selector = @selector(isSpanGroupIndexCacheEnabled);
  methods[8].selector = @selector(getCachedSpanIndexWithInt:withInt:);
  methods[9].selector = @selector(getCachedSpanGroupIndexWithInt:withInt:);
  methods[10].selector = @selector(getSpanIndexWithInt:withInt:);
  methods[11].selector = @selector(findFirstKeyLessThanWithADSparseIntArray:withInt:);
  methods[12].selector = @selector(getSpanGroupIndexWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mSpanIndexCache_", "LADSparseIntArray;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mSpanGroupIndexCache_", "LADSparseIntArray;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mCacheSpanIndices_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCacheSpanGroupIndices_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getSpanSize", "I", "setSpanIndexCacheEnabled", "Z", "setSpanGroupIndexCacheEnabled", "getCachedSpanIndex", "II", "getCachedSpanGroupIndex", "getSpanIndex", "findFirstKeyLessThan", "LADSparseIntArray;I", "getSpanGroupIndex", "LADXGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXGridLayoutManager_SpanSizeLookup = { "SpanSizeLookup", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x409, 13, 4, 12, -1, -1, -1, -1 };
  return &_ADXGridLayoutManager_SpanSizeLookup;
}

@end

void ADXGridLayoutManager_SpanSizeLookup_init(ADXGridLayoutManager_SpanSizeLookup *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mSpanIndexCache_, new_ADSparseIntArray_init());
  JreStrongAssignAndConsume(&self->mSpanGroupIndexCache_, new_ADSparseIntArray_init());
  self->mCacheSpanIndices_ = false;
  self->mCacheSpanGroupIndices_ = false;
}

jint ADXGridLayoutManager_SpanSizeLookup_findFirstKeyLessThanWithADSparseIntArray_withInt_(ADSparseIntArray *cache, jint position) {
  ADXGridLayoutManager_SpanSizeLookup_initialize();
  jint lo = 0;
  jint hi = [((ADSparseIntArray *) nil_chk(cache)) size] - 1;
  while (lo <= hi) {
    jint mid = JreURShift32((lo + hi), 1);
    jint midVal = [cache keyAtWithInt:mid];
    if (midVal < position) {
      lo = mid + 1;
    }
    else {
      hi = mid - 1;
    }
  }
  jint index = lo - 1;
  if (index >= 0 && index < [cache size]) {
    return [cache keyAtWithInt:index];
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayoutManager_SpanSizeLookup)

@implementation ADXGridLayoutManager_DefaultSpanSizeLookup

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayoutManager_DefaultSpanSizeLookup_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getSpanSizeWithInt:(jint)position {
  return 1;
}

- (jint)getSpanIndexWithInt:(jint)position
                    withInt:(jint)spanCount {
  return JreIntMod(position, spanCount);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSpanSizeWithInt:);
  methods[2].selector = @selector(getSpanIndexWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getSpanSize", "I", "getSpanIndex", "II", "LADXGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXGridLayoutManager_DefaultSpanSizeLookup = { "DefaultSpanSizeLookup", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x19, 3, 0, 4, -1, -1, -1, -1 };
  return &_ADXGridLayoutManager_DefaultSpanSizeLookup;
}

@end

void ADXGridLayoutManager_DefaultSpanSizeLookup_init(ADXGridLayoutManager_DefaultSpanSizeLookup *self) {
  ADXGridLayoutManager_SpanSizeLookup_init(self);
}

ADXGridLayoutManager_DefaultSpanSizeLookup *new_ADXGridLayoutManager_DefaultSpanSizeLookup_init() {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager_DefaultSpanSizeLookup, init)
}

ADXGridLayoutManager_DefaultSpanSizeLookup *create_ADXGridLayoutManager_DefaultSpanSizeLookup_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager_DefaultSpanSizeLookup, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayoutManager_DefaultSpanSizeLookup)

@implementation ADXGridLayoutManager_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_MarginLayoutParams:(ADViewGroup_MarginLayoutParams *)source {
  ADXGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)source {
  ADXGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(self, source);
  return self;
}

- (jint)getSpanIndex {
  return mSpanIndex_;
}

- (jint)getSpanSize {
  return mSpanSize_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_MarginLayoutParams:);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(initWithADXRecyclerView_LayoutParams:);
  methods[4].selector = @selector(getSpanIndex);
  methods[5].selector = @selector(getSpanSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INVALID_SPAN_ID", "I", .constantValue.asInt = ADXGridLayoutManager_LayoutParams_INVALID_SPAN_ID, 0x19, -1, -1, -1, -1 },
    { "mSpanIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSpanSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_MarginLayoutParams;", "LADViewGroup_LayoutParams;", "LADXRecyclerView_LayoutParams;", "LADXGridLayoutManager;" };
  static const J2ObjcClassInfo _ADXGridLayoutManager_LayoutParams = { "LayoutParams", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 6, 3, 4, -1, -1, -1, -1 };
  return &_ADXGridLayoutManager_LayoutParams;
}

@end

void ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(ADXGridLayoutManager_LayoutParams *self, jint width, jint height) {
  ADXRecyclerView_LayoutParams_initWithInt_withInt_(self, width, height);
  self->mSpanIndex_ = ADXGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
  self->mSpanSize_ = 0;
}

ADXGridLayoutManager_LayoutParams *new_ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager_LayoutParams, initWithInt_withInt_, width, height)
}

ADXGridLayoutManager_LayoutParams *create_ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(ADXGridLayoutManager_LayoutParams *self, ADViewGroup_MarginLayoutParams *source) {
  ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->mSpanIndex_ = ADXGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
  self->mSpanSize_ = 0;
}

ADXGridLayoutManager_LayoutParams *new_ADXGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager_LayoutParams, initWithADViewGroup_MarginLayoutParams_, source)
}

ADXGridLayoutManager_LayoutParams *create_ADXGridLayoutManager_LayoutParams_initWithADViewGroup_MarginLayoutParams_(ADViewGroup_MarginLayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager_LayoutParams, initWithADViewGroup_MarginLayoutParams_, source)
}

void ADXGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(ADXGridLayoutManager_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->mSpanIndex_ = ADXGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
  self->mSpanSize_ = 0;
}

ADXGridLayoutManager_LayoutParams *new_ADXGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXGridLayoutManager_LayoutParams *create_ADXGridLayoutManager_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADXGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXGridLayoutManager_LayoutParams *self, ADXRecyclerView_LayoutParams *source) {
  ADXRecyclerView_LayoutParams_initWithADXRecyclerView_LayoutParams_(self, source);
  self->mSpanIndex_ = ADXGridLayoutManager_LayoutParams_INVALID_SPAN_ID;
  self->mSpanSize_ = 0;
}

ADXGridLayoutManager_LayoutParams *new_ADXGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXGridLayoutManager_LayoutParams, initWithADXRecyclerView_LayoutParams_, source)
}

ADXGridLayoutManager_LayoutParams *create_ADXGridLayoutManager_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXGridLayoutManager_LayoutParams, initWithADXRecyclerView_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayoutManager_LayoutParams)
