//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSNavigationDrawerPlugin\src\main\java\com\ashera\drawerlayout\DrawerLayoutImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "ConverterFactory.h"
#include "DrawerLayout.h"
#include "DrawerLayoutImpl.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASDrawerLayoutImpl () {
 @public
  id uiView_;
  ADXDrawerLayout *drawerLayout_;
  jint drawerGravity_;
  id<JavaUtilMap> listeners_;
  jint startX_;
  jboolean mouseMoved_;
  jint edgeSize_;
  jint animationDurationInMs_;
  ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *builder_;
  ASDrawerLayoutImpl_DrawerLayoutBean *bean_;
  ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder *paramsBuilder_;
  ASDrawerLayoutImpl_DrawerLayoutParamsBean *paramsBean_;
  id<ASIWidget> animatingWidget_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXDrawerLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setDrawerGravityWithId:(id)objValue;

- (void)handleChildAdditionWithASIWidget:(id<ASIWidget>)w
                                 withInt:(jint)index
                              withADView:(ADView *)view;

- (void)addViewWithADView:(ADView *)view
                  withInt:(jint)index
withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams;

- (id)isOpenStart;

- (id)isOpenEnd;

- (void)setDrawerListenerWithADXDrawerLayout_DrawerListener:(id<ADXDrawerLayout_DrawerListener>)drawerListener;

- (void)openDrawerWithId:(id)objValue;

- (void)closeDrawerWithId:(id)objValue;

- (void)smoothSlideViewToWithADView:(ADView *)drawerView
                            withInt:(jint)x
                            withInt:(jint)y;

- (jboolean)isLeftDrawerWithADView:(ADView *)view;

- (jboolean)isRightDrawerWithADView:(ADView *)view;

- (jboolean)isContentViewWithASIWidget:(id<ASIWidget>)widget;

- (void)handlePanStartWithInt:(jint)eventX;

- (void)handlePanEndOfDrawerWithASIWidget:(id<ASIWidget>)widget;

- (void)handleRightDrawerPanEndWithASIWidget:(id<ASIWidget>)widget
                                  withADView:(ADView *)view;

- (void)handleLeftDrawerPanEndWithASIWidget:(id<ASIWidget>)widget
                                 withADView:(ADView *)view;

- (void)handlePanDragOfDrawerWithInt:(jint)eventX
                       withASIWidget:(id<ASIWidget>)widget;

- (void)handlePanDragWithInt:(jint)eventX;

- (void)handlePanEnd;

- (jboolean)isLeftDrawerDraggedWithInt:(jint)x;

- (jboolean)isRightDrawerDraggedWithInt:(jint)x;

- (jint)getContentViewWidth;

- (void)resetPanVars;

- (jint)getGravityWithADView:(ADView *)view;

- (void)hideDrawerViewWithADView:(ADView *)drawerView;

- (void)updateDrawerViewStateWithASIWidget:(id<ASIWidget>)widget;

- (void)updateDrawerViewStateWithASIWidget:(id<ASIWidget>)widget
                                   withInt:(jint)currentX;

- (void)setEdgeSizeWithId:(id)objValue;

- (void)setAnimationDurationWithId:(id)objValue;

- (void)createBlurredPanelWithId:(id)objValue;

- (void)nativeUpdateBlurredPanelBoundsWithId:(id)objview;

- (void)hideBlurredPanel;

- (void)addUIPanGestureRecognizerForDrawerWithId:(id)objview;

- (void)addUIPanGestureRecognizerWithId:(id)objview;

- (void)updateStateWithInt:(jint)currentX;

- (void)animateViewWithASIWidget:(id<ASIWidget>)child
                         withInt:(jint)x
                         withInt:(jint)y;

- (void)nativeAnimateWithId:(id)objview
                    withInt:(jint)x
                    withInt:(jint)y;

- (void)updateXWithId:(id)objview
              withInt:(jint)x;

- (jint)getCurrentXWithId:(id)objview;

- (void)handleDragOfDrawerWithInt:(jint)eventX
                           withId:(id)uiview;

- (void)handleDragEndOfDrawerWithId:(id)uiview;

- (void)setScrimColorWithId:(id)objValue;

- (jboolean)requiresCurrentXCorrection;

@end

J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, drawerLayout_, ADXDrawerLayout *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, listeners_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, builder_, ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, bean_, ASDrawerLayoutImpl_DrawerLayoutBean *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, paramsBuilder_, ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, paramsBean_, ASDrawerLayoutImpl_DrawerLayoutParamsBean *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl, animatingWidget_, id<ASIWidget>)

__attribute__((unused)) static void ASDrawerLayoutImpl_setWidgetOnNativeClass(ASDrawerLayoutImpl *self);

__attribute__((unused)) static void ASDrawerLayoutImpl_createLayoutParamsWithADView_(ASDrawerLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADXDrawerLayout_LayoutParams *ASDrawerLayoutImpl_getLayoutParamsWithADView_(ASDrawerLayoutImpl *self, ADView *view);

__attribute__((unused)) static void ASDrawerLayoutImpl_setDrawerGravityWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_handleChildAdditionWithASIWidget_withInt_withADView_(ASDrawerLayoutImpl *self, id<ASIWidget> w, jint index, ADView *view);

__attribute__((unused)) static void ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(ASDrawerLayoutImpl *self, ADView *view, jint index, ADViewGroup_LayoutParams *layoutParams);

__attribute__((unused)) static id ASDrawerLayoutImpl_isOpenStart(ASDrawerLayoutImpl *self);

__attribute__((unused)) static id ASDrawerLayoutImpl_isOpenEnd(ASDrawerLayoutImpl *self);

__attribute__((unused)) static void ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(ASDrawerLayoutImpl *self, id<ADXDrawerLayout_DrawerListener> drawerListener);

__attribute__((unused)) static void ASDrawerLayoutImpl_openDrawerWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_closeDrawerWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_smoothSlideViewToWithADView_withInt_withInt_(ASDrawerLayoutImpl *self, ADView *drawerView, jint x, jint y);

__attribute__((unused)) static jboolean ASDrawerLayoutImpl_isLeftDrawerWithADView_(ASDrawerLayoutImpl *self, ADView *view);

__attribute__((unused)) static jboolean ASDrawerLayoutImpl_isRightDrawerWithADView_(ASDrawerLayoutImpl *self, ADView *view);

__attribute__((unused)) static jboolean ASDrawerLayoutImpl_isContentViewWithASIWidget_(ASDrawerLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASDrawerLayoutImpl_handlePanStartWithInt_(ASDrawerLayoutImpl *self, jint eventX);

__attribute__((unused)) static void ASDrawerLayoutImpl_handlePanEndOfDrawerWithASIWidget_(ASDrawerLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASDrawerLayoutImpl_handleRightDrawerPanEndWithASIWidget_withADView_(ASDrawerLayoutImpl *self, id<ASIWidget> widget, ADView *view);

__attribute__((unused)) static void ASDrawerLayoutImpl_handleLeftDrawerPanEndWithASIWidget_withADView_(ASDrawerLayoutImpl *self, id<ASIWidget> widget, ADView *view);

__attribute__((unused)) static void ASDrawerLayoutImpl_handlePanDragOfDrawerWithInt_withASIWidget_(ASDrawerLayoutImpl *self, jint eventX, id<ASIWidget> widget);

__attribute__((unused)) static void ASDrawerLayoutImpl_handlePanDragWithInt_(ASDrawerLayoutImpl *self, jint eventX);

__attribute__((unused)) static void ASDrawerLayoutImpl_handlePanEnd(ASDrawerLayoutImpl *self);

__attribute__((unused)) static jboolean ASDrawerLayoutImpl_isLeftDrawerDraggedWithInt_(ASDrawerLayoutImpl *self, jint x);

__attribute__((unused)) static jboolean ASDrawerLayoutImpl_isRightDrawerDraggedWithInt_(ASDrawerLayoutImpl *self, jint x);

__attribute__((unused)) static jint ASDrawerLayoutImpl_getContentViewWidth(ASDrawerLayoutImpl *self);

__attribute__((unused)) static void ASDrawerLayoutImpl_resetPanVars(ASDrawerLayoutImpl *self);

__attribute__((unused)) static jint ASDrawerLayoutImpl_getGravityWithADView_(ASDrawerLayoutImpl *self, ADView *view);

__attribute__((unused)) static void ASDrawerLayoutImpl_hideDrawerViewWithADView_(ASDrawerLayoutImpl *self, ADView *drawerView);

__attribute__((unused)) static void ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_(ASDrawerLayoutImpl *self, id<ASIWidget> widget);

__attribute__((unused)) static void ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_withInt_(ASDrawerLayoutImpl *self, id<ASIWidget> widget, jint currentX);

__attribute__((unused)) static void ASDrawerLayoutImpl_setEdgeSizeWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_setAnimationDurationWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_createBlurredPanelWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_nativeUpdateBlurredPanelBoundsWithId_(ASDrawerLayoutImpl *self, id objview);

__attribute__((unused)) static void ASDrawerLayoutImpl_hideBlurredPanel(ASDrawerLayoutImpl *self);

__attribute__((unused)) static void ASDrawerLayoutImpl_addUIPanGestureRecognizerForDrawerWithId_(ASDrawerLayoutImpl *self, id objview);

__attribute__((unused)) static void ASDrawerLayoutImpl_addUIPanGestureRecognizerWithId_(ASDrawerLayoutImpl *self, id objview);

__attribute__((unused)) static void ASDrawerLayoutImpl_updateStateWithInt_(ASDrawerLayoutImpl *self, jint currentX);

__attribute__((unused)) static void ASDrawerLayoutImpl_animateViewWithASIWidget_withInt_withInt_(ASDrawerLayoutImpl *self, id<ASIWidget> child, jint x, jint y);

__attribute__((unused)) static void ASDrawerLayoutImpl_nativeAnimateWithId_withInt_withInt_(ASDrawerLayoutImpl *self, id objview, jint x, jint y);

__attribute__((unused)) static void ASDrawerLayoutImpl_updateXWithId_withInt_(ASDrawerLayoutImpl *self, id objview, jint x);

__attribute__((unused)) static jint ASDrawerLayoutImpl_getCurrentXWithId_(ASDrawerLayoutImpl *self, id objview);

__attribute__((unused)) static void ASDrawerLayoutImpl_handleDragOfDrawerWithInt_withId_(ASDrawerLayoutImpl *self, jint eventX, id uiview);

__attribute__((unused)) static void ASDrawerLayoutImpl_handleDragEndOfDrawerWithId_(ASDrawerLayoutImpl *self, id uiview);

__attribute__((unused)) static void ASDrawerLayoutImpl_setScrimColorWithId_(ASDrawerLayoutImpl *self, id objValue);

__attribute__((unused)) static jboolean ASDrawerLayoutImpl_requiresCurrentXCorrection(ASDrawerLayoutImpl *self);

@interface ASDrawerLayoutImpl_DrawerLockMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerLockMode, mapping_, id<JavaUtilMap>)

@interface ASDrawerLayoutImpl_DrawerLayoutExt () {
 @public
  __unsafe_unretained ASDrawerLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASDrawerLayoutImpl_DrawerListener : NSObject < ADXDrawerLayout_DrawerListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onDrawerSlideWithADView:(ADView *)drawerView
                      withFloat:(jfloat)slideOffset;

- (id<JavaUtilMap>)getOnDrawerSlideEventObjWithADView:(ADView *)drawerView
                                            withFloat:(jfloat)slideOffset;

- (void)onDrawerOpenedWithADView:(ADView *)drawerView;

- (id<JavaUtilMap>)getOnDrawerOpenedEventObjWithADView:(ADView *)drawerView;

- (void)onDrawerClosedWithADView:(ADView *)drawerView;

- (id<JavaUtilMap>)getOnDrawerClosedEventObjWithADView:(ADView *)drawerView;

- (void)onDrawerStateChangedWithInt:(jint)newState;

- (id<JavaUtilMap>)getOnDrawerStateChangedEventObjWithInt:(jint)newState;

@end

J2OBJC_EMPTY_STATIC_INIT(ASDrawerLayoutImpl_DrawerListener)

J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_DrawerListener, action_, NSString *)

__attribute__((unused)) static void ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(ASDrawerLayoutImpl_DrawerListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASDrawerLayoutImpl_DrawerListener *new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASDrawerLayoutImpl_DrawerListener *create_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(ASDrawerLayoutImpl_DrawerListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASDrawerLayoutImpl_DrawerListener *new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASDrawerLayoutImpl_DrawerListener *create_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASDrawerLayoutImpl_DrawerListener)

@interface ASDrawerLayoutImpl_DrawerLayoutCommandBuilder () {
 @public
  ASDrawerLayoutImpl *this$0_;
}

@end

@interface ASDrawerLayoutImpl_DrawerLayoutBean () {
 @public
  ASDrawerLayoutImpl *this$0_;
}

@end

@interface ASDrawerLayoutImpl_BlurredPanelClickListener : NSObject < ADView_OnClickListener > {
 @public
  __unsafe_unretained ASDrawerLayoutImpl *this$0_;
  id objValue_;
}

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$
                                    withId:(id)objValue;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASDrawerLayoutImpl_BlurredPanelClickListener)

J2OBJC_FIELD_SETTER(ASDrawerLayoutImpl_BlurredPanelClickListener, objValue_, id)

__attribute__((unused)) static void ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(ASDrawerLayoutImpl_BlurredPanelClickListener *self, ASDrawerLayoutImpl *outer$, id objValue);

__attribute__((unused)) static ASDrawerLayoutImpl_BlurredPanelClickListener *new_ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(ASDrawerLayoutImpl *outer$, id objValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASDrawerLayoutImpl_BlurredPanelClickListener *create_ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(ASDrawerLayoutImpl *outer$, id objValue);

J2OBJC_TYPE_LITERAL_HEADER(ASDrawerLayoutImpl_BlurredPanelClickListener)

NSString *ASDrawerLayoutImpl_LOCAL_NAME = @"androidx.drawerlayout.widget.DrawerLayout";
NSString *ASDrawerLayoutImpl_GROUP_NAME = @"androidx.drawerlayout.widget.DrawerLayout";

@implementation ASDrawerLayoutImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"openDrawer"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"closeDrawer"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrimColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"animationDurationInMs"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.drawerlayout.widget.DrawerLayout.drawerLockMode", new_ASDrawerLayoutImpl_DrawerLockMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawerLockMode"])) withTypeWithNSString:@"androidx.drawerlayout.widget.DrawerLayout.drawerLockMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDrawerSlide"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDrawerOpened"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDrawerClosed"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDrawerStateChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawerGravity"])) withTypeWithNSString:@"gravity"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"isOpenStart"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"isOpenEnd"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"edgeSize"])) withTypeWithNSString:@"dimension"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASDrawerLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASDrawerLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASDrawerLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASDrawerLayoutImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  drawerLayout_ = new_ASDrawerLayoutImpl_DrawerLayoutExt_initWithASDrawerLayoutImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASDrawerLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASDrawerLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return drawerLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXDrawerLayout *) nil_chk(drawerLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXDrawerLayout *) nil_chk(drawerLayout_)) getChildCount]) {
    [((ADXDrawerLayout *) nil_chk(drawerLayout_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASDrawerLayoutImpl_createLayoutParamsWithADView_(self, view);
    ASDrawerLayoutImpl_handleChildAdditionWithASIWidget_withInt_withADView_(self, w, index, view);
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASDrawerLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXDrawerLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASDrawerLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXDrawerLayout_LayoutParams *layoutParams = ASDrawerLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADXDrawerLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXDrawerLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXDrawerLayout_LayoutParams *layoutParams = ASDrawerLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXDrawerLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXDrawerLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASDrawerLayoutImpl_DrawerLayoutExt *) nil_chk(((ASDrawerLayoutImpl_DrawerLayoutExt *) cast_chk(drawerLayout_, [ASDrawerLayoutImpl_DrawerLayoutExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"openDrawer", @"closeDrawer", @"scrimColor", @"animationDurationInMs", @"drawerLockMode", @"onDrawerSlide", @"onDrawerOpened", @"onDrawerClosed", @"onDrawerStateChange", @"drawerGravity", @"edgeSize" }, 11)) {
    case 0:
    {
      ASDrawerLayoutImpl_openDrawerWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASDrawerLayoutImpl_closeDrawerWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASDrawerLayoutImpl_setScrimColorWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASDrawerLayoutImpl_setAnimationDurationWithId_(self, objValue);
    }
    break;
    case 4:
    {
      [((ADXDrawerLayout *) nil_chk(drawerLayout_)) setDrawerLockModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 5:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onDrawerSlide"));
      }
      else {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, (id<ADXDrawerLayout_DrawerListener>) cast_check(objValue, ADXDrawerLayout_DrawerListener_class_()));
      }
    }
    break;
    case 6:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onDrawerOpened"));
      }
      else {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, (id<ADXDrawerLayout_DrawerListener>) cast_check(objValue, ADXDrawerLayout_DrawerListener_class_()));
      }
    }
    break;
    case 7:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onDrawerClosed"));
      }
      else {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, (id<ADXDrawerLayout_DrawerListener>) cast_check(objValue, ADXDrawerLayout_DrawerListener_class_()));
      }
    }
    break;
    case 8:
    {
      if ([objValue isKindOfClass:[NSString class]]) {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onDrawerStateChange"));
      }
      else {
        ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, (id<ADXDrawerLayout_DrawerListener>) cast_check(objValue, ADXDrawerLayout_DrawerListener_class_()));
      }
    }
    break;
    case 9:
    {
      ASDrawerLayoutImpl_setDrawerGravityWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASDrawerLayoutImpl_setEdgeSizeWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"isOpenStart", @"isOpenEnd" }, 2)) {
    case 0:
    {
      return ASDrawerLayoutImpl_isOpenStart(self);
    }
    case 1:
    {
      return ASDrawerLayoutImpl_isOpenEnd(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setDrawerGravityWithId:(id)objValue {
  ASDrawerLayoutImpl_setDrawerGravityWithId_(self, objValue);
}

- (void)handleChildAdditionWithASIWidget:(id<ASIWidget>)w
                                 withInt:(jint)index
                              withADView:(ADView *)view {
  ASDrawerLayoutImpl_handleChildAdditionWithASIWidget_withInt_withADView_(self, w, index, view);
}

- (void)addViewWithADView:(ADView *)view
                  withInt:(jint)index
withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams {
  ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(self, view, index, layoutParams);
}

- (id)isOpenStart {
  return ASDrawerLayoutImpl_isOpenStart(self);
}

- (id)isOpenEnd {
  return ASDrawerLayoutImpl_isOpenEnd(self);
}

- (void)setDrawerListenerWithADXDrawerLayout_DrawerListener:(id<ADXDrawerLayout_DrawerListener>)drawerListener {
  ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(self, drawerListener);
}

- (void)openDrawerWithId:(id)objValue {
  ASDrawerLayoutImpl_openDrawerWithId_(self, objValue);
}

- (void)closeDrawerWithId:(id)objValue {
  ASDrawerLayoutImpl_closeDrawerWithId_(self, objValue);
}

- (void)smoothSlideViewToWithADView:(ADView *)drawerView
                            withInt:(jint)x
                            withInt:(jint)y {
  ASDrawerLayoutImpl_smoothSlideViewToWithADView_withInt_withInt_(self, drawerView, x, y);
}

- (jboolean)isLeftDrawerWithADView:(ADView *)view {
  return ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view);
}

- (jboolean)isRightDrawerWithADView:(ADView *)view {
  return ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view);
}

- (jboolean)isContentViewWithASIWidget:(id<ASIWidget>)widget {
  return ASDrawerLayoutImpl_isContentViewWithASIWidget_(self, widget);
}

- (void)handlePanStartWithInt:(jint)eventX {
  ASDrawerLayoutImpl_handlePanStartWithInt_(self, eventX);
}

- (void)handlePanEndOfDrawerWithASIWidget:(id<ASIWidget>)widget {
  ASDrawerLayoutImpl_handlePanEndOfDrawerWithASIWidget_(self, widget);
}

- (void)handleRightDrawerPanEndWithASIWidget:(id<ASIWidget>)widget
                                  withADView:(ADView *)view {
  ASDrawerLayoutImpl_handleRightDrawerPanEndWithASIWidget_withADView_(self, widget, view);
}

- (void)handleLeftDrawerPanEndWithASIWidget:(id<ASIWidget>)widget
                                 withADView:(ADView *)view {
  ASDrawerLayoutImpl_handleLeftDrawerPanEndWithASIWidget_withADView_(self, widget, view);
}

- (void)handlePanDragOfDrawerWithInt:(jint)eventX
                       withASIWidget:(id<ASIWidget>)widget {
  ASDrawerLayoutImpl_handlePanDragOfDrawerWithInt_withASIWidget_(self, eventX, widget);
}

- (void)handlePanDragWithInt:(jint)eventX {
  ASDrawerLayoutImpl_handlePanDragWithInt_(self, eventX);
}

- (void)handlePanEnd {
  ASDrawerLayoutImpl_handlePanEnd(self);
}

- (jboolean)isLeftDrawerDraggedWithInt:(jint)x {
  return ASDrawerLayoutImpl_isLeftDrawerDraggedWithInt_(self, x);
}

- (jboolean)isRightDrawerDraggedWithInt:(jint)x {
  return ASDrawerLayoutImpl_isRightDrawerDraggedWithInt_(self, x);
}

- (jint)getContentViewWidth {
  return ASDrawerLayoutImpl_getContentViewWidth(self);
}

- (void)resetPanVars {
  ASDrawerLayoutImpl_resetPanVars(self);
}

- (jint)getGravityWithADView:(ADView *)view {
  return ASDrawerLayoutImpl_getGravityWithADView_(self, view);
}

- (void)hideDrawerViewWithADView:(ADView *)drawerView {
  ASDrawerLayoutImpl_hideDrawerViewWithADView_(self, drawerView);
}

- (void)updateDrawerViewStateWithASIWidget:(id<ASIWidget>)widget {
  ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_(self, widget);
}

- (void)updateDrawerViewStateWithASIWidget:(id<ASIWidget>)widget
                                   withInt:(jint)currentX {
  ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_withInt_(self, widget, currentX);
}

- (void)setEdgeSizeWithId:(id)objValue {
  ASDrawerLayoutImpl_setEdgeSizeWithId_(self, objValue);
}

- (void)setAnimationDurationWithId:(id)objValue {
  ASDrawerLayoutImpl_setAnimationDurationWithId_(self, objValue);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXDrawerLayout *) nil_chk(drawerLayout_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASDrawerLayoutImpl_DrawerLayoutBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASDrawerLayoutImpl_DrawerLayoutBean_initWithASDrawerLayoutImpl_(self);
  }
  return bean_;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASDrawerLayoutImpl_DrawerLayoutCommandBuilder_initWithASDrawerLayoutImpl_(self);
  }
  return builder_;
}

- (ASDrawerLayoutImpl_DrawerLayoutParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASDrawerLayoutImpl_DrawerLayoutParamsBean_initWithASDrawerLayoutImpl_(self);
  }
  return paramsBean_;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder_initWithASDrawerLayoutImpl_(self);
  }
  return paramsBuilder_;
}

- (void)createBlurredPanelWithId:(id)objValue {
  ASDrawerLayoutImpl_createBlurredPanelWithId_(self, objValue);
}

- (void)nativeUpdateBlurredPanelBoundsWithId:(id)objview {
  ASDrawerLayoutImpl_nativeUpdateBlurredPanelBoundsWithId_(self, objview);
}

- (void)hideBlurredPanel {
  ASDrawerLayoutImpl_hideBlurredPanel(self);
}

- (void)initialized {
  [super initialized];
  for (id<ASIWidget> __strong widget in nil_chk(widgets_)) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
    if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view) || ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
      ASDrawerLayoutImpl_addUIPanGestureRecognizerForDrawerWithId_(self, [widget asNativeWidget]);
    }
    if (ASDrawerLayoutImpl_isContentViewWithASIWidget_(self, widget)) {
      ASDrawerLayoutImpl_addUIPanGestureRecognizerWithId_(self, [widget asNativeWidget]);
    }
  }
}

- (void)addUIPanGestureRecognizerForDrawerWithId:(id)objview {
  ASDrawerLayoutImpl_addUIPanGestureRecognizerForDrawerWithId_(self, objview);
}

- (void)addUIPanGestureRecognizerWithId:(id)objview {
  ASDrawerLayoutImpl_addUIPanGestureRecognizerWithId_(self, objview);
}

-(void)move:(UIPanGestureRecognizer*)tapRecognizer {
  int x = [tapRecognizer locationInView:self->uiView_].x;
  if (tapRecognizer.state == UIGestureRecognizerStateBegan) {
    [self handlePanStartWithInt:x];
  } else if (tapRecognizer.state == UIGestureRecognizerStateEnded || tapRecognizer.state == UIGestureRecognizerStateCancelled) {
    [self handlePanEnd];
  } else {
    [self handlePanDragWithInt:x];
  }
}

-(void)moveDrawer:(UIPanGestureRecognizer*)tapRecognizer {
  int x = [tapRecognizer locationInView:self->uiView_].x;
  if (tapRecognizer.state == UIGestureRecognizerStateBegan) {
    [self handlePanStartWithInt:x];
  } else if (tapRecognizer.state == UIGestureRecognizerStateEnded || tapRecognizer.state == UIGestureRecognizerStateCancelled) {
    [self handleDragEndOfDrawerWithId:tapRecognizer.view];
  } else {
    [self handleDragOfDrawerWithInt:x withId:tapRecognizer.view];
  }
}

-(void)animationDidUpdate {
  UIView* uiview = (UIView*)[self->animatingWidget_ asNativeWidget];
  CALayer* calayer =  ((CALayer*)uiview.layer.presentationLayer);
  [self updateStateWithInt: calayer.frame.origin.x];
}

- (void)updateStateWithInt:(jint)currentX {
  ASDrawerLayoutImpl_updateStateWithInt_(self, currentX);
}

- (void)animateViewWithASIWidget:(id<ASIWidget>)child
                         withInt:(jint)x
                         withInt:(jint)y {
  ASDrawerLayoutImpl_animateViewWithASIWidget_withInt_withInt_(self, child, x, y);
}

- (void)nativeAnimateWithId:(id)objview
                    withInt:(jint)x
                    withInt:(jint)y {
  ASDrawerLayoutImpl_nativeAnimateWithId_withInt_withInt_(self, objview, x, y);
}

- (void)updateXWithId:(id)objview
              withInt:(jint)x {
  ASDrawerLayoutImpl_updateXWithId_withInt_(self, objview, x);
}

- (jint)getCurrentXWithId:(id)objview {
  return ASDrawerLayoutImpl_getCurrentXWithId_(self, objview);
}

- (void)handleDragOfDrawerWithInt:(jint)eventX
                           withId:(id)uiview {
  ASDrawerLayoutImpl_handleDragOfDrawerWithInt_withId_(self, eventX, uiview);
}

- (void)handleDragEndOfDrawerWithId:(id)uiview {
  ASDrawerLayoutImpl_handleDragEndOfDrawerWithId_(self, uiview);
}

- (void)setScrimColorWithId:(id)objValue {
  ASDrawerLayoutImpl_setScrimColorWithId_(self, objValue);
}

- (jboolean)requiresCurrentXCorrection {
  return ASDrawerLayoutImpl_requiresCurrentXCorrection(self);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  id<ASIWidget> blurredWidget = [self findWidgetByIdWithNSString:@"@+id/blurredView"];
  if (blurredWidget != nil) {
    id nativeWidget = [blurredWidget asNativeWidget];
    ASDrawerLayoutImpl_nativeUpdateBlurredPanelBoundsWithId_(self, nativeWidget);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXDrawerLayout_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 40, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 41, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 42, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 51, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 52, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 53, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 59, 1, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 61, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 62, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 63, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 67, 68, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 69, 70, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 71, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 77, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(setDrawerGravityWithId:);
  methods[24].selector = @selector(handleChildAdditionWithASIWidget:withInt:withADView:);
  methods[25].selector = @selector(addViewWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[26].selector = @selector(isOpenStart);
  methods[27].selector = @selector(isOpenEnd);
  methods[28].selector = @selector(setDrawerListenerWithADXDrawerLayout_DrawerListener:);
  methods[29].selector = @selector(openDrawerWithId:);
  methods[30].selector = @selector(closeDrawerWithId:);
  methods[31].selector = @selector(smoothSlideViewToWithADView:withInt:withInt:);
  methods[32].selector = @selector(isLeftDrawerWithADView:);
  methods[33].selector = @selector(isRightDrawerWithADView:);
  methods[34].selector = @selector(isContentViewWithASIWidget:);
  methods[35].selector = @selector(handlePanStartWithInt:);
  methods[36].selector = @selector(handlePanEndOfDrawerWithASIWidget:);
  methods[37].selector = @selector(handleRightDrawerPanEndWithASIWidget:withADView:);
  methods[38].selector = @selector(handleLeftDrawerPanEndWithASIWidget:withADView:);
  methods[39].selector = @selector(handlePanDragOfDrawerWithInt:withASIWidget:);
  methods[40].selector = @selector(handlePanDragWithInt:);
  methods[41].selector = @selector(handlePanEnd);
  methods[42].selector = @selector(isLeftDrawerDraggedWithInt:);
  methods[43].selector = @selector(isRightDrawerDraggedWithInt:);
  methods[44].selector = @selector(getContentViewWidth);
  methods[45].selector = @selector(resetPanVars);
  methods[46].selector = @selector(getGravityWithADView:);
  methods[47].selector = @selector(hideDrawerViewWithADView:);
  methods[48].selector = @selector(updateDrawerViewStateWithASIWidget:);
  methods[49].selector = @selector(updateDrawerViewStateWithASIWidget:withInt:);
  methods[50].selector = @selector(setEdgeSizeWithId:);
  methods[51].selector = @selector(setAnimationDurationWithId:);
  methods[52].selector = @selector(setIdWithNSString:);
  methods[53].selector = @selector(getPluginWithNSString:);
  methods[54].selector = @selector(getBean);
  methods[55].selector = @selector(getBuilder);
  methods[56].selector = @selector(getParamsBean);
  methods[57].selector = @selector(getParamsBuilder);
  methods[58].selector = @selector(createBlurredPanelWithId:);
  methods[59].selector = @selector(nativeUpdateBlurredPanelBoundsWithId:);
  methods[60].selector = @selector(hideBlurredPanel);
  methods[61].selector = @selector(initialized);
  methods[62].selector = @selector(addUIPanGestureRecognizerForDrawerWithId:);
  methods[63].selector = @selector(addUIPanGestureRecognizerWithId:);
  methods[64].selector = @selector(updateStateWithInt:);
  methods[65].selector = @selector(animateViewWithASIWidget:withInt:withInt:);
  methods[66].selector = @selector(nativeAnimateWithId:withInt:withInt:);
  methods[67].selector = @selector(updateXWithId:withInt:);
  methods[68].selector = @selector(getCurrentXWithId:);
  methods[69].selector = @selector(handleDragOfDrawerWithInt:withId:);
  methods[70].selector = @selector(handleDragEndOfDrawerWithId:);
  methods[71].selector = @selector(setScrimColorWithId:);
  methods[72].selector = @selector(requiresCurrentXCorrection);
  methods[73].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 78, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "drawerLayout_", "LADXDrawerLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawerGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listeners_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 80, -1 },
    { "startX_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mouseMoved_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "edgeSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "animationDurationInMs_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASDrawerLayoutImpl_DrawerLayoutBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASDrawerLayoutImpl_DrawerLayoutParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "animatingWidget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setDrawerGravity", "LNSObject;", "handleChildAddition", "LASIWidget;ILADView;", "addView", "LADView;ILADViewGroup_LayoutParams;", "setDrawerListener", "LADXDrawerLayout_DrawerListener;", "openDrawer", "closeDrawer", "smoothSlideViewTo", "LADView;II", "isLeftDrawer", "isRightDrawer", "isContentView", "handlePanStart", "handlePanEndOfDrawer", "handleRightDrawerPanEnd", "LASIWidget;LADView;", "handleLeftDrawerPanEnd", "handlePanDragOfDrawer", "ILASIWidget;", "handlePanDrag", "isLeftDrawerDragged", "isRightDrawerDragged", "getGravity", "hideDrawerView", "updateDrawerViewState", "setEdgeSize", "setAnimationDuration", "setId", "getPlugin", "createBlurredPanel", "nativeUpdateBlurredPanelBounds", "addUIPanGestureRecognizerForDrawer", "addUIPanGestureRecognizer", "updateState", "animateView", "LASIWidget;II", "nativeAnimate", "LNSObject;II", "updateX", "LNSObject;I", "getCurrentX", "handleDragOfDrawer", "ILNSObject;", "handleDragEndOfDrawer", "setScrimColor", "nativeMakeFrameForChildWidget", "IIII", &ASDrawerLayoutImpl_LOCAL_NAME, &ASDrawerLayoutImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Landroidx/drawerlayout/widget/DrawerLayout$DrawerListener;>;", "LASDrawerLayoutImpl_DrawerLockMode;LASDrawerLayoutImpl_DrawerLayoutExt;LASDrawerLayoutImpl_DrawerListener;LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;LASDrawerLayoutImpl_DrawerLayoutBean;LASDrawerLayoutImpl_DrawerLayoutParamsBean;LASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder;LASDrawerLayoutImpl_BlurredPanelClickListener;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl = { "DrawerLayoutImpl", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0x1, 74, 15, -1, 81, -1, -1, -1 };
  return &_ASDrawerLayoutImpl;
}

@end

void ASDrawerLayoutImpl_init(ASDrawerLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASDrawerLayoutImpl_GROUP_NAME, ASDrawerLayoutImpl_LOCAL_NAME);
  self->drawerGravity_ = ADGravity_START;
  self->listeners_ = new_JavaUtilHashMap_init();
  self->startX_ = -1;
  self->mouseMoved_ = false;
  self->animationDurationInMs_ = 200;
}

ASDrawerLayoutImpl *new_ASDrawerLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl, init)
}

ASDrawerLayoutImpl *create_ASDrawerLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl, init)
}

void ASDrawerLayoutImpl_initWithNSString_(ASDrawerLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASDrawerLayoutImpl_GROUP_NAME, localname);
  self->drawerGravity_ = ADGravity_START;
  self->listeners_ = new_JavaUtilHashMap_init();
  self->startX_ = -1;
  self->mouseMoved_ = false;
  self->animationDurationInMs_ = 200;
}

ASDrawerLayoutImpl *new_ASDrawerLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl, initWithNSString_, localname)
}

ASDrawerLayoutImpl *create_ASDrawerLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl, initWithNSString_, localname)
}

void ASDrawerLayoutImpl_initWithNSString_withNSString_(ASDrawerLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->drawerGravity_ = ADGravity_START;
  self->listeners_ = new_JavaUtilHashMap_init();
  self->startX_ = -1;
  self->mouseMoved_ = false;
  self->animationDurationInMs_ = 200;
}

ASDrawerLayoutImpl *new_ASDrawerLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASDrawerLayoutImpl *create_ASDrawerLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASDrawerLayoutImpl_setWidgetOnNativeClass(ASDrawerLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASDrawerLayoutImpl_createLayoutParamsWithADView_(ASDrawerLayoutImpl *self, ADView *view) {
  ADXDrawerLayout_LayoutParams *layoutParams = (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  layoutParams = (ADXDrawerLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXDrawerLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXDrawerLayout_LayoutParams *ASDrawerLayoutImpl_getLayoutParamsWithADView_(ASDrawerLayoutImpl *self, ADView *view) {
  return (ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]);
}

void ASDrawerLayoutImpl_setDrawerGravityWithId_(ASDrawerLayoutImpl *self, id objValue) {
  self->drawerGravity_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASDrawerLayoutImpl_handleChildAdditionWithASIWidget_withInt_withADView_(ASDrawerLayoutImpl *self, id<ASIWidget> w, jint index, ADView *view) {
  ADViewGroup_LayoutParams *layoutParams = [((ADView *) nil_chk(view)) getLayoutParams];
  NSString *id_ = [((id<ASIWidget>) nil_chk(w)) getId];
  if ([@"@+id/drawerlayout" isEqual:id_]) {
    ADXDrawerLayout_LayoutParams *drawerLayoutParams = (ADXDrawerLayout_LayoutParams *) cast_chk(layoutParams, [ADXDrawerLayout_LayoutParams class]);
    ((ADXDrawerLayout_LayoutParams *) nil_chk(drawerLayoutParams))->gravity_ = self->drawerGravity_;
    ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(self, view, index, layoutParams);
  }
  else if ([@"@+id/drawerlayoutstart" isEqual:id_]) {
    ADXDrawerLayout_LayoutParams *drawerLayoutParams = (ADXDrawerLayout_LayoutParams *) cast_chk(layoutParams, [ADXDrawerLayout_LayoutParams class]);
    ((ADXDrawerLayout_LayoutParams *) nil_chk(drawerLayoutParams))->gravity_ = ADGravity_START;
    ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(self, view, index, layoutParams);
  }
  else if ([@"@+id/drawerlayoutend" isEqual:id_]) {
    ADXDrawerLayout_LayoutParams *drawerLayoutParams = (ADXDrawerLayout_LayoutParams *) cast_chk(layoutParams, [ADXDrawerLayout_LayoutParams class]);
    ((ADXDrawerLayout_LayoutParams *) nil_chk(drawerLayoutParams))->gravity_ = ADGravity_END;
    ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(self, view, index, layoutParams);
  }
  else {
    ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(self, view, index, layoutParams);
  }
}

void ASDrawerLayoutImpl_addViewWithADView_withInt_withADViewGroup_LayoutParams_(ASDrawerLayoutImpl *self, ADView *view, jint index, ADViewGroup_LayoutParams *layoutParams) {
  if (index == -1) {
    [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) addViewWithADView:view withInt:index withADViewGroup_LayoutParams:layoutParams];
  }
  else {
    [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) addViewWithADView:view withADViewGroup_LayoutParams:layoutParams];
  }
}

id ASDrawerLayoutImpl_isOpenStart(ASDrawerLayoutImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) isDrawerOpenWithInt:ADGravity_START]);
}

id ASDrawerLayoutImpl_isOpenEnd(ASDrawerLayoutImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) isDrawerOpenWithInt:ADGravity_END]);
}

void ASDrawerLayoutImpl_setDrawerListenerWithADXDrawerLayout_DrawerListener_(ASDrawerLayoutImpl *self, id<ADXDrawerLayout_DrawerListener> drawerListener) {
  NSString *action = [((id<ASIListener>) nil_chk(((id<ASIListener>) cast_check(drawerListener, ASIListener_class_())))) getAction];
  id<ADXDrawerLayout_DrawerListener> existingDrawerListener = [((id<JavaUtilMap>) nil_chk(self->listeners_)) getWithId:action];
  if (existingDrawerListener != nil) {
    [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) removeDrawerListenerWithADXDrawerLayout_DrawerListener:existingDrawerListener];
  }
  (void) [((id<JavaUtilMap>) nil_chk(self->listeners_)) putWithId:action withId:drawerListener];
  [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) addDrawerListenerWithADXDrawerLayout_DrawerListener:drawerListener];
}

void ASDrawerLayoutImpl_openDrawerWithId_(ASDrawerLayoutImpl *self, id objValue) {
  ASDrawerLayoutImpl_createBlurredPanelWithId_(self, objValue);
  [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) openDrawerWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASDrawerLayoutImpl_closeDrawerWithId_(ASDrawerLayoutImpl *self, id objValue) {
  ASDrawerLayoutImpl_hideBlurredPanel(self);
  [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) closeDrawerWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASDrawerLayoutImpl_smoothSlideViewToWithADView_withInt_withInt_(ASDrawerLayoutImpl *self, ADView *drawerView, jint x, jint y) {
  for (id<JavaUtilIterator> iterator = [((id<JavaUtilList>) nil_chk(self->widgets_)) iterator]; [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
    id<ASIWidget> child = [iterator next];
    id childView = [((id<ASIWidget>) nil_chk(child)) asWidget];
    if (childView == drawerView) {
      ASDrawerLayoutImpl_animateViewWithASIWidget_withInt_withInt_(self, child, x, y);
      break;
    }
  }
  ASDrawerLayoutImpl_resetPanVars(self);
}

jboolean ASDrawerLayoutImpl_isLeftDrawerWithADView_(ASDrawerLayoutImpl *self, ADView *view) {
  jint gravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(ASDrawerLayoutImpl_getGravityWithADView_(self, view), [((ADView *) nil_chk(view)) getLayoutDirection]);
  return gravity == ADGravity_LEFT;
}

jboolean ASDrawerLayoutImpl_isRightDrawerWithADView_(ASDrawerLayoutImpl *self, ADView *view) {
  jint gravity = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(ASDrawerLayoutImpl_getGravityWithADView_(self, view), [((ADView *) nil_chk(view)) getLayoutDirection]);
  return gravity == ADGravity_RIGHT;
}

jboolean ASDrawerLayoutImpl_isContentViewWithASIWidget_(ASDrawerLayoutImpl *self, id<ASIWidget> widget) {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  return [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) isViewContentViewWithADView:view] && ![@"@+id/blurredView" isEqual:[widget getId]];
}

void ASDrawerLayoutImpl_handlePanStartWithInt_(ASDrawerLayoutImpl *self, jint eventX) {
  self->mouseMoved_ = false;
  self->startX_ = eventX;
}

void ASDrawerLayoutImpl_handlePanEndOfDrawerWithASIWidget_(ASDrawerLayoutImpl *self, id<ASIWidget> widget) {
  if (self->mouseMoved_) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
    if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view)) {
      ASDrawerLayoutImpl_handleLeftDrawerPanEndWithASIWidget_withADView_(self, widget, view);
    }
    if (ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
      ASDrawerLayoutImpl_handleRightDrawerPanEndWithASIWidget_withADView_(self, widget, view);
    }
  }
  ASDrawerLayoutImpl_resetPanVars(self);
}

void ASDrawerLayoutImpl_handleRightDrawerPanEndWithASIWidget_withADView_(ASDrawerLayoutImpl *self, id<ASIWidget> widget, ADView *view) {
  id nativeWidget = [((id<ASIWidget>) nil_chk(widget)) asNativeWidget];
  jint gravity = ASDrawerLayoutImpl_getGravityWithADView_(self, view);
  jint contentViewWidth = ASDrawerLayoutImpl_getContentViewWidth(self);
  if (JavaLangMath_absWithInt_(contentViewWidth - ASDrawerLayoutImpl_getCurrentXWithId_(self, nativeWidget)) >= JreIntDiv([((ADView *) nil_chk(view)) getMeasuredWidth], 2)) {
    ASDrawerLayoutImpl_openDrawerWithId_(self, JavaLangInteger_valueOfWithInt_(gravity));
  }
  else {
    ASDrawerLayoutImpl_closeDrawerWithId_(self, JavaLangInteger_valueOfWithInt_(gravity));
  }
}

void ASDrawerLayoutImpl_handleLeftDrawerPanEndWithASIWidget_withADView_(ASDrawerLayoutImpl *self, id<ASIWidget> widget, ADView *view) {
  id nativeWidget = [((id<ASIWidget>) nil_chk(widget)) asNativeWidget];
  jint gravity = ASDrawerLayoutImpl_getGravityWithADView_(self, view);
  if (JavaLangMath_absWithInt_(ASDrawerLayoutImpl_getCurrentXWithId_(self, nativeWidget)) <= JreIntDiv([((ADView *) nil_chk(view)) getMeasuredWidth], 2)) {
    ASDrawerLayoutImpl_openDrawerWithId_(self, JavaLangInteger_valueOfWithInt_(gravity));
  }
  else {
    ASDrawerLayoutImpl_closeDrawerWithId_(self, JavaLangInteger_valueOfWithInt_(gravity));
  }
}

void ASDrawerLayoutImpl_handlePanDragOfDrawerWithInt_withASIWidget_(ASDrawerLayoutImpl *self, jint eventX, id<ASIWidget> widget) {
  if (self->startX_ != -1) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
    if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view)) {
      if ([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) getDrawerLockModeWithADView:view] != ADXDrawerLayout_LOCK_MODE_LOCKED_CLOSED) {
        jint correction = 0;
        if (ASDrawerLayoutImpl_requiresCurrentXCorrection(self)) {
          correction = ASDrawerLayoutImpl_getCurrentXWithId_(self, [widget asNativeWidget]);
        }
        jint x = correction + (eventX - self->startX_);
        if (x <= 0) {
          self->mouseMoved_ = true;
          ASDrawerLayoutImpl_updateXWithId_withInt_(self, [widget asNativeWidget], x);
        }
      }
    }
    if (ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
      if ([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) getDrawerLockModeWithADView:view] != ADXDrawerLayout_LOCK_MODE_LOCKED_CLOSED) {
        jint initX = [((ADView *) nil_chk(((ADView *) cast_chk([((ADView *) nil_chk(view)) getParent], [ADView class])))) getMeasuredWidth] - [view getMeasuredWidth];
        jint correction = ASDrawerLayoutImpl_requiresCurrentXCorrection(self) ? ASDrawerLayoutImpl_getCurrentXWithId_(self, [widget asNativeWidget]) : initX;
        jint x = correction + (eventX - self->startX_);
        if (x >= initX) {
          self->mouseMoved_ = true;
          ASDrawerLayoutImpl_updateXWithId_withInt_(self, [widget asNativeWidget], x);
        }
      }
    }
  }
}

void ASDrawerLayoutImpl_handlePanDragWithInt_(ASDrawerLayoutImpl *self, jint eventX) {
  if (self->startX_ != -1) {
    if (ASDrawerLayoutImpl_isLeftDrawerDraggedWithInt_(self, self->startX_)) {
      for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
        ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
        if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view)) {
          if ([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) getDrawerLockModeWithADView:view] != ADXDrawerLayout_LOCK_MODE_LOCKED_CLOSED) {
            jint gravity = ASDrawerLayoutImpl_getGravityWithADView_(self, view);
            ASDrawerLayoutImpl_createBlurredPanelWithId_(self, JavaLangInteger_valueOfWithInt_(gravity));
            [((ADView *) nil_chk(view)) setVisibilityWithInt:ADView_VISIBLE];
            jint x = eventX - [view getMeasuredWidth] - self->startX_;
            if (x <= 0) {
              self->mouseMoved_ = true;
              ASDrawerLayoutImpl_updateXWithId_withInt_(self, [widget asNativeWidget], x);
            }
          }
          break;
        }
      }
    }
    if (ASDrawerLayoutImpl_isRightDrawerDraggedWithInt_(self, self->startX_)) {
      jint contentViewWidth = ASDrawerLayoutImpl_getContentViewWidth(self);
      for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
        ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
        if (ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
          if ([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) getDrawerLockModeWithADView:view] != ADXDrawerLayout_LOCK_MODE_LOCKED_CLOSED) {
            jint gravity = ASDrawerLayoutImpl_getGravityWithADView_(self, view);
            ASDrawerLayoutImpl_createBlurredPanelWithId_(self, JavaLangInteger_valueOfWithInt_(gravity));
            [((ADView *) nil_chk(view)) setVisibilityWithInt:ADView_VISIBLE];
            jint x = contentViewWidth - (self->startX_ - eventX);
            if (x >= (contentViewWidth - [view getMeasuredWidth])) {
              self->mouseMoved_ = true;
              ASDrawerLayoutImpl_updateXWithId_withInt_(self, [widget asNativeWidget], x);
            }
          }
          break;
        }
      }
    }
  }
}

void ASDrawerLayoutImpl_handlePanEnd(ASDrawerLayoutImpl *self) {
  if (ASDrawerLayoutImpl_isLeftDrawerDraggedWithInt_(self, self->startX_)) {
    for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
      ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
      if (self->mouseMoved_) {
        if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view)) {
          ASDrawerLayoutImpl_handleLeftDrawerPanEndWithASIWidget_withADView_(self, widget, view);
        }
      }
    }
  }
  if (ASDrawerLayoutImpl_isRightDrawerDraggedWithInt_(self, self->startX_)) {
    for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
      ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
      if (self->mouseMoved_) {
        if (ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
          ASDrawerLayoutImpl_handleRightDrawerPanEndWithASIWidget_withADView_(self, widget, view);
        }
      }
    }
  }
  ASDrawerLayoutImpl_resetPanVars(self);
}

jboolean ASDrawerLayoutImpl_isLeftDrawerDraggedWithInt_(ASDrawerLayoutImpl *self, jint x) {
  return x <= self->edgeSize_;
}

jboolean ASDrawerLayoutImpl_isRightDrawerDraggedWithInt_(ASDrawerLayoutImpl *self, jint x) {
  jboolean dragged = false;
  for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
    if (ASDrawerLayoutImpl_isContentViewWithASIWidget_(self, widget)) {
      dragged = (x >= ([((ADView *) nil_chk(view)) getMeasuredWidth] - self->edgeSize_));
      break;
    }
  }
  return dragged;
}

jint ASDrawerLayoutImpl_getContentViewWidth(ASDrawerLayoutImpl *self) {
  jint contentViewWidth = 0;
  for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
    if (ASDrawerLayoutImpl_isContentViewWithASIWidget_(self, widget)) {
      contentViewWidth = [((ADView *) nil_chk(view)) getMeasuredWidth];
      break;
    }
  }
  return contentViewWidth;
}

void ASDrawerLayoutImpl_resetPanVars(ASDrawerLayoutImpl *self) {
  self->mouseMoved_ = false;
  self->startX_ = -1;
}

jint ASDrawerLayoutImpl_getGravityWithADView_(ASDrawerLayoutImpl *self, ADView *view) {
  return ((ADXDrawerLayout_LayoutParams *) nil_chk(((ADXDrawerLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXDrawerLayout_LayoutParams class]))))->gravity_;
}

void ASDrawerLayoutImpl_hideDrawerViewWithADView_(ASDrawerLayoutImpl *self, ADView *drawerView) {
  [((ADView *) nil_chk(drawerView)) setVisibilityWithInt:ADView_INVISIBLE];
  ASDrawerLayoutImpl_hideBlurredPanel(self);
}

void ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_(ASDrawerLayoutImpl *self, id<ASIWidget> widget) {
  jint currentX = ASDrawerLayoutImpl_getCurrentXWithId_(self, [((id<ASIWidget>) nil_chk(widget)) asNativeWidget]);
  ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_withInt_(self, widget, currentX);
}

void ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_withInt_(ASDrawerLayoutImpl *self, id<ASIWidget> widget, jint currentX) {
  ADView *drawerView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  jint state = ADXDrawerLayout_STATE_IDLE;
  if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, drawerView)) {
    if ([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) isOpeningWithADView:drawerView]) {
      if (currentX != 0) {
        [((ADView *) nil_chk(drawerView)) setVisibilityWithInt:ADView_VISIBLE];
        state = ADXDrawerLayout_STATE_SETTLING;
      }
    }
    else {
      if (currentX != -[((ADView *) nil_chk(drawerView)) getMeasuredWidth]) {
        state = ADXDrawerLayout_STATE_SETTLING;
      }
      else {
        ASDrawerLayoutImpl_hideDrawerViewWithADView_(self, drawerView);
      }
    }
  }
  else {
    jint contentViewWidth = ASDrawerLayoutImpl_getContentViewWidth(self);
    jint leftMargin = contentViewWidth - [((ADView *) nil_chk(drawerView)) getMeasuredWidth];
    if ([((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) isOpeningWithADView:drawerView]) {
      if (currentX != leftMargin) {
        [drawerView setVisibilityWithInt:ADView_VISIBLE];
        state = ADXDrawerLayout_STATE_SETTLING;
      }
    }
    else {
      if (currentX != contentViewWidth) {
        state = ADXDrawerLayout_STATE_SETTLING;
      }
      else {
        ASDrawerLayoutImpl_hideDrawerViewWithADView_(self, drawerView);
      }
    }
  }
  [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) onViewPositionChangedWithADView:drawerView withInt:currentX withInt:0 withInt:0 withInt:0];
  [((ADXDrawerLayout *) nil_chk(self->drawerLayout_)) updateDrawerViewStateWithInt:state withADView:drawerView];
}

void ASDrawerLayoutImpl_setEdgeSizeWithId_(ASDrawerLayoutImpl *self, id objValue) {
  self->edgeSize_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASDrawerLayoutImpl_setAnimationDurationWithId_(ASDrawerLayoutImpl *self, id objValue) {
  self->animationDurationInMs_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASDrawerLayoutImpl_createBlurredPanelWithId_(ASDrawerLayoutImpl *self, id objValue) {
  id<ASIWidget> blurredWidget = [self findWidgetByIdWithNSString:@"@+id/blurredView"];
  if (blurredWidget != nil) {
    id nativeWidget = [blurredWidget asNativeWidget];
    ASViewImpl_setVisibilityWithASIWidget_withId_withId_(blurredWidget, nativeWidget, JavaLangInteger_valueOfWithInt_(ADView_VISIBLE));
    ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(blurredWidget, @"onClick", nativeWidget, new_ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(self, objValue));
    ASDrawerLayoutImpl_nativeUpdateBlurredPanelBoundsWithId_(self, nativeWidget);
  }
}

void ASDrawerLayoutImpl_nativeUpdateBlurredPanelBoundsWithId_(ASDrawerLayoutImpl *self, id objview) {
  UIView* uiview = ((UIView*) objview);
  CGRect frame = uiview.frame;
  frame.size.width = uiview.superview.frame.size.width;
  frame.size.height = uiview.superview.frame.size.height;
  uiview.frame = frame;
}

void ASDrawerLayoutImpl_hideBlurredPanel(ASDrawerLayoutImpl *self) {
  id<ASIWidget> blurredWidget = [self findWidgetByIdWithNSString:@"@+id/blurredView"];
  if (blurredWidget != nil) {
    ASViewImpl_setVisibilityWithASIWidget_withId_withId_(blurredWidget, [blurredWidget asNativeWidget], JavaLangInteger_valueOfWithInt_(ADView_GONE));
  }
}

void ASDrawerLayoutImpl_addUIPanGestureRecognizerForDrawerWithId_(ASDrawerLayoutImpl *self, id objview) {
  UIView* uiview = ((UIView*) objview);
  UIPanGestureRecognizer *panRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(moveDrawer:)];
  [panRecognizer setMinimumNumberOfTouches:1];
  [panRecognizer setMaximumNumberOfTouches:1];
  [uiview addGestureRecognizer:panRecognizer];
}

void ASDrawerLayoutImpl_addUIPanGestureRecognizerWithId_(ASDrawerLayoutImpl *self, id objview) {
  UIView* uiview = ((UIView*) objview);
  UIPanGestureRecognizer *panRecognizer = [[UIPanGestureRecognizer alloc] initWithTarget:self action:@selector(move:)];
  [panRecognizer setMinimumNumberOfTouches:1];
  [panRecognizer setMaximumNumberOfTouches:1];
  [uiview addGestureRecognizer:panRecognizer];
}

void ASDrawerLayoutImpl_updateStateWithInt_(ASDrawerLayoutImpl *self, jint currentX) {
  ASDrawerLayoutImpl_updateDrawerViewStateWithASIWidget_withInt_(self, self->animatingWidget_, currentX);
}

void ASDrawerLayoutImpl_animateViewWithASIWidget_withInt_withInt_(ASDrawerLayoutImpl *self, id<ASIWidget> child, jint x, jint y) {
  self->animatingWidget_ = child;
  ASDrawerLayoutImpl_nativeAnimateWithId_withInt_withInt_(self, [((id<ASIWidget>) nil_chk(child)) asNativeWidget], x, y);
}

void ASDrawerLayoutImpl_nativeAnimateWithId_withInt_withInt_(ASDrawerLayoutImpl *self, id objview, jint x, jint y) {
  UIView* uiview = ((UIView*) objview);
  CADisplayLink *displayLink = [CADisplayLink displayLinkWithTarget:self selector:@selector(animationDidUpdate)];
  displayLink.frameInterval = 1;
  [displayLink addToRunLoop:[NSRunLoop currentRunLoop] forMode:NSDefaultRunLoopMode];
  
  [UIView animateWithDuration:(self->animationDurationInMs_/(float)1000) animations:^{
    CGRect frame = uiview.frame;
    frame.origin.x = x;
    frame.origin.y = y;
    uiview.frame = frame;
  }completion:^(BOOL finished) {
    [displayLink invalidate];
  }];
}

void ASDrawerLayoutImpl_updateXWithId_withInt_(ASDrawerLayoutImpl *self, id objview, jint x) {
  UIView* uiview = ((UIView*) objview);
  CGRect frame = uiview.frame;
  frame.origin.x = x;
  uiview.frame = frame;
}

jint ASDrawerLayoutImpl_getCurrentXWithId_(ASDrawerLayoutImpl *self, id objview) {
  UIView* uiview = ((UIView*) objview);
  return uiview.frame.origin.x;
}

void ASDrawerLayoutImpl_handleDragOfDrawerWithInt_withId_(ASDrawerLayoutImpl *self, jint eventX, id uiview) {
  for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
    id nativeWidget = [((id<ASIWidget>) nil_chk(widget)) asNativeWidget];
    if (uiview == nativeWidget) {
      ADView *view = (ADView *) cast_chk([widget asWidget], [ADView class]);
      if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view) || ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
        ASDrawerLayoutImpl_handlePanDragOfDrawerWithInt_withASIWidget_(self, eventX, widget);
      }
      break;
    }
  }
}

void ASDrawerLayoutImpl_handleDragEndOfDrawerWithId_(ASDrawerLayoutImpl *self, id uiview) {
  for (id<ASIWidget> __strong widget in nil_chk(self->widgets_)) {
    id nativeWidget = [((id<ASIWidget>) nil_chk(widget)) asNativeWidget];
    if (uiview == nativeWidget) {
      ADView *view = (ADView *) cast_chk([widget asWidget], [ADView class]);
      if (ASDrawerLayoutImpl_isLeftDrawerWithADView_(self, view) || ASDrawerLayoutImpl_isRightDrawerWithADView_(self, view)) {
        ASDrawerLayoutImpl_handlePanEndOfDrawerWithASIWidget_(self, widget);
      }
      break;
    }
  }
}

void ASDrawerLayoutImpl_setScrimColorWithId_(ASDrawerLayoutImpl *self, id objValue) {
  id<ASIWidget> blurredWidget = [self findWidgetByIdWithNSString:@"@+id/blurredView"];
  if (blurredWidget != nil) {
    id nativeWidget = [blurredWidget asNativeWidget];
    ASViewImpl_setBackgroundColorWithId_withId_(nativeWidget, objValue);
  }
}

jboolean ASDrawerLayoutImpl_requiresCurrentXCorrection(ASDrawerLayoutImpl *self) {
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl)

@implementation ASDrawerLayoutImpl_DrawerLockMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASDrawerLayoutImpl_DrawerLockMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASDrawerLayoutImpl;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerLockMode = { "DrawerLockMode", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASDrawerLayoutImpl_DrawerLockMode;
}

@end

void ASDrawerLayoutImpl_DrawerLockMode_init(ASDrawerLayoutImpl_DrawerLockMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"LOCK_MODE_UNLOCKED" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"LOCK_MODE_LOCKED_CLOSED" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"LOCK_MODE_LOCKED_OPEN" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"LOCK_MODE_UNDEFINED" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASDrawerLayoutImpl_DrawerLockMode *new_ASDrawerLayoutImpl_DrawerLockMode_init() {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerLockMode, init)
}

ASDrawerLayoutImpl_DrawerLockMode *create_ASDrawerLayoutImpl_DrawerLockMode_init() {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerLockMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerLockMode)

@implementation ASDrawerLayoutImpl_DrawerLayoutExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$ {
  ASDrawerLayoutImpl_DrawerLayoutExt_initWithASDrawerLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ nativeMakeFrameForChildWidgetWithInt:l withInt:t withInt:r withInt:b];
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)smoothSlideViewToWithADView:(ADView *)drawerView
                            withInt:(jint)x
                            withInt:(jint)y {
  ASDrawerLayoutImpl_smoothSlideViewToWithADView_withInt_withInt_(this$0_, drawerView, x, y);
}

- (void)__javaClone:(ASDrawerLayoutImpl_DrawerLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASDrawerLayoutImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  methods[18].selector = @selector(smoothSlideViewToWithADView:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASDrawerLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASDrawerLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility", "smoothSlideViewTo", "LADView;II" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerLayoutExt = { "DrawerLayoutExt", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0x1, 19, 5, 3, -1, -1, -1, -1 };
  return &_ASDrawerLayoutImpl_DrawerLayoutExt;
}

@end

void ASDrawerLayoutImpl_DrawerLayoutExt_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl_DrawerLayoutExt *self, ASDrawerLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADXDrawerLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASDrawerLayoutImpl_DrawerLayoutExt *new_ASDrawerLayoutImpl_DrawerLayoutExt_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerLayoutExt, initWithASDrawerLayoutImpl_, outer$)
}

ASDrawerLayoutImpl_DrawerLayoutExt *create_ASDrawerLayoutImpl_DrawerLayoutExt_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerLayoutExt, initWithASDrawerLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerLayoutExt)

@implementation ASDrawerLayoutImpl_DrawerListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onDrawerSlideWithADView:(ADView *)drawerView
                      withFloat:(jfloat)slideOffset {
  if (action_ == nil || [action_ isEqual:@"onDrawerSlide"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDrawerSlide"];
    id<JavaUtilMap> obj = [self getOnDrawerSlideEventObjWithADView:drawerView withFloat:slideOffset];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ drawerView, JavaLangFloat_valueOfWithFloat_(slideOffset) } count:2 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnDrawerSlideEventObjWithADView:(ADView *)drawerView
                                            withFloat:(jfloat)slideOffset {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"drawerslide"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"slideOffset", JavaLangFloat_valueOfWithFloat_(slideOffset));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDrawerSlide" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onDrawerOpenedWithADView:(ADView *)drawerView {
  if (action_ == nil || [action_ isEqual:@"onDrawerOpened"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDrawerOpened"];
    id<JavaUtilMap> obj = [self getOnDrawerOpenedEventObjWithADView:drawerView];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ drawerView } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnDrawerOpenedEventObjWithADView:(ADView *)drawerView {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"draweropened"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDrawerOpened" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onDrawerClosedWithADView:(ADView *)drawerView {
  if (action_ == nil || [action_ isEqual:@"onDrawerClosed"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDrawerClosed"];
    id<JavaUtilMap> obj = [self getOnDrawerClosedEventObjWithADView:drawerView];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ drawerView } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnDrawerClosedEventObjWithADView:(ADView *)drawerView {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"drawerclosed"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDrawerClosed" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (void)onDrawerStateChangedWithInt:(jint)newState {
  if (action_ == nil || [action_ isEqual:@"onDrawerStateChanged"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDrawerStateChanged"];
    id<JavaUtilMap> obj = [self getOnDrawerStateChangedEventObjWithInt:newState];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(newState) } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnDrawerStateChangedEventObjWithInt:(jint)newState {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"drawerstatechanged"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"newState", JavaLangInteger_valueOfWithInt_(newState));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDrawerStateChanged" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 8, 7, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 11, 7, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 14, 13, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onDrawerSlideWithADView:withFloat:);
  methods[4].selector = @selector(getOnDrawerSlideEventObjWithADView:withFloat:);
  methods[5].selector = @selector(onDrawerOpenedWithADView:);
  methods[6].selector = @selector(getOnDrawerOpenedEventObjWithADView:);
  methods[7].selector = @selector(onDrawerClosedWithADView:);
  methods[8].selector = @selector(getOnDrawerClosedEventObjWithADView:);
  methods[9].selector = @selector(onDrawerStateChangedWithInt:);
  methods[10].selector = @selector(getOnDrawerStateChangedEventObjWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onDrawerSlide", "LADView;F", "getOnDrawerSlideEventObj", "(Lr/android/view/View;F)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onDrawerOpened", "LADView;", "getOnDrawerOpenedEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "onDrawerClosed", "getOnDrawerClosedEventObj", "onDrawerStateChanged", "I", "getOnDrawerStateChangedEventObj", "(I)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASDrawerLayoutImpl;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerListener = { "DrawerListener", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0xa, 11, 4, 16, -1, -1, -1, -1 };
  return &_ASDrawerLayoutImpl_DrawerListener;
}

@end

void ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(ASDrawerLayoutImpl_DrawerListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASDrawerLayoutImpl_DrawerListener *new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerListener, initWithASIWidget_withNSString_, w, strValue)
}

ASDrawerLayoutImpl_DrawerListener *create_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(ASDrawerLayoutImpl_DrawerListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASDrawerLayoutImpl_DrawerListener *new_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASDrawerLayoutImpl_DrawerListener *create_ASDrawerLayoutImpl_DrawerListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerListener)

@implementation ASDrawerLayoutImpl_DrawerLayoutCommandBuilder

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$ {
  ASDrawerLayoutImpl_DrawerLayoutCommandBuilder_initWithASDrawerLayoutImpl_(self, outer$);
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)openDrawerWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"openDrawer"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)closeDrawerWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"closeDrawer"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setScrimColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrimColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setAnimationDurationInMsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"animationDurationInMs"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setDrawerLockModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawerLockMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setOnDrawerSlideWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onDrawerSlide"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setOnDrawerOpenedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onDrawerOpened"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setOnDrawerClosedWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onDrawerClosed"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setOnDrawerStateChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onDrawerStateChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)setDrawerGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawerGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)tryGetIsOpenStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"isOpenStart_"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIsOpenStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"isOpenStart_"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)tryGetIsOpenEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"isOpenEnd_"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIsOpenEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"isOpenEnd_"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *)edgeSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"edgeSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASDrawerLayoutImpl_DrawerLayoutCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASDrawerLayoutImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(openDrawerWithNSString:);
  methods[3].selector = @selector(closeDrawerWithNSString:);
  methods[4].selector = @selector(setScrimColorWithNSString:);
  methods[5].selector = @selector(setAnimationDurationInMsWithInt:);
  methods[6].selector = @selector(setDrawerLockModeWithNSString:);
  methods[7].selector = @selector(setOnDrawerSlideWithNSString:);
  methods[8].selector = @selector(setOnDrawerOpenedWithNSString:);
  methods[9].selector = @selector(setOnDrawerClosedWithNSString:);
  methods[10].selector = @selector(setOnDrawerStateChangeWithNSString:);
  methods[11].selector = @selector(setDrawerGravityWithNSString:);
  methods[12].selector = @selector(tryGetIsOpenStart);
  methods[13].selector = @selector(isIsOpenStart);
  methods[14].selector = @selector(tryGetIsOpenEnd);
  methods[15].selector = @selector(isIsOpenEnd);
  methods[16].selector = @selector(edgeSizeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASDrawerLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASDrawerLayoutImpl;", "execute", "Z", "openDrawer", "LNSString;", "closeDrawer", "setScrimColor", "setAnimationDurationInMs", "I", "setDrawerLockMode", "setOnDrawerSlide", "setOnDrawerOpened", "setOnDrawerClosed", "setOnDrawerStateChange", "setDrawerGravity", "edgeSize", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/drawerlayout/DrawerLayoutImpl$DrawerLayoutCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerLayoutCommandBuilder = { "DrawerLayoutCommandBuilder", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0x1, 17, 1, 0, -1, -1, 16, -1 };
  return &_ASDrawerLayoutImpl_DrawerLayoutCommandBuilder;
}

@end

void ASDrawerLayoutImpl_DrawerLayoutCommandBuilder_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *self, ASDrawerLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *new_ASDrawerLayoutImpl_DrawerLayoutCommandBuilder_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerLayoutCommandBuilder, initWithASDrawerLayoutImpl_, outer$)
}

ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *create_ASDrawerLayoutImpl_DrawerLayoutCommandBuilder_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerLayoutCommandBuilder, initWithASDrawerLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerLayoutCommandBuilder)

@implementation ASDrawerLayoutImpl_DrawerLayoutBean

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$ {
  ASDrawerLayoutImpl_DrawerLayoutBean_initWithASDrawerLayoutImpl_(self, outer$);
  return self;
}

- (void)openDrawerWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) openDrawerWithNSString:value])) executeWithBoolean:true];
}

- (void)closeDrawerWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) closeDrawerWithNSString:value])) executeWithBoolean:true];
}

- (void)setScrimColorWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrimColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setAnimationDurationInMsWithInt:(jint)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAnimationDurationInMsWithInt:value])) executeWithBoolean:true];
}

- (void)setDrawerLockModeWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawerLockModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnDrawerSlideWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnDrawerSlideWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnDrawerOpenedWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnDrawerOpenedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnDrawerClosedWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnDrawerClosedWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnDrawerStateChangeWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnDrawerStateChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawerGravityWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawerGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)isIsOpenStart {
  return [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIsOpenStart])) executeWithBoolean:false])) isIsOpenStart];
}

- (id)isIsOpenEnd {
  return [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIsOpenEnd])) executeWithBoolean:false])) isIsOpenEnd];
}

- (void)edgeSizeWithNSString:(NSString *)value {
  (void) [((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([((ASDrawerLayoutImpl_DrawerLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) edgeSizeWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASDrawerLayoutImpl:);
  methods[1].selector = @selector(openDrawerWithNSString:);
  methods[2].selector = @selector(closeDrawerWithNSString:);
  methods[3].selector = @selector(setScrimColorWithNSString:);
  methods[4].selector = @selector(setAnimationDurationInMsWithInt:);
  methods[5].selector = @selector(setDrawerLockModeWithNSString:);
  methods[6].selector = @selector(setOnDrawerSlideWithNSString:);
  methods[7].selector = @selector(setOnDrawerOpenedWithNSString:);
  methods[8].selector = @selector(setOnDrawerClosedWithNSString:);
  methods[9].selector = @selector(setOnDrawerStateChangeWithNSString:);
  methods[10].selector = @selector(setDrawerGravityWithNSString:);
  methods[11].selector = @selector(isIsOpenStart);
  methods[12].selector = @selector(isIsOpenEnd);
  methods[13].selector = @selector(edgeSizeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASDrawerLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASDrawerLayoutImpl;", "openDrawer", "LNSString;", "closeDrawer", "setScrimColor", "setAnimationDurationInMs", "I", "setDrawerLockMode", "setOnDrawerSlide", "setOnDrawerOpened", "setOnDrawerClosed", "setOnDrawerStateChange", "setDrawerGravity", "edgeSize" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerLayoutBean = { "DrawerLayoutBean", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0x1, 14, 1, 0, -1, -1, -1, -1 };
  return &_ASDrawerLayoutImpl_DrawerLayoutBean;
}

@end

void ASDrawerLayoutImpl_DrawerLayoutBean_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl_DrawerLayoutBean *self, ASDrawerLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASDrawerLayoutImpl_DrawerLayoutBean *new_ASDrawerLayoutImpl_DrawerLayoutBean_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerLayoutBean, initWithASDrawerLayoutImpl_, outer$)
}

ASDrawerLayoutImpl_DrawerLayoutBean *create_ASDrawerLayoutImpl_DrawerLayoutBean_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerLayoutBean, initWithASDrawerLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerLayoutBean)

@implementation ASDrawerLayoutImpl_DrawerLayoutParamsBean

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$ {
  ASDrawerLayoutImpl_DrawerLayoutParamsBean_initWithASDrawerLayoutImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASDrawerLayoutImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASDrawerLayoutImpl;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerLayoutParamsBean = { "DrawerLayoutParamsBean", "com.ashera.drawerlayout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASDrawerLayoutImpl_DrawerLayoutParamsBean;
}

@end

void ASDrawerLayoutImpl_DrawerLayoutParamsBean_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl_DrawerLayoutParamsBean *self, ASDrawerLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASDrawerLayoutImpl_DrawerLayoutParamsBean *new_ASDrawerLayoutImpl_DrawerLayoutParamsBean_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerLayoutParamsBean, initWithASDrawerLayoutImpl_, outer$)
}

ASDrawerLayoutImpl_DrawerLayoutParamsBean *create_ASDrawerLayoutImpl_DrawerLayoutParamsBean_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerLayoutParamsBean, initWithASDrawerLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerLayoutParamsBean)

@implementation ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$ {
  ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder_initWithASDrawerLayoutImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASDrawerLayoutImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASDrawerLayoutImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/drawerlayout/DrawerLayoutImpl$DrawerLayoutCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder = { "DrawerLayoutCommandParamsBuilder", "com.ashera.drawerlayout", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder;
}

@end

void ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder *self, ASDrawerLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder *new_ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder, initWithASDrawerLayoutImpl_, outer$)
}

ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder *create_ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder_initWithASDrawerLayoutImpl_(ASDrawerLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder, initWithASDrawerLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_DrawerLayoutCommandParamsBuilder)

@implementation ASDrawerLayoutImpl_BlurredPanelClickListener

- (instancetype)initWithASDrawerLayoutImpl:(ASDrawerLayoutImpl *)outer$
                                    withId:(id)objValue {
  ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(self, outer$, objValue);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  ASDrawerLayoutImpl_closeDrawerWithId_(this$0_, objValue_);
}

- (void)__javaClone:(ASDrawerLayoutImpl_BlurredPanelClickListener *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASDrawerLayoutImpl:withId:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASDrawerLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "objValue_", "LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASDrawerLayoutImpl;LNSObject;", "onClick", "LADView;", "LASDrawerLayoutImpl;" };
  static const J2ObjcClassInfo _ASDrawerLayoutImpl_BlurredPanelClickListener = { "BlurredPanelClickListener", "com.ashera.drawerlayout", ptrTable, methods, fields, 7, 0x2, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASDrawerLayoutImpl_BlurredPanelClickListener;
}

@end

void ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(ASDrawerLayoutImpl_BlurredPanelClickListener *self, ASDrawerLayoutImpl *outer$, id objValue) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->objValue_ = objValue;
}

ASDrawerLayoutImpl_BlurredPanelClickListener *new_ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(ASDrawerLayoutImpl *outer$, id objValue) {
  J2OBJC_NEW_IMPL(ASDrawerLayoutImpl_BlurredPanelClickListener, initWithASDrawerLayoutImpl_withId_, outer$, objValue)
}

ASDrawerLayoutImpl_BlurredPanelClickListener *create_ASDrawerLayoutImpl_BlurredPanelClickListener_initWithASDrawerLayoutImpl_withId_(ASDrawerLayoutImpl *outer$, id objValue) {
  J2OBJC_CREATE_IMPL(ASDrawerLayoutImpl_BlurredPanelClickListener, initWithASDrawerLayoutImpl_withId_, outer$, objValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawerLayoutImpl_BlurredPanelClickListener)
