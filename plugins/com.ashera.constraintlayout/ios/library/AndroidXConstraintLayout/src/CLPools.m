//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\CLPools.java
//

#include "CLPools.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/IllegalArgumentException.h"


@interface ADXCLPools ()

- (instancetype)initPackagePrivate;

@end

inline jboolean ADXCLPools_get_DEBUG(void);
#define ADXCLPools_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXCLPools, DEBUG, jboolean)

__attribute__((unused)) static void ADXCLPools_initPackagePrivate(ADXCLPools *self);

__attribute__((unused)) static ADXCLPools *new_ADXCLPools_initPackagePrivate(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCLPools *create_ADXCLPools_initPackagePrivate(void);

@interface ADXCLPools_Pool : NSObject

@end

@interface ADXCLPools_SimplePool () {
 @public
  IOSObjectArray *mPool_;
  jint mPoolSize_;
}

- (jboolean)isInPoolWithId:(id)instance;

@end

J2OBJC_FIELD_SETTER(ADXCLPools_SimplePool, mPool_, IOSObjectArray *)

__attribute__((unused)) static jboolean ADXCLPools_SimplePool_isInPoolWithId_(ADXCLPools_SimplePool *self, id instance);

@implementation ADXCLPools

- (instancetype)initPackagePrivate {
  ADXCLPools_initPackagePrivate(self);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXCLPools_DEBUG, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCLPools_Pool;LADXCLPools_SimplePool;" };
  static const J2ObjcClassInfo _ADXCLPools = { "CLPools", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x10, 1, 1, -1, 0, -1, -1, -1 };
  return &_ADXCLPools;
}

@end

void ADXCLPools_initPackagePrivate(ADXCLPools *self) {
  NSObject_init(self);
}

ADXCLPools *new_ADXCLPools_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADXCLPools, initPackagePrivate)
}

ADXCLPools *create_ADXCLPools_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADXCLPools, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLPools)

@implementation ADXCLPools_Pool

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, 0, -1, -1 },
    { NULL, "Z", 0x401, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(acquire);
  methods[1].selector = @selector(release__WithId:);
  methods[2].selector = @selector(releaseAllWithNSObjectArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "()TT;", "release", "LNSObject;", "(TT;)Z", "releaseAll", "[LNSObject;I", "([TT;I)V", "LADXCLPools;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXCLPools_Pool = { "Pool", "androidx.constraintlayout.core", ptrTable, methods, NULL, 7, 0x608, 3, 0, 7, -1, -1, 8, -1 };
  return &_ADXCLPools_Pool;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXCLPools_Pool)

@implementation ADXCLPools_SimplePool

- (instancetype)initWithInt:(jint)maxPoolSize {
  ADXCLPools_SimplePool_initWithInt_(self, maxPoolSize);
  return self;
}

- (id)acquire {
  if (mPoolSize_ > 0) {
    jint lastPooledIndex = mPoolSize_ - 1;
    id instance = IOSObjectArray_Get(nil_chk(mPool_), lastPooledIndex);
    IOSObjectArray_Set(mPool_, lastPooledIndex, nil);
    mPoolSize_--;
    return instance;
  }
  return nil;
}

- (jboolean)release__WithId:(id)instance {
  if (mPoolSize_ < ((IOSObjectArray *) nil_chk(mPool_))->size_) {
    IOSObjectArray_Set(mPool_, mPoolSize_, instance);
    mPoolSize_++;
    return true;
  }
  return false;
}

- (void)releaseAllWithNSObjectArray:(IOSObjectArray *)variables
                            withInt:(jint)count {
  if (count > ((IOSObjectArray *) nil_chk(variables))->size_) {
    count = variables->size_;
  }
  for (jint i = 0; i < count; i++) {
    id instance = IOSObjectArray_Get(variables, i);
    if (mPoolSize_ < ((IOSObjectArray *) nil_chk(mPool_))->size_) {
      IOSObjectArray_Set(mPool_, mPoolSize_, instance);
      mPoolSize_++;
    }
  }
}

- (jboolean)isInPoolWithId:(id)instance {
  return ADXCLPools_SimplePool_isInPoolWithId_(self, instance);
}

- (void)dealloc {
  RELEASE_(mPool_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "Z", 0x2, 8, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(acquire);
  methods[2].selector = @selector(release__WithId:);
  methods[3].selector = @selector(releaseAllWithNSObjectArray:withInt:);
  methods[4].selector = @selector(isInPoolWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPool_", "[LNSObject;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPoolSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "()TT;", "release", "LNSObject;", "(TT;)Z", "releaseAll", "[LNSObject;I", "([TT;I)V", "isInPool", "LADXCLPools;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Landroidx/constraintlayout/core/CLPools$Pool<TT;>;" };
  static const J2ObjcClassInfo _ADXCLPools_SimplePool = { "SimplePool", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x8, 5, 2, 9, -1, -1, 10, -1 };
  return &_ADXCLPools_SimplePool;
}

@end

void ADXCLPools_SimplePool_initWithInt_(ADXCLPools_SimplePool *self, jint maxPoolSize) {
  NSObject_init(self);
  if (maxPoolSize <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The max pool size must be > 0");
  }
  JreStrongAssignAndConsume(&self->mPool_, [IOSObjectArray newArrayWithLength:maxPoolSize type:NSObject_class_()]);
}

ADXCLPools_SimplePool *new_ADXCLPools_SimplePool_initWithInt_(jint maxPoolSize) {
  J2OBJC_NEW_IMPL(ADXCLPools_SimplePool, initWithInt_, maxPoolSize)
}

ADXCLPools_SimplePool *create_ADXCLPools_SimplePool_initWithInt_(jint maxPoolSize) {
  J2OBJC_CREATE_IMPL(ADXCLPools_SimplePool, initWithInt_, maxPoolSize)
}

jboolean ADXCLPools_SimplePool_isInPoolWithId_(ADXCLPools_SimplePool *self, id instance) {
  for (jint i = 0; i < self->mPoolSize_; i++) {
    if (IOSObjectArray_Get(nil_chk(self->mPool_), i) == instance) {
      return true;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLPools_SimplePool)
