//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\BaseWidget.java
//

#include "AttributeCommand.h"
#include "AttributeCommandChain.h"
#include "BaseHasWidgets.h"
#include "BaseWidget.h"
#include "ConverterFactory.h"
#include "Error.h"
#include "EventBus.h"
#include "ExpressionMethodHandler.h"
#include "HasWidgets.h"
#include "ICompositeDecorator.h"
#include "IConverter.h"
#include "IFlatMap.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "LoopParam.h"
#include "ModelDataType.h"
#include "ModelExpressionParser.h"
#include "ModelScope.h"
#include "ModelStore.h"
#include "PlainMap.h"
#include "PlainMapException.h"
#include "PluginInvoker.h"
#include "ResourceBundleUtils.h"
#include "StringUtils.h"
#include "WidgetAttribute.h"
#include "WidgetAttributeMap.h"
#include "WidgetAttributeMapFilter.h"
#include "WidgetAttributeValue.h"
#include "WidgetFactory.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/NoSuchFieldException.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/Runnable.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Field.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASBaseWidget () {
 @public
  id<ASIWidgetLifeCycleListener> listener_;
  __unsafe_unretained ASEventBus *eventBus_;
  id<JavaUtilMap> cachedDecorators_;
  NSString *id__;
  NSString *behaviorGroupId_;
  id<JavaUtilList> eventBusHandlers_;
  jboolean initialised_;
  id<JavaUtilMap> attributeCommandChainMap_;
  id<JavaUtilMap> updateAttributes_;
  id<JavaUtilMap> attributeCommandMap_;
  id<JavaUtilMap> commandPhases_;
  id<JavaUtilList> bufferedAttributes_;
  jboolean onMethodCalled_;
  jint zIndex_;
  id<JavaUtilSet> eventBubblers_;
  NSString *modelParam_;
  NSString *modelIdPath_;
  NSString *modelSyncEvents_;
  NSString *modelPojoToUi_;
  NSString *modelUiToPojo_;
  ASLoopParam *loopParam_;
  NSString *modelPojoToUiParams_;
  NSString *modelUiToPojoEventIds_;
  jboolean invalidateOnFrameChange_;
  NSString *formGroupId_;
  NSString *errorStyle_;
  NSString *normalStyle_;
  jint validationErrorDisplayType_;
  id<JavaUtilList> customErrorMessageKeys_;
  id<JavaUtilList> customErrorMessageValues_;
}

- (void)addAttributeCommandToChainWithNSString:(NSString *)sourceName
                             withNSStringArray:(IOSObjectArray *)attributes
                        withASAttributeCommand:(id<ASAttributeCommand>)attributeCommand;

- (void)applyStyleToWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                  withASIWidget:(id<ASIWidget>)childWidget
                                         withId:(id)objValue
                                   withNSString:(NSString *)phase;

- (void)applyStyleToWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                  withASIWidget:(id<ASIWidget>)childWidget
                                         withId:(id)objValue
                                   withNSString:(NSString *)phase
                                    withBoolean:(jboolean)skipConvert;

- (void)applyStyleToWidgetWithoutBufferingWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                                  withASIWidget:(id<ASIWidget>)childWidget
                                                         withId:(id)objValue
                                                   withNSString:(NSString *)phase
                                                    withBoolean:(jboolean)skipConvert;

- (id)handleArrayTypeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                              withNSString:(NSString *)type
                                    withId:(id)convertedValue;

- (id)handleArrayTypeWithId:(id)objValue
               withNSString:(NSString *)arrayType
               withNSString:(NSString *)finalArrayType;

- (id)getConvertedValueWithNSString:(NSString *)attr;

- (id<ASILifeCycleDecorator>)getDecoratorWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

- (NSString *)stripOSWithNSString:(NSString *)key;

- (jint)convertToIntFromDpWithNSString:(NSString *)dimension;

- (void)handlePathWithJavaUtilMap:(id<JavaUtilMap>)map
                    withASIWidget:(id<ASIWidget>)w
                          withInt:(jint)methods;

- (jint)compareByValueWithJavaUtilMap:(id<JavaUtilMap>)payLoad
                         withNSString:(NSString *)a
                         withNSString:(NSString *)b
                         withNSString:(NSString *)orderKey;

- (id)getAttributeValueFromWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                         withASIWidget:(id<ASIWidget>)childWidget;

- (void)syncPojoToUi;

- (void)storeModelToScopeFromModelParam;

- (void)handleModelUiToPojo;

- (void)loadAndAddWidgetsWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                       withId:(id)handler
                                 withNSString:(NSString *)idKey
                              withASLoopParam:(ASLoopParam *)model;

- (id<ASIWidget>)loadWidgetWithASIWidget:(id<ASIWidget>)objWidget
                                  withId:(id)handler
                            withNSString:(NSString *)idKey
                         withASLoopParam:(ASLoopParam *)model
                                 withInt:(jint)index;

@end

J2OBJC_FIELD_SETTER(ASBaseWidget, listener_, id<ASIWidgetLifeCycleListener>)
J2OBJC_FIELD_SETTER(ASBaseWidget, cachedDecorators_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASBaseWidget, id__, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, behaviorGroupId_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, eventBusHandlers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASBaseWidget, attributeCommandChainMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASBaseWidget, updateAttributes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASBaseWidget, attributeCommandMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASBaseWidget, commandPhases_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASBaseWidget, bufferedAttributes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASBaseWidget, eventBubblers_, id<JavaUtilSet>)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelParam_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelIdPath_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelSyncEvents_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelPojoToUi_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelUiToPojo_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, loopParam_, ASLoopParam *)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelPojoToUiParams_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, modelUiToPojoEventIds_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, formGroupId_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, errorStyle_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, normalStyle_, NSString *)
J2OBJC_FIELD_SETTER(ASBaseWidget, customErrorMessageKeys_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASBaseWidget, customErrorMessageValues_, id<JavaUtilList>)

__attribute__((unused)) static void ASBaseWidget_addAttributeCommandToChainWithNSString_withNSStringArray_withASAttributeCommand_(ASBaseWidget *self, NSString *sourceName, IOSObjectArray *attributes, id<ASAttributeCommand> attributeCommand);

__attribute__((unused)) static void ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue, NSString *phase);

__attribute__((unused)) static void ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue, NSString *phase, jboolean skipConvert);

__attribute__((unused)) static void ASBaseWidget_applyStyleToWidgetWithoutBufferingWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue, NSString *phase, jboolean skipConvert);

__attribute__((unused)) static id ASBaseWidget_handleArrayTypeWithASWidgetAttribute_withNSString_withId_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, NSString *type, id convertedValue);

__attribute__((unused)) static id ASBaseWidget_handleArrayTypeWithId_withNSString_withNSString_(ASBaseWidget *self, id objValue, NSString *arrayType, NSString *finalArrayType);

__attribute__((unused)) static id ASBaseWidget_getConvertedValueWithNSString_(ASBaseWidget *self, NSString *attr);

__attribute__((unused)) static id<ASILifeCycleDecorator> ASBaseWidget_getDecoratorWithASWidgetAttribute_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute);

__attribute__((unused)) static void ASBaseWidget_createWithASIFragment_withJavaUtilMap_(ASBaseWidget *self, id<ASIFragment> fragment, id<JavaUtilMap> params);

__attribute__((unused)) static NSString *ASBaseWidget_stripOSWithNSString_(ASBaseWidget *self, NSString *key);

__attribute__((unused)) static jint ASBaseWidget_convertToIntFromDpWithNSString_(ASBaseWidget *self, NSString *dimension);

__attribute__((unused)) static void ASBaseWidget_handlePathWithJavaUtilMap_withASIWidget_withInt_(ASBaseWidget *self, id<JavaUtilMap> map, id<ASIWidget> w, jint methods);

__attribute__((unused)) static jint ASBaseWidget_compareByValueWithJavaUtilMap_withNSString_withNSString_withNSString_(ASBaseWidget *self, id<JavaUtilMap> payLoad, NSString *a, NSString *b, NSString *orderKey);

__attribute__((unused)) static id ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget);

__attribute__((unused)) static void ASBaseWidget_syncPojoToUi(ASBaseWidget *self);

__attribute__((unused)) static void ASBaseWidget_storeModelToScopeFromModelParam(ASBaseWidget *self);

__attribute__((unused)) static void ASBaseWidget_handleModelUiToPojo(ASBaseWidget *self);

__attribute__((unused)) static void ASBaseWidget_loadAndAddWidgetsWithJavaUtilIterator_withId_withNSString_withASLoopParam_(ASBaseWidget *self, id<JavaUtilIterator> iterator, id handler, NSString *idKey, ASLoopParam *model);

__attribute__((unused)) static id<ASIWidget> ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(ASBaseWidget *self, id<ASIWidget> objWidget, id handler, NSString *idKey, ASLoopParam *model, jint index);

@interface ASBaseWidget_LazyBaseWidget () {
 @public
  __unsafe_unretained ASBaseWidget *this$0_;
}

@end

inline NSString *ASBaseWidget_LazyBaseWidget_get_LOCAL_NAME(void);
static NSString *ASBaseWidget_LazyBaseWidget_LOCAL_NAME = @"LazyBaseWidget";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASBaseWidget_LazyBaseWidget, LOCAL_NAME, NSString *)

@interface ASBaseWidget_$Lambda$1 : NSObject < JavaUtilComparator > {
 @public
  ASBaseWidget *this$0_;
  id<JavaUtilMap> val$payLoad_;
}

- (jint)compareWithId:(NSString *)a
               withId:(NSString *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ASBaseWidget_$Lambda$1)

__attribute__((unused)) static void ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget_$Lambda$1 *self, ASBaseWidget *outer$, id<JavaUtilMap> capture$0);

__attribute__((unused)) static ASBaseWidget_$Lambda$1 *new_ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASBaseWidget_$Lambda$1 *create_ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0);

@interface ASBaseWidget_$Lambda$2 : NSObject < JavaUtilComparator > {
 @public
  ASBaseWidget *this$0_;
  id<JavaUtilMap> val$payLoad_;
}

- (jint)compareWithId:(NSString *)a
               withId:(NSString *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ASBaseWidget_$Lambda$2)

__attribute__((unused)) static void ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget_$Lambda$2 *self, ASBaseWidget *outer$, id<JavaUtilMap> capture$0);

__attribute__((unused)) static ASBaseWidget_$Lambda$2 *new_ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASBaseWidget_$Lambda$2 *create_ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0);

@implementation ASBaseWidget

- (jint)getZIndex {
  return zIndex_;
}

- (void)setZIndexWithInt:(jint)zIndex {
  self->zIndex_ = zIndex;
}

- (void)replayBufferedEvents {
  if (bufferedAttributes_ != nil) {
    [self replayBufferedEventsInternal];
    [((id<JavaUtilList>) nil_chk(bufferedAttributes_)) clear];
    JreStrongAssign(&bufferedAttributes_, nil);
  }
}

- (void)replayBufferedEventsInternal {
  if (bufferedAttributes_ != nil) {
    for (ASBaseWidget_EventHolder * __strong eventHolder in bufferedAttributes_) {
      ASBaseWidget_applyStyleToWidgetWithoutBufferingWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(self, ((ASBaseWidget_EventHolder *) nil_chk(eventHolder))->widgetAttribute_, eventHolder->childWidget_, eventHolder->objValue_, nil, false);
    }
  }
}

- (jboolean)hasBufferedAttributes {
  return bufferedAttributes_ != nil && [bufferedAttributes_ size] > 0;
}

- (void)registerForAttributeCommandChainWithPhaseWithNSString:(NSString *)phase
                                            withNSStringArray:(IOSObjectArray *)attrs {
  if (commandPhases_ == nil) {
    JreStrongAssignAndConsume(&commandPhases_, new_JavaUtilHashMap_init());
  }
  id<JavaUtilSet> phases = JreRetainedLocalValue([commandPhases_ getWithId:phase]);
  if (phases == nil) {
    phases = create_JavaUtilLinkedHashSet_init();
    [((id<JavaUtilMap>) nil_chk(commandPhases_)) putWithId:phase withId:phases];
  }
  [phases addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(attrs)];
  [self registerForAttributeCommandChainWithNSStringArray:attrs];
}

- (void)registerForAttributeCommandChainWithNSStringArray:(IOSObjectArray *)attrs {
  if (attributeCommandChainMap_ == nil) {
    JreStrongAssignAndConsume(&attributeCommandChainMap_, new_JavaUtilHashMap_init());
  }
  if (updateAttributes_ == nil) {
    JreStrongAssignAndConsume(&updateAttributes_, new_JavaUtilHashMap_init());
  }
  {
    IOSObjectArray *a__ = attrs;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *attr = *b__++;
      ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(attributeCommandChainMap_)) getWithId:attr]);
      if (attributeCommandChain == nil) {
        attributeCommandChain = create_ASAttributeCommandChain_init();
        [((id<JavaUtilMap>) nil_chk(attributeCommandChainMap_)) putWithId:attr withId:attributeCommandChain];
      }
    }
  }
}

- (void)applyAttributeCommandWithNSString:(NSString *)sourceName
                             withNSString:(NSString *)commandName
                        withNSStringArray:(IOSObjectArray *)attributes
                              withBoolean:(jboolean)add
                        withNSObjectArray:(IOSObjectArray *)args {
  if (attributeCommandMap_ == nil) {
    JreStrongAssignAndConsume(&attributeCommandMap_, new_JavaUtilHashMap_init());
  }
  if (add) {
    id<ASAttributeCommand> attributeCommand = JreRetainedLocalValue([self getAttributeCommandWithNSString:sourceName withNSString:commandName withNSObjectArray:args]);
    ASBaseWidget_addAttributeCommandToChainWithNSString_withNSStringArray_withASAttributeCommand_(self, sourceName, attributes, attributeCommand);
  }
  else {
    id<ASAttributeCommand> attributeCommand = JreRetainedLocalValue([attributeCommandMap_ getWithId:JreStrcat("$$", sourceName, commandName)]);
    [self removeAttributeCommandFromChainWithNSString:sourceName withNSStringArray:attributes withASAttributeCommand:attributeCommand];
  }
}

- (void)reapplyAttributeCommandWithNSString:(NSString *)sourceName
                               withNSString:(NSString *)commandName
                               withNSString:(NSString *)phase
                          withNSObjectArray:(IOSObjectArray *)args {
  id<ASAttributeCommand> attributeCommand = JreRetainedLocalValue([self getAttributeCommandWithNSString:sourceName withNSString:commandName withNSObjectArray:args]);
  [self rerunCommandOnSourceWithNSString:sourceName withNSString:phase];
}

- (void)rerunCommandOnSourceWithNSString:(NSString *)sourceName
                            withNSString:(NSString *)phase {
  if (attributeCommandChainMap_ == nil || ![attributeCommandChainMap_ containsKeyWithId:sourceName]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Call registerValueCommandExecutor for attribute ", sourceName, @" in nativeCreate method "));
  }
  ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([self getAttributeCommandChainWithNSString:sourceName]);
  id value = JreRetainedLocalValue([((ASAttributeCommandChain *) nil_chk(attributeCommandChain)) getOriginalStringValue]);
  ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_(self, ASWidgetFactory_getAttributeWithNSString_withNSString_([self getLocalName], sourceName), nil, value, phase);
}

- (id)getAttributeCommandValueWithNSString:(NSString *)sourceName
                              withNSString:(NSString *)commandName
                              withNSString:(NSString *)attributeName {
  if (attributeCommandMap_ != nil) {
    id<ASAttributeCommand> attributeCommand = JreRetainedLocalValue([attributeCommandMap_ getWithId:JreStrcat("$$", sourceName, commandName)]);
    if (attributeCommand != nil) {
      return [attributeCommand getValueWithNSString:attributeName];
    }
  }
  return nil;
}

- (id<ASAttributeCommand>)getAttributeCommandWithNSString:(NSString *)sourceName
                                             withNSString:(NSString *)commandName
                                        withNSObjectArray:(IOSObjectArray *)args {
  if (attributeCommandMap_ == nil) {
    JreStrongAssignAndConsume(&attributeCommandMap_, new_JavaUtilHashMap_init());
  }
  id<ASAttributeCommand> attributeCommand = JreRetainedLocalValue([attributeCommandMap_ getWithId:JreStrcat("$$", sourceName, commandName)]);
  if (attributeCommand == nil) {
    attributeCommand = ASConverterFactory_getCommandConverterWithNSString_withNSObjectArray_(commandName, args);
    [((id<JavaUtilMap>) nil_chk(attributeCommandMap_)) putWithId:JreStrcat("$$", sourceName, commandName) withId:attributeCommand];
  }
  else {
    [attributeCommand updateArgsWithNSObjectArray:args];
  }
  return attributeCommand;
}

- (void)addAttributeCommandToChainWithNSString:(NSString *)sourceName
                             withNSStringArray:(IOSObjectArray *)attributes
                        withASAttributeCommand:(id<ASAttributeCommand>)attributeCommand {
  ASBaseWidget_addAttributeCommandToChainWithNSString_withNSStringArray_withASAttributeCommand_(self, sourceName, attributes, attributeCommand);
}

- (ASAttributeCommandChain *)getAttributeCommandChainWithNSString:(NSString *)sourceName {
  if (attributeCommandChainMap_ == nil) {
    return nil;
  }
  ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([attributeCommandChainMap_ getWithId:sourceName]);
  return attributeCommandChain;
}

- (void)removeAttributeCommandFromChainWithNSString:(NSString *)sourceName
                                  withNSStringArray:(IOSObjectArray *)attributes
                             withASAttributeCommand:(id<ASAttributeCommand>)attributeCommand {
  if (attributeCommandChainMap_ != nil) {
    ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([attributeCommandChainMap_ getWithId:sourceName]);
    [((ASAttributeCommandChain *) nil_chk(attributeCommandChain)) removeCommandWithASAttributeCommand:attributeCommand];
    {
      IOSObjectArray *a__ = attributes;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *attributeName = *b__++;
        id<JavaUtilList> list = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(updateAttributes_)) getWithId:attributeName]);
        if (list != nil) {
          [list removeWithId:sourceName];
        }
      }
    }
    if ([self isInitialised] && ((IOSObjectArray *) nil_chk(attributes))->size_ > 0) {
      [self applyStyleToWidgetWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([self getLocalName], sourceName) withId:[attributeCommandChain getOriginalStringValue]];
    }
  }
}

- (id<ASIFragment>)getFragment {
  return fragment_;
}

- (id<ASIWidget>)newLazyInstance {
  return create_ASBaseWidget_LazyBaseWidget_initWithASBaseWidget_(self);
}

- (id)unwrapWithId:(id)widget {
  if ([ASIWidget_class_() isInstance:widget]) {
    return [((id<ASIWidget>) nil_chk(((id<ASIWidget>) cast_check(widget, ASIWidget_class_())))) asNativeWidget];
  }
  return widget;
}

- (NSString *)getId {
  return id__;
}

- (jint)getIdAsInt {
  return ASIdGenerator_getIdWithNSString_(id__);
}

- (void)setIdWithNSString:(NSString *)id_ {
  JreStrongAssign(&self->id__, id_);
}

- (NSString *)getBehaviorGroupId {
  return behaviorGroupId_;
}

- (void)setBehaviorGroupIdWithNSString:(NSString *)behaviorGroupId {
  JreStrongAssign(&self->behaviorGroupId_, behaviorGroupId);
}

- (void)initialized {
  [self applyStyleToWidgets];
  [self applyModelToWidget];
  if (cachedDecorators_ != nil) {
    for (id<ASILifeCycleDecorator> __strong decorator in nil_chk([cachedDecorators_ values])) {
      [((id<ASILifeCycleDecorator>) nil_chk(decorator)) initialized];
    }
  }
  initialised_ = true;
}

- (void)applyStyleToWidgets {
  id<JavaUtilSet> widgetAttributes = JreRetainedLocalValue([((ASWidgetAttributeMap *) nil_chk(attributes_)) keySet]);
  for (ASWidgetAttribute * __strong widgetAttribute in nil_chk(widgetAttributes)) {
    if (![((ASWidgetAttribute *) nil_chk(widgetAttribute)) isForChild]) {
      if ([((ASWidgetAttributeMap *) nil_chk(attributes_)) getFilter] == nil || [((id<ASWidgetAttributeMapFilter>) nil_chk([((ASWidgetAttributeMap *) nil_chk(attributes_)) getFilter])) acceptWithNSString:[widgetAttribute getAttributeName] withNSString:[self getLocalName]]) {
        id objValue = JreRetainedLocalValue([self getAttributeValueWithNSString:[widgetAttribute getAttributeName]]);
        if (objValue != nil) {
          [self applyStyleToWidgetWithASWidgetAttribute:widgetAttribute withId:objValue];
        }
      }
    }
  }
}

- (id)quickConvertWithId:(id)objValue
            withNSString:(NSString *)type {
  id<ASIConverter> converter = ASPluginInvoker_getConverterWithNSString_(type);
  id convertedValue = JreRetainedLocalValue(objValue);
  if (converter != nil) {
    id<JavaUtilMap> dependentAttributesMap = JreRetainedLocalValue([self getDependentAttributesMapWithASIConverter:converter]);
    convertedValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(converter, dependentAttributesMap, objValue, fragment_);
  }
  return convertedValue;
}

- (id)quickConvertWithId:(id)objValue
            withNSString:(NSString *)type
            withNSString:(NSString *)arrayType
            withNSString:(NSString *)finalArrayType {
  return ASBaseWidget_handleArrayTypeWithId_withNSString_withNSString_(self, [self quickConvertWithId:objValue withNSString:type], arrayType, finalArrayType);
}

- (void)applyStyleToWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                         withId:(id)objValue {
  ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_(self, widgetAttribute, nil, objValue, nil);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                   withId:(id)objValue
                              withBoolean:(jboolean)skipConvert {
  ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(self, widgetAttribute, nil, objValue, nil, skipConvert);
  [self requestLayoutNInvalidateIfRequiredWithInt:[((ASWidgetAttribute *) nil_chk(widgetAttribute)) getUpdateUiFlag]];
}

- (void)applyStyleToWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                  withASIWidget:(id<ASIWidget>)childWidget
                                         withId:(id)objValue
                                   withNSString:(NSString *)phase {
  ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_(self, widgetAttribute, childWidget, objValue, phase);
}

- (void)applyStyleToWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                  withASIWidget:(id<ASIWidget>)childWidget
                                         withId:(id)objValue
                                   withNSString:(NSString *)phase
                                    withBoolean:(jboolean)skipConvert {
  ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(self, widgetAttribute, childWidget, objValue, phase, skipConvert);
}

- (void)attributeBuffered {
}

- (void)applyStyleToWidgetWithoutBufferingWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                                  withASIWidget:(id<ASIWidget>)childWidget
                                                         withId:(id)objValue
                                                   withNSString:(NSString *)phase
                                                    withBoolean:(jboolean)skipConvert {
  ASBaseWidget_applyStyleToWidgetWithoutBufferingWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(self, widgetAttribute, childWidget, objValue, phase, skipConvert);
}

- (id)handleArrayTypeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                              withNSString:(NSString *)type
                                    withId:(id)convertedValue {
  return ASBaseWidget_handleArrayTypeWithASWidgetAttribute_withNSString_withId_(self, widgetAttribute, type, convertedValue);
}

- (id)handleArrayTypeWithId:(id)objValue
               withNSString:(NSString *)arrayType
               withNSString:(NSString *)finalArrayType {
  return ASBaseWidget_handleArrayTypeWithId_withNSString_withNSString_(self, objValue, arrayType, finalArrayType);
}

- (id<JavaUtilMap>)getDependentAttributesMapWithASIConverter:(id<ASIConverter>)converter {
  id<JavaUtilMap> dependentAttributesMap = create_JavaUtilHashMap_init();
  if (converter != nil) {
    id<JavaUtilList> dependentAttributes = ASPluginInvoker_getDependentAttributesWithASIConverter_(converter);
    if (dependentAttributes != nil) {
      for (NSString * __strong dependentAttribute in dependentAttributes) {
        id convertedValue = ASBaseWidget_getConvertedValueWithNSString_(self, dependentAttribute);
        if (convertedValue != nil) {
          [dependentAttributesMap putWithId:dependentAttribute withId:convertedValue];
        }
      }
    }
  }
  return dependentAttributesMap;
}

- (id)getConvertedValueWithNSString:(NSString *)attr {
  return ASBaseWidget_getConvertedValueWithNSString_(self, attr);
}

- (id<ASILifeCycleDecorator>)getDecoratorWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  return ASBaseWidget_getDecoratorWithASWidgetAttribute_(self, widgetAttribute);
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  ASBaseWidget_createWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (id)getUserDataWithNSString:(NSString *)key {
  if (userData_ == nil) {
    JreStrongAssignAndConsume(&userData_, new_JavaUtilHashMap_init());
  }
  return [userData_ getWithId:key];
}

- (void)storeUserDataWithNSString:(NSString *)key
                           withId:(id)object {
  if (userData_ == nil) {
    JreStrongAssignAndConsume(&userData_, new_JavaUtilHashMap_init());
  }
  [userData_ putWithId:key withId:object];
}

- (void)storeInTempCacheWithNSString:(NSString *)key
                              withId:(id)object {
  if (tmpCache_ == nil) {
    JreStrongAssignAndConsume(&tmpCache_, new_JavaUtilHashMap_init());
  }
  [tmpCache_ putWithId:key withId:object];
}

- (id)getFromTempCacheWithNSString:(NSString *)key {
  if (tmpCache_ == nil) {
    JreStrongAssignAndConsume(&tmpCache_, new_JavaUtilHashMap_init());
  }
  return [tmpCache_ getWithId:key];
}

- (id<JavaUtilMap>)getParams {
  return params_;
}

- (void)setParamsWithJavaUtilMap:(id<JavaUtilMap>)params {
  JreStrongAssign(&self->params_, params);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (NSString *)getAttributeValueWithNSString:(NSString *)attr {
  if (attributes_ != nil) {
    id<JavaUtilList> widgetAttributeValues = JreRetainedLocalValue([attributes_ getWithId:attr]);
    if (widgetAttributeValues == nil || [widgetAttributeValues isEmpty]) {
      return nil;
    }
    NSString *strValue = nil;
    for (ASWidgetAttributeValue * __strong widgetAttributeValue in widgetAttributeValues) {
      if ([self checkIfAttributeMatchesWithASWidgetAttributeValue:widgetAttributeValue]) {
        strValue = [((ASWidgetAttributeValue *) nil_chk(widgetAttributeValue)) getValue];
      }
    }
    return strValue;
  }
  else {
    return nil;
  }
}

- (NSString *)getAttributeValueWithNSString:(NSString *)attr
                   withASWidgetAttributeMap:(ASWidgetAttributeMap *)attributes {
  if (attributes != nil) {
    id<JavaUtilList> widgetAttributeValues = JreRetainedLocalValue([attributes getWithId:attr]);
    if (widgetAttributeValues == nil || [widgetAttributeValues isEmpty]) {
      return nil;
    }
    NSString *strValue = nil;
    for (ASWidgetAttributeValue * __strong widgetAttributeValue in widgetAttributeValues) {
      if ([self checkIfAttributeMatchesWithASWidgetAttributeValue:widgetAttributeValue]) {
        strValue = [((ASWidgetAttributeValue *) nil_chk(widgetAttributeValue)) getValue];
      }
    }
    return strValue;
  }
  else {
    return nil;
  }
}

- (ASWidgetAttributeValue *)getAttributeValueWithASWidgetAttribute:(ASWidgetAttribute *)attr
                                          withASWidgetAttributeMap:(ASWidgetAttributeMap *)attributes {
  if (attributes != nil) {
    id<JavaUtilList> widgetAttributeValues = JreRetainedLocalValue([attributes getWithId:attr]);
    if (widgetAttributeValues == nil || [widgetAttributeValues isEmpty]) {
      return nil;
    }
    ASWidgetAttributeValue *strValue = nil;
    for (ASWidgetAttributeValue * __strong widgetAttributeValue in widgetAttributeValues) {
      if ([self checkIfAttributeMatchesWithASWidgetAttributeValue:widgetAttributeValue]) {
        strValue = widgetAttributeValue;
        break;
      }
    }
    return strValue;
  }
  else {
    return nil;
  }
}

- (id<ASHasWidgets>)getParent {
  return parent_;
}

- (void)setParentWithASHasWidgets:(id<ASHasWidgets>)parent {
  self->parent_ = parent;
}

- (ASWidgetAttributeMap *)getAttributes {
  return attributes_;
}

- (NSString *)getLocalName {
  return localName_;
}

- (NSString *)stripOSWithNSString:(NSString *)key {
  return ASBaseWidget_stripOSWithNSString_(self, key);
}

- (ASWidgetAttribute *)getAttributeWithASHasWidgets:(id<ASHasWidgets>)parent
                                       withNSString:(NSString *)localName
                                       withNSString:(NSString *)key {
  key = ASBaseWidget_stripOSWithNSString_(self, key);
  ASWidgetAttribute *attribute = nil;
  if ([((NSString *) nil_chk(key)) java_hasPrefix:@"layout_"] && parent != nil) {
    if ([((NSString *) nil_chk([parent getLocalName])) isEqual:@"template"]) {
      attribute = ASWidgetFactory_getAttributeWithNSString_withNSString_([((id<ASHasWidgets>) nil_chk([parent getParent])) getLocalName], key);
    }
    else {
      attribute = ASWidgetFactory_getAttributeWithNSString_withNSString_([parent getLocalName], key);
    }
  }
  else {
    attribute = ASWidgetFactory_getAttributeWithNSString_withNSString_(localName, key);
  }
  return attribute;
}

- (jboolean)checkIfAttributeMatchesWithASWidgetAttributeValue:(ASWidgetAttributeValue *)attribute {
  NSString *orientation = ASPluginInvoker_getOrientation();
  jint screenWidth = ASPluginInvoker_getScreenWidth();
  jint screenHeight = ASPluginInvoker_getScreenHeight();
  jboolean orientationCheck = [((NSString *) nil_chk([((ASWidgetAttributeValue *) nil_chk(attribute)) getOrientation])) isEqual:@"default"] || [((NSString *) nil_chk([attribute getOrientation])) isEqual:orientation];
  jint minWidth = (jint) ASBaseWidget_convertToIntFromDpWithNSString_(self, [attribute getMinWidth]);
  jint maxWidth = (jint) ASBaseWidget_convertToIntFromDpWithNSString_(self, [attribute getMaxWidth]);
  jint minHeight = (jint) ASBaseWidget_convertToIntFromDpWithNSString_(self, [attribute getMinHeight]);
  jint maxHeight = (jint) ASBaseWidget_convertToIntFromDpWithNSString_(self, [attribute getMaxHeight]);
  jboolean minWidthCheck = minWidth == -1 || minWidth < screenWidth;
  jboolean maxWidthCheck = maxWidth == -1 || maxWidth > screenWidth;
  jboolean minHeightCheck = minHeight == -1 || minHeight < screenHeight;
  jboolean maxHeightCheck = maxHeight == -1 || maxHeight > screenHeight;
  return orientationCheck && minWidthCheck && maxWidthCheck && minHeightCheck && maxHeightCheck;
}

- (jint)convertToIntFromDpWithNSString:(NSString *)dimension {
  return ASBaseWidget_convertToIntFromDpWithNSString_(self, dimension);
}

- (void)updateWidgetMapWithASWidgetAttributeMap:(ASWidgetAttributeMap *)attributes {
  JreStrongAssign(&self->attributes_, attributes);
  id<JavaUtilIterator> iter = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk([((ASWidgetAttributeMap *) nil_chk(attributes)) keySet])) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(iter)) hasNext]) {
    ASWidgetAttribute *key = [iter next];
    if ([((ASWidgetAttribute *) nil_chk(key)) isApplyBeforeChildAdd]) {
      id<JavaUtilList> values = JreRetainedLocalValue([attributes getWithId:key]);
      for (ASWidgetAttributeValue * __strong value in nil_chk(values)) {
        if (value != nil) {
          if ([self checkIfAttributeMatchesWithASWidgetAttributeValue:value]) {
            [self applyStyleToWidgetWithASWidgetAttribute:key withId:[value getValue]];
          }
        }
      }
    }
  }
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
}

- (void)updateWidgetMapWithASWidgetAttribute:(ASWidgetAttribute *)attribute
                            withJavaUtilList:(id<JavaUtilList>)list {
  [((ASWidgetAttributeMap *) nil_chk(attributes_)) putWithId:attribute withId:list];
}

- (void)updateWidgetMapWithASWidgetAttribute:(ASWidgetAttribute *)key
                  withASWidgetAttributeValue:(ASWidgetAttributeValue *)value {
  [((ASWidgetAttributeMap *) nil_chk(attributes_)) putWithASWidgetAttribute:key withASWidgetAttributeValue:value];
  if ([((ASWidgetAttribute *) nil_chk(key)) isApplyBeforeChildAdd]) {
    if (value != nil) {
      if ([self checkIfAttributeMatchesWithASWidgetAttributeValue:value]) {
        [self applyStyleToWidgetWithASWidgetAttribute:key withId:[value getValue]];
      }
    }
  }
}

- (void)executeCommandWithASIWidget:(id<ASIWidget>)w
                   withJavaUtilList:(id<JavaUtilList>)commandDataArr
      withASIWidget_CommandCallBack:(id<ASIWidget_CommandCallBack>)command
                            withInt:(jint)methods {
  for (id __strong commandObj in nil_chk(commandDataArr)) {
    id<JavaUtilMap> map = ASPluginInvoker_getMapWithId_(commandObj);
    @try {
      if ([((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:@"id"]) {
        NSString *id_ = ASPluginInvoker_getStringWithId_([map getWithId:@"id"]);
        id<ASIWidget> widget = JreRetainedLocalValue([((id<ASIWidget>) nil_chk(w)) findWidgetByIdWithNSString:id_]);
        if (widget != nil) {
          [widget executeCommandWithJavaUtilMap:map withASIWidget_CommandCallBack:nil withInt:methods];
        }
      }
      else if ([map containsKeyWithId:@"paths"]) {
        ASBaseWidget_handlePathWithJavaUtilMap_withASIWidget_withInt_(self, map, w, methods);
      }
    }
    @catch (JavaLangException *e) {
      [e printStackTrace];
      [((id<ASIFragment>) nil_chk(fragment_)) addErrorWithASError:create_ASError_initWithJavaUtilMap_withASBaseWidget_withJavaLangException_(map, self, e)];
    }
  }
}

- (void)handlePathWithJavaUtilMap:(id<JavaUtilMap>)map
                    withASIWidget:(id<ASIWidget>)w
                          withInt:(jint)methods {
  ASBaseWidget_handlePathWithJavaUtilMap_withASIWidget_withInt_(self, map, w, methods);
}

- (void)executeCommandWithJavaUtilMap:(id<JavaUtilMap>)payLoad
        withASIWidget_CommandCallBack:(id<ASIWidget_CommandCallBack>)command
                              withInt:(jint)methods {
  id<JavaUtilList> keySet = create_JavaUtilArrayList_initWithJavaUtilCollection_([((id<JavaUtilMap>) nil_chk(payLoad)) keySet]);
  if ((methods & ASIWidget_COMMAND_EXEC_SETTER_METHOD) != 0) {
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(keySet, create_ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(self, payLoad));
  }
  else if ((methods & ASIWidget_COMMAND_EXEC_GETTER_METHOD) != 0) {
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(keySet, create_ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(self, payLoad));
  }
  if (command != nil) {
    [command onWidgetWithASIWidget:self];
  }
  jint updateUiFlag = ASIWidget_UPDATE_UI_NONE;
  for (NSString * __strong key in keySet) {
    if ([((NSString *) nil_chk(key)) isEqual:@"event-data"]) {
      [self storeUserDataWithNSString:key withId:[payLoad getWithId:key]];
    }
    else if ([key java_hasPrefix:@"child:"]) {
      id<ASIWidget> child = JreRetainedLocalValue([self findWidgetByIdWithNSString:[key java_substring:[key java_indexOfString:@":"] + 1]]);
      if (child != nil) {
        [child executeCommandWithJavaUtilMap:ASPluginInvoker_getMapWithId_([payLoad getWithId:key]) withASIWidget_CommandCallBack:command withInt:methods];
      }
    }
    else if ([ASICompositeDecorator_class_() isInstance:[self getParent]] && [((id<ASICompositeDecorator>) nil_chk(((id<ASICompositeDecorator>) cast_check([self getParent], ASICompositeDecorator_class_())))) supportsAttributeWithNSString:key]) {
      [((id<ASHasWidgets>) nil_chk([self getParent])) executeCommandWithJavaUtilMap:payLoad withASIWidget_CommandCallBack:command withInt:methods];
    }
    else if ([key java_hasPrefix:@"layoutParams"]) {
      id<JavaUtilMap> commandObj = ASPluginInvoker_getMapWithId_([payLoad getWithId:@"layoutParams"]);
      [self executeCommandWithJavaUtilMap:commandObj withASIWidget_CommandCallBack:command withInt:methods];
    }
    else {
      ASWidgetAttribute *widgetAttribute = JreRetainedLocalValue([self getAttributeWithASHasWidgets:[self getParent] withNSString:[self getLocalName] withNSString:key]);
      if (widgetAttribute != nil) {
        if ([((ASWidgetAttributeMap *) nil_chk(attributes_)) containsKeyWithId:@"decorator"]) {
          [widgetAttribute setDecoratorWithNSString:[((ASWidgetAttributeValue *) nil_chk([((id<JavaUtilList>) nil_chk([((ASWidgetAttributeMap *) nil_chk(attributes_)) getWithId:@"decorator"])) getWithInt:0])) getValue]];
        }
        updateUiFlag |= [widgetAttribute getUpdateUiFlag];
        id objValue = JreRetainedLocalValue([payLoad getWithId:key]);
        id<JavaUtilMap> commandObj = ASPluginInvoker_getMapWithId_(objValue);
        if (commandObj != nil) {
          if ((methods & ASIWidget_COMMAND_EXEC_SETTER_METHOD) != 0) {
            jboolean isSetter = [self getBooleanWithId:[commandObj getWithId:@"setter"]];
            if (isSetter) {
              objValue = [commandObj getWithId:@"value"];
              [((ASWidgetAttributeMap *) nil_chk([self getAttributes])) putWithASWidgetAttribute:widgetAttribute withASWidgetAttributeValue:create_ASWidgetAttributeValue_initWithNSString_(objValue != nil ? [objValue description] : nil)];
              if ([key java_hasPrefix:@"layout_"]) {
                ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_(nil_chk(((ASBaseWidget *) cast_chk([self getParent], [ASBaseWidget class]))), widgetAttribute, self, objValue, nil);
              }
              else {
                [self applyStyleToWidgetWithASWidgetAttribute:widgetAttribute withId:objValue];
              }
            }
          }
          if ((methods & ASIWidget_COMMAND_EXEC_GETTER_METHOD) != 0) {
            jboolean isGetter = [self getBooleanWithId:[commandObj getWithId:@"getter"]];
            if (isGetter) {
              if ([key java_hasPrefix:@"layout_"]) {
                objValue = ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(nil_chk(((ASBaseWidget *) cast_chk([self getParent], [ASBaseWidget class]))), widgetAttribute, self);
              }
              else {
                objValue = ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(self, widgetAttribute, nil);
              }
              ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(commandObj, @"commandReturnValue", objValue);
            }
          }
        }
      }
    }
  }
  [self requestLayoutNInvalidateIfRequiredWithInt:updateUiFlag];
}

- (void)requestLayoutNInvalidateIfRequiredWithInt:(jint)updateUiFlag {
  if ((updateUiFlag & ASIWidget_UPDATE_UI_REQUEST_LAYOUT) != 0) {
    [self requestLayout];
  }
  if ((updateUiFlag & ASIWidget_UPDATE_UI_INVALIDATE) != 0) {
    [self invalidate];
  }
}

- (jint)compareByValueWithJavaUtilMap:(id<JavaUtilMap>)payLoad
                         withNSString:(NSString *)a
                         withNSString:(NSString *)b
                         withNSString:(NSString *)orderKey {
  return ASBaseWidget_compareByValueWithJavaUtilMap_withNSString_withNSString_withNSString_(self, payLoad, a, b, orderKey);
}

- (id)getAttributeValueFromWidgetWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                                         withASIWidget:(id<ASIWidget>)childWidget {
  return ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(self, widgetAttribute, childWidget);
}

- (id<ASIWidgetLifeCycleListener>)getListener {
  return listener_;
}

- (void)setListenerWithASIWidgetLifeCycleListener:(id<ASIWidgetLifeCycleListener>)listener {
  JreStrongAssign(&self->listener_, listener);
}

- (void)restoreToDefaultState {
}

- (id<ASIWidget>)findWidgetByIdWithNSString:(NSString *)id_ {
  id<ASIWidget> idWidget = nil;
  NSString *attributeValue = JreRetainedLocalValue([self getId]);
  if (id_ != nil && attributeValue != nil && [attributeValue isEqual:id_]) {
    idWidget = self;
  }
  return idWidget;
}

- (jboolean)isInvalidateOnFrameChange {
  return invalidateOnFrameChange_;
}

- (void)setInvalidateOnFrameChangeWithBoolean:(jboolean)invalidateOnFrameChange {
  self->invalidateOnFrameChange_ = invalidateOnFrameChange;
}

- (NSString *)getModelPojoToUiParams {
  return modelPojoToUiParams_;
}

- (NSString *)getModelPojoToUi {
  return modelPojoToUi_;
}

- (NSString *)getModelUiToPojo {
  return modelUiToPojo_;
}

- (NSString *)getModelParam {
  return modelParam_;
}

- (ASLoopParam *)getLoopParam {
  return loopParam_;
}

- (void)setLoopParamWithASLoopParam:(ASLoopParam *)loopParam {
  JreStrongAssign(&self->loopParam_, loopParam);
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localName {
  ASBaseWidget_initWithNSString_withNSString_(self, groupName, localName);
  return self;
}

- (NSString *)getModelIdPath {
  return modelIdPath_;
}

- (void)setModelIdPathWithNSString:(NSString *)modelIdPath {
  JreStrongAssign(&self->modelIdPath_, modelIdPath);
}

- (NSString *)getModelSyncEvents {
  return modelSyncEvents_;
}

- (NSString *)getModelUiToPojoEventIds {
  return self->modelUiToPojoEventIds_;
}

- (void)setModelUiToPojoEventIdsWithNSString:(NSString *)val {
  JreStrongAssign(&self->modelUiToPojoEventIds_, val);
}

- (void)setModelSyncEventsWithNSString:(NSString *)modelSyncEvents {
  JreStrongAssign(&self->modelSyncEvents_, modelSyncEvents);
}

- (void)setModelParamWithNSString:(NSString *)modelParam {
  JreStrongAssign(&self->modelParam_, modelParam);
  ASBaseWidget_storeModelToScopeFromModelParam(self);
}

- (void)setModelPojoToUiWithNSString:(NSString *)syncExpression {
  JreStrongAssign(&self->modelPojoToUi_, syncExpression);
}

- (void)setModelPojoToUiParamsWithNSString:(NSString *)params {
  JreStrongAssign(&self->modelPojoToUiParams_, params);
}

- (void)setModelUiToPojoWithNSString:(NSString *)syncExpression {
  JreStrongAssign(&self->modelUiToPojo_, syncExpression);
}

- (jboolean)applyModelAttributes {
  return true;
}

- (void)removeObjectListenersWithASIWidget:(id<ASIWidget>)widget {
  id<JavaUtilList> widgetEventBusHandlers = JreRetainedLocalValue([((id<ASIWidget>) nil_chk(widget)) getEventBusHandlers]);
  if (widgetEventBusHandlers != nil) {
    [((ASEventBus *) nil_chk(eventBus_)) offWithJavaUtilList:widgetEventBusHandlers];
    [widgetEventBusHandlers clear];
  }
  if ([ASHasWidgets_class_() isInstance:widget]) {
    for (id<JavaUtilIterator> iterator = JreRetainedLocalValue([((id<ASHasWidgets>) cast_check(widget, ASHasWidgets_class_())) iterator]); [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
      id<ASIWidget> childWidget = JreRetainedLocalValue([iterator next]);
      [self removeObjectListenersWithASIWidget:childWidget];
    }
  }
}

- (id<JavaUtilList>)getEventBusHandlers {
  return eventBusHandlers_;
}

- (void)applyModelToWidget {
  @try {
    if (self->modelPojoToUi_ != nil) {
      ASBaseWidget_syncPojoToUi(self);
    }
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
    [((id<ASIFragment>) nil_chk(fragment_)) addErrorWithASError:create_ASError_initWithJavaUtilMap_withASBaseWidget_withJavaLangException_(nil, self, e)];
  }
}

- (void)syncPojoToUi {
  ASBaseWidget_syncPojoToUi(self);
}

- (void)storeModelToScopeFromModelParam {
  ASBaseWidget_storeModelToScopeFromModelParam(self);
}

- (void)requestLayout {
}

- (void)invalidate {
}

- (void)setVisibleWithBoolean:(jboolean)b {
}

- (jboolean)isInitialised {
  return initialised_;
}

- (jint)getBaseLine {
  return -1;
}

- (void)updateModelToEventMapWithJavaUtilMap:(id<JavaUtilMap>)eventMap
                                withNSString:(NSString *)eventType
                                withNSString:(NSString *)eventParams {
  [self updateModelToEventMapWithJavaUtilMap:eventMap withNSString:eventParams withASLoopParam:[self getLoopParam]];
}

- (void)updateModelToEventMapWithJavaUtilMap:(id<JavaUtilMap>)eventMap
                                withNSString:(NSString *)eventParams
                             withASLoopParam:(ASLoopParam *)loopParam {
  if (eventParams != nil && ![eventParams java_isEmpty]) {
    id<JavaUtilList> modelEventHolders = ASModelExpressionParser_parseEventExpressionWithNSString_(eventParams);
    for (ASModelExpressionParser_ModelEventHolder * __strong modelEventHolder in nil_chk(modelEventHolders)) {
      NSString *key = JreRetainedLocalValue(((ASModelExpressionParser_ModelEventHolder *) nil_chk(modelEventHolder))->key_);
      NSString *varPath = JreRetainedLocalValue(modelEventHolder->varPath_);
      NSString *varName = JreRetainedLocalValue(modelEventHolder->varName_);
      NSString *methodName = JreRetainedLocalValue(modelEventHolder->methodName_);
      ASModelScope *varScope = JreRetainedLocalValue(modelEventHolder->varScope_);
      id obj = JreRetainedLocalValue([self getModelFromScopeWithNSString:varName withASModelScope:varScope withASLoopParam:loopParam]);
      obj = [self getModelByPathWithNSString:varPath withId:obj];
      if ([ASIFlatMap_class_() isInstance:obj]) {
        obj = [((id<ASIFlatMap>) nil_chk(((id<ASIFlatMap>) cast_check(obj, ASIFlatMap_class_())))) getHierarchicalMap];
      }
      NSString *idPath = JreRetainedLocalValue([self getModelIdPath]);
      if (idPath != nil) {
        id myobj = JreRetainedLocalValue([self getModelByPathWithNSString:idPath withId:obj]);
        if (methodName != nil) {
          myobj = ASExpressionMethodHandler_getValueWithNSString_withId_withASIWidget_(methodName, myobj, self);
        }
        ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(eventMap, idPath, myobj);
      }
      if (methodName != nil) {
        obj = ASExpressionMethodHandler_getValueWithNSString_withId_withASIWidget_(methodName, obj, self);
      }
      ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(eventMap, key, obj);
    }
  }
}

- (void)syncModelFromUiToPojoWithNSString:(NSString *)eventType {
  if (modelUiToPojo_ != nil) {
    if (modelSyncEvents_ != nil) {
      id<JavaUtilList> events = JavaUtilArrays_asListWithNSObjectArray_([modelSyncEvents_ java_split:@","]);
      if ([((id<JavaUtilList>) nil_chk(events)) containsWithId:eventType]) {
        if (modelUiToPojo_ != nil) {
          ASBaseWidget_handleModelUiToPojo(self);
        }
      }
    }
  }
}

- (void)handleModelUiToPojo {
  ASBaseWidget_handleModelUiToPojo(self);
}

- (id)getModelByPathWithNSString:(NSString *)varPath
                          withId:(id)obj {
  if (![((NSString *) nil_chk(varPath)) isEqual:@"."]) {
    if ([ASIFlatMap_class_() isInstance:obj]) {
      obj = [((id<ASIFlatMap>) nil_chk(((id<ASIFlatMap>) cast_check(obj, ASIFlatMap_class_())))) getWithNSString:varPath];
    }
    else if ([varPath java_contains:@"."] || [varPath java_contains:@"["]) {
      obj = [create_ASPlainMap_initWithJavaUtilMap_(ASPluginInvoker_getMapWithId_(obj)) getWithNSString:varPath];
    }
    else {
      if (obj != nil) {
        obj = [((id<JavaUtilMap>) nil_chk(ASPluginInvoker_getMapWithId_(obj))) getWithId:varPath];
      }
    }
  }
  return obj;
}

- (void)updateModelByPathWithNSString:(NSString *)varPath
                               withId:(id)objValue
                               withId:(id)obj {
  @try {
    if (![((NSString *) nil_chk(varPath)) isEqual:@"."]) {
      if ([ASIFlatMap_class_() isInstance:obj]) {
        [((id<ASIFlatMap>) nil_chk(((id<ASIFlatMap>) cast_check(obj, ASIFlatMap_class_())))) putWithNSString:varPath withId:objValue];
      }
      else if ([varPath java_contains:@"."] || [varPath java_contains:@"["]) {
        [create_ASPlainMap_initWithJavaUtilMap_(ASPluginInvoker_getMapWithId_(obj)) putWithNSString:varPath withId:objValue];
      }
      else {
        if (obj != nil) {
          [((id<JavaUtilMap>) nil_chk((ASPluginInvoker_getMapWithId_(obj)))) putWithId:varPath withId:objValue];
        }
      }
    }
  }
  @catch (ASPlainMapException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (void)storeModelToScopeWithNSString:(NSString *)varName
                     withASModelScope:(ASModelScope *)varScope
                               withId:(id)objValue {
  ASModelStore_storeModelToScopeWithNSString_withASModelScope_withId_withASIFragment_withASIWidget_withASLoopParam_(varName, varScope, objValue, fragment_, self, nil);
}

- (void)storeModelToScopeWithNSString:(NSString *)varName
                     withASModelScope:(ASModelScope *)varScope
                               withId:(id)objValue
                      withASLoopParam:(ASLoopParam *)loopParam {
  ASModelStore_storeModelToScopeWithNSString_withASModelScope_withId_withASIFragment_withASIWidget_withASLoopParam_(varName, varScope, objValue, fragment_, self, loopParam);
}

- (id)getModelFromScopeWithNSString:(NSString *)varName
                   withASModelScope:(ASModelScope *)varScope {
  return ASModelStore_getModelFromScopeWithNSString_withASModelScope_withASIFragment_withASIWidget_withJavaUtilMap_(varName, varScope, fragment_, self, self->loopParam_);
}

- (id)getModelFromScopeWithNSString:(NSString *)varName
                   withASModelScope:(ASModelScope *)varScope
                    withASLoopParam:(ASLoopParam *)loopParam {
  return ASModelStore_getModelFromScopeWithNSString_withASModelScope_withASIFragment_withASIWidget_withJavaUtilMap_(varName, varScope, fragment_, self, loopParam);
}

- (id)changeModelDataTypeWithASModelDataType:(ASModelDataType *)dataType
                                      withId:(id)obj {
  return ASModelStore_changeModelDataTypeWithASModelDataType_withId_(dataType, obj);
}

- (void)notifyDataSetChanged {
  [self applyModelToWidget];
}

- (void)updateModelDataWithNSString:(NSString *)expression
                             withId:(id)data {
  ASModelExpressionParser_ModelStoreVarHolder *modelStoreVarHolder = ASModelExpressionParser_parseModelStoreVarExpressionWithNSString_(expression);
  NSString *varName = JreRetainedLocalValue(((ASModelExpressionParser_ModelStoreVarHolder *) nil_chk(modelStoreVarHolder))->varName_);
  ASModelScope *varScope = JreRetainedLocalValue(modelStoreVarHolder->varScope_);
  ASModelDataType *varType = JreRetainedLocalValue(modelStoreVarHolder->varType_);
  id modelData = JreRetainedLocalValue([self changeModelDataTypeWithASModelDataType:varType withId:data]);
  ASModelStore_storeModelToScopeWithNSString_withASModelScope_withId_withASIFragment_withASIWidget_withASLoopParam_(varName, varScope, modelData, fragment_, self, nil);
}

- (id<ASIWidget>)findNearestViewWithNSString:(NSString *)id_ {
  if ([((NSString *) nil_chk(id_)) isEqual:[self getId]]) {
    return self;
  }
  if ([ASHasWidgets_class_() isInstance:self]) {
    id<ASHasWidgets> hasWidgets = (id<ASHasWidgets>) cast_check(self, ASHasWidgets_class_());
    for (id<JavaUtilIterator> iterator = JreRetainedLocalValue([hasWidgets iterator]); [((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]; ) {
      id<ASIWidget> w = JreRetainedLocalValue([iterator next]);
      if ([id_ isEqual:[((id<ASIWidget>) nil_chk(w)) getId]]) {
        return w;
      }
      if ([ASHasWidgets_class_() isInstance:w]) {
        id<ASIWidget> result = JreRetainedLocalValue([w findWidgetByIdWithNSString:id_]);
        if (result != nil) {
          return result;
        }
      }
    }
  }
  if ([self getParent] == nil) {
    return nil;
  }
  return [((id<ASHasWidgets>) nil_chk([self getParent])) findNearestViewWithNSString:id_];
}

- (jboolean)getBooleanWithId:(id)val {
  return [((JavaLangBoolean *) nil_chk(ASStringUtils_getBooleanWithId_(val))) booleanValue];
}

- (jboolean)hasFeatureWithNSString:(NSString *)key
                      withNSString:(NSString *)featureName {
  NSString *os = ASPluginInvoker_getOS();
  NSString *value = nil;
  if ([((id<JavaUtilMap>) nil_chk(params_)) containsKeyWithId:JreStrcat("$C$", key, '-', os)]) {
    value = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(params_)) getWithId:JreStrcat("$C$", key, '-', os)], [NSString class]);
  }
  else if ([((id<JavaUtilMap>) nil_chk(params_)) containsKeyWithId:key]) {
    value = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(params_)) getWithId:key], [NSString class]);
  }
  if (value != nil) {
    return [((id<JavaUtilList>) nil_chk(JavaUtilArrays_asListWithNSObjectArray_([value java_split:@"\\|"]))) containsWithId:featureName];
  }
  return false;
}

- (void)runAttributeCommandsWithId:(id)nativeWidget
                      withNSString:(NSString *)phase
                      withNSString:(NSString *)commandFilterRegex
                 withNSObjectArray:(IOSObjectArray *)args {
  @try {
    if (commandPhases_ != nil) {
      id<JavaUtilSet> phaseAttributes = JreRetainedLocalValue([commandPhases_ getWithId:phase]);
      if (phaseAttributes != nil) {
        for (NSString * __strong attribute in phaseAttributes) {
          ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([self getAttributeCommandChainWithNSString:attribute]);
          if (attributeCommandChain != nil) {
            [attributeCommandChain getValueWithASIWidget:self withId:nativeWidget withNSString:phase withNSString:commandFilterRegex withNSObjectArray:args];
          }
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    [((id<ASIFragment>) nil_chk(fragment_)) addErrorWithASError:create_ASError_initWithJavaUtilMap_withASBaseWidget_withJavaLangException_(nil, self, e)];
  }
}

- (void)addDecoratorWithASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  if (methodListeners_ == nil) {
    JreStrongAssignAndConsume(&methodListeners_, new_JavaUtilHashMap_init());
  }
  for (NSString * __strong method in nil_chk([((id<ASILifeCycleDecorator>) nil_chk(decorator)) getMethods])) {
    if (![((id<JavaUtilMap>) nil_chk(methodListeners_)) containsKeyWithId:method]) {
      [((id<JavaUtilMap>) nil_chk(methodListeners_)) putWithId:method withId:create_JavaUtilArrayList_init()];
    }
    [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk(methodListeners_)) getWithId:method])) addWithId:decorator];
  }
}

- (void)executeMethodListenersWithNSString:(NSString *)methodName
                         withNSObjectArray:(IOSObjectArray *)args {
  [self executeMethodListenersWithNSString:methodName withJavaLangRunnable:nil withNSObjectArray:args];
}

- (jboolean)hasMethodListenerWithNSString:(NSString *)methodName {
  return methodListeners_ != nil && [methodListeners_ containsKeyWithId:methodName];
}

- (void)executeMethodListenersWithNSString:(NSString *)methodName
                      withJavaLangRunnable:(id<JavaLangRunnable>)callback
                         withNSObjectArray:(IOSObjectArray *)args {
  if ([self hasMethodListenerWithNSString:methodName]) {
    onMethodCalled_ = false;
    for (id<ASILifeCycleDecorator> __strong listener in nil_chk([((id<JavaUtilMap>) nil_chk(methodListeners_)) getWithId:methodName])) {
      [((id<ASILifeCycleDecorator>) nil_chk(listener)) executeWithNSString:methodName withNSObjectArray:args];
    }
    if (!onMethodCalled_) {
      if (callback != nil) {
        [callback run];
      }
    }
  }
  else {
    if (callback != nil) {
      [callback run];
    }
  }
}

- (void)setOnMethodCalledWithBoolean:(jboolean)onMethodCalled {
  self->onMethodCalled_ = onMethodCalled;
}

- (jboolean)setFieldUsingReflectionWithId:(id)targetObject
                             withNSString:(NSString *)fieldName
                                   withId:(id)fieldValue {
  JavaLangReflectField *field;
  @try {
    field = [[nil_chk(targetObject) java_getClass] getDeclaredField:fieldName];
  }
  @catch (JavaLangNoSuchFieldException *e) {
    field = nil;
  }
  IOSClass *superClass = [[targetObject java_getClass] getSuperclass];
  while (field == nil && superClass != nil) {
    @try {
      field = [superClass getDeclaredField:fieldName];
    }
    @catch (JavaLangNoSuchFieldException *e) {
      superClass = [superClass getSuperclass];
    }
  }
  if (field == nil) {
    return false;
  }
  [field setAccessibleWithBoolean:true];
  @try {
    [field setWithId:targetObject withId:fieldValue];
    return true;
  }
  @catch (JavaLangIllegalAccessException *e) {
    return false;
  }
}

- (id)getFieldValueUsingReflectionWithId:(id)targetObject
                            withNSString:(NSString *)fieldName {
  JavaLangReflectField *field;
  @try {
    field = [[nil_chk(targetObject) java_getClass] getDeclaredField:fieldName];
  }
  @catch (JavaLangNoSuchFieldException *e) {
    field = nil;
  }
  IOSClass *superClass = [[targetObject java_getClass] getSuperclass];
  while (field == nil && superClass != nil) {
    @try {
      field = [superClass getDeclaredField:fieldName];
    }
    @catch (JavaLangNoSuchFieldException *e) {
      superClass = [superClass getSuperclass];
    }
  }
  if (field == nil) {
    return nil;
  }
  [field setAccessibleWithBoolean:true];
  @try {
    return [field getWithId:targetObject];
  }
  @catch (JavaLangIllegalAccessException *e) {
    return nil;
  }
}

+ (id)invokePrivateMethodUsingReflectionWithId:(id)obj
                                  withNSString:(NSString *)methodName
                             withNSObjectArray:(IOSObjectArray *)params {
  return ASBaseWidget_invokePrivateMethodUsingReflectionWithId_withNSString_withNSObjectArray_(obj, methodName, params);
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return nil;
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  return nil;
}

- (void)addForegroundIfNeeded {
}

- (id)getForeground {
  return nil;
}

- (jboolean)isAfterParentInitRequired {
  return false;
}

- (void)afterParentInit {
}

- (void)drawableStateChanged {
  if (cachedDecorators_ != nil) {
    for (id<ASILifeCycleDecorator> __strong lifeCycleDecorator in nil_chk([cachedDecorators_ values])) {
      [((id<ASILifeCycleDecorator>) nil_chk(lifeCycleDecorator)) drawableStateChanged];
    }
  }
}

- (NSString *)getGroupName {
  return groupName_;
}

- (void)setDrawableBoundsWithInt:(jint)l
                         withInt:(jint)t
                         withInt:(jint)r
                         withInt:(jint)b {
}

- (void)setEventBubblersWithJavaUtilCollection:(id<JavaUtilCollection>)flags {
  if (eventBubblers_ == nil) {
    JreStrongAssignAndConsume(&eventBubblers_, new_JavaUtilHashSet_init());
  }
  [eventBubblers_ addAllWithJavaUtilCollection:flags];
}

- (id<JavaUtilSet>)getEventBubblers {
  return eventBubblers_;
}

- (void)applyThemeConstructorArgsStyleWithNSString:(NSString *)themeName
                                   withJavaUtilMap:(id<JavaUtilMap>)params {
  if (params != nil) {
    NSString *constAttrStr = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"values/theme", JreStrcat("$$", themeName, @"_constructor"), fragment_);
    ASModelExpressionParser_parseSimpleCssExpressionWithNSString_withJavaUtilMap_(constAttrStr, params);
  }
}

- (void)applyThemeStyleWithNSString:(NSString *)themeName {
  NSString *attrStr = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"values/theme", themeName, fragment_);
  if (attrStr != nil && ![attrStr java_isEmpty]) {
    IOSObjectArray *attrs = [attrStr java_split:@";"];
    {
      IOSObjectArray *a__ = attrs;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *attr = *b__++;
        IOSObjectArray *nameAndValue = [((NSString *) nil_chk(attr)) java_split:@"\\:"];
        NSString *key = IOSObjectArray_Get(nil_chk(nameAndValue), 0);
        NSString *value = nameAndValue->size_ <= 1 ? @"" : IOSObjectArray_Get(nameAndValue, 1);
        ASWidgetAttribute *attribute = [self getAttributeWithASHasWidgets:parent_ withNSString:[self getLocalName] withNSString:key];
        if (attribute != nil) {
          [self updateWidgetMapWithASWidgetAttribute:attribute withASWidgetAttributeValue:create_ASWidgetAttributeValue_initWithNSString_(value)];
        }
      }
    }
  }
}

- (id<ASIWidget>)loadLazyWidgetsWithASHasWidgets:(id<ASHasWidgets>)parent
                                         withInt:(jint)index
                                    withNSString:(NSString *)idKey
                                 withASLoopParam:(ASLoopParam *)model {
  id handler = ASPluginInvoker_getHandlerWithASHasWidgets_withInt_withASIFragment_(parent, index, fragment_);
  return ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(self, self, handler, idKey, model, index);
}

- (id<ASIWidget>)loadLazyWidgetsWithASHasWidgets:(id<ASHasWidgets>)parent {
  id handler = ASPluginInvoker_getHandlerWithASHasWidgets_withInt_withASIFragment_(parent, -1, fragment_);
  return ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(self, self, handler, @"", nil, -1);
}

- (id<ASIWidget>)loadLazyWidgetsWithASLoopParam:(ASLoopParam *)model {
  id handler = ASPluginInvoker_getHandlerWithASHasWidgets_withInt_withASIFragment_(parent_, -1, fragment_);
  return ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(self, self, handler, @"", model, -1);
}

- (void)loadAndAddWidgetsWithJavaUtilIterator:(id<JavaUtilIterator>)iterator
                                       withId:(id)handler
                                 withNSString:(NSString *)idKey
                              withASLoopParam:(ASLoopParam *)model {
  ASBaseWidget_loadAndAddWidgetsWithJavaUtilIterator_withId_withNSString_withASLoopParam_(self, iterator, handler, idKey, model);
}

- (id<ASIWidget>)loadWidgetWithASIWidget:(id<ASIWidget>)objWidget
                                  withId:(id)handler
                            withNSString:(NSString *)idKey
                         withASLoopParam:(ASLoopParam *)model
                                 withInt:(jint)index {
  return ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(self, objWidget, handler, idKey, model, index);
}

- (jint)getValidationErrorDisplayType {
  return validationErrorDisplayType_;
}

- (void)setValidationErrorDisplayTypeWithInt:(jint)validationErrorDisplayType {
  self->validationErrorDisplayType_ = validationErrorDisplayType;
}

- (void)setCustomErrorMessageKeysWithJavaUtilList:(id<JavaUtilList>)customErrorMessageKeys {
  JreStrongAssign(&self->customErrorMessageKeys_, customErrorMessageKeys);
}

- (void)setCustomErrorMessageValuesWithJavaUtilList:(id<JavaUtilList>)customErrorMessageValues {
  JreStrongAssign(&self->customErrorMessageValues_, customErrorMessageValues);
}

- (NSString *)getCustomMessageWithNSString:(NSString *)key {
  if (customErrorMessageKeys_ != nil) {
    jint index = [customErrorMessageKeys_ indexOfWithId:key];
    if (index != -1) {
      return [((id<JavaUtilList>) nil_chk(customErrorMessageValues_)) getWithInt:index];
    }
  }
  return nil;
}

- (NSString *)getFormGroupId {
  return formGroupId_;
}

- (NSString *)getErrorStyle {
  return errorStyle_;
}

- (void)setErrorStyleWithNSString:(NSString *)errorStyle {
  JreStrongAssign(&self->errorStyle_, errorStyle);
}

- (NSString *)getNormalStyle {
  return normalStyle_;
}

- (void)setNormalStyleWithNSString:(NSString *)normalStyle {
  JreStrongAssign(&self->normalStyle_, normalStyle);
}

- (void)__javaClone:(ASBaseWidget *)original {
  [super __javaClone:original];
  [parent_ release];
  [eventBus_ release];
  [fragment_ release];
}

- (void)dealloc {
  RELEASE_(attributes_);
  RELEASE_(params_);
  RELEASE_(userData_);
  RELEASE_(tmpCache_);
  RELEASE_(listener_);
  RELEASE_(localName_);
  RELEASE_(groupName_);
  RELEASE_(cachedDecorators_);
  RELEASE_(id__);
  RELEASE_(behaviorGroupId_);
  RELEASE_(eventBusHandlers_);
  RELEASE_(attributeCommandChainMap_);
  RELEASE_(updateAttributes_);
  RELEASE_(attributeCommandMap_);
  RELEASE_(commandPhases_);
  RELEASE_(bufferedAttributes_);
  RELEASE_(methodListeners_);
  RELEASE_(eventBubblers_);
  RELEASE_(modelParam_);
  RELEASE_(modelIdPath_);
  RELEASE_(modelSyncEvents_);
  RELEASE_(modelPojoToUi_);
  RELEASE_(modelUiToPojo_);
  RELEASE_(loopParam_);
  RELEASE_(modelPojoToUiParams_);
  RELEASE_(modelUiToPojoEventIds_);
  RELEASE_(formGroupId_);
  RELEASE_(errorStyle_);
  RELEASE_(normalStyle_);
  RELEASE_(customErrorMessageKeys_);
  RELEASE_(customErrorMessageValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommandChain;", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 17, -1, -1, -1, -1 },
    { NULL, "LASIFragment;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 33, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 35, 37, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x4, 38, 39, -1, 40, -1, -1 },
    { NULL, "LNSObject;", 0x2, 41, 19, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, 46, -1, -1 },
    { NULL, "LNSObject;", 0x1, 47, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 49, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 51, 19, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 52, -1, -1 },
    { NULL, "V", 0x1, 53, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x401, 30, 56, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 57, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttributeValue;", 0x1, 57, 59, -1, -1, -1, -1 },
    { NULL, "LASHasWidgets;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 61, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttributeMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 62, 19, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttribute;", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 65, 66, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 67, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 69, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 71, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 72, -1, 73, -1, -1 },
    { NULL, "V", 0x1, 68, 74, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 76, -1, 77, -1, -1 },
    { NULL, "V", 0x2, 78, 79, -1, 80, -1, -1 },
    { NULL, "V", 0x1, 75, 81, -1, 82, -1, -1 },
    { NULL, "V", 0x1, 83, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 84, 85, -1, 86, -1, -1 },
    { NULL, "LNSObject;", 0x2, 87, 88, -1, -1, -1, -1 },
    { NULL, "LASIWidgetLifeCycleListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 91, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 93, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLoopParam;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 95, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 101, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 102, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 103, 104, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 105, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 107, 108, -1, 109, -1, -1 },
    { NULL, "V", 0x1, 107, 110, -1, 111, -1, -1 },
    { NULL, "V", 0x1, 112, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 113, 49, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 114, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 116, 117, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 116, 118, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 119, 120, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 119, 121, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 122, 123, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 124, 49, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 125, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 126, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 127, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 128, 129, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 130, 131, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 132, 133, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 134, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 132, 135, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 136, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 137, 138, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 139, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x89, 140, 141, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 142, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 143, 144, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 145, 146, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 147, 148, -1, 149, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 150, -1, -1 },
    { NULL, "V", 0x1, 151, 152, -1, 153, -1, -1 },
    { NULL, "V", 0x1, 154, 19, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 155, 156, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 155, 61, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 155, 95, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 157, 158, -1, 159, -1, -1 },
    { NULL, "LASIWidget;", 0x2, 160, 161, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 162, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 163, 164, -1, 165, -1, -1 },
    { NULL, "V", 0x1, 166, 164, -1, 165, -1, -1 },
    { NULL, "LNSString;", 0x1, 167, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 168, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 169, 19, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getZIndex);
  methods[1].selector = @selector(setZIndexWithInt:);
  methods[2].selector = @selector(replayBufferedEvents);
  methods[3].selector = @selector(replayBufferedEventsInternal);
  methods[4].selector = @selector(hasBufferedAttributes);
  methods[5].selector = @selector(registerForAttributeCommandChainWithPhaseWithNSString:withNSStringArray:);
  methods[6].selector = @selector(registerForAttributeCommandChainWithNSStringArray:);
  methods[7].selector = @selector(applyAttributeCommandWithNSString:withNSString:withNSStringArray:withBoolean:withNSObjectArray:);
  methods[8].selector = @selector(reapplyAttributeCommandWithNSString:withNSString:withNSString:withNSObjectArray:);
  methods[9].selector = @selector(rerunCommandOnSourceWithNSString:withNSString:);
  methods[10].selector = @selector(getAttributeCommandValueWithNSString:withNSString:withNSString:);
  methods[11].selector = @selector(getAttributeCommandWithNSString:withNSString:withNSObjectArray:);
  methods[12].selector = @selector(addAttributeCommandToChainWithNSString:withNSStringArray:withASAttributeCommand:);
  methods[13].selector = @selector(getAttributeCommandChainWithNSString:);
  methods[14].selector = @selector(removeAttributeCommandFromChainWithNSString:withNSStringArray:withASAttributeCommand:);
  methods[15].selector = @selector(getFragment);
  methods[16].selector = @selector(newLazyInstance);
  methods[17].selector = @selector(unwrapWithId:);
  methods[18].selector = @selector(getId);
  methods[19].selector = @selector(getIdAsInt);
  methods[20].selector = @selector(setIdWithNSString:);
  methods[21].selector = @selector(getBehaviorGroupId);
  methods[22].selector = @selector(setBehaviorGroupIdWithNSString:);
  methods[23].selector = @selector(initialized);
  methods[24].selector = @selector(applyStyleToWidgets);
  methods[25].selector = @selector(quickConvertWithId:withNSString:);
  methods[26].selector = @selector(quickConvertWithId:withNSString:withNSString:withNSString:);
  methods[27].selector = @selector(applyStyleToWidgetWithASWidgetAttribute:withId:);
  methods[28].selector = @selector(setAttributeWithASWidgetAttribute:withId:withBoolean:);
  methods[29].selector = @selector(applyStyleToWidgetWithASWidgetAttribute:withASIWidget:withId:withNSString:);
  methods[30].selector = @selector(applyStyleToWidgetWithASWidgetAttribute:withASIWidget:withId:withNSString:withBoolean:);
  methods[31].selector = @selector(attributeBuffered);
  methods[32].selector = @selector(applyStyleToWidgetWithoutBufferingWithASWidgetAttribute:withASIWidget:withId:withNSString:withBoolean:);
  methods[33].selector = @selector(handleArrayTypeWithASWidgetAttribute:withNSString:withId:);
  methods[34].selector = @selector(handleArrayTypeWithId:withNSString:withNSString:);
  methods[35].selector = @selector(getDependentAttributesMapWithASIConverter:);
  methods[36].selector = @selector(getConvertedValueWithNSString:);
  methods[37].selector = @selector(getDecoratorWithASWidgetAttribute:);
  methods[38].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[39].selector = @selector(getUserDataWithNSString:);
  methods[40].selector = @selector(storeUserDataWithNSString:withId:);
  methods[41].selector = @selector(storeInTempCacheWithNSString:withId:);
  methods[42].selector = @selector(getFromTempCacheWithNSString:);
  methods[43].selector = @selector(getParams);
  methods[44].selector = @selector(setParamsWithJavaUtilMap:);
  methods[45].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[46].selector = @selector(getAttributeValueWithNSString:);
  methods[47].selector = @selector(getAttributeValueWithNSString:withASWidgetAttributeMap:);
  methods[48].selector = @selector(getAttributeValueWithASWidgetAttribute:withASWidgetAttributeMap:);
  methods[49].selector = @selector(getParent);
  methods[50].selector = @selector(setParentWithASHasWidgets:);
  methods[51].selector = @selector(getAttributes);
  methods[52].selector = @selector(getLocalName);
  methods[53].selector = @selector(stripOSWithNSString:);
  methods[54].selector = @selector(getAttributeWithASHasWidgets:withNSString:withNSString:);
  methods[55].selector = @selector(checkIfAttributeMatchesWithASWidgetAttributeValue:);
  methods[56].selector = @selector(convertToIntFromDpWithNSString:);
  methods[57].selector = @selector(updateWidgetMapWithASWidgetAttributeMap:);
  methods[58].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[59].selector = @selector(updateWidgetMapWithASWidgetAttribute:withJavaUtilList:);
  methods[60].selector = @selector(updateWidgetMapWithASWidgetAttribute:withASWidgetAttributeValue:);
  methods[61].selector = @selector(executeCommandWithASIWidget:withJavaUtilList:withASIWidget_CommandCallBack:withInt:);
  methods[62].selector = @selector(handlePathWithJavaUtilMap:withASIWidget:withInt:);
  methods[63].selector = @selector(executeCommandWithJavaUtilMap:withASIWidget_CommandCallBack:withInt:);
  methods[64].selector = @selector(requestLayoutNInvalidateIfRequiredWithInt:);
  methods[65].selector = @selector(compareByValueWithJavaUtilMap:withNSString:withNSString:withNSString:);
  methods[66].selector = @selector(getAttributeValueFromWidgetWithASWidgetAttribute:withASIWidget:);
  methods[67].selector = @selector(getListener);
  methods[68].selector = @selector(setListenerWithASIWidgetLifeCycleListener:);
  methods[69].selector = @selector(restoreToDefaultState);
  methods[70].selector = @selector(findWidgetByIdWithNSString:);
  methods[71].selector = @selector(isInvalidateOnFrameChange);
  methods[72].selector = @selector(setInvalidateOnFrameChangeWithBoolean:);
  methods[73].selector = @selector(getModelPojoToUiParams);
  methods[74].selector = @selector(getModelPojoToUi);
  methods[75].selector = @selector(getModelUiToPojo);
  methods[76].selector = @selector(getModelParam);
  methods[77].selector = @selector(getLoopParam);
  methods[78].selector = @selector(setLoopParamWithASLoopParam:);
  methods[79].selector = @selector(initWithNSString:withNSString:);
  methods[80].selector = @selector(getModelIdPath);
  methods[81].selector = @selector(setModelIdPathWithNSString:);
  methods[82].selector = @selector(getModelSyncEvents);
  methods[83].selector = @selector(getModelUiToPojoEventIds);
  methods[84].selector = @selector(setModelUiToPojoEventIdsWithNSString:);
  methods[85].selector = @selector(setModelSyncEventsWithNSString:);
  methods[86].selector = @selector(setModelParamWithNSString:);
  methods[87].selector = @selector(setModelPojoToUiWithNSString:);
  methods[88].selector = @selector(setModelPojoToUiParamsWithNSString:);
  methods[89].selector = @selector(setModelUiToPojoWithNSString:);
  methods[90].selector = @selector(applyModelAttributes);
  methods[91].selector = @selector(removeObjectListenersWithASIWidget:);
  methods[92].selector = @selector(getEventBusHandlers);
  methods[93].selector = @selector(applyModelToWidget);
  methods[94].selector = @selector(syncPojoToUi);
  methods[95].selector = @selector(storeModelToScopeFromModelParam);
  methods[96].selector = @selector(requestLayout);
  methods[97].selector = @selector(invalidate);
  methods[98].selector = @selector(setVisibleWithBoolean:);
  methods[99].selector = @selector(isInitialised);
  methods[100].selector = @selector(getBaseLine);
  methods[101].selector = @selector(updateModelToEventMapWithJavaUtilMap:withNSString:withNSString:);
  methods[102].selector = @selector(updateModelToEventMapWithJavaUtilMap:withNSString:withASLoopParam:);
  methods[103].selector = @selector(syncModelFromUiToPojoWithNSString:);
  methods[104].selector = @selector(handleModelUiToPojo);
  methods[105].selector = @selector(getModelByPathWithNSString:withId:);
  methods[106].selector = @selector(updateModelByPathWithNSString:withId:withId:);
  methods[107].selector = @selector(storeModelToScopeWithNSString:withASModelScope:withId:);
  methods[108].selector = @selector(storeModelToScopeWithNSString:withASModelScope:withId:withASLoopParam:);
  methods[109].selector = @selector(getModelFromScopeWithNSString:withASModelScope:);
  methods[110].selector = @selector(getModelFromScopeWithNSString:withASModelScope:withASLoopParam:);
  methods[111].selector = @selector(changeModelDataTypeWithASModelDataType:withId:);
  methods[112].selector = @selector(notifyDataSetChanged);
  methods[113].selector = @selector(updateModelDataWithNSString:withId:);
  methods[114].selector = @selector(findNearestViewWithNSString:);
  methods[115].selector = @selector(getBooleanWithId:);
  methods[116].selector = @selector(hasFeatureWithNSString:withNSString:);
  methods[117].selector = @selector(runAttributeCommandsWithId:withNSString:withNSString:withNSObjectArray:);
  methods[118].selector = @selector(addDecoratorWithASILifeCycleDecorator:);
  methods[119].selector = @selector(executeMethodListenersWithNSString:withNSObjectArray:);
  methods[120].selector = @selector(hasMethodListenerWithNSString:);
  methods[121].selector = @selector(executeMethodListenersWithNSString:withJavaLangRunnable:withNSObjectArray:);
  methods[122].selector = @selector(setOnMethodCalledWithBoolean:);
  methods[123].selector = @selector(setFieldUsingReflectionWithId:withNSString:withId:);
  methods[124].selector = @selector(getFieldValueUsingReflectionWithId:withNSString:);
  methods[125].selector = @selector(invokePrivateMethodUsingReflectionWithId:withNSString:withNSObjectArray:);
  methods[126].selector = @selector(createWrapperViewHolderWithInt:);
  methods[127].selector = @selector(createWrapperViewWithId:withInt:);
  methods[128].selector = @selector(addForegroundIfNeeded);
  methods[129].selector = @selector(getForeground);
  methods[130].selector = @selector(isAfterParentInitRequired);
  methods[131].selector = @selector(afterParentInit);
  methods[132].selector = @selector(drawableStateChanged);
  methods[133].selector = @selector(getGroupName);
  methods[134].selector = @selector(setDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[135].selector = @selector(setEventBubblersWithJavaUtilCollection:);
  methods[136].selector = @selector(getEventBubblers);
  methods[137].selector = @selector(applyThemeConstructorArgsStyleWithNSString:withJavaUtilMap:);
  methods[138].selector = @selector(applyThemeStyleWithNSString:);
  methods[139].selector = @selector(loadLazyWidgetsWithASHasWidgets:withInt:withNSString:withASLoopParam:);
  methods[140].selector = @selector(loadLazyWidgetsWithASHasWidgets:);
  methods[141].selector = @selector(loadLazyWidgetsWithASLoopParam:);
  methods[142].selector = @selector(loadAndAddWidgetsWithJavaUtilIterator:withId:withNSString:withASLoopParam:);
  methods[143].selector = @selector(loadWidgetWithASIWidget:withId:withNSString:withASLoopParam:withInt:);
  methods[144].selector = @selector(getValidationErrorDisplayType);
  methods[145].selector = @selector(setValidationErrorDisplayTypeWithInt:);
  methods[146].selector = @selector(setCustomErrorMessageKeysWithJavaUtilList:);
  methods[147].selector = @selector(setCustomErrorMessageValuesWithJavaUtilList:);
  methods[148].selector = @selector(getCustomMessageWithNSString:);
  methods[149].selector = @selector(getFormGroupId);
  methods[150].selector = @selector(getErrorStyle);
  methods[151].selector = @selector(setErrorStyleWithNSString:);
  methods[152].selector = @selector(getNormalStyle);
  methods[153].selector = @selector(setNormalStyleWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "parent_", "LASHasWidgets;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "attributes_", "LASWidgetAttributeMap;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "params_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 170, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 170, -1 },
    { "tmpCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 170, -1 },
    { "listener_", "LASIWidgetLifeCycleListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "localName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "groupName_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "eventBus_", "LASEventBus;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cachedDecorators_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 171, -1 },
    { "id__", "LNSString;", .constantValue.asLong = 0, 0x2, 172, -1, -1, -1 },
    { "behaviorGroupId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventBusHandlers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 173, -1 },
    { "initialised_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LASIFragment;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "attributeCommandChainMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 174, -1 },
    { "updateAttributes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 175, -1 },
    { "attributeCommandMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 176, -1 },
    { "commandPhases_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 177, -1 },
    { "bufferedAttributes_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 178, -1 },
    { "methodListeners_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 179, -1 },
    { "onMethodCalled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "zIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventBubblers_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 180, -1 },
    { "modelParam_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelIdPath_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelSyncEvents_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelPojoToUi_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelUiToPojo_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "loopParam_", "LASLoopParam;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelPojoToUiParams_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modelUiToPojoEventIds_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "invalidateOnFrameChange_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "formGroupId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "errorStyle_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "normalStyle_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "validationErrorDisplayType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "customErrorMessageKeys_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 181, -1 },
    { "customErrorMessageValues_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 181, -1 },
  };
  static const void *ptrTable[] = { "setZIndex", "I", "registerForAttributeCommandChainWithPhase", "LNSString;[LNSString;", "registerForAttributeCommandChain", "[LNSString;", "applyAttributeCommand", "LNSString;LNSString;[LNSString;Z[LNSObject;", "reapplyAttributeCommand", "LNSString;LNSString;LNSString;[LNSObject;", "rerunCommandOnSource", "LNSString;LNSString;", "getAttributeCommandValue", "LNSString;LNSString;LNSString;", "getAttributeCommand", "LNSString;LNSString;[LNSObject;", "addAttributeCommandToChain", "LNSString;[LNSString;LASAttributeCommand;", "getAttributeCommandChain", "LNSString;", "removeAttributeCommandFromChain", "unwrap", "LNSObject;", "setId", "setBehaviorGroupId", "quickConvert", "LNSObject;LNSString;", "LNSObject;LNSString;LNSString;LNSString;", "applyStyleToWidget", "LASWidgetAttribute;LNSObject;", "setAttribute", "LASWidgetAttribute;LNSObject;Z", "LASWidgetAttribute;LASIWidget;LNSObject;LNSString;", "LASWidgetAttribute;LASIWidget;LNSObject;LNSString;Z", "applyStyleToWidgetWithoutBuffering", "handleArrayType", "LASWidgetAttribute;LNSString;LNSObject;", "LNSObject;LNSString;LNSString;", "getDependentAttributesMap", "LASIConverter;", "(Lcom/ashera/converter/IConverter;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getConvertedValue", "getDecorator", "LASWidgetAttribute;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "getUserData", "storeUserData", "LNSString;LNSObject;", "storeInTempCache", "getFromTempCache", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "setParams", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttributeValue", "LNSString;LASWidgetAttributeMap;", "LASWidgetAttribute;LASWidgetAttributeMap;", "setParent", "LASHasWidgets;", "stripOS", "getAttribute", "LASHasWidgets;LNSString;LNSString;", "checkIfAttributeMatches", "LASWidgetAttributeValue;", "convertToIntFromDp", "updateWidgetMap", "LASWidgetAttributeMap;", "updateMeasuredDimension", "II", "LASWidgetAttribute;LJavaUtilList;", "(Lcom/ashera/widget/WidgetAttribute;Ljava/util/List<Lcom/ashera/widget/WidgetAttributeValue;>;)V", "LASWidgetAttribute;LASWidgetAttributeValue;", "executeCommand", "LASIWidget;LJavaUtilList;LASIWidget_CommandCallBack;I", "(Lcom/ashera/widget/IWidget;Ljava/util/List<Ljava/lang/Object;>;Lcom/ashera/widget/IWidget$CommandCallBack;I)V", "handlePath", "LJavaUtilMap;LASIWidget;I", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/widget/IWidget;I)V", "LJavaUtilMap;LASIWidget_CommandCallBack;I", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/widget/IWidget$CommandCallBack;I)V", "requestLayoutNInvalidateIfRequired", "compareByValue", "LJavaUtilMap;LNSString;LNSString;LNSString;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", "getAttributeValueFromWidget", "LASWidgetAttribute;LASIWidget;", "setListener", "LASIWidgetLifeCycleListener;", "findWidgetById", "setInvalidateOnFrameChange", "Z", "setLoopParam", "LASLoopParam;", "setModelIdPath", "setModelUiToPojoEventIds", "setModelSyncEvents", "setModelParam", "setModelPojoToUi", "setModelPojoToUiParams", "setModelUiToPojo", "removeObjectListeners", "LASIWidget;", "()Ljava/util/List<Lcom/ashera/widget/bus/EventBusHandler;>;", "setVisible", "updateModelToEventMap", "LJavaUtilMap;LNSString;LNSString;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/String;)V", "LJavaUtilMap;LNSString;LASLoopParam;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Lcom/ashera/model/LoopParam;)V", "syncModelFromUiToPojo", "getModelByPath", "updateModelByPath", "LNSString;LNSObject;LNSObject;", "storeModelToScope", "LNSString;LASModelScope;LNSObject;", "LNSString;LASModelScope;LNSObject;LASLoopParam;", "getModelFromScope", "LNSString;LASModelScope;", "LNSString;LASModelScope;LASLoopParam;", "changeModelDataType", "LASModelDataType;LNSObject;", "updateModelData", "findNearestView", "getBoolean", "hasFeature", "runAttributeCommands", "LNSObject;LNSString;LNSString;[LNSObject;", "addDecorator", "LASILifeCycleDecorator;", "executeMethodListeners", "LNSString;[LNSObject;", "hasMethodListener", "LNSString;LJavaLangRunnable;[LNSObject;", "setOnMethodCalled", "setFieldUsingReflection", "LNSObject;LNSString;LNSObject;", "getFieldValueUsingReflection", "invokePrivateMethodUsingReflection", "LNSObject;LNSString;[LNSObject;", "createWrapperViewHolder", "createWrapperView", "LNSObject;I", "setDrawableBounds", "IIII", "setEventBubblers", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Integer;>;)V", "()Ljava/util/Set<Ljava/lang/Integer;>;", "applyThemeConstructorArgsStyle", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "applyThemeStyle", "loadLazyWidgets", "LASHasWidgets;ILNSString;LASLoopParam;", "loadAndAddWidgets", "LJavaUtilIterator;LNSObject;LNSString;LASLoopParam;", "(Ljava/util/Iterator<Lcom/ashera/widget/IWidget;>;Ljava/lang/Object;Ljava/lang/String;Lcom/ashera/model/LoopParam;)V", "loadWidget", "LASIWidget;LNSObject;LNSString;LASLoopParam;I", "setValidationErrorDisplayType", "setCustomErrorMessageKeys", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "setCustomErrorMessageValues", "getCustomMessage", "setErrorStyle", "setNormalStyle", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/ILifeCycleDecorator;>;", "id", "Ljava/util/List<Lcom/ashera/widget/bus/EventBusHandler;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/AttributeCommandChain;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/AttributeCommand;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Set<Ljava/lang/String;>;>;", "Ljava/util/List<Lcom/ashera/widget/BaseWidget$EventHolder;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/List<Lcom/ashera/widget/ILifeCycleDecorator;>;>;", "Ljava/util/Set<Ljava/lang/Integer;>;", "Ljava/util/List<Ljava/lang/String;>;", "LASBaseWidget_LazyBaseWidget;LASBaseWidget_EventHolder;" };
  static const J2ObjcClassInfo _ASBaseWidget = { "BaseWidget", "com.ashera.widget", ptrTable, methods, fields, 7, 0x401, 154, 39, -1, 182, -1, -1, -1 };
  return &_ASBaseWidget;
}

@end

void ASBaseWidget_addAttributeCommandToChainWithNSString_withNSStringArray_withASAttributeCommand_(ASBaseWidget *self, NSString *sourceName, IOSObjectArray *attributes, id<ASAttributeCommand> attributeCommand) {
  if (self->attributeCommandChainMap_ == nil || ![self->attributeCommandChainMap_ containsKeyWithId:sourceName]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", @"Call registerValueCommandExecutor for attribute ", sourceName, @" in nativeCreate method "));
  }
  ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([self getAttributeCommandChainWithNSString:sourceName]);
  [((ASAttributeCommandChain *) nil_chk(attributeCommandChain)) addCommandWithASAttributeCommand:attributeCommand];
  {
    IOSObjectArray *a__ = attributes;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *attributeName = *b__++;
      if (![((id<JavaUtilMap>) nil_chk(self->updateAttributes_)) containsKeyWithId:attributeName]) {
        [((id<JavaUtilMap>) nil_chk(self->updateAttributes_)) putWithId:attributeName withId:create_JavaUtilArrayList_init()];
      }
      [((id<JavaUtilList>) nil_chk([((id<JavaUtilMap>) nil_chk(self->updateAttributes_)) getWithId:attributeName])) addWithId:sourceName];
    }
  }
  if ([self isInitialised] && ((IOSObjectArray *) nil_chk(attributes))->size_ > 0) {
    id value = JreRetainedLocalValue([attributeCommandChain getOriginalStringValue]);
    [self applyStyleToWidgetWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([self getLocalName], sourceName) withId:value];
  }
}

void ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue, NSString *phase) {
  ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(self, widgetAttribute, childWidget, objValue, phase, false);
}

void ASBaseWidget_applyStyleToWidgetWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue, NSString *phase, jboolean skipConvert) {
  jint bufferStrategy = [((ASWidgetAttribute *) nil_chk(widgetAttribute)) getBufferStrategy];
  if (bufferStrategy > 0 && ((bufferStrategy == ASIWidget_BUFFER_STRATEGY_ALWAYS) || !([self isInitialised] && bufferStrategy == ASIWidget_BUFFER_STRATEGY_DURING_INIT))) {
    if (self->bufferedAttributes_ == nil) {
      JreStrongAssignAndConsume(&self->bufferedAttributes_, new_JavaUtilArrayList_init());
    }
    [self->bufferedAttributes_ addWithId:create_ASBaseWidget_EventHolder_initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_(self, widgetAttribute, childWidget, objValue)];
    [self attributeBuffered];
    return;
  }
  ASBaseWidget_applyStyleToWidgetWithoutBufferingWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(self, widgetAttribute, childWidget, objValue, phase, skipConvert);
}

void ASBaseWidget_applyStyleToWidgetWithoutBufferingWithASWidgetAttribute_withASIWidget_withId_withNSString_withBoolean_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue, NSString *phase, jboolean skipConvert) {
  @try {
    NSString *type = JreRetainedLocalValue([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getAttributeType]);
    id convertedValue = nil;
    if (!skipConvert) {
      convertedValue = [self quickConvertWithId:objValue withNSString:type];
      convertedValue = ASBaseWidget_handleArrayTypeWithASWidgetAttribute_withNSString_withId_(self, widgetAttribute, type, convertedValue);
    }
    else {
      convertedValue = objValue;
    }
    NSString *strValue = nil;
    if ([objValue isKindOfClass:[NSString class]]) {
      strValue = (NSString *) objValue;
    }
    if (self->attributeCommandChainMap_ != nil) {
      ASAttributeCommandChain *attributeCommandChain = JreRetainedLocalValue([self->attributeCommandChainMap_ getWithId:[widgetAttribute getAttributeName]]);
      if (attributeCommandChain != nil) {
        [attributeCommandChain setOriginalStringValueWithNSString:strValue];
        [attributeCommandChain setOriginalValueWithId:convertedValue];
        [attributeCommandChain setAttributeNameWithNSString:[widgetAttribute getAttributeName]];
        if (phase == nil) {
          convertedValue = [attributeCommandChain getValueWithASIWidget:self];
        }
        else {
          convertedValue = [attributeCommandChain getValueWithASIWidget:self withId:childWidget == nil ? nil : [childWidget asNativeWidget] withNSString:phase withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
        }
      }
    }
    if (convertedValue != nil) {
      id<ASILifeCycleDecorator> lifeCycleDecorator = ASBaseWidget_getDecoratorWithASWidgetAttribute_(self, widgetAttribute);
      if (lifeCycleDecorator != nil) {
        [lifeCycleDecorator setAttributeWithASWidgetAttribute:widgetAttribute withNSString:strValue withId:convertedValue];
      }
      if (childWidget == nil) {
        [self setAttributeWithASWidgetAttribute:widgetAttribute withNSString:strValue withId:convertedValue withASILifeCycleDecorator:lifeCycleDecorator];
      }
      else {
        [((id<ASHasWidgets>) cast_check(self, ASHasWidgets_class_())) setChildAttributeWithASIWidget:childWidget withASWidgetAttribute:widgetAttribute withNSString:strValue withId:convertedValue];
      }
      if ([self isInitialised] && self->updateAttributes_ != nil) {
        NSString *attributeName = JreRetainedLocalValue([widgetAttribute getAttributeName]);
        if ([((id<JavaUtilMap>) nil_chk(self->updateAttributes_)) containsKeyWithId:attributeName]) {
          id<JavaUtilList> attributes = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->updateAttributes_)) getWithId:attributeName]);
          if (attributes != nil) {
            for (NSString * __strong attribute in attributes) {
              ASAttributeCommandChain *commandExecutor = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->attributeCommandChainMap_)) getWithId:attribute]);
              [self applyStyleToWidgetWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([self getLocalName], attribute) withId:[((ASAttributeCommandChain *) nil_chk(commandExecutor)) getOriginalStringValue]];
            }
          }
        }
      }
    }
  }
  @catch (JavaLangException *e) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$C$", @"error -> ", [[self java_getClass] getName], ' ', [e getMessage])];
    [e printStackTrace];
    [((id<ASIFragment>) nil_chk(self->fragment_)) addErrorWithASError:create_ASError_initWithASWidgetAttribute_withASIWidget_withJavaLangException_(widgetAttribute, self, e)];
  }
}

id ASBaseWidget_handleArrayTypeWithASWidgetAttribute_withNSString_withId_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, NSString *type, id convertedValue) {
  if ([@"array" isEqual:type]) {
    NSString *converterTypeForArray = JreRetainedLocalValue([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getArrayType]);
    NSString *arrayListToFinalType = JreRetainedLocalValue([widgetAttribute getArrayListToFinalType]);
    convertedValue = ASBaseWidget_handleArrayTypeWithId_withNSString_withNSString_(self, convertedValue, converterTypeForArray, arrayListToFinalType);
  }
  return convertedValue;
}

id ASBaseWidget_handleArrayTypeWithId_withNSString_withNSString_(ASBaseWidget *self, id objValue, NSString *arrayType, NSString *finalArrayType) {
  if (arrayType != nil) {
    IOSObjectArray *values = (IOSObjectArray *) cast_check(objValue, IOSClass_arrayType(NSString_class_(), 1));
    id<JavaUtilList> finalValues = create_JavaUtilArrayList_initWithInt_(((IOSObjectArray *) nil_chk(values))->size_);
    {
      IOSObjectArray *a__ = values;
      NSString * const *b__ = a__->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *value = *b__++;
        [finalValues addWithId:[self quickConvertWithId:value withNSString:arrayType]];
      }
    }
    if (finalArrayType != nil) {
      objValue = [self quickConvertWithId:finalValues withNSString:finalArrayType];
    }
    else {
      objValue = finalValues;
    }
  }
  return objValue;
}

id ASBaseWidget_getConvertedValueWithNSString_(ASBaseWidget *self, NSString *attr) {
  if (self->attributes_ != nil) {
    ASWidgetAttribute *widgetAttribute = JreRetainedLocalValue([self->attributes_ getWidgetAttributeWithNSString:attr]);
    if (widgetAttribute != nil) {
      id<JavaUtilList> widgetAttributeValues = JreRetainedLocalValue([((ASWidgetAttributeMap *) nil_chk(self->attributes_)) getWithId:widgetAttribute]);
      if (widgetAttributeValues == nil || [widgetAttributeValues isEmpty]) {
        return nil;
      }
      id objValue = nil;
      for (ASWidgetAttributeValue * __strong widgetAttributeValue in widgetAttributeValues) {
        if ([self checkIfAttributeMatchesWithASWidgetAttributeValue:widgetAttributeValue]) {
          NSString *strValue = JreRetainedLocalValue([((ASWidgetAttributeValue *) nil_chk(widgetAttributeValue)) getValue]);
          id<ASIConverter> converter = ASPluginInvoker_getConverterWithNSString_([widgetAttribute getAttributeType]);
          objValue = strValue;
          if (converter != nil && strValue != nil) {
            id<JavaUtilMap> dependentAttributesMap = JreRetainedLocalValue([self getDependentAttributesMapWithASIConverter:converter]);
            objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(converter, dependentAttributesMap, objValue, self->fragment_);
          }
          break;
        }
      }
      return objValue;
    }
    return nil;
  }
  else {
    return nil;
  }
}

id<ASILifeCycleDecorator> ASBaseWidget_getDecoratorWithASWidgetAttribute_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute) {
  NSString *decorator = JreRetainedLocalValue([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getDecorator]);
  if (decorator != nil) {
    if (self->cachedDecorators_ == nil) {
      JreStrongAssignAndConsume(&self->cachedDecorators_, new_JavaUtilHashMap_init());
    }
    if (![self->cachedDecorators_ containsKeyWithId:decorator]) {
      id<ASILifeCycleDecorator> lifeCycleDecor = ASWidgetFactory_getLifeCycleDecorWithNSString_withASIWidget_(decorator, self);
      if (lifeCycleDecor != nil) {
        [((id<JavaUtilMap>) nil_chk(self->cachedDecorators_)) putWithId:decorator withId:lifeCycleDecor];
        [self addDecoratorWithASILifeCycleDecorator:lifeCycleDecor];
      }
    }
  }
  return self->cachedDecorators_ != nil ? [self->cachedDecorators_ getWithId:decorator] : nil;
}

void ASBaseWidget_createWithASIFragment_withJavaUtilMap_(ASBaseWidget *self, id<ASIFragment> fragment, id<JavaUtilMap> params) {
  self->fragment_ = fragment;
  JreStrongAssign(&self->params_, params);
  self->eventBus_ = [((id<ASIFragment>) nil_chk(fragment)) getEventBus];
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"formGroupId"]) {
    JreStrongAssign(&self->formGroupId_, (NSString *) cast_chk([params getWithId:@"formGroupId"], [NSString class]));
  }
}

NSString *ASBaseWidget_stripOSWithNSString_(ASBaseWidget *self, NSString *key) {
  NSString *os = ASPluginInvoker_getOS();
  if ([((NSString *) nil_chk(key)) java_hasSuffix:JreStrcat("C$", '-', [((NSString *) nil_chk(os)) lowercaseString])]) {
    key = [key java_substring:0 endIndex:[key java_lastIndexOfString:JreStrcat("C$", '-', [os lowercaseString])]];
  }
  return key;
}

jint ASBaseWidget_convertToIntFromDpWithNSString_(ASBaseWidget *self, NSString *dimension) {
  if (dimension == nil) {
    return -1;
  }
  @try {
    return JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(dimension));
  }
  @catch (JavaLangException *e) {
    return -1;
  }
}

void ASBaseWidget_handlePathWithJavaUtilMap_withASIWidget_withInt_(ASBaseWidget *self, id<JavaUtilMap> map, id<ASIWidget> w, jint methods) {
  id<JavaUtilList> paths = ASPluginInvoker_getListWithId_([((id<JavaUtilMap>) nil_chk(map)) getWithId:@"paths"]);
  id<ASIWidget> widget = JreRetainedLocalValue(w);
  id<JavaUtilList> pathWidgets = create_JavaUtilArrayList_init();
  for (id __strong pathObj in nil_chk(paths)) {
    NSString *path = ASPluginInvoker_getStringWithId_(pathObj);
    if ([((NSString *) nil_chk(path)) java_hasPrefix:@"@+id/"]) {
      widget = [((id<ASIWidget>) nil_chk(widget)) findWidgetByIdWithNSString:path];
      [pathWidgets addWithId:widget];
    }
    if ([path java_hasPrefix:@"@+pos/"]) {
      if ([ASHasWidgets_class_() isInstance:widget]) {
        widget = [((id<ASHasWidgets>) nil_chk(((id<ASHasWidgets>) cast_check(widget, ASHasWidgets_class_())))) getWithInt:[((JavaLangInteger *) nil_chk(ASPluginInvoker_getIntWithId_([path java_substring:[@"@+pos/" java_length]]))) intValue]];
        [pathWidgets addWithId:widget];
      }
    }
  }
  if ([pathWidgets size] == [paths size]) {
    [((id<ASIWidget>) nil_chk(widget)) executeCommandWithJavaUtilMap:map withASIWidget_CommandCallBack:nil withInt:methods];
  }
}

jint ASBaseWidget_compareByValueWithJavaUtilMap_withNSString_withNSString_withNSString_(ASBaseWidget *self, id<JavaUtilMap> payLoad, NSString *a, NSString *b, NSString *orderKey) {
  id valueA = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(payLoad)) getWithId:a]);
  id valueB = JreRetainedLocalValue([payLoad getWithId:b]);
  id<JavaUtilMap> mapA = ASPluginInvoker_getMapWithId_(valueA);
  id<JavaUtilMap> mapB = ASPluginInvoker_getMapWithId_(valueB);
  if (mapA != nil && mapB != nil) {
    id objectA = JreRetainedLocalValue([mapA getWithId:orderKey]);
    id objectB = JreRetainedLocalValue([mapB getWithId:orderKey]);
    if (objectA != nil && objectB != nil) {
      jint orderKeyA = [((JavaLangInteger *) nil_chk(ASPluginInvoker_getIntWithId_(objectA))) intValue];
      jint orderKeyB = [((JavaLangInteger *) nil_chk(ASPluginInvoker_getIntWithId_(objectB))) intValue];
      return orderKeyA - orderKeyB;
    }
  }
  else if (mapA != nil) {
    return 0;
  }
  return -1;
}

id ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(ASBaseWidget *self, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget) {
  id objValue;
  id<ASILifeCycleDecorator> lifeCycleDecorator = ASBaseWidget_getDecoratorWithASWidgetAttribute_(self, widgetAttribute);
  if (childWidget != nil) {
    objValue = [((id<ASHasWidgets>) cast_check(self, ASHasWidgets_class_())) getChildAttributeWithASIWidget:childWidget withASWidgetAttribute:widgetAttribute];
  }
  else if (lifeCycleDecorator != nil) {
    objValue = [lifeCycleDecorator getAttributeWithASWidgetAttribute:widgetAttribute];
  }
  else {
    objValue = [self getAttributeWithASWidgetAttribute:widgetAttribute withASILifeCycleDecorator:ASBaseWidget_getDecoratorWithASWidgetAttribute_(self, widgetAttribute)];
  }
  id<ASIConverter> converter = ASPluginInvoker_getConverterWithNSString_([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getAttributeType]);
  if (converter != nil && objValue != nil) {
    objValue = ASPluginInvoker_convertToWithASIConverter_withId_withASIFragment_(converter, objValue, self->fragment_);
  }
  return objValue;
}

void ASBaseWidget_initWithNSString_withNSString_(ASBaseWidget *self, NSString *groupName, NSString *localName) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->attributes_, new_ASWidgetAttributeMap_init());
  JreStrongAssign(&self->localName_, localName);
  JreStrongAssign(&self->groupName_, groupName);
}

void ASBaseWidget_syncPojoToUi(ASBaseWidget *self) {
  id<JavaUtilList> modelPojoToUiHolders = ASModelExpressionParser_parsePojoToUiExpressionWithNSString_(self->modelPojoToUi_);
  for (ASModelExpressionParser_ModelPojoToUiHolder * __strong modelPojoToUiHolder in nil_chk(modelPojoToUiHolders)) {
    NSString *modelAttribute = JreRetainedLocalValue(((ASModelExpressionParser_ModelPojoToUiHolder *) nil_chk(modelPojoToUiHolder))->modelAttribute_);
    NSString *varPath = JreRetainedLocalValue(modelPojoToUiHolder->varPath_);
    NSString *key = JreRetainedLocalValue(modelPojoToUiHolder->key_);
    ASModelScope *varScope = JreRetainedLocalValue(modelPojoToUiHolder->varScope_);
    id obj = JreRetainedLocalValue([self getModelFromScopeWithNSString:key withASModelScope:varScope]);
    obj = [self getModelByPathWithNSString:varPath withId:obj];
    NSString *methodName = JreRetainedLocalValue(modelPojoToUiHolder->methodName_);
    if (methodName != nil) {
      obj = ASExpressionMethodHandler_getValueWithNSString_withId_withASIWidget_(methodName, obj, self);
    }
    ASWidgetAttribute *widgetAttribute = JreRetainedLocalValue([self getAttributeWithASHasWidgets:[self getParent] withNSString:[self getLocalName] withNSString:modelAttribute]);
    [self applyStyleToWidgetWithASWidgetAttribute:widgetAttribute withId:obj];
    [self requestLayoutNInvalidateIfRequiredWithInt:[((ASWidgetAttribute *) nil_chk(widgetAttribute)) getUpdateUiFlag]];
  }
}

void ASBaseWidget_storeModelToScopeFromModelParam(ASBaseWidget *self) {
  if (self->modelParam_ != nil && ![self->modelParam_ isEqual:@""]) {
    id<JavaUtilList> modelVarHolders = ASModelExpressionParser_parseModelVarExpressionWithNSString_(self->modelParam_);
    for (ASModelExpressionParser_ModelVarHolder * __strong modelVarHolder in nil_chk(modelVarHolders)) {
      NSString *varName = JreRetainedLocalValue(((ASModelExpressionParser_ModelVarHolder *) nil_chk(modelVarHolder))->varName_);
      NSString *varPath = JreRetainedLocalValue(modelVarHolder->varPath_);
      NSString *key = JreRetainedLocalValue(modelVarHolder->key_);
      ASModelScope *varSource = JreRetainedLocalValue(modelVarHolder->varSource_);
      ASModelScope *varScope = JreRetainedLocalValue(modelVarHolder->varScope_);
      ASModelDataType *dataType = JreRetainedLocalValue(modelVarHolder->dataType_);
      id obj = JreRetainedLocalValue([self getModelFromScopeWithNSString:key withASModelScope:varSource]);
      obj = [self getModelByPathWithNSString:varPath withId:obj];
      obj = [self changeModelDataTypeWithASModelDataType:dataType withId:obj];
      [self storeModelToScopeWithNSString:varName withASModelScope:varScope withId:obj];
    }
  }
}

void ASBaseWidget_handleModelUiToPojo(ASBaseWidget *self) {
  id<JavaUtilList> modelUiToPojoHolders = ASModelExpressionParser_parseUiToPojoExpressionWithNSString_(self->modelUiToPojo_);
  for (ASModelExpressionParser_ModelUiToPojoHolder * __strong modelUiToPojoHolder in nil_chk(modelUiToPojoHolders)) {
    NSString *varPath = JreRetainedLocalValue(((ASModelExpressionParser_ModelUiToPojoHolder *) nil_chk(modelUiToPojoHolder))->varPath_);
    NSString *varAttributeName = JreRetainedLocalValue(modelUiToPojoHolder->modelAttribute_);
    NSString *varName = JreRetainedLocalValue(modelUiToPojoHolder->varName_);
    ASModelScope *varScope = JreRetainedLocalValue(modelUiToPojoHolder->varScope_);
    ASWidgetAttribute *widgetAttribute = JreRetainedLocalValue([self getAttributeWithASHasWidgets:[self getParent] withNSString:[self getLocalName] withNSString:varAttributeName]);
    NSString *key = JreRetainedLocalValue([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getAttributeName]);
    id objValue;
    if ([((NSString *) nil_chk(key)) java_hasPrefix:@"layout_"]) {
      objValue = ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(nil_chk(((ASBaseWidget *) cast_chk([self getParent], [ASBaseWidget class]))), widgetAttribute, self);
    }
    else {
      objValue = ASBaseWidget_getAttributeValueFromWidgetWithASWidgetAttribute_withASIWidget_(self, widgetAttribute, nil);
    }
    id obj = JreRetainedLocalValue([self getModelFromScopeWithNSString:varName withASModelScope:varScope]);
    objValue = ASPluginInvoker_getJSONSafeObjWithId_(objValue);
    objValue = [self changeModelDataTypeWithASModelDataType:modelUiToPojoHolder->varType_ withId:objValue];
    objValue = ASPluginInvoker_getJSONSafeObjWithId_(objValue);
    if ([((NSString *) nil_chk(varPath)) isEqual:@"."]) {
      [self storeModelToScopeWithNSString:varName withASModelScope:varScope withId:objValue];
    }
    else {
      [self updateModelByPathWithNSString:varPath withId:objValue withId:obj];
    }
  }
}

id ASBaseWidget_invokePrivateMethodUsingReflectionWithId_withNSString_withNSObjectArray_(id obj, NSString *methodName, IOSObjectArray *params) {
  ASBaseWidget_initialize();
  jint paramCount = ((IOSObjectArray *) nil_chk(params))->size_;
  JavaLangReflectMethod *method = nil;
  id requiredObj = nil;
  IOSObjectArray *classArray = [IOSObjectArray arrayWithLength:paramCount type:IOSClass_class_()];
  for (jint i = 0; i < paramCount; i++) {
    IOSObjectArray_Set(classArray, i, [nil_chk(IOSObjectArray_Get(params, i)) java_getClass]);
  }
  IOSClass *superClass = [nil_chk(obj) java_getClass];
  @try {
    while (method == nil && superClass != nil) {
      @try {
        method = [superClass getDeclaredMethod:methodName parameterTypes:classArray];
      }
      @catch (JavaLangNoSuchMethodException *var8) {
        superClass = [superClass getSuperclass];
      }
    }
    [((JavaLangReflectMethod *) nil_chk(method)) setAccessibleWithBoolean:true];
    requiredObj = [method invokeWithId:obj withNSObjectArray:params];
  }
  @catch (JavaLangIllegalArgumentException *e) {
  }
  @catch (JavaLangIllegalAccessException *e) {
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
  }
  return requiredObj;
}

void ASBaseWidget_loadAndAddWidgetsWithJavaUtilIterator_withId_withNSString_withASLoopParam_(ASBaseWidget *self, id<JavaUtilIterator> iterator, id handler, NSString *idKey, ASLoopParam *model) {
  while ([((id<JavaUtilIterator>) nil_chk(iterator)) hasNext]) {
    id<ASIWidget> objWidget = [iterator next];
    ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(self, objWidget, handler, idKey, model, -1);
  }
}

id<ASIWidget> ASBaseWidget_loadWidgetWithASIWidget_withId_withNSString_withASLoopParam_withInt_(ASBaseWidget *self, id<ASIWidget> objWidget, id handler, NSString *idKey, ASLoopParam *model, jint index) {
  id<ASIWidget> widgetCreated = nil;
  if ([objWidget isKindOfClass:[ASBaseHasWidgets_LazyBaseWidget class]]) {
    ASBaseHasWidgets_LazyBaseWidget *widget = (ASBaseHasWidgets_LazyBaseWidget *) objWidget;
    widgetCreated = ASPluginInvoker_handlerStartWithId_withASIWidget_withInt_(handler, widget, index);
    [((id<ASIWidget>) nil_chk(widgetCreated)) setLoopParamWithASLoopParam:model];
    ASBaseWidget_loadAndAddWidgetsWithJavaUtilIterator_withId_withNSString_withASLoopParam_(self, [((id<ASHasWidgets>) nil_chk((widget))) iterator], handler, idKey, model);
    ASPluginInvoker_handlerEndWithId_withASIWidget_(handler, widget);
  }
  else if ([objWidget isKindOfClass:[ASBaseWidget_LazyBaseWidget class]]) {
    ASBaseWidget_LazyBaseWidget *widget = (ASBaseWidget_LazyBaseWidget *) objWidget;
    widgetCreated = ASPluginInvoker_handlerStartWithId_withASIWidget_withInt_(handler, widget, index);
    [((id<ASIWidget>) nil_chk(widgetCreated)) setLoopParamWithASLoopParam:model];
    ASPluginInvoker_handlerEndWithId_withASIWidget_(handler, widget);
  }
  else {
    ASPluginInvoker_addToCurrentParentWithId_withASIWidget_(handler, objWidget);
  }
  return widgetCreated;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseWidget)

@implementation ASBaseWidget_LazyBaseWidget

- (instancetype)initWithASBaseWidget:(ASBaseWidget *)outer$ {
  ASBaseWidget_LazyBaseWidget_initWithASBaseWidget_(self, outer$);
  return self;
}

- (id<ASIWidget>)newInstance {
  return ASWidgetFactory_getWithNSString_withBoolean_([this$0_ getLocalName], false);
}

- (id)asWidget {
  return self;
}

- (id)asNativeWidget {
  return nil;
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  ASBaseWidget_createWithASIFragment_withJavaUtilMap_(self, fragment, params);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
}

- (void)initialized {
}

- (NSString *)getLocalName {
  return [this$0_ getLocalName];
}

- (void)loadAttributesWithNSString:(NSString *)localName {
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return nil;
}

- (NSString *)getGroupName {
  return [this$0_ getGroupName];
}

- (void)__javaClone:(ASBaseWidget_LazyBaseWidget *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASBaseWidget:);
  methods[1].selector = @selector(newInstance);
  methods[2].selector = @selector(asWidget);
  methods[3].selector = @selector(asNativeWidget);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[6].selector = @selector(initialized);
  methods[7].selector = @selector(getLocalName);
  methods[8].selector = @selector(loadAttributesWithNSString:);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[10].selector = @selector(getGroupName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASBaseWidget;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
  };
  static const void *ptrTable[] = { "LASBaseWidget;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "loadAttributes", "LNSString;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", &ASBaseWidget_LazyBaseWidget_LOCAL_NAME };
  static const J2ObjcClassInfo _ASBaseWidget_LazyBaseWidget = { "LazyBaseWidget", "com.ashera.widget", ptrTable, methods, fields, 7, 0x1, 11, 2, 0, -1, -1, -1, -1 };
  return &_ASBaseWidget_LazyBaseWidget;
}

@end

void ASBaseWidget_LazyBaseWidget_initWithASBaseWidget_(ASBaseWidget_LazyBaseWidget *self, ASBaseWidget *outer$) {
  self->this$0_ = outer$;
  ASBaseWidget_initWithNSString_withNSString_(self, ASBaseWidget_LazyBaseWidget_LOCAL_NAME, ASBaseWidget_LazyBaseWidget_LOCAL_NAME);
}

ASBaseWidget_LazyBaseWidget *new_ASBaseWidget_LazyBaseWidget_initWithASBaseWidget_(ASBaseWidget *outer$) {
  J2OBJC_NEW_IMPL(ASBaseWidget_LazyBaseWidget, initWithASBaseWidget_, outer$)
}

ASBaseWidget_LazyBaseWidget *create_ASBaseWidget_LazyBaseWidget_initWithASBaseWidget_(ASBaseWidget *outer$) {
  J2OBJC_CREATE_IMPL(ASBaseWidget_LazyBaseWidget, initWithASBaseWidget_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseWidget_LazyBaseWidget)

@implementation ASBaseWidget_EventHolder

- (instancetype)initWithASBaseWidget:(ASBaseWidget *)outer$
               withASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                       withASIWidget:(id<ASIWidget>)childWidget
                              withId:(id)objValue {
  ASBaseWidget_EventHolder_initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_(self, outer$, widgetAttribute, childWidget, objValue);
  return self;
}

- (void)dealloc {
  RELEASE_(widgetAttribute_);
  RELEASE_(childWidget_);
  RELEASE_(objValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASBaseWidget:withASWidgetAttribute:withASIWidget:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widgetAttribute_", "LASWidgetAttribute;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "childWidget_", "LASIWidget;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "objValue_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASBaseWidget;LASWidgetAttribute;LASIWidget;LNSObject;", "LASBaseWidget;" };
  static const J2ObjcClassInfo _ASBaseWidget_EventHolder = { "EventHolder", "com.ashera.widget", ptrTable, methods, fields, 7, 0x0, 1, 3, 1, -1, -1, -1, -1 };
  return &_ASBaseWidget_EventHolder;
}

@end

void ASBaseWidget_EventHolder_initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_(ASBaseWidget_EventHolder *self, ASBaseWidget *outer$, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue) {
  NSObject_init(self);
  JreStrongAssign(&self->widgetAttribute_, widgetAttribute);
  JreStrongAssign(&self->objValue_, objValue);
  JreStrongAssign(&self->childWidget_, childWidget);
}

ASBaseWidget_EventHolder *new_ASBaseWidget_EventHolder_initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_(ASBaseWidget *outer$, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue) {
  J2OBJC_NEW_IMPL(ASBaseWidget_EventHolder, initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_, outer$, widgetAttribute, childWidget, objValue)
}

ASBaseWidget_EventHolder *create_ASBaseWidget_EventHolder_initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_(ASBaseWidget *outer$, ASWidgetAttribute *widgetAttribute, id<ASIWidget> childWidget, id objValue) {
  J2OBJC_CREATE_IMPL(ASBaseWidget_EventHolder, initWithASBaseWidget_withASWidgetAttribute_withASIWidget_withId_, outer$, widgetAttribute, childWidget, objValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseWidget_EventHolder)

@implementation ASBaseWidget_$Lambda$1

- (jint)compareWithId:(NSString *)a
               withId:(NSString *)b {
  return ASBaseWidget_compareByValueWithJavaUtilMap_withNSString_withNSString_withNSString_(this$0_, val$payLoad_, a, b, @"orderSet");
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$payLoad_);
  [super dealloc];
}

@end

void ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget_$Lambda$1 *self, ASBaseWidget *outer$, id<JavaUtilMap> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$payLoad_, capture$0);
  NSObject_init(self);
}

ASBaseWidget_$Lambda$1 *new_ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0) {
  J2OBJC_NEW_IMPL(ASBaseWidget_$Lambda$1, initWithASBaseWidget_withJavaUtilMap_, outer$, capture$0)
}

ASBaseWidget_$Lambda$1 *create_ASBaseWidget_$Lambda$1_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0) {
  J2OBJC_CREATE_IMPL(ASBaseWidget_$Lambda$1, initWithASBaseWidget_withJavaUtilMap_, outer$, capture$0)
}

@implementation ASBaseWidget_$Lambda$2

- (jint)compareWithId:(NSString *)a
               withId:(NSString *)b {
  return ASBaseWidget_compareByValueWithJavaUtilMap_withNSString_withNSString_withNSString_(this$0_, val$payLoad_, a, b, @"orderGet");
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$payLoad_);
  [super dealloc];
}

@end

void ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget_$Lambda$2 *self, ASBaseWidget *outer$, id<JavaUtilMap> capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$payLoad_, capture$0);
  NSObject_init(self);
}

ASBaseWidget_$Lambda$2 *new_ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0) {
  J2OBJC_NEW_IMPL(ASBaseWidget_$Lambda$2, initWithASBaseWidget_withJavaUtilMap_, outer$, capture$0)
}

ASBaseWidget_$Lambda$2 *create_ASBaseWidget_$Lambda$2_initWithASBaseWidget_withJavaUtilMap_(ASBaseWidget *outer$, id<JavaUtilMap> capture$0) {
  J2OBJC_CREATE_IMPL(ASBaseWidget_$Lambda$2, initWithASBaseWidget_withJavaUtilMap_, outer$, capture$0)
}
