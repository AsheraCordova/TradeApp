//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\AttributeCommandChain.java
//

#include "AttributeCommand.h"
#include "AttributeCommandChain.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "java/util/Comparator.h"
#include "java/util/Set.h"
#include "java/util/TreeSet.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilSet;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ASAttributeCommandChain () {
 @public
  id originalValue_;
  NSString *originalStringValue_;
  NSString *attributeName_;
  id<JavaUtilSet> commands_;
}

@end

J2OBJC_FIELD_SETTER(ASAttributeCommandChain, originalValue_, id)
J2OBJC_FIELD_SETTER(ASAttributeCommandChain, originalStringValue_, NSString *)
J2OBJC_FIELD_SETTER(ASAttributeCommandChain, attributeName_, NSString *)
J2OBJC_FIELD_SETTER(ASAttributeCommandChain, commands_, id<JavaUtilSet>)

@interface ASAttributeCommandChain_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(id<ASAttributeCommand>)o1
               withId:(id<ASAttributeCommand>)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(ASAttributeCommandChain_1)

__attribute__((unused)) static void ASAttributeCommandChain_1_init(ASAttributeCommandChain_1 *self);

__attribute__((unused)) static ASAttributeCommandChain_1 *new_ASAttributeCommandChain_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASAttributeCommandChain_1 *create_ASAttributeCommandChain_1_init(void);

@implementation ASAttributeCommandChain

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAttributeCommandChain_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addCommandWithASAttributeCommand:(id<ASAttributeCommand>)command {
  if (commands_ == nil) {
    JreStrongAssignAndConsume(&commands_, new_JavaUtilTreeSet_initWithJavaUtilComparator_(create_ASAttributeCommandChain_1_init()));
  }
  [commands_ addWithId:command];
}

- (id)getValueWithASIWidget:(id<ASIWidget>)widget {
  return [self getValueWithASIWidget:widget withId:nil withNSString:nil withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]];
}

- (id)getValueWithASIWidget:(id<ASIWidget>)widget
                     withId:(id)nativeWidget
               withNSString:(NSString *)phase
          withNSObjectArray:(IOSObjectArray *)args {
  return [self getValueWithASIWidget:widget withId:nativeWidget withNSString:phase withNSString:nil withNSObjectArray:args];
}

- (id)getValueWithASIWidget:(id<ASIWidget>)widget
                     withId:(id)nativeWidget
               withNSString:(NSString *)phase
               withNSString:(NSString *)commandFilterRegex
          withNSObjectArray:(IOSObjectArray *)args {
  id finalValue = JreRetainedLocalValue(originalValue_);
  if (commands_ != nil) {
    for (id<ASAttributeCommand> __strong command in commands_) {
      if (commandFilterRegex == nil || [((NSString *) nil_chk([((id<ASAttributeCommand>) nil_chk(command)) getId])) java_matches:commandFilterRegex]) {
        if ((phase == nil && ![((id<ASAttributeCommand>) nil_chk(command)) executeAfterPostMeasure]) || (phase != nil)) {
          if (phase != nil && args != nil && args->size_ > 0) {
            [((id<ASAttributeCommand>) nil_chk(command)) updatePhaseArgsWithNSObjectArray:args];
          }
          finalValue = [((id<ASAttributeCommand>) nil_chk(command)) modifyValueWithASIWidget:widget withId:nativeWidget withNSString:phase withNSString:attributeName_ withId:finalValue];
        }
      }
    }
  }
  return finalValue;
}

- (id)getOriginalValue {
  return originalValue_;
}

- (void)setOriginalValueWithId:(id)originalValue {
  JreStrongAssign(&self->originalValue_, originalValue);
}

- (void)removeCommandWithASAttributeCommand:(id<ASAttributeCommand>)executor {
  if (commands_ != nil && executor != nil) {
    [commands_ removeWithId:executor];
  }
}

- (NSString *)getOriginalStringValue {
  return originalStringValue_;
}

- (void)setOriginalStringValueWithNSString:(NSString *)originalStringValue {
  JreStrongAssign(&self->originalStringValue_, originalStringValue);
}

- (NSString *)getAttributeName {
  return attributeName_;
}

- (void)setAttributeNameWithNSString:(NSString *)attributeName {
  JreStrongAssign(&self->attributeName_, attributeName);
}

- (void)dealloc {
  RELEASE_(originalValue_);
  RELEASE_(originalStringValue_);
  RELEASE_(attributeName_);
  RELEASE_(commands_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 2, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 2, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addCommandWithASAttributeCommand:);
  methods[2].selector = @selector(getValueWithASIWidget:);
  methods[3].selector = @selector(getValueWithASIWidget:withId:withNSString:withNSObjectArray:);
  methods[4].selector = @selector(getValueWithASIWidget:withId:withNSString:withNSString:withNSObjectArray:);
  methods[5].selector = @selector(getOriginalValue);
  methods[6].selector = @selector(setOriginalValueWithId:);
  methods[7].selector = @selector(removeCommandWithASAttributeCommand:);
  methods[8].selector = @selector(getOriginalStringValue);
  methods[9].selector = @selector(setOriginalStringValueWithNSString:);
  methods[10].selector = @selector(getAttributeName);
  methods[11].selector = @selector(setAttributeNameWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "originalValue_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalStringValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "attributeName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "commands_", "LJavaUtilSet;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "addCommand", "LASAttributeCommand;", "getValue", "LASIWidget;", "LASIWidget;LNSObject;LNSString;[LNSObject;", "LASIWidget;LNSObject;LNSString;LNSString;[LNSObject;", "setOriginalValue", "LNSObject;", "removeCommand", "setOriginalStringValue", "LNSString;", "setAttributeName", "Ljava/util/Set<Lcom/ashera/widget/AttributeCommand;>;" };
  static const J2ObjcClassInfo _ASAttributeCommandChain = { "AttributeCommandChain", "com.ashera.widget", ptrTable, methods, fields, 7, 0x1, 12, 4, -1, -1, -1, -1, -1 };
  return &_ASAttributeCommandChain;
}

@end

void ASAttributeCommandChain_init(ASAttributeCommandChain *self) {
  NSObject_init(self);
}

ASAttributeCommandChain *new_ASAttributeCommandChain_init() {
  J2OBJC_NEW_IMPL(ASAttributeCommandChain, init)
}

ASAttributeCommandChain *create_ASAttributeCommandChain_init() {
  J2OBJC_CREATE_IMPL(ASAttributeCommandChain, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAttributeCommandChain)

@implementation ASAttributeCommandChain_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAttributeCommandChain_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id<ASAttributeCommand>)o1
               withId:(id<ASAttributeCommand>)o2 {
  if (o1 == nil || o1 == nil) {
    return 0;
  }
  jint p = [o1 getPriority] - [((id<ASAttributeCommand>) nil_chk(o2)) getPriority];
  if (p == 0) {
    return [((NSString *) nil_chk([[o1 java_getClass] getName])) compareToWithId:[[o2 java_getClass] getName]];
  }
  return p;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LASAttributeCommand;LASAttributeCommand;", "LASAttributeCommandChain;", "addCommandWithASAttributeCommand:", "Ljava/lang/Object;Ljava/util/Comparator<Lcom/ashera/widget/AttributeCommand;>;" };
  static const J2ObjcClassInfo _ASAttributeCommandChain_1 = { "", "com.ashera.widget", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, 4, -1 };
  return &_ASAttributeCommandChain_1;
}

@end

void ASAttributeCommandChain_1_init(ASAttributeCommandChain_1 *self) {
  NSObject_init(self);
}

ASAttributeCommandChain_1 *new_ASAttributeCommandChain_1_init() {
  J2OBJC_NEW_IMPL(ASAttributeCommandChain_1, init)
}

ASAttributeCommandChain_1 *create_ASAttributeCommandChain_1_init() {
  J2OBJC_CREATE_IMPL(ASAttributeCommandChain_1, init)
}
