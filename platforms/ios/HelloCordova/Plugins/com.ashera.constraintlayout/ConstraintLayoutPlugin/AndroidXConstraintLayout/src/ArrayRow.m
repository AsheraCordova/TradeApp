//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\ArrayRow.java
//

#include "ArrayLinkedVariables.h"
#include "ArrayRow.h"
#include "Cache.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "SolverVariable.h"
#include "java/util/ArrayList.h"


@interface ADXArrayRow ()

/*!
 @brief Returns true if the variable is new to the system, i.e.is already present
  in one of the rows.
 This function is called while choosing the subject of a new row.
 @param variable the variable to check for
 @param system the linear system we check
 */
- (jboolean)isNewWithADXSolverVariable:(ADXSolverVariable *)variable
                   withADXLinearSystem:(ADXLinearSystem *)system;

- (ADXSolverVariable *)pickPivotInVariablesWithBooleanArray:(IOSBooleanArray *)avoid
                                      withADXSolverVariable:(ADXSolverVariable *)exclude;

@end

inline jboolean ADXArrayRow_get_DEBUG(void);
#define ADXArrayRow_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXArrayRow, DEBUG, jboolean)

inline jboolean ADXArrayRow_get_FULL_NEW_CHECK(void);
#define ADXArrayRow_FULL_NEW_CHECK false
J2OBJC_STATIC_FIELD_CONSTANT(ADXArrayRow, FULL_NEW_CHECK, jboolean)

__attribute__((unused)) static jboolean ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(ADXArrayRow *self, ADXSolverVariable *variable, ADXLinearSystem *system);

__attribute__((unused)) static ADXSolverVariable *ADXArrayRow_pickPivotInVariablesWithBooleanArray_withADXSolverVariable_(ADXArrayRow *self, IOSBooleanArray *avoid, ADXSolverVariable *exclude);

@interface ADXArrayRow_ArrayRowVariables : NSObject

@end

@implementation ADXArrayRow

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXArrayRow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADXCache:(ADXCache *)cache {
  ADXArrayRow_initWithADXCache_(self, cache);
  return self;
}

- (jboolean)hasKeyVariable {
  return !((variable_ == nil) || (((ADXSolverVariable *) nil_chk(variable_))->mType_ != JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED) && constantValue_ < 0));
}

- (NSString *)description {
  return [self toReadableString];
}

- (NSString *)toReadableString {
  NSString *s = @"";
  if (variable_ == nil) {
    JreStrAppend(&s, "$", @"0");
  }
  else {
    JreStrAppend(&s, "@", variable_);
  }
  JreStrAppend(&s, "$", @" = ");
  jboolean addedVariable = false;
  if (constantValue_ != 0) {
    JreStrAppend(&s, "F", constantValue_);
    addedVariable = true;
  }
  jint count = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize];
  for (jint i = 0; i < count; i++) {
    ADXSolverVariable *v = JreRetainedLocalValue([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getVariableWithInt:i]);
    if (v == nil) {
      continue;
    }
    jfloat amount = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getVariableValueWithInt:i];
    if (amount == 0) {
      continue;
    }
    NSString *name = JreRetainedLocalValue([v description]);
    if (!addedVariable) {
      if (amount < 0) {
        JreStrAppend(&s, "$", @"- ");
        JreTimesAssignFloatF(&amount, -1);
      }
    }
    else {
      if (amount > 0) {
        JreStrAppend(&s, "$", @" + ");
      }
      else {
        JreStrAppend(&s, "$", @" - ");
        JreTimesAssignFloatF(&amount, -1);
      }
    }
    if (amount == 1) {
      JreStrAppend(&s, "$", name);
    }
    else {
      JreStrAppend(&s, "FC$", amount, ' ', name);
    }
    addedVariable = true;
  }
  if (!addedVariable) {
    JreStrAppend(&s, "$", @"0.0");
  }
  return s;
}

- (void)reset {
  variable_ = nil;
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) clear];
  constantValue_ = 0;
  isSimpleDefinition_ = false;
}

- (jboolean)hasVariableWithADXSolverVariable:(ADXSolverVariable *)v {
  return [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) containsWithADXSolverVariable:v];
}

- (ADXArrayRow *)createRowDefinitionWithADXSolverVariable:(ADXSolverVariable *)variable
                                                  withInt:(jint)value {
  self->variable_ = variable;
  ((ADXSolverVariable *) nil_chk(variable))->computedValue_ = value;
  constantValue_ = value;
  isSimpleDefinition_ = true;
  return self;
}

- (ADXArrayRow *)createRowEqualsWithADXSolverVariable:(ADXSolverVariable *)variable
                                              withInt:(jint)value {
  if (value < 0) {
    constantValue_ = -1 * value;
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variable withFloat:1];
  }
  else {
    constantValue_ = value;
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variable withFloat:-1];
  }
  return self;
}

- (ADXArrayRow *)createRowEqualsWithADXSolverVariable:(ADXSolverVariable *)variableA
                                withADXSolverVariable:(ADXSolverVariable *)variableB
                                              withInt:(jint)margin {
  jboolean inverse = false;
  if (margin != 0) {
    jint m = margin;
    if (m < 0) {
      m = -1 * m;
      inverse = true;
    }
    constantValue_ = m;
  }
  if (!inverse) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:1];
  }
  else {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:-1];
  }
  return self;
}

- (ADXArrayRow *)addSingleErrorWithADXSolverVariable:(ADXSolverVariable *)error
                                             withInt:(jint)sign {
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:error withFloat:(jfloat) sign];
  return self;
}

- (ADXArrayRow *)createRowGreaterThanWithADXSolverVariable:(ADXSolverVariable *)variableA
                                     withADXSolverVariable:(ADXSolverVariable *)variableB
                                     withADXSolverVariable:(ADXSolverVariable *)slack
                                                   withInt:(jint)margin {
  jboolean inverse = false;
  if (margin != 0) {
    jint m = margin;
    if (m < 0) {
      m = -1 * m;
      inverse = true;
    }
    constantValue_ = m;
  }
  if (!inverse) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:slack withFloat:1];
  }
  else {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:slack withFloat:-1];
  }
  return self;
}

- (ADXArrayRow *)createRowGreaterThanWithADXSolverVariable:(ADXSolverVariable *)a
                                                   withInt:(jint)b
                                     withADXSolverVariable:(ADXSolverVariable *)slack {
  constantValue_ = b;
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:a withFloat:-1];
  return self;
}

- (ADXArrayRow *)createRowLowerThanWithADXSolverVariable:(ADXSolverVariable *)variableA
                                   withADXSolverVariable:(ADXSolverVariable *)variableB
                                   withADXSolverVariable:(ADXSolverVariable *)slack
                                                 withInt:(jint)margin {
  jboolean inverse = false;
  if (margin != 0) {
    jint m = margin;
    if (m < 0) {
      m = -1 * m;
      inverse = true;
    }
    constantValue_ = m;
  }
  if (!inverse) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:slack withFloat:-1];
  }
  else {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:slack withFloat:1];
  }
  return self;
}

- (ADXArrayRow *)createRowEqualMatchDimensionsWithFloat:(jfloat)currentWeight
                                              withFloat:(jfloat)totalWeights
                                              withFloat:(jfloat)nextWeight
                                  withADXSolverVariable:(ADXSolverVariable *)variableStartA
                                  withADXSolverVariable:(ADXSolverVariable *)variableEndA
                                  withADXSolverVariable:(ADXSolverVariable *)variableStartB
                                  withADXSolverVariable:(ADXSolverVariable *)variableEndB {
  constantValue_ = 0;
  if (totalWeights == 0 || (currentWeight == nextWeight)) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndB withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartB withFloat:-1];
  }
  else {
    if (currentWeight == 0) {
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartA withFloat:1];
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndA withFloat:-1];
    }
    else if (nextWeight == 0) {
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartB withFloat:1];
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndB withFloat:-1];
    }
    else {
      jfloat cw = currentWeight / totalWeights;
      jfloat nw = nextWeight / totalWeights;
      jfloat w = cw / nw;
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartA withFloat:1];
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndA withFloat:-1];
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndB withFloat:w];
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartB withFloat:-w];
    }
  }
  return self;
}

- (ADXArrayRow *)createRowEqualDimensionWithFloat:(jfloat)currentWeight
                                        withFloat:(jfloat)totalWeights
                                        withFloat:(jfloat)nextWeight
                            withADXSolverVariable:(ADXSolverVariable *)variableStartA
                                          withInt:(jint)marginStartA
                            withADXSolverVariable:(ADXSolverVariable *)variableEndA
                                          withInt:(jint)marginEndA
                            withADXSolverVariable:(ADXSolverVariable *)variableStartB
                                          withInt:(jint)marginStartB
                            withADXSolverVariable:(ADXSolverVariable *)variableEndB
                                          withInt:(jint)marginEndB {
  if (totalWeights == 0 || (currentWeight == nextWeight)) {
    constantValue_ = -marginStartA - marginEndA + marginStartB + marginEndB;
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndB withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartB withFloat:-1];
  }
  else {
    jfloat cw = currentWeight / totalWeights;
    jfloat nw = nextWeight / totalWeights;
    jfloat w = cw / nw;
    constantValue_ = -marginStartA - marginEndA + w * marginStartB + w * marginEndB;
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableEndB withFloat:w];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableStartB withFloat:-w];
  }
  return self;
}

- (ADXArrayRow *)createRowCenteringWithADXSolverVariable:(ADXSolverVariable *)variableA
                                   withADXSolverVariable:(ADXSolverVariable *)variableB
                                                 withInt:(jint)marginA
                                               withFloat:(jfloat)bias
                                   withADXSolverVariable:(ADXSolverVariable *)variableC
                                   withADXSolverVariable:(ADXSolverVariable *)variableD
                                                 withInt:(jint)marginB {
  if (variableB == variableC) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableD withFloat:1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:-2];
    return self;
  }
  if (bias == 0.5f) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:1.0f];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:-1.0f];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableC withFloat:-1.0f];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableD withFloat:1.0f];
    if (marginA > 0 || marginB > 0) {
      constantValue_ = -marginA + marginB;
    }
  }
  else if (bias <= 0) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:1];
    constantValue_ = marginA;
  }
  else if (bias >= 1) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableD withFloat:-1];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableC withFloat:1];
    constantValue_ = -marginB;
  }
  else {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:1 * (1 - bias)];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:-1 * (1 - bias)];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableC withFloat:-1 * bias];
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableD withFloat:1 * bias];
    if (marginA > 0 || marginB > 0) {
      constantValue_ = -marginA * (1 - bias) + marginB * bias;
    }
  }
  return self;
}

- (ADXArrayRow *)addErrorWithADXLinearSystem:(ADXLinearSystem *)system
                                     withInt:(jint)strength {
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:[((ADXLinearSystem *) nil_chk(system)) createErrorVariableWithInt:strength withNSString:@"ep"] withFloat:1];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:[system createErrorVariableWithInt:strength withNSString:@"em"] withFloat:-1];
  return self;
}

- (ADXArrayRow *)createRowDimensionPercentWithADXSolverVariable:(ADXSolverVariable *)variableA
                                          withADXSolverVariable:(ADXSolverVariable *)variableC
                                                      withFloat:(jfloat)percent {
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:-1];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableC withFloat:percent];
  return self;
}

- (ADXArrayRow *)createRowDimensionRatioWithADXSolverVariable:(ADXSolverVariable *)variableA
                                        withADXSolverVariable:(ADXSolverVariable *)variableB
                                        withADXSolverVariable:(ADXSolverVariable *)variableC
                                        withADXSolverVariable:(ADXSolverVariable *)variableD
                                                    withFloat:(jfloat)ratio {
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableA withFloat:-1];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableB withFloat:1];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableC withFloat:ratio];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variableD withFloat:-ratio];
  return self;
}

- (ADXArrayRow *)createRowWithAngleWithADXSolverVariable:(ADXSolverVariable *)at
                                   withADXSolverVariable:(ADXSolverVariable *)ab
                                   withADXSolverVariable:(ADXSolverVariable *)bt
                                   withADXSolverVariable:(ADXSolverVariable *)bb
                                               withFloat:(jfloat)angleComponent {
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:bt withFloat:0.5f];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:bb withFloat:0.5f];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:at withFloat:-0.5f];
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:ab withFloat:-0.5f];
  constantValue_ = -angleComponent;
  return self;
}

- (jint)sizeInBytes {
  jint size = 0;
  if (variable_ != nil) {
    size += 4;
  }
  size += 4;
  size += 4;
  size += [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) sizeInBytes];
  return size;
}

- (void)ensurePositiveConstant {
  if (constantValue_ < 0) {
    JreTimesAssignFloatF(&constantValue_, -1);
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) invert];
  }
}

- (jboolean)chooseSubjectWithADXLinearSystem:(ADXLinearSystem *)system {
  jboolean addedExtra = false;
  ADXSolverVariable *pivotCandidate = JreRetainedLocalValue([self chooseSubjectInVariablesWithADXLinearSystem:system]);
  if (pivotCandidate == nil) {
    addedExtra = true;
  }
  else {
    [self pivotWithADXSolverVariable:pivotCandidate];
  }
  if ([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize] == 0) {
    isSimpleDefinition_ = true;
  }
  return addedExtra;
}

- (ADXSolverVariable *)chooseSubjectInVariablesWithADXLinearSystem:(ADXLinearSystem *)system {
  ADXSolverVariable *restrictedCandidate = nil;
  ADXSolverVariable *unrestrictedCandidate = nil;
  jfloat unrestrictedCandidateAmount = 0;
  jfloat restrictedCandidateAmount = 0;
  jboolean unrestrictedCandidateIsNew = false;
  jboolean restrictedCandidateIsNew = false;
  jint currentSize = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize];
  for (jint i = 0; i < currentSize; i++) {
    jfloat amount = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getVariableValueWithInt:i];
    ADXSolverVariable *variable = JreRetainedLocalValue([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getVariableWithInt:i]);
    if (((ADXSolverVariable *) nil_chk(variable))->mType_ == JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED)) {
      if (unrestrictedCandidate == nil) {
        unrestrictedCandidate = variable;
        unrestrictedCandidateAmount = amount;
        unrestrictedCandidateIsNew = ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system);
      }
      else if (unrestrictedCandidateAmount > amount) {
        unrestrictedCandidate = variable;
        unrestrictedCandidateAmount = amount;
        unrestrictedCandidateIsNew = ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system);
      }
      else if (!unrestrictedCandidateIsNew && ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system)) {
        unrestrictedCandidate = variable;
        unrestrictedCandidateAmount = amount;
        unrestrictedCandidateIsNew = true;
      }
    }
    else if (unrestrictedCandidate == nil) {
      if (amount < 0) {
        if (restrictedCandidate == nil) {
          restrictedCandidate = variable;
          restrictedCandidateAmount = amount;
          restrictedCandidateIsNew = ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system);
        }
        else if (restrictedCandidateAmount > amount) {
          restrictedCandidate = variable;
          restrictedCandidateAmount = amount;
          restrictedCandidateIsNew = ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system);
        }
        else if (!restrictedCandidateIsNew && ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system)) {
          restrictedCandidate = variable;
          restrictedCandidateAmount = amount;
          restrictedCandidateIsNew = true;
        }
      }
    }
  }
  if (unrestrictedCandidate != nil) {
    return unrestrictedCandidate;
  }
  return restrictedCandidate;
}

- (jboolean)isNewWithADXSolverVariable:(ADXSolverVariable *)variable
                   withADXLinearSystem:(ADXLinearSystem *)system {
  return ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(self, variable, system);
}

- (void)pivotWithADXSolverVariable:(ADXSolverVariable *)v {
  if (variable_ != nil) {
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:variable_ withFloat:-1.0f];
    ((ADXSolverVariable *) nil_chk(variable_))->definitionId_ = -1;
    variable_ = nil;
  }
  jfloat amount = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) removeWithADXSolverVariable:v withBoolean:true] * -1;
  variable_ = v;
  if (amount == 1) {
    return;
  }
  constantValue_ = constantValue_ / amount;
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) divideByAmountWithFloat:amount];
}

- (jboolean)isEmpty {
  return (variable_ == nil && constantValue_ == 0 && [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize] == 0);
}

- (void)updateFromRowWithADXLinearSystem:(ADXLinearSystem *)system
                         withADXArrayRow:(ADXArrayRow *)definition
                             withBoolean:(jboolean)removeFromDefinition {
  jfloat value = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) useWithADXArrayRow:definition withBoolean:removeFromDefinition];
  JrePlusAssignFloatF(&constantValue_, ((ADXArrayRow *) nil_chk(definition))->constantValue_ * value);
  if (removeFromDefinition) {
    [((ADXSolverVariable *) nil_chk(definition->variable_)) removeFromRowWithADXArrayRow:self];
  }
  if (JreLoadStatic(ADXLinearSystem, SIMPLIFY_SYNONYMS) && variable_ != nil && [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize] == 0) {
    isSimpleDefinition_ = true;
    ((ADXLinearSystem *) nil_chk(system))->hasSimpleDefinition_ = true;
  }
}

- (void)updateFromFinalVariableWithADXLinearSystem:(ADXLinearSystem *)system
                             withADXSolverVariable:(ADXSolverVariable *)variable
                                       withBoolean:(jboolean)removeFromDefinition {
  if (variable == nil || !variable->isFinalValue_) {
    return;
  }
  jfloat value = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getWithADXSolverVariable:variable];
  JrePlusAssignFloatF(&constantValue_, variable->computedValue_ * value);
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) removeWithADXSolverVariable:variable withBoolean:removeFromDefinition];
  if (removeFromDefinition) {
    [variable removeFromRowWithADXArrayRow:self];
  }
  if (JreLoadStatic(ADXLinearSystem, SIMPLIFY_SYNONYMS) && [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize] == 0) {
    isSimpleDefinition_ = true;
    ((ADXLinearSystem *) nil_chk(system))->hasSimpleDefinition_ = true;
  }
}

- (void)updateFromSynonymVariableWithADXLinearSystem:(ADXLinearSystem *)system
                               withADXSolverVariable:(ADXSolverVariable *)variable
                                         withBoolean:(jboolean)removeFromDefinition {
  if (variable == nil || !variable->isSynonym_) {
    return;
  }
  jfloat value = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getWithADXSolverVariable:variable];
  JrePlusAssignFloatF(&constantValue_, variable->synonymDelta_ * value);
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) removeWithADXSolverVariable:variable withBoolean:removeFromDefinition];
  if (removeFromDefinition) {
    [variable removeFromRowWithADXArrayRow:self];
  }
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) addWithADXSolverVariable:IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(((ADXLinearSystem *) nil_chk(system))->mCache_))->mIndexedVariables_), variable->synonym_) withFloat:value withBoolean:removeFromDefinition];
  if (JreLoadStatic(ADXLinearSystem, SIMPLIFY_SYNONYMS) && [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize] == 0) {
    isSimpleDefinition_ = true;
    system->hasSimpleDefinition_ = true;
  }
}

- (ADXSolverVariable *)pickPivotInVariablesWithBooleanArray:(IOSBooleanArray *)avoid
                                      withADXSolverVariable:(ADXSolverVariable *)exclude {
  return ADXArrayRow_pickPivotInVariablesWithBooleanArray_withADXSolverVariable_(self, avoid, exclude);
}

- (ADXSolverVariable *)pickPivotWithADXSolverVariable:(ADXSolverVariable *)exclude {
  return ADXArrayRow_pickPivotInVariablesWithBooleanArray_withADXSolverVariable_(self, nil, exclude);
}

- (ADXSolverVariable *)getPivotCandidateWithADXLinearSystem:(ADXLinearSystem *)system
                                           withBooleanArray:(IOSBooleanArray *)avoid {
  return ADXArrayRow_pickPivotInVariablesWithBooleanArray_withADXSolverVariable_(self, avoid, nil);
}

- (void)clear {
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) clear];
  variable_ = nil;
  constantValue_ = 0;
}

- (void)initFromRowWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)row {
  if ([row isKindOfClass:[ADXArrayRow class]]) {
    ADXArrayRow *copiedRow = (ADXArrayRow *) row;
    variable_ = nil;
    [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) clear];
    for (jint i = 0; i < [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(((ADXArrayRow *) nil_chk(copiedRow))->variables_)) getCurrentSize]; i++) {
      ADXSolverVariable *var = JreRetainedLocalValue([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(copiedRow->variables_)) getVariableWithInt:i]);
      jfloat val = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(copiedRow->variables_)) getVariableValueWithInt:i];
      [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) addWithADXSolverVariable:var withFloat:val withBoolean:true];
    }
  }
}

- (void)addErrorWithADXSolverVariable:(ADXSolverVariable *)error {
  jfloat weight = 1;
  if (((ADXSolverVariable *) nil_chk(error))->strength_ == ADXSolverVariable_STRENGTH_LOW) {
    weight = 1.0f;
  }
  else if (error->strength_ == ADXSolverVariable_STRENGTH_MEDIUM) {
    weight = 1E3f;
  }
  else if (error->strength_ == ADXSolverVariable_STRENGTH_HIGH) {
    weight = 1E6f;
  }
  else if (error->strength_ == ADXSolverVariable_STRENGTH_HIGHEST) {
    weight = 1E9f;
  }
  else if (error->strength_ == ADXSolverVariable_STRENGTH_EQUALITY) {
    weight = 1E12f;
  }
  [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) putWithADXSolverVariable:error withFloat:weight];
}

- (ADXSolverVariable *)getKey {
  return variable_;
}

- (void)updateFromSystemWithADXLinearSystem:(ADXLinearSystem *)system {
  if (((IOSObjectArray *) nil_chk(((ADXLinearSystem *) nil_chk(system))->mRows_))->size_ == 0) {
    return;
  }
  jboolean done = false;
  while (!done) {
    jint currentSize = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize];
    for (jint i = 0; i < currentSize; i++) {
      ADXSolverVariable *variable = JreRetainedLocalValue([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getVariableWithInt:i]);
      if (((ADXSolverVariable *) nil_chk(variable))->definitionId_ != -1 || variable->isFinalValue_ || variable->isSynonym_) {
        [((JavaUtilArrayList *) nil_chk(variablesToUpdate_)) addWithId:variable];
      }
    }
    jint size = [((JavaUtilArrayList *) nil_chk(variablesToUpdate_)) size];
    if (size > 0) {
      for (jint i = 0; i < size; i++) {
        ADXSolverVariable *variable = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(variablesToUpdate_)) getWithInt:i]);
        if (((ADXSolverVariable *) nil_chk(variable))->isFinalValue_) {
          [self updateFromFinalVariableWithADXLinearSystem:system withADXSolverVariable:variable withBoolean:true];
        }
        else if (variable->isSynonym_) {
          [self updateFromSynonymVariableWithADXLinearSystem:system withADXSolverVariable:variable withBoolean:true];
        }
        else {
          [self updateFromRowWithADXLinearSystem:system withADXArrayRow:IOSObjectArray_Get(nil_chk(system->mRows_), variable->definitionId_) withBoolean:true];
        }
      }
      [((JavaUtilArrayList *) nil_chk(variablesToUpdate_)) clear];
    }
    else {
      done = true;
    }
  }
  if (JreLoadStatic(ADXLinearSystem, SIMPLIFY_SYNONYMS) && variable_ != nil && [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(variables_)) getCurrentSize] == 0) {
    isSimpleDefinition_ = true;
    system->hasSimpleDefinition_ = true;
  }
}

- (void)__javaClone:(ADXArrayRow *)original {
  [super __javaClone:original];
  [variable_ release];
}

- (void)dealloc {
  RELEASE_(variablesToUpdate_);
  RELEASE_(variables_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x0, 8, 5, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 12, 10, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 25, 24, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 26, 27, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x0, 28, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 35, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, 39, 3, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithADXCache:);
  methods[2].selector = @selector(hasKeyVariable);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(toReadableString);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(hasVariableWithADXSolverVariable:);
  methods[7].selector = @selector(createRowDefinitionWithADXSolverVariable:withInt:);
  methods[8].selector = @selector(createRowEqualsWithADXSolverVariable:withInt:);
  methods[9].selector = @selector(createRowEqualsWithADXSolverVariable:withADXSolverVariable:withInt:);
  methods[10].selector = @selector(addSingleErrorWithADXSolverVariable:withInt:);
  methods[11].selector = @selector(createRowGreaterThanWithADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withInt:);
  methods[12].selector = @selector(createRowGreaterThanWithADXSolverVariable:withInt:withADXSolverVariable:);
  methods[13].selector = @selector(createRowLowerThanWithADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withInt:);
  methods[14].selector = @selector(createRowEqualMatchDimensionsWithFloat:withFloat:withFloat:withADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withADXSolverVariable:);
  methods[15].selector = @selector(createRowEqualDimensionWithFloat:withFloat:withFloat:withADXSolverVariable:withInt:withADXSolverVariable:withInt:withADXSolverVariable:withInt:withADXSolverVariable:withInt:);
  methods[16].selector = @selector(createRowCenteringWithADXSolverVariable:withADXSolverVariable:withInt:withFloat:withADXSolverVariable:withADXSolverVariable:withInt:);
  methods[17].selector = @selector(addErrorWithADXLinearSystem:withInt:);
  methods[18].selector = @selector(createRowDimensionPercentWithADXSolverVariable:withADXSolverVariable:withFloat:);
  methods[19].selector = @selector(createRowDimensionRatioWithADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withFloat:);
  methods[20].selector = @selector(createRowWithAngleWithADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withFloat:);
  methods[21].selector = @selector(sizeInBytes);
  methods[22].selector = @selector(ensurePositiveConstant);
  methods[23].selector = @selector(chooseSubjectWithADXLinearSystem:);
  methods[24].selector = @selector(chooseSubjectInVariablesWithADXLinearSystem:);
  methods[25].selector = @selector(isNewWithADXSolverVariable:withADXLinearSystem:);
  methods[26].selector = @selector(pivotWithADXSolverVariable:);
  methods[27].selector = @selector(isEmpty);
  methods[28].selector = @selector(updateFromRowWithADXLinearSystem:withADXArrayRow:withBoolean:);
  methods[29].selector = @selector(updateFromFinalVariableWithADXLinearSystem:withADXSolverVariable:withBoolean:);
  methods[30].selector = @selector(updateFromSynonymVariableWithADXLinearSystem:withADXSolverVariable:withBoolean:);
  methods[31].selector = @selector(pickPivotInVariablesWithBooleanArray:withADXSolverVariable:);
  methods[32].selector = @selector(pickPivotWithADXSolverVariable:);
  methods[33].selector = @selector(getPivotCandidateWithADXLinearSystem:withBooleanArray:);
  methods[34].selector = @selector(clear);
  methods[35].selector = @selector(initFromRowWithADXLinearSystem_Row:);
  methods[36].selector = @selector(addErrorWithADXSolverVariable:);
  methods[37].selector = @selector(getKey);
  methods[38].selector = @selector(updateFromSystemWithADXLinearSystem:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXArrayRow_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "variable_", "LADXSolverVariable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "constantValue_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "used_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "FULL_NEW_CHECK", "Z", .constantValue.asBOOL = ADXArrayRow_FULL_NEW_CHECK, 0x1a, -1, -1, -1, -1 },
    { "variablesToUpdate_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 45, -1 },
    { "variables_", "LADXArrayRow_ArrayRowVariables;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "isSimpleDefinition_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCache;", "toString", "hasVariable", "LADXSolverVariable;", "createRowDefinition", "LADXSolverVariable;I", "createRowEquals", "LADXSolverVariable;LADXSolverVariable;I", "addSingleError", "createRowGreaterThan", "LADXSolverVariable;LADXSolverVariable;LADXSolverVariable;I", "LADXSolverVariable;ILADXSolverVariable;", "createRowLowerThan", "createRowEqualMatchDimensions", "FFFLADXSolverVariable;LADXSolverVariable;LADXSolverVariable;LADXSolverVariable;", "createRowEqualDimension", "FFFLADXSolverVariable;ILADXSolverVariable;ILADXSolverVariable;ILADXSolverVariable;I", "createRowCentering", "LADXSolverVariable;LADXSolverVariable;IFLADXSolverVariable;LADXSolverVariable;I", "addError", "LADXLinearSystem;I", "createRowDimensionPercent", "LADXSolverVariable;LADXSolverVariable;F", "createRowDimensionRatio", "LADXSolverVariable;LADXSolverVariable;LADXSolverVariable;LADXSolverVariable;F", "createRowWithAngle", "chooseSubject", "LADXLinearSystem;", "chooseSubjectInVariables", "isNew", "LADXSolverVariable;LADXLinearSystem;", "pivot", "updateFromRow", "LADXLinearSystem;LADXArrayRow;Z", "updateFromFinalVariable", "LADXLinearSystem;LADXSolverVariable;Z", "updateFromSynonymVariable", "pickPivotInVariables", "[ZLADXSolverVariable;", "pickPivot", "getPivotCandidate", "LADXLinearSystem;[Z", "initFromRow", "LADXLinearSystem_Row;", "updateFromSystem", "Ljava/util/ArrayList<Landroidx/constraintlayout/core/SolverVariable;>;", "LADXArrayRow_ArrayRowVariables;" };
  static const J2ObjcClassInfo _ADXArrayRow = { "ArrayRow", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x1, 39, 8, -1, 46, -1, -1, -1 };
  return &_ADXArrayRow;
}

@end

void ADXArrayRow_init(ADXArrayRow *self) {
  NSObject_init(self);
  self->variable_ = nil;
  self->constantValue_ = 0;
  self->used_ = false;
  JreStrongAssignAndConsume(&self->variablesToUpdate_, new_JavaUtilArrayList_init());
  self->isSimpleDefinition_ = false;
}

ADXArrayRow *new_ADXArrayRow_init() {
  J2OBJC_NEW_IMPL(ADXArrayRow, init)
}

ADXArrayRow *create_ADXArrayRow_init() {
  J2OBJC_CREATE_IMPL(ADXArrayRow, init)
}

void ADXArrayRow_initWithADXCache_(ADXArrayRow *self, ADXCache *cache) {
  NSObject_init(self);
  self->variable_ = nil;
  self->constantValue_ = 0;
  self->used_ = false;
  JreStrongAssignAndConsume(&self->variablesToUpdate_, new_JavaUtilArrayList_init());
  self->isSimpleDefinition_ = false;
  JreStrongAssignAndConsume(&self->variables_, new_ADXArrayLinkedVariables_initWithADXArrayRow_withADXCache_(self, cache));
}

ADXArrayRow *new_ADXArrayRow_initWithADXCache_(ADXCache *cache) {
  J2OBJC_NEW_IMPL(ADXArrayRow, initWithADXCache_, cache)
}

ADXArrayRow *create_ADXArrayRow_initWithADXCache_(ADXCache *cache) {
  J2OBJC_CREATE_IMPL(ADXArrayRow, initWithADXCache_, cache)
}

jboolean ADXArrayRow_isNewWithADXSolverVariable_withADXLinearSystem_(ADXArrayRow *self, ADXSolverVariable *variable, ADXLinearSystem *system) {
  return ((ADXSolverVariable *) nil_chk(variable))->usageInRowCount_ <= 1;
}

ADXSolverVariable *ADXArrayRow_pickPivotInVariablesWithBooleanArray_withADXSolverVariable_(ADXArrayRow *self, IOSBooleanArray *avoid, ADXSolverVariable *exclude) {
  jboolean all = true;
  jfloat value = 0;
  ADXSolverVariable *pivot = nil;
  ADXSolverVariable *pivotSlack = nil;
  jfloat valueSlack = 0;
  jint currentSize = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(self->variables_)) getCurrentSize];
  for (jint i = 0; i < currentSize; i++) {
    jfloat currentValue = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(self->variables_)) getVariableValueWithInt:i];
    if (currentValue < 0) {
      ADXSolverVariable *v = JreRetainedLocalValue([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(self->variables_)) getVariableWithInt:i]);
      if (!((avoid != nil && IOSBooleanArray_Get(avoid, ((ADXSolverVariable *) nil_chk(v))->id__)) || (v == exclude))) {
        if (all) {
          if (((ADXSolverVariable *) nil_chk(v))->mType_ == JreLoadEnum(ADXSolverVariable_Type, SLACK) || v->mType_ == JreLoadEnum(ADXSolverVariable_Type, ERROR)) {
            if (currentValue < value) {
              value = currentValue;
              pivot = v;
            }
          }
        }
        else {
          if (((ADXSolverVariable *) nil_chk(v))->mType_ == JreLoadEnum(ADXSolverVariable_Type, SLACK)) {
            if (currentValue < valueSlack) {
              valueSlack = currentValue;
              pivotSlack = v;
            }
          }
          else if (v->mType_ == JreLoadEnum(ADXSolverVariable_Type, ERROR)) {
            if (currentValue < value) {
              value = currentValue;
              pivot = v;
            }
          }
        }
      }
    }
  }
  if (all) {
    return pivot;
  }
  return pivot != nil ? pivot : pivotSlack;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXArrayRow)

@implementation ADXArrayRow_ArrayRowVariables

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x401, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getCurrentSize);
  methods[1].selector = @selector(getVariableWithInt:);
  methods[2].selector = @selector(getVariableValueWithInt:);
  methods[3].selector = @selector(getWithADXSolverVariable:);
  methods[4].selector = @selector(indexOfWithADXSolverVariable:);
  methods[5].selector = @selector(display);
  methods[6].selector = @selector(clear);
  methods[7].selector = @selector(containsWithADXSolverVariable:);
  methods[8].selector = @selector(putWithADXSolverVariable:withFloat:);
  methods[9].selector = @selector(sizeInBytes);
  methods[10].selector = @selector(invert);
  methods[11].selector = @selector(removeWithADXSolverVariable:withBoolean:);
  methods[12].selector = @selector(divideByAmountWithFloat:);
  methods[13].selector = @selector(addWithADXSolverVariable:withFloat:withBoolean:);
  methods[14].selector = @selector(useWithADXArrayRow:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getVariable", "I", "getVariableValue", "get", "LADXSolverVariable;", "indexOf", "contains", "put", "LADXSolverVariable;F", "remove", "LADXSolverVariable;Z", "divideByAmount", "F", "add", "LADXSolverVariable;FZ", "use", "LADXArrayRow;Z", "LADXArrayRow;" };
  static const J2ObjcClassInfo _ADXArrayRow_ArrayRowVariables = { "ArrayRowVariables", "androidx.constraintlayout.core", ptrTable, methods, NULL, 7, 0x609, 15, 0, 17, -1, -1, -1, -1 };
  return &_ADXArrayRow_ArrayRowVariables;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXArrayRow_ArrayRowVariables)
