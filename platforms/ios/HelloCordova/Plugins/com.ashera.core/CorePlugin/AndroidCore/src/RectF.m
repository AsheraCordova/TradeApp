//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\graphics\RectF.java
//

#include "FastMath.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Parcel.h"
#include "Parcelable.h"
#include "Rect.h"
#include "RectF.h"
#include "java/io/PrintWriter.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"


@interface ADRectF_1 : ADParcelable_Creator

- (instancetype)init;

/*!
 @brief Return a new rectangle from the data in the specified parcel.
 */
- (ADRectF *)createFromParcelWithADParcel:(id<ADParcel>)inArg;

/*!
 @brief Return an array of rectangles of the specified size.
 */
- (IOSObjectArray *)newArrayWithInt:(jint)size OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADRectF_1)

__attribute__((unused)) static void ADRectF_1_init(ADRectF_1 *self);

__attribute__((unused)) static ADRectF_1 *new_ADRectF_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADRectF_1 *create_ADRectF_1_init(void);

J2OBJC_INITIALIZED_DEFN(ADRectF)

ADParcelable_Creator *ADRectF_CREATOR;

@implementation ADRectF

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADRectF_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom {
  ADRectF_initWithFloat_withFloat_withFloat_withFloat_(self, left, top, right, bottom);
  return self;
}

- (instancetype)initWithADRectF:(ADRectF *)r {
  ADRectF_initWithADRectF_(self, r);
  return self;
}

- (instancetype)initWithADRect:(ADRect *)r {
  ADRectF_initWithADRect_(self, r);
  return self;
}

- (jboolean)isEqual:(id)o {
  if (self == o) return true;
  if (o == nil || [self java_getClass] != [o java_getClass]) return false;
  ADRectF *r = (ADRectF *) cast_chk(o, [ADRectF class]);
  return left_ == r->left_ && top_ == r->top_ && right_ == r->right_ && bottom_ == r->bottom_;
}

- (NSUInteger)hash {
  jint result = (left_ != +0.0f ? JavaLangFloat_floatToIntBitsWithFloat_(left_) : 0);
  result = 31 * result + (top_ != +0.0f ? JavaLangFloat_floatToIntBitsWithFloat_(top_) : 0);
  result = 31 * result + (right_ != +0.0f ? JavaLangFloat_floatToIntBitsWithFloat_(right_) : 0);
  result = 31 * result + (bottom_ != +0.0f ? JavaLangFloat_floatToIntBitsWithFloat_(bottom_) : 0);
  return result;
}

- (NSString *)description {
  return JreStrcat("$F$F$F$FC", @"RectF(", left_, @", ", top_, @", ", right_, @", ", bottom_, ')');
}

- (NSString *)toShortString {
  return [self toShortStringWithJavaLangStringBuilder:create_JavaLangStringBuilder_initWithInt_(32)];
}

- (NSString *)toShortStringWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb {
  [((JavaLangStringBuilder *) nil_chk(sb)) setLengthWithInt:0];
  [sb appendWithChar:'['];
  [sb appendWithFloat:left_];
  [sb appendWithChar:','];
  [sb appendWithFloat:top_];
  [sb appendWithNSString:@"]["];
  [sb appendWithFloat:right_];
  [sb appendWithChar:','];
  [sb appendWithFloat:bottom_];
  [sb appendWithChar:']'];
  return [sb description];
}

- (void)printShortStringWithJavaIoPrintWriter:(JavaIoPrintWriter *)pw {
  [((JavaIoPrintWriter *) nil_chk(pw)) printWithChar:'['];
  [pw printWithFloat:left_];
  [pw printWithChar:','];
  [pw printWithFloat:top_];
  [pw printWithNSString:@"]["];
  [pw printWithFloat:right_];
  [pw printWithChar:','];
  [pw printWithFloat:bottom_];
  [pw printWithChar:']'];
}

- (jboolean)isEmpty {
  return left_ >= right_ || top_ >= bottom_;
}

- (jfloat)width {
  return right_ - left_;
}

- (jfloat)height {
  return bottom_ - top_;
}

- (jfloat)centerX {
  return (left_ + right_) * 0.5f;
}

- (jfloat)centerY {
  return (top_ + bottom_) * 0.5f;
}

- (void)setEmpty {
  left_ = right_ = top_ = bottom_ = 0;
}

- (void)setWithFloat:(jfloat)left
           withFloat:(jfloat)top
           withFloat:(jfloat)right
           withFloat:(jfloat)bottom {
  self->left_ = left;
  self->top_ = top;
  self->right_ = right;
  self->bottom_ = bottom;
}

- (void)setWithADRectF:(ADRectF *)src {
  self->left_ = ((ADRectF *) nil_chk(src))->left_;
  self->top_ = src->top_;
  self->right_ = src->right_;
  self->bottom_ = src->bottom_;
}

- (void)setWithADRect:(ADRect *)src {
  self->left_ = ((ADRect *) nil_chk(src))->left_;
  self->top_ = src->top_;
  self->right_ = src->right_;
  self->bottom_ = src->bottom_;
}

- (void)offsetWithFloat:(jfloat)dx
              withFloat:(jfloat)dy {
  JrePlusAssignFloatF(&left_, dx);
  JrePlusAssignFloatF(&top_, dy);
  JrePlusAssignFloatF(&right_, dx);
  JrePlusAssignFloatF(&bottom_, dy);
}

- (void)offsetToWithFloat:(jfloat)newLeft
                withFloat:(jfloat)newTop {
  JrePlusAssignFloatF(&right_, newLeft - left_);
  JrePlusAssignFloatF(&bottom_, newTop - top_);
  left_ = newLeft;
  top_ = newTop;
}

- (void)insetWithFloat:(jfloat)dx
             withFloat:(jfloat)dy {
  JrePlusAssignFloatF(&left_, dx);
  JrePlusAssignFloatF(&top_, dy);
  JreMinusAssignFloatF(&right_, dx);
  JreMinusAssignFloatF(&bottom_, dy);
}

- (jboolean)containsWithFloat:(jfloat)x
                    withFloat:(jfloat)y {
  return left_ < right_ && top_ < bottom_ && x >= left_ && x < right_ && y >= top_ && y < bottom_;
}

- (jboolean)containsWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom {
  return self->left_ < self->right_ && self->top_ < self->bottom_ && self->left_ <= left && self->top_ <= top && self->right_ >= right && self->bottom_ >= bottom;
}

- (jboolean)containsWithADRectF:(ADRectF *)r {
  return self->left_ < self->right_ && self->top_ < self->bottom_ && left_ <= ((ADRectF *) nil_chk(r))->left_ && top_ <= r->top_ && right_ >= r->right_ && bottom_ >= r->bottom_;
}

- (jboolean)intersectWithFloat:(jfloat)left
                     withFloat:(jfloat)top
                     withFloat:(jfloat)right
                     withFloat:(jfloat)bottom {
  if (self->left_ < right && left < self->right_ && self->top_ < bottom && top < self->bottom_) {
    if (self->left_ < left) {
      self->left_ = left;
    }
    if (self->top_ < top) {
      self->top_ = top;
    }
    if (self->right_ > right) {
      self->right_ = right;
    }
    if (self->bottom_ > bottom) {
      self->bottom_ = bottom;
    }
    return true;
  }
  return false;
}

- (jboolean)intersectWithADRectF:(ADRectF *)r {
  return [self intersectWithFloat:((ADRectF *) nil_chk(r))->left_ withFloat:r->top_ withFloat:r->right_ withFloat:r->bottom_];
}

- (jboolean)setIntersectWithADRectF:(ADRectF *)a
                        withADRectF:(ADRectF *)b {
  if (((ADRectF *) nil_chk(a))->left_ < ((ADRectF *) nil_chk(b))->right_ && b->left_ < a->right_ && a->top_ < b->bottom_ && b->top_ < a->bottom_) {
    left_ = JavaLangMath_maxWithFloat_withFloat_(a->left_, b->left_);
    top_ = JavaLangMath_maxWithFloat_withFloat_(a->top_, b->top_);
    right_ = JavaLangMath_minWithFloat_withFloat_(a->right_, b->right_);
    bottom_ = JavaLangMath_minWithFloat_withFloat_(a->bottom_, b->bottom_);
    return true;
  }
  return false;
}

- (jboolean)intersectsWithFloat:(jfloat)left
                      withFloat:(jfloat)top
                      withFloat:(jfloat)right
                      withFloat:(jfloat)bottom {
  return self->left_ < right && left < self->right_ && self->top_ < bottom && top < self->bottom_;
}

+ (jboolean)intersectsWithADRectF:(ADRectF *)a
                      withADRectF:(ADRectF *)b {
  return ADRectF_intersectsWithADRectF_withADRectF_(a, b);
}

- (void)roundWithADRect:(ADRect *)dst {
  [((ADRect *) nil_chk(dst)) setWithInt:ADFastMath_roundWithFloat_(left_) withInt:ADFastMath_roundWithFloat_(top_) withInt:ADFastMath_roundWithFloat_(right_) withInt:ADFastMath_roundWithFloat_(bottom_)];
}

- (void)roundOutWithADRect:(ADRect *)dst {
  [((ADRect *) nil_chk(dst)) setWithInt:JreFpToInt(JavaLangMath_floorWithDouble_(left_)) withInt:JreFpToInt(JavaLangMath_floorWithDouble_(top_)) withInt:JreFpToInt(JavaLangMath_ceilWithDouble_(right_)) withInt:JreFpToInt(JavaLangMath_ceilWithDouble_(bottom_))];
}

- (void)union__WithFloat:(jfloat)left
               withFloat:(jfloat)top
               withFloat:(jfloat)right
               withFloat:(jfloat)bottom {
  if ((left < right) && (top < bottom)) {
    if ((self->left_ < self->right_) && (self->top_ < self->bottom_)) {
      if (self->left_ > left) self->left_ = left;
      if (self->top_ > top) self->top_ = top;
      if (self->right_ < right) self->right_ = right;
      if (self->bottom_ < bottom) self->bottom_ = bottom;
    }
    else {
      self->left_ = left;
      self->top_ = top;
      self->right_ = right;
      self->bottom_ = bottom;
    }
  }
}

- (void)union__WithADRectF:(ADRectF *)r {
  [self union__WithFloat:((ADRectF *) nil_chk(r))->left_ withFloat:r->top_ withFloat:r->right_ withFloat:r->bottom_];
}

- (void)union__WithFloat:(jfloat)x
               withFloat:(jfloat)y {
  if (x < left_) {
    left_ = x;
  }
  else if (x > right_) {
    right_ = x;
  }
  if (y < top_) {
    top_ = y;
  }
  else if (y > bottom_) {
    bottom_ = y;
  }
}

- (void)sort {
  if (left_ > right_) {
    jfloat temp = left_;
    left_ = right_;
    right_ = temp;
  }
  if (top_ > bottom_) {
    jfloat temp = top_;
    top_ = bottom_;
    bottom_ = temp;
  }
}

- (jint)describeContents {
  return 0;
}

- (void)writeToParcelWithADParcel:(id<ADParcel>)outArg
                          withInt:(jint)flags {
  [((id<ADParcel>) nil_chk(outArg)) writeFloatWithFloat:left_];
  [outArg writeFloatWithFloat:top_];
  [outArg writeFloatWithFloat:right_];
  [outArg writeFloatWithFloat:bottom_];
}

- (void)readFromParcelWithADParcel:(id<ADParcel>)inArg {
  left_ = [((id<ADParcel>) nil_chk(inArg)) readFloat];
  top_ = [inArg readFloat];
  right_ = [inArg readFloat];
  bottom_ = [inArg readFloat];
}

- (void)scale__WithFloat:(jfloat)scale_ {
  if (scale_ != 1.0f) {
    left_ = left_ * scale_;
    top_ = top_ * scale_;
    right_ = right_ * scale_;
    bottom_ = bottom_ * scale_;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 17, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:);
  methods[2].selector = @selector(initWithADRectF:);
  methods[3].selector = @selector(initWithADRect:);
  methods[4].selector = @selector(isEqual:);
  methods[5].selector = @selector(hash);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(toShortString);
  methods[8].selector = @selector(toShortStringWithJavaLangStringBuilder:);
  methods[9].selector = @selector(printShortStringWithJavaIoPrintWriter:);
  methods[10].selector = @selector(isEmpty);
  methods[11].selector = @selector(width);
  methods[12].selector = @selector(height);
  methods[13].selector = @selector(centerX);
  methods[14].selector = @selector(centerY);
  methods[15].selector = @selector(setEmpty);
  methods[16].selector = @selector(setWithFloat:withFloat:withFloat:withFloat:);
  methods[17].selector = @selector(setWithADRectF:);
  methods[18].selector = @selector(setWithADRect:);
  methods[19].selector = @selector(offsetWithFloat:withFloat:);
  methods[20].selector = @selector(offsetToWithFloat:withFloat:);
  methods[21].selector = @selector(insetWithFloat:withFloat:);
  methods[22].selector = @selector(containsWithFloat:withFloat:);
  methods[23].selector = @selector(containsWithFloat:withFloat:withFloat:withFloat:);
  methods[24].selector = @selector(containsWithADRectF:);
  methods[25].selector = @selector(intersectWithFloat:withFloat:withFloat:withFloat:);
  methods[26].selector = @selector(intersectWithADRectF:);
  methods[27].selector = @selector(setIntersectWithADRectF:withADRectF:);
  methods[28].selector = @selector(intersectsWithFloat:withFloat:withFloat:withFloat:);
  methods[29].selector = @selector(intersectsWithADRectF:withADRectF:);
  methods[30].selector = @selector(roundWithADRect:);
  methods[31].selector = @selector(roundOutWithADRect:);
  methods[32].selector = @selector(union__WithFloat:withFloat:withFloat:withFloat:);
  methods[33].selector = @selector(union__WithADRectF:);
  methods[34].selector = @selector(union__WithFloat:withFloat:);
  methods[35].selector = @selector(sort);
  methods[36].selector = @selector(describeContents);
  methods[37].selector = @selector(writeToParcelWithADParcel:withInt:);
  methods[38].selector = @selector(readFromParcelWithADParcel:);
  methods[39].selector = @selector(scale__WithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "left_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "top_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "right_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottom_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "CREATOR", "LADParcelable_Creator;", .constantValue.asLong = 0, 0x19, -1, 30, 31, -1 },
  };
  static const void *ptrTable[] = { "FFFF", "LADRectF;", "LADRect;", "equals", "LNSObject;", "hashCode", "toString", "toShortString", "LJavaLangStringBuilder;", "printShortString", "LJavaIoPrintWriter;", "set", "offset", "FF", "offsetTo", "inset", "contains", "intersect", "setIntersect", "LADRectF;LADRectF;", "intersects", "round", "roundOut", "union", "writeToParcel", "LADParcel;I", "readFromParcel", "LADParcel;", "scale", "F", &ADRectF_CREATOR, "Lr/android/os/Parcelable$Creator<Lr/android/graphics/RectF;>;" };
  static const J2ObjcClassInfo _ADRectF = { "RectF", "r.android.graphics", ptrTable, methods, fields, 7, 0x1, 40, 5, -1, -1, -1, -1, -1 };
  return &_ADRectF;
}

+ (void)initialize {
  if (self == [ADRectF class]) {
    JreStrongAssignAndConsume(&ADRectF_CREATOR, new_ADRectF_1_init());
    J2OBJC_SET_INITIALIZED(ADRectF)
  }
}

@end

void ADRectF_init(ADRectF *self) {
  NSObject_init(self);
}

ADRectF *new_ADRectF_init() {
  J2OBJC_NEW_IMPL(ADRectF, init)
}

ADRectF *create_ADRectF_init() {
  J2OBJC_CREATE_IMPL(ADRectF, init)
}

void ADRectF_initWithFloat_withFloat_withFloat_withFloat_(ADRectF *self, jfloat left, jfloat top, jfloat right, jfloat bottom) {
  NSObject_init(self);
  self->left_ = left;
  self->top_ = top;
  self->right_ = right;
  self->bottom_ = bottom;
}

ADRectF *new_ADRectF_initWithFloat_withFloat_withFloat_withFloat_(jfloat left, jfloat top, jfloat right, jfloat bottom) {
  J2OBJC_NEW_IMPL(ADRectF, initWithFloat_withFloat_withFloat_withFloat_, left, top, right, bottom)
}

ADRectF *create_ADRectF_initWithFloat_withFloat_withFloat_withFloat_(jfloat left, jfloat top, jfloat right, jfloat bottom) {
  J2OBJC_CREATE_IMPL(ADRectF, initWithFloat_withFloat_withFloat_withFloat_, left, top, right, bottom)
}

void ADRectF_initWithADRectF_(ADRectF *self, ADRectF *r) {
  NSObject_init(self);
  if (r == nil) {
    self->left_ = self->top_ = self->right_ = self->bottom_ = 0.0f;
  }
  else {
    self->left_ = r->left_;
    self->top_ = r->top_;
    self->right_ = r->right_;
    self->bottom_ = r->bottom_;
  }
}

ADRectF *new_ADRectF_initWithADRectF_(ADRectF *r) {
  J2OBJC_NEW_IMPL(ADRectF, initWithADRectF_, r)
}

ADRectF *create_ADRectF_initWithADRectF_(ADRectF *r) {
  J2OBJC_CREATE_IMPL(ADRectF, initWithADRectF_, r)
}

void ADRectF_initWithADRect_(ADRectF *self, ADRect *r) {
  NSObject_init(self);
  if (r == nil) {
    self->left_ = self->top_ = self->right_ = self->bottom_ = 0.0f;
  }
  else {
    self->left_ = r->left_;
    self->top_ = r->top_;
    self->right_ = r->right_;
    self->bottom_ = r->bottom_;
  }
}

ADRectF *new_ADRectF_initWithADRect_(ADRect *r) {
  J2OBJC_NEW_IMPL(ADRectF, initWithADRect_, r)
}

ADRectF *create_ADRectF_initWithADRect_(ADRect *r) {
  J2OBJC_CREATE_IMPL(ADRectF, initWithADRect_, r)
}

jboolean ADRectF_intersectsWithADRectF_withADRectF_(ADRectF *a, ADRectF *b) {
  ADRectF_initialize();
  return ((ADRectF *) nil_chk(a))->left_ < ((ADRectF *) nil_chk(b))->right_ && b->left_ < a->right_ && a->top_ < b->bottom_ && b->top_ < a->bottom_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADRectF)

@implementation ADRectF_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADRectF_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADRectF *)createFromParcelWithADParcel:(id<ADParcel>)inArg {
  ADRectF *r = create_ADRectF_init();
  [r readFromParcelWithADParcel:inArg];
  return r;
}

- (IOSObjectArray *)newArrayWithInt:(jint)size {
  return [IOSObjectArray arrayWithLength:size type:ADRectF_class_()];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRectF;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LADRectF;", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(createFromParcelWithADParcel:);
  methods[2].selector = @selector(newArrayWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "createFromParcel", "LADParcel;", "newArray", "I", "LADRectF;", "Lr/android/os/Parcelable$Creator<Lr/android/graphics/RectF;>;" };
  static const J2ObjcClassInfo _ADRectF_1 = { "", "r.android.graphics", ptrTable, methods, NULL, 7, 0x8018, 3, 0, 4, -1, -1, 5, -1 };
  return &_ADRectF_1;
}

@end

void ADRectF_1_init(ADRectF_1 *self) {
  ADParcelable_Creator_init(self);
}

ADRectF_1 *new_ADRectF_1_init() {
  J2OBJC_NEW_IMPL(ADRectF_1, init)
}

ADRectF_1 *create_ADRectF_1_init() {
  J2OBJC_CREATE_IMPL(ADRectF_1, init)
}
