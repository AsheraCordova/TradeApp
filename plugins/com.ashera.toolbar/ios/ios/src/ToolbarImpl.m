//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSToolbarPlugin\src\main\java\com\ashera\toolbar\ToolbarImpl.java
//

#include "ActionMenuView.h"
#include "ActionMenuViewImpl.h"
#include "BaseHasWidgets.h"
#include "BaseMeasurableImageView.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "MenuBuilder.h"
#include "MenuItem.h"
#include "MenuParser.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "ResourceBundleUtils.h"
#include "Toolbar.h"
#include "ToolbarImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@class ASToolbarImpl_OnClickListener;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASToolbarImpl () {
 @public
  id uiView_;
  ADXToolbar *toolbar_;
  NSString *PREMEASURE_EVENT_;
  id<ASIWidget> titleView_;
  id<ASIWidget> subtitleView_;
  id<ASIWidget> logo_;
  id<ASIWidget> navigationIcon_;
  id<ASIWidget> actionMenuView_;
  NSString *menu_;
  id<ADXToolbar_OnMenuItemClickListener> onMenuItemClickListener_;
  id overflowIcon_;
  jint mButtonGravity_;
  jint screenWidth_;
  ASToolbarImpl_ToolbarCommandBuilder *builder_;
  ASToolbarImpl_ToolbarBean *bean_;
  ASToolbarImpl_ToolbarCommandParamsBuilder *paramsBuilder_;
  ASToolbarImpl_ToolbarParamsBean *paramsBean_;
}

- (void)addPremeasureHandler;

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXToolbar_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setTitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)initTitle OBJC_METHOD_FAMILY_NONE;

- (void)setSubtitleColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setTitleTextColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setSubtitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)initSubTitle OBJC_METHOD_FAMILY_NONE;

- (void)setLogoWithASWidgetAttribute:(ASWidgetAttribute *)key
                        withNSString:(NSString *)strValue
                              withId:(id)objValue
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setNavigationIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setMenuWithId:(id)objValue;

- (void)createMenu;

- (void)setOnMenuItemClickListenerWithNSString:(NSString *)strValue
                                        withId:(id)objValue;

- (void)setOverflowIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                withNSString:(NSString *)strValue
                                      withId:(id)objValue
                   withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setGravityWithId:(id)objValue;

- (void)setMaxButtonHeightWithId:(id)objValue;

- (void)setButtonGravityWithId:(id)objValue;

- (void)handlePreMeasureWithId:(id)payload;

- (void)setContentInsetEndWithId:(id)objValue;

- (void)setContentInsetStartWithId:(id)objValue;

- (void)setTitleMarginWithId:(id)objValue;

- (void)setNavigationOnClickListenerWithASToolbarImpl_OnClickListener:(ASToolbarImpl_OnClickListener *)onClickListener;

@end

J2OBJC_FIELD_SETTER(ASToolbarImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASToolbarImpl, toolbar_, ADXToolbar *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, PREMEASURE_EVENT_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, titleView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, subtitleView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, logo_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, navigationIcon_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, actionMenuView_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, menu_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, onMenuItemClickListener_, id<ADXToolbar_OnMenuItemClickListener>)
J2OBJC_FIELD_SETTER(ASToolbarImpl, overflowIcon_, id)
J2OBJC_FIELD_SETTER(ASToolbarImpl, builder_, ASToolbarImpl_ToolbarCommandBuilder *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, bean_, ASToolbarImpl_ToolbarBean *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, paramsBuilder_, ASToolbarImpl_ToolbarCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASToolbarImpl, paramsBean_, ASToolbarImpl_ToolbarParamsBean *)

__attribute__((unused)) static void ASToolbarImpl_addPremeasureHandler(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setWidgetOnNativeClass(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_createLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view);

__attribute__((unused)) static ADXToolbar_LayoutParams *ASToolbarImpl_getLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view);

__attribute__((unused)) static void ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_initTitle(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_initSubTitle(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setMenuWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_createMenu(ASToolbarImpl *self);

__attribute__((unused)) static void ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(ASToolbarImpl *self, NSString *strValue, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToolbarImpl_setGravityWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setMaxButtonHeightWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setButtonGravityWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_handlePreMeasureWithId_(ASToolbarImpl *self, id payload);

__attribute__((unused)) static void ASToolbarImpl_setContentInsetEndWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setContentInsetStartWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setTitleMarginWithId_(ASToolbarImpl *self, id objValue);

__attribute__((unused)) static void ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(ASToolbarImpl *self, ASToolbarImpl_OnClickListener *onClickListener);

@interface ASToolbarImpl_PreMeasureHandler () {
 @public
  __unsafe_unretained ASToolbarImpl *this$0_;
}

@end

@interface ASToolbarImpl_ToolbarExt () {
 @public
  __unsafe_unretained ASToolbarImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASToolbarImpl_ToolbarExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_ToolbarExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASToolbarImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASToolbarImpl_OnClickListener)

@interface ASToolbarImpl_OnMenuItemClickListener : NSObject < ADXToolbar_OnMenuItemClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onMenuItemClickWithADMenuItem:(id<ADMenuItem>)item;

- (id<JavaUtilMap>)getOnMenuItemClickEventObjWithADMenuItem:(id<ADMenuItem>)item;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToolbarImpl_OnMenuItemClickListener)

J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASToolbarImpl_OnMenuItemClickListener, action_, NSString *)

__attribute__((unused)) static void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASToolbarImpl_OnMenuItemClickListener)

@interface ASToolbarImpl_ToolbarCommandBuilder () {
 @public
  ASToolbarImpl *this$0_;
}

@end

@interface ASToolbarImpl_ToolbarBean () {
 @public
  ASToolbarImpl *this$0_;
}

@end

NSString *ASToolbarImpl_LOCAL_NAME = @"androidx.appcompat.widget.Toolbar";
NSString *ASToolbarImpl_GROUP_NAME = @"androidx.appcompat.widget.Toolbar";

@implementation ASToolbarImpl

@synthesize uiView = uiView_;

- (void)addPremeasureHandler {
  ASToolbarImpl_addPremeasureHandler(self);
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"title"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"subtitle"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"subtitleTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"logo"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"navigationIcon"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"overflowIcon"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onNavigationIconClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onMenuItemClick"])) withTypeWithNSString:@"string"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMargin"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMarginBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"titleMargins"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetStartWithNavigation"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentInsetEndWithActions"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxButtonHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"buttonGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"menu"])) withTypeWithNSString:@"string"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToolbarImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASToolbarImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASToolbarImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASToolbarImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  toolbar_ = new_ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASToolbarImpl_addPremeasureHandler(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASToolbarImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASToolbarImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return toolbar_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXToolbar *) nil_chk(toolbar_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXToolbar *) nil_chk(toolbar_)) getChildCount]) {
    [((ADXToolbar *) nil_chk(toolbar_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASToolbarImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXToolbar *) nil_chk(toolbar_)) addViewWithADView:view];
    }
    else {
      [((ADXToolbar *) nil_chk(toolbar_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASToolbarImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXToolbar_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASToolbarImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXToolbar_LayoutParams *layoutParams = ASToolbarImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXToolbar_LayoutParams *layoutParams = ASToolbarImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXToolbar_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASToolbarImpl_ToolbarExt *) nil_chk(((ASToolbarImpl_ToolbarExt *) cast_chk(toolbar_, [ASToolbarImpl_ToolbarExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"title", @"titleTextColor", @"subtitle", @"subtitleTextColor", @"logo", @"navigationIcon", @"overflowIcon", @"onNavigationIconClick", @"onMenuItemClick", @"gravity", @"titleMargin", @"titleMarginStart", @"titleMarginEnd", @"titleMarginTop", @"titleMarginBottom", @"titleMargins", @"contentInsetStart", @"contentInsetEnd", @"contentInsetLeft", @"contentInsetRight", @"contentInsetStartWithNavigation", @"contentInsetEndWithActions", @"maxButtonHeight", @"buttonGravity", @"menu" }, 25)) {
    case 0:
    {
      ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 1:
    {
      ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 2:
    {
      ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 3:
    {
      ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 4:
    {
      ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 5:
    {
      ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 6:
    {
      ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 7:
    {
      ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(self, new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(self, strValue));
    }
    break;
    case 8:
    {
      ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(self, strValue, objValue);
    }
    break;
    case 9:
    {
      ASToolbarImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASToolbarImpl_setTitleMarginWithId_(self, objValue);
    }
    break;
    case 11:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginStartWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 12:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginEndWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 13:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginTopWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 14:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setTitleMarginBottomWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 15:
    {
      ASToolbarImpl_setTitleMarginWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASToolbarImpl_setContentInsetStartWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASToolbarImpl_setContentInsetEndWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASToolbarImpl_setContentInsetStartWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASToolbarImpl_setContentInsetEndWithId_(self, objValue);
    }
    break;
    case 20:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setContentInsetStartWithNavigationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 21:
    {
      [((ADXToolbar *) nil_chk(toolbar_)) setContentInsetEndWithActionsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 22:
    {
      ASToolbarImpl_setMaxButtonHeightWithId_(self, objValue);
    }
    break;
    case 23:
    {
      ASToolbarImpl_setButtonGravityWithId_(self, objValue);
    }
    break;
    case 24:
    {
      ASToolbarImpl_setMenuWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){  }, 0)) {
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setTitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
            withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)initTitle {
  ASToolbarImpl_initTitle(self);
}

- (void)setSubtitleColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setTitleTextColorWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setSubtitleWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)initSubTitle {
  ASToolbarImpl_initSubTitle(self);
}

- (void)setLogoWithASWidgetAttribute:(ASWidgetAttribute *)key
                        withNSString:(NSString *)strValue
                              withId:(id)objValue
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setNavigationIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setMenuWithId:(id)objValue {
  ASToolbarImpl_setMenuWithId_(self, objValue);
}

- (void)createMenu {
  ASToolbarImpl_createMenu(self);
}

- (id<ADXToolbar_OnMenuItemClickListener>)getOnMenuItemClickListener {
  return onMenuItemClickListener_;
}

- (void)setOnMenuItemClickListenerWithNSString:(NSString *)strValue
                                        withId:(id)objValue {
  ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(self, strValue, objValue);
}

- (void)setOverflowIconWithASWidgetAttribute:(ASWidgetAttribute *)key
                                withNSString:(NSString *)strValue
                                      withId:(id)objValue
                   withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setGravityWithId:(id)objValue {
  ASToolbarImpl_setGravityWithId_(self, objValue);
}

- (void)setMaxButtonHeightWithId:(id)objValue {
  ASToolbarImpl_setMaxButtonHeightWithId_(self, objValue);
}

- (void)setButtonGravityWithId:(id)objValue {
  ASToolbarImpl_setButtonGravityWithId_(self, objValue);
}

- (void)handlePreMeasureWithId:(id)payload {
  ASToolbarImpl_handlePreMeasureWithId_(self, payload);
}

- (void)setContentInsetEndWithId:(id)objValue {
  ASToolbarImpl_setContentInsetEndWithId_(self, objValue);
}

- (void)setContentInsetStartWithId:(id)objValue {
  ASToolbarImpl_setContentInsetStartWithId_(self, objValue);
}

- (void)setTitleMarginWithId:(id)objValue {
  ASToolbarImpl_setTitleMarginWithId_(self, objValue);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXToolbar *) nil_chk(toolbar_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASToolbarImpl_ToolbarBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASToolbarImpl_ToolbarBean_initWithASToolbarImpl_(self);
  }
  return bean_;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASToolbarImpl_ToolbarCommandBuilder_initWithASToolbarImpl_(self);
  }
  return builder_;
}

- (ASToolbarImpl_ToolbarParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASToolbarImpl_ToolbarParamsBean_initWithASToolbarImpl_(self);
  }
  return paramsBean_;
}

- (ASToolbarImpl_ToolbarCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASToolbarImpl_ToolbarCommandParamsBuilder_initWithASToolbarImpl_(self);
  }
  return paramsBuilder_;
}

- (void)setNavigationOnClickListenerWithASToolbarImpl_OnClickListener:(ASToolbarImpl_OnClickListener *)onClickListener {
  ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(self, onClickListener);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXToolbar_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXToolbar_OnMenuItemClickListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 47, 1, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 49, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addPremeasureHandler);
  methods[1].selector = @selector(loadAttributesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(removeWithASIWidget:);
  methods[10].selector = @selector(removeWithInt:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[22].selector = @selector(requestLayout);
  methods[23].selector = @selector(invalidate);
  methods[24].selector = @selector(setTitleWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[25].selector = @selector(initTitle);
  methods[26].selector = @selector(setSubtitleColorWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[27].selector = @selector(setTitleTextColorWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[28].selector = @selector(setSubtitleWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[29].selector = @selector(initSubTitle);
  methods[30].selector = @selector(setLogoWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[31].selector = @selector(setNavigationIconWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[32].selector = @selector(setMenuWithId:);
  methods[33].selector = @selector(createMenu);
  methods[34].selector = @selector(getOnMenuItemClickListener);
  methods[35].selector = @selector(setOnMenuItemClickListenerWithNSString:withId:);
  methods[36].selector = @selector(setOverflowIconWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[37].selector = @selector(setGravityWithId:);
  methods[38].selector = @selector(setMaxButtonHeightWithId:);
  methods[39].selector = @selector(setButtonGravityWithId:);
  methods[40].selector = @selector(handlePreMeasureWithId:);
  methods[41].selector = @selector(setContentInsetEndWithId:);
  methods[42].selector = @selector(setContentInsetStartWithId:);
  methods[43].selector = @selector(setTitleMarginWithId:);
  methods[44].selector = @selector(setIdWithNSString:);
  methods[45].selector = @selector(getPluginWithNSString:);
  methods[46].selector = @selector(getBean);
  methods[47].selector = @selector(getBuilder);
  methods[48].selector = @selector(getParamsBean);
  methods[49].selector = @selector(getParamsBuilder);
  methods[50].selector = @selector(setNavigationOnClickListenerWithASToolbarImpl_OnClickListener:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 50, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 51, -1, -1 },
    { "toolbar_", "LADXToolbar;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PREMEASURE_EVENT_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "titleView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "subtitleView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "logo_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "navigationIcon_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "actionMenuView_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "menu_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onMenuItemClickListener_", "LADXToolbar_OnMenuItemClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "overflowIcon_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mButtonGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "screenWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASToolbarImpl_ToolbarCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASToolbarImpl_ToolbarBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASToolbarImpl_ToolbarCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASToolbarImpl_ToolbarParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setTitle", "setSubtitleColor", "setTitleTextColor", "setSubtitle", "setLogo", "setNavigationIcon", "setMenu", "LNSObject;", "setOnMenuItemClickListener", "LNSString;LNSObject;", "setOverflowIcon", "setGravity", "setMaxButtonHeight", "setButtonGravity", "handlePreMeasure", "setContentInsetEnd", "setContentInsetStart", "setTitleMargin", "setId", "getPlugin", "setNavigationOnClickListener", "LASToolbarImpl_OnClickListener;", &ASToolbarImpl_LOCAL_NAME, &ASToolbarImpl_GROUP_NAME, "LASToolbarImpl_PreMeasureHandler;LASToolbarImpl_ToolbarExt;LASToolbarImpl_OnClickListener;LASToolbarImpl_OnMenuItemClickListener;LASToolbarImpl_ToolbarCommandBuilder;LASToolbarImpl_ToolbarBean;LASToolbarImpl_ToolbarParamsBean;LASToolbarImpl_ToolbarCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASToolbarImpl = { "ToolbarImpl", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 51, 19, -1, 52, -1, -1, -1 };
  return &_ASToolbarImpl;
}

@end

void ASToolbarImpl_addPremeasureHandler(ASToolbarImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:self->PREMEASURE_EVENT_ withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(self, self->PREMEASURE_EVENT_) } count:1 type:ASEventBusHandler_class_()]];
}

void ASToolbarImpl_init(ASToolbarImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASToolbarImpl_GROUP_NAME, ASToolbarImpl_LOCAL_NAME);
  self->PREMEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, preMeasure))) description];
  self->mButtonGravity_ = ADGravity_TOP;
  self->screenWidth_ = -1;
}

ASToolbarImpl *new_ASToolbarImpl_init() {
  J2OBJC_NEW_IMPL(ASToolbarImpl, init)
}

ASToolbarImpl *create_ASToolbarImpl_init() {
  J2OBJC_CREATE_IMPL(ASToolbarImpl, init)
}

void ASToolbarImpl_initWithNSString_(ASToolbarImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASToolbarImpl_GROUP_NAME, localname);
  self->PREMEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, preMeasure))) description];
  self->mButtonGravity_ = ADGravity_TOP;
  self->screenWidth_ = -1;
}

ASToolbarImpl *new_ASToolbarImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASToolbarImpl, initWithNSString_, localname)
}

ASToolbarImpl *create_ASToolbarImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl, initWithNSString_, localname)
}

void ASToolbarImpl_initWithNSString_withNSString_(ASToolbarImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->PREMEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, preMeasure))) description];
  self->mButtonGravity_ = ADGravity_TOP;
  self->screenWidth_ = -1;
}

ASToolbarImpl *new_ASToolbarImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASToolbarImpl, initWithNSString_withNSString_, groupName, localname)
}

ASToolbarImpl *create_ASToolbarImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASToolbarImpl_setWidgetOnNativeClass(ASToolbarImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASToolbarImpl_createLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view) {
  ADXToolbar_LayoutParams *layoutParams = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXToolbar_LayoutParams class]);
  layoutParams = (ADXToolbar_LayoutParams *) cast_chk([view getLayoutParams], [ADXToolbar_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXToolbar_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXToolbar_LayoutParams *ASToolbarImpl_getLayoutParamsWithADView_(ASToolbarImpl *self, ADView *view) {
  return (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXToolbar_LayoutParams class]);
}

void ASToolbarImpl_setTitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initTitle(self);
  [((id<ASIWidget>) nil_chk(self->titleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"text") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->titleView_)) requestLayout];
  }
}

void ASToolbarImpl_initTitle(ASToolbarImpl *self) {
  if (self->titleView_ == nil) {
    self->titleView_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"Toolbar_titleView", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setTitleTextViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->titleView_)) asWidget], [ADView class])];
  }
}

void ASToolbarImpl_setSubtitleColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initSubTitle(self);
  [((id<ASIWidget>) nil_chk(self->subtitleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"textColor") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
}

void ASToolbarImpl_setTitleTextColorWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initTitle(self);
  [((id<ASIWidget>) nil_chk(self->titleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"textColor") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
}

void ASToolbarImpl_setSubtitleWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASToolbarImpl_initSubTitle(self);
  [((id<ASIWidget>) nil_chk(self->subtitleView_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"text") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->subtitleView_)) requestLayout];
  }
}

void ASToolbarImpl_initSubTitle(ASToolbarImpl *self) {
  if (self->subtitleView_ == nil) {
    self->subtitleView_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"Toolbar_subtitleView", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setSubtitleTextViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->subtitleView_)) asWidget], [ADView class])];
  }
}

void ASToolbarImpl_setLogoWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if (self->logo_ == nil) {
    self->logo_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"Toolbar_logoView", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setLogoViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->logo_)) asWidget], [ADView class])];
  }
  [((id<ASIWidget>) nil_chk(self->logo_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"ImageView", @"src") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->logo_)) requestLayout];
  }
}

void ASToolbarImpl_setNavigationIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if (self->navigationIcon_ == nil) {
    self->navigationIcon_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"ImageView", @"Toolbar_navigationIcon", self, true);
    [((ADXToolbar *) nil_chk(self->toolbar_)) setNavigationIconWithASBaseMeasurableImageView:(ASBaseMeasurableImageView *) cast_chk([((id<ASIWidget>) nil_chk(self->navigationIcon_)) asWidget], [ASBaseMeasurableImageView class])];
  }
  [((id<ASIWidget>) nil_chk(self->navigationIcon_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"ImageView", @"src") withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(self->navigationIcon_)) requestLayout];
  }
}

void ASToolbarImpl_setMenuWithId_(ASToolbarImpl *self, id objValue) {
  self->menu_ = (NSString *) cast_chk(objValue, [NSString class]);
  ASToolbarImpl_createMenu(self);
}

void ASToolbarImpl_createMenu(ASToolbarImpl *self) {
  if (self->menu_ != nil) {
    if (self->actionMenuView_ != nil) {
      [self removeWithASIWidget:self->actionMenuView_];
      self->actionMenuView_ = nil;
    }
    if (self->actionMenuView_ == nil) {
      self->actionMenuView_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(ASActionMenuViewImpl_LOCAL_NAME, @"Toolbar_actionMenuView", self, true);
      [((ADXToolbar *) nil_chk(self->toolbar_)) setMenuViewWithADView:(ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class])];
      ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADXActionMenuView *) nil_chk(((ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class])))) getLayoutParams], [ADXToolbar_LayoutParams class]);
      ((ADXToolbar_LayoutParams *) nil_chk(lp))->gravity_ = ADXGravityCompat_END | (self->mButtonGravity_ & ADGravity_VERTICAL_GRAVITY_MASK);
    }
    NSString *key = [((NSString *) nil_chk(self->menu_)) java_replace:@"@menu/" withSequence:@""];
    NSString *json = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"menu/menu", key, self->fragment_);
    ADXActionMenuView *actionMenu = (ADXActionMenuView *) cast_chk([((id<ASIWidget>) nil_chk(self->actionMenuView_)) asWidget], [ADXActionMenuView class]);
    ADXMenuParser_parseMenuWithADXMenuBuilder_withNSString_withASIFragment_([((ADXActionMenuView *) nil_chk(actionMenu)) getMenu], json, self->fragment_);
    [actionMenu updateMenuView];
    id<ASIWidget> overFlowButton = [((ASActionMenuViewImpl *) nil_chk(((ASActionMenuViewImpl *) cast_chk(self->actionMenuView_, [ASActionMenuViewImpl class])))) getOverFlowButtonWidget];
    if (overFlowButton != nil && self->overflowIcon_ != nil) {
      [overFlowButton setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"ImageView", @"src") withId:self->overflowIcon_ withBoolean:false];
    }
    [((id<ASIWidget>) nil_chk(self->actionMenuView_)) initialized];
  }
}

void ASToolbarImpl_setOnMenuItemClickListenerWithNSString_withId_(ASToolbarImpl *self, NSString *strValue, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onMenuItemClickListener_ = new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(self, strValue);
  }
  else {
    self->onMenuItemClickListener_ = (id<ADXToolbar_OnMenuItemClickListener>) cast_check(objValue, ADXToolbar_OnMenuItemClickListener_class_());
  }
}

void ASToolbarImpl_setOverflowIconWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToolbarImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  self->overflowIcon_ = strValue;
  id<ASIWidget> overFlowButton = [((ASActionMenuViewImpl *) nil_chk(((ASActionMenuViewImpl *) cast_chk(self->actionMenuView_, [ASActionMenuViewImpl class])))) getOverFlowButtonWidget];
  if (overFlowButton != nil && self->overflowIcon_ != nil) {
    [overFlowButton setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"ImageView", @"src") withId:objValue withBoolean:true];
  }
  if ([self isInitialised]) {
    [((id<ASIWidget>) nil_chk(overFlowButton)) requestLayout];
  }
}

void ASToolbarImpl_setGravityWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setMaxButtonHeightWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setMaxButtonHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setButtonGravityWithId_(ASToolbarImpl *self, id objValue) {
  self->mButtonGravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
}

void ASToolbarImpl_handlePreMeasureWithId_(ASToolbarImpl *self, id payload) {
  jint currentScreenWidth = ASPluginInvoker_getScreenWidth();
  if (self->screenWidth_ != -1 && self->screenWidth_ != currentScreenWidth) {
    ASToolbarImpl_createMenu(self);
  }
  self->screenWidth_ = currentScreenWidth;
}

void ASToolbarImpl_setContentInsetEndWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setContentInsetsRelativeWithInt:[self->toolbar_ getContentInsetStart] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setContentInsetStartWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setContentInsetsRelativeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[self->toolbar_ getContentInsetEnd]];
}

void ASToolbarImpl_setTitleMarginWithId_(ASToolbarImpl *self, id objValue) {
  [((ADXToolbar *) nil_chk(self->toolbar_)) setTitleMarginWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASToolbarImpl_setNavigationOnClickListenerWithASToolbarImpl_OnClickListener_(ASToolbarImpl *self, ASToolbarImpl_OnClickListener *onClickListener) {
  if (self->navigationIcon_ != nil) {
    ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(self->navigationIcon_, @"onclick", [self->navigationIcon_ asNativeWidget], onClickListener);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl)

@implementation ASToolbarImpl_PreMeasureHandler

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$
                         withNSString:(NSString *)type {
  ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASToolbarImpl_handlePreMeasureWithId_(this$0_, payload);
}

- (void)__javaClone:(ASToolbarImpl_PreMeasureHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToolbarImpl;LNSString;", "doPerform", "LNSObject;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_PreMeasureHandler = { "PreMeasureHandler", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASToolbarImpl_PreMeasureHandler;
}

@end

void ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(ASToolbarImpl_PreMeasureHandler *self, ASToolbarImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASToolbarImpl_PreMeasureHandler *new_ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(ASToolbarImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_PreMeasureHandler, initWithASToolbarImpl_withNSString_, outer$, type)
}

ASToolbarImpl_PreMeasureHandler *create_ASToolbarImpl_PreMeasureHandler_initWithASToolbarImpl_withNSString_(ASToolbarImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_PreMeasureHandler, initWithASToolbarImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_PreMeasureHandler)

@implementation ASToolbarImpl_ToolbarExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASToolbarImpl_ToolbarExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASToolbarImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASToolbarImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASToolbarImpl_ToolbarExt = { "ToolbarExt", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASToolbarImpl_ToolbarExt;
}

@end

void ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(ASToolbarImpl_ToolbarExt *self, ASToolbarImpl *outer$) {
  self->this$0_ = outer$;
  ADXToolbar_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASToolbarImpl_ToolbarExt *new_ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_ToolbarExt, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_ToolbarExt *create_ASToolbarImpl_ToolbarExt_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_ToolbarExt, initWithASToolbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_ToolbarExt)

@implementation ASToolbarImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_OnClickListener = { "OnClickListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASToolbarImpl_OnClickListener;
}

@end

void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASToolbarImpl_OnClickListener *new_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASToolbarImpl_OnClickListener *create_ASToolbarImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_OnClickListener)

@implementation ASToolbarImpl_OnMenuItemClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onMenuItemClickWithADMenuItem:(id<ADMenuItem>)item {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onMenuItemClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onMenuItemClick"];
    id<JavaUtilMap> obj = [self getOnMenuItemClickEventObjWithADMenuItem:item];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ item } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return result;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnMenuItemClickEventObjWithADMenuItem:(id<ADMenuItem>)item {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"menuitemclick"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASViewImpl_addEventInfoWithJavaUtilMap_withADMenuItem_(obj, item);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onMenuItemClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onMenuItemClickWithADMenuItem:);
  methods[4].selector = @selector(getOnMenuItemClickEventObjWithADMenuItem:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onMenuItemClick", "LADMenuItem;", "getOnMenuItemClickEventObj", "(Lr/android/view/MenuItem;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_OnMenuItemClickListener = { "OnMenuItemClickListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASToolbarImpl_OnMenuItemClickListener;
}

@end

void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(ASToolbarImpl_OnMenuItemClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASToolbarImpl_OnMenuItemClickListener *new_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASToolbarImpl_OnMenuItemClickListener *create_ASToolbarImpl_OnMenuItemClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_OnMenuItemClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_OnMenuItemClickListener)

@implementation ASToolbarImpl_ToolbarCommandBuilder

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_ToolbarCommandBuilder_initWithASToolbarImpl_(self, outer$);
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"title"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setSubtitleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"subtitle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setSubtitleTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"subtitleTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setLogoWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"logo"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setNavigationIconWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"navigationIcon"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setOverflowIconWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"overflowIcon"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setOnNavigationIconClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onNavigationIconClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setOnMenuItemClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onMenuItemClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleMarginWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleMargin"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleMarginStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleMarginStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleMarginEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleMarginEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleMarginTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleMarginTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleMarginBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleMarginBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setTitleMarginsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"titleMargins"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setContentInsetStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentInsetStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setContentInsetEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentInsetEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setContentInsetLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentInsetLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setContentInsetRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentInsetRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setContentInsetStartWithNavigationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentInsetStartWithNavigation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setContentInsetEndWithActionsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentInsetEndWithActions"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setMaxButtonHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxButtonHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setButtonGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"buttonGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToolbarImpl_ToolbarCommandBuilder *)setMenuWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"menu"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LASToolbarImpl_ToolbarCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setTitleWithNSString:);
  methods[3].selector = @selector(setTitleTextColorWithNSString:);
  methods[4].selector = @selector(setSubtitleWithNSString:);
  methods[5].selector = @selector(setSubtitleTextColorWithNSString:);
  methods[6].selector = @selector(setLogoWithNSString:);
  methods[7].selector = @selector(setNavigationIconWithNSString:);
  methods[8].selector = @selector(setOverflowIconWithNSString:);
  methods[9].selector = @selector(setOnNavigationIconClickWithNSString:);
  methods[10].selector = @selector(setOnMenuItemClickWithNSString:);
  methods[11].selector = @selector(setGravityWithNSString:);
  methods[12].selector = @selector(setTitleMarginWithNSString:);
  methods[13].selector = @selector(setTitleMarginStartWithNSString:);
  methods[14].selector = @selector(setTitleMarginEndWithNSString:);
  methods[15].selector = @selector(setTitleMarginTopWithNSString:);
  methods[16].selector = @selector(setTitleMarginBottomWithNSString:);
  methods[17].selector = @selector(setTitleMarginsWithNSString:);
  methods[18].selector = @selector(setContentInsetStartWithNSString:);
  methods[19].selector = @selector(setContentInsetEndWithNSString:);
  methods[20].selector = @selector(setContentInsetLeftWithNSString:);
  methods[21].selector = @selector(setContentInsetRightWithNSString:);
  methods[22].selector = @selector(setContentInsetStartWithNavigationWithNSString:);
  methods[23].selector = @selector(setContentInsetEndWithActionsWithNSString:);
  methods[24].selector = @selector(setMaxButtonHeightWithNSString:);
  methods[25].selector = @selector(setButtonGravityWithNSString:);
  methods[26].selector = @selector(setMenuWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToolbarImpl;", "execute", "Z", "setTitle", "LNSString;", "setTitleTextColor", "setSubtitle", "setSubtitleTextColor", "setLogo", "setNavigationIcon", "setOverflowIcon", "setOnNavigationIconClick", "setOnMenuItemClick", "setGravity", "setTitleMargin", "setTitleMarginStart", "setTitleMarginEnd", "setTitleMarginTop", "setTitleMarginBottom", "setTitleMargins", "setContentInsetStart", "setContentInsetEnd", "setContentInsetLeft", "setContentInsetRight", "setContentInsetStartWithNavigation", "setContentInsetEndWithActions", "setMaxButtonHeight", "setButtonGravity", "setMenu", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/toolbar/ToolbarImpl$ToolbarCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASToolbarImpl_ToolbarCommandBuilder = { "ToolbarCommandBuilder", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 27, 1, 0, -1, -1, 29, -1 };
  return &_ASToolbarImpl_ToolbarCommandBuilder;
}

@end

void ASToolbarImpl_ToolbarCommandBuilder_initWithASToolbarImpl_(ASToolbarImpl_ToolbarCommandBuilder *self, ASToolbarImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASToolbarImpl_ToolbarCommandBuilder *new_ASToolbarImpl_ToolbarCommandBuilder_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_ToolbarCommandBuilder, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_ToolbarCommandBuilder *create_ASToolbarImpl_ToolbarCommandBuilder_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_ToolbarCommandBuilder, initWithASToolbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_ToolbarCommandBuilder)

@implementation ASToolbarImpl_ToolbarBean

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_ToolbarBean_initWithASToolbarImpl_(self, outer$);
  return self;
}

- (void)setTitleWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleTextColorWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setSubtitleWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSubtitleWithNSString:value])) executeWithBoolean:true];
}

- (void)setSubtitleTextColorWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSubtitleTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setLogoWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLogoWithNSString:value])) executeWithBoolean:true];
}

- (void)setNavigationIconWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setNavigationIconWithNSString:value])) executeWithBoolean:true];
}

- (void)setOverflowIconWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOverflowIconWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnNavigationIconClickWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnNavigationIconClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnMenuItemClickWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnMenuItemClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleMarginWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleMarginWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleMarginStartWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleMarginStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleMarginEndWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleMarginEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleMarginTopWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleMarginTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleMarginBottomWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleMarginBottomWithNSString:value])) executeWithBoolean:true];
}

- (void)setTitleMarginsWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTitleMarginsWithNSString:value])) executeWithBoolean:true];
}

- (void)setContentInsetStartWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setContentInsetStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setContentInsetEndWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setContentInsetEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setContentInsetLeftWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setContentInsetLeftWithNSString:value])) executeWithBoolean:true];
}

- (void)setContentInsetRightWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setContentInsetRightWithNSString:value])) executeWithBoolean:true];
}

- (void)setContentInsetStartWithNavigationWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setContentInsetStartWithNavigationWithNSString:value])) executeWithBoolean:true];
}

- (void)setContentInsetEndWithActionsWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setContentInsetEndWithActionsWithNSString:value])) executeWithBoolean:true];
}

- (void)setMaxButtonHeightWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxButtonHeightWithNSString:value])) executeWithBoolean:true];
}

- (void)setButtonGravityWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setButtonGravityWithNSString:value])) executeWithBoolean:true];
}

- (void)setMenuWithNSString:(NSString *)value {
  (void) [((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([((ASToolbarImpl_ToolbarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMenuWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:);
  methods[1].selector = @selector(setTitleWithNSString:);
  methods[2].selector = @selector(setTitleTextColorWithNSString:);
  methods[3].selector = @selector(setSubtitleWithNSString:);
  methods[4].selector = @selector(setSubtitleTextColorWithNSString:);
  methods[5].selector = @selector(setLogoWithNSString:);
  methods[6].selector = @selector(setNavigationIconWithNSString:);
  methods[7].selector = @selector(setOverflowIconWithNSString:);
  methods[8].selector = @selector(setOnNavigationIconClickWithNSString:);
  methods[9].selector = @selector(setOnMenuItemClickWithNSString:);
  methods[10].selector = @selector(setGravityWithNSString:);
  methods[11].selector = @selector(setTitleMarginWithNSString:);
  methods[12].selector = @selector(setTitleMarginStartWithNSString:);
  methods[13].selector = @selector(setTitleMarginEndWithNSString:);
  methods[14].selector = @selector(setTitleMarginTopWithNSString:);
  methods[15].selector = @selector(setTitleMarginBottomWithNSString:);
  methods[16].selector = @selector(setTitleMarginsWithNSString:);
  methods[17].selector = @selector(setContentInsetStartWithNSString:);
  methods[18].selector = @selector(setContentInsetEndWithNSString:);
  methods[19].selector = @selector(setContentInsetLeftWithNSString:);
  methods[20].selector = @selector(setContentInsetRightWithNSString:);
  methods[21].selector = @selector(setContentInsetStartWithNavigationWithNSString:);
  methods[22].selector = @selector(setContentInsetEndWithActionsWithNSString:);
  methods[23].selector = @selector(setMaxButtonHeightWithNSString:);
  methods[24].selector = @selector(setButtonGravityWithNSString:);
  methods[25].selector = @selector(setMenuWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToolbarImpl;", "setTitle", "LNSString;", "setTitleTextColor", "setSubtitle", "setSubtitleTextColor", "setLogo", "setNavigationIcon", "setOverflowIcon", "setOnNavigationIconClick", "setOnMenuItemClick", "setGravity", "setTitleMargin", "setTitleMarginStart", "setTitleMarginEnd", "setTitleMarginTop", "setTitleMarginBottom", "setTitleMargins", "setContentInsetStart", "setContentInsetEnd", "setContentInsetLeft", "setContentInsetRight", "setContentInsetStartWithNavigation", "setContentInsetEndWithActions", "setMaxButtonHeight", "setButtonGravity", "setMenu" };
  static const J2ObjcClassInfo _ASToolbarImpl_ToolbarBean = { "ToolbarBean", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 26, 1, 0, -1, -1, -1, -1 };
  return &_ASToolbarImpl_ToolbarBean;
}

@end

void ASToolbarImpl_ToolbarBean_initWithASToolbarImpl_(ASToolbarImpl_ToolbarBean *self, ASToolbarImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASToolbarImpl_ToolbarBean *new_ASToolbarImpl_ToolbarBean_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_ToolbarBean, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_ToolbarBean *create_ASToolbarImpl_ToolbarBean_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_ToolbarBean, initWithASToolbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_ToolbarBean)

@implementation ASToolbarImpl_ToolbarParamsBean

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_ToolbarParamsBean_initWithASToolbarImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASToolbarImpl;" };
  static const J2ObjcClassInfo _ASToolbarImpl_ToolbarParamsBean = { "ToolbarParamsBean", "com.ashera.toolbar", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASToolbarImpl_ToolbarParamsBean;
}

@end

void ASToolbarImpl_ToolbarParamsBean_initWithASToolbarImpl_(ASToolbarImpl_ToolbarParamsBean *self, ASToolbarImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASToolbarImpl_ToolbarParamsBean *new_ASToolbarImpl_ToolbarParamsBean_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_ToolbarParamsBean, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_ToolbarParamsBean *create_ASToolbarImpl_ToolbarParamsBean_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_ToolbarParamsBean, initWithASToolbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_ToolbarParamsBean)

@implementation ASToolbarImpl_ToolbarCommandParamsBuilder

- (instancetype)initWithASToolbarImpl:(ASToolbarImpl *)outer$ {
  ASToolbarImpl_ToolbarCommandParamsBuilder_initWithASToolbarImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToolbarImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASToolbarImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/toolbar/ToolbarImpl$ToolbarCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASToolbarImpl_ToolbarCommandParamsBuilder = { "ToolbarCommandParamsBuilder", "com.ashera.toolbar", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASToolbarImpl_ToolbarCommandParamsBuilder;
}

@end

void ASToolbarImpl_ToolbarCommandParamsBuilder_initWithASToolbarImpl_(ASToolbarImpl_ToolbarCommandParamsBuilder *self, ASToolbarImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASToolbarImpl_ToolbarCommandParamsBuilder *new_ASToolbarImpl_ToolbarCommandParamsBuilder_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToolbarImpl_ToolbarCommandParamsBuilder, initWithASToolbarImpl_, outer$)
}

ASToolbarImpl_ToolbarCommandParamsBuilder *create_ASToolbarImpl_ToolbarCommandParamsBuilder_initWithASToolbarImpl_(ASToolbarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToolbarImpl_ToolbarCommandParamsBuilder, initWithASToolbarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToolbarImpl_ToolbarCommandParamsBuilder)
