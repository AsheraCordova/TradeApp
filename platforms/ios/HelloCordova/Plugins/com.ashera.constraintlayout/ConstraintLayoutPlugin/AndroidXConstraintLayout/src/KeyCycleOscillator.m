//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\KeyCycleOscillator.java
//

#include "CurveFit.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyCycleOscillator.h"
#include "MotionWidget.h"
#include "Oscillator.h"
#include "TypedValues.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/text/DecimalFormat.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADXKeyCycleOscillator () {
 @public
  ADXCurveFit *mCurveFit_;
  ADXKeyCycleOscillator_CycleOscillator *mCycleOscillator_;
  NSString *mType_;
  jint mWaveShape_;
  NSString *mWaveString_;
}

@end

J2OBJC_FIELD_SETTER(ADXKeyCycleOscillator, mCurveFit_, ADXCurveFit *)
J2OBJC_FIELD_SETTER(ADXKeyCycleOscillator, mCycleOscillator_, ADXKeyCycleOscillator_CycleOscillator *)
J2OBJC_FIELD_SETTER(ADXKeyCycleOscillator, mType_, NSString *)
J2OBJC_FIELD_SETTER(ADXKeyCycleOscillator, mWaveString_, NSString *)

inline NSString *ADXKeyCycleOscillator_get_TAG(void);
static NSString *ADXKeyCycleOscillator_TAG = @"KeyCycleOscillator";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyCycleOscillator, TAG, NSString *)

@interface ADXKeyCycleOscillator_CoreSpline : ADXKeyCycleOscillator {
 @public
  NSString *type_;
  jint typeId_;
}

- (instancetype)initWithNSString:(NSString *)str;

- (void)setPropertyWithADXMotionWidget:(ADXMotionWidget *)widget
                             withFloat:(jfloat)t;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyCycleOscillator_CoreSpline)

J2OBJC_FIELD_SETTER(ADXKeyCycleOscillator_CoreSpline, type_, NSString *)

__attribute__((unused)) static void ADXKeyCycleOscillator_CoreSpline_initWithNSString_(ADXKeyCycleOscillator_CoreSpline *self, NSString *str);

__attribute__((unused)) static ADXKeyCycleOscillator_CoreSpline *new_ADXKeyCycleOscillator_CoreSpline_initWithNSString_(NSString *str) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyCycleOscillator_CoreSpline *create_ADXKeyCycleOscillator_CoreSpline_initWithNSString_(NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(ADXKeyCycleOscillator_CoreSpline)

@interface ADXKeyCycleOscillator_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(ADXKeyCycleOscillator_WavePoint *)lhs
               withId:(ADXKeyCycleOscillator_WavePoint *)rhs;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyCycleOscillator_1)

__attribute__((unused)) static void ADXKeyCycleOscillator_1_init(ADXKeyCycleOscillator_1 *self);

__attribute__((unused)) static ADXKeyCycleOscillator_1 *new_ADXKeyCycleOscillator_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyCycleOscillator_1 *create_ADXKeyCycleOscillator_1_init(void);

@interface ADXKeyCycleOscillator_IntDoubleSort : NSObject

- (instancetype)init;

+ (void)sortWithIntArray:(IOSIntArray *)key
          withFloatArray:(IOSFloatArray *)value
                 withInt:(jint)low
                 withInt:(jint)hi;

+ (jint)partitionWithIntArray:(IOSIntArray *)array
               withFloatArray:(IOSFloatArray *)value
                      withInt:(jint)low
                      withInt:(jint)hi;

+ (void)swapWithIntArray:(IOSIntArray *)array
          withFloatArray:(IOSFloatArray *)value
                 withInt:(jint)a
                 withInt:(jint)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyCycleOscillator_IntDoubleSort)

__attribute__((unused)) static void ADXKeyCycleOscillator_IntDoubleSort_init(ADXKeyCycleOscillator_IntDoubleSort *self);

__attribute__((unused)) static ADXKeyCycleOscillator_IntDoubleSort *new_ADXKeyCycleOscillator_IntDoubleSort_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyCycleOscillator_IntDoubleSort *create_ADXKeyCycleOscillator_IntDoubleSort_init(void);

__attribute__((unused)) static void ADXKeyCycleOscillator_IntDoubleSort_sortWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *key, IOSFloatArray *value, jint low, jint hi);

__attribute__((unused)) static jint ADXKeyCycleOscillator_IntDoubleSort_partitionWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint low, jint hi);

__attribute__((unused)) static void ADXKeyCycleOscillator_IntDoubleSort_swapWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint a, jint b);

J2OBJC_TYPE_LITERAL_HEADER(ADXKeyCycleOscillator_IntDoubleSort)

@interface ADXKeyCycleOscillator_IntFloatFloatSort : NSObject

- (instancetype)init;

+ (void)sortWithIntArray:(IOSIntArray *)key
          withFloatArray:(IOSFloatArray *)value1
          withFloatArray:(IOSFloatArray *)value2
                 withInt:(jint)low
                 withInt:(jint)hi;

+ (jint)partitionWithIntArray:(IOSIntArray *)array
               withFloatArray:(IOSFloatArray *)value1
               withFloatArray:(IOSFloatArray *)value2
                      withInt:(jint)low
                      withInt:(jint)hi;

+ (void)swapWithIntArray:(IOSIntArray *)array
          withFloatArray:(IOSFloatArray *)value1
          withFloatArray:(IOSFloatArray *)value2
                 withInt:(jint)a
                 withInt:(jint)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXKeyCycleOscillator_IntFloatFloatSort)

__attribute__((unused)) static void ADXKeyCycleOscillator_IntFloatFloatSort_init(ADXKeyCycleOscillator_IntFloatFloatSort *self);

__attribute__((unused)) static ADXKeyCycleOscillator_IntFloatFloatSort *new_ADXKeyCycleOscillator_IntFloatFloatSort_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXKeyCycleOscillator_IntFloatFloatSort *create_ADXKeyCycleOscillator_IntFloatFloatSort_init(void);

__attribute__((unused)) static void ADXKeyCycleOscillator_IntFloatFloatSort_sortWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(IOSIntArray *key, IOSFloatArray *value1, IOSFloatArray *value2, jint low, jint hi);

__attribute__((unused)) static jint ADXKeyCycleOscillator_IntFloatFloatSort_partitionWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value1, IOSFloatArray *value2, jint low, jint hi);

__attribute__((unused)) static void ADXKeyCycleOscillator_IntFloatFloatSort_swapWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value1, IOSFloatArray *value2, jint a, jint b);

J2OBJC_TYPE_LITERAL_HEADER(ADXKeyCycleOscillator_IntFloatFloatSort)

@interface ADXKeyCycleOscillator_CycleOscillator () {
 @public
  jint mVariesBy_;
}

@end

inline NSString *ADXKeyCycleOscillator_CycleOscillator_get_TAG(void);
static NSString *ADXKeyCycleOscillator_CycleOscillator_TAG = @"CycleOscillator";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXKeyCycleOscillator_CycleOscillator, TAG, NSString *)

inline jint ADXKeyCycleOscillator_CycleOscillator_get_OFFST(void);
#define ADXKeyCycleOscillator_CycleOscillator_OFFST 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXKeyCycleOscillator_CycleOscillator, OFFST, jint)

inline jint ADXKeyCycleOscillator_CycleOscillator_get_PHASE(void);
#define ADXKeyCycleOscillator_CycleOscillator_PHASE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXKeyCycleOscillator_CycleOscillator, PHASE, jint)

inline jint ADXKeyCycleOscillator_CycleOscillator_get_VALUE(void);
#define ADXKeyCycleOscillator_CycleOscillator_VALUE 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXKeyCycleOscillator_CycleOscillator, VALUE, jint)

@implementation ADXKeyCycleOscillator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyCycleOscillator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADXKeyCycleOscillator *)makeWidgetCycleWithNSString:(NSString *)attribute {
  return ADXKeyCycleOscillator_makeWidgetCycleWithNSString_(attribute);
}

- (jboolean)variesByPath {
  return mVariesBy_ == 1;
}

- (NSString *)description {
  NSString *str = JreRetainedLocalValue(mType_);
  JavaTextDecimalFormat *df = create_JavaTextDecimalFormat_initWithNSString_(@"##.##");
  for (ADXKeyCycleOscillator_WavePoint * __strong wp in nil_chk(mWavePoints_)) {
    JreStrAppend(&str, "CI$$$", '[', ((ADXKeyCycleOscillator_WavePoint *) nil_chk(wp))->mPosition_, @" , ", [df formatWithDouble:wp->mValue_], @"] ");
  }
  return str;
}

- (void)setTypeWithNSString:(NSString *)type {
  JreStrongAssign(&mType_, type);
}

- (jfloat)getWithFloat:(jfloat)t {
  return (jfloat) [((ADXKeyCycleOscillator_CycleOscillator *) nil_chk(mCycleOscillator_)) getValuesWithFloat:t];
}

- (jfloat)getSlopeWithFloat:(jfloat)position {
  return (jfloat) [((ADXKeyCycleOscillator_CycleOscillator *) nil_chk(mCycleOscillator_)) getSlopeWithFloat:position];
}

- (ADXCurveFit *)getCurveFit {
  return mCurveFit_;
}

- (void)setCustomWithId:(id)custom {
}

- (void)setPointWithInt:(jint)framePosition
                withInt:(jint)shape
           withNSString:(NSString *)waveString
                withInt:(jint)variesBy
              withFloat:(jfloat)period
              withFloat:(jfloat)offset
              withFloat:(jfloat)phase
              withFloat:(jfloat)value
                 withId:(id)custom {
  [((JavaUtilArrayList *) nil_chk(mWavePoints_)) addWithId:create_ADXKeyCycleOscillator_WavePoint_initWithInt_withFloat_withFloat_withFloat_withFloat_(framePosition, period, offset, phase, value)];
  if (variesBy != -1) {
    mVariesBy_ = variesBy;
  }
  mWaveShape_ = shape;
  [self setCustomWithId:custom];
  JreStrongAssign(&mWaveString_, waveString);
}

- (void)setPointWithInt:(jint)framePosition
                withInt:(jint)shape
           withNSString:(NSString *)waveString
                withInt:(jint)variesBy
              withFloat:(jfloat)period
              withFloat:(jfloat)offset
              withFloat:(jfloat)phase
              withFloat:(jfloat)value {
  [((JavaUtilArrayList *) nil_chk(mWavePoints_)) addWithId:create_ADXKeyCycleOscillator_WavePoint_initWithInt_withFloat_withFloat_withFloat_withFloat_(framePosition, period, offset, phase, value)];
  if (variesBy != -1) {
    mVariesBy_ = variesBy;
  }
  mWaveShape_ = shape;
  JreStrongAssign(&mWaveString_, waveString);
}

- (void)setupWithFloat:(jfloat)pathLength {
  jint count = [((JavaUtilArrayList *) nil_chk(mWavePoints_)) size];
  if (count == 0) {
    return;
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(mWavePoints_, create_ADXKeyCycleOscillator_1_init());
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:count];
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ count, 3 }];
  JreStrongAssignAndConsume(&mCycleOscillator_, new_ADXKeyCycleOscillator_CycleOscillator_initWithInt_withNSString_withInt_withInt_(mWaveShape_, mWaveString_, mVariesBy_, count));
  jint i = 0;
  for (ADXKeyCycleOscillator_WavePoint * __strong wp in nil_chk(mWavePoints_)) {
    *IOSDoubleArray_GetRef(time, i) = ((ADXKeyCycleOscillator_WavePoint *) nil_chk(wp))->mPeriod_ * 1E-2;
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), 0) = wp->mValue_;
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), 1) = wp->mOffset_;
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), 2) = wp->mPhase_;
    [((ADXKeyCycleOscillator_CycleOscillator *) nil_chk(mCycleOscillator_)) setPointWithInt:i withInt:wp->mPosition_ withFloat:wp->mPeriod_ withFloat:wp->mOffset_ withFloat:wp->mPhase_ withFloat:wp->mValue_];
    i++;
  }
  [mCycleOscillator_ setupWithFloat:pathLength];
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(ADXCurveFit_SPLINE, time, values));
}

- (void)setPropertyWithADXMotionWidget:(ADXMotionWidget *)widget
                             withFloat:(jfloat)t {
}

- (void)dealloc {
  RELEASE_(mCurveFit_);
  RELEASE_(mCycleOscillator_);
  RELEASE_(mType_);
  RELEASE_(mWaveString_);
  RELEASE_(mWavePoints_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXKeyCycleOscillator;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LADXCurveFit;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(makeWidgetCycleWithNSString:);
  methods[2].selector = @selector(variesByPath);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(setTypeWithNSString:);
  methods[5].selector = @selector(getWithFloat:);
  methods[6].selector = @selector(getSlopeWithFloat:);
  methods[7].selector = @selector(getCurveFit);
  methods[8].selector = @selector(setCustomWithId:);
  methods[9].selector = @selector(setPointWithInt:withInt:withNSString:withInt:withFloat:withFloat:withFloat:withFloat:withId:);
  methods[10].selector = @selector(setPointWithInt:withInt:withNSString:withInt:withFloat:withFloat:withFloat:withFloat:);
  methods[11].selector = @selector(setupWithFloat:);
  methods[12].selector = @selector(setPropertyWithADXMotionWidget:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 15, -1, -1 },
    { "mCurveFit_", "LADXCurveFit;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCycleOscillator_", "LADXKeyCycleOscillator_CycleOscillator;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWaveShape_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWaveString_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVariesBy_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWavePoints_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 16, -1 },
  };
  static const void *ptrTable[] = { "makeWidgetCycle", "LNSString;", "toString", "setType", "get", "F", "getSlope", "setCustom", "LNSObject;", "setPoint", "IILNSString;IFFFFLNSObject;", "IILNSString;IFFFF", "setup", "setProperty", "LADXMotionWidget;F", &ADXKeyCycleOscillator_TAG, "Ljava/util/ArrayList<Landroidx/constraintlayout/core/motion/utils/KeyCycleOscillator$WavePoint;>;", "LADXKeyCycleOscillator_CoreSpline;LADXKeyCycleOscillator_PathRotateSet;LADXKeyCycleOscillator_WavePoint;LADXKeyCycleOscillator_IntDoubleSort;LADXKeyCycleOscillator_IntFloatFloatSort;LADXKeyCycleOscillator_CycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator = { "KeyCycleOscillator", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x401, 13, 8, -1, 17, -1, -1, -1 };
  return &_ADXKeyCycleOscillator;
}

@end

void ADXKeyCycleOscillator_init(ADXKeyCycleOscillator *self) {
  NSObject_init(self);
  self->mWaveShape_ = 0;
  JreStrongAssign(&self->mWaveString_, nil);
  self->mVariesBy_ = 0;
  JreStrongAssignAndConsume(&self->mWavePoints_, new_JavaUtilArrayList_init());
}

ADXKeyCycleOscillator *ADXKeyCycleOscillator_makeWidgetCycleWithNSString_(NSString *attribute) {
  ADXKeyCycleOscillator_initialize();
  if ([((NSString *) nil_chk(attribute)) isEqual:ADXTypedValues_Attributes_S_PATH_ROTATE]) {
    return create_ADXKeyCycleOscillator_PathRotateSet_initWithNSString_(attribute);
  }
  return create_ADXKeyCycleOscillator_CoreSpline_initWithNSString_(attribute);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator)

@implementation ADXKeyCycleOscillator_CoreSpline

- (instancetype)initWithNSString:(NSString *)str {
  ADXKeyCycleOscillator_CoreSpline_initWithNSString_(self, str);
  return self;
}

- (void)setPropertyWithADXMotionWidget:(ADXMotionWidget *)widget
                             withFloat:(jfloat)t {
  [((ADXMotionWidget *) nil_chk(widget)) setValueWithInt:typeId_ withFloat:[self getWithFloat:t]];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(setPropertyWithADXMotionWidget:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "typeId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setProperty", "LADXMotionWidget;F", "LADXKeyCycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_CoreSpline = { "CoreSpline", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0xa, 2, 2, 3, -1, -1, -1, -1 };
  return &_ADXKeyCycleOscillator_CoreSpline;
}

@end

void ADXKeyCycleOscillator_CoreSpline_initWithNSString_(ADXKeyCycleOscillator_CoreSpline *self, NSString *str) {
  ADXKeyCycleOscillator_init(self);
  JreStrongAssign(&self->type_, str);
  self->typeId_ = ADXTypedValues_Cycle_getIdWithNSString_(self->type_);
}

ADXKeyCycleOscillator_CoreSpline *new_ADXKeyCycleOscillator_CoreSpline_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_CoreSpline, initWithNSString_, str)
}

ADXKeyCycleOscillator_CoreSpline *create_ADXKeyCycleOscillator_CoreSpline_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_CoreSpline, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator_CoreSpline)

@implementation ADXKeyCycleOscillator_PathRotateSet

- (instancetype)initWithNSString:(NSString *)str {
  ADXKeyCycleOscillator_PathRotateSet_initWithNSString_(self, str);
  return self;
}

- (void)setPropertyWithADXMotionWidget:(ADXMotionWidget *)widget
                             withFloat:(jfloat)t {
  [((ADXMotionWidget *) nil_chk(widget)) setValueWithInt:typeId_ withFloat:[self getWithFloat:t]];
}

- (void)setPathRotateWithADXMotionWidget:(ADXMotionWidget *)view
                               withFloat:(jfloat)t
                              withDouble:(jdouble)dx
                              withDouble:(jdouble)dy {
  [((ADXMotionWidget *) nil_chk(view)) setRotationZWithFloat:[self getWithFloat:t] + (jfloat) JavaLangMath_toDegreesWithDouble_(JavaLangMath_atan2WithDouble_withDouble_(dy, dx))];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(setPropertyWithADXMotionWidget:withFloat:);
  methods[2].selector = @selector(setPathRotateWithADXMotionWidget:withFloat:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "typeId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "setProperty", "LADXMotionWidget;F", "setPathRotate", "LADXMotionWidget;FDD", "LADXKeyCycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_PathRotateSet = { "PathRotateSet", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 3, 2, 5, -1, -1, -1, -1 };
  return &_ADXKeyCycleOscillator_PathRotateSet;
}

@end

void ADXKeyCycleOscillator_PathRotateSet_initWithNSString_(ADXKeyCycleOscillator_PathRotateSet *self, NSString *str) {
  ADXKeyCycleOscillator_init(self);
  JreStrongAssign(&self->type_, str);
  self->typeId_ = ADXTypedValues_Cycle_getIdWithNSString_(self->type_);
}

ADXKeyCycleOscillator_PathRotateSet *new_ADXKeyCycleOscillator_PathRotateSet_initWithNSString_(NSString *str) {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_PathRotateSet, initWithNSString_, str)
}

ADXKeyCycleOscillator_PathRotateSet *create_ADXKeyCycleOscillator_PathRotateSet_initWithNSString_(NSString *str) {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_PathRotateSet, initWithNSString_, str)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator_PathRotateSet)

@implementation ADXKeyCycleOscillator_WavePoint

- (instancetype)initWithInt:(jint)position
                  withFloat:(jfloat)period
                  withFloat:(jfloat)offset
                  withFloat:(jfloat)phase
                  withFloat:(jfloat)value {
  ADXKeyCycleOscillator_WavePoint_initWithInt_withFloat_withFloat_withFloat_withFloat_(self, position, period, offset, phase, value);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withFloat:withFloat:withFloat:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValue_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOffset_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPeriod_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPhase_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IFFFF", "LADXKeyCycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_WavePoint = { "WavePoint", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x8, 1, 5, 1, -1, -1, -1, -1 };
  return &_ADXKeyCycleOscillator_WavePoint;
}

@end

void ADXKeyCycleOscillator_WavePoint_initWithInt_withFloat_withFloat_withFloat_withFloat_(ADXKeyCycleOscillator_WavePoint *self, jint position, jfloat period, jfloat offset, jfloat phase, jfloat value) {
  NSObject_init(self);
  self->mPosition_ = position;
  self->mValue_ = value;
  self->mOffset_ = offset;
  self->mPeriod_ = period;
  self->mPhase_ = phase;
}

ADXKeyCycleOscillator_WavePoint *new_ADXKeyCycleOscillator_WavePoint_initWithInt_withFloat_withFloat_withFloat_withFloat_(jint position, jfloat period, jfloat offset, jfloat phase, jfloat value) {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_WavePoint, initWithInt_withFloat_withFloat_withFloat_withFloat_, position, period, offset, phase, value)
}

ADXKeyCycleOscillator_WavePoint *create_ADXKeyCycleOscillator_WavePoint_initWithInt_withFloat_withFloat_withFloat_withFloat_(jint position, jfloat period, jfloat offset, jfloat phase, jfloat value) {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_WavePoint, initWithInt_withFloat_withFloat_withFloat_withFloat_, position, period, offset, phase, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator_WavePoint)

@implementation ADXKeyCycleOscillator_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyCycleOscillator_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(ADXKeyCycleOscillator_WavePoint *)lhs
               withId:(ADXKeyCycleOscillator_WavePoint *)rhs {
  return JavaLangInteger_compareWithInt_withInt_(((ADXKeyCycleOscillator_WavePoint *) nil_chk(lhs))->mPosition_, ((ADXKeyCycleOscillator_WavePoint *) nil_chk(rhs))->mPosition_);
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LADXKeyCycleOscillator_WavePoint;LADXKeyCycleOscillator_WavePoint;", "LADXKeyCycleOscillator;", "setupWithFloat:", "Ljava/lang/Object;Ljava/util/Comparator<Landroidx/constraintlayout/core/motion/utils/KeyCycleOscillator$WavePoint;>;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_1 = { "", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, 4, -1 };
  return &_ADXKeyCycleOscillator_1;
}

@end

void ADXKeyCycleOscillator_1_init(ADXKeyCycleOscillator_1 *self) {
  NSObject_init(self);
}

ADXKeyCycleOscillator_1 *new_ADXKeyCycleOscillator_1_init() {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_1, init)
}

ADXKeyCycleOscillator_1 *create_ADXKeyCycleOscillator_1_init() {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_1, init)
}

@implementation ADXKeyCycleOscillator_IntDoubleSort

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyCycleOscillator_IntDoubleSort_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)sortWithIntArray:(IOSIntArray *)key
          withFloatArray:(IOSFloatArray *)value
                 withInt:(jint)low
                 withInt:(jint)hi {
  ADXKeyCycleOscillator_IntDoubleSort_sortWithIntArray_withFloatArray_withInt_withInt_(key, value, low, hi);
}

+ (jint)partitionWithIntArray:(IOSIntArray *)array
               withFloatArray:(IOSFloatArray *)value
                      withInt:(jint)low
                      withInt:(jint)hi {
  return ADXKeyCycleOscillator_IntDoubleSort_partitionWithIntArray_withFloatArray_withInt_withInt_(array, value, low, hi);
}

+ (void)swapWithIntArray:(IOSIntArray *)array
          withFloatArray:(IOSFloatArray *)value
                 withInt:(jint)a
                 withInt:(jint)b {
  ADXKeyCycleOscillator_IntDoubleSort_swapWithIntArray_withFloatArray_withInt_withInt_(array, value, a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sortWithIntArray:withFloatArray:withInt:withInt:);
  methods[2].selector = @selector(partitionWithIntArray:withFloatArray:withInt:withInt:);
  methods[3].selector = @selector(swapWithIntArray:withFloatArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "sort", "[I[FII", "partition", "swap", "LADXKeyCycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_IntDoubleSort = { "IntDoubleSort", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0xa, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXKeyCycleOscillator_IntDoubleSort;
}

@end

void ADXKeyCycleOscillator_IntDoubleSort_init(ADXKeyCycleOscillator_IntDoubleSort *self) {
  NSObject_init(self);
}

ADXKeyCycleOscillator_IntDoubleSort *new_ADXKeyCycleOscillator_IntDoubleSort_init() {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_IntDoubleSort, init)
}

ADXKeyCycleOscillator_IntDoubleSort *create_ADXKeyCycleOscillator_IntDoubleSort_init() {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_IntDoubleSort, init)
}

void ADXKeyCycleOscillator_IntDoubleSort_sortWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *key, IOSFloatArray *value, jint low, jint hi) {
  ADXKeyCycleOscillator_IntDoubleSort_initialize();
  IOSIntArray *stack = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(key))->size_ + 10];
  jint count = 0;
  *IOSIntArray_GetRef(stack, count++) = hi;
  *IOSIntArray_GetRef(stack, count++) = low;
  while (count > 0) {
    low = IOSIntArray_Get(stack, --count);
    hi = IOSIntArray_Get(stack, --count);
    if (low < hi) {
      jint p = ADXKeyCycleOscillator_IntDoubleSort_partitionWithIntArray_withFloatArray_withInt_withInt_(key, value, low, hi);
      *IOSIntArray_GetRef(stack, count++) = p - 1;
      *IOSIntArray_GetRef(stack, count++) = low;
      *IOSIntArray_GetRef(stack, count++) = hi;
      *IOSIntArray_GetRef(stack, count++) = p + 1;
    }
  }
}

jint ADXKeyCycleOscillator_IntDoubleSort_partitionWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint low, jint hi) {
  ADXKeyCycleOscillator_IntDoubleSort_initialize();
  jint pivot = IOSIntArray_Get(nil_chk(array), hi);
  jint i = low;
  for (jint j = low; j < hi; j++) {
    if (IOSIntArray_Get(array, j) <= pivot) {
      ADXKeyCycleOscillator_IntDoubleSort_swapWithIntArray_withFloatArray_withInt_withInt_(array, value, i, j);
      i++;
    }
  }
  ADXKeyCycleOscillator_IntDoubleSort_swapWithIntArray_withFloatArray_withInt_withInt_(array, value, i, hi);
  return i;
}

void ADXKeyCycleOscillator_IntDoubleSort_swapWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint a, jint b) {
  ADXKeyCycleOscillator_IntDoubleSort_initialize();
  jint tmp = IOSIntArray_Get(nil_chk(array), a);
  *IOSIntArray_GetRef(array, a) = IOSIntArray_Get(array, b);
  *IOSIntArray_GetRef(array, b) = tmp;
  jfloat tmpv = IOSFloatArray_Get(nil_chk(value), a);
  *IOSFloatArray_GetRef(value, a) = IOSFloatArray_Get(value, b);
  *IOSFloatArray_GetRef(value, b) = tmpv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator_IntDoubleSort)

@implementation ADXKeyCycleOscillator_IntFloatFloatSort

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyCycleOscillator_IntFloatFloatSort_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)sortWithIntArray:(IOSIntArray *)key
          withFloatArray:(IOSFloatArray *)value1
          withFloatArray:(IOSFloatArray *)value2
                 withInt:(jint)low
                 withInt:(jint)hi {
  ADXKeyCycleOscillator_IntFloatFloatSort_sortWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(key, value1, value2, low, hi);
}

+ (jint)partitionWithIntArray:(IOSIntArray *)array
               withFloatArray:(IOSFloatArray *)value1
               withFloatArray:(IOSFloatArray *)value2
                      withInt:(jint)low
                      withInt:(jint)hi {
  return ADXKeyCycleOscillator_IntFloatFloatSort_partitionWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(array, value1, value2, low, hi);
}

+ (void)swapWithIntArray:(IOSIntArray *)array
          withFloatArray:(IOSFloatArray *)value1
          withFloatArray:(IOSFloatArray *)value2
                 withInt:(jint)a
                 withInt:(jint)b {
  ADXKeyCycleOscillator_IntFloatFloatSort_swapWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(array, value1, value2, a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(sortWithIntArray:withFloatArray:withFloatArray:withInt:withInt:);
  methods[2].selector = @selector(partitionWithIntArray:withFloatArray:withFloatArray:withInt:withInt:);
  methods[3].selector = @selector(swapWithIntArray:withFloatArray:withFloatArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "sort", "[I[F[FII", "partition", "swap", "LADXKeyCycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_IntFloatFloatSort = { "IntFloatFloatSort", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0xa, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXKeyCycleOscillator_IntFloatFloatSort;
}

@end

void ADXKeyCycleOscillator_IntFloatFloatSort_init(ADXKeyCycleOscillator_IntFloatFloatSort *self) {
  NSObject_init(self);
}

ADXKeyCycleOscillator_IntFloatFloatSort *new_ADXKeyCycleOscillator_IntFloatFloatSort_init() {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_IntFloatFloatSort, init)
}

ADXKeyCycleOscillator_IntFloatFloatSort *create_ADXKeyCycleOscillator_IntFloatFloatSort_init() {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_IntFloatFloatSort, init)
}

void ADXKeyCycleOscillator_IntFloatFloatSort_sortWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(IOSIntArray *key, IOSFloatArray *value1, IOSFloatArray *value2, jint low, jint hi) {
  ADXKeyCycleOscillator_IntFloatFloatSort_initialize();
  IOSIntArray *stack = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(key))->size_ + 10];
  jint count = 0;
  *IOSIntArray_GetRef(stack, count++) = hi;
  *IOSIntArray_GetRef(stack, count++) = low;
  while (count > 0) {
    low = IOSIntArray_Get(stack, --count);
    hi = IOSIntArray_Get(stack, --count);
    if (low < hi) {
      jint p = ADXKeyCycleOscillator_IntFloatFloatSort_partitionWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(key, value1, value2, low, hi);
      *IOSIntArray_GetRef(stack, count++) = p - 1;
      *IOSIntArray_GetRef(stack, count++) = low;
      *IOSIntArray_GetRef(stack, count++) = hi;
      *IOSIntArray_GetRef(stack, count++) = p + 1;
    }
  }
}

jint ADXKeyCycleOscillator_IntFloatFloatSort_partitionWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value1, IOSFloatArray *value2, jint low, jint hi) {
  ADXKeyCycleOscillator_IntFloatFloatSort_initialize();
  jint pivot = IOSIntArray_Get(nil_chk(array), hi);
  jint i = low;
  for (jint j = low; j < hi; j++) {
    if (IOSIntArray_Get(array, j) <= pivot) {
      ADXKeyCycleOscillator_IntFloatFloatSort_swapWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(array, value1, value2, i, j);
      i++;
    }
  }
  ADXKeyCycleOscillator_IntFloatFloatSort_swapWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(array, value1, value2, i, hi);
  return i;
}

void ADXKeyCycleOscillator_IntFloatFloatSort_swapWithIntArray_withFloatArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value1, IOSFloatArray *value2, jint a, jint b) {
  ADXKeyCycleOscillator_IntFloatFloatSort_initialize();
  jint tmp = IOSIntArray_Get(nil_chk(array), a);
  *IOSIntArray_GetRef(array, a) = IOSIntArray_Get(array, b);
  *IOSIntArray_GetRef(array, b) = tmp;
  jfloat tmpFloat = IOSFloatArray_Get(nil_chk(value1), a);
  *IOSFloatArray_GetRef(value1, a) = IOSFloatArray_Get(value1, b);
  *IOSFloatArray_GetRef(value1, b) = tmpFloat;
  tmpFloat = IOSFloatArray_Get(nil_chk(value2), a);
  *IOSFloatArray_GetRef(value2, a) = IOSFloatArray_Get(value2, b);
  *IOSFloatArray_GetRef(value2, b) = tmpFloat;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator_IntFloatFloatSort)

@implementation ADXKeyCycleOscillator_CycleOscillator

- (instancetype)initWithInt:(jint)waveShape
               withNSString:(NSString *)customShape
                    withInt:(jint)variesBy
                    withInt:(jint)steps {
  ADXKeyCycleOscillator_CycleOscillator_initWithInt_withNSString_withInt_withInt_(self, waveShape, customShape, variesBy, steps);
  return self;
}

- (jdouble)getValuesWithFloat:(jfloat)time {
  if (mCurveFit_ != nil) {
    [mCurveFit_ getPosWithDouble:time withDoubleArray:mSplineValueCache_];
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(mSplineValueCache_), ADXKeyCycleOscillator_CycleOscillator_OFFST) = IOSFloatArray_Get(nil_chk(mOffset_), 0);
    *IOSDoubleArray_GetRef(mSplineValueCache_, ADXKeyCycleOscillator_CycleOscillator_PHASE) = IOSFloatArray_Get(nil_chk(mPhase_), 0);
    *IOSDoubleArray_GetRef(mSplineValueCache_, ADXKeyCycleOscillator_CycleOscillator_VALUE) = IOSFloatArray_Get(nil_chk(mValues_), 0);
  }
  jdouble offset = IOSDoubleArray_Get(nil_chk(mSplineValueCache_), ADXKeyCycleOscillator_CycleOscillator_OFFST);
  jdouble phase = IOSDoubleArray_Get(mSplineValueCache_, ADXKeyCycleOscillator_CycleOscillator_PHASE);
  jdouble waveValue = [((ADXOscillator *) nil_chk(mOscillator_)) getValueWithDouble:time withDouble:phase];
  return offset + waveValue * IOSDoubleArray_Get(nil_chk(mSplineValueCache_), ADXKeyCycleOscillator_CycleOscillator_VALUE);
}

- (jdouble)getLastPhase {
  return IOSDoubleArray_Get(nil_chk(mSplineValueCache_), 1);
}

- (jdouble)getSlopeWithFloat:(jfloat)time {
  if (mCurveFit_ != nil) {
    [mCurveFit_ getSlopeWithDouble:time withDoubleArray:mSplineSlopeCache_];
    [((ADXCurveFit *) nil_chk(mCurveFit_)) getPosWithDouble:time withDoubleArray:mSplineValueCache_];
  }
  else {
    *IOSDoubleArray_GetRef(nil_chk(mSplineSlopeCache_), ADXKeyCycleOscillator_CycleOscillator_OFFST) = 0;
    *IOSDoubleArray_GetRef(mSplineSlopeCache_, ADXKeyCycleOscillator_CycleOscillator_PHASE) = 0;
    *IOSDoubleArray_GetRef(mSplineSlopeCache_, ADXKeyCycleOscillator_CycleOscillator_VALUE) = 0;
  }
  jdouble waveValue = [((ADXOscillator *) nil_chk(mOscillator_)) getValueWithDouble:time withDouble:IOSDoubleArray_Get(nil_chk(mSplineValueCache_), ADXKeyCycleOscillator_CycleOscillator_PHASE)];
  jdouble waveSlope = [((ADXOscillator *) nil_chk(mOscillator_)) getSlopeWithDouble:time withDouble:IOSDoubleArray_Get(nil_chk(mSplineValueCache_), ADXKeyCycleOscillator_CycleOscillator_PHASE) withDouble:IOSDoubleArray_Get(nil_chk(mSplineSlopeCache_), ADXKeyCycleOscillator_CycleOscillator_PHASE)];
  return IOSDoubleArray_Get(nil_chk(mSplineSlopeCache_), ADXKeyCycleOscillator_CycleOscillator_OFFST) + waveValue * IOSDoubleArray_Get(mSplineSlopeCache_, ADXKeyCycleOscillator_CycleOscillator_VALUE) + waveSlope * IOSDoubleArray_Get(nil_chk(mSplineValueCache_), ADXKeyCycleOscillator_CycleOscillator_VALUE);
}

- (void)setPointWithInt:(jint)index
                withInt:(jint)framePosition
              withFloat:(jfloat)wavePeriod
              withFloat:(jfloat)offset
              withFloat:(jfloat)phase
              withFloat:(jfloat)values {
  *IOSDoubleArray_GetRef(nil_chk(mPosition_), index) = framePosition / 100.0;
  *IOSFloatArray_GetRef(nil_chk(mPeriod_), index) = wavePeriod;
  *IOSFloatArray_GetRef(nil_chk(mOffset_), index) = offset;
  *IOSFloatArray_GetRef(nil_chk(mPhase_), index) = phase;
  *IOSFloatArray_GetRef(nil_chk(mValues_), index) = values;
}

- (void)setupWithFloat:(jfloat)pathLength {
  mPathLength_ = pathLength;
  IOSObjectArray *splineValues = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ ((IOSDoubleArray *) nil_chk(mPosition_))->size_, 3 }];
  JreStrongAssignAndConsume(&mSplineValueCache_, [IOSDoubleArray newArrayWithLength:2 + ((IOSFloatArray *) nil_chk(mValues_))->size_]);
  JreStrongAssignAndConsume(&mSplineSlopeCache_, [IOSDoubleArray newArrayWithLength:2 + mValues_->size_]);
  if (IOSDoubleArray_Get(mPosition_, 0) > 0) {
    [((ADXOscillator *) nil_chk(mOscillator_)) addPointWithDouble:0 withFloat:IOSFloatArray_Get(nil_chk(mPeriod_), 0)];
  }
  jint last = ((IOSDoubleArray *) nil_chk(mPosition_))->size_ - 1;
  if (IOSDoubleArray_Get(mPosition_, last) < 1.0f) {
    [((ADXOscillator *) nil_chk(mOscillator_)) addPointWithDouble:1 withFloat:IOSFloatArray_Get(nil_chk(mPeriod_), last)];
  }
  for (jint i = 0; i < splineValues->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(splineValues, i)), ADXKeyCycleOscillator_CycleOscillator_OFFST) = IOSFloatArray_Get(nil_chk(mOffset_), i);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(splineValues, i)), ADXKeyCycleOscillator_CycleOscillator_PHASE) = IOSFloatArray_Get(nil_chk(mPhase_), i);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(splineValues, i)), ADXKeyCycleOscillator_CycleOscillator_VALUE) = IOSFloatArray_Get(nil_chk(mValues_), i);
    [((ADXOscillator *) nil_chk(mOscillator_)) addPointWithDouble:IOSDoubleArray_Get(nil_chk(mPosition_), i) withFloat:IOSFloatArray_Get(nil_chk(mPeriod_), i)];
  }
  [((ADXOscillator *) nil_chk(mOscillator_)) normalize];
  if (((IOSDoubleArray *) nil_chk(mPosition_))->size_ > 1) {
    JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(ADXCurveFit_SPLINE, mPosition_, splineValues));
  }
  else {
    JreStrongAssign(&mCurveFit_, nil);
  }
}

- (void)dealloc {
  RELEASE_(mOscillator_);
  RELEASE_(mValues_);
  RELEASE_(mPosition_);
  RELEASE_(mPeriod_);
  RELEASE_(mOffset_);
  RELEASE_(mPhase_);
  RELEASE_(mScale_);
  RELEASE_(mCurveFit_);
  RELEASE_(mSplineValueCache_);
  RELEASE_(mSplineSlopeCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withNSString:withInt:withInt:);
  methods[1].selector = @selector(getValuesWithFloat:);
  methods[2].selector = @selector(getLastPhase);
  methods[3].selector = @selector(getSlopeWithFloat:);
  methods[4].selector = @selector(setPointWithInt:withInt:withFloat:withFloat:withFloat:withFloat:);
  methods[5].selector = @selector(setupWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSET", "I", .constantValue.asInt = ADXKeyCycleOscillator_CycleOscillator_UNSET, 0x18, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "mVariesBy_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOscillator_", "LADXOscillator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "OFFST", "I", .constantValue.asInt = ADXKeyCycleOscillator_CycleOscillator_OFFST, 0x12, 8, -1, -1, -1 },
    { "PHASE", "I", .constantValue.asInt = ADXKeyCycleOscillator_CycleOscillator_PHASE, 0x12, 9, -1, -1, -1 },
    { "VALUE", "I", .constantValue.asInt = ADXKeyCycleOscillator_CycleOscillator_VALUE, 0x12, 10, -1, -1, -1 },
    { "mValues_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPosition_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPeriod_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOffset_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPhase_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mScale_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWaveShape_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurveFit_", "LADXCurveFit;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSplineValueCache_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSplineSlopeCache_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPathLength_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ILNSString;II", "getValues", "F", "getSlope", "setPoint", "IIFFFF", "setup", &ADXKeyCycleOscillator_CycleOscillator_TAG, "OFFST", "PHASE", "VALUE", "LADXKeyCycleOscillator;" };
  static const J2ObjcClassInfo _ADXKeyCycleOscillator_CycleOscillator = { "CycleOscillator", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x8, 6, 18, 11, -1, -1, -1, -1 };
  return &_ADXKeyCycleOscillator_CycleOscillator;
}

@end

void ADXKeyCycleOscillator_CycleOscillator_initWithInt_withNSString_withInt_withInt_(ADXKeyCycleOscillator_CycleOscillator *self, jint waveShape, NSString *customShape, jint variesBy, jint steps) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mOscillator_, new_ADXOscillator_init());
  self->mWaveShape_ = waveShape;
  self->mVariesBy_ = variesBy;
  [self->mOscillator_ setTypeWithInt:waveShape withNSString:customShape];
  JreStrongAssignAndConsume(&self->mValues_, [IOSFloatArray newArrayWithLength:steps]);
  JreStrongAssignAndConsume(&self->mPosition_, [IOSDoubleArray newArrayWithLength:steps]);
  JreStrongAssignAndConsume(&self->mPeriod_, [IOSFloatArray newArrayWithLength:steps]);
  JreStrongAssignAndConsume(&self->mOffset_, [IOSFloatArray newArrayWithLength:steps]);
  JreStrongAssignAndConsume(&self->mPhase_, [IOSFloatArray newArrayWithLength:steps]);
  JreStrongAssignAndConsume(&self->mScale_, [IOSFloatArray newArrayWithLength:steps]);
}

ADXKeyCycleOscillator_CycleOscillator *new_ADXKeyCycleOscillator_CycleOscillator_initWithInt_withNSString_withInt_withInt_(jint waveShape, NSString *customShape, jint variesBy, jint steps) {
  J2OBJC_NEW_IMPL(ADXKeyCycleOscillator_CycleOscillator, initWithInt_withNSString_withInt_withInt_, waveShape, customShape, variesBy, steps)
}

ADXKeyCycleOscillator_CycleOscillator *create_ADXKeyCycleOscillator_CycleOscillator_initWithInt_withNSString_withInt_withInt_(jint waveShape, NSString *customShape, jint variesBy, jint steps) {
  J2OBJC_CREATE_IMPL(ADXKeyCycleOscillator_CycleOscillator, initWithInt_withNSString_withInt_withInt_, waveShape, customShape, variesBy, steps)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCycleOscillator_CycleOscillator)
