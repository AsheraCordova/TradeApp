//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\AdapterHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_AdapterHelper")
#ifdef RESTRICT_AdapterHelper
#define INCLUDE_ALL_AdapterHelper 0
#else
#define INCLUDE_ALL_AdapterHelper 1
#endif
#undef RESTRICT_AdapterHelper

#if !defined (ADXAdapterHelper_) && (INCLUDE_ALL_AdapterHelper || defined(INCLUDE_ADXAdapterHelper))
#define ADXAdapterHelper_

#define RESTRICT_OpReorderer 1
#define INCLUDE_ADXOpReorderer_Callback 1
#include "OpReorderer.h"

@class ADXAdapterHelper_UpdateOp;
@class ADXOpReorderer;
@class IOSObjectArray;
@class JavaUtilArrayList;
@protocol ADXAdapterHelper_Callback;
@protocol JavaLangRunnable;
@protocol JavaUtilList;

/*!
 @brief Helper class that can enqueue and process adapter update operations.
 <p>
  To support animations, RecyclerView presents an older version the Adapter to best represent
  previous state of the layout. Sometimes, this is not trivial when items are removed that were
  not laid out, in which case, RecyclerView has no way of providing that item's view for
  animations. 
 <p>
  AdapterHelper creates an UpdateOp for each adapter data change then pre-processes them. During
  pre processing, AdapterHelper finds out which UpdateOps can be deferred to second layout pass
  and which cannot. For the UpdateOps that cannot be deferred, AdapterHelper will change them
  according to previously deferred operation and dispatch them before the first layout pass. It
  also takes care of updating deferred UpdateOps since order of operations is changed by this
  process. 
 <p>
  Although operations may be forwarded to LayoutManager in different orders, resulting data set
  is guaranteed to be the consistent.
 */
@interface ADXAdapterHelper : NSObject < ADXOpReorderer_Callback > {
 @public
  JavaUtilArrayList *mPendingUpdates_;
  JavaUtilArrayList *mPostponedList_;
  id<ADXAdapterHelper_Callback> mCallback_;
  id<JavaLangRunnable> mOnItemProcessedCallback_;
  jboolean mDisableRecycler_;
  ADXOpReorderer *mOpReorderer_;
}

#pragma mark Public

- (jint)applyPendingUpdatesToPositionWithInt:(jint)position;

- (ADXAdapterHelper_UpdateOp *)obtainUpdateOpWithInt:(jint)cmd
                                             withInt:(jint)positionStart
                                             withInt:(jint)itemCount
                                              withId:(id)payload;

- (void)recycleUpdateOpWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithADXAdapterHelper_Callback:(id<ADXAdapterHelper_Callback>)callback;

- (instancetype)initPackagePrivateWithADXAdapterHelper_Callback:(id<ADXAdapterHelper_Callback>)callback
                                                    withBoolean:(jboolean)disableRecycler;

- (ADXAdapterHelper *)addUpdateOpWithADXAdapterHelper_UpdateOpArray:(IOSObjectArray *)ops;

- (void)consumePostponedUpdates;

/*!
 @brief Skips pre-processing and applies all updates in one pass.
 */
- (void)consumeUpdatesInOnePass;

- (void)dispatchFirstPassAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op
                                                                   withInt:(jint)offsetStart;

- (jint)findPositionOffsetWithInt:(jint)position;

- (jint)findPositionOffsetWithInt:(jint)position
                          withInt:(jint)firstPostponedItem;

- (jboolean)hasAnyUpdateTypesWithInt:(jint)updateTypes;

- (jboolean)hasPendingUpdates;

- (jboolean)hasUpdates;

/*!
 @return True if updates should be processed.
 */
- (jboolean)onItemRangeChangedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payload;

/*!
 @return True if updates should be processed.
 */
- (jboolean)onItemRangeInsertedWithInt:(jint)positionStart
                               withInt:(jint)itemCount;

/*!
 @return True if updates should be processed.
 */
- (jboolean)onItemRangeMovedWithInt:(jint)from
                            withInt:(jint)to
                            withInt:(jint)itemCount;

/*!
 @return True if updates should be processed.
 */
- (jboolean)onItemRangeRemovedWithInt:(jint)positionStart
                              withInt:(jint)itemCount;

- (void)preProcess;

- (void)recycleUpdateOpsAndClearListWithJavaUtilList:(id<JavaUtilList>)ops;

- (void)reset;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXAdapterHelper)

J2OBJC_FIELD_SETTER(ADXAdapterHelper, mPendingUpdates_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXAdapterHelper, mPostponedList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXAdapterHelper, mCallback_, id<ADXAdapterHelper_Callback>)
J2OBJC_FIELD_SETTER(ADXAdapterHelper, mOnItemProcessedCallback_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ADXAdapterHelper, mOpReorderer_, ADXOpReorderer *)

inline jint ADXAdapterHelper_get_POSITION_TYPE_INVISIBLE(void);
#define ADXAdapterHelper_POSITION_TYPE_INVISIBLE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper, POSITION_TYPE_INVISIBLE, jint)

inline jint ADXAdapterHelper_get_POSITION_TYPE_NEW_OR_LAID_OUT(void);
#define ADXAdapterHelper_POSITION_TYPE_NEW_OR_LAID_OUT 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper, POSITION_TYPE_NEW_OR_LAID_OUT, jint)

FOUNDATION_EXPORT void ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(ADXAdapterHelper *self, id<ADXAdapterHelper_Callback> callback);

FOUNDATION_EXPORT ADXAdapterHelper *new_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(id<ADXAdapterHelper_Callback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXAdapterHelper *create_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(id<ADXAdapterHelper_Callback> callback);

FOUNDATION_EXPORT void ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(ADXAdapterHelper *self, id<ADXAdapterHelper_Callback> callback, jboolean disableRecycler);

FOUNDATION_EXPORT ADXAdapterHelper *new_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(id<ADXAdapterHelper_Callback> callback, jboolean disableRecycler) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXAdapterHelper *create_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(id<ADXAdapterHelper_Callback> callback, jboolean disableRecycler);

J2OBJC_TYPE_LITERAL_HEADER(ADXAdapterHelper)

@compatibility_alias AndroidxRecyclerviewWidgetAdapterHelper ADXAdapterHelper;

#endif

#if !defined (ADXAdapterHelper_UpdateOp_) && (INCLUDE_ALL_AdapterHelper || defined(INCLUDE_ADXAdapterHelper_UpdateOp))
#define ADXAdapterHelper_UpdateOp_

/*!
 @brief Queued operation to happen when child views are updated.
 */
@interface ADXAdapterHelper_UpdateOp : NSObject {
 @public
  jint cmd_;
  jint positionStart_;
  id payload_;
  jint itemCount_;
}

#pragma mark Public

- (jboolean)isEqual:(id)o;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithInt:(jint)cmd
                    withInt:(jint)positionStart
                    withInt:(jint)itemCount
                     withId:(id)payload;

- (NSString *)cmdToString;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXAdapterHelper_UpdateOp)

J2OBJC_FIELD_SETTER(ADXAdapterHelper_UpdateOp, payload_, id)

inline jint ADXAdapterHelper_UpdateOp_get_ADD(void);
#define ADXAdapterHelper_UpdateOp_ADD 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper_UpdateOp, ADD, jint)

inline jint ADXAdapterHelper_UpdateOp_get_REMOVE(void);
#define ADXAdapterHelper_UpdateOp_REMOVE 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper_UpdateOp, REMOVE, jint)

inline jint ADXAdapterHelper_UpdateOp_get_UPDATE(void);
#define ADXAdapterHelper_UpdateOp_UPDATE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper_UpdateOp, UPDATE, jint)

inline jint ADXAdapterHelper_UpdateOp_get_MOVE(void);
#define ADXAdapterHelper_UpdateOp_MOVE 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper_UpdateOp, MOVE, jint)

inline jint ADXAdapterHelper_UpdateOp_get_POOL_SIZE(void);
#define ADXAdapterHelper_UpdateOp_POOL_SIZE 30
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper_UpdateOp, POOL_SIZE, jint)

FOUNDATION_EXPORT void ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(ADXAdapterHelper_UpdateOp *self, jint cmd, jint positionStart, jint itemCount, id payload);

FOUNDATION_EXPORT ADXAdapterHelper_UpdateOp *new_ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(jint cmd, jint positionStart, jint itemCount, id payload) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXAdapterHelper_UpdateOp *create_ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(jint cmd, jint positionStart, jint itemCount, id payload);

J2OBJC_TYPE_LITERAL_HEADER(ADXAdapterHelper_UpdateOp)

#endif

#if !defined (ADXAdapterHelper_Callback_) && (INCLUDE_ALL_AdapterHelper || defined(INCLUDE_ADXAdapterHelper_Callback))
#define ADXAdapterHelper_Callback_

@class ADXAdapterHelper_UpdateOp;
@class ADXRecyclerView_ViewHolder;

/*!
 @brief Contract between AdapterHelper and RecyclerView.
 */
@protocol ADXAdapterHelper_Callback < JavaObject >

- (ADXRecyclerView_ViewHolder *)findViewHolderWithInt:(jint)position;

- (void)offsetPositionsForRemovingInvisibleWithInt:(jint)positionStart
                                           withInt:(jint)itemCount;

- (void)offsetPositionsForRemovingLaidOutOrNewViewWithInt:(jint)positionStart
                                                  withInt:(jint)itemCount;

- (void)markViewHoldersUpdatedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payloads;

- (void)onDispatchFirstPassWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)updateOp;

- (void)onDispatchSecondPassWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)updateOp;

- (void)offsetPositionsForAddWithInt:(jint)positionStart
                             withInt:(jint)itemCount;

- (void)offsetPositionsForMoveWithInt:(jint)from
                              withInt:(jint)to;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXAdapterHelper_Callback)

J2OBJC_TYPE_LITERAL_HEADER(ADXAdapterHelper_Callback)

#endif

#pragma pop_macro("INCLUDE_ALL_AdapterHelper")
