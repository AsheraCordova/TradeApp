//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\LinearSystem.java
//

#include "ArrayRow.h"
#include "CLPools.h"
#include "Cache.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "Metrics.h"
#include "PriorityGoalRow.h"
#include "SolverVariable.h"
#include "SolverVariableValues.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"

@class JavaUtilHashMap;


@interface ADXLinearSystem () {
 @public
  JavaUtilHashMap *mVariables_;
  id<ADXLinearSystem_Row> mGoal_;
  jint TABLE_SIZE_;
  jint mMaxColumns_;
  IOSBooleanArray *mAlreadyTestedCandidates_;
  jint mMaxRows_;
  IOSObjectArray *mPoolVariables_;
  jint mPoolVariablesCount_;
  id<ADXLinearSystem_Row> mTempGoal_;
}

/*!
 @brief Reallocate memory to accommodate increased amount of variables
 */
- (void)increaseTableSize;

/*!
 @brief Release ArrayRows back to their pool
 */
- (void)releaseRows;

- (void)addErrorWithADXArrayRow:(ADXArrayRow *)row;

- (void)addSingleErrorWithADXArrayRow:(ADXArrayRow *)row
                              withInt:(jint)sign;

- (ADXSolverVariable *)createVariableWithNSString:(NSString *)name
                       withADXSolverVariable_Type:(ADXSolverVariable_Type *)type;

/*!
 @brief Returns a SolverVariable instance of the given type
 @param type type of the SolverVariable
 @return instance of SolverVariable
 */
- (ADXSolverVariable *)acquireSolverVariableWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                                                          withNSString:(NSString *)prefix;

- (void)addRowWithADXArrayRow:(ADXArrayRow *)row;

/*!
 @brief Optimize the system given a goal to minimize.The system should be in BFS form.
 @param goal goal to optimize.
 @param b
 @return number of iterations.
 */
- (jint)optimizeWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)goal
                            withBoolean:(jboolean)b;

/*!
 @brief Make sure that the system is in Basic Feasible Solved form (BFS).
 @param goal the row representing the system goal
 @return number of iterations
 */
- (jint)enforceBFSWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)goal;

- (void)computeValues;

- (void)displayRows;

- (void)displaySolverVariables;

- (NSString *)getDisplaySizeWithInt:(jint)n;

- (NSString *)getDisplayStrengthWithInt:(jint)strength;

@end

J2OBJC_FIELD_SETTER(ADXLinearSystem, mVariables_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXLinearSystem, mGoal_, id<ADXLinearSystem_Row>)
J2OBJC_FIELD_SETTER(ADXLinearSystem, mAlreadyTestedCandidates_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(ADXLinearSystem, mPoolVariables_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXLinearSystem, mTempGoal_, id<ADXLinearSystem_Row>)

inline jboolean ADXLinearSystem_get_DEBUG_CONSTRAINTS(void);
#define ADXLinearSystem_DEBUG_CONSTRAINTS false
J2OBJC_STATIC_FIELD_CONSTANT(ADXLinearSystem, DEBUG_CONSTRAINTS, jboolean)

inline jint ADXLinearSystem_get_POOL_SIZE(void);
inline jint ADXLinearSystem_set_POOL_SIZE(jint value);
inline jint *ADXLinearSystem_getRef_POOL_SIZE(void);
static jint ADXLinearSystem_POOL_SIZE = 1000;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXLinearSystem, POOL_SIZE, jint)

__attribute__((unused)) static void ADXLinearSystem_increaseTableSize(ADXLinearSystem *self);

__attribute__((unused)) static void ADXLinearSystem_releaseRows(ADXLinearSystem *self);

__attribute__((unused)) static void ADXLinearSystem_addErrorWithADXArrayRow_(ADXLinearSystem *self, ADXArrayRow *row);

__attribute__((unused)) static void ADXLinearSystem_addSingleErrorWithADXArrayRow_withInt_(ADXLinearSystem *self, ADXArrayRow *row, jint sign);

__attribute__((unused)) static ADXSolverVariable *ADXLinearSystem_createVariableWithNSString_withADXSolverVariable_Type_(ADXLinearSystem *self, NSString *name, ADXSolverVariable_Type *type);

__attribute__((unused)) static ADXSolverVariable *ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(ADXLinearSystem *self, ADXSolverVariable_Type *type, NSString *prefix);

__attribute__((unused)) static void ADXLinearSystem_addRowWithADXArrayRow_(ADXLinearSystem *self, ADXArrayRow *row);

__attribute__((unused)) static jint ADXLinearSystem_optimizeWithADXLinearSystem_Row_withBoolean_(ADXLinearSystem *self, id<ADXLinearSystem_Row> goal, jboolean b);

__attribute__((unused)) static jint ADXLinearSystem_enforceBFSWithADXLinearSystem_Row_(ADXLinearSystem *self, id<ADXLinearSystem_Row> goal);

__attribute__((unused)) static void ADXLinearSystem_computeValues(ADXLinearSystem *self);

__attribute__((unused)) static void ADXLinearSystem_displayRows(ADXLinearSystem *self);

__attribute__((unused)) static void ADXLinearSystem_displaySolverVariables(ADXLinearSystem *self);

__attribute__((unused)) static NSString *ADXLinearSystem_getDisplaySizeWithInt_(ADXLinearSystem *self, jint n);

__attribute__((unused)) static NSString *ADXLinearSystem_getDisplayStrengthWithInt_(ADXLinearSystem *self, jint strength);

@interface ADXLinearSystem_Row : NSObject

@end

jboolean ADXLinearSystem_USE_DEPENDENCY_ORDERING = false;
jboolean ADXLinearSystem_USE_BASIC_SYNONYMS = true;
jboolean ADXLinearSystem_SIMPLIFY_SYNONYMS = true;
jboolean ADXLinearSystem_USE_SYNONYMS = true;
jboolean ADXLinearSystem_SKIP_COLUMNS = true;
jboolean ADXLinearSystem_OPTIMIZED_ENGINE = false;
ADXMetrics *ADXLinearSystem_sMetrics;
jlong ADXLinearSystem_ARRAY_ROW_CREATION = 0;
jlong ADXLinearSystem_OPTIMIZED_ARRAY_ROW_CREATION = 0;

@implementation ADXLinearSystem

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXLinearSystem_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)fillMetricsWithADXMetrics:(ADXMetrics *)metrics {
  JreStrongAssign(&ADXLinearSystem_sMetrics, metrics);
}

+ (ADXMetrics *)getMetrics {
  return ADXLinearSystem_getMetrics();
}

- (void)increaseTableSize {
  ADXLinearSystem_increaseTableSize(self);
}

- (void)releaseRows {
  ADXLinearSystem_releaseRows(self);
}

- (void)reset {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_))->size_; i++) {
    ADXSolverVariable *variable = IOSObjectArray_Get(mCache_->mIndexedVariables_, i);
    if (variable != nil) {
      [variable reset];
    }
  }
  [((id<ADXCLPools_Pool>) nil_chk(mCache_->solverVariablePool_)) releaseAllWithNSObjectArray:mPoolVariables_ withInt:mPoolVariablesCount_];
  mPoolVariablesCount_ = 0;
  JavaUtilArrays_fillWithNSObjectArray_withId_(mCache_->mIndexedVariables_, nil);
  if (mVariables_ != nil) {
    [mVariables_ clear];
  }
  mVariablesID_ = 0;
  [((id<ADXLinearSystem_Row>) nil_chk(mGoal_)) clear];
  mNumColumns_ = 1;
  for (jint i = 0; i < mNumRows_; i++) {
    if (IOSObjectArray_Get(nil_chk(mRows_), i) != nil) {
      ((ADXArrayRow *) nil_chk(IOSObjectArray_Get(mRows_, i)))->used_ = false;
    }
  }
  ADXLinearSystem_releaseRows(self);
  mNumRows_ = 0;
  if (ADXLinearSystem_OPTIMIZED_ENGINE) {
    JreStrongAssignAndConsume(&mTempGoal_, new_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(self, mCache_));
  }
  else {
    JreStrongAssignAndConsume(&mTempGoal_, new_ADXArrayRow_initWithADXCache_(mCache_));
  }
}

- (ADXSolverVariable *)createObjectVariableWithId:(id)anchor {
  if (anchor == nil) {
    return nil;
  }
  if (mNumColumns_ + 1 >= mMaxColumns_) {
    ADXLinearSystem_increaseTableSize(self);
  }
  ADXSolverVariable *variable = nil;
  if ([anchor isKindOfClass:[ADXConstraintAnchor class]]) {
    variable = [((ADXConstraintAnchor *) anchor) getSolverVariable];
    if (variable == nil) {
      [((ADXConstraintAnchor *) anchor) resetSolverVariableWithADXCache:mCache_];
      variable = [((ADXConstraintAnchor *) anchor) getSolverVariable];
    }
    if (((ADXSolverVariable *) nil_chk(variable))->id__ == -1 || variable->id__ > mVariablesID_ || IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), variable->id__) == nil) {
      if (variable->id__ != -1) {
        [variable reset];
      }
      mVariablesID_++;
      mNumColumns_++;
      variable->id__ = mVariablesID_;
      JreStrongAssign(&variable->mType_, JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED));
      IOSObjectArray_Set(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), mVariablesID_, variable);
    }
  }
  return variable;
}

- (ADXArrayRow *)createRow {
  ADXArrayRow *row;
  if (ADXLinearSystem_OPTIMIZED_ENGINE) {
    row = [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->optimizedArrayRowPool_)) acquire];
    if (row == nil) {
      row = create_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(self, mCache_);
      ADXLinearSystem_OPTIMIZED_ARRAY_ROW_CREATION++;
    }
    else {
      [row reset];
    }
  }
  else {
    row = [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->arrayRowPool_)) acquire];
    if (row == nil) {
      row = create_ADXArrayRow_initWithADXCache_(mCache_);
      ADXLinearSystem_ARRAY_ROW_CREATION++;
    }
    else {
      [row reset];
    }
  }
  ADXSolverVariable_increaseErrorId();
  return row;
}

- (ADXSolverVariable *)createSlackVariable {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->slackvariables_++;
  }
  if (mNumColumns_ + 1 >= mMaxColumns_) {
    ADXLinearSystem_increaseTableSize(self);
  }
  ADXSolverVariable *variable = ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(self, JreLoadEnum(ADXSolverVariable_Type, SLACK), nil);
  mVariablesID_++;
  mNumColumns_++;
  ((ADXSolverVariable *) nil_chk(variable))->id__ = mVariablesID_;
  IOSObjectArray_Set(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), mVariablesID_, variable);
  return variable;
}

- (ADXSolverVariable *)createExtraVariable {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->extravariables_++;
  }
  if (mNumColumns_ + 1 >= mMaxColumns_) {
    ADXLinearSystem_increaseTableSize(self);
  }
  ADXSolverVariable *variable = ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(self, JreLoadEnum(ADXSolverVariable_Type, SLACK), nil);
  mVariablesID_++;
  mNumColumns_++;
  ((ADXSolverVariable *) nil_chk(variable))->id__ = mVariablesID_;
  IOSObjectArray_Set(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), mVariablesID_, variable);
  return variable;
}

- (void)addErrorWithADXArrayRow:(ADXArrayRow *)row {
  ADXLinearSystem_addErrorWithADXArrayRow_(self, row);
}

- (void)addSingleErrorWithADXArrayRow:(ADXArrayRow *)row
                              withInt:(jint)sign {
  ADXLinearSystem_addSingleErrorWithADXArrayRow_withInt_(self, row, sign);
}

- (void)addSingleErrorWithADXArrayRow:(ADXArrayRow *)row
                              withInt:(jint)sign
                              withInt:(jint)strength {
  NSString *prefix = nil;
  ADXSolverVariable *error = JreRetainedLocalValue([self createErrorVariableWithInt:strength withNSString:prefix]);
  [((ADXArrayRow *) nil_chk(row)) addSingleErrorWithADXSolverVariable:error withInt:sign];
}

- (ADXSolverVariable *)createVariableWithNSString:(NSString *)name
                       withADXSolverVariable_Type:(ADXSolverVariable_Type *)type {
  return ADXLinearSystem_createVariableWithNSString_withADXSolverVariable_Type_(self, name, type);
}

- (ADXSolverVariable *)createErrorVariableWithInt:(jint)strength
                                     withNSString:(NSString *)prefix {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->errors_++;
  }
  if (mNumColumns_ + 1 >= mMaxColumns_) {
    ADXLinearSystem_increaseTableSize(self);
  }
  ADXSolverVariable *variable = ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(self, JreLoadEnum(ADXSolverVariable_Type, ERROR), prefix);
  mVariablesID_++;
  mNumColumns_++;
  ((ADXSolverVariable *) nil_chk(variable))->id__ = mVariablesID_;
  variable->strength_ = strength;
  IOSObjectArray_Set(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), mVariablesID_, variable);
  [((id<ADXLinearSystem_Row>) nil_chk(mGoal_)) addErrorWithADXSolverVariable:variable];
  return variable;
}

- (ADXSolverVariable *)acquireSolverVariableWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                                                          withNSString:(NSString *)prefix {
  return ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(self, type, prefix);
}

- (id<ADXLinearSystem_Row>)getGoal {
  return mGoal_;
}

- (ADXArrayRow *)getRowWithInt:(jint)n {
  return IOSObjectArray_Get(nil_chk(mRows_), n);
}

- (jfloat)getValueForWithNSString:(NSString *)name {
  ADXSolverVariable *v = JreRetainedLocalValue([self getVariableWithNSString:name withADXSolverVariable_Type:JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED)]);
  if (v == nil) {
    return 0;
  }
  return v->computedValue_;
}

- (jint)getObjectVariableValueWithId:(id)object {
  ADXConstraintAnchor *anchor = (ADXConstraintAnchor *) cast_chk(object, [ADXConstraintAnchor class]);
  ADXSolverVariable *variable = JreRetainedLocalValue([((ADXConstraintAnchor *) nil_chk(anchor)) getSolverVariable]);
  if (variable != nil) {
    return JreFpToInt((variable->computedValue_ + 0.5f));
  }
  return 0;
}

- (ADXSolverVariable *)getVariableWithNSString:(NSString *)name
                    withADXSolverVariable_Type:(ADXSolverVariable_Type *)type {
  if (mVariables_ == nil) {
    JreStrongAssignAndConsume(&mVariables_, new_JavaUtilHashMap_init());
  }
  ADXSolverVariable *variable = JreRetainedLocalValue([mVariables_ getWithId:name]);
  if (variable == nil) {
    variable = ADXLinearSystem_createVariableWithNSString_withADXSolverVariable_Type_(self, name, type);
  }
  return variable;
}

- (void)minimize {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->minimize_++;
  }
  if ([((id<ADXLinearSystem_Row>) nil_chk(mGoal_)) isEmpty]) {
    ADXLinearSystem_computeValues(self);
    return;
  }
  if (graphOptimizer_ || newgraphOptimizer_) {
    if (ADXLinearSystem_sMetrics != nil) {
      ADXLinearSystem_sMetrics->graphOptimizer_++;
    }
    jboolean fullySolved = true;
    for (jint i = 0; i < mNumRows_; i++) {
      ADXArrayRow *r = IOSObjectArray_Get(nil_chk(mRows_), i);
      if (!((ADXArrayRow *) nil_chk(r))->isSimpleDefinition_) {
        fullySolved = false;
        break;
      }
    }
    if (!fullySolved) {
      [self minimizeGoalWithADXLinearSystem_Row:mGoal_];
    }
    else {
      if (ADXLinearSystem_sMetrics != nil) {
        ADXLinearSystem_sMetrics->fullySolved_++;
      }
      ADXLinearSystem_computeValues(self);
    }
  }
  else {
    [self minimizeGoalWithADXLinearSystem_Row:mGoal_];
  }
}

- (void)minimizeGoalWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)goal {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->minimizeGoal_++;
    ADXLinearSystem_sMetrics->maxVariables_ = JavaLangMath_maxWithLong_withLong_(ADXLinearSystem_sMetrics->maxVariables_, mNumColumns_);
    ((ADXMetrics *) nil_chk(ADXLinearSystem_sMetrics))->maxRows_ = JavaLangMath_maxWithLong_withLong_(ADXLinearSystem_sMetrics->maxRows_, mNumRows_);
  }
  ADXLinearSystem_enforceBFSWithADXLinearSystem_Row_(self, goal);
  ADXLinearSystem_optimizeWithADXLinearSystem_Row_withBoolean_(self, goal, false);
  ADXLinearSystem_computeValues(self);
}

- (void)cleanupRows {
  jint i = 0;
  while (i < mNumRows_) {
    ADXArrayRow *current = IOSObjectArray_Get(nil_chk(mRows_), i);
    if ([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(((ADXArrayRow *) nil_chk(current))->variables_)) getCurrentSize] == 0) {
      current->isSimpleDefinition_ = true;
    }
    if (current->isSimpleDefinition_) {
      ((ADXSolverVariable *) nil_chk(current->variable_))->computedValue_ = current->constantValue_;
      [current->variable_ removeFromRowWithADXArrayRow:current];
      for (jint j = i; j < mNumRows_ - 1; j++) {
        IOSObjectArray_Set(nil_chk(mRows_), j, IOSObjectArray_Get(mRows_, j + 1));
      }
      IOSObjectArray_Set(nil_chk(mRows_), mNumRows_ - 1, nil);
      mNumRows_--;
      i--;
      if (ADXLinearSystem_OPTIMIZED_ENGINE) {
        [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->optimizedArrayRowPool_)) release__WithId:current];
      }
      else {
        [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->arrayRowPool_)) release__WithId:current];
      }
    }
    i++;
  }
}

- (void)addConstraintWithADXArrayRow:(ADXArrayRow *)row {
  if (row == nil) {
    return;
  }
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->constraints_++;
    if (row->isSimpleDefinition_) {
      ADXLinearSystem_sMetrics->simpleconstraints_++;
    }
  }
  if (mNumRows_ + 1 >= mMaxRows_ || mNumColumns_ + 1 >= mMaxColumns_) {
    ADXLinearSystem_increaseTableSize(self);
  }
  jboolean added = false;
  if (!row->isSimpleDefinition_) {
    [row updateFromSystemWithADXLinearSystem:self];
    if ([row isEmpty]) {
      return;
    }
    [row ensurePositiveConstant];
    if ([row chooseSubjectWithADXLinearSystem:self]) {
      ADXSolverVariable *extra = JreRetainedLocalValue([self createExtraVariable]);
      row->variable_ = extra;
      jint numRows = mNumRows_;
      ADXLinearSystem_addRowWithADXArrayRow_(self, row);
      if (mNumRows_ == numRows + 1) {
        added = true;
        [((id<ADXLinearSystem_Row>) nil_chk(mTempGoal_)) initFromRowWithADXLinearSystem_Row:row];
        ADXLinearSystem_optimizeWithADXLinearSystem_Row_withBoolean_(self, mTempGoal_, true);
        if (((ADXSolverVariable *) nil_chk(extra))->definitionId_ == -1) {
          if (row->variable_ == extra) {
            ADXSolverVariable *pivotCandidate = JreRetainedLocalValue([row pickPivotWithADXSolverVariable:extra]);
            if (pivotCandidate != nil) {
              if (ADXLinearSystem_sMetrics != nil) {
                ADXLinearSystem_sMetrics->pivots_++;
              }
              [row pivotWithADXSolverVariable:pivotCandidate];
            }
          }
          if (!row->isSimpleDefinition_) {
            [((ADXSolverVariable *) nil_chk(row->variable_)) updateReferencesWithNewDefinitionWithADXLinearSystem:self withADXArrayRow:row];
          }
          if (ADXLinearSystem_OPTIMIZED_ENGINE) {
            [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->optimizedArrayRowPool_)) release__WithId:row];
          }
          else {
            [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->arrayRowPool_)) release__WithId:row];
          }
          mNumRows_--;
        }
      }
    }
    if (![row hasKeyVariable]) {
      return;
    }
  }
  if (!added) {
    ADXLinearSystem_addRowWithADXArrayRow_(self, row);
  }
}

- (void)addRowWithADXArrayRow:(ADXArrayRow *)row {
  ADXLinearSystem_addRowWithADXArrayRow_(self, row);
}

- (void)removeRowWithADXArrayRow:(ADXArrayRow *)row {
  if (((ADXArrayRow *) nil_chk(row))->isSimpleDefinition_ && row->variable_ != nil) {
    if (row->variable_->definitionId_ != -1) {
      for (jint i = row->variable_->definitionId_; i < mNumRows_ - 1; i++) {
        ADXSolverVariable *rowVariable = JreRetainedLocalValue(((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(mRows_), i + 1)))->variable_);
        if (rowVariable->definitionId_ == i + 1) {
          rowVariable->definitionId_ = i;
        }
        IOSObjectArray_Set(mRows_, i, IOSObjectArray_Get(mRows_, i + 1));
      }
      mNumRows_--;
    }
    if (!row->variable_->isFinalValue_) {
      [row->variable_ setFinalValueWithADXLinearSystem:self withFloat:row->constantValue_];
    }
    if (ADXLinearSystem_OPTIMIZED_ENGINE) {
      [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->optimizedArrayRowPool_)) release__WithId:row];
    }
    else {
      [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(mCache_))->arrayRowPool_)) release__WithId:row];
    }
  }
}

- (jint)optimizeWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)goal
                            withBoolean:(jboolean)b {
  return ADXLinearSystem_optimizeWithADXLinearSystem_Row_withBoolean_(self, goal, b);
}

- (jint)enforceBFSWithADXLinearSystem_Row:(id<ADXLinearSystem_Row>)goal {
  return ADXLinearSystem_enforceBFSWithADXLinearSystem_Row_(self, goal);
}

- (void)computeValues {
  ADXLinearSystem_computeValues(self);
}

- (void)displayRows {
  ADXLinearSystem_displayRows(self);
}

- (void)displayReadableRows {
  ADXLinearSystem_displaySolverVariables(self);
  NSString *s = JreStrcat("$IC", @" num vars ", mVariablesID_, 0x000a);
  for (jint i = 0; i < mVariablesID_ + 1; i++) {
    ADXSolverVariable *variable = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), i);
    if (variable != nil && variable->isFinalValue_) {
      JreStrAppend(&s, "$I$@$FC", @" $[", i, @"] => ", variable, @" = ", variable->computedValue_, 0x000a);
    }
  }
  JreStrAppend(&s, "$", @"\n");
  for (jint i = 0; i < mVariablesID_ + 1; i++) {
    ADXSolverVariable *variable = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), i);
    if (variable != nil && variable->isSynonym_) {
      ADXSolverVariable *synonym = IOSObjectArray_Get(mCache_->mIndexedVariables_, variable->synonym_);
      JreStrAppend(&s, "$I$@$@$FC", @" ~[", i, @"] => ", variable, @" = ", synonym, @" + ", variable->synonymDelta_, 0x000a);
    }
  }
  JreStrAppend(&s, "$", @"\n\n #  ");
  for (jint i = 0; i < mNumRows_; i++) {
    JreStrAppend(&s, "$", [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(mRows_), i))) toReadableString]);
    JreStrAppend(&s, "$", @"\n #  ");
  }
  if (mGoal_ != nil) {
    JreStrAppend(&s, "$@C", @"Goal: ", mGoal_, 0x000a);
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
}

- (void)displayVariablesReadableRows {
  ADXLinearSystem_displaySolverVariables(self);
  __unused NSString *s = @"";
  for (jint i = 0; i < mNumRows_; i++) {
    if (((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(mRows_), i)))->variable_))->mType_ == JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED)) {
      JreStrAppend(&s, "$", [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(mRows_, i))) toReadableString]);
      JreStrAppend(&s, "$", @"\n");
    }
  }
  JreStrAppend(&s, "@C", mGoal_, 0x000a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
}

- (jint)getMemoryUsed {
  __unused jint actualRowSize = 0;
  for (jint i = 0; i < mNumRows_; i++) {
    if (IOSObjectArray_Get(nil_chk(mRows_), i) != nil) {
      actualRowSize += [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(mRows_, i))) sizeInBytes];
    }
  }
  return actualRowSize;
}

- (jint)getNumEquations {
  return mNumRows_;
}

- (jint)getNumVariables {
  return mVariablesID_;
}

- (void)displaySystemInformation {
  jint count = 0;
  jint rowSize = 0;
  for (jint i = 0; i < TABLE_SIZE_; i++) {
    if (IOSObjectArray_Get(nil_chk(mRows_), i) != nil) {
      rowSize += [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(mRows_, i))) sizeInBytes];
    }
  }
  jint actualRowSize = 0;
  for (jint i = 0; i < mNumRows_; i++) {
    if (IOSObjectArray_Get(nil_chk(mRows_), i) != nil) {
      actualRowSize += [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(mRows_, i))) sizeInBytes];
    }
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$$$$$$$ICI$ICICI$$", @"Linear System -> Table size: ", TABLE_SIZE_, @" (", ADXLinearSystem_getDisplaySizeWithInt_(self, TABLE_SIZE_ * TABLE_SIZE_), @") -- row sizes: ", ADXLinearSystem_getDisplaySizeWithInt_(self, rowSize), @", actual size: ", ADXLinearSystem_getDisplaySizeWithInt_(self, actualRowSize), @" rows: ", mNumRows_, '/', mMaxRows_, @" cols: ", mNumColumns_, '/', mMaxColumns_, ' ', count, @" occupied cells, ", ADXLinearSystem_getDisplaySizeWithInt_(self, count))];
}

- (void)displaySolverVariables {
  ADXLinearSystem_displaySolverVariables(self);
}

- (NSString *)getDisplaySizeWithInt:(jint)n {
  return ADXLinearSystem_getDisplaySizeWithInt_(self, n);
}

- (ADXCache *)getCache {
  return mCache_;
}

- (NSString *)getDisplayStrengthWithInt:(jint)strength {
  return ADXLinearSystem_getDisplayStrengthWithInt_(self, strength);
}

- (void)addGreaterThanWithADXSolverVariable:(ADXSolverVariable *)a
                      withADXSolverVariable:(ADXSolverVariable *)b
                                    withInt:(jint)margin
                                    withInt:(jint)strength {
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  ADXSolverVariable *slack = JreRetainedLocalValue([self createSlackVariable]);
  ((ADXSolverVariable *) nil_chk(slack))->strength_ = 0;
  [((ADXArrayRow *) nil_chk(row)) createRowGreaterThanWithADXSolverVariable:a withADXSolverVariable:b withADXSolverVariable:slack withInt:margin];
  if (strength != ADXSolverVariable_STRENGTH_FIXED) {
    jfloat slackValue = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(row->variables_)) getWithADXSolverVariable:slack];
    [self addSingleErrorWithADXArrayRow:row withInt:JreFpToInt((-1 * slackValue)) withInt:strength];
  }
  [self addConstraintWithADXArrayRow:row];
}

- (void)addGreaterBarrierWithADXSolverVariable:(ADXSolverVariable *)a
                         withADXSolverVariable:(ADXSolverVariable *)b
                                       withInt:(jint)margin
                                   withBoolean:(jboolean)hasMatchConstraintWidgets {
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  ADXSolverVariable *slack = JreRetainedLocalValue([self createSlackVariable]);
  ((ADXSolverVariable *) nil_chk(slack))->strength_ = 0;
  [((ADXArrayRow *) nil_chk(row)) createRowGreaterThanWithADXSolverVariable:a withADXSolverVariable:b withADXSolverVariable:slack withInt:margin];
  [self addConstraintWithADXArrayRow:row];
}

- (void)addLowerThanWithADXSolverVariable:(ADXSolverVariable *)a
                    withADXSolverVariable:(ADXSolverVariable *)b
                                  withInt:(jint)margin
                                  withInt:(jint)strength {
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  ADXSolverVariable *slack = JreRetainedLocalValue([self createSlackVariable]);
  ((ADXSolverVariable *) nil_chk(slack))->strength_ = 0;
  [((ADXArrayRow *) nil_chk(row)) createRowLowerThanWithADXSolverVariable:a withADXSolverVariable:b withADXSolverVariable:slack withInt:margin];
  if (strength != ADXSolverVariable_STRENGTH_FIXED) {
    jfloat slackValue = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(row->variables_)) getWithADXSolverVariable:slack];
    [self addSingleErrorWithADXArrayRow:row withInt:JreFpToInt((-1 * slackValue)) withInt:strength];
  }
  [self addConstraintWithADXArrayRow:row];
}

- (void)addLowerBarrierWithADXSolverVariable:(ADXSolverVariable *)a
                       withADXSolverVariable:(ADXSolverVariable *)b
                                     withInt:(jint)margin
                                 withBoolean:(jboolean)hasMatchConstraintWidgets {
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  ADXSolverVariable *slack = JreRetainedLocalValue([self createSlackVariable]);
  ((ADXSolverVariable *) nil_chk(slack))->strength_ = 0;
  [((ADXArrayRow *) nil_chk(row)) createRowLowerThanWithADXSolverVariable:a withADXSolverVariable:b withADXSolverVariable:slack withInt:margin];
  [self addConstraintWithADXArrayRow:row];
}

- (void)addCenteringWithADXSolverVariable:(ADXSolverVariable *)a
                    withADXSolverVariable:(ADXSolverVariable *)b
                                  withInt:(jint)m1
                                withFloat:(jfloat)bias
                    withADXSolverVariable:(ADXSolverVariable *)c
                    withADXSolverVariable:(ADXSolverVariable *)d
                                  withInt:(jint)m2
                                  withInt:(jint)strength {
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  [((ADXArrayRow *) nil_chk(row)) createRowCenteringWithADXSolverVariable:a withADXSolverVariable:b withInt:m1 withFloat:bias withADXSolverVariable:c withADXSolverVariable:d withInt:m2];
  if (strength != ADXSolverVariable_STRENGTH_FIXED) {
    [row addErrorWithADXLinearSystem:self withInt:strength];
  }
  [self addConstraintWithADXArrayRow:row];
}

- (void)addRatioWithADXSolverVariable:(ADXSolverVariable *)a
                withADXSolverVariable:(ADXSolverVariable *)b
                withADXSolverVariable:(ADXSolverVariable *)c
                withADXSolverVariable:(ADXSolverVariable *)d
                            withFloat:(jfloat)ratio
                              withInt:(jint)strength {
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  [((ADXArrayRow *) nil_chk(row)) createRowDimensionRatioWithADXSolverVariable:a withADXSolverVariable:b withADXSolverVariable:c withADXSolverVariable:d withFloat:ratio];
  if (strength != ADXSolverVariable_STRENGTH_FIXED) {
    [row addErrorWithADXLinearSystem:self withInt:strength];
  }
  [self addConstraintWithADXArrayRow:row];
}

- (void)addSynonymWithADXSolverVariable:(ADXSolverVariable *)a
                  withADXSolverVariable:(ADXSolverVariable *)b
                                withInt:(jint)margin {
  if (((ADXSolverVariable *) nil_chk(a))->definitionId_ == -1 && margin == 0) {
    if (((ADXSolverVariable *) nil_chk(b))->isSynonym_) {
      JrePlusAssignIntF(&margin, b->synonymDelta_);
      b = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), b->synonym_);
    }
    if (a->isSynonym_) {
      JreMinusAssignIntF(&margin, a->synonymDelta_);
      a = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), a->synonym_);
    }
    else {
      [a setSynonymWithADXLinearSystem:self withADXSolverVariable:b withFloat:0];
    }
  }
  else {
    [self addEqualityWithADXSolverVariable:a withADXSolverVariable:b withInt:margin withInt:ADXSolverVariable_STRENGTH_FIXED];
  }
}

- (ADXArrayRow *)addEqualityWithADXSolverVariable:(ADXSolverVariable *)a
                            withADXSolverVariable:(ADXSolverVariable *)b
                                          withInt:(jint)margin
                                          withInt:(jint)strength {
  if (ADXLinearSystem_USE_BASIC_SYNONYMS && strength == ADXSolverVariable_STRENGTH_FIXED && ((ADXSolverVariable *) nil_chk(b))->isFinalValue_ && ((ADXSolverVariable *) nil_chk(a))->definitionId_ == -1) {
    [((ADXSolverVariable *) nil_chk(a)) setFinalValueWithADXLinearSystem:self withFloat:((ADXSolverVariable *) nil_chk(b))->computedValue_ + margin];
    return nil;
  }
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  [((ADXArrayRow *) nil_chk(row)) createRowEqualsWithADXSolverVariable:a withADXSolverVariable:b withInt:margin];
  if (strength != ADXSolverVariable_STRENGTH_FIXED) {
    [row addErrorWithADXLinearSystem:self withInt:strength];
  }
  [self addConstraintWithADXArrayRow:row];
  return row;
}

- (void)addEqualityWithADXSolverVariable:(ADXSolverVariable *)a
                                 withInt:(jint)value {
  if (ADXLinearSystem_USE_BASIC_SYNONYMS && ((ADXSolverVariable *) nil_chk(a))->definitionId_ == -1) {
    [((ADXSolverVariable *) nil_chk(a)) setFinalValueWithADXLinearSystem:self withFloat:value];
    for (jint i = 0; i < mVariablesID_ + 1; i++) {
      ADXSolverVariable *variable = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), i);
      if (variable != nil && variable->isSynonym_ && variable->synonym_ == a->id__) {
        [variable setFinalValueWithADXLinearSystem:self withFloat:value + variable->synonymDelta_];
      }
    }
    return;
  }
  jint idx = ((ADXSolverVariable *) nil_chk(a))->definitionId_;
  if (a->definitionId_ != -1) {
    ADXArrayRow *row = IOSObjectArray_Get(nil_chk(mRows_), idx);
    if (((ADXArrayRow *) nil_chk(row))->isSimpleDefinition_) {
      row->constantValue_ = value;
    }
    else {
      if ([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(row->variables_)) getCurrentSize] == 0) {
        row->isSimpleDefinition_ = true;
        row->constantValue_ = value;
      }
      else {
        ADXArrayRow *newRow = JreRetainedLocalValue([self createRow]);
        [((ADXArrayRow *) nil_chk(newRow)) createRowEqualsWithADXSolverVariable:a withInt:value];
        [self addConstraintWithADXArrayRow:newRow];
      }
    }
  }
  else {
    ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
    [((ADXArrayRow *) nil_chk(row)) createRowDefinitionWithADXSolverVariable:a withInt:value];
    [self addConstraintWithADXArrayRow:row];
  }
}

+ (ADXArrayRow *)createRowDimensionPercentWithADXLinearSystem:(ADXLinearSystem *)linearSystem
                                        withADXSolverVariable:(ADXSolverVariable *)variableA
                                        withADXSolverVariable:(ADXSolverVariable *)variableC
                                                    withFloat:(jfloat)percent {
  return ADXLinearSystem_createRowDimensionPercentWithADXLinearSystem_withADXSolverVariable_withADXSolverVariable_withFloat_(linearSystem, variableA, variableC, percent);
}

- (void)addCenterPointWithADXConstraintWidget:(ADXConstraintWidget *)widget
                      withADXConstraintWidget:(ADXConstraintWidget *)target
                                    withFloat:(jfloat)angle
                                      withInt:(jint)radius {
  ADXSolverVariable *Al = JreRetainedLocalValue([self createObjectVariableWithId:[((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]]);
  ADXSolverVariable *At = JreRetainedLocalValue([self createObjectVariableWithId:[widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]]);
  ADXSolverVariable *Ar = JreRetainedLocalValue([self createObjectVariableWithId:[widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]]);
  ADXSolverVariable *Ab = JreRetainedLocalValue([self createObjectVariableWithId:[widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]]);
  ADXSolverVariable *Bl = JreRetainedLocalValue([self createObjectVariableWithId:[((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]]);
  ADXSolverVariable *Bt = JreRetainedLocalValue([self createObjectVariableWithId:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]]);
  ADXSolverVariable *Br = JreRetainedLocalValue([self createObjectVariableWithId:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]]);
  ADXSolverVariable *Bb = JreRetainedLocalValue([self createObjectVariableWithId:[target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]]);
  ADXArrayRow *row = JreRetainedLocalValue([self createRow]);
  jfloat angleComponent = (jfloat) (JavaLangMath_sinWithDouble_(angle) * radius);
  [((ADXArrayRow *) nil_chk(row)) createRowWithAngleWithADXSolverVariable:At withADXSolverVariable:Ab withADXSolverVariable:Bt withADXSolverVariable:Bb withFloat:angleComponent];
  [self addConstraintWithADXArrayRow:row];
  row = [self createRow];
  angleComponent = (jfloat) (JavaLangMath_cosWithDouble_(angle) * radius);
  [((ADXArrayRow *) nil_chk(row)) createRowWithAngleWithADXSolverVariable:Al withADXSolverVariable:Ar withADXSolverVariable:Bl withADXSolverVariable:Br withFloat:angleComponent];
  [self addConstraintWithADXArrayRow:row];
}

- (void)dealloc {
  RELEASE_(mVariables_);
  RELEASE_(mGoal_);
  RELEASE_(mRows_);
  RELEASE_(mAlreadyTestedCandidates_);
  RELEASE_(mCache_);
  RELEASE_(mPoolVariables_);
  RELEASE_(mTempGoal_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXMetrics;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 8, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "LADXLinearSystem_Row;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "F", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x0, 20, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 21, -1, -1, -1 },
    { NULL, "V", 0x0, 22, 23, 21, -1, -1, -1 },
    { NULL, "V", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x12, 25, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 29, 23, 21, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 30, 16, -1, -1, -1, -1 },
    { NULL, "LADXCache;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 31, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x1, 44, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "LADXArrayRow;", 0x9, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 49, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(fillMetricsWithADXMetrics:);
  methods[2].selector = @selector(getMetrics);
  methods[3].selector = @selector(increaseTableSize);
  methods[4].selector = @selector(releaseRows);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(createObjectVariableWithId:);
  methods[7].selector = @selector(createRow);
  methods[8].selector = @selector(createSlackVariable);
  methods[9].selector = @selector(createExtraVariable);
  methods[10].selector = @selector(addErrorWithADXArrayRow:);
  methods[11].selector = @selector(addSingleErrorWithADXArrayRow:withInt:);
  methods[12].selector = @selector(addSingleErrorWithADXArrayRow:withInt:withInt:);
  methods[13].selector = @selector(createVariableWithNSString:withADXSolverVariable_Type:);
  methods[14].selector = @selector(createErrorVariableWithInt:withNSString:);
  methods[15].selector = @selector(acquireSolverVariableWithADXSolverVariable_Type:withNSString:);
  methods[16].selector = @selector(getGoal);
  methods[17].selector = @selector(getRowWithInt:);
  methods[18].selector = @selector(getValueForWithNSString:);
  methods[19].selector = @selector(getObjectVariableValueWithId:);
  methods[20].selector = @selector(getVariableWithNSString:withADXSolverVariable_Type:);
  methods[21].selector = @selector(minimize);
  methods[22].selector = @selector(minimizeGoalWithADXLinearSystem_Row:);
  methods[23].selector = @selector(cleanupRows);
  methods[24].selector = @selector(addConstraintWithADXArrayRow:);
  methods[25].selector = @selector(addRowWithADXArrayRow:);
  methods[26].selector = @selector(removeRowWithADXArrayRow:);
  methods[27].selector = @selector(optimizeWithADXLinearSystem_Row:withBoolean:);
  methods[28].selector = @selector(enforceBFSWithADXLinearSystem_Row:);
  methods[29].selector = @selector(computeValues);
  methods[30].selector = @selector(displayRows);
  methods[31].selector = @selector(displayReadableRows);
  methods[32].selector = @selector(displayVariablesReadableRows);
  methods[33].selector = @selector(getMemoryUsed);
  methods[34].selector = @selector(getNumEquations);
  methods[35].selector = @selector(getNumVariables);
  methods[36].selector = @selector(displaySystemInformation);
  methods[37].selector = @selector(displaySolverVariables);
  methods[38].selector = @selector(getDisplaySizeWithInt:);
  methods[39].selector = @selector(getCache);
  methods[40].selector = @selector(getDisplayStrengthWithInt:);
  methods[41].selector = @selector(addGreaterThanWithADXSolverVariable:withADXSolverVariable:withInt:withInt:);
  methods[42].selector = @selector(addGreaterBarrierWithADXSolverVariable:withADXSolverVariable:withInt:withBoolean:);
  methods[43].selector = @selector(addLowerThanWithADXSolverVariable:withADXSolverVariable:withInt:withInt:);
  methods[44].selector = @selector(addLowerBarrierWithADXSolverVariable:withADXSolverVariable:withInt:withBoolean:);
  methods[45].selector = @selector(addCenteringWithADXSolverVariable:withADXSolverVariable:withInt:withFloat:withADXSolverVariable:withADXSolverVariable:withInt:withInt:);
  methods[46].selector = @selector(addRatioWithADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withADXSolverVariable:withFloat:withInt:);
  methods[47].selector = @selector(addSynonymWithADXSolverVariable:withADXSolverVariable:withInt:);
  methods[48].selector = @selector(addEqualityWithADXSolverVariable:withADXSolverVariable:withInt:withInt:);
  methods[49].selector = @selector(addEqualityWithADXSolverVariable:withInt:);
  methods[50].selector = @selector(createRowDimensionPercentWithADXLinearSystem:withADXSolverVariable:withADXSolverVariable:withFloat:);
  methods[51].selector = @selector(addCenterPointWithADXConstraintWidget:withADXConstraintWidget:withFloat:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FULL_DEBUG", "Z", .constantValue.asBOOL = ADXLinearSystem_FULL_DEBUG, 0x19, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXLinearSystem_DEBUG, 0x19, -1, -1, -1, -1 },
    { "MEASURE", "Z", .constantValue.asBOOL = ADXLinearSystem_MEASURE, 0x19, -1, -1, -1, -1 },
    { "DEBUG_CONSTRAINTS", "Z", .constantValue.asBOOL = ADXLinearSystem_DEBUG_CONSTRAINTS, 0x1a, -1, -1, -1, -1 },
    { "USE_DEPENDENCY_ORDERING", "Z", .constantValue.asLong = 0, 0x9, -1, 50, -1, -1 },
    { "USE_BASIC_SYNONYMS", "Z", .constantValue.asLong = 0, 0x9, -1, 51, -1, -1 },
    { "SIMPLIFY_SYNONYMS", "Z", .constantValue.asLong = 0, 0x9, -1, 52, -1, -1 },
    { "USE_SYNONYMS", "Z", .constantValue.asLong = 0, 0x9, -1, 53, -1, -1 },
    { "SKIP_COLUMNS", "Z", .constantValue.asLong = 0, 0x9, -1, 54, -1, -1 },
    { "OPTIMIZED_ENGINE", "Z", .constantValue.asLong = 0, 0x9, -1, 55, -1, -1 },
    { "POOL_SIZE", "I", .constantValue.asLong = 0, 0xa, -1, 56, -1, -1 },
    { "hasSimpleDefinition_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVariablesID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVariables_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 57, -1 },
    { "mGoal_", "LADXLinearSystem_Row;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TABLE_SIZE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxColumns_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRows_", "[LADXArrayRow;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "graphOptimizer_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "newgraphOptimizer_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAlreadyTestedCandidates_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNumColumns_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mNumRows_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMaxRows_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCache_", "LADXCache;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mPoolVariables_", "[LADXSolverVariable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPoolVariablesCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sMetrics", "LADXMetrics;", .constantValue.asLong = 0, 0x9, -1, 58, -1, -1 },
    { "mTempGoal_", "LADXLinearSystem_Row;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ARRAY_ROW_CREATION", "J", .constantValue.asLong = 0, 0x9, -1, 59, -1, -1 },
    { "OPTIMIZED_ARRAY_ROW_CREATION", "J", .constantValue.asLong = 0, 0x9, -1, 60, -1, -1 },
  };
  static const void *ptrTable[] = { "fillMetrics", "LADXMetrics;", "createObjectVariable", "LNSObject;", "addError", "LADXArrayRow;", "addSingleError", "LADXArrayRow;I", "LADXArrayRow;II", "createVariable", "LNSString;LADXSolverVariable_Type;", "createErrorVariable", "ILNSString;", "acquireSolverVariable", "LADXSolverVariable_Type;LNSString;", "getRow", "I", "getValueFor", "LNSString;", "getObjectVariableValue", "getVariable", "LJavaLangException;", "minimizeGoal", "LADXLinearSystem_Row;", "addConstraint", "addRow", "removeRow", "optimize", "LADXLinearSystem_Row;Z", "enforceBFS", "getDisplaySize", "getDisplayStrength", "addGreaterThan", "LADXSolverVariable;LADXSolverVariable;II", "addGreaterBarrier", "LADXSolverVariable;LADXSolverVariable;IZ", "addLowerThan", "addLowerBarrier", "addCentering", "LADXSolverVariable;LADXSolverVariable;IFLADXSolverVariable;LADXSolverVariable;II", "addRatio", "LADXSolverVariable;LADXSolverVariable;LADXSolverVariable;LADXSolverVariable;FI", "addSynonym", "LADXSolverVariable;LADXSolverVariable;I", "addEquality", "LADXSolverVariable;I", "createRowDimensionPercent", "LADXLinearSystem;LADXSolverVariable;LADXSolverVariable;F", "addCenterPoint", "LADXConstraintWidget;LADXConstraintWidget;FI", &ADXLinearSystem_USE_DEPENDENCY_ORDERING, &ADXLinearSystem_USE_BASIC_SYNONYMS, &ADXLinearSystem_SIMPLIFY_SYNONYMS, &ADXLinearSystem_USE_SYNONYMS, &ADXLinearSystem_SKIP_COLUMNS, &ADXLinearSystem_OPTIMIZED_ENGINE, &ADXLinearSystem_POOL_SIZE, "Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/SolverVariable;>;", &ADXLinearSystem_sMetrics, &ADXLinearSystem_ARRAY_ROW_CREATION, &ADXLinearSystem_OPTIMIZED_ARRAY_ROW_CREATION, "LADXLinearSystem_ValuesRow;LADXLinearSystem_Row;" };
  static const J2ObjcClassInfo _ADXLinearSystem = { "LinearSystem", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x1, 52, 31, -1, 61, -1, -1, -1 };
  return &_ADXLinearSystem;
}

@end

void ADXLinearSystem_init(ADXLinearSystem *self) {
  NSObject_init(self);
  self->hasSimpleDefinition_ = false;
  self->mVariablesID_ = 0;
  JreStrongAssign(&self->mVariables_, nil);
  self->TABLE_SIZE_ = 32;
  self->mMaxColumns_ = self->TABLE_SIZE_;
  JreStrongAssign(&self->mRows_, nil);
  self->graphOptimizer_ = false;
  self->newgraphOptimizer_ = false;
  JreStrongAssignAndConsume(&self->mAlreadyTestedCandidates_, [IOSBooleanArray newArrayWithLength:self->TABLE_SIZE_]);
  self->mNumColumns_ = 1;
  self->mNumRows_ = 0;
  self->mMaxRows_ = self->TABLE_SIZE_;
  JreStrongAssignAndConsume(&self->mPoolVariables_, [IOSObjectArray newArrayWithLength:ADXLinearSystem_POOL_SIZE type:ADXSolverVariable_class_()]);
  self->mPoolVariablesCount_ = 0;
  JreStrongAssignAndConsume(&self->mRows_, [IOSObjectArray newArrayWithLength:self->TABLE_SIZE_ type:ADXArrayRow_class_()]);
  ADXLinearSystem_releaseRows(self);
  JreStrongAssignAndConsume(&self->mCache_, new_ADXCache_init());
  JreStrongAssignAndConsume(&self->mGoal_, new_ADXPriorityGoalRow_initWithADXCache_(self->mCache_));
  if (ADXLinearSystem_OPTIMIZED_ENGINE) {
    JreStrongAssignAndConsume(&self->mTempGoal_, new_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(self, self->mCache_));
  }
  else {
    JreStrongAssignAndConsume(&self->mTempGoal_, new_ADXArrayRow_initWithADXCache_(self->mCache_));
  }
}

ADXLinearSystem *new_ADXLinearSystem_init() {
  J2OBJC_NEW_IMPL(ADXLinearSystem, init)
}

ADXLinearSystem *create_ADXLinearSystem_init() {
  J2OBJC_CREATE_IMPL(ADXLinearSystem, init)
}

ADXMetrics *ADXLinearSystem_getMetrics() {
  ADXLinearSystem_initialize();
  return ADXLinearSystem_sMetrics;
}

void ADXLinearSystem_increaseTableSize(ADXLinearSystem *self) {
  self->TABLE_SIZE_ *= 2;
  JreStrongAssign(&self->mRows_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->mRows_, self->TABLE_SIZE_));
  JreStrongAssign(&((ADXCache *) nil_chk(self->mCache_))->mIndexedVariables_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->mCache_->mIndexedVariables_, self->TABLE_SIZE_));
  JreStrongAssignAndConsume(&self->mAlreadyTestedCandidates_, [IOSBooleanArray newArrayWithLength:self->TABLE_SIZE_]);
  self->mMaxColumns_ = self->TABLE_SIZE_;
  self->mMaxRows_ = self->TABLE_SIZE_;
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->tableSizeIncrease_++;
    ADXLinearSystem_sMetrics->maxTableSize_ = JavaLangMath_maxWithLong_withLong_(ADXLinearSystem_sMetrics->maxTableSize_, self->TABLE_SIZE_);
    ((ADXMetrics *) nil_chk(ADXLinearSystem_sMetrics))->lastTableSize_ = ADXLinearSystem_sMetrics->maxTableSize_;
  }
}

void ADXLinearSystem_releaseRows(ADXLinearSystem *self) {
  if (ADXLinearSystem_OPTIMIZED_ENGINE) {
    for (jint i = 0; i < self->mNumRows_; i++) {
      ADXArrayRow *row = IOSObjectArray_Get(nil_chk(self->mRows_), i);
      if (row != nil) {
        [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(self->mCache_))->optimizedArrayRowPool_)) release__WithId:row];
      }
      IOSObjectArray_Set(nil_chk(self->mRows_), i, nil);
    }
  }
  else {
    for (jint i = 0; i < self->mNumRows_; i++) {
      ADXArrayRow *row = IOSObjectArray_Get(nil_chk(self->mRows_), i);
      if (row != nil) {
        [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(self->mCache_))->arrayRowPool_)) release__WithId:row];
      }
      IOSObjectArray_Set(nil_chk(self->mRows_), i, nil);
    }
  }
}

void ADXLinearSystem_addErrorWithADXArrayRow_(ADXLinearSystem *self, ADXArrayRow *row) {
  [((ADXArrayRow *) nil_chk(row)) addErrorWithADXLinearSystem:self withInt:ADXSolverVariable_STRENGTH_NONE];
}

void ADXLinearSystem_addSingleErrorWithADXArrayRow_withInt_(ADXLinearSystem *self, ADXArrayRow *row, jint sign) {
  [self addSingleErrorWithADXArrayRow:row withInt:sign withInt:ADXSolverVariable_STRENGTH_NONE];
}

ADXSolverVariable *ADXLinearSystem_createVariableWithNSString_withADXSolverVariable_Type_(ADXLinearSystem *self, NSString *name, ADXSolverVariable_Type *type) {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->variables_++;
  }
  if (self->mNumColumns_ + 1 >= self->mMaxColumns_) {
    ADXLinearSystem_increaseTableSize(self);
  }
  ADXSolverVariable *variable = ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(self, type, nil);
  [((ADXSolverVariable *) nil_chk(variable)) setNameWithNSString:name];
  self->mVariablesID_++;
  self->mNumColumns_++;
  variable->id__ = self->mVariablesID_;
  if (self->mVariables_ == nil) {
    JreStrongAssignAndConsume(&self->mVariables_, new_JavaUtilHashMap_init());
  }
  [self->mVariables_ putWithId:name withId:variable];
  IOSObjectArray_Set(nil_chk(((ADXCache *) nil_chk(self->mCache_))->mIndexedVariables_), self->mVariablesID_, variable);
  return variable;
}

ADXSolverVariable *ADXLinearSystem_acquireSolverVariableWithADXSolverVariable_Type_withNSString_(ADXLinearSystem *self, ADXSolverVariable_Type *type, NSString *prefix) {
  ADXSolverVariable *variable = JreRetainedLocalValue([((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(self->mCache_))->solverVariablePool_)) acquire]);
  if (variable == nil) {
    variable = create_ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(type, prefix);
    [variable setTypeWithADXSolverVariable_Type:type withNSString:prefix];
  }
  else {
    [variable reset];
    [variable setTypeWithADXSolverVariable_Type:type withNSString:prefix];
  }
  if (self->mPoolVariablesCount_ >= ADXLinearSystem_POOL_SIZE) {
    ADXLinearSystem_POOL_SIZE *= 2;
    JreStrongAssign(&self->mPoolVariables_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->mPoolVariables_, ADXLinearSystem_POOL_SIZE));
  }
  IOSObjectArray_Set(nil_chk(self->mPoolVariables_), self->mPoolVariablesCount_++, variable);
  return variable;
}

void ADXLinearSystem_addRowWithADXArrayRow_(ADXLinearSystem *self, ADXArrayRow *row) {
  if (ADXLinearSystem_SIMPLIFY_SYNONYMS && ((ADXArrayRow *) nil_chk(row))->isSimpleDefinition_) {
    [((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(row))->variable_)) setFinalValueWithADXLinearSystem:self withFloat:row->constantValue_];
  }
  else {
    IOSObjectArray_Set(nil_chk(self->mRows_), self->mNumRows_, row);
    ((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(row))->variable_))->definitionId_ = self->mNumRows_;
    self->mNumRows_++;
    [row->variable_ updateReferencesWithNewDefinitionWithADXLinearSystem:self withADXArrayRow:row];
  }
  if (ADXLinearSystem_SIMPLIFY_SYNONYMS && self->hasSimpleDefinition_) {
    for (jint i = 0; i < self->mNumRows_; i++) {
      if (IOSObjectArray_Get(nil_chk(self->mRows_), i) == nil) {
        [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"WTF"];
      }
      if (IOSObjectArray_Get(nil_chk(self->mRows_), i) != nil && ((ADXArrayRow *) nil_chk(IOSObjectArray_Get(self->mRows_, i)))->isSimpleDefinition_) {
        ADXArrayRow *removedRow = IOSObjectArray_Get(self->mRows_, i);
        [((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(removedRow))->variable_)) setFinalValueWithADXLinearSystem:self withFloat:removedRow->constantValue_];
        if (ADXLinearSystem_OPTIMIZED_ENGINE) {
          [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(self->mCache_))->optimizedArrayRowPool_)) release__WithId:removedRow];
        }
        else {
          [((id<ADXCLPools_Pool>) nil_chk(((ADXCache *) nil_chk(self->mCache_))->arrayRowPool_)) release__WithId:removedRow];
        }
        IOSObjectArray_Set(nil_chk(self->mRows_), i, nil);
        jint lastRow = i + 1;
        for (jint j = i + 1; j < self->mNumRows_; j++) {
          IOSObjectArray_Set(self->mRows_, j - 1, IOSObjectArray_Get(self->mRows_, j));
          if (((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(IOSObjectArray_Get(self->mRows_, j - 1)))->variable_))->definitionId_ == j) {
            ((ADXArrayRow *) nil_chk(IOSObjectArray_Get(self->mRows_, j - 1)))->variable_->definitionId_ = j - 1;
          }
          lastRow = j;
        }
        if (lastRow < self->mNumRows_) {
          IOSObjectArray_Set(self->mRows_, lastRow, nil);
        }
        self->mNumRows_--;
        i--;
      }
    }
    self->hasSimpleDefinition_ = false;
  }
}

jint ADXLinearSystem_optimizeWithADXLinearSystem_Row_withBoolean_(ADXLinearSystem *self, id<ADXLinearSystem_Row> goal, jboolean b) {
  if (ADXLinearSystem_sMetrics != nil) {
    ADXLinearSystem_sMetrics->optimize_++;
  }
  jboolean done = false;
  jint tries = 0;
  for (jint i = 0; i < self->mNumColumns_; i++) {
    *IOSBooleanArray_GetRef(nil_chk(self->mAlreadyTestedCandidates_), i) = false;
  }
  while (!done) {
    if (ADXLinearSystem_sMetrics != nil) {
      ADXLinearSystem_sMetrics->iterations_++;
    }
    tries++;
    if (tries >= 2 * self->mNumColumns_) {
      return tries;
    }
    if ([((id<ADXLinearSystem_Row>) nil_chk(goal)) getKey] != nil) {
      *IOSBooleanArray_GetRef(nil_chk(self->mAlreadyTestedCandidates_), ((ADXSolverVariable *) nil_chk([goal getKey]))->id__) = true;
    }
    ADXSolverVariable *pivotCandidate = JreRetainedLocalValue([goal getPivotCandidateWithADXLinearSystem:self withBooleanArray:self->mAlreadyTestedCandidates_]);
    if (pivotCandidate != nil) {
      if (IOSBooleanArray_Get(nil_chk(self->mAlreadyTestedCandidates_), pivotCandidate->id__)) {
        return tries;
      }
      else {
        *IOSBooleanArray_GetRef(self->mAlreadyTestedCandidates_, pivotCandidate->id__) = true;
      }
    }
    if (pivotCandidate != nil) {
      jfloat min = JavaLangFloat_MAX_VALUE;
      jint pivotRowIndex = -1;
      for (jint i = 0; i < self->mNumRows_; i++) {
        ADXArrayRow *current = IOSObjectArray_Get(nil_chk(self->mRows_), i);
        ADXSolverVariable *variable = JreRetainedLocalValue(((ADXArrayRow *) nil_chk(current))->variable_);
        if (((ADXSolverVariable *) nil_chk(variable))->mType_ == JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED)) {
          continue;
        }
        if (current->isSimpleDefinition_) {
          continue;
        }
        if ([current hasVariableWithADXSolverVariable:pivotCandidate]) {
          jfloat a_j = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(current->variables_)) getWithADXSolverVariable:pivotCandidate];
          if (a_j < 0) {
            jfloat value = -current->constantValue_ / a_j;
            if (value < min) {
              min = value;
              pivotRowIndex = i;
            }
          }
        }
      }
      if (pivotRowIndex > -1) {
        ADXArrayRow *pivotEquation = IOSObjectArray_Get(nil_chk(self->mRows_), pivotRowIndex);
        ((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(pivotEquation))->variable_))->definitionId_ = -1;
        if (ADXLinearSystem_sMetrics != nil) {
          ADXLinearSystem_sMetrics->pivots_++;
        }
        [pivotEquation pivotWithADXSolverVariable:pivotCandidate];
        ((ADXSolverVariable *) nil_chk(pivotEquation->variable_))->definitionId_ = pivotRowIndex;
        [pivotEquation->variable_ updateReferencesWithNewDefinitionWithADXLinearSystem:self withADXArrayRow:pivotEquation];
      }
      else {
      }
    }
    else {
      done = true;
    }
  }
  return tries;
}

jint ADXLinearSystem_enforceBFSWithADXLinearSystem_Row_(ADXLinearSystem *self, id<ADXLinearSystem_Row> goal) {
  jint tries = 0;
  jboolean done;
  jboolean infeasibleSystem = false;
  for (jint i = 0; i < self->mNumRows_; i++) {
    ADXSolverVariable *variable = JreRetainedLocalValue(((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(self->mRows_), i)))->variable_);
    if (((ADXSolverVariable *) nil_chk(variable))->mType_ == JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED)) {
      continue;
    }
    if (((ADXArrayRow *) nil_chk(IOSObjectArray_Get(self->mRows_, i)))->constantValue_ < 0) {
      infeasibleSystem = true;
      break;
    }
  }
  if (infeasibleSystem) {
    done = false;
    tries = 0;
    while (!done) {
      if (ADXLinearSystem_sMetrics != nil) {
        ADXLinearSystem_sMetrics->bfs_++;
      }
      tries++;
      jfloat min = JavaLangFloat_MAX_VALUE;
      jint strength = 0;
      jint pivotRowIndex = -1;
      jint pivotColumnIndex = -1;
      for (jint i = 0; i < self->mNumRows_; i++) {
        ADXArrayRow *current = IOSObjectArray_Get(nil_chk(self->mRows_), i);
        ADXSolverVariable *variable = JreRetainedLocalValue(((ADXArrayRow *) nil_chk(current))->variable_);
        if (((ADXSolverVariable *) nil_chk(variable))->mType_ == JreLoadEnum(ADXSolverVariable_Type, UNRESTRICTED)) {
          continue;
        }
        if (current->isSimpleDefinition_) {
          continue;
        }
        if (current->constantValue_ < 0) {
          if (ADXLinearSystem_SKIP_COLUMNS) {
            jint size = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(current->variables_)) getCurrentSize];
            for (jint j = 0; j < size; j++) {
              ADXSolverVariable *candidate = JreRetainedLocalValue([((id<ADXArrayRow_ArrayRowVariables>) nil_chk(current->variables_)) getVariableWithInt:j]);
              jfloat a_j = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(current->variables_)) getWithADXSolverVariable:candidate];
              if (a_j <= 0) {
                continue;
              }
              for (jint k = 0; k < ADXSolverVariable_MAX_STRENGTH; k++) {
                jfloat value = IOSFloatArray_Get(nil_chk(((ADXSolverVariable *) nil_chk(candidate))->strengthVector_), k) / a_j;
                if ((value < min && k == strength) || k > strength) {
                  min = value;
                  pivotRowIndex = i;
                  pivotColumnIndex = candidate->id__;
                  strength = k;
                }
              }
            }
          }
          else {
            for (jint j = 1; j < self->mNumColumns_; j++) {
              ADXSolverVariable *candidate = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(self->mCache_))->mIndexedVariables_), j);
              jfloat a_j = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(current->variables_)) getWithADXSolverVariable:candidate];
              if (a_j <= 0) {
                continue;
              }
              for (jint k = 0; k < ADXSolverVariable_MAX_STRENGTH; k++) {
                jfloat value = IOSFloatArray_Get(nil_chk(((ADXSolverVariable *) nil_chk(candidate))->strengthVector_), k) / a_j;
                if ((value < min && k == strength) || k > strength) {
                  min = value;
                  pivotRowIndex = i;
                  pivotColumnIndex = j;
                  strength = k;
                }
              }
            }
          }
        }
      }
      if (pivotRowIndex != -1) {
        ADXArrayRow *pivotEquation = IOSObjectArray_Get(nil_chk(self->mRows_), pivotRowIndex);
        ((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(pivotEquation))->variable_))->definitionId_ = -1;
        if (ADXLinearSystem_sMetrics != nil) {
          ADXLinearSystem_sMetrics->pivots_++;
        }
        [pivotEquation pivotWithADXSolverVariable:IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(self->mCache_))->mIndexedVariables_), pivotColumnIndex)];
        ((ADXSolverVariable *) nil_chk(pivotEquation->variable_))->definitionId_ = pivotRowIndex;
        [pivotEquation->variable_ updateReferencesWithNewDefinitionWithADXLinearSystem:self withADXArrayRow:pivotEquation];
      }
      else {
        done = true;
      }
      if (tries > JreIntDiv(self->mNumColumns_, 2)) {
        done = true;
      }
    }
  }
  return tries;
}

void ADXLinearSystem_computeValues(ADXLinearSystem *self) {
  for (jint i = 0; i < self->mNumRows_; i++) {
    ADXArrayRow *row = IOSObjectArray_Get(nil_chk(self->mRows_), i);
    ((ADXSolverVariable *) nil_chk(((ADXArrayRow *) nil_chk(row))->variable_))->computedValue_ = row->constantValue_;
  }
}

void ADXLinearSystem_displayRows(ADXLinearSystem *self) {
  ADXLinearSystem_displaySolverVariables(self);
  __unused NSString *s = @"";
  for (jint i = 0; i < self->mNumRows_; i++) {
    JreStrAppend(&s, "@", IOSObjectArray_Get(nil_chk(self->mRows_), i));
    JreStrAppend(&s, "$", @"\n");
  }
  JreStrAppend(&s, "@C", self->mGoal_, 0x000a);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
}

void ADXLinearSystem_displaySolverVariables(ADXLinearSystem *self) {
  NSString *s = JreStrcat("$ICI$", @"Display Rows (", self->mNumRows_, 'x', self->mNumColumns_, @")\n");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:s];
}

NSString *ADXLinearSystem_getDisplaySizeWithInt_(ADXLinearSystem *self, jint n) {
  jint mb = JreIntDiv(JreIntDiv((n * 4), 1024), 1024);
  if (mb > 0) {
    return JreStrcat("I$", mb, @" Mb");
  }
  jint kb = JreIntDiv((n * 4), 1024);
  if (kb > 0) {
    return JreStrcat("I$", kb, @" Kb");
  }
  return JreStrcat("I$", (n * 4), @" bytes");
}

NSString *ADXLinearSystem_getDisplayStrengthWithInt_(ADXLinearSystem *self, jint strength) {
  if (strength == ADXSolverVariable_STRENGTH_LOW) {
    return @"LOW";
  }
  if (strength == ADXSolverVariable_STRENGTH_MEDIUM) {
    return @"MEDIUM";
  }
  if (strength == ADXSolverVariable_STRENGTH_HIGH) {
    return @"HIGH";
  }
  if (strength == ADXSolverVariable_STRENGTH_HIGHEST) {
    return @"HIGHEST";
  }
  if (strength == ADXSolverVariable_STRENGTH_EQUALITY) {
    return @"EQUALITY";
  }
  if (strength == ADXSolverVariable_STRENGTH_FIXED) {
    return @"FIXED";
  }
  if (strength == ADXSolverVariable_STRENGTH_BARRIER) {
    return @"BARRIER";
  }
  return @"NONE";
}

ADXArrayRow *ADXLinearSystem_createRowDimensionPercentWithADXLinearSystem_withADXSolverVariable_withADXSolverVariable_withFloat_(ADXLinearSystem *linearSystem, ADXSolverVariable *variableA, ADXSolverVariable *variableC, jfloat percent) {
  ADXLinearSystem_initialize();
  ADXArrayRow *row = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(linearSystem)) createRow]);
  return [((ADXArrayRow *) nil_chk(row)) createRowDimensionPercentWithADXSolverVariable:variableA withADXSolverVariable:variableC withFloat:percent];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXLinearSystem)

@implementation ADXLinearSystem_ValuesRow

- (instancetype)initWithADXLinearSystem:(ADXLinearSystem *)outer$
                           withADXCache:(ADXCache *)cache {
  ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(self, outer$, cache);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXLinearSystem:withADXCache:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXLinearSystem;LADXCache;", "LADXLinearSystem;" };
  static const J2ObjcClassInfo _ADXLinearSystem_ValuesRow = { "ValuesRow", "androidx.constraintlayout.core", ptrTable, methods, NULL, 7, 0x0, 1, 0, 1, -1, -1, -1, -1 };
  return &_ADXLinearSystem_ValuesRow;
}

@end

void ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(ADXLinearSystem_ValuesRow *self, ADXLinearSystem *outer$, ADXCache *cache) {
  ADXArrayRow_init(self);
  JreStrongAssignAndConsume(&self->variables_, new_ADXSolverVariableValues_initWithADXArrayRow_withADXCache_(self, cache));
}

ADXLinearSystem_ValuesRow *new_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(ADXLinearSystem *outer$, ADXCache *cache) {
  J2OBJC_NEW_IMPL(ADXLinearSystem_ValuesRow, initWithADXLinearSystem_withADXCache_, outer$, cache)
}

ADXLinearSystem_ValuesRow *create_ADXLinearSystem_ValuesRow_initWithADXLinearSystem_withADXCache_(ADXLinearSystem *outer$, ADXCache *cache) {
  J2OBJC_CREATE_IMPL(ADXLinearSystem_ValuesRow, initWithADXLinearSystem_withADXCache_, outer$, cache)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXLinearSystem_ValuesRow)

@implementation ADXLinearSystem_Row

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXSolverVariable;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPivotCandidateWithADXLinearSystem:withBooleanArray:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(initFromRowWithADXLinearSystem_Row:);
  methods[3].selector = @selector(addErrorWithADXSolverVariable:);
  methods[4].selector = @selector(updateFromSystemWithADXLinearSystem:);
  methods[5].selector = @selector(getKey);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(updateFromRowWithADXLinearSystem:withADXArrayRow:withBoolean:);
  methods[8].selector = @selector(updateFromFinalVariableWithADXLinearSystem:withADXSolverVariable:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getPivotCandidate", "LADXLinearSystem;[Z", "initFromRow", "LADXLinearSystem_Row;", "addError", "LADXSolverVariable;", "updateFromSystem", "LADXLinearSystem;", "updateFromRow", "LADXLinearSystem;LADXArrayRow;Z", "updateFromFinalVariable", "LADXLinearSystem;LADXSolverVariable;Z" };
  static const J2ObjcClassInfo _ADXLinearSystem_Row = { "Row", "androidx.constraintlayout.core", ptrTable, methods, NULL, 7, 0x608, 9, 0, 7, -1, -1, -1, -1 };
  return &_ADXLinearSystem_Row;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXLinearSystem_Row)
