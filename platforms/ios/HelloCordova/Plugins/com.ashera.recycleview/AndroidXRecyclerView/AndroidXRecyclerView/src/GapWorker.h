//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\GapWorker.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GapWorker")
#ifdef RESTRICT_GapWorker
#define INCLUDE_ALL_GapWorker 0
#else
#define INCLUDE_ALL_GapWorker 1
#endif
#undef RESTRICT_GapWorker

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXGapWorker_) && (INCLUDE_ALL_GapWorker || defined(INCLUDE_ADXGapWorker))
#define ADXGapWorker_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class ADXRecyclerView;
@class JavaLangThreadLocal;
@class JavaUtilArrayList;
@protocol JavaUtilComparator;

@interface ADXGapWorker : NSObject < JavaLangRunnable > {
 @public
  JavaUtilArrayList *mRecyclerViews_;
  jlong mPostTimeNs_;
  jlong mFrameIntervalNs_;
}

#pragma mark Public

- (void)addWithADXRecyclerView:(ADXRecyclerView *)recyclerView;

- (void)removeWithADXRecyclerView:(ADXRecyclerView *)recyclerView;

- (void)run;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

+ (jboolean)isPrefetchPositionAttachedWithADXRecyclerView:(ADXRecyclerView *)view
                                                  withInt:(jint)position;

/*!
 @brief Schedule a prefetch immediately after the current traversal.
 */
- (void)postFromTraversalWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                     withInt:(jint)prefetchDx
                                     withInt:(jint)prefetchDy;

- (void)prefetchWithLong:(jlong)deadlineNs;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ADXGapWorker)

J2OBJC_FIELD_SETTER(ADXGapWorker, mRecyclerViews_, JavaUtilArrayList *)

inline JavaLangThreadLocal *ADXGapWorker_get_sGapWorker(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaLangThreadLocal *ADXGapWorker_sGapWorker;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXGapWorker, sGapWorker, JavaLangThreadLocal *)

inline id<JavaUtilComparator> ADXGapWorker_get_sTaskComparator(void);
inline id<JavaUtilComparator> ADXGapWorker_set_sTaskComparator(id<JavaUtilComparator> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilComparator> ADXGapWorker_sTaskComparator;
J2OBJC_STATIC_FIELD_OBJ(ADXGapWorker, sTaskComparator, id<JavaUtilComparator>)

FOUNDATION_EXPORT void ADXGapWorker_initPackagePrivate(ADXGapWorker *self);

FOUNDATION_EXPORT ADXGapWorker *new_ADXGapWorker_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXGapWorker *create_ADXGapWorker_initPackagePrivate(void);

FOUNDATION_EXPORT jboolean ADXGapWorker_isPrefetchPositionAttachedWithADXRecyclerView_withInt_(ADXRecyclerView *view, jint position);

J2OBJC_TYPE_LITERAL_HEADER(ADXGapWorker)

@compatibility_alias AndroidxRecyclerviewWidgetGapWorker ADXGapWorker;

#endif

#if !defined (ADXGapWorker_Task_) && (INCLUDE_ALL_GapWorker || defined(INCLUDE_ADXGapWorker_Task))
#define ADXGapWorker_Task_

@class ADXRecyclerView;

@interface ADXGapWorker_Task : NSObject {
 @public
  jboolean immediate_;
  jint viewVelocity_;
  jint distanceToItem_;
  ADXRecyclerView *view_;
  jint position_;
}

#pragma mark Public

- (void)clear;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGapWorker_Task)

J2OBJC_FIELD_SETTER(ADXGapWorker_Task, view_, ADXRecyclerView *)

FOUNDATION_EXPORT void ADXGapWorker_Task_init(ADXGapWorker_Task *self);

FOUNDATION_EXPORT ADXGapWorker_Task *new_ADXGapWorker_Task_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXGapWorker_Task *create_ADXGapWorker_Task_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXGapWorker_Task)

#endif

#if !defined (ADXGapWorker_LayoutPrefetchRegistryImpl_) && (INCLUDE_ALL_GapWorker || defined(INCLUDE_ADXGapWorker_LayoutPrefetchRegistryImpl))
#define ADXGapWorker_LayoutPrefetchRegistryImpl_

#define RESTRICT_RecyclerView 1
#define INCLUDE_ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry 1
#include "RecyclerView.h"

@class ADXRecyclerView;
@class IOSIntArray;

/*!
 @brief Prefetch information associated with a specific RecyclerView.
 */
@interface ADXGapWorker_LayoutPrefetchRegistryImpl : NSObject < ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry > {
 @public
  jint mPrefetchDx_;
  jint mPrefetchDy_;
  IOSIntArray *mPrefetchArray_;
  jint mCount_;
}

#pragma mark Public

- (void)addPositionWithInt:(jint)layoutPosition
                   withInt:(jint)pixelDistance;

#pragma mark Package-Private

- (instancetype)init;

/*!
 @brief Called when prefetch indices are no longer valid for cache prioritization.
 */
- (void)clearPrefetchPositions;

- (void)collectPrefetchPositionsFromViewWithADXRecyclerView:(ADXRecyclerView *)view
                                                withBoolean:(jboolean)nested;

- (jboolean)lastPrefetchIncludedPositionWithInt:(jint)position;

- (void)setPrefetchVectorWithInt:(jint)dx
                         withInt:(jint)dy;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGapWorker_LayoutPrefetchRegistryImpl)

J2OBJC_FIELD_SETTER(ADXGapWorker_LayoutPrefetchRegistryImpl, mPrefetchArray_, IOSIntArray *)

FOUNDATION_EXPORT void ADXGapWorker_LayoutPrefetchRegistryImpl_init(ADXGapWorker_LayoutPrefetchRegistryImpl *self);

FOUNDATION_EXPORT ADXGapWorker_LayoutPrefetchRegistryImpl *new_ADXGapWorker_LayoutPrefetchRegistryImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXGapWorker_LayoutPrefetchRegistryImpl *create_ADXGapWorker_LayoutPrefetchRegistryImpl_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXGapWorker_LayoutPrefetchRegistryImpl)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GapWorker")
