//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\ListToIntArrayConverter.java
//

#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ListToIntArrayConverter.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@implementation ASListToIntArrayConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASListToIntArrayConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)convertFromWithId:(id<JavaUtilList>)list
                   withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                   withASIFragment:(id<ASIFragment>)fragment {
  if (list == nil) {
    return nil;
  }
  return [self convertIntegersWithJavaUtilList:list];
}

- (IOSIntArray *)convertIntegersWithJavaUtilList:(id<JavaUtilList>)integers {
  IOSIntArray *ret = [IOSIntArray arrayWithLength:[((id<JavaUtilList>) nil_chk(integers)) size]];
  for (jint i = 0; i < ret->size_; i++) {
    *IOSIntArray_GetRef(ret, i) = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([integers getWithInt:i], [JavaLangInteger class]))) intValue];
  }
  return ret;
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

- (id<JavaUtilList>)convertToWithId:(IOSIntArray *)value
                    withASIFragment:(id<ASIFragment>)fragment {
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ value } count:1 type:NSObject_class_()]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "[I", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertIntegersWithJavaUtilList:);
  methods[3].selector = @selector(getDependentAttributes);
  methods[4].selector = @selector(convertToWithId:withASIFragment:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LJavaUtilList;LJavaUtilMap;LASIFragment;", "(Ljava/util/List<Ljava/lang/Object;>;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)[I", "convertIntegers", "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/Object;>;)[I", "()Ljava/util/List<Ljava/lang/String;>;", "convertTo", "[ILASIFragment;", "([ILcom/ashera/core/IFragment;)Ljava/util/List<Ljava/lang/Object;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<[ILjava/util/List<Ljava/lang/Object;>;>;" };
  static const J2ObjcClassInfo _ASListToIntArrayConverter = { "ListToIntArrayConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, 10, -1 };
  return &_ASListToIntArrayConverter;
}

@end

void ASListToIntArrayConverter_init(ASListToIntArrayConverter *self) {
  NSObject_init(self);
}

ASListToIntArrayConverter *new_ASListToIntArrayConverter_init() {
  J2OBJC_NEW_IMPL(ASListToIntArrayConverter, init)
}

ASListToIntArrayConverter *create_ASListToIntArrayConverter_init() {
  J2OBJC_CREATE_IMPL(ASListToIntArrayConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASListToIntArrayConverter)
