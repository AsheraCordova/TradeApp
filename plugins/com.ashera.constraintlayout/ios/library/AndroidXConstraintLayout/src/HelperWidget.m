//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\HelperWidget.java
//

#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "Grouping.h"
#include "HelperWidget.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "WidgetGroup.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"


@implementation ADXHelperWidget

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXHelperWidget_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateConstraintsWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container {
}

- (void)addWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  if (widget == self || widget == nil) {
    return;
  }
  if (mWidgetsCount_ + 1 > ((IOSObjectArray *) nil_chk(mWidgets_))->size_) {
    JreStrongAssign(&mWidgets_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(mWidgets_, mWidgets_->size_ * 2));
  }
  IOSObjectArray_Set(nil_chk(mWidgets_), mWidgetsCount_, widget);
  mWidgetsCount_++;
}

- (void)copy__WithADXConstraintWidget:(ADXConstraintWidget *)src
                  withJavaUtilHashMap:(JavaUtilHashMap *)map {
  [super copy__WithADXConstraintWidget:src withJavaUtilHashMap:map];
  ADXHelperWidget *srcHelper = (ADXHelperWidget *) cast_chk(src, [ADXHelperWidget class]);
  mWidgetsCount_ = 0;
  jint count = ((ADXHelperWidget *) nil_chk(srcHelper))->mWidgetsCount_;
  for (jint i = 0; i < count; i++) {
    [self addWithADXConstraintWidget:[((JavaUtilHashMap *) nil_chk(map)) getWithId:IOSObjectArray_Get(nil_chk(srcHelper->mWidgets_), i)]];
  }
}

- (void)removeAllIds {
  mWidgetsCount_ = 0;
  JavaUtilArrays_fillWithNSObjectArray_withId_(mWidgets_, nil);
}

- (void)addDependentsWithJavaUtilArrayList:(JavaUtilArrayList *)dependencyLists
                                   withInt:(jint)orientation
                        withADXWidgetGroup:(ADXWidgetGroup *)group {
  for (jint i = 0; i < mWidgetsCount_; i++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(mWidgets_), i);
    [((ADXWidgetGroup *) nil_chk(group)) addWithADXConstraintWidget:widget];
  }
  for (jint i = 0; i < mWidgetsCount_; i++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(mWidgets_), i);
    ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(widget, orientation, dependencyLists, group);
  }
}

- (jint)findGroupInDependentsWithInt:(jint)orientation {
  for (jint i = 0; i < mWidgetsCount_; i++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(mWidgets_), i);
    if (orientation == ADXConstraintWidget_HORIZONTAL && ((ADXConstraintWidget *) nil_chk(widget))->horizontalGroup_ != -1) {
      return ((ADXConstraintWidget *) nil_chk(widget))->horizontalGroup_;
    }
    if (orientation == ADXConstraintWidget_VERTICAL && ((ADXConstraintWidget *) nil_chk(widget))->verticalGroup_ != -1) {
      return ((ADXConstraintWidget *) nil_chk(widget))->verticalGroup_;
    }
  }
  return -1;
}

- (void)dealloc {
  RELEASE_(mWidgets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "I", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(updateConstraintsWithADXConstraintWidgetContainer:);
  methods[2].selector = @selector(addWithADXConstraintWidget:);
  methods[3].selector = @selector(copy__WithADXConstraintWidget:withJavaUtilHashMap:);
  methods[4].selector = @selector(removeAllIds);
  methods[5].selector = @selector(addDependentsWithJavaUtilArrayList:withInt:withADXWidgetGroup:);
  methods[6].selector = @selector(findGroupInDependentsWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mWidgets_", "[LADXConstraintWidget;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWidgetsCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "updateConstraints", "LADXConstraintWidgetContainer;", "add", "LADXConstraintWidget;", "copy", "LADXConstraintWidget;LJavaUtilHashMap;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidget;Ljava/util/HashMap<Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "addDependents", "LJavaUtilArrayList;ILADXWidgetGroup;", "(Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;>;ILandroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;)V", "findGroupInDependents", "I" };
  static const J2ObjcClassInfo _ADXHelperWidget = { "HelperWidget", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x1, 7, 2, -1, -1, -1, -1, -1 };
  return &_ADXHelperWidget;
}

@end

void ADXHelperWidget_init(ADXHelperWidget *self) {
  ADXConstraintWidget_init(self);
  JreStrongAssignAndConsume(&self->mWidgets_, [IOSObjectArray newArrayWithLength:4 type:ADXConstraintWidget_class_()]);
  self->mWidgetsCount_ = 0;
}

ADXHelperWidget *new_ADXHelperWidget_init() {
  J2OBJC_NEW_IMPL(ADXHelperWidget, init)
}

ADXHelperWidget *create_ADXHelperWidget_init() {
  J2OBJC_CREATE_IMPL(ADXHelperWidget, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXHelperWidget)
