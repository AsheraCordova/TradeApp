//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\key\MotionKeyAttributes.java
//

#include "CustomVariable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MotionKey.h"
#include "MotionKeyAttributes.h"
#include "SplineSet.h"
#include "TypedValues.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"


@interface ADXMotionKeyAttributes () {
 @public
  NSString *mTransitionEasing_;
  jint mCurveFit_;
  jint mVisibility_;
  jfloat mAlpha_;
  jfloat mElevation_;
  jfloat mRotation_;
  jfloat mRotationX_;
  jfloat mRotationY_;
  jfloat mPivotX_;
  jfloat mPivotY_;
  jfloat mTransitionPathRotate_;
  jfloat mScaleX_;
  jfloat mScaleY_;
  jfloat mTranslationX_;
  jfloat mTranslationY_;
  jfloat mTranslationZ_;
  jfloat mProgress_;
}

- (jfloat)getFloatValueWithInt:(jint)id_;

@end

J2OBJC_FIELD_SETTER(ADXMotionKeyAttributes, mTransitionEasing_, NSString *)

inline NSString *ADXMotionKeyAttributes_get_TAG(void);
static NSString *ADXMotionKeyAttributes_TAG = @"KeyAttributes";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyAttributes, TAG, NSString *)

inline jboolean ADXMotionKeyAttributes_get_DEBUG(void);
#define ADXMotionKeyAttributes_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionKeyAttributes, DEBUG, jboolean)

__attribute__((unused)) static jfloat ADXMotionKeyAttributes_getFloatValueWithInt_(ADXMotionKeyAttributes *self, jint id_);

NSString *ADXMotionKeyAttributes_NAME = @"KeyAttribute";

@implementation ADXMotionKeyAttributes

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionKeyAttributes_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)getAttributeNamesWithJavaUtilHashSet:(JavaUtilHashSet *)attributes {
  if (!JavaLangFloat_isNaNWithFloat_(mAlpha_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_ALPHA];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mElevation_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_ELEVATION];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotation_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_ROTATION_Z];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotationX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_ROTATION_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotationY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_ROTATION_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mPivotX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_PIVOT_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mPivotY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_PIVOT_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_TRANSLATION_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_TRANSLATION_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationZ_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_TRANSLATION_Z];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTransitionPathRotate_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_PATH_ROTATE];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mScaleX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_SCALE_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mScaleY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_SCALE_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mProgress_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Attributes_S_PROGRESS];
  }
  if ([((JavaUtilHashMap *) nil_chk(mCustom_)) size] > 0) {
    for (NSString * __strong s in nil_chk([((JavaUtilHashMap *) nil_chk(mCustom_)) keySet])) {
      [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:JreStrcat("$C$", ADXTypedValues_S_CUSTOM, ',', s)];
    }
  }
}

- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines {
  for (NSString * __strong s in nil_chk([((JavaUtilHashMap *) nil_chk(splines)) keySet])) {
    ADXSplineSet *splineSet = JreRetainedLocalValue([splines getWithId:s]);
    if (splineSet == nil) {
      continue;
    }
    if ([((NSString *) nil_chk(s)) java_hasPrefix:ADXTypedValues_Attributes_S_CUSTOM]) {
      NSString *cKey = [s java_substring:[((NSString *) nil_chk(ADXTypedValues_Attributes_S_CUSTOM)) java_length] + 1];
      ADXCustomVariable *cValue = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mCustom_)) getWithId:cKey]);
      if (cValue != nil) {
        [((ADXSplineSet_CustomSpline *) cast_chk(splineSet, [ADXSplineSet_CustomSpline class])) setPointWithInt:mFramePosition_ withADXCustomVariable:cValue];
      }
      continue;
    }
    switch (JreIndexOfStr(s, (id[]){ ADXTypedValues_Attributes_S_ALPHA, ADXTypedValues_Attributes_S_ELEVATION, ADXTypedValues_Attributes_S_ROTATION_Z, ADXTypedValues_Attributes_S_ROTATION_X, ADXTypedValues_Attributes_S_ROTATION_Y, ADXTypedValues_Attributes_S_PIVOT_X, ADXTypedValues_Attributes_S_PIVOT_Y, ADXTypedValues_Attributes_S_PATH_ROTATE, ADXTypedValues_Attributes_S_SCALE_X, ADXTypedValues_Attributes_S_SCALE_Y, ADXTypedValues_Attributes_S_TRANSLATION_X, ADXTypedValues_Attributes_S_TRANSLATION_Y, ADXTypedValues_Attributes_S_TRANSLATION_Z, ADXTypedValues_Attributes_S_PROGRESS }, 14)) {
      case 0:
      if (!JavaLangFloat_isNaNWithFloat_(mAlpha_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mAlpha_];
      }
      break;
      case 1:
      if (!JavaLangFloat_isNaNWithFloat_(mElevation_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mElevation_];
      }
      break;
      case 2:
      if (!JavaLangFloat_isNaNWithFloat_(mRotation_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mRotation_];
      }
      break;
      case 3:
      if (!JavaLangFloat_isNaNWithFloat_(mRotationX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mRotationX_];
      }
      break;
      case 4:
      if (!JavaLangFloat_isNaNWithFloat_(mRotationY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mRotationY_];
      }
      break;
      case 5:
      if (!JavaLangFloat_isNaNWithFloat_(mRotationX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mPivotX_];
      }
      break;
      case 6:
      if (!JavaLangFloat_isNaNWithFloat_(mRotationY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mPivotY_];
      }
      break;
      case 7:
      if (!JavaLangFloat_isNaNWithFloat_(mTransitionPathRotate_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTransitionPathRotate_];
      }
      break;
      case 8:
      if (!JavaLangFloat_isNaNWithFloat_(mScaleX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mScaleX_];
      }
      break;
      case 9:
      if (!JavaLangFloat_isNaNWithFloat_(mScaleY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mScaleY_];
      }
      break;
      case 10:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationX_];
      }
      break;
      case 11:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationY_];
      }
      break;
      case 12:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationZ_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationZ_];
      }
      break;
      case 13:
      if (!JavaLangFloat_isNaNWithFloat_(mProgress_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mProgress_];
      }
      break;
      default:
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"not supported by KeyAttributes ", s)];
    }
  }
}

- (ADXMotionKey *)java_clone {
  return nil;
}

- (jboolean)setValueWithInt:(jint)type
                    withInt:(jint)value {
  switch (type) {
    case ADXTypedValues_Attributes_TYPE_VISIBILITY:
    mVisibility_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_CURVE_FIT:
    mCurveFit_ = value;
    break;
    case ADXTypedValues_TYPE_FRAME_POSITION:
    mFramePosition_ = value;
    break;
    default:
    if (![self setValueWithInt:type withInt:value]) {
      return [super setValueWithInt:type withInt:value];
    }
  }
  return true;
}

- (jboolean)setValueWithInt:(jint)type
                  withFloat:(jfloat)value {
  switch (type) {
    case ADXTypedValues_Attributes_TYPE_ALPHA:
    mAlpha_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_X:
    mTranslationX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Y:
    mTranslationY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Z:
    mTranslationZ_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ELEVATION:
    mElevation_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ROTATION_X:
    mRotationX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Y:
    mRotationY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Z:
    mRotation_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_SCALE_X:
    mScaleX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_SCALE_Y:
    mScaleY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PIVOT_X:
    mPivotX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PIVOT_Y:
    mPivotY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PROGRESS:
    mProgress_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PATH_ROTATE:
    mTransitionPathRotate_ = value;
    break;
    case ADXTypedValues_TYPE_FRAME_POSITION:
    mTransitionPathRotate_ = value;
    break;
    default:
    return [super setValueWithInt:type withFloat:value];
  }
  return true;
}

- (void)setInterpolationWithJavaUtilHashMap:(JavaUtilHashMap *)interpolation {
  if (!JavaLangFloat_isNaNWithFloat_(mAlpha_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_ALPHA withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mElevation_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_ELEVATION withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotation_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_ROTATION_Z withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotationX_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_ROTATION_X withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotationY_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_ROTATION_Y withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mPivotX_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_PIVOT_X withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mPivotY_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_PIVOT_Y withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationX_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_TRANSLATION_X withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationY_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_TRANSLATION_Y withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationZ_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_TRANSLATION_Z withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTransitionPathRotate_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_PATH_ROTATE withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mScaleX_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_SCALE_X withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mScaleY_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_SCALE_Y withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mProgress_)) {
    [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:ADXTypedValues_Attributes_S_PROGRESS withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
  }
  if ([((JavaUtilHashMap *) nil_chk(mCustom_)) size] > 0) {
    for (NSString * __strong s in nil_chk([((JavaUtilHashMap *) nil_chk(mCustom_)) keySet])) {
      [((JavaUtilHashMap *) nil_chk(interpolation)) putWithId:JreStrcat("$C$", ADXTypedValues_Attributes_S_CUSTOM, ',', s) withId:JavaLangInteger_valueOfWithInt_(mCurveFit_)];
    }
  }
}

- (jboolean)setValueWithInt:(jint)type
               withNSString:(NSString *)value {
  switch (type) {
    case ADXTypedValues_Attributes_TYPE_EASING:
    JreStrongAssign(&mTransitionEasing_, value);
    break;
    case ADXTypedValues_TYPE_TARGET:
    JreStrongAssign(&mTargetString_, value);
    break;
    default:
    return [super setValueWithInt:type withNSString:value];
  }
  return true;
}

- (jint)getIdWithNSString:(NSString *)name {
  return ADXTypedValues_Attributes_getIdWithNSString_(name);
}

- (jint)getCurveFit {
  return mCurveFit_;
}

- (void)printAttributes {
  JavaUtilHashSet *nameSet = create_JavaUtilHashSet_init();
  [self getAttributeNamesWithJavaUtilHashSet:nameSet];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$", @" ------------- ", mFramePosition_, @" -------------")];
  IOSObjectArray *names = [nameSet toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]];
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(names))->size_; i++) {
    jint id_ = ADXTypedValues_Attributes_getIdWithNSString_(IOSObjectArray_Get(names, i));
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$CF", IOSObjectArray_Get(names, i), ':', ADXMotionKeyAttributes_getFloatValueWithInt_(self, id_))];
  }
}

- (jfloat)getFloatValueWithInt:(jint)id_ {
  return ADXMotionKeyAttributes_getFloatValueWithInt_(self, id_);
}

- (void)dealloc {
  RELEASE_(mTransitionEasing_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LADXMotionKey;", 0x1, 6, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, 7, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 15, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAttributeNamesWithJavaUtilHashSet:);
  methods[2].selector = @selector(addValuesWithJavaUtilHashMap:);
  methods[3].selector = @selector(java_clone);
  methods[4].selector = @selector(setValueWithInt:withInt:);
  methods[5].selector = @selector(setValueWithInt:withFloat:);
  methods[6].selector = @selector(setInterpolationWithJavaUtilHashMap:);
  methods[7].selector = @selector(setValueWithInt:withNSString:);
  methods[8].selector = @selector(getIdWithNSString:);
  methods[9].selector = @selector(getCurveFit);
  methods[10].selector = @selector(printAttributes);
  methods[11].selector = @selector(getFloatValueWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 17, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXMotionKeyAttributes_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "mTransitionEasing_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurveFit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVisibility_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAlpha_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mElevation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotationX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotationY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPivotX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPivotY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionPathRotate_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScaleX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScaleY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranslationX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranslationY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranslationZ_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mProgress_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KEY_TYPE", "I", .constantValue.asInt = ADXMotionKeyAttributes_KEY_TYPE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getAttributeNames", "LJavaUtilHashSet;", "(Ljava/util/HashSet<Ljava/lang/String;>;)V", "addValues", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/utils/SplineSet;>;)V", "clone", "setValue", "II", "IF", "setInterpolation", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;)V", "ILNSString;", "getId", "LNSString;", "getFloatValue", "I", &ADXMotionKeyAttributes_NAME, &ADXMotionKeyAttributes_TAG };
  static const J2ObjcClassInfo _ADXMotionKeyAttributes = { "MotionKeyAttributes", "androidx.constraintlayout.core.motion.key", ptrTable, methods, fields, 7, 0x1, 12, 21, -1, -1, -1, -1, -1 };
  return &_ADXMotionKeyAttributes;
}

@end

void ADXMotionKeyAttributes_init(ADXMotionKeyAttributes *self) {
  ADXMotionKey_init(self);
  self->mCurveFit_ = -1;
  self->mVisibility_ = 0;
  self->mAlpha_ = JavaLangFloat_NaN;
  self->mElevation_ = JavaLangFloat_NaN;
  self->mRotation_ = JavaLangFloat_NaN;
  self->mRotationX_ = JavaLangFloat_NaN;
  self->mRotationY_ = JavaLangFloat_NaN;
  self->mPivotX_ = JavaLangFloat_NaN;
  self->mPivotY_ = JavaLangFloat_NaN;
  self->mTransitionPathRotate_ = JavaLangFloat_NaN;
  self->mScaleX_ = JavaLangFloat_NaN;
  self->mScaleY_ = JavaLangFloat_NaN;
  self->mTranslationX_ = JavaLangFloat_NaN;
  self->mTranslationY_ = JavaLangFloat_NaN;
  self->mTranslationZ_ = JavaLangFloat_NaN;
  self->mProgress_ = JavaLangFloat_NaN;
  {
    self->mType_ = ADXMotionKeyAttributes_KEY_TYPE;
    JreStrongAssignAndConsume(&self->mCustom_, new_JavaUtilHashMap_init());
  }
}

ADXMotionKeyAttributes *new_ADXMotionKeyAttributes_init() {
  J2OBJC_NEW_IMPL(ADXMotionKeyAttributes, init)
}

ADXMotionKeyAttributes *create_ADXMotionKeyAttributes_init() {
  J2OBJC_CREATE_IMPL(ADXMotionKeyAttributes, init)
}

jfloat ADXMotionKeyAttributes_getFloatValueWithInt_(ADXMotionKeyAttributes *self, jint id_) {
  switch (id_) {
    case ADXTypedValues_Attributes_TYPE_ALPHA:
    return self->mAlpha_;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_X:
    return self->mTranslationX_;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Y:
    return self->mTranslationY_;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Z:
    return self->mTranslationZ_;
    case ADXTypedValues_Attributes_TYPE_ELEVATION:
    return self->mElevation_;
    case ADXTypedValues_Attributes_TYPE_ROTATION_X:
    return self->mRotationX_;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Y:
    return self->mRotationY_;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Z:
    return self->mRotation_;
    case ADXTypedValues_Attributes_TYPE_SCALE_X:
    return self->mScaleX_;
    case ADXTypedValues_Attributes_TYPE_SCALE_Y:
    return self->mScaleY_;
    case ADXTypedValues_Attributes_TYPE_PIVOT_X:
    return self->mPivotX_;
    case ADXTypedValues_Attributes_TYPE_PIVOT_Y:
    return self->mPivotY_;
    case ADXTypedValues_Attributes_TYPE_PROGRESS:
    return self->mProgress_;
    case ADXTypedValues_Attributes_TYPE_PATH_ROTATE:
    return self->mTransitionPathRotate_;
    case ADXTypedValues_TYPE_FRAME_POSITION:
    return self->mFramePosition_;
    default:
    return JavaLangFloat_NaN;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionKeyAttributes)
