//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\content\res\ColorStateList.java
//

#include "Color.h"
#include "ColorStateList.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "R.h"
#include "SparseArray.h"
#include "StateSet.h"
#include "java/lang/ref/WeakReference.h"


@interface ADColorStateList () {
 @public
  IOSObjectArray *mThemeAttrs_;
  jint mChangingConfigurations_;
  IOSObjectArray *mStateSpecs_;
  IOSIntArray *mColors_;
  jint mDefaultColor_;
  jboolean mIsOpaque_;
}

- (instancetype)init;

@end

J2OBJC_FIELD_SETTER(ADColorStateList, mThemeAttrs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADColorStateList, mStateSpecs_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADColorStateList, mColors_, IOSIntArray *)

inline jint ADColorStateList_get_DEFAULT_COLOR(void);
#define ADColorStateList_DEFAULT_COLOR -65536
J2OBJC_STATIC_FIELD_CONSTANT(ADColorStateList, DEFAULT_COLOR, jint)

inline IOSObjectArray *ADColorStateList_get_EMPTY(void);
static IOSObjectArray *ADColorStateList_EMPTY;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADColorStateList, EMPTY, IOSObjectArray *)

inline ADSparseArray *ADColorStateList_get_sCache(void);
static ADSparseArray *ADColorStateList_sCache;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADColorStateList, sCache, ADSparseArray *)

__attribute__((unused)) static void ADColorStateList_init(ADColorStateList *self);

__attribute__((unused)) static ADColorStateList *new_ADColorStateList_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADColorStateList *create_ADColorStateList_init(void);

J2OBJC_INITIALIZED_DEFN(ADColorStateList)

@implementation ADColorStateList

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADColorStateList_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithIntArray2:(IOSObjectArray *)states
                     withIntArray:(IOSIntArray *)colors {
  ADColorStateList_initWithIntArray2_withIntArray_(self, states, colors);
  return self;
}

+ (ADColorStateList *)valueOfWithInt:(jint)color {
  return ADColorStateList_valueOfWithInt_(color);
}

- (ADColorStateList *)withAlphaWithInt:(jint)alpha {
  IOSIntArray *colors = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(mColors_))->size_];
  jint len = colors->size_;
  for (jint i = 0; i < len; i++) {
    *IOSIntArray_GetRef(colors, i) = (IOSIntArray_Get(mColors_, i) & (jint) 0xFFFFFF) | (JreLShift32(alpha, 24));
  }
  return create_ADColorStateList_initWithIntArray2_withIntArray_(mStateSpecs_, colors);
}

- (jboolean)isStateful {
  return ((IOSObjectArray *) nil_chk(mStateSpecs_))->size_ >= 1 && ((IOSIntArray *) nil_chk(IOSObjectArray_Get(mStateSpecs_, 0)))->size_ > 0;
}

- (jboolean)hasFocusStateSpecified {
  return ADStateSet_containsAttributeWithIntArray2_withInt_(mStateSpecs_, ADR_attr_state_focused);
}

- (jboolean)isOpaque {
  return mIsOpaque_;
}

- (jint)getColorForStateWithIntArray:(IOSIntArray *)stateSet
                             withInt:(jint)defaultColor {
  jint setLength = ((IOSObjectArray *) nil_chk(mStateSpecs_))->size_;
  for (jint i = 0; i < setLength; i++) {
    IOSIntArray *stateSpec = IOSObjectArray_Get(nil_chk(mStateSpecs_), i);
    if (ADStateSet_stateSetMatchesWithIntArray_withIntArray_(stateSpec, stateSet)) {
      return IOSIntArray_Get(nil_chk(mColors_), i);
    }
  }
  return defaultColor;
}

- (jint)getDefaultColor {
  return mDefaultColor_;
}

- (IOSObjectArray *)getStates {
  return mStateSpecs_;
}

- (IOSIntArray *)getColors {
  return mColors_;
}

- (jboolean)hasStateWithInt:(jint)state {
  IOSObjectArray *stateSpecs = mStateSpecs_;
  jint specCount = ((IOSObjectArray *) nil_chk(stateSpecs))->size_;
  for (jint specIndex = 0; specIndex < specCount; specIndex++) {
    IOSIntArray *states = IOSObjectArray_Get(stateSpecs, specIndex);
    jint stateCount = ((IOSIntArray *) nil_chk(states))->size_;
    for (jint stateIndex = 0; stateIndex < stateCount; stateIndex++) {
      if (IOSIntArray_Get(states, stateIndex) == state || IOSIntArray_Get(states, stateIndex) == ~state) {
        return true;
      }
    }
  }
  return false;
}

- (void)onColorsChanged {
  jint defaultColor = ADColorStateList_DEFAULT_COLOR;
  jboolean isOpaque = true;
  IOSObjectArray *states = mStateSpecs_;
  IOSIntArray *colors = mColors_;
  jint N = ((IOSObjectArray *) nil_chk(states))->size_;
  if (N > 0) {
    defaultColor = IOSIntArray_Get(nil_chk(colors), 0);
    for (jint i = N - 1; i > 0; i--) {
      if (((IOSIntArray *) nil_chk(IOSObjectArray_Get(states, i)))->size_ == 0) {
        defaultColor = IOSIntArray_Get(colors, i);
        break;
      }
    }
    for (jint i = 0; i < N; i++) {
      if (ADColor_alphaWithInt_(IOSIntArray_Get(colors, i)) != (jint) 0xFF) {
        isOpaque = false;
        break;
      }
    }
  }
  mDefaultColor_ = defaultColor;
  mIsOpaque_ = isOpaque;
}

- (void)setDefaultColorWithInt:(jint)mDefaultColor {
  self->mDefaultColor_ = mDefaultColor;
}

- (void)dealloc {
  RELEASE_(mThemeAttrs_);
  RELEASE_(mStateSpecs_);
  RELEASE_(mColors_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithIntArray2:withIntArray:);
  methods[2].selector = @selector(valueOfWithInt:);
  methods[3].selector = @selector(withAlphaWithInt:);
  methods[4].selector = @selector(isStateful);
  methods[5].selector = @selector(hasFocusStateSpecified);
  methods[6].selector = @selector(isOpaque);
  methods[7].selector = @selector(getColorForStateWithIntArray:withInt:);
  methods[8].selector = @selector(getDefaultColor);
  methods[9].selector = @selector(getStates);
  methods[10].selector = @selector(getColors);
  methods[11].selector = @selector(hasStateWithInt:);
  methods[12].selector = @selector(onColorsChanged);
  methods[13].selector = @selector(setDefaultColorWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_COLOR", "I", .constantValue.asInt = ADColorStateList_DEFAULT_COLOR, 0x1a, -1, -1, -1, -1 },
    { "EMPTY", "[[I", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "sCache", "LADSparseArray;", .constantValue.asLong = 0, 0x1a, -1, 9, 10, -1 },
    { "mThemeAttrs_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangingConfigurations_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStateSpecs_", "[[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColors_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsOpaque_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[[I[I", "valueOf", "I", "withAlpha", "getColorForState", "[II", "hasState", "setDefaultColor", &ADColorStateList_EMPTY, &ADColorStateList_sCache, "Lr/android/util/SparseArray<Ljava/lang/ref/WeakReference<Lr/android/content/res/ColorStateList;>;>;" };
  static const J2ObjcClassInfo _ADColorStateList = { "ColorStateList", "r.android.content.res", ptrTable, methods, fields, 7, 0x1, 14, 9, -1, -1, -1, -1, -1 };
  return &_ADColorStateList;
}

+ (void)initialize {
  if (self == [ADColorStateList class]) {
    JreStrongAssignAndConsume(&ADColorStateList_EMPTY, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSIntArray arrayWithLength:0] } count:1 type:IOSClass_intArray(1)]);
    JreStrongAssignAndConsume(&ADColorStateList_sCache, new_ADSparseArray_init());
    J2OBJC_SET_INITIALIZED(ADColorStateList)
  }
}

@end

void ADColorStateList_init(ADColorStateList *self) {
  NSObject_init(self);
}

ADColorStateList *new_ADColorStateList_init() {
  J2OBJC_NEW_IMPL(ADColorStateList, init)
}

ADColorStateList *create_ADColorStateList_init() {
  J2OBJC_CREATE_IMPL(ADColorStateList, init)
}

void ADColorStateList_initWithIntArray2_withIntArray_(ADColorStateList *self, IOSObjectArray *states, IOSIntArray *colors) {
  NSObject_init(self);
  JreStrongAssign(&self->mStateSpecs_, states);
  JreStrongAssign(&self->mColors_, colors);
  [self onColorsChanged];
}

ADColorStateList *new_ADColorStateList_initWithIntArray2_withIntArray_(IOSObjectArray *states, IOSIntArray *colors) {
  J2OBJC_NEW_IMPL(ADColorStateList, initWithIntArray2_withIntArray_, states, colors)
}

ADColorStateList *create_ADColorStateList_initWithIntArray2_withIntArray_(IOSObjectArray *states, IOSIntArray *colors) {
  J2OBJC_CREATE_IMPL(ADColorStateList, initWithIntArray2_withIntArray_, states, colors)
}

ADColorStateList *ADColorStateList_valueOfWithInt_(jint color) {
  ADColorStateList_initialize();
  @synchronized(ADColorStateList_sCache) {
    jint index = [((ADSparseArray *) nil_chk(ADColorStateList_sCache)) indexOfKeyWithInt:color];
    if (index >= 0) {
      ADColorStateList *cached = [((JavaLangRefWeakReference *) nil_chk([ADColorStateList_sCache valueAtWithInt:index])) get];
      if (cached != nil) {
        return JreRetainedLocalValue(cached);
      }
      [ADColorStateList_sCache removeAtWithInt:index];
    }
    jint N = [ADColorStateList_sCache size];
    for (jint i = N - 1; i >= 0; i--) {
      if ([((JavaLangRefWeakReference *) nil_chk([ADColorStateList_sCache valueAtWithInt:i])) get] == nil) {
        [ADColorStateList_sCache removeAtWithInt:i];
      }
    }
    ADColorStateList *csl = create_ADColorStateList_initWithIntArray2_withIntArray_(ADColorStateList_EMPTY, [IOSIntArray arrayWithInts:(jint[]){ color } count:1]);
    [ADColorStateList_sCache putWithInt:color withId:create_JavaLangRefWeakReference_initWithId_(csl)];
    return JreRetainedLocalValue(csl);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADColorStateList)
