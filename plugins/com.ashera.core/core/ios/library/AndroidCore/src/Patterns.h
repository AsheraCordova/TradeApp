//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Patterns.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Patterns")
#ifdef RESTRICT_Patterns
#define INCLUDE_ALL_Patterns 0
#else
#define INCLUDE_ALL_Patterns 1
#endif
#undef RESTRICT_Patterns

#if !defined (ADPatterns_) && (INCLUDE_ALL_Patterns || defined(INCLUDE_ADPatterns))
#define ADPatterns_

@class JavaUtilRegexMatcher;
@class JavaUtilRegexPattern;

/*!
 @brief Commonly used regular expression patterns.
 */
@interface ADPatterns : NSObject

#pragma mark Public

/*!
 @brief Convenience method to take all of the non-null matching groups in a
   regex Matcher and return them as a concatenated string.
 @param matcher The Matcher object from which grouped text will                       be extracted
 @return A String comprising all of the non-null matched
                       groups concatenated together
 */
+ (NSString *)concatGroupsWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher;

/*!
 @brief Convenience method to return only the digits and plus signs
  in the matching string.
 @param matcher The Matcher object from which digits and plus will                      be extracted
 @return A String comprising all of the digits and plus in
                      the match
 */
+ (NSString *)digitsAndPlusOnlyWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher;

@end

J2OBJC_STATIC_INIT(ADPatterns)

/*!
 @brief Regular expression to match all IANA top-level domains.
 List accurate as of 2011/07/18.  List taken from:
   http://data.iana.org/TLD/tlds-alpha-by-domain.txt
   This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
 */
inline NSString *ADPatterns_get_TOP_LEVEL_DOMAIN_STR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADPatterns_TOP_LEVEL_DOMAIN_STR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, TOP_LEVEL_DOMAIN_STR, NSString *)

/*!
 @brief Regular expression pattern to match all IANA top-level domains.
 */
inline JavaUtilRegexPattern *ADPatterns_get_TOP_LEVEL_DOMAIN(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_TOP_LEVEL_DOMAIN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, TOP_LEVEL_DOMAIN, JavaUtilRegexPattern *)

/*!
 @brief Regular expression to match all IANA top-level domains for WEB_URL.
 List accurate as of 2011/07/18.  List taken from:
   http://data.iana.org/TLD/tlds-alpha-by-domain.txt
   This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
 */
inline NSString *ADPatterns_get_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADPatterns_TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, TOP_LEVEL_DOMAIN_STR_FOR_WEB_URL, NSString *)

/*!
 @brief Regular expression to match all IANA top-level domains.
 List accurate as of 2015/11/24.  List taken from:
   http://data.iana.org/TLD/tlds-alpha-by-domain.txt
   This pattern is auto-generated by frameworks/ex/common/tools/make-iana-tld-pattern.py
 */
inline NSString *ADPatterns_get_IANA_TOP_LEVEL_DOMAINS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADPatterns_IANA_TOP_LEVEL_DOMAINS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, IANA_TOP_LEVEL_DOMAINS, NSString *)

/*!
 @brief Kept for backward compatibility reasons.
 */
inline NSString *ADPatterns_get_GOOD_IRI_CHAR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADPatterns_GOOD_IRI_CHAR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, GOOD_IRI_CHAR, NSString *)

/*!
 @brief Kept for backward compatibility reasons.It does not match IPv6 addresses.
 */
inline JavaUtilRegexPattern *ADPatterns_get_IP_ADDRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_IP_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, IP_ADDRESS, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ADPatterns_get_DOMAIN_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_DOMAIN_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, DOMAIN_NAME, JavaUtilRegexPattern *)

/*!
 @brief Regular expression pattern to match most part of RFC 3987
   Internationalized URLs, aka IRIs.
 */
inline JavaUtilRegexPattern *ADPatterns_get_WEB_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_WEB_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, WEB_URL, JavaUtilRegexPattern *)

/*!
 @brief Regular expression pattern to match IRIs.If a string starts with http(s):// the expression
  tries to match the URL structure with a relaxed rule for TLDs.
 If the string does not start
  with http(s):// the TLDs are expected to be one of the known TLDs.
 */
inline JavaUtilRegexPattern *ADPatterns_get_AUTOLINK_WEB_URL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_AUTOLINK_WEB_URL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, AUTOLINK_WEB_URL, JavaUtilRegexPattern *)

/*!
 @brief Regular expression pattern to match email addresses.It excludes double quoted local parts
  and the special characters #&~!
 ^`{}/=$*?| that are included in RFC5321.
 */
inline JavaUtilRegexPattern *ADPatterns_get_AUTOLINK_EMAIL_ADDRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_AUTOLINK_EMAIL_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, AUTOLINK_EMAIL_ADDRESS, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ADPatterns_get_EMAIL_ADDRESS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_EMAIL_ADDRESS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, EMAIL_ADDRESS, JavaUtilRegexPattern *)

/*!
 @brief This pattern is intended for searching for things that look like they
  might be phone numbers in arbitrary text, not for validating whether
  something is in fact a phone number.It will miss many things that
  are legitimate phone numbers.
 <p> The pattern matches the following: 
 <ul>
  <li>Optionally, a + sign followed immediately by one or more digits. Spaces, dots, or dashes
  may follow. 
 <li>Optionally, sets of digits in parentheses, separated by spaces, dots, or dashes. 
 <li>A string starting and ending with a digit, containing digits, spaces, dots, and/or dashes. 
 </ul>
 */
inline JavaUtilRegexPattern *ADPatterns_get_PHONE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT JavaUtilRegexPattern *ADPatterns_PHONE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADPatterns, PHONE, JavaUtilRegexPattern *)

FOUNDATION_EXPORT NSString *ADPatterns_concatGroupsWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher);

FOUNDATION_EXPORT NSString *ADPatterns_digitsAndPlusOnlyWithJavaUtilRegexMatcher_(JavaUtilRegexMatcher *matcher);

J2OBJC_TYPE_LITERAL_HEADER(ADPatterns)

@compatibility_alias RAndroidUtilPatterns ADPatterns;

#endif

#pragma pop_macro("INCLUDE_ALL_Patterns")
