//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\Utils.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Utils.h"
#include "java/io/IOException.h"
#include "java/io/OutputStream.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"
#include "java/net/Socket.h"


@interface ADXUtils ()

+ (jint)clampWithInt:(jint)c;

@end

__attribute__((unused)) static jint ADXUtils_clampWithInt_(jint c);

@implementation ADXUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)logWithNSString:(NSString *)tag
           withNSString:(NSString *)value {
  ADXUtils_logWithNSString_withNSString_(tag, value);
}

+ (void)logeWithNSString:(NSString *)tag
            withNSString:(NSString *)value {
  ADXUtils_logeWithNSString_withNSString_(tag, value);
}

+ (void)socketSendWithNSString:(NSString *)str {
  ADXUtils_socketSendWithNSString_(str);
}

+ (jint)clampWithInt:(jint)c {
  return ADXUtils_clampWithInt_(c);
}

- (jint)getInterpolatedColorWithFloatArray:(IOSFloatArray *)value {
  jint r = ADXUtils_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(nil_chk(value), 0), 1.0 / 2.2) * 255.0f)));
  jint g = ADXUtils_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 1), 1.0 / 2.2) * 255.0f)));
  jint b = ADXUtils_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 2), 1.0 / 2.2) * 255.0f)));
  jint a = ADXUtils_clampWithInt_(JreFpToInt((IOSFloatArray_Get(value, 3) * 255.0f)));
  jint color = (JreLShift32(a, 24)) | (JreLShift32(r, 16)) | (JreLShift32(g, 8)) | b;
  return color;
}

+ (jint)rgbaTocColorWithFloat:(jfloat)r
                    withFloat:(jfloat)g
                    withFloat:(jfloat)b
                    withFloat:(jfloat)a {
  return ADXUtils_rgbaTocColorWithFloat_withFloat_withFloat_withFloat_(r, g, b, a);
}

+ (void)logStackWithNSString:(NSString *)msg
                     withInt:(jint)n {
  ADXUtils_logStackWithNSString_withInt_(msg, n);
}

+ (void)logWithNSString:(NSString *)str {
  ADXUtils_logWithNSString_(str);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(logWithNSString:withNSString:);
  methods[2].selector = @selector(logeWithNSString:withNSString:);
  methods[3].selector = @selector(socketSendWithNSString:);
  methods[4].selector = @selector(clampWithInt:);
  methods[5].selector = @selector(getInterpolatedColorWithFloatArray:);
  methods[6].selector = @selector(rgbaTocColorWithFloat:withFloat:withFloat:withFloat:);
  methods[7].selector = @selector(logStackWithNSString:withInt:);
  methods[8].selector = @selector(logWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "log", "LNSString;LNSString;", "loge", "socketSend", "LNSString;", "clamp", "I", "getInterpolatedColor", "[F", "rgbaTocColor", "FFFF", "logStack", "LNSString;I" };
  static const J2ObjcClassInfo _ADXUtils = { "Utils", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_ADXUtils;
}

@end

void ADXUtils_init(ADXUtils *self) {
  NSObject_init(self);
}

ADXUtils *new_ADXUtils_init() {
  J2OBJC_NEW_IMPL(ADXUtils, init)
}

ADXUtils *create_ADXUtils_init() {
  J2OBJC_CREATE_IMPL(ADXUtils, init)
}

void ADXUtils_logWithNSString_withNSString_(NSString *tag, NSString *value) {
  ADXUtils_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", tag, @" : ", value)];
}

void ADXUtils_logeWithNSString_withNSString_(NSString *tag, NSString *value) {
  ADXUtils_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$$", tag, @" : ", value)];
}

void ADXUtils_socketSendWithNSString_(NSString *str) {
  ADXUtils_initialize();
  @try {
    JavaNetSocket *socket = create_JavaNetSocket_initWithNSString_withInt_(@"127.0.0.1", 5327);
    JavaIoOutputStream *out = JreRetainedLocalValue([socket getOutputStream]);
    [((JavaIoOutputStream *) nil_chk(out)) writeWithByteArray:[((NSString *) nil_chk(str)) java_getBytes]];
    [out close];
  }
  @catch (JavaIoIOException *e) {
    [e printStackTrace];
  }
}

jint ADXUtils_clampWithInt_(jint c) {
  ADXUtils_initialize();
  jint N = 255;
  c &= ~(JreRShift32(c, 31));
  c -= N;
  c &= (JreRShift32(c, 31));
  c += N;
  return c;
}

jint ADXUtils_rgbaTocColorWithFloat_withFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b, jfloat a) {
  ADXUtils_initialize();
  jint ir = ADXUtils_clampWithInt_(JreFpToInt((r * 255.0f)));
  jint ig = ADXUtils_clampWithInt_(JreFpToInt((g * 255.0f)));
  jint ib = ADXUtils_clampWithInt_(JreFpToInt((b * 255.0f)));
  jint ia = ADXUtils_clampWithInt_(JreFpToInt((a * 255.0f)));
  jint color = (JreLShift32(ia, 24)) | (JreLShift32(ir, 16)) | (JreLShift32(ig, 8)) | ib;
  return color;
}

void ADXUtils_logStackWithNSString_withInt_(NSString *msg, jint n) {
  ADXUtils_initialize();
  IOSObjectArray *st = [create_JavaLangThrowable_init() getStackTrace];
  NSString *s = @" ";
  n = JavaLangMath_minWithInt_withInt_(n, ((IOSObjectArray *) nil_chk(st))->size_ - 1);
  for (jint i = 1; i <= n; i++) {
    JavaLangStackTraceElement *ste = IOSObjectArray_Get(st, i);
    NSString *stack = JreStrcat("$$CI$$", @".(", [((JavaLangStackTraceElement *) nil_chk(IOSObjectArray_Get(st, i))) getFileName], ':', [((JavaLangStackTraceElement *) nil_chk(IOSObjectArray_Get(st, i))) getLineNumber], @") ", [((JavaLangStackTraceElement *) nil_chk(IOSObjectArray_Get(st, i))) getMethodName]);
    JreStrAppend(&s, "$", @" ");
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$$", msg, s, stack, s)];
  }
}

void ADXUtils_logWithNSString_(NSString *str) {
  ADXUtils_initialize();
  JavaLangStackTraceElement *s = IOSObjectArray_Get(nil_chk([create_JavaLangThrowable_init() getStackTrace]), 1);
  NSString *ss = JreStrcat("$$CI$$", @".(", [((JavaLangStackTraceElement *) nil_chk(s)) getFileName], ':', [s getLineNumber], @") ", [s getMethodName]);
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$C$", ss, ' ', str)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXUtils)
