//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSJSONAdapter\src\main\java\com\ashera\jsonadapter\NSMutableArrayList.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "NSMutableArrayList.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/RuntimeException.h"
#include "java/util/AbstractList.h"
#include "java/util/Collection.h"
#include "java/util/ConcurrentModificationException.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/ListIterator.h"
#include "java/util/NoSuchElementException.h"
#include "java/util/function/Consumer.h"

@protocol JavaUtilFunctionConsumer;


@interface ASNSMutableArrayList ()

- (id)getNativeArrayWithId:(id)nsarray;

- (void)removeObjectAtIndexWithInt:(jint)index;

@end

__attribute__((unused)) static id ASNSMutableArrayList_getNativeArrayWithId_(ASNSMutableArrayList *self, id nsarray);

__attribute__((unused)) static void ASNSMutableArrayList_removeObjectAtIndexWithInt_(ASNSMutableArrayList *self, jint index);

@interface ASNSMutableArrayList_Itr : NSObject < JavaUtilIterator > {
 @public
  ASNSMutableArrayList *this$0_;
  jint limit_;
  jint cursor_;
  jint lastRet_;
  jint expectedModCount_;
}

- (instancetype)initWithASNSMutableArrayList:(ASNSMutableArrayList *)outer$;

- (jboolean)hasNext;

- (id)next;

- (void)remove;

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)consumer;

@end

J2OBJC_EMPTY_STATIC_INIT(ASNSMutableArrayList_Itr)

__attribute__((unused)) static void ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(ASNSMutableArrayList_Itr *self, ASNSMutableArrayList *outer$);

__attribute__((unused)) static ASNSMutableArrayList_Itr *new_ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(ASNSMutableArrayList *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNSMutableArrayList_Itr *create_ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(ASNSMutableArrayList *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASNSMutableArrayList_Itr)

/*!
 @brief An optimized version of AbstractList.ListItr
 */
@interface ASNSMutableArrayList_ListItr : ASNSMutableArrayList_Itr < JavaUtilListIterator > {
 @public
  ASNSMutableArrayList *this$1_;
}

- (instancetype)initWithASNSMutableArrayList:(ASNSMutableArrayList *)outer$
                                     withInt:(jint)index;

- (jboolean)hasPrevious;

- (jint)nextIndex;

- (jint)previousIndex;

- (id)previous;

- (void)setWithId:(id)e;

- (void)addWithId:(id)e;

@end

J2OBJC_EMPTY_STATIC_INIT(ASNSMutableArrayList_ListItr)

__attribute__((unused)) static void ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(ASNSMutableArrayList_ListItr *self, ASNSMutableArrayList *outer$, jint index);

__attribute__((unused)) static ASNSMutableArrayList_ListItr *new_ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(ASNSMutableArrayList *outer$, jint index) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASNSMutableArrayList_ListItr *create_ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(ASNSMutableArrayList *outer$, jint index);

J2OBJC_TYPE_LITERAL_HEADER(ASNSMutableArrayList_ListItr)

@implementation ASNSMutableArrayList

@synthesize nsmutableArray = nsmutableArray_;

- (instancetype)init {
  if ((self = [super init])) {
    nsmutableArray_ = [NSMutableArray array];
  }
  return self;
}

- (id)getNsmutableArray {
  return nsmutableArray_;
}

- (instancetype)initWithId:(id)nsmutableArray {
  ASNSMutableArrayList_initWithId_(self, nsmutableArray);
  return self;
}

- (jint)size {
  return (int) [(NSMutableArray*)self->nsmutableArray_ count];
}

- (jboolean)isEmpty {
  return nsmutableArray_ == nil || [self size] == 0;
}

- (jboolean)containsWithId:(id)o {
  return [(NSMutableArray*)self->nsmutableArray_ containsObject:o];
}

- (id<JavaUtilIterator>)iterator {
  return new_ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(self);
}

- (IOSObjectArray *)toArray {
  return (IOSObjectArray *) cast_check(ASNSMutableArrayList_getNativeArrayWithId_(self, nsmutableArray_), IOSClass_arrayType(NSObject_class_(), 1));
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)a {
  return (IOSObjectArray *) cast_check(ASNSMutableArrayList_getNativeArrayWithId_(self, nsmutableArray_), IOSClass_arrayType(NSObject_class_(), 1));
}

- (id)getNativeArrayWithId:(id)nsarray {
  return ASNSMutableArrayList_getNativeArrayWithId_(self, nsarray);
}

- (jboolean)addWithId:(id)e {
  [self addWithInt:-1 withId:e];
  return true;
}

- (jboolean)removeWithId:(id)o {
  jint i = [self indexOfWithId:o];
  if (i >= 0) {
    [self removeObjectWithId:o];
    return true;
  }
  return false;
}

- (void)removeObjectWithId:(id)e {
  [(NSMutableArray*)self->nsmutableArray_ removeObject:e];
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super containsAllWithJavaUtilCollection:c];
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super addAllWithJavaUtilCollection:c];
}

- (jboolean)addAllWithInt:(jint)index
   withJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super addAllWithInt:index withJavaUtilCollection:c];
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super removeAllWithJavaUtilCollection:c];
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)c {
  return [super retainAllWithJavaUtilCollection:c];
}

- (void)clear {
  [(NSMutableArray*)self->nsmutableArray_ removeAllObjects];
}

- (id)getWithInt:(jint)index {
  return [(NSMutableArray*)self->nsmutableArray_ objectAtIndex:index];;
}

- (id)setWithInt:(jint)index
          withId:(id)element {
  id oldValue = [self getWithInt:index];
  [self nativeSetWithInt:index withId:element];
  return oldValue;
}

- (void)nativeSetWithInt:(jint)index
                  withId:(id)element {
  [(NSMutableArray*)self->nsmutableArray_ replaceObjectAtIndex:index withObject:element];
}

- (void)addWithInt:(jint)index
            withId:(id)element {
  if (index == -1) {
    [(NSMutableArray*)self->nsmutableArray_ addObject:element];
  } else {
    [(NSMutableArray*)self->nsmutableArray_ insertObject:element atIndex:index];
  }
}

- (id)removeWithInt:(jint)index {
  id oldValue = [self getWithInt:index];
  ASNSMutableArrayList_removeObjectAtIndexWithInt_(self, index);
  return oldValue;
}

- (void)removeObjectAtIndexWithInt:(jint)index {
  ASNSMutableArrayList_removeObjectAtIndexWithInt_(self, index);
}

- (jint)indexOfWithId:(id)o {
  return (int) [(NSMutableArray*)self->nsmutableArray_ indexOfObject: o];
}

- (jint)lastIndexOfWithId:(id)o {
  NSMutableArray* rArray=[[[(NSMutableArray*)self->nsmutableArray_ reverseObjectEnumerator] allObjects] mutableCopy];
  return (int) [rArray indexOfObject:o];
}

- (id<JavaUtilListIterator>)listIterator {
  return new_ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(self, 0);
}

- (id<JavaUtilListIterator>)listIteratorWithInt:(jint)index {
  return new_ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(self, index);
}

- (id<JavaUtilList>)subListWithInt:(jint)fromIndex
                           withInt:(jint)toIndex {
  return [super subListWithInt:fromIndex withInt:toIndex];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LNSObject;", 0x102, 6, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 0, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, 9, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 10, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 14, 12, -1, 15, -1, -1 },
    { NULL, "Z", 0x1, 14, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, 18, 12, -1, 13, -1, -1 },
    { NULL, "Z", 0x1, 19, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 20, 21, -1, 22, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, 24, -1, 25, -1, -1 },
    { NULL, "V", 0x101, 26, 24, -1, 27, -1, -1 },
    { NULL, "V", 0x101, 7, 24, -1, 27, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 21, -1, 22, -1, -1 },
    { NULL, "V", 0x102, 28, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x101, 29, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x101, 30, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, -1, -1, -1, 31, -1, -1 },
    { NULL, "LJavaUtilListIterator;", 0x1, 32, 21, -1, 33, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 34, 35, -1, 36, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getNsmutableArray);
  methods[1].selector = @selector(initWithId:);
  methods[2].selector = @selector(size);
  methods[3].selector = @selector(isEmpty);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(iterator);
  methods[6].selector = @selector(toArray);
  methods[7].selector = @selector(toArrayWithNSObjectArray:);
  methods[8].selector = @selector(getNativeArrayWithId:);
  methods[9].selector = @selector(addWithId:);
  methods[10].selector = @selector(removeWithId:);
  methods[11].selector = @selector(removeObjectWithId:);
  methods[12].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[13].selector = @selector(addAllWithJavaUtilCollection:);
  methods[14].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[15].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[16].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[17].selector = @selector(clear);
  methods[18].selector = @selector(getWithInt:);
  methods[19].selector = @selector(setWithInt:withId:);
  methods[20].selector = @selector(nativeSetWithInt:withId:);
  methods[21].selector = @selector(addWithInt:withId:);
  methods[22].selector = @selector(removeWithInt:);
  methods[23].selector = @selector(removeObjectAtIndexWithInt:);
  methods[24].selector = @selector(indexOfWithId:);
  methods[25].selector = @selector(lastIndexOfWithId:);
  methods[26].selector = @selector(listIterator);
  methods[27].selector = @selector(listIteratorWithInt:);
  methods[28].selector = @selector(subListWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "nsmutableArray_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSObject;", "contains", "()Ljava/util/Iterator<TE;>;", "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "getNativeArray", "add", "(TE;)Z", "remove", "removeObject", "containsAll", "LJavaUtilCollection;", "(Ljava/util/Collection<*>;)Z", "addAll", "(Ljava/util/Collection<+TE;>;)Z", "ILJavaUtilCollection;", "(ILjava/util/Collection<+TE;>;)Z", "removeAll", "retainAll", "get", "I", "(I)TE;", "set", "ILNSObject;", "(ITE;)TE;", "nativeSet", "(ITE;)V", "removeObjectAtIndex", "indexOf", "lastIndexOf", "()Ljava/util/ListIterator<TE;>;", "listIterator", "(I)Ljava/util/ListIterator<TE;>;", "subList", "II", "(II)Ljava/util/List<TE;>;", "LASNSMutableArrayList_Itr;LASNSMutableArrayList_ListItr;", "<E:Ljava/lang/Object;>Ljava/util/AbstractList<TE;>;" };
  static const J2ObjcClassInfo _ASNSMutableArrayList = { "NSMutableArrayList", "com.ashera.jsonadapter", ptrTable, methods, fields, 7, 0x1, 29, 1, -1, 37, -1, 38, -1 };
  return &_ASNSMutableArrayList;
}

@end

void ASNSMutableArrayList_initWithId_(ASNSMutableArrayList *self, id nsmutableArray) {
  JavaUtilAbstractList_init(self);
  self->nsmutableArray_ = nsmutableArray;
}

ASNSMutableArrayList *new_ASNSMutableArrayList_initWithId_(id nsmutableArray) {
  J2OBJC_NEW_IMPL(ASNSMutableArrayList, initWithId_, nsmutableArray)
}

ASNSMutableArrayList *create_ASNSMutableArrayList_initWithId_(id nsmutableArray) {
  J2OBJC_CREATE_IMPL(ASNSMutableArrayList, initWithId_, nsmutableArray)
}

id ASNSMutableArrayList_getNativeArrayWithId_(ASNSMutableArrayList *self, id nsarray) {
  return [IOSObjectArray arrayWithNSArray:nsarray type:[IOSClass forName: @"java.lang.Object"]];
}

void ASNSMutableArrayList_removeObjectAtIndexWithInt_(ASNSMutableArrayList *self, jint index) {
  [(NSMutableArray*)self->nsmutableArray_ removeObjectAtIndex:index];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNSMutableArrayList)

@implementation ASNSMutableArrayList_Itr

- (instancetype)initWithASNSMutableArrayList:(ASNSMutableArrayList *)outer$ {
  ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  return cursor_ < limit_;
}

- (id)next {
  if (this$0_->modCount_ != expectedModCount_) @throw new_JavaUtilConcurrentModificationException_init();
  jint i = cursor_;
  if (i >= limit_) @throw new_JavaUtilNoSuchElementException_init();
  cursor_ = i + 1;
  return [this$0_ getWithInt:lastRet_ = i];
}

- (void)remove {
  if (lastRet_ < 0) @throw new_JavaLangIllegalStateException_init();
  if (this$0_->modCount_ != expectedModCount_) @throw new_JavaUtilConcurrentModificationException_init();
  @try {
    (void) [this$0_ removeWithInt:lastRet_];
    cursor_ = lastRet_;
    lastRet_ = -1;
    expectedModCount_ = this$0_->modCount_;
    limit_--;
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw new_JavaUtilConcurrentModificationException_init();
  }
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)consumer {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Unimplemented");
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNSMutableArrayList:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(forEachRemainingWithJavaUtilFunctionConsumer:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASNSMutableArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 5, -1 },
    { "limit_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "cursor_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastRet_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "expectedModCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASNSMutableArrayList;", "()TE;", "forEachRemaining", "LJavaUtilFunctionConsumer;", "(Ljava/util/function/Consumer<-TE;>;)V", "Lcom/ashera/jsonadapter/NSMutableArrayList<TE;>;", "Ljava/lang/Object;Ljava/util/Iterator<TE;>;" };
  static const J2ObjcClassInfo _ASNSMutableArrayList_Itr = { "Itr", "com.ashera.jsonadapter", ptrTable, methods, fields, 7, 0x2, 5, 5, 0, -1, -1, 6, -1 };
  return &_ASNSMutableArrayList_Itr;
}

@end

void ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(ASNSMutableArrayList_Itr *self, ASNSMutableArrayList *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->limit_ = [outer$ size];
  self->lastRet_ = -1;
  self->expectedModCount_ = outer$->modCount_;
}

ASNSMutableArrayList_Itr *new_ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(ASNSMutableArrayList *outer$) {
  J2OBJC_NEW_IMPL(ASNSMutableArrayList_Itr, initWithASNSMutableArrayList_, outer$)
}

ASNSMutableArrayList_Itr *create_ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(ASNSMutableArrayList *outer$) {
  J2OBJC_CREATE_IMPL(ASNSMutableArrayList_Itr, initWithASNSMutableArrayList_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNSMutableArrayList_Itr)

@implementation ASNSMutableArrayList_ListItr

- (instancetype)initWithASNSMutableArrayList:(ASNSMutableArrayList *)outer$
                                     withInt:(jint)index {
  ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(self, outer$, index);
  return self;
}

- (jboolean)hasPrevious {
  return cursor_ != 0;
}

- (jint)nextIndex {
  return cursor_;
}

- (jint)previousIndex {
  return cursor_ - 1;
}

- (id)previous {
  if (this$1_->modCount_ != expectedModCount_) @throw new_JavaUtilConcurrentModificationException_init();
  jint i = cursor_ - 1;
  if (i < 0) @throw new_JavaUtilNoSuchElementException_init();
  cursor_ = i;
  return [this$1_ getWithInt:lastRet_ = i];
}

- (void)setWithId:(id)e {
  if (lastRet_ < 0) @throw new_JavaLangIllegalStateException_init();
  if (this$1_->modCount_ != expectedModCount_) @throw new_JavaUtilConcurrentModificationException_init();
  @try {
    (void) [this$1_ setWithInt:lastRet_ withId:e];
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw new_JavaUtilConcurrentModificationException_init();
  }
}

- (void)addWithId:(id)e {
  if (this$1_->modCount_ != expectedModCount_) @throw new_JavaUtilConcurrentModificationException_init();
  @try {
    jint i = cursor_;
    [this$1_ addWithInt:i withId:e];
    cursor_ = i + 1;
    lastRet_ = -1;
    expectedModCount_ = this$1_->modCount_;
    limit_++;
  }
  @catch (JavaLangIndexOutOfBoundsException *ex) {
    @throw new_JavaUtilConcurrentModificationException_init();
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASNSMutableArrayList:withInt:);
  methods[1].selector = @selector(hasPrevious);
  methods[2].selector = @selector(nextIndex);
  methods[3].selector = @selector(previousIndex);
  methods[4].selector = @selector(previous);
  methods[5].selector = @selector(setWithId:);
  methods[6].selector = @selector(addWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LASNSMutableArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LASNSMutableArrayList;I", "()TE;", "set", "LNSObject;", "(TE;)V", "add", "Lcom/ashera/jsonadapter/NSMutableArrayList<TE;>;", "LASNSMutableArrayList;", "Lcom/ashera/jsonadapter/NSMutableArrayList$Itr;Ljava/util/ListIterator<TE;>;" };
  static const J2ObjcClassInfo _ASNSMutableArrayList_ListItr = { "ListItr", "com.ashera.jsonadapter", ptrTable, methods, fields, 7, 0x2, 7, 1, 7, -1, -1, 8, -1 };
  return &_ASNSMutableArrayList_ListItr;
}

@end

void ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(ASNSMutableArrayList_ListItr *self, ASNSMutableArrayList *outer$, jint index) {
  self->this$1_ = outer$;
  ASNSMutableArrayList_Itr_initWithASNSMutableArrayList_(self, outer$);
  self->cursor_ = index;
}

ASNSMutableArrayList_ListItr *new_ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(ASNSMutableArrayList *outer$, jint index) {
  J2OBJC_NEW_IMPL(ASNSMutableArrayList_ListItr, initWithASNSMutableArrayList_withInt_, outer$, index)
}

ASNSMutableArrayList_ListItr *create_ASNSMutableArrayList_ListItr_initWithASNSMutableArrayList_withInt_(ASNSMutableArrayList *outer$, jint index) {
  J2OBJC_CREATE_IMPL(ASNSMutableArrayList_ListItr, initWithASNSMutableArrayList_withInt_, outer$, index)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASNSMutableArrayList_ListItr)
