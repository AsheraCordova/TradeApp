//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCapInsetsPlugin\src\main\java\com\ashera\capinsets\CapInsetsCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "CapInsetsCommandConverter.h"
#include "Drawable.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"


@interface ASCapInsetsCommandConverter () {
 @public
  jint capInsetsStretchTop_;
  jint capInsetsStretchBottom_;
  jint capInsetsStretchLeft_;
  jint capInsetsStretchRight_;
}

- (id)nativeLoadImageBundleWithId:(id)image
                          withInt:(jint)top
                          withInt:(jint)bottom
                          withInt:(jint)left
                          withInt:(jint)right;

@end

__attribute__((unused)) static id ASCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(ASCapInsetsCommandConverter *self, id image, jint top, jint bottom, jint left, jint right);

@implementation ASCapInsetsCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASCapInsetsCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  jboolean isNinePatch = capInsetsStretchTop_ != 0 || capInsetsStretchBottom_ != 0 || capInsetsStretchLeft_ != 0 || capInsetsStretchRight_ != 0;
  if (isNinePatch) {
    if ([value isKindOfClass:[ADDrawable class]]) {
      value = [((ADDrawable *) nil_chk(((ADDrawable *) value))) getDrawable];
    }
    return ASCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(self, value, capInsetsStretchTop_, capInsetsStretchBottom_, capInsetsStretchLeft_, capInsetsStretchRight_);
  }
  return value;
}

- (id)nativeLoadImageBundleWithId:(id)image
                          withInt:(jint)top
                          withInt:(jint)bottom
                          withInt:(jint)left
                          withInt:(jint)right {
  return ASCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(self, image, top, bottom, left, right);
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASCapInsetsCommandConverter *capInsetsCommandConverter = new_ASCapInsetsCommandConverter_initWithNSString_(self->id__);
  [capInsetsCommandConverter updateArgsWithNSObjectArray:args];
  return capInsetsCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i += 2) {
    id attributeName = IOSObjectArray_Get(args, i);
    if ([nil_chk(attributeName) isEqual:@"capInsetsTop"]) {
      capInsetsStretchTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
    if ([attributeName isEqual:@"capInsetsBottom"]) {
      capInsetsStretchBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
    if ([attributeName isEqual:@"capInsetsLeft"]) {
      capInsetsStretchLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
    if ([attributeName isEqual:@"capInsetsRight"]) {
      capInsetsStretchRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(nativeLoadImageBundleWithId:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "capInsetsStretchTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capInsetsStretchBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capInsetsStretchLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capInsetsStretchRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "nativeLoadImageBundle", "LNSObject;IIII", "newInstance", "[LNSObject;", "updateArgs" };
  static const J2ObjcClassInfo _ASCapInsetsCommandConverter = { "CapInsetsCommandConverter", "com.ashera.capinsets", ptrTable, methods, fields, 7, 0x1, 5, 4, -1, -1, -1, -1, -1 };
  return &_ASCapInsetsCommandConverter;
}

@end

void ASCapInsetsCommandConverter_initWithNSString_(ASCapInsetsCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASCapInsetsCommandConverter *new_ASCapInsetsCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASCapInsetsCommandConverter, initWithNSString_, id_)
}

ASCapInsetsCommandConverter *create_ASCapInsetsCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASCapInsetsCommandConverter, initWithNSString_, id_)
}

id ASCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(ASCapInsetsCommandConverter *self, id image, jint top, jint bottom, jint left, jint right) {
  if ([image isKindOfClass:[UIImage class]]) {
    return [(UIImage*) image resizableImageWithCapInsets:UIEdgeInsetsMake(top, left, bottom, right) resizingMode:UIImageResizingModeStretch];
  } else {
    return image;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCapInsetsCommandConverter)
