//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\DrawImageCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "DrawImageCommandConverter.h"
#include "Drawable.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"

#include <UIKit/UIKit.h>
#include "CGRectWrapper.h"


@interface ASDrawImageCommandConverter () {
 @public
  id rectObj_;
}

- (void)drawImageWithId:(id)image;

@end

J2OBJC_FIELD_SETTER(ASDrawImageCommandConverter, rectObj_, id)

__attribute__((unused)) static void ASDrawImageCommandConverter_drawImageWithId_(ASDrawImageCommandConverter *self, id image);

@implementation ASDrawImageCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASDrawImageCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (value == nil) {
    return value;
  }
  if ([value isKindOfClass:[ADDrawable class]]) {
    ADDrawable *drawable = (ADDrawable *) value;
    value = [drawable getDrawable];
  }
  ASDrawImageCommandConverter_drawImageWithId_(self, value);
  return value;
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASDrawImageCommandConverter *drawImageCommandConverter = new_ASDrawImageCommandConverter_initWithNSString_(self->id__);
  [drawImageCommandConverter setPriorityWithInt:1000];
  return drawImageCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
}

- (void)drawImageWithId:(id)image {
  ASDrawImageCommandConverter_drawImageWithId_(self, image);
}

- (void)updatePhaseArgsWithNSObjectArray:(IOSObjectArray *)args {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i += 2) {
    id attributeName = IOSObjectArray_Get(args, i);
    if ([nil_chk(attributeName) isEqual:@"rect"]) {
      rectObj_ = IOSObjectArray_Get(args, i + 1);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(executeAfterPostMeasure);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  methods[5].selector = @selector(drawImageWithId:);
  methods[6].selector = @selector(updatePhaseArgsWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rectObj_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs", "drawImage", "LNSObject;", "updatePhaseArgs" };
  static const J2ObjcClassInfo _ASDrawImageCommandConverter = { "DrawImageCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_ASDrawImageCommandConverter;
}

@end

void ASDrawImageCommandConverter_initWithNSString_(ASDrawImageCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASDrawImageCommandConverter *new_ASDrawImageCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASDrawImageCommandConverter, initWithNSString_, id_)
}

ASDrawImageCommandConverter *create_ASDrawImageCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASDrawImageCommandConverter, initWithNSString_, id_)
}

void ASDrawImageCommandConverter_drawImageWithId_(ASDrawImageCommandConverter *self, id image) {
  if ([image isKindOfClass:UIImage.class]) {
    CGRect rect = ((CGRectWrapper*) self->rectObj_).rect;
    [((UIImage*) image) drawInRect:rect];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawImageCommandConverter)
