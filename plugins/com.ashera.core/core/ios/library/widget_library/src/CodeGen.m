//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/ramm/git/core-widget_library/widget_library/build/classes/com/ashera/codegen/CodeGen.java
//

#include "CodeGen.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Method.h"

@implementation ComAsheraCodegenCodeGen

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ComAsheraCodegenCodeGen_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  ComAsheraCodegenCodeGen_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;" };
  static const J2ObjcClassInfo _ComAsheraCodegenCodeGen = { "CodeGen", "com.ashera.codegen", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_ComAsheraCodegenCodeGen;
}

@end

void ComAsheraCodegenCodeGen_init(ComAsheraCodegenCodeGen *self) {
  NSObject_init(self);
}

ComAsheraCodegenCodeGen *new_ComAsheraCodegenCodeGen_init() {
  J2OBJC_NEW_IMPL(ComAsheraCodegenCodeGen, init)
}

ComAsheraCodegenCodeGen *create_ComAsheraCodegenCodeGen_init() {
  J2OBJC_CREATE_IMPL(ComAsheraCodegenCodeGen, init)
}

void ComAsheraCodegenCodeGen_mainWithNSStringArray_(IOSObjectArray *args) {
  ComAsheraCodegenCodeGen_initialize();
  if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(args), 0))) isEqual:@"--plugingen"]) {
    JavaLangStringBuffer *stringBuffer = new_JavaLangStringBuffer_init();
    (void) [stringBuffer appendWithNSString:@"switch (name) {\n"];
    {
      IOSObjectArray *a__ = [((IOSClass *) nil_chk(IOSClass_forName_(IOSObjectArray_Get(args, 1)))) getMethods];
      JavaLangReflectMethod * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      JavaLangReflectMethod * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        JavaLangReflectMethod *m = *b__++;
        (void) [stringBuffer appendWithNSString:JreStrcat("$$$", @"case \"", [((JavaLangReflectMethod *) nil_chk(m)) getName], @"\":\n")];
        if ([m getReturnType] != [IOSClass voidClass]) {
          (void) [stringBuffer appendWithNSString:@"return "];
        }
        (void) [stringBuffer appendWithNSString:JreStrcat("$C", [m getName], '(')];
        NSString *seperator = @"";
        jint pos = 0;
        {
          IOSObjectArray *a__ = [m getParameterTypes];
          IOSClass * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          IOSClass * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            IOSClass *type = *b__++;
            (void) [stringBuffer appendWithNSString:JreStrcat("$C$$IC", seperator, '(', [((IOSClass *) nil_chk(type)) getName], @") args[", pos, ']')];
            seperator = @",";
            pos++;
          }
        }
        (void) [stringBuffer appendWithNSString:@");\n"];
        if ([m getReturnType] == [IOSClass voidClass]) {
          (void) [stringBuffer appendWithNSString:@"break; "];
        }
      }
    }
    (void) [stringBuffer appendWithNSString:@"default:break; }throw new RuntimeException(\"Unknown method \" + name);"];
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:stringBuffer];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ComAsheraCodegenCodeGen)
