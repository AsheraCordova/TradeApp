//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\content\res\Resources.java
//

#include "Configuration.h"
#include "DisplayMetrics.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "R.h"
#include "Resources.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Exception.h"


J2OBJC_INITIALIZED_DEFN(ADResources)

ADDisplayMetrics *ADResources_displayMetric;

@implementation ADResources

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADResources_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getIdentifierWithNSString:(NSString *)string
                     withNSString:(NSString *)string2
                     withNSString:(NSString *)name {
  return 1;
}

- (NSString *)getResourceNameWithInt:(jint)id_ {
  return @"";
}

- (ADConfiguration *)getConfiguration {
  return create_ADConfiguration_init();
}

- (NSString *)getStringWithInt:(jint)resource
                  withNSString:(NSString *)text {
  if (resource == JreLoadStatic(ADR_string, negative_duration)) {
    return NSString_java_formatWithNSString_withNSObjectArray_(@"-%s", [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:NSObject_class_()]);
  }
  return nil;
}

- (NSString *)getResourceEntryNameWithInt:(jint)id_ {
  return nil;
}

- (ADDisplayMetrics *)getDisplayMetrics {
  if (((ADDisplayMetrics *) nil_chk(ADResources_displayMetric))->density_ == 0) {
    ADResources_displayMetric->density_ = ASPluginInvoker_getDisplayMetricDensity();
  }
  return ADResources_displayMetric;
}

- (id<JavaLangCharSequence>)getStringWithInt:(jint)titleRes {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "LADConfiguration;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, 3, 4, -1, -1, -1 },
    { NULL, "LADDisplayMetrics;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharSequence;", 0x1, 5, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getIdentifierWithNSString:withNSString:withNSString:);
  methods[2].selector = @selector(getResourceNameWithInt:);
  methods[3].selector = @selector(getConfiguration);
  methods[4].selector = @selector(getStringWithInt:withNSString:);
  methods[5].selector = @selector(getResourceEntryNameWithInt:);
  methods[6].selector = @selector(getDisplayMetrics);
  methods[7].selector = @selector(getStringWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "displayMetric", "LADDisplayMetrics;", .constantValue.asLong = 0, 0x8, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "getIdentifier", "LNSString;LNSString;LNSString;", "getResourceName", "I", "LADResources_NotFoundException;", "getString", "ILNSString;", "getResourceEntryName", &ADResources_displayMetric };
  static const J2ObjcClassInfo _ADResources = { "Resources", "r.android.content.res", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, 4, -1, -1, -1 };
  return &_ADResources;
}

+ (void)initialize {
  if (self == [ADResources class]) {
    JreStrongAssignAndConsume(&ADResources_displayMetric, new_ADDisplayMetrics_init());
    J2OBJC_SET_INITIALIZED(ADResources)
  }
}

@end

void ADResources_init(ADResources *self) {
  NSObject_init(self);
}

ADResources *new_ADResources_init() {
  J2OBJC_NEW_IMPL(ADResources, init)
}

ADResources *create_ADResources_init() {
  J2OBJC_CREATE_IMPL(ADResources, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADResources)

@implementation ADResources_NotFoundException

- (instancetype)initWithADResources:(ADResources *)outer$ {
  ADResources_NotFoundException_initWithADResources_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADResources:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADResources;" };
  static const J2ObjcClassInfo _ADResources_NotFoundException = { "NotFoundException", "r.android.content.res", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADResources_NotFoundException;
}

@end

void ADResources_NotFoundException_initWithADResources_(ADResources_NotFoundException *self, ADResources *outer$) {
  JavaLangException_init(self);
}

ADResources_NotFoundException *new_ADResources_NotFoundException_initWithADResources_(ADResources *outer$) {
  J2OBJC_NEW_IMPL(ADResources_NotFoundException, initWithADResources_, outer$)
}

ADResources_NotFoundException *create_ADResources_NotFoundException_initWithADResources_(ADResources *outer$) {
  J2OBJC_CREATE_IMPL(ADResources_NotFoundException, initWithADResources_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADResources_NotFoundException)
