//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\css_parser\src\com\ashera\css\ParseException.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ParseException")
#ifdef RESTRICT_ParseException
#define INCLUDE_ALL_ParseException 0
#else
#define INCLUDE_ALL_ParseException 1
#endif
#undef RESTRICT_ParseException

#if !defined (CSSParseException_) && (INCLUDE_ALL_ParseException || defined(INCLUDE_CSSParseException))
#define CSSParseException_

#define RESTRICT_JavaLangException 1
#define INCLUDE_JavaLangException 1
#include "java/lang/Exception.h"

@class CSSToken;
@class IOSObjectArray;
@class JavaLangThrowable;

/*!
 @brief This exception is thrown when parse errors are encountered.
 You can explicitly create objects of this exception type by
  calling the method generateParseException in the generated
  parser.
  You can modify this class to customize your error reporting
  mechanisms so long as you retain the public fields.
 */
@interface CSSParseException : JavaLangException {
 @public
  /*!
   @brief This is the last token that has been consumed successfully.If
  this object has been created due to a parse error, the token
  followng this token will (therefore) be the first error token.
   */
  CSSToken *currentToken_;
  /*!
   @brief Each entry in this array is an array of integers.Each array
  of integers represents a sequence of tokens (by their ordinal
  values) that is expected at this point of the parse.
   */
  IOSObjectArray *expectedTokenSequences_;
  /*!
   @brief This is a reference to the "tokenImage" array of the generated
  parser within which the parse error occurred.This array is
  defined in the generated ...Constants interface.
   */
  IOSObjectArray *tokenImage_;
  /*!
   @brief The end of line string for this machine.
   */
  NSString *eol_;
}

#pragma mark Public

/*!
 @brief The following constructors are for use by you for whatever
  purpose you can think of.Constructing the exception in this
  manner makes the exception behave in the normal way - i.e., as
  documented in the class "Throwable".
 The fields "errorToken",
  "expectedTokenSequences", and "tokenImage" do not contain
  relevant information.  The JavaCC generated code does not use
  these constructors.
 */
- (instancetype)init;

/*!
 @brief Constructor with message.
 */
- (instancetype)initWithNSString:(NSString *)message;

/*!
 @brief This constructor is used by the method "generateParseException"
  in the generated parser.Calling this constructor generates
  a new object of this type with the fields "currentToken",
  "expectedTokenSequences", and "tokenImage" set.
 */
- (instancetype)initWithCSSToken:(CSSToken *)currentTokenVal
                   withIntArray2:(IOSObjectArray *)expectedTokenSequencesVal
               withNSStringArray:(IOSObjectArray *)tokenImageVal;

#pragma mark Package-Private

/*!
 @brief Used to convert raw characters to their escaped version
  when these raw version cannot be used as part of an ASCII
  string literal.
 */
+ (NSString *)add_escapesWithNSString:(NSString *)str;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaLangThrowable:(JavaLangThrowable *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
           withJavaLangThrowable:(JavaLangThrowable *)arg1
                     withBoolean:(jboolean)arg2
                     withBoolean:(jboolean)arg3 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(CSSParseException)

J2OBJC_FIELD_SETTER(CSSParseException, currentToken_, CSSToken *)
J2OBJC_FIELD_SETTER(CSSParseException, expectedTokenSequences_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CSSParseException, tokenImage_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(CSSParseException, eol_, NSString *)

FOUNDATION_EXPORT void CSSParseException_initWithCSSToken_withIntArray2_withNSStringArray_(CSSParseException *self, CSSToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal);

FOUNDATION_EXPORT CSSParseException *new_CSSParseException_initWithCSSToken_withIntArray2_withNSStringArray_(CSSToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CSSParseException *create_CSSParseException_initWithCSSToken_withIntArray2_withNSStringArray_(CSSToken *currentTokenVal, IOSObjectArray *expectedTokenSequencesVal, IOSObjectArray *tokenImageVal);

FOUNDATION_EXPORT void CSSParseException_init(CSSParseException *self);

FOUNDATION_EXPORT CSSParseException *new_CSSParseException_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CSSParseException *create_CSSParseException_init(void);

FOUNDATION_EXPORT void CSSParseException_initWithNSString_(CSSParseException *self, NSString *message);

FOUNDATION_EXPORT CSSParseException *new_CSSParseException_initWithNSString_(NSString *message) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT CSSParseException *create_CSSParseException_initWithNSString_(NSString *message);

FOUNDATION_EXPORT NSString *CSSParseException_add_escapesWithNSString_(NSString *str);

J2OBJC_TYPE_LITERAL_HEADER(CSSParseException)

@compatibility_alias ComAsheraCssParseException CSSParseException;

#endif

#pragma pop_macro("INCLUDE_ALL_ParseException")
