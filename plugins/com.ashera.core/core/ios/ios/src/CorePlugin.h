//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCorePlugin\src\main\java\com\ashera\core\CorePlugin.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CorePlugin")
#ifdef RESTRICT_CorePlugin
#define INCLUDE_ALL_CorePlugin 0
#else
#define INCLUDE_ALL_CorePlugin 1
#endif
#undef RESTRICT_CorePlugin

#if !defined (ASCorePlugin_) && (INCLUDE_ALL_CorePlugin || defined(INCLUDE_ASCorePlugin))
#define ASCorePlugin_

#define RESTRICT_IPlugin 1
#define INCLUDE_ASIPlugin 1
#include "IPlugin.h"

#define RESTRICT_ICore 1
#define INCLUDE_ASICore 1
#include "ICore.h"

@class ASFontMetricsDescriptor;
@class IOSObjectArray;
@class JavaIoFile;
@class JavaIoInputStream;
@protocol ASAttributedString;
@protocol ASIFragment;
@protocol JavaLangRunnable;
@protocol JavaUtilList;

@interface ASCorePlugin : NSObject < ASIPlugin, ASICore >

#pragma mark Public

- (instancetype)init;

+ (void)closeDialog;

- (id<ASAttributedString>)createAttributedStringWithASIFragment:(id<ASIFragment>)fragment
                                                   withNSString:(NSString *)text;

- (id)createDrawableWithNSString:(NSString *)type;

- (id)decodeBitmapStreamWithJavaIoInputStream:(JavaIoInputStream *)stream
                                       withId:(id)options;

+ (NSString *)executeSimpleCommandWithId:(id)commands
                         withASIFragment:(id<ASIFragment>)fragment;

- (NSString *)getAssetModeWithASIFragment:(id<ASIFragment>)fragment;

- (NSString *)getAttributedBulletHtml;

- (jint)getDensity;

- (NSString *)getDensityName;

- (NSString *)getDevServerIpWithASIFragment:(id<ASIFragment>)fragment;

- (jfloat)getDisplayMetricDensity;

- (JavaIoFile *)getExternalFilesDirWithId:(id)context;

+ (NSString *)getFileAssetWithNSString:(NSString *)path;

- (NSString *)getFileAssetWithNSString:(NSString *)path
                       withASIFragment:(id<ASIFragment>)fragment;

- (ASFontMetricsDescriptor *)getFontMetricsWithId:(id)font;

- (jint)getMaxMemoryWithId:(id)context;

- (NSString *)getName;

- (NSString *)getOrientation;

- (NSString *)getOS;

+ (id<JavaUtilList>)getScopedObjectArrayWithId:(id)scopedObjects;

- (jint)getScreenHeight;

- (jint)getScreenHeightDp;

- (jint)getScreenWidth;

- (jint)getScreenWidthDp;

+ (void)initPlugin OBJC_METHOD_FAMILY_NONE;

- (id)invokeWithNSString:(NSString *)name
       withNSObjectArray:(IOSObjectArray *)args;

- (jboolean)isLandScape;

- (jint)nativeGetScreenHeight;

- (jint)nativeGetScreenWidth;

+ (void)navigateWithNSString:(NSString *)actionId
                      withId:(id)scopedObjects
             withASIFragment:(id<ASIFragment>)fragment;

+ (void)navigateAsTopWithNSString:(NSString *)actionId
                           withId:(id)scopedObjects
                  withASIFragment:(id<ASIFragment>)fragment;

+ (void)navigateWithPopBackStackWithNSString:(NSString *)actionId
                                      withId:(id)scopedObjects
                             withASIFragment:(id<ASIFragment>)fragment;

+ (void)navigateWithPopBackStackToWithNSString:(NSString *)actionId
                                  withNSString:(NSString *)destinationId
                                   withBoolean:(jboolean)inclusive
                                        withId:(id)scopedObjects
                               withASIFragment:(id<ASIFragment>)fragment;

+ (void)popBackStackWithASIFragment:(id<ASIFragment>)fragment;

+ (void)popBackStackWithASIFragment:(id<ASIFragment>)fragment
                       withNSString:(NSString *)destinationId
                        withBoolean:(jboolean)inclusive;

- (id)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable
                              withInt:(jint)delay;

- (void)putObjectToBundleWithId:(id)bundle
                   withNSString:(NSString *)key
                         withId:(id)data;

- (void)releaseNativeResourcesWithJavaUtilList:(id<JavaUtilList>)object;

- (void)removeCallbacksWithId:(id)handler
         withJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable;

- (void)runOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

#pragma mark Package-Private

@end

J2OBJC_STATIC_INIT(ASCorePlugin)

FOUNDATION_EXPORT void ASCorePlugin_init(ASCorePlugin *self);

FOUNDATION_EXPORT ASCorePlugin *new_ASCorePlugin_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASCorePlugin *create_ASCorePlugin_init(void);

FOUNDATION_EXPORT void ASCorePlugin_initPlugin(void);

FOUNDATION_EXPORT NSString *ASCorePlugin_getFileAssetWithNSString_(NSString *path);

FOUNDATION_EXPORT void ASCorePlugin_navigateAsTopWithNSString_withId_withASIFragment_(NSString *actionId, id scopedObjects, id<ASIFragment> fragment);

FOUNDATION_EXPORT void ASCorePlugin_navigateWithNSString_withId_withASIFragment_(NSString *actionId, id scopedObjects, id<ASIFragment> fragment);

FOUNDATION_EXPORT id<JavaUtilList> ASCorePlugin_getScopedObjectArrayWithId_(id scopedObjects);

FOUNDATION_EXPORT void ASCorePlugin_navigateWithPopBackStackToWithNSString_withNSString_withBoolean_withId_withASIFragment_(NSString *actionId, NSString *destinationId, jboolean inclusive, id scopedObjects, id<ASIFragment> fragment);

FOUNDATION_EXPORT void ASCorePlugin_navigateWithPopBackStackWithNSString_withId_withASIFragment_(NSString *actionId, id scopedObjects, id<ASIFragment> fragment);

FOUNDATION_EXPORT void ASCorePlugin_closeDialog(void);

FOUNDATION_EXPORT void ASCorePlugin_popBackStackWithASIFragment_(id<ASIFragment> fragment);

FOUNDATION_EXPORT void ASCorePlugin_popBackStackWithASIFragment_withNSString_withBoolean_(id<ASIFragment> fragment, NSString *destinationId, jboolean inclusive);

FOUNDATION_EXPORT NSString *ASCorePlugin_executeSimpleCommandWithId_withASIFragment_(id commands, id<ASIFragment> fragment);

J2OBJC_TYPE_LITERAL_HEADER(ASCorePlugin)

@compatibility_alias ComAsheraCoreCorePlugin ASCorePlugin;

#endif

#pragma pop_macro("INCLUDE_ALL_CorePlugin")
