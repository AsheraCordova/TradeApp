//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\content\Context.java
//

#include "ActivityManager.h"
#include "ApplicationInfo.h"
#include "AssetManager.h"
#include "BroadcastReceiver.h"
#include "ContentResolver.h"
#include "Context.h"
#include "Drawable.h"
#include "IOSClass.h"
#include "IntentFilter.h"
#include "J2ObjC_source.h"
#include "PackageManager.h"
#include "PluginInvoker.h"
#include "Resources.h"
#include "java/io/File.h"
#include "java/lang/RuntimeException.h"


J2OBJC_INITIALIZED_DEFN(ADContext)

IOSClass *ADContext_ACTIVITY_SERVICE;

@implementation ADContext

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADContext_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADApplicationInfo *)getApplicationInfo {
  return create_ADApplicationInfo_init();
}

- (ADResources *)getResources {
  return create_ADResources_init();
}

- (NSString *)getPackageName {
  return @"";
}

- (void)registerReceiverWithADBroadcastReceiver:(ADBroadcastReceiver *)telephonyReceiver
                             withADIntentFilter:(ADIntentFilter *)intentFilter {
}

- (void)unregisterReceiverWithADBroadcastReceiver:(ADBroadcastReceiver *)telephonyReceiver {
}

- (ADContentResolver *)getContentResolver {
  return nil;
}

- (ADAssetManager *)getAssets {
  return nil;
}

- (ADContext *)getApplicationContext {
  return self;
}

- (JavaIoFile *)getDirWithNSString:(NSString *)string
                           withInt:(jint)modePrivate {
  return create_JavaIoFile_initWithNSString_(@".");
}

- (ADDrawable *)getDrawableWithInt:(jint)resId {
  return nil;
}

- (id)getSystemServiceWithIOSClass:(IOSClass *)class1 {
  if (class1 == ADActivityManager_class_()) {
    return create_ADActivityManager_initWithADContext_(self);
  }
  return nil;
}

- (JavaIoFile *)getExternalFilesDirWithId:(id)object {
  return ASPluginInvoker_getExternalFilesDirWithId_(self);
}

- (JavaIoFile *)getCacheDir {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"this should never be called");
}

- (ADPackageManager *)getPackageManager {
  return create_ADPackageManager_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADApplicationInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADResources;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADContentResolver;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADAssetManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADPackageManager;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getApplicationInfo);
  methods[2].selector = @selector(getResources);
  methods[3].selector = @selector(getPackageName);
  methods[4].selector = @selector(registerReceiverWithADBroadcastReceiver:withADIntentFilter:);
  methods[5].selector = @selector(unregisterReceiverWithADBroadcastReceiver:);
  methods[6].selector = @selector(getContentResolver);
  methods[7].selector = @selector(getAssets);
  methods[8].selector = @selector(getApplicationContext);
  methods[9].selector = @selector(getDirWithNSString:withInt:);
  methods[10].selector = @selector(getDrawableWithInt:);
  methods[11].selector = @selector(getSystemServiceWithIOSClass:);
  methods[12].selector = @selector(getExternalFilesDirWithId:);
  methods[13].selector = @selector(getCacheDir);
  methods[14].selector = @selector(getPackageManager);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MODE_PRIVATE", "I", .constantValue.asInt = ADContext_MODE_PRIVATE, 0x19, -1, -1, -1, -1 },
    { "ACTIVITY_SERVICE", "LIOSClass;", .constantValue.asLong = 0, 0x19, -1, 13, -1, -1 },
  };
  static const void *ptrTable[] = { "registerReceiver", "LADBroadcastReceiver;LADIntentFilter;", "unregisterReceiver", "LADBroadcastReceiver;", "getDir", "LNSString;I", "getDrawable", "I", "getSystemService", "LIOSClass;", "<T:Ljava/lang/Object;>(Ljava/lang/Class<TT;>;)TT;", "getExternalFilesDir", "LNSObject;", &ADContext_ACTIVITY_SERVICE };
  static const J2ObjcClassInfo _ADContext = { "Context", "r.android.content", ptrTable, methods, fields, 7, 0x1, 15, 2, -1, -1, -1, -1, -1 };
  return &_ADContext;
}

+ (void)initialize {
  if (self == [ADContext class]) {
    JreStrongAssign(&ADContext_ACTIVITY_SERVICE, ADActivityManager_class_());
    J2OBJC_SET_INITIALIZED(ADContext)
  }
}

@end

void ADContext_init(ADContext *self) {
  NSObject_init(self);
}

ADContext *new_ADContext_init() {
  J2OBJC_NEW_IMPL(ADContext, init)
}

ADContext *create_ADContext_init() {
  J2OBJC_CREATE_IMPL(ADContext, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADContext)
