//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCorePlugin\src\main\java\com\ashera\core\ShapeDrawableImpl.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Rect.h"
#include "ShapeDrawable.h"
#include "ShapeDrawableImpl.h"


@interface ASShapeDrawableImpl () {
 @public
  id image_;
}

- (id)emptyImage;

- (id)drawLineWithInt:(jint)x
              withInt:(jint)y
              withInt:(jint)width
              withInt:(jint)height
               withId:(id)stokeColor
              withInt:(jint)stokeWidth
              withInt:(jint)strokeDashWidth
              withInt:(jint)strokeDashGap;

@end

J2OBJC_FIELD_SETTER(ASShapeDrawableImpl, image_, id)

__attribute__((unused)) static id ASShapeDrawableImpl_emptyImage(ASShapeDrawableImpl *self);

__attribute__((unused)) static id ASShapeDrawableImpl_drawLineWithInt_withInt_withInt_withInt_withId_withInt_withInt_withInt_(ASShapeDrawableImpl *self, jint x, jint y, jint width, jint height, id stokeColor, jint stokeWidth, jint strokeDashWidth, jint strokeDashGap);

@implementation ASShapeDrawableImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASShapeDrawableImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getDrawable {
  ADRect *bounds = [self getBounds];
  if ([((ADRect *) nil_chk(bounds)) isEmpty]) {
    return ASShapeDrawableImpl_emptyImage(self);
  }
  if (image_ == nil) {
    jint width = [bounds width];
    jint height = [bounds height];
    {
      id stokeColor;
      jint stokeWidth;
      jint strokeDashWidth;
      jint strokeDashGap;
      switch (JreIndexOfStr([self getType], (id[]){ @"line" }, 1)) {
        case 0:
        stokeColor = [self getStrokeColor];
        stokeWidth = [self getStrokeWidth];
        if (stokeWidth < 0) {
          stokeWidth = 0;
        }
        strokeDashWidth = [self getStrokeDashWidth];
        strokeDashGap = [self getStrokeDashGap];
        image_ = ASShapeDrawableImpl_drawLineWithInt_withInt_withInt_withInt_withId_withInt_withInt_withInt_(self, 0, JreIntDiv(height, 2), width, height, stokeColor, stokeWidth, strokeDashWidth, strokeDashGap);
        break;
        default:
        break;
      }
    }
  }
  return image_;
}

- (id)emptyImage {
  return ASShapeDrawableImpl_emptyImage(self);
}

- (id)drawLineWithInt:(jint)x
              withInt:(jint)y
              withInt:(jint)width
              withInt:(jint)height
               withId:(id)stokeColor
              withInt:(jint)stokeWidth
              withInt:(jint)strokeDashWidth
              withInt:(jint)strokeDashGap {
  return ASShapeDrawableImpl_drawLineWithInt_withInt_withInt_withInt_withId_withInt_withInt_withInt_(self, x, y, width, height, stokeColor, stokeWidth, strokeDashWidth, strokeDashGap);
}

- (void)onBoundsChangeWithADRect:(ADRect *)bounds {
  [super onBoundsChangeWithADRect:bounds];
  if (image_ != nil) {
    image_ = nil;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getDrawable);
  methods[2].selector = @selector(emptyImage);
  methods[3].selector = @selector(drawLineWithInt:withInt:withInt:withInt:withId:withInt:withInt:withInt:);
  methods[4].selector = @selector(onBoundsChangeWithADRect:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "image_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "drawLine", "IIIILNSObject;III", "onBoundsChange", "LADRect;" };
  static const J2ObjcClassInfo _ASShapeDrawableImpl = { "ShapeDrawableImpl", "com.ashera.core", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ASShapeDrawableImpl;
}

@end

void ASShapeDrawableImpl_init(ASShapeDrawableImpl *self) {
  ADShapeDrawable_init(self);
}

ASShapeDrawableImpl *new_ASShapeDrawableImpl_init() {
  J2OBJC_NEW_IMPL(ASShapeDrawableImpl, init)
}

ASShapeDrawableImpl *create_ASShapeDrawableImpl_init() {
  J2OBJC_CREATE_IMPL(ASShapeDrawableImpl, init)
}

id ASShapeDrawableImpl_emptyImage(ASShapeDrawableImpl *self) {
  return [UIImage new];
}

id ASShapeDrawableImpl_drawLineWithInt_withInt_withInt_withInt_withId_withInt_withInt_withInt_(ASShapeDrawableImpl *self, jint x, jint y, jint width, jint height, id stokeColor, jint stokeWidth, jint strokeDashWidth, jint strokeDashGap) {
  UIGraphicsBeginImageContext(CGSizeMake(width, height));
  
  CGContextRef context = UIGraphicsGetCurrentContext();
  CGContextSetLineWidth(context, stokeWidth);
  CGContextMoveToPoint(context, 0, height/2.0);
  CGContextAddLineToPoint(context, width, height/2.0);
  CGContextSetStrokeColorWithColor(context, [(UIColor*)stokeColor CGColor]);
  CGContextStrokePath(context);
  if (strokeDashWidth > 0 && strokeDashGap > 0) {
    CGFloat dashLengths[] = {stokeWidth, strokeDashWidth};
    CGContextSetLineDash(context, 0, dashLengths, 2);
  }
  // Create new image
  UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
  
  // Tidy up
  UIGraphicsEndImageContext();
  return newImage;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASShapeDrawableImpl)
