//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCapInsetsPlugin\src\main\java\com\ashera\capinsets\CGCapInsetsCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "CGCapInsetsCommandConverter.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"

#include <UIKit/UIKit.h>
#include "CGRectWrapper.h"


@interface ASCGCapInsetsCommandConverter () {
 @public
  jint capInsetsStretchTop_;
  jint capInsetsStretchBottom_;
  jint capInsetsStretchLeft_;
  jint capInsetsStretchRight_;
  id rectObj_;
}

- (id)nativeLoadImageBundleWithId:(id)imageObj
                          withInt:(jint)top
                          withInt:(jint)bottom
                          withInt:(jint)left
                          withInt:(jint)right;

@end

J2OBJC_FIELD_SETTER(ASCGCapInsetsCommandConverter, rectObj_, id)

__attribute__((unused)) static id ASCGCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(ASCGCapInsetsCommandConverter *self, id imageObj, jint top, jint bottom, jint left, jint right);

@implementation ASCGCapInsetsCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASCGCapInsetsCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (value == nil) {
    return nil;
  }
  jboolean isNinePatch = capInsetsStretchTop_ != 0 || capInsetsStretchBottom_ != 0 || capInsetsStretchLeft_ != 0 || capInsetsStretchRight_ != 0;
  if (isNinePatch) {
    return ASCGCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(self, value, capInsetsStretchTop_, capInsetsStretchBottom_, capInsetsStretchLeft_, capInsetsStretchRight_);
  }
  return value;
}

- (void)drawNinePatch:(const CGRect *)sourceRect targetRect:(const CGRect *)targetRect background:(UIImage*) background {
  CGImageRef cgImg = CGImageCreateWithImageInRect(background.CGImage, *sourceRect);
  UIImage* slice = [UIImage imageWithCGImage:cgImg];
  [slice drawInRect:*targetRect];
  CGImageRelease(cgImg);
}

- (id)nativeLoadImageBundleWithId:(id)imageObj
                          withInt:(jint)top
                          withInt:(jint)bottom
                          withInt:(jint)left
                          withInt:(jint)right {
  return ASCGCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(self, imageObj, top, bottom, left, right);
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASCGCapInsetsCommandConverter *capInsetsCommandConverter = new_ASCGCapInsetsCommandConverter_initWithNSString_(self->id__);
  [capInsetsCommandConverter updateArgsWithNSObjectArray:args];
  return capInsetsCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i += 2) {
    id attributeName = IOSObjectArray_Get(args, i);
    if ([nil_chk(attributeName) isEqual:@"capInsetsTop"]) {
      capInsetsStretchTop_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
    if ([attributeName isEqual:@"capInsetsBottom"]) {
      capInsetsStretchBottom_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
    if ([attributeName isEqual:@"capInsetsLeft"]) {
      capInsetsStretchLeft_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
    if ([attributeName isEqual:@"capInsetsRight"]) {
      capInsetsStretchRight_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangInteger class])))) intValue];
    }
  }
}

- (void)updatePhaseArgsWithNSObjectArray:(IOSObjectArray *)args {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i += 2) {
    id attributeName = IOSObjectArray_Get(args, i);
    if ([nil_chk(attributeName) isEqual:@"rect"]) {
      rectObj_ = IOSObjectArray_Get(args, i + 1);
    }
  }
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(nativeLoadImageBundleWithId:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  methods[5].selector = @selector(updatePhaseArgsWithNSObjectArray:);
  methods[6].selector = @selector(executeAfterPostMeasure);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "capInsetsStretchTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capInsetsStretchBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capInsetsStretchLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "capInsetsStretchRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rectObj_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "nativeLoadImageBundle", "LNSObject;IIII", "newInstance", "[LNSObject;", "updateArgs", "updatePhaseArgs" };
  static const J2ObjcClassInfo _ASCGCapInsetsCommandConverter = { "CGCapInsetsCommandConverter", "com.ashera.capinsets", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_ASCGCapInsetsCommandConverter;
}

@end

void ASCGCapInsetsCommandConverter_initWithNSString_(ASCGCapInsetsCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASCGCapInsetsCommandConverter *new_ASCGCapInsetsCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASCGCapInsetsCommandConverter, initWithNSString_, id_)
}

ASCGCapInsetsCommandConverter *create_ASCGCapInsetsCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASCGCapInsetsCommandConverter, initWithNSString_, id_)
}

id ASCGCapInsetsCommandConverter_nativeLoadImageBundleWithId_withInt_withInt_withInt_withInt_(ASCGCapInsetsCommandConverter *self, id imageObj, jint top, jint bottom, jint left, jint right) {
  if ([imageObj isKindOfClass:[UIImage class]]) {
    UIImage* background = (UIImage*) imageObj;
    CGRect rect = ((CGRectWrapper*) self->rectObj_).rect;
    CGSize finalSize = CGSizeMake(rect.size.width, rect.size.height);
    
    UIGraphicsBeginImageContext(finalSize);
    
    
    if (top > 0 && left > 0) {
      CGRect sourceRect = CGRectMake(0, 0, left, top);
      [self drawNinePatch:&sourceRect targetRect:&sourceRect background: background];
    }
    
    if (bottom > 0 && left > 0) {
      CGRect sourceRect = CGRectMake(0, background.size.height - bottom, left, bottom);
      CGRect destRect = CGRectMake(0, rect.size.height - bottom, left, bottom);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    if (left > 0) {
      CGRect sourceRect = CGRectMake(0, top, left, background.size.height - top - bottom);
      CGRect destRect = CGRectMake(0, top, left, rect.size.height - top - bottom);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    if (bottom > 0 && right > 0) {
      CGRect sourceRect = CGRectMake( background.size.width - right, background.size.height - bottom, right, bottom);
      CGRect destRect = CGRectMake( rect.size.width - right, rect.size.height - bottom, right, bottom);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    if (top > 0 && right > 0) {
      CGRect sourceRect = CGRectMake( background.size.width - right, 0, right, top);
      CGRect destRect = CGRectMake( rect.size.width - right, 0, right, top);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    if (top > 0) {
      CGRect sourceRect = CGRectMake(left, 0, background.size.width - right - left, top);
      CGRect destRect = CGRectMake(left, 0, rect.size.width - right - left, top);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    if (right > 0) {
      CGRect sourceRect = CGRectMake(background.size.width - right, top,right, background.size.height - top - bottom);
      CGRect destRect = CGRectMake(rect.size.width - right, top,right, rect.size.height - top - bottom);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    if (bottom > 0) {
      CGRect sourceRect = CGRectMake(left, background.size.height - bottom,  background.size.width - left - right, bottom);
      CGRect destRect = CGRectMake(left, rect.size.height - bottom,  rect.size.width - left - right, bottom);
      [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    }
    
    // middle part
    CGRect sourceRect = CGRectMake(left, top, background.size.width - left - right, background.size.height - top - bottom);
    CGRect destRect = CGRectMake(left, top, rect.size.width - left - right, rect.size.height - top - bottom);
    [self drawNinePatch:&sourceRect targetRect:&destRect background: background];
    
    UIImage *finalImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return finalImage;
  } else {
    return imageObj;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCGCapInsetsCommandConverter)
