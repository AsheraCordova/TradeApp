//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\MapCollections.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MapCollections.h"
#include "Objects.h"
#include "java/lang/ClassCastException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Iterable.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/lang/reflect/Array.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"
#include "java/util/function/Predicate.h"
#include "java/util/stream/Stream.h"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADMapCollections_ArrayIterator () {
 @public
  __unsafe_unretained ADMapCollections *this$0_;
}

@end

@interface ADMapCollections_MapIterator () {
 @public
  __unsafe_unretained ADMapCollections *this$0_;
}

@end

@interface ADMapCollections_EntrySet () {
 @public
  __unsafe_unretained ADMapCollections *this$0_;
}

@end

@interface ADMapCollections_KeySet () {
 @public
  __unsafe_unretained ADMapCollections *this$0_;
}

@end

@interface ADMapCollections_ValuesCollection () {
 @public
  __unsafe_unretained ADMapCollections *this$0_;
}

@end

@implementation ADMapCollections

- (instancetype)initPackagePrivate {
  ADMapCollections_initPackagePrivate(self);
  return self;
}

+ (jboolean)containsAllHelperWithJavaUtilMap:(id<JavaUtilMap>)map
                      withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return ADMapCollections_containsAllHelperWithJavaUtilMap_withJavaUtilCollection_(map, collection);
}

+ (jboolean)removeAllHelperWithJavaUtilMap:(id<JavaUtilMap>)map
                    withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return ADMapCollections_removeAllHelperWithJavaUtilMap_withJavaUtilCollection_(map, collection);
}

+ (jboolean)retainAllHelperWithJavaUtilMap:(id<JavaUtilMap>)map
                    withJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return ADMapCollections_retainAllHelperWithJavaUtilMap_withJavaUtilCollection_(map, collection);
}

- (IOSObjectArray *)toArrayHelperWithInt:(jint)offset {
  jint N = [self colGetSize];
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:N type:NSObject_class_()];
  for (jint i = 0; i < N; i++) {
    IOSObjectArray_Set(result, i, [self colGetEntryWithInt:i withInt:offset]);
  }
  return result;
}

- (IOSObjectArray *)toArrayHelperWithNSObjectArray:(IOSObjectArray *)array
                                           withInt:(jint)offset {
  jint N = [self colGetSize];
  if (((IOSObjectArray *) nil_chk(array))->size_ < N) {
    IOSObjectArray *newArray = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], N), IOSClass_arrayType(NSObject_class_(), 1));
    array = newArray;
  }
  for (jint i = 0; i < N; i++) {
    IOSObjectArray_Set(nil_chk(array), i, [self colGetEntryWithInt:i withInt:offset]);
  }
  if (((IOSObjectArray *) nil_chk(array))->size_ > N) {
    IOSObjectArray_Set(array, N, nil);
  }
  return array;
}

+ (jboolean)equalsSetHelperWithJavaUtilSet:(id<JavaUtilSet>)set
                                    withId:(id)object {
  return ADMapCollections_equalsSetHelperWithJavaUtilSet_withId_(set, object);
}

- (id<JavaUtilSet>)getEntrySet {
  if (mEntrySet_ == nil) {
    JreStrongAssignAndConsume(&mEntrySet_, new_ADMapCollections_EntrySet_initWithADMapCollections_(self));
  }
  return mEntrySet_;
}

- (id<JavaUtilSet>)getKeySet {
  if (mKeySet_ == nil) {
    JreStrongAssignAndConsume(&mKeySet_, new_ADMapCollections_KeySet_initWithADMapCollections_(self));
  }
  return mKeySet_;
}

- (id<JavaUtilCollection>)getValues {
  if (mValues_ == nil) {
    JreStrongAssignAndConsume(&mValues_, new_ADMapCollections_ValuesCollection_initWithADMapCollections_(self));
  }
  return mValues_;
}

- (jint)colGetSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)colGetEntryWithInt:(jint)index
                 withInt:(jint)offset {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)colIndexOfKeyWithId:(id)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)colIndexOfValueWithId:(id)key {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilMap>)colGetMap {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)colPutWithId:(id)key
              withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (id)colSetValueWithInt:(jint)index
                  withId:(id)value {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)colRemoveAtWithInt:(jint)index {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)colClear {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)dealloc {
  RELEASE_(mEntrySet_);
  RELEASE_(mKeySet_);
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x9, 3, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x9, 4, 1, -1, 2, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 5, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x9, 9, 10, -1, 11, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 14, -1, -1 },
    { NULL, "I", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x404, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 17, 18, -1, -1, -1, -1 },
    { NULL, "I", 0x404, 19, 18, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x404, -1, -1, -1, 20, -1, -1 },
    { NULL, "V", 0x404, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSObject;", 0x404, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0x404, 27, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x404, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  methods[1].selector = @selector(containsAllHelperWithJavaUtilMap:withJavaUtilCollection:);
  methods[2].selector = @selector(removeAllHelperWithJavaUtilMap:withJavaUtilCollection:);
  methods[3].selector = @selector(retainAllHelperWithJavaUtilMap:withJavaUtilCollection:);
  methods[4].selector = @selector(toArrayHelperWithInt:);
  methods[5].selector = @selector(toArrayHelperWithNSObjectArray:withInt:);
  methods[6].selector = @selector(equalsSetHelperWithJavaUtilSet:withId:);
  methods[7].selector = @selector(getEntrySet);
  methods[8].selector = @selector(getKeySet);
  methods[9].selector = @selector(getValues);
  methods[10].selector = @selector(colGetSize);
  methods[11].selector = @selector(colGetEntryWithInt:withInt:);
  methods[12].selector = @selector(colIndexOfKeyWithId:);
  methods[13].selector = @selector(colIndexOfValueWithId:);
  methods[14].selector = @selector(colGetMap);
  methods[15].selector = @selector(colPutWithId:withId:);
  methods[16].selector = @selector(colSetValueWithInt:withId:);
  methods[17].selector = @selector(colRemoveAtWithInt:);
  methods[18].selector = @selector(colClear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mEntrySet_", "LADMapCollections_EntrySet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mKeySet_", "LADMapCollections_KeySet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValues_", "LADMapCollections_ValuesCollection;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "containsAllHelper", "LJavaUtilMap;LJavaUtilCollection;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/util/Map<TK;TV;>;Ljava/util/Collection<*>;)Z", "removeAllHelper", "retainAllHelper", "toArrayHelper", "I", "[LNSObject;I", "<T:Ljava/lang/Object;>([TT;I)[TT;", "equalsSetHelper", "LJavaUtilSet;LNSObject;", "<T:Ljava/lang/Object;>(Ljava/util/Set<TT;>;Ljava/lang/Object;)Z", "()Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;", "()Ljava/util/Set<TK;>;", "()Ljava/util/Collection<TV;>;", "colGetEntry", "II", "colIndexOfKey", "LNSObject;", "colIndexOfValue", "()Ljava/util/Map<TK;TV;>;", "colPut", "LNSObject;LNSObject;", "(TK;TV;)V", "colSetValue", "ILNSObject;", "(ITV;)TV;", "colRemoveAt", "LADMapCollections_ArrayIterator;LADMapCollections_MapIterator;LADMapCollections_EntrySet;LADMapCollections_KeySet;LADMapCollections_ValuesCollection;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADMapCollections = { "MapCollections", "r.android.util", ptrTable, methods, fields, 7, 0x400, 19, 3, -1, 28, -1, 29, -1 };
  return &_ADMapCollections;
}

@end

void ADMapCollections_initPackagePrivate(ADMapCollections *self) {
  NSObject_init(self);
}

jboolean ADMapCollections_containsAllHelperWithJavaUtilMap_withJavaUtilCollection_(id<JavaUtilMap> map, id<JavaUtilCollection> collection) {
  ADMapCollections_initialize();
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilCollection>) nil_chk(collection)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:[it next]]) {
      return false;
    }
  }
  return true;
}

jboolean ADMapCollections_removeAllHelperWithJavaUtilMap_withJavaUtilCollection_(id<JavaUtilMap> map, id<JavaUtilCollection> collection) {
  ADMapCollections_initialize();
  jint oldSize = [((id<JavaUtilMap>) nil_chk(map)) size];
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilCollection>) nil_chk(collection)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    [map removeWithId:[it next]];
  }
  return oldSize != [map size];
}

jboolean ADMapCollections_retainAllHelperWithJavaUtilMap_withJavaUtilCollection_(id<JavaUtilMap> map, id<JavaUtilCollection> collection) {
  ADMapCollections_initialize();
  jint oldSize = [((id<JavaUtilMap>) nil_chk(map)) size];
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk([map keySet])) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:[it next]]) {
      [it remove];
    }
  }
  return oldSize != [map size];
}

jboolean ADMapCollections_equalsSetHelperWithJavaUtilSet_withId_(id<JavaUtilSet> set, id object) {
  ADMapCollections_initialize();
  if (set == object) {
    return true;
  }
  if ([JavaUtilSet_class_() isInstance:object]) {
    id<JavaUtilSet> s = (id<JavaUtilSet>) cast_check(object, JavaUtilSet_class_());
    @try {
      return [((id<JavaUtilSet>) nil_chk(set)) size] == [((id<JavaUtilSet>) nil_chk(s)) size] && [set containsAllWithJavaUtilCollection:s];
    }
    @catch (JavaLangNullPointerException *ignored) {
      return false;
    }
    @catch (JavaLangClassCastException *ignored) {
      return false;
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMapCollections)

@implementation ADMapCollections_ArrayIterator

- (instancetype)initWithADMapCollections:(ADMapCollections *)outer$
                                 withInt:(jint)offset {
  ADMapCollections_ArrayIterator_initWithADMapCollections_withInt_(self, outer$, offset);
  return self;
}

- (jboolean)hasNext {
  return mIndex_ < mSize_;
}

- (id)next {
  id res = JreRetainedLocalValue([this$0_ colGetEntryWithInt:mIndex_ withInt:mOffset_]);
  mIndex_++;
  mCanRemove_ = true;
  return res;
}

- (void)remove {
  if (!mCanRemove_) {
    @throw create_JavaLangIllegalStateException_init();
  }
  mIndex_--;
  mSize_--;
  mCanRemove_ = false;
  [this$0_ colRemoveAtWithInt:mIndex_];
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)__javaClone:(ADMapCollections_ArrayIterator *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMapCollections:withInt:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMapCollections;", .constantValue.asLong = 0, 0x1012, -1, -1, 2, -1 },
    { "mOffset_", "I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCanRemove_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMapCollections;I", "()TT;", "Lr/android/util/MapCollections<TK;TV;>;", "LADMapCollections;", "<T:Ljava/lang/Object;>Ljava/lang/Object;Ljava/util/Iterator<TT;>;" };
  static const J2ObjcClassInfo _ADMapCollections_ArrayIterator = { "ArrayIterator", "r.android.util", ptrTable, methods, fields, 7, 0x10, 4, 5, 3, -1, -1, 4, -1 };
  return &_ADMapCollections_ArrayIterator;
}

@end

void ADMapCollections_ArrayIterator_initWithADMapCollections_withInt_(ADMapCollections_ArrayIterator *self, ADMapCollections *outer$, jint offset) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->mCanRemove_ = false;
  self->mOffset_ = offset;
  self->mSize_ = [outer$ colGetSize];
}

ADMapCollections_ArrayIterator *new_ADMapCollections_ArrayIterator_initWithADMapCollections_withInt_(ADMapCollections *outer$, jint offset) {
  J2OBJC_NEW_IMPL(ADMapCollections_ArrayIterator, initWithADMapCollections_withInt_, outer$, offset)
}

ADMapCollections_ArrayIterator *create_ADMapCollections_ArrayIterator_initWithADMapCollections_withInt_(ADMapCollections *outer$, jint offset) {
  J2OBJC_CREATE_IMPL(ADMapCollections_ArrayIterator, initWithADMapCollections_withInt_, outer$, offset)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMapCollections_ArrayIterator)

@implementation ADMapCollections_MapIterator

- (instancetype)initWithADMapCollections:(ADMapCollections *)outer$ {
  ADMapCollections_MapIterator_initWithADMapCollections_(self, outer$);
  return self;
}

- (jboolean)hasNext {
  return mIndex_ < mEnd_;
}

- (id<JavaUtilMap_Entry>)next {
  mIndex_++;
  mEntryValid_ = true;
  return self;
}

- (void)remove {
  if (!mEntryValid_) {
    @throw create_JavaLangIllegalStateException_init();
  }
  [this$0_ colRemoveAtWithInt:mIndex_];
  mIndex_--;
  mEnd_--;
  mEntryValid_ = false;
}

- (id)getKey {
  if (!mEntryValid_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"This container does not support retaining Map.Entry objects");
  }
  return [this$0_ colGetEntryWithInt:mIndex_ withInt:0];
}

- (id)getValue {
  if (!mEntryValid_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"This container does not support retaining Map.Entry objects");
  }
  return [this$0_ colGetEntryWithInt:mIndex_ withInt:1];
}

- (id)setValueWithId:(id)object {
  if (!mEntryValid_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"This container does not support retaining Map.Entry objects");
  }
  return [this$0_ colSetValueWithInt:mIndex_ withId:object];
}

- (jboolean)isEqual:(id)o {
  if (!mEntryValid_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"This container does not support retaining Map.Entry objects");
  }
  if (!([JavaUtilMap_Entry_class_() isInstance:o])) {
    return false;
  }
  id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check(o, JavaUtilMap_Entry_class_());
  return ADObjects_equalWithId_withId_([((id<JavaUtilMap_Entry>) nil_chk(e)) getKey], [this$0_ colGetEntryWithInt:mIndex_ withInt:0]) && ADObjects_equalWithId_withId_([e getValue], [this$0_ colGetEntryWithInt:mIndex_ withInt:1]);
}

- (NSUInteger)hash {
  if (!mEntryValid_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"This container does not support retaining Map.Entry objects");
  }
  id key = [this$0_ colGetEntryWithInt:mIndex_ withInt:0];
  id value = [this$0_ colGetEntryWithInt:mIndex_ withInt:1];
  return (key == nil ? 0 : ((jint) [key hash])) ^ (value == nil ? 0 : ((jint) [value hash]));
}

- (NSString *)description {
  return JreStrcat("@C@", [self getKey], '=', [self getValue]);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)__javaClone:(ADMapCollections_MapIterator *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap_Entry;", 0x1, -1, -1, -1, 1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "Z", 0x11, 7, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMapCollections:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  methods[3].selector = @selector(remove);
  methods[4].selector = @selector(getKey);
  methods[5].selector = @selector(getValue);
  methods[6].selector = @selector(setValueWithId:);
  methods[7].selector = @selector(isEqual:);
  methods[8].selector = @selector(hash);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMapCollections;", .constantValue.asLong = 0, 0x1012, -1, -1, 10, -1 },
    { "mEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEntryValid_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADMapCollections;", "()Ljava/util/Map$Entry<TK;TV;>;", "()TK;", "()TV;", "setValue", "LNSObject;", "(TV;)TV;", "equals", "hashCode", "toString", "Lr/android/util/MapCollections<TK;TV;>;", "Ljava/lang/Object;Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;Ljava/util/Map$Entry<TK;TV;>;" };
  static const J2ObjcClassInfo _ADMapCollections_MapIterator = { "MapIterator", "r.android.util", ptrTable, methods, fields, 7, 0x10, 10, 4, 0, -1, -1, 11, -1 };
  return &_ADMapCollections_MapIterator;
}

@end

void ADMapCollections_MapIterator_initWithADMapCollections_(ADMapCollections_MapIterator *self, ADMapCollections *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->mEntryValid_ = false;
  self->mEnd_ = [outer$ colGetSize] - 1;
  self->mIndex_ = -1;
}

ADMapCollections_MapIterator *new_ADMapCollections_MapIterator_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_NEW_IMPL(ADMapCollections_MapIterator, initWithADMapCollections_, outer$)
}

ADMapCollections_MapIterator *create_ADMapCollections_MapIterator_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_CREATE_IMPL(ADMapCollections_MapIterator, initWithADMapCollections_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMapCollections_MapIterator)

@implementation ADMapCollections_EntrySet

- (instancetype)initWithADMapCollections:(ADMapCollections *)outer$ {
  ADMapCollections_EntrySet_initWithADMapCollections_(self, outer$);
  return self;
}

- (jboolean)addWithId:(id<JavaUtilMap_Entry>)object {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jint oldSize = [this$0_ colGetSize];
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk(collection)) {
    [this$0_ colPutWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getKey] withId:[entry_ getValue]];
  }
  return oldSize != [this$0_ colGetSize];
}

- (void)clear {
  [this$0_ colClear];
}

- (jboolean)containsWithId:(id)o {
  if (!([JavaUtilMap_Entry_class_() isInstance:o])) return false;
  id<JavaUtilMap_Entry> e = (id<JavaUtilMap_Entry>) cast_check(o, JavaUtilMap_Entry_class_());
  jint index = [this$0_ colIndexOfKeyWithId:[((id<JavaUtilMap_Entry>) nil_chk(e)) getKey]];
  if (index < 0) {
    return false;
  }
  id foundVal = JreRetainedLocalValue([this$0_ colGetEntryWithInt:index withInt:1]);
  return ADObjects_equalWithId_withId_(foundVal, [e getValue]);
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilCollection>) nil_chk(collection)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![self containsWithId:[it next]]) {
      return false;
    }
  }
  return true;
}

- (jboolean)isEmpty {
  return [this$0_ colGetSize] == 0;
}

- (id<JavaUtilIterator>)iterator {
  return create_ADMapCollections_MapIterator_initWithADMapCollections_(this$0_);
}

- (jboolean)removeWithId:(id)object {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jint)size {
  return [this$0_ colGetSize];
}

- (IOSObjectArray *)toArray {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)isEqual:(id)object {
  return ADMapCollections_equalsSetHelperWithJavaUtilSet_withId_(self, object);
}

- (NSUInteger)hash {
  jint result = 0;
  for (jint i = [this$0_ colGetSize] - 1; i >= 0; i--) {
    id key = [this$0_ colGetEntryWithInt:i withInt:0];
    id value = [this$0_ colGetEntryWithInt:i withInt:1];
    result += ((key == nil ? 0 : ((jint) [key hash])) ^ (value == nil ? 0 : ((jint) [value hash])));
  }
  return result;
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilSet_spliterator(self);
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)__javaClone:(ADMapCollections_EntrySet *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 5, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 11, -1, -1 },
    { NULL, "Z", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 5, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 14, 5, -1, 10, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "Z", 0x1, 18, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 19, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMapCollections:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(addAllWithJavaUtilCollection:);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(iterator);
  methods[8].selector = @selector(removeWithId:);
  methods[9].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[10].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(toArray);
  methods[13].selector = @selector(toArrayWithNSObjectArray:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMapCollections;", .constantValue.asLong = 0, 0x1012, -1, -1, 20, -1 },
  };
  static const void *ptrTable[] = { "LADMapCollections;", "add", "LJavaUtilMap_Entry;", "(Ljava/util/Map$Entry<TK;TV;>;)Z", "addAll", "LJavaUtilCollection;", "(Ljava/util/Collection<+Ljava/util/Map$Entry<TK;TV;>;>;)Z", "contains", "LNSObject;", "containsAll", "(Ljava/util/Collection<*>;)Z", "()Ljava/util/Iterator<Ljava/util/Map$Entry<TK;TV;>;>;", "remove", "removeAll", "retainAll", "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "equals", "hashCode", "Lr/android/util/MapCollections<TK;TV;>;", "Ljava/lang/Object;Ljava/util/Set<Ljava/util/Map$Entry<TK;TV;>;>;" };
  static const J2ObjcClassInfo _ADMapCollections_EntrySet = { "EntrySet", "r.android.util", ptrTable, methods, fields, 7, 0x10, 16, 1, 0, -1, -1, 21, -1 };
  return &_ADMapCollections_EntrySet;
}

@end

void ADMapCollections_EntrySet_initWithADMapCollections_(ADMapCollections_EntrySet *self, ADMapCollections *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ADMapCollections_EntrySet *new_ADMapCollections_EntrySet_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_NEW_IMPL(ADMapCollections_EntrySet, initWithADMapCollections_, outer$)
}

ADMapCollections_EntrySet *create_ADMapCollections_EntrySet_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_CREATE_IMPL(ADMapCollections_EntrySet, initWithADMapCollections_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMapCollections_EntrySet)

@implementation ADMapCollections_KeySet

- (instancetype)initWithADMapCollections:(ADMapCollections *)outer$ {
  ADMapCollections_KeySet_initWithADMapCollections_(self, outer$);
  return self;
}

- (jboolean)addWithId:(id)object {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)clear {
  [this$0_ colClear];
}

- (jboolean)containsWithId:(id)object {
  return [this$0_ colIndexOfKeyWithId:object] >= 0;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return ADMapCollections_containsAllHelperWithJavaUtilMap_withJavaUtilCollection_([this$0_ colGetMap], collection);
}

- (jboolean)isEmpty {
  return [this$0_ colGetSize] == 0;
}

- (id<JavaUtilIterator>)iterator {
  return create_ADMapCollections_ArrayIterator_initWithADMapCollections_withInt_(this$0_, 0);
}

- (jboolean)removeWithId:(id)object {
  jint index = [this$0_ colIndexOfKeyWithId:object];
  if (index >= 0) {
    [this$0_ colRemoveAtWithInt:index];
    return true;
  }
  return false;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return ADMapCollections_removeAllHelperWithJavaUtilMap_withJavaUtilCollection_([this$0_ colGetMap], collection);
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  return ADMapCollections_retainAllHelperWithJavaUtilMap_withJavaUtilCollection_([this$0_ colGetMap], collection);
}

- (jint)size {
  return [this$0_ colGetSize];
}

- (IOSObjectArray *)toArray {
  return [this$0_ toArrayHelperWithInt:0];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [this$0_ toArrayHelperWithNSObjectArray:array withInt:0];
}

- (jboolean)isEqual:(id)object {
  return ADMapCollections_equalsSetHelperWithJavaUtilSet_withId_(self, object);
}

- (NSUInteger)hash {
  jint result = 0;
  for (jint i = [this$0_ colGetSize] - 1; i >= 0; i--) {
    id obj = JreRetainedLocalValue([this$0_ colGetEntryWithInt:i withInt:0]);
    result += obj == nil ? 0 : ((jint) [obj hash]);
  }
  return result;
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilSet_spliterator(self);
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)__javaClone:(ADMapCollections_KeySet *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 5, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 13, 5, -1, 9, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "Z", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 18, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMapCollections:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(addAllWithJavaUtilCollection:);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(iterator);
  methods[8].selector = @selector(removeWithId:);
  methods[9].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[10].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(toArray);
  methods[13].selector = @selector(toArrayWithNSObjectArray:);
  methods[14].selector = @selector(isEqual:);
  methods[15].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMapCollections;", .constantValue.asLong = 0, 0x1012, -1, -1, 19, -1 },
  };
  static const void *ptrTable[] = { "LADMapCollections;", "add", "LNSObject;", "(TK;)Z", "addAll", "LJavaUtilCollection;", "(Ljava/util/Collection<+TK;>;)Z", "contains", "containsAll", "(Ljava/util/Collection<*>;)Z", "()Ljava/util/Iterator<TK;>;", "remove", "removeAll", "retainAll", "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "equals", "hashCode", "Lr/android/util/MapCollections<TK;TV;>;", "Ljava/lang/Object;Ljava/util/Set<TK;>;" };
  static const J2ObjcClassInfo _ADMapCollections_KeySet = { "KeySet", "r.android.util", ptrTable, methods, fields, 7, 0x10, 16, 1, 0, -1, -1, 20, -1 };
  return &_ADMapCollections_KeySet;
}

@end

void ADMapCollections_KeySet_initWithADMapCollections_(ADMapCollections_KeySet *self, ADMapCollections *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ADMapCollections_KeySet *new_ADMapCollections_KeySet_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_NEW_IMPL(ADMapCollections_KeySet, initWithADMapCollections_, outer$)
}

ADMapCollections_KeySet *create_ADMapCollections_KeySet_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_CREATE_IMPL(ADMapCollections_KeySet, initWithADMapCollections_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMapCollections_KeySet)

@implementation ADMapCollections_ValuesCollection

- (instancetype)initWithADMapCollections:(ADMapCollections *)outer$ {
  ADMapCollections_ValuesCollection_initWithADMapCollections_(self, outer$);
  return self;
}

- (jboolean)addWithId:(id)object {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (jboolean)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  @throw create_JavaLangUnsupportedOperationException_init();
}

- (void)clear {
  [this$0_ colClear];
}

- (jboolean)containsWithId:(id)object {
  return [this$0_ colIndexOfValueWithId:object] >= 0;
}

- (jboolean)containsAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  id<JavaUtilIterator> it = JreRetainedLocalValue([((id<JavaUtilCollection>) nil_chk(collection)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(it)) hasNext]) {
    if (![self containsWithId:[it next]]) {
      return false;
    }
  }
  return true;
}

- (jboolean)isEmpty {
  return [this$0_ colGetSize] == 0;
}

- (id<JavaUtilIterator>)iterator {
  return create_ADMapCollections_ArrayIterator_initWithADMapCollections_withInt_(this$0_, 1);
}

- (jboolean)removeWithId:(id)object {
  jint index = [this$0_ colIndexOfValueWithId:object];
  if (index >= 0) {
    [this$0_ colRemoveAtWithInt:index];
    return true;
  }
  return false;
}

- (jboolean)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jint N = [this$0_ colGetSize];
  jboolean changed = false;
  for (jint i = 0; i < N; i++) {
    id cur = JreRetainedLocalValue([this$0_ colGetEntryWithInt:i withInt:1]);
    if ([((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:cur]) {
      [this$0_ colRemoveAtWithInt:i];
      i--;
      N--;
      changed = true;
    }
  }
  return changed;
}

- (jboolean)retainAllWithJavaUtilCollection:(id<JavaUtilCollection>)collection {
  jint N = [this$0_ colGetSize];
  jboolean changed = false;
  for (jint i = 0; i < N; i++) {
    id cur = JreRetainedLocalValue([this$0_ colGetEntryWithInt:i withInt:1]);
    if (![((id<JavaUtilCollection>) nil_chk(collection)) containsWithId:cur]) {
      [this$0_ colRemoveAtWithInt:i];
      i--;
      N--;
      changed = true;
    }
  }
  return changed;
}

- (jint)size {
  return [this$0_ colGetSize];
}

- (IOSObjectArray *)toArray {
  return [this$0_ toArrayHelperWithInt:1];
}

- (IOSObjectArray *)toArrayWithNSObjectArray:(IOSObjectArray *)array {
  return [this$0_ toArrayHelperWithNSObjectArray:array withInt:1];
}

- (jboolean)removeIfWithJavaUtilFunctionPredicate:(id<JavaUtilFunctionPredicate>)arg0 {
  return JavaUtilCollection_removeIfWithJavaUtilFunctionPredicate_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaUtilCollection_spliterator(self);
}

- (id<JavaUtilStreamStream>)stream {
  return JavaUtilCollection_stream(self);
}

- (id<JavaUtilStreamStream>)parallelStream {
  return JavaUtilCollection_parallelStream(self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)__javaClone:(ADMapCollections_ValuesCollection *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 5, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, 10, -1, -1 },
    { NULL, "Z", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 5, -1, 9, -1, -1 },
    { NULL, "Z", 0x1, 13, 5, -1, 9, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x1, 14, 15, -1, 16, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADMapCollections:);
  methods[1].selector = @selector(addWithId:);
  methods[2].selector = @selector(addAllWithJavaUtilCollection:);
  methods[3].selector = @selector(clear);
  methods[4].selector = @selector(containsWithId:);
  methods[5].selector = @selector(containsAllWithJavaUtilCollection:);
  methods[6].selector = @selector(isEmpty);
  methods[7].selector = @selector(iterator);
  methods[8].selector = @selector(removeWithId:);
  methods[9].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[10].selector = @selector(retainAllWithJavaUtilCollection:);
  methods[11].selector = @selector(size);
  methods[12].selector = @selector(toArray);
  methods[13].selector = @selector(toArrayWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADMapCollections;", .constantValue.asLong = 0, 0x1012, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "LADMapCollections;", "add", "LNSObject;", "(TV;)Z", "addAll", "LJavaUtilCollection;", "(Ljava/util/Collection<+TV;>;)Z", "contains", "containsAll", "(Ljava/util/Collection<*>;)Z", "()Ljava/util/Iterator<TV;>;", "remove", "removeAll", "retainAll", "toArray", "[LNSObject;", "<T:Ljava/lang/Object;>([TT;)[TT;", "Lr/android/util/MapCollections<TK;TV;>;", "Ljava/lang/Object;Ljava/util/Collection<TV;>;" };
  static const J2ObjcClassInfo _ADMapCollections_ValuesCollection = { "ValuesCollection", "r.android.util", ptrTable, methods, fields, 7, 0x10, 14, 1, 0, -1, -1, 18, -1 };
  return &_ADMapCollections_ValuesCollection;
}

@end

void ADMapCollections_ValuesCollection_initWithADMapCollections_(ADMapCollections_ValuesCollection *self, ADMapCollections *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ADMapCollections_ValuesCollection *new_ADMapCollections_ValuesCollection_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_NEW_IMPL(ADMapCollections_ValuesCollection, initWithADMapCollections_, outer$)
}

ADMapCollections_ValuesCollection *create_ADMapCollections_ValuesCollection_initWithADMapCollections_(ADMapCollections *outer$) {
  J2OBJC_CREATE_IMPL(ADMapCollections_ValuesCollection, initWithADMapCollections_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADMapCollections_ValuesCollection)
