//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ProgressBarImpl.java
//

#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasurableView.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "ProgressBarImpl.h"
#include "SimpleWrapableView.h"
#include "View.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"
#include "ASUIView.h"

#include "ASUIActivityIndicatorView.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASProgressBarImpl () {
 @public
  ASProgressBarImpl_ProgressBarCommandBuilder *builder_;
  ASProgressBarImpl_ProgressBarBean *bean_;
  ASSimpleWrapableView *simpleWrapableView_;
  jboolean large_;
  id progressTint_;
}

- (void)setWidgetOnNativeClass;

- (id)getPaddingBottom;

- (id)getPaddingTop;

- (id)getPaddingRight;

- (id)getPaddingLeft;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)createSimpleWrapableView;

- (jboolean)hasScrollView;

- (jboolean)isViewWrapped;

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (id)nativeCreateViewWithInt:(jint)viewType;

- (void)setProgressTintWithId:(id)objValue;

- (id)getProgressTint;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

@end

J2OBJC_FIELD_SETTER(ASProgressBarImpl, builder_, ASProgressBarImpl_ProgressBarCommandBuilder *)
J2OBJC_FIELD_SETTER(ASProgressBarImpl, bean_, ASProgressBarImpl_ProgressBarBean *)
J2OBJC_FIELD_SETTER(ASProgressBarImpl, simpleWrapableView_, ASSimpleWrapableView *)
J2OBJC_FIELD_SETTER(ASProgressBarImpl, progressTint_, id)

inline NSString *ASProgressBarImpl_get_FOREGROUND_REGEX(void);
static NSString *ASProgressBarImpl_FOREGROUND_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASProgressBarImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASProgressBarImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASProgressBarImpl_VIEW_HOLDER_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASProgressBarImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASProgressBarImpl_get_WIDGET_REGEX(void);
static NSString *ASProgressBarImpl_WIDGET_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASProgressBarImpl, WIDGET_REGEX, NSString *)

__attribute__((unused)) static void ASProgressBarImpl_setWidgetOnNativeClass(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getPaddingBottom(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getPaddingTop(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getPaddingRight(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getPaddingLeft(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getPaddingEnd(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getPaddingStart(ASProgressBarImpl *self);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingVerticalWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingHorizontalWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingTopWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingEndWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingStartWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingLeftWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingRightWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingBottomWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_setPaddingWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static void ASProgressBarImpl_createSimpleWrapableView(ASProgressBarImpl *self);

__attribute__((unused)) static jboolean ASProgressBarImpl_hasScrollView(ASProgressBarImpl *self);

__attribute__((unused)) static jboolean ASProgressBarImpl_isViewWrapped(ASProgressBarImpl *self);

__attribute__((unused)) static void ASProgressBarImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASProgressBarImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASProgressBarImpl_invalidateWrapViewHolder(ASProgressBarImpl *self);

__attribute__((unused)) static id ASProgressBarImpl_getScrollView(ASProgressBarImpl *self);

__attribute__((unused)) static void ASProgressBarImpl_nativeCreateWithJavaUtilMap_(ASProgressBarImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static id ASProgressBarImpl_nativeCreateViewWithInt_(ASProgressBarImpl *self, jint viewType);

__attribute__((unused)) static void ASProgressBarImpl_setProgressTintWithId_(ASProgressBarImpl *self, id objValue);

__attribute__((unused)) static id ASProgressBarImpl_getProgressTint(ASProgressBarImpl *self);

__attribute__((unused)) static void ASProgressBarImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASProgressBarImpl *self, jint l, jint t, jint r, jint b);

@interface ASProgressBarImpl_ProgressBarExt () {
 @public
  __unsafe_unretained ASProgressBarImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASProgressBarImpl_ProgressBarExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASProgressBarImpl_ProgressBarExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASProgressBarImpl_ProgressBarCommandBuilder () {
 @public
  ASProgressBarImpl *this$0_;
}

@end

@interface ASProgressBarImpl_ProgressBarBean () {
 @public
  ASProgressBarImpl *this$0_;
}

@end

NSString *ASProgressBarImpl_LOCAL_NAME = @"ProgressBar";
NSString *ASProgressBarImpl_GROUP_NAME = @"ProgressBar";

@implementation ASProgressBarImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosHidesWhenStopped"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progressTint"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosStyle"])) withTypeWithNSString:@"string"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASProgressBarImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASProgressBarImpl_ProgressBarExt *) nil_chk(((ASProgressBarImpl_ProgressBarExt *) cast_chk(measurableView_, [ASProgressBarImpl_ProgressBarExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASProgressBarImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASProgressBarImpl_ProgressBarExt_initWithASProgressBarImpl_(self);
  ASProgressBarImpl_createSimpleWrapableView(self);
  ASProgressBarImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASProgressBarImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASProgressBarImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosHidesWhenStopped", @"iosColor", @"progressTint", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical" }, 12)) {
    case 0:
    {
      [self setHidesWhenStoppedWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    {
      ASProgressBarImpl_setProgressTintWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASProgressBarImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASProgressBarImpl_setPaddingBottomWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASProgressBarImpl_setPaddingRightWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASProgressBarImpl_setPaddingLeftWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASProgressBarImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASProgressBarImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASProgressBarImpl_setPaddingTopWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASProgressBarImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASProgressBarImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosHidesWhenStopped", @"iosColor", @"progressTint", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop" }, 9)) {
    case 0:
    {
      return [self getHidesWhenStopped];
    }
    case 1:
    {
      return [self getColor];
    }
    case 2:
    {
      return ASProgressBarImpl_getProgressTint(self);
    }
    case 3:
    {
      return ASProgressBarImpl_getPaddingBottom(self);
    }
    case 4:
    {
      return ASProgressBarImpl_getPaddingRight(self);
    }
    case 5:
    {
      return ASProgressBarImpl_getPaddingLeft(self);
    }
    case 6:
    {
      return ASProgressBarImpl_getPaddingStart(self);
    }
    case 7:
    {
      return ASProgressBarImpl_getPaddingEnd(self);
    }
    case 8:
    {
      return ASProgressBarImpl_getPaddingTop(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (id)getPaddingBottom {
  return ASProgressBarImpl_getPaddingBottom(self);
}

- (id)getPaddingTop {
  return ASProgressBarImpl_getPaddingTop(self);
}

- (id)getPaddingRight {
  return ASProgressBarImpl_getPaddingRight(self);
}

- (id)getPaddingLeft {
  return ASProgressBarImpl_getPaddingLeft(self);
}

- (id)getPaddingEnd {
  return ASProgressBarImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASProgressBarImpl_getPaddingStart(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASProgressBarImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASProgressBarImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingTopWithId:(id)objValue {
  ASProgressBarImpl_setPaddingTopWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASProgressBarImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASProgressBarImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingLeftWithId:(id)objValue {
  ASProgressBarImpl_setPaddingLeftWithId_(self, objValue);
}

- (void)setPaddingRightWithId:(id)objValue {
  ASProgressBarImpl_setPaddingRightWithId_(self, objValue);
}

- (void)setPaddingBottomWithId:(id)objValue {
  ASProgressBarImpl_setPaddingBottomWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASProgressBarImpl_setPaddingWithId_(self, objValue);
}

- (void)setHidesWhenStoppedWithId:(id)nativeWidget
                           withId:(id)value {
  ((ASUIActivityIndicatorView*) nativeWidget).hidesWhenStopped = [(JavaLangBoolean*) value booleanValue];
}

- (id)getHidesWhenStopped {
  return [JavaLangBoolean valueOfWithBoolean :((ASUIActivityIndicatorView*) uiView_).hidesWhenStopped];
}

- (void)setColorWithId:(id)nativeWidget
                withId:(id)value {
  ((ASUIActivityIndicatorView*) nativeWidget).color = (UIColor*) value;
}

- (id)getColor {
  return ((ASUIActivityIndicatorView*) uiView_).color;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableView *) nil_chk(measurableView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
    if (ASProgressBarImpl_isViewWrapped(self)) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
      if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
        ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
      }
    }
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASProgressBarImpl_ProgressBarBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASProgressBarImpl_ProgressBarBean_initWithASProgressBarImpl_(self);
  }
  return bean_;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASProgressBarImpl_ProgressBarCommandBuilder_initWithASProgressBarImpl_(self);
  }
  return builder_;
}

- (void)createSimpleWrapableView {
  ASProgressBarImpl_createSimpleWrapableView(self);
}

- (jboolean)hasScrollView {
  return ASProgressBarImpl_hasScrollView(self);
}

- (jboolean)isViewWrapped {
  return ASProgressBarImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASProgressBarImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b {
  ASProgressBarImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASProgressBarImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  uiView_ = ASProgressBarImpl_nativeCreateViewWithInt_(self, viewtype);
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASProgressBarImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(jint)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASProgressBarImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASProgressBarImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASProgressBarImpl_getScrollView(self);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASProgressBarImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativeCreateViewWithInt:(jint)viewType {
  return ASProgressBarImpl_nativeCreateViewWithInt_(self, viewType);
}

- (void)setProgressTintWithId:(id)objValue {
  ASProgressBarImpl_setProgressTintWithId_(self, objValue);
}

- (id)getProgressTint {
  return ASProgressBarImpl_getProgressTint(self);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASProgressBarImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (jint)measureWidth {
  jint width = [((ASMeasurableView *) nil_chk(measurableView_)) nativeMeasureWidthWithId:uiView_];
  return width;
}

- (jint)measureHeightWithInt:(jint)width {
  jint height = [((ASMeasurableView *) nil_chk(measurableView_)) nativeMeasureHeightWithId:uiView_ withInt:width];
  return height;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 21, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 23, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 26, 1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 35, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, 38, -1, -1 },
    { NULL, "LNSObject;", 0x102, 39, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 42, 32, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(getPaddingBottom);
  methods[10].selector = @selector(getPaddingTop);
  methods[11].selector = @selector(getPaddingRight);
  methods[12].selector = @selector(getPaddingLeft);
  methods[13].selector = @selector(getPaddingEnd);
  methods[14].selector = @selector(getPaddingStart);
  methods[15].selector = @selector(setPaddingVerticalWithId:);
  methods[16].selector = @selector(setPaddingHorizontalWithId:);
  methods[17].selector = @selector(setPaddingTopWithId:);
  methods[18].selector = @selector(setPaddingEndWithId:);
  methods[19].selector = @selector(setPaddingStartWithId:);
  methods[20].selector = @selector(setPaddingLeftWithId:);
  methods[21].selector = @selector(setPaddingRightWithId:);
  methods[22].selector = @selector(setPaddingBottomWithId:);
  methods[23].selector = @selector(setPaddingWithId:);
  methods[24].selector = @selector(setHidesWhenStoppedWithId:withId:);
  methods[25].selector = @selector(getHidesWhenStopped);
  methods[26].selector = @selector(setColorWithId:withId:);
  methods[27].selector = @selector(getColor);
  methods[28].selector = @selector(checkIosVersionWithNSString:);
  methods[29].selector = @selector(setIdWithNSString:);
  methods[30].selector = @selector(requestLayout);
  methods[31].selector = @selector(invalidate);
  methods[32].selector = @selector(getPluginWithNSString:);
  methods[33].selector = @selector(getBean);
  methods[34].selector = @selector(getBuilder);
  methods[35].selector = @selector(createSimpleWrapableView);
  methods[36].selector = @selector(hasScrollView);
  methods[37].selector = @selector(isViewWrapped);
  methods[38].selector = @selector(addForegroundIfNeeded);
  methods[39].selector = @selector(getForeground);
  methods[40].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[41].selector = @selector(asNativeWidget);
  methods[42].selector = @selector(invalidateWrapViewHolder);
  methods[43].selector = @selector(createWrapperViewWithId:withInt:);
  methods[44].selector = @selector(createWrapperViewHolderWithInt:);
  methods[45].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[46].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[47].selector = @selector(getScrollView);
  methods[48].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[49].selector = @selector(nativeCreateViewWithInt:);
  methods[50].selector = @selector(setProgressTintWithId:);
  methods[51].selector = @selector(getProgressTint);
  methods[52].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[53].selector = @selector(measureWidth);
  methods[54].selector = @selector(measureHeightWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 43, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 44, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 45, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LASMeasurableView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "builder_", "LASProgressBarImpl_ProgressBarCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASProgressBarImpl_ProgressBarBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "large_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progressTint_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setPaddingVertical", "LNSObject;", "setPaddingHorizontal", "setPaddingTop", "setPaddingEnd", "setPaddingStart", "setPaddingLeft", "setPaddingRight", "setPaddingBottom", "setPadding", "setHidesWhenStopped", "LNSObject;LNSObject;", "setColor", "checkIosVersion", "setId", "getPlugin", "setForegroundFrame", "IIII", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "I", "nativeAddForeGround", "LASIWidget;", "createWrapperViewHolderNative", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "nativeCreateView", "setProgressTint", "nativeMakeFrameForChildWidget", "measureHeight", &ASProgressBarImpl_FOREGROUND_REGEX, &ASProgressBarImpl_VIEW_HOLDER_REGEX, &ASProgressBarImpl_WIDGET_REGEX, &ASProgressBarImpl_LOCAL_NAME, &ASProgressBarImpl_GROUP_NAME, "LASProgressBarImpl_ProgressBarExt;LASProgressBarImpl_ProgressBarCommandBuilder;LASProgressBarImpl_ProgressBarBean;" };
  static const J2ObjcClassInfo _ASProgressBarImpl = { "ProgressBarImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 55, 12, -1, 48, -1, -1, -1 };
  return &_ASProgressBarImpl;
}

@end

void ASProgressBarImpl_init(ASProgressBarImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASProgressBarImpl_GROUP_NAME, ASProgressBarImpl_LOCAL_NAME);
}

ASProgressBarImpl *new_ASProgressBarImpl_init() {
  J2OBJC_NEW_IMPL(ASProgressBarImpl, init)
}

ASProgressBarImpl *create_ASProgressBarImpl_init() {
  J2OBJC_CREATE_IMPL(ASProgressBarImpl, init)
}

void ASProgressBarImpl_setWidgetOnNativeClass(ASProgressBarImpl *self) {
  ((ASUIActivityIndicatorView*) self.uiView).widget = self;
}

id ASProgressBarImpl_getPaddingBottom(ASProgressBarImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingBottom]);
}

id ASProgressBarImpl_getPaddingTop(ASProgressBarImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingTop]);
}

id ASProgressBarImpl_getPaddingRight(ASProgressBarImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingRight]);
}

id ASProgressBarImpl_getPaddingLeft(ASProgressBarImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingLeft]);
}

id ASProgressBarImpl_getPaddingEnd(ASProgressBarImpl *self) {
  return ASProgressBarImpl_getPaddingRight(self);
}

id ASProgressBarImpl_getPaddingStart(ASProgressBarImpl *self) {
  return ASProgressBarImpl_getPaddingLeft(self);
}

void ASProgressBarImpl_setPaddingVerticalWithId_(ASProgressBarImpl *self, id objValue) {
  ASProgressBarImpl_setPaddingBottomWithId_(self, objValue);
  ASProgressBarImpl_setPaddingTopWithId_(self, objValue);
}

void ASProgressBarImpl_setPaddingHorizontalWithId_(ASProgressBarImpl *self, id objValue) {
  ASProgressBarImpl_setPaddingRightWithId_(self, objValue);
  ASProgressBarImpl_setPaddingLeftWithId_(self, objValue);
}

void ASProgressBarImpl_setPaddingTopWithId_(ASProgressBarImpl *self, id objValue) {
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, self->measurableView_);
}

void ASProgressBarImpl_setPaddingEndWithId_(ASProgressBarImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableView_);
}

void ASProgressBarImpl_setPaddingStartWithId_(ASProgressBarImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableView_);
}

void ASProgressBarImpl_setPaddingLeftWithId_(ASProgressBarImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableView_);
}

void ASProgressBarImpl_setPaddingRightWithId_(ASProgressBarImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableView_);
}

void ASProgressBarImpl_setPaddingBottomWithId_(ASProgressBarImpl *self, id objValue) {
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, self->measurableView_);
}

void ASProgressBarImpl_setPaddingWithId_(ASProgressBarImpl *self, id objValue) {
  ASProgressBarImpl_setPaddingBottomWithId_(self, objValue);
  ASProgressBarImpl_setPaddingTopWithId_(self, objValue);
  ASProgressBarImpl_setPaddingRightWithId_(self, objValue);
  ASProgressBarImpl_setPaddingLeftWithId_(self, objValue);
}

void ASProgressBarImpl_createSimpleWrapableView(ASProgressBarImpl *self) {
  jboolean wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  jint viewType = -1;
  if (wrapViewFeature) {
    jboolean hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    jboolean vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

jboolean ASProgressBarImpl_hasScrollView(ASProgressBarImpl *self) {
  return ASProgressBarImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

jboolean ASProgressBarImpl_isViewWrapped(ASProgressBarImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASProgressBarImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASProgressBarImpl *self, jint l, jint t, jint r, jint b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASProgressBarImpl_invalidateWrapViewHolder(ASProgressBarImpl *self) {
  if (ASProgressBarImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASProgressBarImpl_getScrollView(ASProgressBarImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

void ASProgressBarImpl_nativeCreateWithJavaUtilMap_(ASProgressBarImpl *self, id<JavaUtilMap> params) {
  id iosStyle = [((id<JavaUtilMap>) nil_chk(params)) getWithId:@"iosStyle"];
  self->large_ = (iosStyle == nil || [iosStyle isEqual:@"large"]);
  [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) setDisableForegroundWithBoolean:true];
}

id ASProgressBarImpl_nativeCreateViewWithInt_(ASProgressBarImpl *self, jint viewType) {
  ASUIActivityIndicatorView* view;
  if (self->large_) {
    if (@available(iOS 13.0, *)) {
      view = [[ASUIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleLarge];
    } else {
      view = [[ASUIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    }
  } else {
    if (@available(iOS 13.0, *)) {
      view = [[ASUIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleMedium];
    } else {
      view = [[ASUIActivityIndicatorView alloc] initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleGray];
    }
  }
  [view startAnimating];
  return view;
}

void ASProgressBarImpl_setProgressTintWithId_(ASProgressBarImpl *self, id objValue) {
  self->progressTint_ = objValue;
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(colorStateList)) getColorForStateWithIntArray:[((ASMeasurableView *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  id color = ASViewImpl_getColorWithId_(objValue);
  [self setColorWithId:[self asNativeWidget] withId:color];
}

id ASProgressBarImpl_getProgressTint(ASProgressBarImpl *self) {
  return self->progressTint_;
}

void ASProgressBarImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASProgressBarImpl *self, jint l, jint t, jint r, jint b) {
  if (ASProgressBarImpl_isViewWrapped(self)) {
    id progressView = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrappedView];
    ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(progressView, [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingStart], [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingTop], r - l - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingStart] - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingEnd], b - t - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingTop] - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingBottom]);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASProgressBarImpl)

@implementation ASProgressBarImpl_ProgressBarExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASProgressBarImpl:(ASProgressBarImpl *)outer$ {
  ASProgressBarImpl_ProgressBarExt_initWithASProgressBarImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASProgressBarImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASProgressBarImpl_ProgressBarExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASProgressBarImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASProgressBarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASProgressBarImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASProgressBarImpl_ProgressBarExt = { "ProgressBarExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASProgressBarImpl_ProgressBarExt;
}

@end

void ASProgressBarImpl_ProgressBarExt_initWithASProgressBarImpl_(ASProgressBarImpl_ProgressBarExt *self, ASProgressBarImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASProgressBarImpl_ProgressBarExt *new_ASProgressBarImpl_ProgressBarExt_initWithASProgressBarImpl_(ASProgressBarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASProgressBarImpl_ProgressBarExt, initWithASProgressBarImpl_, outer$)
}

ASProgressBarImpl_ProgressBarExt *create_ASProgressBarImpl_ProgressBarExt_initWithASProgressBarImpl_(ASProgressBarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASProgressBarImpl_ProgressBarExt, initWithASProgressBarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASProgressBarImpl_ProgressBarExt)

@implementation ASProgressBarImpl_ProgressBarCommandBuilder

- (instancetype)initWithASProgressBarImpl:(ASProgressBarImpl *)outer$ {
  ASProgressBarImpl_ProgressBarCommandBuilder_initWithASProgressBarImpl_(self, outer$);
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetIosHidesWhenStopped {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosHidesWhenStopped"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosHidesWhenStopped {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosHidesWhenStopped"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setIosHidesWhenStoppedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosHidesWhenStopped"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetIosColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setIosColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetProgressTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getProgressTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressTint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setProgressTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASProgressBarImpl_ProgressBarCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 12, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 13, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 14, 5, -1, -1, -1, -1 },
    { NULL, "LASProgressBarImpl_ProgressBarCommandBuilder;", 0x1, 15, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASProgressBarImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetIosHidesWhenStopped);
  methods[3].selector = @selector(isIosHidesWhenStopped);
  methods[4].selector = @selector(setIosHidesWhenStoppedWithBoolean:);
  methods[5].selector = @selector(tryGetIosColor);
  methods[6].selector = @selector(getIosColor);
  methods[7].selector = @selector(setIosColorWithNSString:);
  methods[8].selector = @selector(tryGetProgressTint);
  methods[9].selector = @selector(getProgressTint);
  methods[10].selector = @selector(setProgressTintWithNSString:);
  methods[11].selector = @selector(setPaddingWithNSString:);
  methods[12].selector = @selector(tryGetPaddingBottom);
  methods[13].selector = @selector(getPaddingBottom);
  methods[14].selector = @selector(setPaddingBottomWithNSString:);
  methods[15].selector = @selector(tryGetPaddingRight);
  methods[16].selector = @selector(getPaddingRight);
  methods[17].selector = @selector(setPaddingRightWithNSString:);
  methods[18].selector = @selector(tryGetPaddingLeft);
  methods[19].selector = @selector(getPaddingLeft);
  methods[20].selector = @selector(setPaddingLeftWithNSString:);
  methods[21].selector = @selector(tryGetPaddingStart);
  methods[22].selector = @selector(getPaddingStart);
  methods[23].selector = @selector(setPaddingStartWithNSString:);
  methods[24].selector = @selector(tryGetPaddingEnd);
  methods[25].selector = @selector(getPaddingEnd);
  methods[26].selector = @selector(setPaddingEndWithNSString:);
  methods[27].selector = @selector(tryGetPaddingTop);
  methods[28].selector = @selector(getPaddingTop);
  methods[29].selector = @selector(setPaddingTopWithNSString:);
  methods[30].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[31].selector = @selector(setPaddingVerticalWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASProgressBarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASProgressBarImpl;", "execute", "Z", "setIosHidesWhenStopped", "setIosColor", "LNSString;", "setProgressTint", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/ProgressBarImpl$ProgressBarCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASProgressBarImpl_ProgressBarCommandBuilder = { "ProgressBarCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 32, 1, 0, -1, -1, 16, -1 };
  return &_ASProgressBarImpl_ProgressBarCommandBuilder;
}

@end

void ASProgressBarImpl_ProgressBarCommandBuilder_initWithASProgressBarImpl_(ASProgressBarImpl_ProgressBarCommandBuilder *self, ASProgressBarImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASProgressBarImpl_ProgressBarCommandBuilder *new_ASProgressBarImpl_ProgressBarCommandBuilder_initWithASProgressBarImpl_(ASProgressBarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASProgressBarImpl_ProgressBarCommandBuilder, initWithASProgressBarImpl_, outer$)
}

ASProgressBarImpl_ProgressBarCommandBuilder *create_ASProgressBarImpl_ProgressBarCommandBuilder_initWithASProgressBarImpl_(ASProgressBarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASProgressBarImpl_ProgressBarCommandBuilder, initWithASProgressBarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASProgressBarImpl_ProgressBarCommandBuilder)

@implementation ASProgressBarImpl_ProgressBarBean

- (instancetype)initWithASProgressBarImpl:(ASProgressBarImpl *)outer$ {
  ASProgressBarImpl_ProgressBarBean_initWithASProgressBarImpl_(self, outer$);
  return self;
}

- (id)isIosHidesWhenStopped {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosHidesWhenStopped])) executeWithBoolean:false])) isIosHidesWhenStopped];
}

- (void)setIosHidesWhenStoppedWithBoolean:(jboolean)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosHidesWhenStoppedWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosColor {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosColor])) executeWithBoolean:false])) getIosColor];
}

- (void)setIosColorWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getProgressTint {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetProgressTint])) executeWithBoolean:false])) getProgressTint];
}

- (void)setProgressTintWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setProgressTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([((ASProgressBarImpl_ProgressBarCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASProgressBarImpl:);
  methods[1].selector = @selector(isIosHidesWhenStopped);
  methods[2].selector = @selector(setIosHidesWhenStoppedWithBoolean:);
  methods[3].selector = @selector(getIosColor);
  methods[4].selector = @selector(setIosColorWithNSString:);
  methods[5].selector = @selector(getProgressTint);
  methods[6].selector = @selector(setProgressTintWithNSString:);
  methods[7].selector = @selector(setPaddingWithNSString:);
  methods[8].selector = @selector(getPaddingBottom);
  methods[9].selector = @selector(setPaddingBottomWithNSString:);
  methods[10].selector = @selector(getPaddingRight);
  methods[11].selector = @selector(setPaddingRightWithNSString:);
  methods[12].selector = @selector(getPaddingLeft);
  methods[13].selector = @selector(setPaddingLeftWithNSString:);
  methods[14].selector = @selector(getPaddingStart);
  methods[15].selector = @selector(setPaddingStartWithNSString:);
  methods[16].selector = @selector(getPaddingEnd);
  methods[17].selector = @selector(setPaddingEndWithNSString:);
  methods[18].selector = @selector(getPaddingTop);
  methods[19].selector = @selector(setPaddingTopWithNSString:);
  methods[20].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[21].selector = @selector(setPaddingVerticalWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASProgressBarImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASProgressBarImpl;", "setIosHidesWhenStopped", "Z", "setIosColor", "LNSString;", "setProgressTint", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical" };
  static const J2ObjcClassInfo _ASProgressBarImpl_ProgressBarBean = { "ProgressBarBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 22, 1, 0, -1, -1, -1, -1 };
  return &_ASProgressBarImpl_ProgressBarBean;
}

@end

void ASProgressBarImpl_ProgressBarBean_initWithASProgressBarImpl_(ASProgressBarImpl_ProgressBarBean *self, ASProgressBarImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASProgressBarImpl_ProgressBarBean *new_ASProgressBarImpl_ProgressBarBean_initWithASProgressBarImpl_(ASProgressBarImpl *outer$) {
  J2OBJC_NEW_IMPL(ASProgressBarImpl_ProgressBarBean, initWithASProgressBarImpl_, outer$)
}

ASProgressBarImpl_ProgressBarBean *create_ASProgressBarImpl_ProgressBarBean_initWithASProgressBarImpl_(ASProgressBarImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASProgressBarImpl_ProgressBarBean, initWithASProgressBarImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASProgressBarImpl_ProgressBarBean)
