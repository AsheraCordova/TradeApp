//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\SolverVariable.java
//

#include "ArrayRow.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "SolverVariable.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"


@interface ADXSolverVariable () {
 @public
  NSString *mName_;
}

+ (NSString *)getUniqueNameWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                                         withNSString:(NSString *)prefix;

@end

J2OBJC_FIELD_SETTER(ADXSolverVariable, mName_, NSString *)

inline jboolean ADXSolverVariable_get_INTERNAL_DEBUG(void);
#define ADXSolverVariable_INTERNAL_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, INTERNAL_DEBUG, jboolean)

inline jboolean ADXSolverVariable_get_VAR_USE_HASH(void);
#define ADXSolverVariable_VAR_USE_HASH false
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariable, VAR_USE_HASH, jboolean)

inline jint ADXSolverVariable_get_uniqueSlackId(void);
inline jint ADXSolverVariable_set_uniqueSlackId(jint value);
inline jint *ADXSolverVariable_getRef_uniqueSlackId(void);
static jint ADXSolverVariable_uniqueSlackId = 1;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXSolverVariable, uniqueSlackId, jint)

inline jint ADXSolverVariable_get_uniqueErrorId(void);
inline jint ADXSolverVariable_set_uniqueErrorId(jint value);
inline jint *ADXSolverVariable_getRef_uniqueErrorId(void);
static jint ADXSolverVariable_uniqueErrorId = 1;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXSolverVariable, uniqueErrorId, jint)

inline jint ADXSolverVariable_get_uniqueUnrestrictedId(void);
inline jint ADXSolverVariable_set_uniqueUnrestrictedId(jint value);
inline jint *ADXSolverVariable_getRef_uniqueUnrestrictedId(void);
static jint ADXSolverVariable_uniqueUnrestrictedId = 1;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXSolverVariable, uniqueUnrestrictedId, jint)

inline jint ADXSolverVariable_get_uniqueConstantId(void);
inline jint ADXSolverVariable_set_uniqueConstantId(jint value);
inline jint *ADXSolverVariable_getRef_uniqueConstantId(void);
static jint ADXSolverVariable_uniqueConstantId = 1;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXSolverVariable, uniqueConstantId, jint)

inline jint ADXSolverVariable_get_uniqueId(void);
inline jint ADXSolverVariable_set_uniqueId(jint value);
inline jint *ADXSolverVariable_getRef_uniqueId(void);
static jint ADXSolverVariable_uniqueId = 1;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXSolverVariable, uniqueId, jint)

__attribute__((unused)) static NSString *ADXSolverVariable_getUniqueNameWithADXSolverVariable_Type_withNSString_(ADXSolverVariable_Type *type, NSString *prefix);

__attribute__((unused)) static void ADXSolverVariable_Type_initWithNSString_withInt_(ADXSolverVariable_Type *self, NSString *__name, jint __ordinal);

@implementation ADXSolverVariable

+ (void)increaseErrorId {
  ADXSolverVariable_increaseErrorId();
}

+ (NSString *)getUniqueNameWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                                         withNSString:(NSString *)prefix {
  return ADXSolverVariable_getUniqueNameWithADXSolverVariable_Type_withNSString_(type, prefix);
}

- (instancetype)initWithNSString:(NSString *)name
      withADXSolverVariable_Type:(ADXSolverVariable_Type *)type {
  ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(self, name, type);
  return self;
}

- (instancetype)initWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                                  withNSString:(NSString *)prefix {
  ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(self, type, prefix);
  return self;
}

- (void)clearStrengths {
  for (jint i = 0; i < ADXSolverVariable_MAX_STRENGTH; i++) {
    *IOSFloatArray_GetRef(nil_chk(strengthVector_), i) = 0;
  }
}

- (NSString *)strengthsToString {
  NSString *representation = JreStrcat("@C", self, '[');
  jboolean negative = false;
  jboolean empty = true;
  for (jint j = 0; j < ((IOSFloatArray *) nil_chk(strengthVector_))->size_; j++) {
    JreStrAppend(&representation, "F", IOSFloatArray_Get(strengthVector_, j));
    if (IOSFloatArray_Get(strengthVector_, j) > 0) {
      negative = false;
    }
    else if (IOSFloatArray_Get(strengthVector_, j) < 0) {
      negative = true;
    }
    if (IOSFloatArray_Get(strengthVector_, j) != 0) {
      empty = false;
    }
    if (j < strengthVector_->size_ - 1) {
      JreStrAppend(&representation, "$", @", ");
    }
    else {
      JreStrAppend(&representation, "$", @"] ");
    }
  }
  if (negative) {
    JreStrAppend(&representation, "$", @" (-)");
  }
  if (empty) {
    JreStrAppend(&representation, "$", @" (*)");
  }
  return representation;
}

- (void)addToRowWithADXArrayRow:(ADXArrayRow *)row {
  {
    for (jint i = 0; i < mClientEquationsCount_; i++) {
      if (IOSObjectArray_Get(nil_chk(mClientEquations_), i) == row) {
        return;
      }
    }
    if (mClientEquationsCount_ >= ((IOSObjectArray *) nil_chk(mClientEquations_))->size_) {
      JreStrongAssign(&mClientEquations_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(mClientEquations_, mClientEquations_->size_ * 2));
    }
    IOSObjectArray_Set(nil_chk(mClientEquations_), mClientEquationsCount_, row);
    mClientEquationsCount_++;
  }
}

- (void)removeFromRowWithADXArrayRow:(ADXArrayRow *)row {
  {
    jint count = mClientEquationsCount_;
    for (jint i = 0; i < count; i++) {
      if (IOSObjectArray_Get(nil_chk(mClientEquations_), i) == row) {
        for (jint j = i; j < count - 1; j++) {
          IOSObjectArray_Set(mClientEquations_, j, IOSObjectArray_Get(mClientEquations_, j + 1));
        }
        mClientEquationsCount_--;
        return;
      }
    }
  }
}

- (void)updateReferencesWithNewDefinitionWithADXLinearSystem:(ADXLinearSystem *)system
                                             withADXArrayRow:(ADXArrayRow *)definition {
  {
    jint count = mClientEquationsCount_;
    for (jint i = 0; i < count; i++) {
      [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(mClientEquations_), i))) updateFromRowWithADXLinearSystem:system withADXArrayRow:definition withBoolean:false];
    }
    mClientEquationsCount_ = 0;
  }
}

- (void)setFinalValueWithADXLinearSystem:(ADXLinearSystem *)system
                               withFloat:(jfloat)value {
  computedValue_ = value;
  isFinalValue_ = true;
  isSynonym_ = false;
  synonym_ = -1;
  synonymDelta_ = 0;
  jint count = mClientEquationsCount_;
  definitionId_ = -1;
  for (jint i = 0; i < count; i++) {
    [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(mClientEquations_), i))) updateFromFinalVariableWithADXLinearSystem:system withADXSolverVariable:self withBoolean:false];
  }
  mClientEquationsCount_ = 0;
}

- (void)setSynonymWithADXLinearSystem:(ADXLinearSystem *)system
                withADXSolverVariable:(ADXSolverVariable *)synonymVariable
                            withFloat:(jfloat)value {
  isSynonym_ = true;
  synonym_ = ((ADXSolverVariable *) nil_chk(synonymVariable))->id__;
  synonymDelta_ = value;
  jint count = mClientEquationsCount_;
  definitionId_ = -1;
  for (jint i = 0; i < count; i++) {
    [((ADXArrayRow *) nil_chk(IOSObjectArray_Get(nil_chk(mClientEquations_), i))) updateFromSynonymVariableWithADXLinearSystem:system withADXSolverVariable:self withBoolean:false];
  }
  mClientEquationsCount_ = 0;
  [((ADXLinearSystem *) nil_chk(system)) displayReadableRows];
}

- (void)reset {
  JreStrongAssign(&mName_, nil);
  JreStrongAssign(&mType_, JreLoadEnum(ADXSolverVariable_Type, UNKNOWN));
  strength_ = ADXSolverVariable_STRENGTH_NONE;
  id__ = -1;
  definitionId_ = -1;
  computedValue_ = 0;
  JavaUtilArrays_fillWithNSObjectArray_withId_(mClientEquations_, nil);
  isFinalValue_ = false;
  isSynonym_ = false;
  synonym_ = -1;
  synonymDelta_ = 0;
  {
    jint count = mClientEquationsCount_;
    for (jint i = 0; i < count; i++) {
      IOSObjectArray_Set(nil_chk(mClientEquations_), i, nil);
    }
    mClientEquationsCount_ = 0;
  }
  usageInRowCount_ = 0;
  inGoal_ = false;
  JavaUtilArrays_fillWithFloatArray_withFloat_(goalStrengthVector_, 0);
}

- (NSString *)getName {
  return mName_;
}

- (void)setNameWithNSString:(NSString *)name {
  JreStrongAssign(&mName_, name);
}

- (void)setTypeWithADXSolverVariable_Type:(ADXSolverVariable_Type *)type
                             withNSString:(NSString *)prefix {
  JreStrongAssign(&mType_, type);
}

- (jint)compareToWithId:(ADXSolverVariable *)v {
  cast_chk(v, [ADXSolverVariable class]);
  return self->id__ - ((ADXSolverVariable *) nil_chk(v))->id__;
}

- (NSString *)description {
  NSString *result = @"";
  {
    if (mName_ != nil) {
      JreStrAppend(&result, "$", mName_);
    }
    else {
      JreStrAppend(&result, "I", id__);
    }
  }
  return result;
}

- (void)dealloc {
  RELEASE_(mName_);
  RELEASE_(strengthVector_);
  RELEASE_(goalStrengthVector_);
  RELEASE_(mType_);
  RELEASE_(mClientEquations_);
  RELEASE_(inRows_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x8, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 17, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(increaseErrorId);
  methods[1].selector = @selector(getUniqueNameWithADXSolverVariable_Type:withNSString:);
  methods[2].selector = @selector(initWithNSString:withADXSolverVariable_Type:);
  methods[3].selector = @selector(initWithADXSolverVariable_Type:withNSString:);
  methods[4].selector = @selector(clearStrengths);
  methods[5].selector = @selector(strengthsToString);
  methods[6].selector = @selector(addToRowWithADXArrayRow:);
  methods[7].selector = @selector(removeFromRowWithADXArrayRow:);
  methods[8].selector = @selector(updateReferencesWithNewDefinitionWithADXLinearSystem:withADXArrayRow:);
  methods[9].selector = @selector(setFinalValueWithADXLinearSystem:withFloat:);
  methods[10].selector = @selector(setSynonymWithADXLinearSystem:withADXSolverVariable:withFloat:);
  methods[11].selector = @selector(reset);
  methods[12].selector = @selector(getName);
  methods[13].selector = @selector(setNameWithNSString:);
  methods[14].selector = @selector(setTypeWithADXSolverVariable_Type:withNSString:);
  methods[15].selector = @selector(compareToWithId:);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INTERNAL_DEBUG", "Z", .constantValue.asBOOL = ADXSolverVariable_INTERNAL_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "VAR_USE_HASH", "Z", .constantValue.asBOOL = ADXSolverVariable_VAR_USE_HASH, 0x1a, -1, -1, -1, -1 },
    { "STRENGTH_NONE", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_NONE, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_LOW", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_LOW, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_MEDIUM", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_MEDIUM, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_HIGH", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_HIGH, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_HIGHEST", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_HIGHEST, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_EQUALITY", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_EQUALITY, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_BARRIER", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_BARRIER, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_CENTERING", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_CENTERING, 0x19, -1, -1, -1, -1 },
    { "STRENGTH_FIXED", "I", .constantValue.asInt = ADXSolverVariable_STRENGTH_FIXED, 0x19, -1, -1, -1, -1 },
    { "uniqueSlackId", "I", .constantValue.asLong = 0, 0xa, -1, 18, -1, -1 },
    { "uniqueErrorId", "I", .constantValue.asLong = 0, 0xa, -1, 19, -1, -1 },
    { "uniqueUnrestrictedId", "I", .constantValue.asLong = 0, 0xa, -1, 20, -1, -1 },
    { "uniqueConstantId", "I", .constantValue.asLong = 0, 0xa, -1, 21, -1, -1 },
    { "uniqueId", "I", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "inGoal_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "id__", "I", .constantValue.asLong = 0, 0x1, 23, -1, -1, -1 },
    { "definitionId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "strength_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "computedValue_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "isFinalValue_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "MAX_STRENGTH", "I", .constantValue.asInt = ADXSolverVariable_MAX_STRENGTH, 0x18, -1, -1, -1, -1 },
    { "strengthVector_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "goalStrengthVector_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mType_", "LADXSolverVariable_Type;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mClientEquations_", "[LADXArrayRow;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mClientEquationsCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "usageInRowCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "isSynonym_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "synonym_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "synonymDelta_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "inRows_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x0, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "getUniqueName", "LADXSolverVariable_Type;LNSString;", "LNSString;LADXSolverVariable_Type;", "addToRow", "LADXArrayRow;", "removeFromRow", "updateReferencesWithNewDefinition", "LADXLinearSystem;LADXArrayRow;", "setFinalValue", "LADXLinearSystem;F", "setSynonym", "LADXLinearSystem;LADXSolverVariable;F", "setName", "LNSString;", "setType", "compareTo", "LADXSolverVariable;", "toString", &ADXSolverVariable_uniqueSlackId, &ADXSolverVariable_uniqueErrorId, &ADXSolverVariable_uniqueUnrestrictedId, &ADXSolverVariable_uniqueConstantId, &ADXSolverVariable_uniqueId, "id", "Ljava/util/HashSet<Landroidx/constraintlayout/core/ArrayRow;>;", "LADXSolverVariable_Type;", "Ljava/lang/Object;Ljava/lang/Comparable<Landroidx/constraintlayout/core/SolverVariable;>;" };
  static const J2ObjcClassInfo _ADXSolverVariable = { "SolverVariable", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x1, 17, 34, -1, 25, -1, 26, -1 };
  return &_ADXSolverVariable;
}

@end

void ADXSolverVariable_increaseErrorId() {
  ADXSolverVariable_initialize();
  ADXSolverVariable_uniqueErrorId++;
}

NSString *ADXSolverVariable_getUniqueNameWithADXSolverVariable_Type_withNSString_(ADXSolverVariable_Type *type, NSString *prefix) {
  ADXSolverVariable_initialize();
  if (prefix != nil) {
    return JreStrcat("$I", prefix, ADXSolverVariable_uniqueErrorId);
  }
  switch ([type ordinal]) {
    case ADXSolverVariable_Type_Enum_UNRESTRICTED:
    return JreStrcat("CI", 'U', ++ADXSolverVariable_uniqueUnrestrictedId);
    case ADXSolverVariable_Type_Enum_CONSTANT:
    return JreStrcat("CI", 'C', ++ADXSolverVariable_uniqueConstantId);
    case ADXSolverVariable_Type_Enum_SLACK:
    return JreStrcat("CI", 'S', ++ADXSolverVariable_uniqueSlackId);
    case ADXSolverVariable_Type_Enum_ERROR:
    {
      return JreStrcat("CI", 'e', ++ADXSolverVariable_uniqueErrorId);
    }
    case ADXSolverVariable_Type_Enum_UNKNOWN:
    return JreStrcat("CI", 'V', ++ADXSolverVariable_uniqueId);
  }
  @throw create_JavaLangAssertionError_initWithId_([((ADXSolverVariable_Type *) nil_chk(type)) name]);
}

void ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(ADXSolverVariable *self, NSString *name, ADXSolverVariable_Type *type) {
  NSObject_init(self);
  self->id__ = -1;
  self->definitionId_ = -1;
  self->strength_ = 0;
  self->isFinalValue_ = false;
  JreStrongAssignAndConsume(&self->strengthVector_, [IOSFloatArray newArrayWithLength:ADXSolverVariable_MAX_STRENGTH]);
  JreStrongAssignAndConsume(&self->goalStrengthVector_, [IOSFloatArray newArrayWithLength:ADXSolverVariable_MAX_STRENGTH]);
  JreStrongAssignAndConsume(&self->mClientEquations_, [IOSObjectArray newArrayWithLength:16 type:ADXArrayRow_class_()]);
  self->mClientEquationsCount_ = 0;
  self->usageInRowCount_ = 0;
  self->isSynonym_ = false;
  self->synonym_ = -1;
  self->synonymDelta_ = 0;
  JreStrongAssign(&self->inRows_, nil);
  JreStrongAssign(&self->mName_, name);
  JreStrongAssign(&self->mType_, type);
}

ADXSolverVariable *new_ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(NSString *name, ADXSolverVariable_Type *type) {
  J2OBJC_NEW_IMPL(ADXSolverVariable, initWithNSString_withADXSolverVariable_Type_, name, type)
}

ADXSolverVariable *create_ADXSolverVariable_initWithNSString_withADXSolverVariable_Type_(NSString *name, ADXSolverVariable_Type *type) {
  J2OBJC_CREATE_IMPL(ADXSolverVariable, initWithNSString_withADXSolverVariable_Type_, name, type)
}

void ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(ADXSolverVariable *self, ADXSolverVariable_Type *type, NSString *prefix) {
  NSObject_init(self);
  self->id__ = -1;
  self->definitionId_ = -1;
  self->strength_ = 0;
  self->isFinalValue_ = false;
  JreStrongAssignAndConsume(&self->strengthVector_, [IOSFloatArray newArrayWithLength:ADXSolverVariable_MAX_STRENGTH]);
  JreStrongAssignAndConsume(&self->goalStrengthVector_, [IOSFloatArray newArrayWithLength:ADXSolverVariable_MAX_STRENGTH]);
  JreStrongAssignAndConsume(&self->mClientEquations_, [IOSObjectArray newArrayWithLength:16 type:ADXArrayRow_class_()]);
  self->mClientEquationsCount_ = 0;
  self->usageInRowCount_ = 0;
  self->isSynonym_ = false;
  self->synonym_ = -1;
  self->synonymDelta_ = 0;
  JreStrongAssign(&self->inRows_, nil);
  JreStrongAssign(&self->mType_, type);
}

ADXSolverVariable *new_ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(ADXSolverVariable_Type *type, NSString *prefix) {
  J2OBJC_NEW_IMPL(ADXSolverVariable, initWithADXSolverVariable_Type_withNSString_, type, prefix)
}

ADXSolverVariable *create_ADXSolverVariable_initWithADXSolverVariable_Type_withNSString_(ADXSolverVariable_Type *type, NSString *prefix) {
  J2OBJC_CREATE_IMPL(ADXSolverVariable, initWithADXSolverVariable_Type_withNSString_, type, prefix)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSolverVariable)

J2OBJC_INITIALIZED_DEFN(ADXSolverVariable_Type)

ADXSolverVariable_Type *ADXSolverVariable_Type_values_[5];

@implementation ADXSolverVariable_Type

+ (IOSObjectArray *)values {
  return ADXSolverVariable_Type_values();
}

+ (ADXSolverVariable_Type *)valueOfWithNSString:(NSString *)name {
  return ADXSolverVariable_Type_valueOfWithNSString_(name);
}

- (ADXSolverVariable_Type_Enum)toNSEnum {
  return (ADXSolverVariable_Type_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXSolverVariable_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNRESTRICTED", "LADXSolverVariable_Type;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "CONSTANT", "LADXSolverVariable_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "SLACK", "LADXSolverVariable_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "ERROR", "LADXSolverVariable_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "UNKNOWN", "LADXSolverVariable_Type;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXSolverVariable_Type, UNRESTRICTED), &JreEnum(ADXSolverVariable_Type, CONSTANT), &JreEnum(ADXSolverVariable_Type, SLACK), &JreEnum(ADXSolverVariable_Type, ERROR), &JreEnum(ADXSolverVariable_Type, UNKNOWN), "LADXSolverVariable;", "Ljava/lang/Enum<Landroidx/constraintlayout/core/SolverVariable$Type;>;" };
  static const J2ObjcClassInfo _ADXSolverVariable_Type = { "Type", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x4019, 2, 5, 7, -1, -1, 8, -1 };
  return &_ADXSolverVariable_Type;
}

+ (void)initialize {
  if (self == [ADXSolverVariable_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 5 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 5; i++) {
      ((void)(ADXSolverVariable_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXSolverVariable_Type_initWithNSString_withInt_(e, JreEnumConstantName(ADXSolverVariable_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXSolverVariable_Type)
  }
}

@end

void ADXSolverVariable_Type_initWithNSString_withInt_(ADXSolverVariable_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXSolverVariable_Type_values() {
  ADXSolverVariable_Type_initialize();
  return [IOSObjectArray arrayWithObjects:ADXSolverVariable_Type_values_ count:5 type:ADXSolverVariable_Type_class_()];
}

ADXSolverVariable_Type *ADXSolverVariable_Type_valueOfWithNSString_(NSString *name) {
  ADXSolverVariable_Type_initialize();
  for (int i = 0; i < 5; i++) {
    ADXSolverVariable_Type *e = ADXSolverVariable_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXSolverVariable_Type *ADXSolverVariable_Type_fromOrdinal(NSUInteger ordinal) {
  ADXSolverVariable_Type_initialize();
  if (ordinal >= 5) {
    return nil;
  }
  return ADXSolverVariable_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSolverVariable_Type)
