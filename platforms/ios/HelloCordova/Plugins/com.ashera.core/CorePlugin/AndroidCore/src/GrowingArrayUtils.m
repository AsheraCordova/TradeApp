//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\GrowingArrayUtils.java
//

#include "GrowingArrayUtils.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"


@interface ADGrowingArrayUtils ()

- (instancetype)init;

@end

__attribute__((unused)) static void ADGrowingArrayUtils_init(ADGrowingArrayUtils *self);

__attribute__((unused)) static ADGrowingArrayUtils *new_ADGrowingArrayUtils_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADGrowingArrayUtils *create_ADGrowingArrayUtils_init(void);

@implementation ADGrowingArrayUtils

+ (IOSBooleanArray *)appendWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                withBoolean:(jboolean)element {
  return ADGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(array, currentSize, element);
}

+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                     withId:(id)element {
  return ADGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(array, currentSize, element);
}

+ (IOSIntArray *)appendWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)element {
  return ADGrowingArrayUtils_appendWithIntArray_withInt_withInt_(array, currentSize, element);
}

+ (IOSIntArray *)insertWithIntArray:(IOSIntArray *)array
                            withInt:(jint)currentSize
                            withInt:(jint)index
                            withInt:(jint)element {
  return ADGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(array, currentSize, index, element);
}

+ (IOSLongArray *)insertWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                              withInt:(jint)index
                             withLong:(jlong)element {
  return ADGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(array, currentSize, index, element);
}

+ (IOSBooleanArray *)insertWithBooleanArray:(IOSBooleanArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                withBoolean:(jboolean)element {
  return ADGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(array, currentSize, index, element);
}

+ (jint)growSizeWithInt:(jint)currentSize {
  return ADGrowingArrayUtils_growSizeWithInt_(currentSize);
}

+ (IOSObjectArray *)insertWithNSObjectArray:(IOSObjectArray *)array
                                    withInt:(jint)currentSize
                                    withInt:(jint)index
                                     withId:(id)element {
  return ADGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(array, currentSize, index, element);
}

+ (IOSLongArray *)appendWithLongArray:(IOSLongArray *)array
                              withInt:(jint)currentSize
                             withLong:(jlong)element {
  return ADGrowingArrayUtils_appendWithLongArray_withInt_withLong_(array, currentSize, element);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADGrowingArrayUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 0, 2, -1, 3, -1, -1 },
    { NULL, "[I", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "[J", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "[Z", 0x9, 5, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x9, 5, 11, -1, 12, -1, -1 },
    { NULL, "[J", 0x9, 0, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(appendWithBooleanArray:withInt:withBoolean:);
  methods[1].selector = @selector(appendWithNSObjectArray:withInt:withId:);
  methods[2].selector = @selector(appendWithIntArray:withInt:withInt:);
  methods[3].selector = @selector(insertWithIntArray:withInt:withInt:withInt:);
  methods[4].selector = @selector(insertWithLongArray:withInt:withInt:withLong:);
  methods[5].selector = @selector(insertWithBooleanArray:withInt:withInt:withBoolean:);
  methods[6].selector = @selector(growSizeWithInt:);
  methods[7].selector = @selector(insertWithNSObjectArray:withInt:withInt:withId:);
  methods[8].selector = @selector(appendWithLongArray:withInt:withLong:);
  methods[9].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "append", "[ZIZ", "[LNSObject;ILNSObject;", "<T:Ljava/lang/Object;>([TT;ITT;)[TT;", "[III", "insert", "[IIII", "[JIIJ", "[ZIIZ", "growSize", "I", "[LNSObject;IILNSObject;", "<T:Ljava/lang/Object;>([TT;IITT;)[TT;", "[JIJ" };
  static const J2ObjcClassInfo _ADGrowingArrayUtils = { "GrowingArrayUtils", "r.android.util", ptrTable, methods, NULL, 7, 0x11, 10, 0, -1, -1, -1, -1, -1 };
  return &_ADGrowingArrayUtils;
}

@end

IOSBooleanArray *ADGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jboolean element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:36 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSBooleanArray *newArray = [IOSBooleanArray arrayWithLength:currentSize];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSBooleanArray_GetRef(array, currentSize) = element;
  return array;
}

IOSObjectArray *ADGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(IOSObjectArray *array, jint currentSize, id element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:56 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSObjectArray *newArray = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], ADGrowingArrayUtils_growSizeWithInt_(currentSize)), IOSClass_arrayType(NSObject_class_(), 1));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  IOSObjectArray_Set(nil_chk(array), currentSize, element);
  return array;
}

IOSIntArray *ADGrowingArrayUtils_appendWithIntArray_withInt_withInt_(IOSIntArray *array, jint currentSize, jint element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:74 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSIntArray *newArray = [IOSIntArray arrayWithLength:ADGrowingArrayUtils_growSizeWithInt_(currentSize)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSIntArray_GetRef(array, currentSize) = element;
  return array;
}

IOSIntArray *ADGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(IOSIntArray *array, jint currentSize, jint index, jint element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSIntArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:89 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSIntArray_GetRef(array, index) = element;
    return array;
  }
  IOSIntArray *newArray = [IOSIntArray arrayWithLength:ADGrowingArrayUtils_growSizeWithInt_(currentSize)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSIntArray_GetRef(newArray, index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSLongArray *ADGrowingArrayUtils_insertWithLongArray_withInt_withInt_withLong_(IOSLongArray *array, jint currentSize, jint index, jlong element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:108 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSLongArray_GetRef(array, index) = element;
    return array;
  }
  IOSLongArray *newArray = [IOSLongArray arrayWithLength:(ADGrowingArrayUtils_growSizeWithInt_(currentSize))];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSLongArray_GetRef(newArray, index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSBooleanArray *ADGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(IOSBooleanArray *array, jint currentSize, jint index, jboolean element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSBooleanArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:127 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    *IOSBooleanArray_GetRef(array, index) = element;
    return array;
  }
  IOSBooleanArray *newArray = [IOSBooleanArray arrayWithLength:ADGrowingArrayUtils_growSizeWithInt_(currentSize)];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  *IOSBooleanArray_GetRef(newArray, index) = element;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

jint ADGrowingArrayUtils_growSizeWithInt_(jint currentSize) {
  ADGrowingArrayUtils_initialize();
  return currentSize <= 4 ? 8 : currentSize * 2;
}

IOSObjectArray *ADGrowingArrayUtils_insertWithNSObjectArray_withInt_withInt_withId_(IOSObjectArray *array, jint currentSize, jint index, id element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSObjectArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:163 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 <= array->size_) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, array, index + 1, currentSize - index);
    IOSObjectArray_Set(array, index, element);
    return array;
  }
  IOSObjectArray *newArray = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[array java_getClass] getComponentType], ADGrowingArrayUtils_growSizeWithInt_(currentSize)), IOSClass_arrayType(NSObject_class_(), 1));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, index);
  IOSObjectArray_Set(nil_chk(newArray), index, element);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, index, newArray, index + 1, array->size_ - index);
  return newArray;
}

IOSLongArray *ADGrowingArrayUtils_appendWithLongArray_withInt_withLong_(IOSLongArray *array, jint currentSize, jlong element) {
  ADGrowingArrayUtils_initialize();
  JreAssert(currentSize <= ((IOSLongArray *) nil_chk(array))->size_, @"r\\android\\util\\GrowingArrayUtils.java:184 condition failed: assert currentSize <= array.length;");
  if (currentSize + 1 > array->size_) {
    IOSLongArray *newArray = [IOSLongArray arrayWithLength:ADGrowingArrayUtils_growSizeWithInt_(currentSize)];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(array, 0, newArray, 0, currentSize);
    array = newArray;
  }
  *IOSLongArray_GetRef(array, currentSize) = element;
  return array;
}

void ADGrowingArrayUtils_init(ADGrowingArrayUtils *self) {
  NSObject_init(self);
}

ADGrowingArrayUtils *new_ADGrowingArrayUtils_init() {
  J2OBJC_NEW_IMPL(ADGrowingArrayUtils, init)
}

ADGrowingArrayUtils *create_ADGrowingArrayUtils_init() {
  J2OBJC_CREATE_IMPL(ADGrowingArrayUtils, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADGrowingArrayUtils)
