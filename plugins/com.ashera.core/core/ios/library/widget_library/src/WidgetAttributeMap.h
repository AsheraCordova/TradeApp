//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\WidgetAttributeMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_WidgetAttributeMap")
#ifdef RESTRICT_WidgetAttributeMap
#define INCLUDE_ALL_WidgetAttributeMap 0
#else
#define INCLUDE_ALL_WidgetAttributeMap 1
#endif
#undef RESTRICT_WidgetAttributeMap

#if !defined (ASWidgetAttributeMap_) && (INCLUDE_ALL_WidgetAttributeMap || defined(INCLUDE_ASWidgetAttributeMap))
#define ASWidgetAttributeMap_

#define RESTRICT_JavaUtilTreeMap 1
#define INCLUDE_JavaUtilTreeMap 1
#include "java/util/TreeMap.h"

@class ASWidgetAttribute;
@class ASWidgetAttributeValue;
@class JavaUtilHashMap;
@protocol ASWidgetAttributeMapFilter;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionBiFunction;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSortedMap;

@interface ASWidgetAttributeMap : JavaUtilTreeMap

#pragma mark Public

- (instancetype)init;

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)orderMap;

- (ASWidgetAttribute *)ceilingKeyWithId:(ASWidgetAttribute *)arg0;

- (id<JavaUtilList>)computeIfAbsentWithId:(ASWidgetAttribute *)arg0
             withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg1;

- (id<JavaUtilList>)computeIfPresentWithId:(ASWidgetAttribute *)arg0
            withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (id<JavaUtilList>)computeWithId:(ASWidgetAttribute *)arg0
   withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg1;

- (ASWidgetAttribute *)firstKey;

- (ASWidgetAttribute *)floorKeyWithId:(ASWidgetAttribute *)arg0;

- (id<ASWidgetAttributeMapFilter>)getFilter;

- (id<JavaUtilList>)getOrDefaultWithId:(id)arg0
                                withId:(id<JavaUtilList>)arg1;

- (ASWidgetAttributeMap *)getParent;

- (ASWidgetAttribute *)getWidgetAttributeWithNSString:(NSString *)key;

- (id<JavaUtilList>)getWithId:(id)arg0;

- (ASWidgetAttribute *)higherKeyWithId:(ASWidgetAttribute *)arg0;

- (ASWidgetAttribute *)lastKey;

- (ASWidgetAttribute *)lowerKeyWithId:(ASWidgetAttribute *)arg0;

- (id<JavaUtilList>)mergeWithId:(ASWidgetAttribute *)arg0
                         withId:(id<JavaUtilList>)arg1
 withJavaUtilFunctionBiFunction:(id<JavaUtilFunctionBiFunction>)arg2;

- (id<JavaUtilList>)putWithId:(ASWidgetAttribute *)key
                       withId:(id<JavaUtilList>)value;

- (void)putWithASWidgetAttribute:(ASWidgetAttribute *)key
      withASWidgetAttributeValue:(ASWidgetAttributeValue *)value;

- (id<JavaUtilList>)putIfAbsentWithId:(ASWidgetAttribute *)arg0
                               withId:(id<JavaUtilList>)arg1;

- (id<JavaUtilList>)removeWithId:(id)arg0;

- (id<JavaUtilList>)replaceWithId:(ASWidgetAttribute *)arg0
                           withId:(id<JavaUtilList>)arg1;

- (void)setFilterWithASWidgetAttributeMapFilter:(id<ASWidgetAttributeMapFilter>)filter;

- (void)setParentWithASWidgetAttributeMap:(ASWidgetAttributeMap *)parent;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)arg0 NS_UNAVAILABLE;

- (instancetype)initWithJavaUtilSortedMap:(id<JavaUtilSortedMap>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASWidgetAttributeMap)

FOUNDATION_EXPORT void ASWidgetAttributeMap_init(ASWidgetAttributeMap *self);

FOUNDATION_EXPORT ASWidgetAttributeMap *new_ASWidgetAttributeMap_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASWidgetAttributeMap *create_ASWidgetAttributeMap_init(void);

FOUNDATION_EXPORT void ASWidgetAttributeMap_initWithJavaUtilHashMap_(ASWidgetAttributeMap *self, JavaUtilHashMap *orderMap);

FOUNDATION_EXPORT ASWidgetAttributeMap *new_ASWidgetAttributeMap_initWithJavaUtilHashMap_(JavaUtilHashMap *orderMap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASWidgetAttributeMap *create_ASWidgetAttributeMap_initWithJavaUtilHashMap_(JavaUtilHashMap *orderMap);

J2OBJC_TYPE_LITERAL_HEADER(ASWidgetAttributeMap)

@compatibility_alias ComAsheraWidgetWidgetAttributeMap ASWidgetAttributeMap;

#endif

#pragma pop_macro("INCLUDE_ALL_WidgetAttributeMap")
