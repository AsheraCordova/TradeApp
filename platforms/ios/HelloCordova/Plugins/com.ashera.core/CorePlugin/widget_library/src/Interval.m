//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\attributedtext\Interval.java
//

#include "IOSObjectArray.h"
#include "Interval.h"
#include "J2ObjC_source.h"


@interface ASInterval () {
 @public
  jint start_;
  jint end_;
  jint max_;
  ASInterval *left_;
  ASInterval *right_;
}

@end

J2OBJC_FIELD_SETTER(ASInterval, left_, ASInterval *)
J2OBJC_FIELD_SETTER(ASInterval, right_, ASInterval *)

@implementation ASInterval

- (jint)getStart {
  return start_;
}

- (void)setStartWithInt:(jint)start {
  self->start_ = start;
}

- (jint)getEnd {
  return end_;
}

- (void)setEndWithInt:(jint)end {
  self->end_ = end;
}

- (jint)getMax {
  return max_;
}

- (void)setMaxWithInt:(jint)max {
  self->max_ = max;
}

- (ASInterval *)getLeft {
  return left_;
}

- (void)setLeftWithASInterval:(ASInterval *)left {
  JreStrongAssign(&self->left_, left);
}

- (ASInterval *)getRight {
  return right_;
}

- (void)setRightWithASInterval:(ASInterval *)right {
  JreStrongAssign(&self->right_, right);
}

- (instancetype)initWithInt:(jint)start
                    withInt:(jint)end {
  ASInterval_initWithInt_withInt_(self, start, end);
  return self;
}

- (jint)compareToWithId:(ASInterval *)i {
  cast_chk(i, [ASInterval class]);
  if (self->start_ < ((ASInterval *) nil_chk(i))->start_) {
    return -1;
  }
  else if (self->start_ == i->start_) {
    return self->end_ <= i->end_ ? -1 : 1;
  }
  else {
    return 1;
  }
}

- (ASInterval *)makeNodeWithInt:(jint)start
                        withInt:(jint)end
              withNSObjectArray:(IOSObjectArray *)arguments {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSObjectArray *)getArgs {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)dealloc {
  RELEASE_(left_);
  RELEASE_(right_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "LASInterval;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LASInterval;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LASInterval;", 0x481, 9, 10, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getStart);
  methods[1].selector = @selector(setStartWithInt:);
  methods[2].selector = @selector(getEnd);
  methods[3].selector = @selector(setEndWithInt:);
  methods[4].selector = @selector(getMax);
  methods[5].selector = @selector(setMaxWithInt:);
  methods[6].selector = @selector(getLeft);
  methods[7].selector = @selector(setLeftWithASInterval:);
  methods[8].selector = @selector(getRight);
  methods[9].selector = @selector(setRightWithASInterval:);
  methods[10].selector = @selector(initWithInt:withInt:);
  methods[11].selector = @selector(compareToWithId:);
  methods[12].selector = @selector(makeNodeWithInt:withInt:withNSObjectArray:);
  methods[13].selector = @selector(getArgs);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "start_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "max_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "left_", "LASInterval;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "right_", "LASInterval;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setStart", "I", "setEnd", "setMax", "setLeft", "LASInterval;", "setRight", "II", "compareTo", "makeNode", "II[LNSObject;", "Ljava/lang/Object;Ljava/lang/Comparable<Lcom/ashera/attributedtext/Interval;>;" };
  static const J2ObjcClassInfo _ASInterval = { "Interval", "com.ashera.attributedtext", ptrTable, methods, fields, 7, 0x401, 14, 5, -1, -1, -1, 11, -1 };
  return &_ASInterval;
}

@end

void ASInterval_initWithInt_withInt_(ASInterval *self, jint start, jint end) {
  NSObject_init(self);
  self->start_ = start;
  self->end_ = end;
  self->max_ = end;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASInterval)
