//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\MarqueeCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "MarqueeCommandConverter.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuffer.h"


@interface ASMarqueeCommandConverter () {
 @public
  jint whiteSpace_;
  jint offset_;
  NSString *originalText_;
  NSString *direction_;
}

@end

J2OBJC_FIELD_SETTER(ASMarqueeCommandConverter, originalText_, NSString *)
J2OBJC_FIELD_SETTER(ASMarqueeCommandConverter, direction_, NSString *)

@implementation ASMarqueeCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASMarqueeCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (instancetype)initWithNSString:(NSString *)id_
                         withInt:(jint)whiteSpace
                         withInt:(jint)offset
                    withNSString:(NSString *)direction {
  ASMarqueeCommandConverter_initWithNSString_withInt_withInt_withNSString_(self, id_, whiteSpace, offset, direction);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (value == nil) {
    return nil;
  }
  NSString *text = (NSString *) cast_chk(value, [NSString class]);
  if (originalText_ != nil && ![originalText_ isEqual:text]) {
    self->offset_ = 0;
    self->whiteSpace_ = 0;
    JreStrongAssign(&self->originalText_, text);
    return text;
  }
  JreStrongAssign(&self->originalText_, text);
  if ([((NSString *) nil_chk(direction_)) isEqual:@"forward"]) {
    JavaLangStringBuffer *strBuf = create_JavaLangStringBuffer_initWithNSString_(text);
    for (jint i = 0; i < whiteSpace_; i++) {
      [strBuf appendWithNSString:@"\u2003"];
    }
    NSString *indexFirst = JreRetainedLocalValue([strBuf substringWithInt:0 withInt:offset_]);
    NSString *indexSecond = JreRetainedLocalValue([strBuf substringWithInt:offset_]);
    return JreStrcat("$$", indexSecond, indexFirst);
  }
  else {
    JavaLangStringBuffer *strBuf = create_JavaLangStringBuffer_initWithNSString_(text);
    for (jint i = 0; i < whiteSpace_; i++) {
      [strBuf insertWithInt:0 withNSString:@"\u2003"];
    }
    NSString *indexFirst = JreRetainedLocalValue([strBuf substringWithInt:[strBuf java_length] - offset_ withInt:[strBuf java_length]]);
    NSString *indexSecond = JreRetainedLocalValue([strBuf substringWithInt:0 withInt:[strBuf java_length] - offset_]);
    return JreStrcat("$$", indexFirst, indexSecond);
  }
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  return create_ASMarqueeCommandConverter_initWithNSString_withInt_withInt_withNSString_(self->id__, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangInteger class]))) intValue], (NSString *) cast_chk(IOSObjectArray_Get(args, 2), [NSString class]));
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  whiteSpace_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [JavaLangInteger class]))) intValue];
  offset_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangInteger class]))) intValue];
}

- (jint)getOffset {
  return offset_;
}

- (void)dealloc {
  RELEASE_(originalText_);
  RELEASE_(direction_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 6, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withInt:withInt:withNSString:);
  methods[2].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  methods[5].selector = @selector(getOffset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "whiteSpace_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "offset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;IILNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs" };
  static const J2ObjcClassInfo _ASMarqueeCommandConverter = { "MarqueeCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 6, 4, -1, -1, -1, -1, -1 };
  return &_ASMarqueeCommandConverter;
}

@end

void ASMarqueeCommandConverter_initWithNSString_(ASMarqueeCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASMarqueeCommandConverter *new_ASMarqueeCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASMarqueeCommandConverter, initWithNSString_, id_)
}

ASMarqueeCommandConverter *create_ASMarqueeCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASMarqueeCommandConverter, initWithNSString_, id_)
}

void ASMarqueeCommandConverter_initWithNSString_withInt_withInt_withNSString_(ASMarqueeCommandConverter *self, NSString *id_, jint whiteSpace, jint offset, NSString *direction) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
  self->whiteSpace_ = whiteSpace;
  JreStrongAssign(&self->direction_, direction);
}

ASMarqueeCommandConverter *new_ASMarqueeCommandConverter_initWithNSString_withInt_withInt_withNSString_(NSString *id_, jint whiteSpace, jint offset, NSString *direction) {
  J2OBJC_NEW_IMPL(ASMarqueeCommandConverter, initWithNSString_withInt_withInt_withNSString_, id_, whiteSpace, offset, direction)
}

ASMarqueeCommandConverter *create_ASMarqueeCommandConverter_initWithNSString_withInt_withInt_withNSString_(NSString *id_, jint whiteSpace, jint offset, NSString *direction) {
  J2OBJC_CREATE_IMPL(ASMarqueeCommandConverter, initWithNSString_withInt_withInt_withNSString_, id_, whiteSpace, offset, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMarqueeCommandConverter)
