//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\ConstraintWidget.java
//

#include "ArrayRow.h"
#include "Cache.h"
#include "ChainRun.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "CoreBarrier.h"
#include "CoreGuideline.h"
#include "CoreVirtualLayout.h"
#include "DependencyNode.h"
#include "HorizontalWidgetRun.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "Metrics.h"
#include "Optimizer.h"
#include "SolverVariable.h"
#include "VerticalWidgetRun.h"
#include "WidgetFrame.h"
#include "WidgetRun.h"
#include "java/lang/AssertionError.h"
#include "java/lang/Enum.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"

@class JavaLangStringBuilder;


@interface ADXConstraintWidget () {
 @public
  jboolean mMeasureRequested_;
  jboolean OPTIMIZE_WRAP_;
  jboolean OPTIMIZE_WRAP_ON_RESOLVED_;
  jint mWidthOverride_;
  jint mHeightOverride_;
  jboolean resolvedHorizontal_;
  jboolean resolvedVertical_;
  jboolean horizontalSolvingPass_;
  jboolean verticalSolvingPass_;
  jint mWrapBehaviorInParent_;
  IOSIntArray *mMaxDimension_;
  jfloat mCircleConstraintAngle_;
  jboolean hasBaseline_;
  jboolean inPlaceholder_;
  jboolean mInVirtualLayout_;
  /*!
   @brief Keep a cache of the last measure cache as we can bypass remeasures during the onMeasure...
   the View's measure cache will only be reset in onLayout, so too late for us.
   */
  jint mLastHorizontalMeasureSpec_;
  jint mLastVerticalMeasureSpec_;
  IOSBooleanArray *mIsInBarrier_;
  id mCompanionWidget_;
  jint mContainerItemSkip_;
  jint mVisibility_;
  NSString *mDebugName_;
  NSString *mType_;
}

- (void)serializeAnchorWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                    withNSString:(NSString *)side
                         withADXConstraintAnchor:(ADXConstraintAnchor *)a;

- (void)serializeCircleWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                         withADXConstraintAnchor:(ADXConstraintAnchor *)a
                                       withFloat:(jfloat)angle;

- (void)serializeAttributeWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                       withNSString:(NSString *)type
                                          withFloat:(jfloat)value
                                          withFloat:(jfloat)def;

- (void)serializeDimensionRatioWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                            withNSString:(NSString *)type
                                               withFloat:(jfloat)value
                                                 withInt:(jint)whichSide;

- (void)serializeSizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                  withNSString:(NSString *)type
                                       withInt:(jint)size
                                       withInt:(jint)min
                                       withInt:(jint)max
                                       withInt:(jint)override
                                       withInt:(jint)matchConstraintMin
                                       withInt:(jint)matchConstraintDefault
                                     withFloat:(jfloat)MatchConstraintPercent
                                     withFloat:(jfloat)weight;

/*!
 @brief Add all the anchors to the mAnchors array
 */
- (void)addAnchors;

/*!
 @brief Determine if the widget is the first element of a chain in a given orientation.
 @param orientation Either <code>HORIZONTAL</code>  or <code>VERTICAL</code>
 @return if the widget is the head of a chain
 */
- (jboolean)isChainHeadWithInt:(jint)orientation;

/*!
 @brief Apply the constraints in the system depending on the existing anchors, in one dimension
 @param system the linear system we are adding constraints to
 @param parentWrapContent
 @param isTerminal
 @param parentMax
 @param dimensionBehaviour
 @param wrapContent is the widget trying to wrap its content (i.e. its size will depends on its content)
 @param beginAnchor the first anchor
 @param endAnchor the second anchor
 @param beginPosition the original position of the anchor
 @param dimension the dimension
 @param maxDimension
 @param oppositeVariable
 @param matchPercentDimension the percentage relative to the parent, applied if in match constraint and percent mode
 @param applyPosition
 */
- (void)applyConstraintsWithADXLinearSystem:(ADXLinearSystem *)system
                                withBoolean:(jboolean)isHorizontal
                                withBoolean:(jboolean)parentWrapContent
                                withBoolean:(jboolean)oppositeParentWrapContent
                                withBoolean:(jboolean)isTerminal
                      withADXSolverVariable:(ADXSolverVariable *)parentMin
                      withADXSolverVariable:(ADXSolverVariable *)parentMax
 withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)dimensionBehaviour
                                withBoolean:(jboolean)wrapContent
                    withADXConstraintAnchor:(ADXConstraintAnchor *)beginAnchor
                    withADXConstraintAnchor:(ADXConstraintAnchor *)endAnchor
                                    withInt:(jint)beginPosition
                                    withInt:(jint)dimension
                                    withInt:(jint)minDimension
                                    withInt:(jint)maxDimension
                                  withFloat:(jfloat)bias
                                withBoolean:(jboolean)useRatio
                                withBoolean:(jboolean)oppositeVariable
                                withBoolean:(jboolean)inChain
                                withBoolean:(jboolean)oppositeInChain
                                withBoolean:(jboolean)inBarrier
                                    withInt:(jint)matchConstraintDefault
                                    withInt:(jint)oppositeMatchConstraintDefault
                                    withInt:(jint)matchMinDimension
                                    withInt:(jint)matchMaxDimension
                                  withFloat:(jfloat)matchPercentDimension
                                withBoolean:(jboolean)applyPosition;

@end

J2OBJC_FIELD_SETTER(ADXConstraintWidget, mMaxDimension_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mIsInBarrier_, IOSBooleanArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mCompanionWidget_, id)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mDebugName_, NSString *)
J2OBJC_FIELD_SETTER(ADXConstraintWidget, mType_, NSString *)

inline jboolean ADXConstraintWidget_get_AUTOTAG_CENTER(void);
#define ADXConstraintWidget_AUTOTAG_CENTER false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, AUTOTAG_CENTER, jboolean)

inline jboolean ADXConstraintWidget_get_USE_WRAP_DIMENSION_FOR_SPREAD(void);
#define ADXConstraintWidget_USE_WRAP_DIMENSION_FOR_SPREAD false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, USE_WRAP_DIMENSION_FOR_SPREAD, jboolean)

inline jint ADXConstraintWidget_get_WRAP(void);
#define ADXConstraintWidget_WRAP -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidget, WRAP, jint)

__attribute__((unused)) static void ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *side, ADXConstraintAnchor *a);

__attribute__((unused)) static void ADXConstraintWidget_serializeCircleWithJavaLangStringBuilder_withADXConstraintAnchor_withFloat_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, ADXConstraintAnchor *a, jfloat angle);

__attribute__((unused)) static void ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *type, jfloat value, jfloat def);

__attribute__((unused)) static void ADXConstraintWidget_serializeDimensionRatioWithJavaLangStringBuilder_withNSString_withFloat_withInt_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *type, jfloat value, jint whichSide);

__attribute__((unused)) static void ADXConstraintWidget_serializeSizeWithJavaLangStringBuilder_withNSString_withInt_withInt_withInt_withInt_withInt_withInt_withFloat_withFloat_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *type, jint size, jint min, jint max, jint override, jint matchConstraintMin, jint matchConstraintDefault, jfloat MatchConstraintPercent, jfloat weight);

__attribute__((unused)) static void ADXConstraintWidget_addAnchors(ADXConstraintWidget *self);

__attribute__((unused)) static jboolean ADXConstraintWidget_isChainHeadWithInt_(ADXConstraintWidget *self, jint orientation);

__attribute__((unused)) static void ADXConstraintWidget_applyConstraintsWithADXLinearSystem_withBoolean_withBoolean_withBoolean_withBoolean_withADXSolverVariable_withADXSolverVariable_withADXConstraintWidget_DimensionBehaviour_withBoolean_withADXConstraintAnchor_withADXConstraintAnchor_withInt_withInt_withInt_withInt_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_withInt_withFloat_withBoolean_(ADXConstraintWidget *self, ADXLinearSystem *system, jboolean isHorizontal, jboolean parentWrapContent, jboolean oppositeParentWrapContent, jboolean isTerminal, ADXSolverVariable *parentMin, ADXSolverVariable *parentMax, ADXConstraintWidget_DimensionBehaviour *dimensionBehaviour, jboolean wrapContent, ADXConstraintAnchor *beginAnchor, ADXConstraintAnchor *endAnchor, jint beginPosition, jint dimension, jint minDimension, jint maxDimension, jfloat bias, jboolean useRatio, jboolean oppositeVariable, jboolean inChain, jboolean oppositeInChain, jboolean inBarrier, jint matchConstraintDefault, jint oppositeMatchConstraintDefault, jint matchMinDimension, jint matchMaxDimension, jfloat matchPercentDimension, jboolean applyPosition);

__attribute__((unused)) static void ADXConstraintWidget_DimensionBehaviour_initWithNSString_withInt_(ADXConstraintWidget_DimensionBehaviour *self, NSString *__name, jint __ordinal);

jfloat ADXConstraintWidget_DEFAULT_BIAS = 0.5f;

@implementation ADXConstraintWidget

- (ADXWidgetRun *)getRunWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    return horizontalRun_;
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    return verticalRun_;
  }
  return nil;
}

- (void)setFinalFrameWithInt:(jint)left
                     withInt:(jint)top
                     withInt:(jint)right
                     withInt:(jint)bottom
                     withInt:(jint)baseline
                     withInt:(jint)orientation {
  [self setFrameWithInt:left withInt:top withInt:right withInt:bottom];
  [self setBaselineDistanceWithInt:baseline];
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    resolvedHorizontal_ = true;
    resolvedVertical_ = false;
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    resolvedHorizontal_ = false;
    resolvedVertical_ = true;
  }
  else if (orientation == ADXConstraintWidget_BOTH) {
    resolvedHorizontal_ = true;
    resolvedVertical_ = true;
  }
  else {
    resolvedHorizontal_ = false;
    resolvedVertical_ = false;
  }
}

- (void)setFinalLeftWithInt:(jint)x1 {
  [((ADXConstraintAnchor *) nil_chk(mLeft_)) setFinalValueWithInt:x1];
  mX_ = x1;
}

- (void)setFinalTopWithInt:(jint)y1 {
  [((ADXConstraintAnchor *) nil_chk(mTop_)) setFinalValueWithInt:y1];
  mY_ = y1;
}

- (void)resetSolvingPassFlag {
  horizontalSolvingPass_ = false;
  verticalSolvingPass_ = false;
}

- (jboolean)isHorizontalSolvingPassDone {
  return horizontalSolvingPass_;
}

- (jboolean)isVerticalSolvingPassDone {
  return verticalSolvingPass_;
}

- (void)markHorizontalSolvingPassDone {
  horizontalSolvingPass_ = true;
}

- (void)markVerticalSolvingPassDone {
  verticalSolvingPass_ = true;
}

- (void)setFinalHorizontalWithInt:(jint)x1
                          withInt:(jint)x2 {
  if (resolvedHorizontal_) {
    return;
  }
  [((ADXConstraintAnchor *) nil_chk(mLeft_)) setFinalValueWithInt:x1];
  [((ADXConstraintAnchor *) nil_chk(mRight_)) setFinalValueWithInt:x2];
  mX_ = x1;
  mWidth_ = x2 - x1;
  resolvedHorizontal_ = true;
}

- (void)setFinalVerticalWithInt:(jint)y1
                        withInt:(jint)y2 {
  if (resolvedVertical_) {
    return;
  }
  [((ADXConstraintAnchor *) nil_chk(mTop_)) setFinalValueWithInt:y1];
  [((ADXConstraintAnchor *) nil_chk(mBottom_)) setFinalValueWithInt:y2];
  mY_ = y1;
  mHeight_ = y2 - y1;
  if (hasBaseline_) {
    [((ADXConstraintAnchor *) nil_chk(mBaseline_)) setFinalValueWithInt:y1 + mBaselineDistance_];
  }
  resolvedVertical_ = true;
}

- (void)setFinalBaselineWithInt:(jint)baselineValue {
  if (!hasBaseline_) {
    return;
  }
  jint y1 = baselineValue - mBaselineDistance_;
  jint y2 = y1 + mHeight_;
  mY_ = y1;
  [((ADXConstraintAnchor *) nil_chk(mTop_)) setFinalValueWithInt:y1];
  [((ADXConstraintAnchor *) nil_chk(mBottom_)) setFinalValueWithInt:y2];
  [((ADXConstraintAnchor *) nil_chk(mBaseline_)) setFinalValueWithInt:baselineValue];
  resolvedVertical_ = true;
}

- (jboolean)isResolvedHorizontally {
  return resolvedHorizontal_ || ([((ADXConstraintAnchor *) nil_chk(mLeft_)) hasFinalValue] && [((ADXConstraintAnchor *) nil_chk(mRight_)) hasFinalValue]);
}

- (jboolean)isResolvedVertically {
  return resolvedVertical_ || ([((ADXConstraintAnchor *) nil_chk(mTop_)) hasFinalValue] && [((ADXConstraintAnchor *) nil_chk(mBottom_)) hasFinalValue]);
}

- (void)resetFinalResolution {
  resolvedHorizontal_ = false;
  resolvedVertical_ = false;
  horizontalSolvingPass_ = false;
  verticalSolvingPass_ = false;
  for (jint i = 0, mAnchorsSize = [((JavaUtilArrayList *) nil_chk(mAnchors_)) size]; i < mAnchorsSize; i++) {
    ADXConstraintAnchor *anchor = [((JavaUtilArrayList *) nil_chk(mAnchors_)) getWithInt:i];
    [((ADXConstraintAnchor *) nil_chk(anchor)) resetFinalResolution];
  }
}

- (void)ensureMeasureRequested {
  mMeasureRequested_ = true;
}

- (jboolean)hasDependencies {
  for (jint i = 0, mAnchorsSize = [((JavaUtilArrayList *) nil_chk(mAnchors_)) size]; i < mAnchorsSize; i++) {
    ADXConstraintAnchor *anchor = [((JavaUtilArrayList *) nil_chk(mAnchors_)) getWithInt:i];
    if ([((ADXConstraintAnchor *) nil_chk(anchor)) hasDependents]) {
      return true;
    }
  }
  return false;
}

- (jboolean)hasDanglingDimensionWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    jint horizontalTargets = (((ADXConstraintAnchor *) nil_chk(mLeft_))->mTarget_ != nil ? 1 : 0) + (((ADXConstraintAnchor *) nil_chk(mRight_))->mTarget_ != nil ? 1 : 0);
    return horizontalTargets < 2;
  }
  else {
    jint verticalTargets = (((ADXConstraintAnchor *) nil_chk(mTop_))->mTarget_ != nil ? 1 : 0) + (((ADXConstraintAnchor *) nil_chk(mBottom_))->mTarget_ != nil ? 1 : 0) + (((ADXConstraintAnchor *) nil_chk(mBaseline_))->mTarget_ != nil ? 1 : 0);
    return verticalTargets < 2;
  }
}

- (jboolean)hasResolvedTargetsWithInt:(jint)orientation
                              withInt:(jint)size {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    if (((ADXConstraintAnchor *) nil_chk(mLeft_))->mTarget_ != nil && [mLeft_->mTarget_ hasFinalValue] && ((ADXConstraintAnchor *) nil_chk(mRight_))->mTarget_ != nil && [mRight_->mTarget_ hasFinalValue]) {
      return (([((ADXConstraintAnchor *) nil_chk(mRight_))->mTarget_ getFinalValue] - [((ADXConstraintAnchor *) nil_chk(mRight_)) getMargin]) - ([((ADXConstraintAnchor *) nil_chk(((ADXConstraintAnchor *) nil_chk(mLeft_))->mTarget_)) getFinalValue] + [((ADXConstraintAnchor *) nil_chk(mLeft_)) getMargin])) >= size;
    }
  }
  else {
    if (((ADXConstraintAnchor *) nil_chk(mTop_))->mTarget_ != nil && [mTop_->mTarget_ hasFinalValue] && ((ADXConstraintAnchor *) nil_chk(mBottom_))->mTarget_ != nil && [mBottom_->mTarget_ hasFinalValue]) {
      return (([((ADXConstraintAnchor *) nil_chk(mBottom_))->mTarget_ getFinalValue] - [((ADXConstraintAnchor *) nil_chk(mBottom_)) getMargin]) - ([((ADXConstraintAnchor *) nil_chk(((ADXConstraintAnchor *) nil_chk(mTop_))->mTarget_)) getFinalValue] + [((ADXConstraintAnchor *) nil_chk(mTop_)) getMargin])) >= size;
    }
  }
  return false;
}

- (jboolean)isInVirtualLayout {
  return mInVirtualLayout_;
}

- (void)setInVirtualLayoutWithBoolean:(jboolean)inVirtualLayout {
  mInVirtualLayout_ = inVirtualLayout;
}

- (jint)getMaxHeight {
  return IOSIntArray_Get(nil_chk(mMaxDimension_), ADXConstraintWidget_VERTICAL);
}

- (jint)getMaxWidth {
  return IOSIntArray_Get(nil_chk(mMaxDimension_), ADXConstraintWidget_HORIZONTAL);
}

- (void)setMaxWidthWithInt:(jint)maxWidth {
  *IOSIntArray_GetRef(nil_chk(mMaxDimension_), ADXConstraintWidget_HORIZONTAL) = maxWidth;
}

- (void)setMaxHeightWithInt:(jint)maxHeight {
  *IOSIntArray_GetRef(nil_chk(mMaxDimension_), ADXConstraintWidget_VERTICAL) = maxHeight;
}

- (jboolean)isSpreadWidth {
  return mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD && mDimensionRatio_ == 0 && mMatchConstraintMinWidth_ == 0 && mMatchConstraintMaxWidth_ == 0 && IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
}

- (jboolean)isSpreadHeight {
  return mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD && mDimensionRatio_ == 0 && mMatchConstraintMinHeight_ == 0 && mMatchConstraintMaxHeight_ == 0 && IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
}

- (void)setHasBaselineWithBoolean:(jboolean)hasBaseline {
  self->hasBaseline_ = hasBaseline;
}

- (jboolean)getHasBaseline {
  return hasBaseline_;
}

- (jboolean)isInPlaceholder {
  return inPlaceholder_;
}

- (void)setInPlaceholderWithBoolean:(jboolean)inPlaceholder {
  self->inPlaceholder_ = inPlaceholder;
}

- (void)setInBarrierWithInt:(jint)orientation
                withBoolean:(jboolean)value {
  *IOSBooleanArray_GetRef(nil_chk(mIsInBarrier_), orientation) = value;
}

- (jboolean)isInBarrierWithInt:(jint)orientation {
  return IOSBooleanArray_Get(nil_chk(mIsInBarrier_), orientation);
}

- (void)setMeasureRequestedWithBoolean:(jboolean)measureRequested {
  mMeasureRequested_ = measureRequested;
}

- (jboolean)isMeasureRequested {
  return mMeasureRequested_ && mVisibility_ != ADXConstraintWidget_GONE;
}

- (void)setWrapBehaviorInParentWithInt:(jint)behavior {
  if (behavior >= 0 && behavior <= ADXConstraintWidget_WRAP_BEHAVIOR_SKIPPED) {
    mWrapBehaviorInParent_ = behavior;
  }
}

- (jint)getWrapBehaviorInParent {
  return mWrapBehaviorInParent_;
}

- (jint)getLastHorizontalMeasureSpec {
  return mLastHorizontalMeasureSpec_;
}

- (jint)getLastVerticalMeasureSpec {
  return mLastVerticalMeasureSpec_;
}

- (void)setLastMeasureSpecWithInt:(jint)horizontal
                          withInt:(jint)vertical {
  mLastHorizontalMeasureSpec_ = horizontal;
  mLastVerticalMeasureSpec_ = vertical;
  [self setMeasureRequestedWithBoolean:false];
}

- (void)reset {
  [((ADXConstraintAnchor *) nil_chk(mLeft_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mTop_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mRight_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mBottom_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mBaseline_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mCenterX_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mCenterY_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mCenter_)) reset];
  mParent_ = nil;
  mCircleConstraintAngle_ = 0;
  mWidth_ = 0;
  mHeight_ = 0;
  mDimensionRatio_ = 0;
  mDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  mX_ = 0;
  mY_ = 0;
  mOffsetX_ = 0;
  mOffsetY_ = 0;
  mBaselineDistance_ = 0;
  mMinWidth_ = 0;
  mMinHeight_ = 0;
  mHorizontalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  mVerticalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
  IOSObjectArray_Set(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
  JreStrongAssign(&mCompanionWidget_, nil);
  mContainerItemSkip_ = 0;
  mVisibility_ = ADXConstraintWidget_VISIBLE;
  JreStrongAssign(&mType_, nil);
  mHorizontalWrapVisited_ = false;
  mVerticalWrapVisited_ = false;
  mHorizontalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  mVerticalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  mHorizontalChainFixedPosition_ = false;
  mVerticalChainFixedPosition_ = false;
  *IOSFloatArray_GetRef(nil_chk(mWeight_), ADXConstraintWidget_DIMENSION_HORIZONTAL) = ADXConstraintWidget_UNKNOWN;
  *IOSFloatArray_GetRef(mWeight_, ADXConstraintWidget_DIMENSION_VERTICAL) = ADXConstraintWidget_UNKNOWN;
  mHorizontalResolution_ = ADXConstraintWidget_UNKNOWN;
  mVerticalResolution_ = ADXConstraintWidget_UNKNOWN;
  *IOSIntArray_GetRef(nil_chk(mMaxDimension_), ADXConstraintWidget_HORIZONTAL) = JavaLangInteger_MAX_VALUE;
  *IOSIntArray_GetRef(mMaxDimension_, ADXConstraintWidget_VERTICAL) = JavaLangInteger_MAX_VALUE;
  mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  mMatchConstraintPercentWidth_ = 1;
  mMatchConstraintPercentHeight_ = 1;
  mMatchConstraintMaxWidth_ = JavaLangInteger_MAX_VALUE;
  mMatchConstraintMaxHeight_ = JavaLangInteger_MAX_VALUE;
  mMatchConstraintMinWidth_ = 0;
  mMatchConstraintMinHeight_ = 0;
  mResolvedHasRatio_ = false;
  mResolvedDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  mResolvedDimensionRatio_ = 1.0f;
  mGroupsToSolver_ = false;
  *IOSBooleanArray_GetRef(nil_chk(isTerminalWidget_), ADXConstraintWidget_HORIZONTAL) = true;
  *IOSBooleanArray_GetRef(isTerminalWidget_, ADXConstraintWidget_VERTICAL) = true;
  mInVirtualLayout_ = false;
  *IOSBooleanArray_GetRef(nil_chk(mIsInBarrier_), ADXConstraintWidget_HORIZONTAL) = false;
  *IOSBooleanArray_GetRef(mIsInBarrier_, ADXConstraintWidget_VERTICAL) = false;
  mMeasureRequested_ = true;
  *IOSIntArray_GetRef(nil_chk(mResolvedMatchConstraintDefault_), ADXConstraintWidget_HORIZONTAL) = 0;
  *IOSIntArray_GetRef(mResolvedMatchConstraintDefault_, ADXConstraintWidget_VERTICAL) = 0;
  mWidthOverride_ = -1;
  mHeightOverride_ = -1;
}

- (void)serializeAnchorWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                    withNSString:(NSString *)side
                         withADXConstraintAnchor:(ADXConstraintAnchor *)a {
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, side, a);
}

- (void)serializeCircleWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                         withADXConstraintAnchor:(ADXConstraintAnchor *)a
                                       withFloat:(jfloat)angle {
  ADXConstraintWidget_serializeCircleWithJavaLangStringBuilder_withADXConstraintAnchor_withFloat_(self, ret, a, angle);
}

- (void)serializeAttributeWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                       withNSString:(NSString *)type
                                          withFloat:(jfloat)value
                                          withFloat:(jfloat)def {
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, type, value, def);
}

- (void)serializeDimensionRatioWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                            withNSString:(NSString *)type
                                               withFloat:(jfloat)value
                                                 withInt:(jint)whichSide {
  ADXConstraintWidget_serializeDimensionRatioWithJavaLangStringBuilder_withNSString_withFloat_withInt_(self, ret, type, value, whichSide);
}

- (void)serializeSizeWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret
                                  withNSString:(NSString *)type
                                       withInt:(jint)size
                                       withInt:(jint)min
                                       withInt:(jint)max
                                       withInt:(jint)override
                                       withInt:(jint)matchConstraintMin
                                       withInt:(jint)matchConstraintDefault
                                     withFloat:(jfloat)MatchConstraintPercent
                                     withFloat:(jfloat)weight {
  ADXConstraintWidget_serializeSizeWithJavaLangStringBuilder_withNSString_withInt_withInt_withInt_withInt_withInt_withInt_withFloat_withFloat_(self, ret, type, size, min, max, override, matchConstraintMin, matchConstraintDefault, MatchConstraintPercent, weight);
}

- (JavaLangStringBuilder *)serializeWithJavaLangStringBuilder:(JavaLangStringBuilder *)ret {
  [((JavaLangStringBuilder *) nil_chk(ret)) appendWithNSString:@"{\n"];
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"left", mLeft_);
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"top", mTop_);
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"right", mRight_);
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"bottom", mBottom_);
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"baseline", mBaseline_);
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"centerX", mCenterX_);
  ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(self, ret, @"centerY", mCenterY_);
  ADXConstraintWidget_serializeCircleWithJavaLangStringBuilder_withADXConstraintAnchor_withFloat_(self, ret, mCenter_, mCircleConstraintAngle_);
  ADXConstraintWidget_serializeSizeWithJavaLangStringBuilder_withNSString_withInt_withInt_withInt_withInt_withInt_withInt_withFloat_withFloat_(self, ret, @"width", mWidth_, mMinWidth_, IOSIntArray_Get(nil_chk(mMaxDimension_), ADXConstraintWidget_HORIZONTAL), mWidthOverride_, mMatchConstraintMinWidth_, mMatchConstraintDefaultWidth_, mMatchConstraintPercentWidth_, IOSFloatArray_Get(nil_chk(mWeight_), ADXConstraintWidget_DIMENSION_HORIZONTAL));
  ADXConstraintWidget_serializeSizeWithJavaLangStringBuilder_withNSString_withInt_withInt_withInt_withInt_withInt_withInt_withFloat_withFloat_(self, ret, @"height", mHeight_, mMinHeight_, IOSIntArray_Get(nil_chk(mMaxDimension_), ADXConstraintWidget_VERTICAL), mHeightOverride_, mMatchConstraintMinHeight_, mMatchConstraintDefaultHeight_, mMatchConstraintPercentHeight_, IOSFloatArray_Get(nil_chk(mWeight_), ADXConstraintWidget_DIMENSION_VERTICAL));
  ADXConstraintWidget_serializeDimensionRatioWithJavaLangStringBuilder_withNSString_withFloat_withInt_(self, ret, @"dimensionRatio", mDimensionRatio_, mDimensionRatioSide_);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"horizontalBias", mHorizontalBiasPercent_, ADXConstraintWidget_DEFAULT_BIAS);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"verticalBias", mVerticalBiasPercent_, ADXConstraintWidget_DEFAULT_BIAS);
  [ret appendWithNSString:@"}\n"];
  return ret;
}

- (jboolean)oppositeDimensionDependsOnWithInt:(jint)orientation {
  jint oppositeOrientation = (orientation == ADXConstraintWidget_HORIZONTAL) ? ADXConstraintWidget_VERTICAL : ADXConstraintWidget_HORIZONTAL;
  ADXConstraintWidget_DimensionBehaviour *dimensionBehaviour = IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), orientation);
  ADXConstraintWidget_DimensionBehaviour *oppositeDimensionBehaviour = IOSObjectArray_Get(mListDimensionBehaviors_, oppositeOrientation);
  return dimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && oppositeDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
}

- (jboolean)oppositeDimensionsTied {
  return (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT));
}

- (jboolean)hasDimensionOverride {
  return mWidthOverride_ != -1 || mHeightOverride_ != -1;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintWidget_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)debugName {
  ADXConstraintWidget_initWithNSString_(self, debugName);
  return self;
}

- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)width
                    withInt:(jint)height {
  ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(self, x, y, width, height);
  return self;
}

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(jint)x
                         withInt:(jint)y
                         withInt:(jint)width
                         withInt:(jint)height {
  ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(self, debugName, x, y, width, height);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXConstraintWidget_initWithInt_withInt_(self, width, height);
  return self;
}

- (void)ensureWidgetRuns {
  if (horizontalRun_ == nil) {
    JreStrongAssignAndConsume(&horizontalRun_, new_ADXHorizontalWidgetRun_initWithADXConstraintWidget_(self));
  }
  if (verticalRun_ == nil) {
    JreStrongAssignAndConsume(&verticalRun_, new_ADXVerticalWidgetRun_initWithADXConstraintWidget_(self));
  }
}

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(jint)width
                         withInt:(jint)height {
  ADXConstraintWidget_initWithNSString_withInt_withInt_(self, debugName, width, height);
  return self;
}

- (void)resetSolverVariablesWithADXCache:(ADXCache *)cache {
  [((ADXConstraintAnchor *) nil_chk(mLeft_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mTop_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mRight_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mBottom_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mBaseline_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mCenter_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mCenterX_)) resetSolverVariableWithADXCache:cache];
  [((ADXConstraintAnchor *) nil_chk(mCenterY_)) resetSolverVariableWithADXCache:cache];
}

- (void)addAnchors {
  ADXConstraintWidget_addAnchors(self);
}

- (jboolean)isRoot {
  return mParent_ == nil;
}

- (ADXConstraintWidget *)getParent {
  return mParent_;
}

- (void)setParentWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  mParent_ = widget;
}

- (void)setWidthWrapContentWithBoolean:(jboolean)widthWrapContent {
  self->mIsWidthWrapContent_ = widthWrapContent;
}

- (jboolean)isWidthWrapContent {
  return mIsWidthWrapContent_;
}

- (void)setHeightWrapContentWithBoolean:(jboolean)heightWrapContent {
  self->mIsHeightWrapContent_ = heightWrapContent;
}

- (jboolean)isHeightWrapContent {
  return mIsHeightWrapContent_;
}

- (void)connectCircularConstraintWithADXConstraintWidget:(ADXConstraintWidget *)target
                                               withFloat:(jfloat)angle
                                                 withInt:(jint)radius {
  [self immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER) withInt:radius withInt:0];
  mCircleConstraintAngle_ = angle;
}

- (NSString *)getType {
  return mType_;
}

- (void)setTypeWithNSString:(NSString *)type {
  JreStrongAssign(&mType_, type);
}

- (void)setVisibilityWithInt:(jint)visibility {
  mVisibility_ = visibility;
}

- (jint)getVisibility {
  return mVisibility_;
}

- (NSString *)getDebugName {
  return mDebugName_;
}

- (void)setDebugNameWithNSString:(NSString *)name {
  JreStrongAssign(&mDebugName_, name);
}

- (void)setDebugSolverNameWithADXLinearSystem:(ADXLinearSystem *)system
                                 withNSString:(NSString *)name {
  JreStrongAssign(&mDebugName_, name);
  ADXSolverVariable *left = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mLeft_]);
  ADXSolverVariable *top = JreRetainedLocalValue([system createObjectVariableWithId:mTop_]);
  ADXSolverVariable *right = JreRetainedLocalValue([system createObjectVariableWithId:mRight_]);
  ADXSolverVariable *bottom = JreRetainedLocalValue([system createObjectVariableWithId:mBottom_]);
  [((ADXSolverVariable *) nil_chk(left)) setNameWithNSString:JreStrcat("$$", name, @".left")];
  [((ADXSolverVariable *) nil_chk(top)) setNameWithNSString:JreStrcat("$$", name, @".top")];
  [((ADXSolverVariable *) nil_chk(right)) setNameWithNSString:JreStrcat("$$", name, @".right")];
  [((ADXSolverVariable *) nil_chk(bottom)) setNameWithNSString:JreStrcat("$$", name, @".bottom")];
  ADXSolverVariable *baseline = JreRetainedLocalValue([system createObjectVariableWithId:mBaseline_]);
  [((ADXSolverVariable *) nil_chk(baseline)) setNameWithNSString:JreStrcat("$$", name, @".baseline")];
}

- (void)createObjectVariablesWithADXLinearSystem:(ADXLinearSystem *)system {
  ADXSolverVariable *left = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mLeft_]);
  ADXSolverVariable *top = JreRetainedLocalValue([system createObjectVariableWithId:mTop_]);
  ADXSolverVariable *right = JreRetainedLocalValue([system createObjectVariableWithId:mRight_]);
  ADXSolverVariable *bottom = JreRetainedLocalValue([system createObjectVariableWithId:mBottom_]);
  if (mBaselineDistance_ > 0) {
    ADXSolverVariable *baseline = JreRetainedLocalValue([system createObjectVariableWithId:mBaseline_]);
  }
}

- (NSString *)description {
  return JreStrcat("$$CI$I$I$IC", (mType_ != nil ? JreStrcat("$$C", @"type: ", mType_, ' ') : @""), (mDebugName_ != nil ? JreStrcat("$$C", @"id: ", mDebugName_, ' ') : @""), '(', mX_, @", ", mY_, @") - (", mWidth_, @" x ", mHeight_, ')');
}

- (jint)getX {
  if (mParent_ != nil && [mParent_ isKindOfClass:[ADXConstraintWidgetContainer class]]) {
    return ((ADXConstraintWidgetContainer *) cast_chk(mParent_, [ADXConstraintWidgetContainer class]))->mPaddingLeft_ + mX_;
  }
  return mX_;
}

- (jint)getY {
  if (mParent_ != nil && [mParent_ isKindOfClass:[ADXConstraintWidgetContainer class]]) {
    return ((ADXConstraintWidgetContainer *) cast_chk(mParent_, [ADXConstraintWidgetContainer class]))->mPaddingTop_ + mY_;
  }
  return mY_;
}

- (jint)getWidth {
  if (mVisibility_ == ADXConstraintWidget_GONE) {
    return 0;
  }
  return mWidth_;
}

- (jint)getOptimizerWrapWidth {
  jint w = mWidth_;
  if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    if (mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
      w = JavaLangMath_maxWithInt_withInt_(mMatchConstraintMinWidth_, w);
    }
    else if (mMatchConstraintMinWidth_ > 0) {
      w = mMatchConstraintMinWidth_;
      mWidth_ = w;
    }
    else {
      w = 0;
    }
    if (mMatchConstraintMaxWidth_ > 0 && mMatchConstraintMaxWidth_ < w) {
      w = mMatchConstraintMaxWidth_;
    }
  }
  return w;
}

- (jint)getOptimizerWrapHeight {
  jint h = mHeight_;
  if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    if (mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
      h = JavaLangMath_maxWithInt_withInt_(mMatchConstraintMinHeight_, h);
    }
    else if (mMatchConstraintMinHeight_ > 0) {
      h = mMatchConstraintMinHeight_;
      mHeight_ = h;
    }
    else {
      h = 0;
    }
    if (mMatchConstraintMaxHeight_ > 0 && mMatchConstraintMaxHeight_ < h) {
      h = mMatchConstraintMaxHeight_;
    }
  }
  return h;
}

- (jint)getHeight {
  if (mVisibility_ == ADXConstraintWidget_GONE) {
    return 0;
  }
  return mHeight_;
}

- (jint)getLengthWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    return [self getWidth];
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    return [self getHeight];
  }
  else {
    return 0;
  }
}

- (jint)getRootX {
  return mX_ + mOffsetX_;
}

- (jint)getRootY {
  return mY_ + mOffsetY_;
}

- (jint)getMinWidth {
  return mMinWidth_;
}

- (jint)getMinHeight {
  return mMinHeight_;
}

- (jint)getLeft {
  return [self getX];
}

- (jint)getTop {
  return [self getY];
}

- (jint)getRight {
  return [self getX] + mWidth_;
}

- (jint)getBottom {
  return [self getY] + mHeight_;
}

- (jint)getHorizontalMargin {
  jint margin = 0;
  if (mLeft_ != nil) {
    margin += mLeft_->mMargin_;
  }
  if (mRight_ != nil) {
    margin += mRight_->mMargin_;
  }
  return margin;
}

- (jint)getVerticalMargin {
  jint margin = 0;
  if (mLeft_ != nil) {
    margin += ((ADXConstraintAnchor *) nil_chk(mTop_))->mMargin_;
  }
  if (mRight_ != nil) {
    margin += ((ADXConstraintAnchor *) nil_chk(mBottom_))->mMargin_;
  }
  return margin;
}

- (jfloat)getHorizontalBiasPercent {
  return mHorizontalBiasPercent_;
}

- (jfloat)getVerticalBiasPercent {
  return mVerticalBiasPercent_;
}

- (jfloat)getBiasPercentWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    return mHorizontalBiasPercent_;
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    return mVerticalBiasPercent_;
  }
  else {
    return ADXConstraintWidget_UNKNOWN;
  }
}

- (jboolean)hasBaseline {
  return hasBaseline_;
}

- (jint)getBaselineDistance {
  return mBaselineDistance_;
}

- (id)getCompanionWidget {
  return mCompanionWidget_;
}

- (JavaUtilArrayList *)getAnchors {
  return mAnchors_;
}

- (void)setXWithInt:(jint)x {
  mX_ = x;
}

- (void)setYWithInt:(jint)y {
  mY_ = y;
}

- (void)setOriginWithInt:(jint)x
                 withInt:(jint)y {
  mX_ = x;
  mY_ = y;
}

- (void)setOffsetWithInt:(jint)x
                 withInt:(jint)y {
  mOffsetX_ = x;
  mOffsetY_ = y;
}

- (void)setGoneMarginWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)type
                                          withInt:(jint)goneMargin {
  switch ([type ordinal]) {
    case ADXConstraintAnchor_Type_Enum_LEFT:
    {
      ((ADXConstraintAnchor *) nil_chk(mLeft_))->mGoneMargin_ = goneMargin;
    }
    break;
    case ADXConstraintAnchor_Type_Enum_TOP:
    {
      ((ADXConstraintAnchor *) nil_chk(mTop_))->mGoneMargin_ = goneMargin;
    }
    break;
    case ADXConstraintAnchor_Type_Enum_RIGHT:
    {
      ((ADXConstraintAnchor *) nil_chk(mRight_))->mGoneMargin_ = goneMargin;
    }
    break;
    case ADXConstraintAnchor_Type_Enum_BOTTOM:
    {
      ((ADXConstraintAnchor *) nil_chk(mBottom_))->mGoneMargin_ = goneMargin;
    }
    break;
    case ADXConstraintAnchor_Type_Enum_BASELINE:
    {
      ((ADXConstraintAnchor *) nil_chk(mBaseline_))->mGoneMargin_ = goneMargin;
    }
    break;
    case ADXConstraintAnchor_Type_Enum_CENTER:
    case ADXConstraintAnchor_Type_Enum_CENTER_X:
    case ADXConstraintAnchor_Type_Enum_CENTER_Y:
    case ADXConstraintAnchor_Type_Enum_NONE:
    break;
  }
}

- (void)setWidthWithInt:(jint)w {
  mWidth_ = w;
  if (mWidth_ < mMinWidth_) {
    mWidth_ = mMinWidth_;
  }
}

- (void)setHeightWithInt:(jint)h {
  mHeight_ = h;
  if (mHeight_ < mMinHeight_) {
    mHeight_ = mMinHeight_;
  }
}

- (void)setLengthWithInt:(jint)length
                 withInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    [self setWidthWithInt:length];
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    [self setHeightWithInt:length];
  }
}

- (void)setHorizontalMatchStyleWithInt:(jint)horizontalMatchStyle
                               withInt:(jint)min
                               withInt:(jint)max
                             withFloat:(jfloat)percent {
  mMatchConstraintDefaultWidth_ = horizontalMatchStyle;
  mMatchConstraintMinWidth_ = min;
  mMatchConstraintMaxWidth_ = (max == JavaLangInteger_MAX_VALUE) ? 0 : max;
  mMatchConstraintPercentWidth_ = percent;
  if (percent > 0 && percent < 1 && mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
    mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT;
  }
}

- (void)setVerticalMatchStyleWithInt:(jint)verticalMatchStyle
                             withInt:(jint)min
                             withInt:(jint)max
                           withFloat:(jfloat)percent {
  mMatchConstraintDefaultHeight_ = verticalMatchStyle;
  mMatchConstraintMinHeight_ = min;
  mMatchConstraintMaxHeight_ = (max == JavaLangInteger_MAX_VALUE) ? 0 : max;
  mMatchConstraintPercentHeight_ = percent;
  if (percent > 0 && percent < 1 && mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
    mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT;
  }
}

- (void)setDimensionRatioWithNSString:(NSString *)ratio {
  if (ratio == nil || [ratio java_length] == 0) {
    mDimensionRatio_ = 0;
    return;
  }
  jint dimensionRatioSide = ADXConstraintWidget_UNKNOWN;
  jfloat dimensionRatio = 0;
  jint len = [ratio java_length];
  jint commaIndex = [ratio java_indexOf:','];
  if (commaIndex > 0 && commaIndex < len - 1) {
    NSString *dimension = [ratio java_substring:0 endIndex:commaIndex];
    if ([((NSString *) nil_chk(dimension)) java_equalsIgnoreCase:@"W"]) {
      dimensionRatioSide = ADXConstraintWidget_HORIZONTAL;
    }
    else if ([dimension java_equalsIgnoreCase:@"H"]) {
      dimensionRatioSide = ADXConstraintWidget_VERTICAL;
    }
    commaIndex++;
  }
  else {
    commaIndex = 0;
  }
  jint colonIndex = [ratio java_indexOf:':'];
  if (colonIndex >= 0 && colonIndex < len - 1) {
    NSString *nominator = [ratio java_substring:commaIndex endIndex:colonIndex];
    NSString *denominator = [ratio java_substring:colonIndex + 1];
    if ([((NSString *) nil_chk(nominator)) java_length] > 0 && [((NSString *) nil_chk(denominator)) java_length] > 0) {
      @try {
        jfloat nominatorValue = JavaLangFloat_parseFloatWithNSString_(nominator);
        jfloat denominatorValue = JavaLangFloat_parseFloatWithNSString_(denominator);
        if (nominatorValue > 0 && denominatorValue > 0) {
          if (dimensionRatioSide == ADXConstraintWidget_VERTICAL) {
            dimensionRatio = JavaLangMath_absWithFloat_(denominatorValue / nominatorValue);
          }
          else {
            dimensionRatio = JavaLangMath_absWithFloat_(nominatorValue / denominatorValue);
          }
        }
      }
      @catch (JavaLangNumberFormatException *e) {
      }
    }
  }
  else {
    NSString *r = [ratio java_substring:commaIndex];
    if ([((NSString *) nil_chk(r)) java_length] > 0) {
      @try {
        dimensionRatio = JavaLangFloat_parseFloatWithNSString_(r);
      }
      @catch (JavaLangNumberFormatException *e) {
      }
    }
  }
  if (dimensionRatio > 0) {
    mDimensionRatio_ = dimensionRatio;
    mDimensionRatioSide_ = dimensionRatioSide;
  }
}

- (void)setDimensionRatioWithFloat:(jfloat)ratio
                           withInt:(jint)dimensionRatioSide {
  mDimensionRatio_ = ratio;
  mDimensionRatioSide_ = dimensionRatioSide;
}

- (jfloat)getDimensionRatio {
  return mDimensionRatio_;
}

- (jint)getDimensionRatioSide {
  return mDimensionRatioSide_;
}

- (void)setHorizontalBiasPercentWithFloat:(jfloat)horizontalBiasPercent {
  mHorizontalBiasPercent_ = horizontalBiasPercent;
}

- (void)setVerticalBiasPercentWithFloat:(jfloat)verticalBiasPercent {
  mVerticalBiasPercent_ = verticalBiasPercent;
}

- (void)setMinWidthWithInt:(jint)w {
  if (w < 0) {
    mMinWidth_ = 0;
  }
  else {
    mMinWidth_ = w;
  }
}

- (void)setMinHeightWithInt:(jint)h {
  if (h < 0) {
    mMinHeight_ = 0;
  }
  else {
    mMinHeight_ = h;
  }
}

- (void)setDimensionWithInt:(jint)w
                    withInt:(jint)h {
  mWidth_ = w;
  if (mWidth_ < mMinWidth_) {
    mWidth_ = mMinWidth_;
  }
  mHeight_ = h;
  if (mHeight_ < mMinHeight_) {
    mHeight_ = mMinHeight_;
  }
}

- (void)setFrameWithInt:(jint)left
                withInt:(jint)top
                withInt:(jint)right
                withInt:(jint)bottom {
  jint w = right - left;
  jint h = bottom - top;
  mX_ = left;
  mY_ = top;
  if (mVisibility_ == ADXConstraintWidget_GONE) {
    mWidth_ = 0;
    mHeight_ = 0;
    return;
  }
  if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) && w < mWidth_) {
    w = mWidth_;
  }
  if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) && h < mHeight_) {
    h = mHeight_;
  }
  mWidth_ = w;
  mHeight_ = h;
  if (mHeight_ < mMinHeight_) {
    mHeight_ = mMinHeight_;
  }
  if (mWidth_ < mMinWidth_) {
    mWidth_ = mMinWidth_;
  }
  if (mMatchConstraintMaxWidth_ > 0 && IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    mWidth_ = JavaLangMath_minWithInt_withInt_(mWidth_, mMatchConstraintMaxWidth_);
  }
  if (mMatchConstraintMaxHeight_ > 0 && IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    mHeight_ = JavaLangMath_minWithInt_withInt_(mHeight_, mMatchConstraintMaxHeight_);
  }
  if (w != mWidth_) {
    mWidthOverride_ = mWidth_;
  }
  if (h != mHeight_) {
    mHeightOverride_ = mHeight_;
  }
}

- (void)setFrameWithInt:(jint)start
                withInt:(jint)end
                withInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    [self setHorizontalDimensionWithInt:start withInt:end];
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    [self setVerticalDimensionWithInt:start withInt:end];
  }
}

- (void)setHorizontalDimensionWithInt:(jint)left
                              withInt:(jint)right {
  mX_ = left;
  mWidth_ = right - left;
  if (mWidth_ < mMinWidth_) {
    mWidth_ = mMinWidth_;
  }
}

- (void)setVerticalDimensionWithInt:(jint)top
                            withInt:(jint)bottom {
  mY_ = top;
  mHeight_ = bottom - top;
  if (mHeight_ < mMinHeight_) {
    mHeight_ = mMinHeight_;
  }
}

- (jint)getRelativePositioningWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    return mRelX_;
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    return mRelY_;
  }
  else {
    return 0;
  }
}

- (void)setRelativePositioningWithInt:(jint)offset
                              withInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    mRelX_ = offset;
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    mRelY_ = offset;
  }
}

- (void)setBaselineDistanceWithInt:(jint)baseline {
  mBaselineDistance_ = baseline;
  hasBaseline_ = (baseline > 0);
}

- (void)setCompanionWidgetWithId:(id)companion {
  JreStrongAssign(&mCompanionWidget_, companion);
}

- (void)setContainerItemSkipWithInt:(jint)skip {
  if (skip >= 0) {
    mContainerItemSkip_ = skip;
  }
  else {
    mContainerItemSkip_ = 0;
  }
}

- (jint)getContainerItemSkip {
  return mContainerItemSkip_;
}

- (void)setHorizontalWeightWithFloat:(jfloat)horizontalWeight {
  *IOSFloatArray_GetRef(nil_chk(mWeight_), ADXConstraintWidget_DIMENSION_HORIZONTAL) = horizontalWeight;
}

- (void)setVerticalWeightWithFloat:(jfloat)verticalWeight {
  *IOSFloatArray_GetRef(nil_chk(mWeight_), ADXConstraintWidget_DIMENSION_VERTICAL) = verticalWeight;
}

- (void)setHorizontalChainStyleWithInt:(jint)horizontalChainStyle {
  mHorizontalChainStyle_ = horizontalChainStyle;
}

- (jint)getHorizontalChainStyle {
  return mHorizontalChainStyle_;
}

- (void)setVerticalChainStyleWithInt:(jint)verticalChainStyle {
  mVerticalChainStyle_ = verticalChainStyle;
}

- (jint)getVerticalChainStyle {
  return mVerticalChainStyle_;
}

- (jboolean)allowedInBarrier {
  return mVisibility_ != ADXConstraintWidget_GONE;
}

- (void)immediateConnectWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)startType
                             withADXConstraintWidget:(ADXConstraintWidget *)target
                        withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)endType
                                             withInt:(jint)margin
                                             withInt:(jint)goneMargin {
  ADXConstraintAnchor *startAnchor = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:startType]);
  ADXConstraintAnchor *endAnchor = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:endType]);
  [((ADXConstraintAnchor *) nil_chk(startAnchor)) connectWithADXConstraintAnchor:endAnchor withInt:margin withInt:goneMargin withBoolean:true];
}

- (void)connectWithADXConstraintAnchor:(ADXConstraintAnchor *)from
               withADXConstraintAnchor:(ADXConstraintAnchor *)to
                               withInt:(jint)margin {
  if ([((ADXConstraintAnchor *) nil_chk(from)) getOwner] == self) {
    [self connectWithADXConstraintAnchor_Type:[from getType] withADXConstraintWidget:[((ADXConstraintAnchor *) nil_chk(to)) getOwner] withADXConstraintAnchor_Type:[to getType] withInt:margin];
  }
}

- (void)connectWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintFrom
                    withADXConstraintWidget:(ADXConstraintWidget *)target
               withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintTo {
  [self connectWithADXConstraintAnchor_Type:constraintFrom withADXConstraintWidget:target withADXConstraintAnchor_Type:constraintTo withInt:0];
}

- (void)connectWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintFrom
                    withADXConstraintWidget:(ADXConstraintWidget *)target
               withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)constraintTo
                                    withInt:(jint)margin {
  if (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, CENTER)) {
    if (constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, CENTER)) {
      ADXConstraintAnchor *left = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
      ADXConstraintAnchor *right = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
      ADXConstraintAnchor *top = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
      ADXConstraintAnchor *bottom = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
      jboolean centerX = false;
      jboolean centerY = false;
      if ((left != nil && [left isConnected]) || (right != nil && [right isConnected])) {
      }
      else {
        [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withInt:0];
        [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withInt:0];
        centerX = true;
      }
      if ((top != nil && [top isConnected]) || (bottom != nil && [bottom isConnected])) {
      }
      else {
        [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withInt:0];
        [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withInt:0];
        centerY = true;
      }
      if (centerX && centerY) {
        ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
        [((ADXConstraintAnchor *) nil_chk(center)) connectWithADXConstraintAnchor:[((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)] withInt:0];
      }
      else if (centerX) {
        ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)]);
        [((ADXConstraintAnchor *) nil_chk(center)) connectWithADXConstraintAnchor:[((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)] withInt:0];
      }
      else if (centerY) {
        ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)]);
        [((ADXConstraintAnchor *) nil_chk(center)) connectWithADXConstraintAnchor:[((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)] withInt:0];
      }
    }
    else if ((constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, LEFT)) || (constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, RIGHT))) {
      [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withADXConstraintWidget:target withADXConstraintAnchor_Type:constraintTo withInt:0];
      [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withADXConstraintWidget:target withADXConstraintAnchor_Type:constraintTo withInt:0];
      ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
      [((ADXConstraintAnchor *) nil_chk(center)) connectWithADXConstraintAnchor:[((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:constraintTo] withInt:0];
    }
    else if ((constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, TOP)) || (constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM))) {
      [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withADXConstraintWidget:target withADXConstraintAnchor_Type:constraintTo withInt:0];
      [self connectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withADXConstraintWidget:target withADXConstraintAnchor_Type:constraintTo withInt:0];
      ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
      [((ADXConstraintAnchor *) nil_chk(center)) connectWithADXConstraintAnchor:[((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:constraintTo] withInt:0];
    }
  }
  else if (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X) && (constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, LEFT) || constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, RIGHT))) {
    ADXConstraintAnchor *left = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
    ADXConstraintAnchor *targetAnchor = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:constraintTo]);
    ADXConstraintAnchor *right = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
    [((ADXConstraintAnchor *) nil_chk(left)) connectWithADXConstraintAnchor:targetAnchor withInt:0];
    [((ADXConstraintAnchor *) nil_chk(right)) connectWithADXConstraintAnchor:targetAnchor withInt:0];
    ADXConstraintAnchor *centerX = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)]);
    [((ADXConstraintAnchor *) nil_chk(centerX)) connectWithADXConstraintAnchor:targetAnchor withInt:0];
  }
  else if (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y) && (constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, TOP) || constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM))) {
    ADXConstraintAnchor *targetAnchor = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:constraintTo]);
    ADXConstraintAnchor *top = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
    [((ADXConstraintAnchor *) nil_chk(top)) connectWithADXConstraintAnchor:targetAnchor withInt:0];
    ADXConstraintAnchor *bottom = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
    [((ADXConstraintAnchor *) nil_chk(bottom)) connectWithADXConstraintAnchor:targetAnchor withInt:0];
    ADXConstraintAnchor *centerY = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)]);
    [((ADXConstraintAnchor *) nil_chk(centerY)) connectWithADXConstraintAnchor:targetAnchor withInt:0];
  }
  else if (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X) && constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)) {
    ADXConstraintAnchor *left = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
    ADXConstraintAnchor *leftTarget = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
    [((ADXConstraintAnchor *) nil_chk(left)) connectWithADXConstraintAnchor:leftTarget withInt:0];
    ADXConstraintAnchor *right = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
    ADXConstraintAnchor *rightTarget = JreRetainedLocalValue([target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
    [((ADXConstraintAnchor *) nil_chk(right)) connectWithADXConstraintAnchor:rightTarget withInt:0];
    ADXConstraintAnchor *centerX = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)]);
    [((ADXConstraintAnchor *) nil_chk(centerX)) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:constraintTo] withInt:0];
  }
  else if (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y) && constraintTo == JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)) {
    ADXConstraintAnchor *top = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
    ADXConstraintAnchor *topTarget = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
    [((ADXConstraintAnchor *) nil_chk(top)) connectWithADXConstraintAnchor:topTarget withInt:0];
    ADXConstraintAnchor *bottom = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
    ADXConstraintAnchor *bottomTarget = JreRetainedLocalValue([target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
    [((ADXConstraintAnchor *) nil_chk(bottom)) connectWithADXConstraintAnchor:bottomTarget withInt:0];
    ADXConstraintAnchor *centerY = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)]);
    [((ADXConstraintAnchor *) nil_chk(centerY)) connectWithADXConstraintAnchor:[target getAnchorWithADXConstraintAnchor_Type:constraintTo] withInt:0];
  }
  else {
    ADXConstraintAnchor *fromAnchor = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:constraintFrom]);
    ADXConstraintAnchor *toAnchor = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(target)) getAnchorWithADXConstraintAnchor_Type:constraintTo]);
    if ([((ADXConstraintAnchor *) nil_chk(fromAnchor)) isValidConnectionWithADXConstraintAnchor:toAnchor]) {
      if (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)) {
        ADXConstraintAnchor *top = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
        ADXConstraintAnchor *bottom = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
        if (top != nil) {
          [top reset];
        }
        if (bottom != nil) {
          [bottom reset];
        }
      }
      else if ((constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, TOP)) || (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM))) {
        ADXConstraintAnchor *baseline = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)]);
        if (baseline != nil) {
          [baseline reset];
        }
        ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
        if ([((ADXConstraintAnchor *) nil_chk(center)) getTarget] != toAnchor) {
          [center reset];
        }
        ADXConstraintAnchor *opposite = JreRetainedLocalValue([((ADXConstraintAnchor *) nil_chk([self getAnchorWithADXConstraintAnchor_Type:constraintFrom])) getOpposite]);
        ADXConstraintAnchor *centerY = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)]);
        if ([((ADXConstraintAnchor *) nil_chk(centerY)) isConnected]) {
          [((ADXConstraintAnchor *) nil_chk(opposite)) reset];
          [centerY reset];
        }
        else {
        }
      }
      else if ((constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, LEFT)) || (constraintFrom == JreLoadEnum(ADXConstraintAnchor_Type, RIGHT))) {
        ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
        if ([((ADXConstraintAnchor *) nil_chk(center)) getTarget] != toAnchor) {
          [center reset];
        }
        ADXConstraintAnchor *opposite = JreRetainedLocalValue([((ADXConstraintAnchor *) nil_chk([self getAnchorWithADXConstraintAnchor_Type:constraintFrom])) getOpposite]);
        ADXConstraintAnchor *centerX = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)]);
        if ([((ADXConstraintAnchor *) nil_chk(centerX)) isConnected]) {
          [((ADXConstraintAnchor *) nil_chk(opposite)) reset];
          [centerX reset];
        }
        else {
        }
      }
      [fromAnchor connectWithADXConstraintAnchor:toAnchor withInt:margin];
    }
  }
}

- (void)resetAllConstraints {
  [self resetAnchors];
  [self setVerticalBiasPercentWithFloat:ADXConstraintWidget_DEFAULT_BIAS];
  [self setHorizontalBiasPercentWithFloat:ADXConstraintWidget_DEFAULT_BIAS];
}

- (void)resetAnchorWithADXConstraintAnchor:(ADXConstraintAnchor *)anchor {
  if ([self getParent] != nil) {
    if ([[self getParent] isKindOfClass:[ADXConstraintWidgetContainer class]]) {
      ADXConstraintWidgetContainer *parent = (ADXConstraintWidgetContainer *) cast_chk([self getParent], [ADXConstraintWidgetContainer class]);
      if ([((ADXConstraintWidgetContainer *) nil_chk(parent)) handlesInternalConstraints]) {
        return;
      }
    }
  }
  ADXConstraintAnchor *left = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
  ADXConstraintAnchor *right = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
  ADXConstraintAnchor *top = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
  ADXConstraintAnchor *bottom = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
  ADXConstraintAnchor *center = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
  ADXConstraintAnchor *centerX = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)]);
  ADXConstraintAnchor *centerY = JreRetainedLocalValue([self getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)]);
  if (anchor == center) {
    if ([((ADXConstraintAnchor *) nil_chk(left)) isConnected] && [((ADXConstraintAnchor *) nil_chk(right)) isConnected] && [left getTarget] == [right getTarget]) {
      [left reset];
      [((ADXConstraintAnchor *) nil_chk(right)) reset];
    }
    if ([((ADXConstraintAnchor *) nil_chk(top)) isConnected] && [((ADXConstraintAnchor *) nil_chk(bottom)) isConnected] && [top getTarget] == [bottom getTarget]) {
      [top reset];
      [((ADXConstraintAnchor *) nil_chk(bottom)) reset];
    }
    mHorizontalBiasPercent_ = 0.5f;
    mVerticalBiasPercent_ = 0.5f;
  }
  else if (anchor == centerX) {
    if ([((ADXConstraintAnchor *) nil_chk(left)) isConnected] && [((ADXConstraintAnchor *) nil_chk(right)) isConnected] && [((ADXConstraintAnchor *) nil_chk([left getTarget])) getOwner] == [((ADXConstraintAnchor *) nil_chk([right getTarget])) getOwner]) {
      [left reset];
      [((ADXConstraintAnchor *) nil_chk(right)) reset];
    }
    mHorizontalBiasPercent_ = 0.5f;
  }
  else if (anchor == centerY) {
    if ([((ADXConstraintAnchor *) nil_chk(top)) isConnected] && [((ADXConstraintAnchor *) nil_chk(bottom)) isConnected] && [((ADXConstraintAnchor *) nil_chk([top getTarget])) getOwner] == [((ADXConstraintAnchor *) nil_chk([bottom getTarget])) getOwner]) {
      [top reset];
      [((ADXConstraintAnchor *) nil_chk(bottom)) reset];
    }
    mVerticalBiasPercent_ = 0.5f;
  }
  else if (anchor == left || anchor == right) {
    if ([((ADXConstraintAnchor *) nil_chk(left)) isConnected] && [left getTarget] == [((ADXConstraintAnchor *) nil_chk(right)) getTarget]) {
      [((ADXConstraintAnchor *) nil_chk(center)) reset];
    }
  }
  else if (anchor == top || anchor == bottom) {
    if ([((ADXConstraintAnchor *) nil_chk(top)) isConnected] && [top getTarget] == [((ADXConstraintAnchor *) nil_chk(bottom)) getTarget]) {
      [((ADXConstraintAnchor *) nil_chk(center)) reset];
    }
  }
  [((ADXConstraintAnchor *) nil_chk(anchor)) reset];
}

- (void)resetAnchors {
  ADXConstraintWidget *parent = JreRetainedLocalValue([self getParent]);
  if (parent != nil && [parent isKindOfClass:[ADXConstraintWidgetContainer class]]) {
    ADXConstraintWidgetContainer *parentContainer = (ADXConstraintWidgetContainer *) cast_chk([self getParent], [ADXConstraintWidgetContainer class]);
    if ([((ADXConstraintWidgetContainer *) nil_chk(parentContainer)) handlesInternalConstraints]) {
      return;
    }
  }
  for (jint i = 0, mAnchorsSize = [((JavaUtilArrayList *) nil_chk(mAnchors_)) size]; i < mAnchorsSize; i++) {
    ADXConstraintAnchor *anchor = [((JavaUtilArrayList *) nil_chk(mAnchors_)) getWithInt:i];
    [((ADXConstraintAnchor *) nil_chk(anchor)) reset];
  }
}

- (ADXConstraintAnchor *)getAnchorWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)anchorType {
  switch ([anchorType ordinal]) {
    case ADXConstraintAnchor_Type_Enum_LEFT:
    {
      return mLeft_;
    }
    case ADXConstraintAnchor_Type_Enum_TOP:
    {
      return mTop_;
    }
    case ADXConstraintAnchor_Type_Enum_RIGHT:
    {
      return mRight_;
    }
    case ADXConstraintAnchor_Type_Enum_BOTTOM:
    {
      return mBottom_;
    }
    case ADXConstraintAnchor_Type_Enum_BASELINE:
    {
      return mBaseline_;
    }
    case ADXConstraintAnchor_Type_Enum_CENTER_X:
    {
      return mCenterX_;
    }
    case ADXConstraintAnchor_Type_Enum_CENTER_Y:
    {
      return mCenterY_;
    }
    case ADXConstraintAnchor_Type_Enum_CENTER:
    {
      return mCenter_;
    }
    case ADXConstraintAnchor_Type_Enum_NONE:
    return nil;
  }
  @throw create_JavaLangAssertionError_initWithId_([((ADXConstraintAnchor_Type *) nil_chk(anchorType)) name]);
}

- (ADXConstraintWidget_DimensionBehaviour *)getHorizontalDimensionBehaviour {
  return IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL);
}

- (ADXConstraintWidget_DimensionBehaviour *)getVerticalDimensionBehaviour {
  return IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL);
}

- (ADXConstraintWidget_DimensionBehaviour *)getDimensionBehaviourWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    return [self getHorizontalDimensionBehaviour];
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    return [self getVerticalDimensionBehaviour];
  }
  else {
    return nil;
  }
}

- (void)setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)behaviour {
  IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL, behaviour);
}

- (void)setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)behaviour {
  IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL, behaviour);
}

- (jboolean)isInHorizontalChain {
  if ((((ADXConstraintAnchor *) nil_chk(mLeft_))->mTarget_ != nil && mLeft_->mTarget_->mTarget_ == mLeft_) || (((ADXConstraintAnchor *) nil_chk(mRight_))->mTarget_ != nil && mRight_->mTarget_->mTarget_ == mRight_)) {
    return true;
  }
  return false;
}

- (ADXConstraintWidget *)getPreviousChainMemberWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    if (((ADXConstraintAnchor *) nil_chk(mLeft_))->mTarget_ != nil && mLeft_->mTarget_->mTarget_ == mLeft_) {
      return mLeft_->mTarget_->mOwner_;
    }
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    if (((ADXConstraintAnchor *) nil_chk(mTop_))->mTarget_ != nil && mTop_->mTarget_->mTarget_ == mTop_) {
      return mTop_->mTarget_->mOwner_;
    }
  }
  return nil;
}

- (ADXConstraintWidget *)getNextChainMemberWithInt:(jint)orientation {
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    if (((ADXConstraintAnchor *) nil_chk(mRight_))->mTarget_ != nil && mRight_->mTarget_->mTarget_ == mRight_) {
      return mRight_->mTarget_->mOwner_;
    }
  }
  else if (orientation == ADXConstraintWidget_VERTICAL) {
    if (((ADXConstraintAnchor *) nil_chk(mBottom_))->mTarget_ != nil && mBottom_->mTarget_->mTarget_ == mBottom_) {
      return mBottom_->mTarget_->mOwner_;
    }
  }
  return nil;
}

- (ADXConstraintWidget *)getHorizontalChainControlWidget {
  ADXConstraintWidget *found = nil;
  if ([self isInHorizontalChain]) {
    ADXConstraintWidget *tmp = self;
    while (found == nil && tmp != nil) {
      ADXConstraintAnchor *anchor = JreRetainedLocalValue([tmp getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
      ADXConstraintAnchor *targetOwner = (anchor == nil) ? nil : [((ADXConstraintAnchor *) nil_chk(anchor)) getTarget];
      ADXConstraintWidget *target = (targetOwner == nil) ? nil : [targetOwner getOwner];
      if (target == [self getParent]) {
        found = tmp;
        break;
      }
      ADXConstraintAnchor *targetAnchor = (target == nil) ? nil : [((ADXConstraintAnchor *) nil_chk([target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)])) getTarget];
      if (targetAnchor != nil && [targetAnchor getOwner] != tmp) {
        found = tmp;
      }
      else {
        tmp = target;
      }
    }
  }
  return found;
}

- (jboolean)isInVerticalChain {
  if ((((ADXConstraintAnchor *) nil_chk(mTop_))->mTarget_ != nil && mTop_->mTarget_->mTarget_ == mTop_) || (((ADXConstraintAnchor *) nil_chk(mBottom_))->mTarget_ != nil && mBottom_->mTarget_->mTarget_ == mBottom_)) {
    return true;
  }
  return false;
}

- (ADXConstraintWidget *)getVerticalChainControlWidget {
  ADXConstraintWidget *found = nil;
  if ([self isInVerticalChain]) {
    ADXConstraintWidget *tmp = self;
    while (found == nil && tmp != nil) {
      ADXConstraintAnchor *anchor = JreRetainedLocalValue([tmp getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
      ADXConstraintAnchor *targetOwner = (anchor == nil) ? nil : [((ADXConstraintAnchor *) nil_chk(anchor)) getTarget];
      ADXConstraintWidget *target = (targetOwner == nil) ? nil : [targetOwner getOwner];
      if (target == [self getParent]) {
        found = tmp;
        break;
      }
      ADXConstraintAnchor *targetAnchor = (target == nil) ? nil : [((ADXConstraintAnchor *) nil_chk([target getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)])) getTarget];
      if (targetAnchor != nil && [targetAnchor getOwner] != tmp) {
        found = tmp;
      }
      else {
        tmp = target;
      }
    }
  }
  return found;
}

- (jboolean)isChainHeadWithInt:(jint)orientation {
  return ADXConstraintWidget_isChainHeadWithInt_(self, orientation);
}

- (void)addToSolverWithADXLinearSystem:(ADXLinearSystem *)system
                           withBoolean:(jboolean)optimize {
  ADXSolverVariable *left = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mLeft_]);
  ADXSolverVariable *right = JreRetainedLocalValue([system createObjectVariableWithId:mRight_]);
  ADXSolverVariable *top = JreRetainedLocalValue([system createObjectVariableWithId:mTop_]);
  ADXSolverVariable *bottom = JreRetainedLocalValue([system createObjectVariableWithId:mBottom_]);
  ADXSolverVariable *baseline = JreRetainedLocalValue([system createObjectVariableWithId:mBaseline_]);
  jboolean horizontalParentWrapContent = false;
  jboolean verticalParentWrapContent = false;
  if (mParent_ != nil) {
    horizontalParentWrapContent = mParent_ != nil ? IOSObjectArray_Get(nil_chk(mParent_->mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) : false;
    verticalParentWrapContent = mParent_ != nil ? IOSObjectArray_Get(nil_chk(mParent_->mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) : false;
    switch (mWrapBehaviorInParent_) {
      case ADXConstraintWidget_WRAP_BEHAVIOR_SKIPPED:
      {
        horizontalParentWrapContent = false;
        verticalParentWrapContent = false;
      }
      break;
      case ADXConstraintWidget_WRAP_BEHAVIOR_HORIZONTAL_ONLY:
      {
        verticalParentWrapContent = false;
      }
      break;
      case ADXConstraintWidget_WRAP_BEHAVIOR_VERTICAL_ONLY:
      {
        horizontalParentWrapContent = false;
      }
      break;
    }
  }
  if (mVisibility_ == ADXConstraintWidget_GONE && ![self hasDependencies] && !IOSBooleanArray_Get(nil_chk(mIsInBarrier_), ADXConstraintWidget_HORIZONTAL) && !IOSBooleanArray_Get(mIsInBarrier_, ADXConstraintWidget_VERTICAL)) {
    return;
  }
  if (resolvedHorizontal_ || resolvedVertical_) {
    if (resolvedHorizontal_) {
      [system addEqualityWithADXSolverVariable:left withInt:mX_];
      [system addEqualityWithADXSolverVariable:right withInt:mX_ + mWidth_];
      if (horizontalParentWrapContent && mParent_ != nil) {
        if (OPTIMIZE_WRAP_ON_RESOLVED_) {
          ADXConstraintWidgetContainer *container = (ADXConstraintWidgetContainer *) cast_chk(mParent_, [ADXConstraintWidgetContainer class]);
          [container addHorizontalWrapMinVariableWithADXConstraintAnchor:mLeft_];
          [container addHorizontalWrapMaxVariableWithADXConstraintAnchor:mRight_];
        }
        else {
          jint wrapStrength = ADXSolverVariable_STRENGTH_EQUALITY;
          [system addGreaterThanWithADXSolverVariable:[system createObjectVariableWithId:mParent_->mRight_] withADXSolverVariable:right withInt:0 withInt:wrapStrength];
        }
      }
    }
    if (resolvedVertical_) {
      [system addEqualityWithADXSolverVariable:top withInt:mY_];
      [system addEqualityWithADXSolverVariable:bottom withInt:mY_ + mHeight_];
      if ([((ADXConstraintAnchor *) nil_chk(mBaseline_)) hasDependents]) {
        [system addEqualityWithADXSolverVariable:baseline withInt:mY_ + mBaselineDistance_];
      }
      if (verticalParentWrapContent && mParent_ != nil) {
        if (OPTIMIZE_WRAP_ON_RESOLVED_) {
          ADXConstraintWidgetContainer *container = (ADXConstraintWidgetContainer *) cast_chk(mParent_, [ADXConstraintWidgetContainer class]);
          [container addVerticalWrapMinVariableWithADXConstraintAnchor:mTop_];
          [container addVerticalWrapMaxVariableWithADXConstraintAnchor:mBottom_];
        }
        else {
          jint wrapStrength = ADXSolverVariable_STRENGTH_EQUALITY;
          [system addGreaterThanWithADXSolverVariable:[system createObjectVariableWithId:mParent_->mBottom_] withADXSolverVariable:bottom withInt:0 withInt:wrapStrength];
        }
      }
    }
    if (resolvedHorizontal_ && resolvedVertical_) {
      resolvedHorizontal_ = false;
      resolvedVertical_ = false;
      return;
    }
  }
  if (JreLoadStatic(ADXLinearSystem, sMetrics) != nil) {
    JreLoadStatic(ADXLinearSystem, sMetrics)->widgets_++;
  }
  if (optimize && horizontalRun_ != nil && verticalRun_ != nil && ((ADXDependencyNode *) nil_chk(horizontalRun_->start_))->resolved_ && ((ADXDependencyNode *) nil_chk(horizontalRun_->end_))->resolved_ && verticalRun_->start_->resolved_ && verticalRun_->end_->resolved_) {
    if (JreLoadStatic(ADXLinearSystem, sMetrics) != nil) {
      JreLoadStatic(ADXLinearSystem, sMetrics)->graphSolved_++;
    }
    [system addEqualityWithADXSolverVariable:left withInt:((ADXDependencyNode *) nil_chk(horizontalRun_->start_))->value_];
    [system addEqualityWithADXSolverVariable:right withInt:((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(horizontalRun_))->end_))->value_];
    [system addEqualityWithADXSolverVariable:top withInt:((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(verticalRun_))->start_))->value_];
    [system addEqualityWithADXSolverVariable:bottom withInt:((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(verticalRun_))->end_))->value_];
    [system addEqualityWithADXSolverVariable:baseline withInt:((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(verticalRun_))->baseline_))->value_];
    if (mParent_ != nil) {
      if (horizontalParentWrapContent && IOSBooleanArray_Get(nil_chk(isTerminalWidget_), ADXConstraintWidget_HORIZONTAL) && ![self isInHorizontalChain]) {
        ADXSolverVariable *parentMax = JreRetainedLocalValue([system createObjectVariableWithId:((ADXConstraintWidget *) nil_chk(mParent_))->mRight_]);
        [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:right withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
      if (verticalParentWrapContent && IOSBooleanArray_Get(nil_chk(isTerminalWidget_), ADXConstraintWidget_VERTICAL) && ![self isInVerticalChain]) {
        ADXSolverVariable *parentMax = JreRetainedLocalValue([system createObjectVariableWithId:((ADXConstraintWidget *) nil_chk(mParent_))->mBottom_]);
        [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:bottom withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
    }
    resolvedHorizontal_ = false;
    resolvedVertical_ = false;
    return;
  }
  if (JreLoadStatic(ADXLinearSystem, sMetrics) != nil) {
    JreLoadStatic(ADXLinearSystem, sMetrics)->linearSolved_++;
  }
  jboolean inHorizontalChain = false;
  jboolean inVerticalChain = false;
  if (mParent_ != nil) {
    if (ADXConstraintWidget_isChainHeadWithInt_(self, ADXConstraintWidget_HORIZONTAL)) {
      [((ADXConstraintWidgetContainer *) nil_chk(((ADXConstraintWidgetContainer *) cast_chk(mParent_, [ADXConstraintWidgetContainer class])))) addChainWithADXConstraintWidget:self withInt:ADXConstraintWidget_HORIZONTAL];
      inHorizontalChain = true;
    }
    else {
      inHorizontalChain = [self isInHorizontalChain];
    }
    if (ADXConstraintWidget_isChainHeadWithInt_(self, ADXConstraintWidget_VERTICAL)) {
      [((ADXConstraintWidgetContainer *) nil_chk(((ADXConstraintWidgetContainer *) cast_chk(mParent_, [ADXConstraintWidgetContainer class])))) addChainWithADXConstraintWidget:self withInt:ADXConstraintWidget_VERTICAL];
      inVerticalChain = true;
    }
    else {
      inVerticalChain = [self isInVerticalChain];
    }
    if (!inHorizontalChain && horizontalParentWrapContent && mVisibility_ != ADXConstraintWidget_GONE && ((ADXConstraintAnchor *) nil_chk(mLeft_))->mTarget_ == nil && ((ADXConstraintAnchor *) nil_chk(mRight_))->mTarget_ == nil) {
      ADXSolverVariable *parentRight = JreRetainedLocalValue([system createObjectVariableWithId:((ADXConstraintWidget *) nil_chk(mParent_))->mRight_]);
      [system addGreaterThanWithADXSolverVariable:parentRight withADXSolverVariable:right withInt:0 withInt:ADXSolverVariable_STRENGTH_LOW];
    }
    if (!inVerticalChain && verticalParentWrapContent && mVisibility_ != ADXConstraintWidget_GONE && ((ADXConstraintAnchor *) nil_chk(mTop_))->mTarget_ == nil && ((ADXConstraintAnchor *) nil_chk(mBottom_))->mTarget_ == nil && mBaseline_ == nil) {
      ADXSolverVariable *parentBottom = JreRetainedLocalValue([system createObjectVariableWithId:((ADXConstraintWidget *) nil_chk(mParent_))->mBottom_]);
      [system addGreaterThanWithADXSolverVariable:parentBottom withADXSolverVariable:bottom withInt:0 withInt:ADXSolverVariable_STRENGTH_LOW];
    }
  }
  jint width = mWidth_;
  if (width < mMinWidth_) {
    width = mMinWidth_;
  }
  jint height = mHeight_;
  if (height < mMinHeight_) {
    height = mMinHeight_;
  }
  jboolean horizontalDimensionFixed = IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
  jboolean verticalDimensionFixed = IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL) != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
  jboolean useRatio = false;
  mResolvedDimensionRatioSide_ = mDimensionRatioSide_;
  mResolvedDimensionRatio_ = mDimensionRatio_;
  jint matchConstraintDefaultWidth = mMatchConstraintDefaultWidth_;
  jint matchConstraintDefaultHeight = mMatchConstraintDefaultHeight_;
  if (mDimensionRatio_ > 0 && mVisibility_ != ADXConstraintWidget_GONE) {
    useRatio = true;
    if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintDefaultWidth == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      matchConstraintDefaultWidth = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
    }
    if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintDefaultHeight == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      matchConstraintDefaultHeight = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
    }
    if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintDefaultWidth == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO && matchConstraintDefaultHeight == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
      [self setupDimensionRatioWithBoolean:horizontalParentWrapContent withBoolean:verticalParentWrapContent withBoolean:horizontalDimensionFixed withBoolean:verticalDimensionFixed];
    }
    else if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintDefaultWidth == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
      mResolvedDimensionRatioSide_ = ADXConstraintWidget_HORIZONTAL;
      width = JreFpToInt((mResolvedDimensionRatio_ * mHeight_));
      if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL) != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        matchConstraintDefaultWidth = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED;
        useRatio = false;
      }
    }
    else if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintDefaultHeight == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
      mResolvedDimensionRatioSide_ = ADXConstraintWidget_VERTICAL;
      if (mDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN) {
        mResolvedDimensionRatio_ = 1 / mResolvedDimensionRatio_;
      }
      height = JreFpToInt((mResolvedDimensionRatio_ * mWidth_));
      if (IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_HORIZONTAL) != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        matchConstraintDefaultHeight = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED;
        useRatio = false;
      }
    }
  }
  *IOSIntArray_GetRef(nil_chk(mResolvedMatchConstraintDefault_), ADXConstraintWidget_HORIZONTAL) = matchConstraintDefaultWidth;
  *IOSIntArray_GetRef(mResolvedMatchConstraintDefault_, ADXConstraintWidget_VERTICAL) = matchConstraintDefaultHeight;
  mResolvedHasRatio_ = useRatio;
  jboolean useHorizontalRatio = useRatio && (mResolvedDimensionRatioSide_ == ADXConstraintWidget_HORIZONTAL || mResolvedDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN);
  jboolean useVerticalRatio = useRatio && (mResolvedDimensionRatioSide_ == ADXConstraintWidget_VERTICAL || mResolvedDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN);
  jboolean wrapContent = (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) && ([self isKindOfClass:[ADXConstraintWidgetContainer class]]);
  if (wrapContent) {
    width = 0;
  }
  jboolean applyPosition = true;
  if ([((ADXConstraintAnchor *) nil_chk(mCenter_)) isConnected]) {
    applyPosition = false;
  }
  jboolean isInHorizontalBarrier = IOSBooleanArray_Get(nil_chk(mIsInBarrier_), ADXConstraintWidget_HORIZONTAL);
  jboolean isInVerticalBarrier = IOSBooleanArray_Get(mIsInBarrier_, ADXConstraintWidget_VERTICAL);
  if (mHorizontalResolution_ != ADXConstraintWidget_DIRECT && !resolvedHorizontal_) {
    if (!optimize || !(horizontalRun_ != nil && ((ADXDependencyNode *) nil_chk(horizontalRun_->start_))->resolved_ && ((ADXDependencyNode *) nil_chk(horizontalRun_->end_))->resolved_)) {
      ADXSolverVariable *parentMax = mParent_ != nil ? [system createObjectVariableWithId:mParent_->mRight_] : nil;
      ADXSolverVariable *parentMin = mParent_ != nil ? [system createObjectVariableWithId:mParent_->mLeft_] : nil;
      ADXConstraintWidget_applyConstraintsWithADXLinearSystem_withBoolean_withBoolean_withBoolean_withBoolean_withADXSolverVariable_withADXSolverVariable_withADXConstraintWidget_DimensionBehaviour_withBoolean_withADXConstraintAnchor_withADXConstraintAnchor_withInt_withInt_withInt_withInt_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_withInt_withFloat_withBoolean_(self, system, true, horizontalParentWrapContent, verticalParentWrapContent, IOSBooleanArray_Get(nil_chk(isTerminalWidget_), ADXConstraintWidget_HORIZONTAL), parentMin, parentMax, IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL), wrapContent, mLeft_, mRight_, mX_, width, mMinWidth_, IOSIntArray_Get(nil_chk(mMaxDimension_), ADXConstraintWidget_HORIZONTAL), mHorizontalBiasPercent_, useHorizontalRatio, IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT), inHorizontalChain, inVerticalChain, isInHorizontalBarrier, matchConstraintDefaultWidth, matchConstraintDefaultHeight, mMatchConstraintMinWidth_, mMatchConstraintMaxWidth_, mMatchConstraintPercentWidth_, applyPosition);
    }
    else if (optimize) {
      [system addEqualityWithADXSolverVariable:left withInt:((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(horizontalRun_))->start_))->value_];
      [system addEqualityWithADXSolverVariable:right withInt:((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(horizontalRun_))->end_))->value_];
      if (mParent_ != nil) {
        if (horizontalParentWrapContent && IOSBooleanArray_Get(nil_chk(isTerminalWidget_), ADXConstraintWidget_HORIZONTAL) && ![self isInHorizontalChain]) {
          ADXSolverVariable *parentMax = JreRetainedLocalValue([system createObjectVariableWithId:((ADXConstraintWidget *) nil_chk(mParent_))->mRight_]);
          [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:right withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
        }
      }
    }
  }
  jboolean applyVerticalConstraints = true;
  if (optimize && verticalRun_ != nil && ((ADXDependencyNode *) nil_chk(verticalRun_->start_))->resolved_ && ((ADXDependencyNode *) nil_chk(verticalRun_->end_))->resolved_) {
    [system addEqualityWithADXSolverVariable:top withInt:((ADXDependencyNode *) nil_chk(verticalRun_->start_))->value_];
    [system addEqualityWithADXSolverVariable:bottom withInt:((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(verticalRun_))->end_))->value_];
    [system addEqualityWithADXSolverVariable:baseline withInt:((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(verticalRun_))->baseline_))->value_];
    if (mParent_ != nil) {
      if (!inVerticalChain && verticalParentWrapContent && IOSBooleanArray_Get(nil_chk(isTerminalWidget_), ADXConstraintWidget_VERTICAL)) {
        ADXSolverVariable *parentMax = JreRetainedLocalValue([system createObjectVariableWithId:mParent_->mBottom_]);
        [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:bottom withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
    }
    applyVerticalConstraints = false;
  }
  if (mVerticalResolution_ == ADXConstraintWidget_DIRECT) {
    applyVerticalConstraints = false;
  }
  if (applyVerticalConstraints && !resolvedVertical_) {
    wrapContent = ((IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) && ([self isKindOfClass:[ADXConstraintWidgetContainer class]]));
    if (wrapContent) {
      height = 0;
    }
    ADXSolverVariable *parentMax = mParent_ != nil ? [system createObjectVariableWithId:mParent_->mBottom_] : nil;
    ADXSolverVariable *parentMin = mParent_ != nil ? [system createObjectVariableWithId:mParent_->mTop_] : nil;
    if (mBaselineDistance_ > 0 || mVisibility_ == ADXConstraintWidget_GONE) {
      if (((ADXConstraintAnchor *) nil_chk(mBaseline_))->mTarget_ != nil) {
        [system addEqualityWithADXSolverVariable:baseline withADXSolverVariable:top withInt:[self getBaselineDistance] withInt:ADXSolverVariable_STRENGTH_FIXED];
        ADXSolverVariable *baselineTarget = JreRetainedLocalValue([system createObjectVariableWithId:((ADXConstraintAnchor *) nil_chk(mBaseline_))->mTarget_]);
        jint baselineMargin = [((ADXConstraintAnchor *) nil_chk(mBaseline_)) getMargin];
        [system addEqualityWithADXSolverVariable:baseline withADXSolverVariable:baselineTarget withInt:baselineMargin withInt:ADXSolverVariable_STRENGTH_FIXED];
        applyPosition = false;
        if (verticalParentWrapContent) {
          ADXSolverVariable *end = JreRetainedLocalValue([system createObjectVariableWithId:mBottom_]);
          jint wrapStrength = ADXSolverVariable_STRENGTH_EQUALITY;
          [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:end withInt:0 withInt:wrapStrength];
        }
      }
      else if (mVisibility_ == ADXConstraintWidget_GONE) {
        [system addEqualityWithADXSolverVariable:baseline withADXSolverVariable:top withInt:[mBaseline_ getMargin] withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
      else {
        [system addEqualityWithADXSolverVariable:baseline withADXSolverVariable:top withInt:[self getBaselineDistance] withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
    }
    ADXConstraintWidget_applyConstraintsWithADXLinearSystem_withBoolean_withBoolean_withBoolean_withBoolean_withADXSolverVariable_withADXSolverVariable_withADXConstraintWidget_DimensionBehaviour_withBoolean_withADXConstraintAnchor_withADXConstraintAnchor_withInt_withInt_withInt_withInt_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_withInt_withFloat_withBoolean_(self, system, false, verticalParentWrapContent, horizontalParentWrapContent, IOSBooleanArray_Get(nil_chk(isTerminalWidget_), ADXConstraintWidget_VERTICAL), parentMin, parentMax, IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL), wrapContent, mTop_, mBottom_, mY_, height, mMinHeight_, IOSIntArray_Get(nil_chk(mMaxDimension_), ADXConstraintWidget_VERTICAL), mVerticalBiasPercent_, useVerticalRatio, IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT), inVerticalChain, inHorizontalChain, isInVerticalBarrier, matchConstraintDefaultHeight, matchConstraintDefaultWidth, mMatchConstraintMinHeight_, mMatchConstraintMaxHeight_, mMatchConstraintPercentHeight_, applyPosition);
  }
  if (useRatio) {
    jint strength = ADXSolverVariable_STRENGTH_FIXED;
    if (mResolvedDimensionRatioSide_ == ADXConstraintWidget_VERTICAL) {
      [system addRatioWithADXSolverVariable:bottom withADXSolverVariable:top withADXSolverVariable:right withADXSolverVariable:left withFloat:mResolvedDimensionRatio_ withInt:strength];
    }
    else {
      [system addRatioWithADXSolverVariable:right withADXSolverVariable:left withADXSolverVariable:bottom withADXSolverVariable:top withFloat:mResolvedDimensionRatio_ withInt:strength];
    }
  }
  if ([((ADXConstraintAnchor *) nil_chk(mCenter_)) isConnected]) {
    [system addCenterPointWithADXConstraintWidget:self withADXConstraintWidget:[((ADXConstraintAnchor *) nil_chk([((ADXConstraintAnchor *) nil_chk(mCenter_)) getTarget])) getOwner] withFloat:(jfloat) JavaLangMath_toRadiansWithDouble_(mCircleConstraintAngle_ + 90) withInt:[((ADXConstraintAnchor *) nil_chk(mCenter_)) getMargin]];
  }
  resolvedHorizontal_ = false;
  resolvedVertical_ = false;
}

- (jboolean)addFirst {
  return [self isKindOfClass:[ADXCoreVirtualLayout class]] || [self isKindOfClass:[ADXCoreGuideline class]];
}

- (void)setupDimensionRatioWithBoolean:(jboolean)hParentWrapContent
                           withBoolean:(jboolean)vParentWrapContent
                           withBoolean:(jboolean)horizontalDimensionFixed
                           withBoolean:(jboolean)verticalDimensionFixed {
  if (mResolvedDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN) {
    if (horizontalDimensionFixed && !verticalDimensionFixed) {
      mResolvedDimensionRatioSide_ = ADXConstraintWidget_HORIZONTAL;
    }
    else if (!horizontalDimensionFixed && verticalDimensionFixed) {
      mResolvedDimensionRatioSide_ = ADXConstraintWidget_VERTICAL;
      if (mDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN) {
        mResolvedDimensionRatio_ = 1 / mResolvedDimensionRatio_;
      }
    }
  }
  if (mResolvedDimensionRatioSide_ == ADXConstraintWidget_HORIZONTAL && !([((ADXConstraintAnchor *) nil_chk(mTop_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mBottom_)) isConnected])) {
    mResolvedDimensionRatioSide_ = ADXConstraintWidget_VERTICAL;
  }
  else if (mResolvedDimensionRatioSide_ == ADXConstraintWidget_VERTICAL && !([((ADXConstraintAnchor *) nil_chk(mLeft_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mRight_)) isConnected])) {
    mResolvedDimensionRatioSide_ = ADXConstraintWidget_HORIZONTAL;
  }
  if (mResolvedDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN) {
    if (!([((ADXConstraintAnchor *) nil_chk(mTop_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mBottom_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mLeft_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mRight_)) isConnected])) {
      if ([((ADXConstraintAnchor *) nil_chk(mTop_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mBottom_)) isConnected]) {
        mResolvedDimensionRatioSide_ = ADXConstraintWidget_HORIZONTAL;
      }
      else if ([((ADXConstraintAnchor *) nil_chk(mLeft_)) isConnected] && [((ADXConstraintAnchor *) nil_chk(mRight_)) isConnected]) {
        mResolvedDimensionRatio_ = 1 / mResolvedDimensionRatio_;
        mResolvedDimensionRatioSide_ = ADXConstraintWidget_VERTICAL;
      }
    }
  }
  if (mResolvedDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN) {
    if (mMatchConstraintMinWidth_ > 0 && mMatchConstraintMinHeight_ == 0) {
      mResolvedDimensionRatioSide_ = ADXConstraintWidget_HORIZONTAL;
    }
    else if (mMatchConstraintMinWidth_ == 0 && mMatchConstraintMinHeight_ > 0) {
      mResolvedDimensionRatio_ = 1 / mResolvedDimensionRatio_;
      mResolvedDimensionRatioSide_ = ADXConstraintWidget_VERTICAL;
    }
  }
}

- (void)applyConstraintsWithADXLinearSystem:(ADXLinearSystem *)system
                                withBoolean:(jboolean)isHorizontal
                                withBoolean:(jboolean)parentWrapContent
                                withBoolean:(jboolean)oppositeParentWrapContent
                                withBoolean:(jboolean)isTerminal
                      withADXSolverVariable:(ADXSolverVariable *)parentMin
                      withADXSolverVariable:(ADXSolverVariable *)parentMax
 withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)dimensionBehaviour
                                withBoolean:(jboolean)wrapContent
                    withADXConstraintAnchor:(ADXConstraintAnchor *)beginAnchor
                    withADXConstraintAnchor:(ADXConstraintAnchor *)endAnchor
                                    withInt:(jint)beginPosition
                                    withInt:(jint)dimension
                                    withInt:(jint)minDimension
                                    withInt:(jint)maxDimension
                                  withFloat:(jfloat)bias
                                withBoolean:(jboolean)useRatio
                                withBoolean:(jboolean)oppositeVariable
                                withBoolean:(jboolean)inChain
                                withBoolean:(jboolean)oppositeInChain
                                withBoolean:(jboolean)inBarrier
                                    withInt:(jint)matchConstraintDefault
                                    withInt:(jint)oppositeMatchConstraintDefault
                                    withInt:(jint)matchMinDimension
                                    withInt:(jint)matchMaxDimension
                                  withFloat:(jfloat)matchPercentDimension
                                withBoolean:(jboolean)applyPosition {
  ADXConstraintWidget_applyConstraintsWithADXLinearSystem_withBoolean_withBoolean_withBoolean_withBoolean_withADXSolverVariable_withADXSolverVariable_withADXConstraintWidget_DimensionBehaviour_withBoolean_withADXConstraintAnchor_withADXConstraintAnchor_withInt_withInt_withInt_withInt_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_withInt_withFloat_withBoolean_(self, system, isHorizontal, parentWrapContent, oppositeParentWrapContent, isTerminal, parentMin, parentMax, dimensionBehaviour, wrapContent, beginAnchor, endAnchor, beginPosition, dimension, minDimension, maxDimension, bias, useRatio, oppositeVariable, inChain, oppositeInChain, inBarrier, matchConstraintDefault, oppositeMatchConstraintDefault, matchMinDimension, matchMaxDimension, matchPercentDimension, applyPosition);
}

- (void)updateFromSolverWithADXLinearSystem:(ADXLinearSystem *)system
                                withBoolean:(jboolean)optimize {
  jint left = [((ADXLinearSystem *) nil_chk(system)) getObjectVariableValueWithId:mLeft_];
  jint top = [system getObjectVariableValueWithId:mTop_];
  jint right = [system getObjectVariableValueWithId:mRight_];
  jint bottom = [system getObjectVariableValueWithId:mBottom_];
  if (optimize && horizontalRun_ != nil && ((ADXDependencyNode *) nil_chk(horizontalRun_->start_))->resolved_ && ((ADXDependencyNode *) nil_chk(horizontalRun_->end_))->resolved_) {
    left = ((ADXDependencyNode *) nil_chk(horizontalRun_->start_))->value_;
    right = ((ADXDependencyNode *) nil_chk(horizontalRun_->end_))->value_;
  }
  if (optimize && verticalRun_ != nil && ((ADXDependencyNode *) nil_chk(verticalRun_->start_))->resolved_ && ((ADXDependencyNode *) nil_chk(verticalRun_->end_))->resolved_) {
    top = ((ADXDependencyNode *) nil_chk(verticalRun_->start_))->value_;
    bottom = ((ADXDependencyNode *) nil_chk(verticalRun_->end_))->value_;
  }
  jint w = right - left;
  jint h = bottom - top;
  if (w < 0 || h < 0 || left == JavaLangInteger_MIN_VALUE || left == JavaLangInteger_MAX_VALUE || top == JavaLangInteger_MIN_VALUE || top == JavaLangInteger_MAX_VALUE || right == JavaLangInteger_MIN_VALUE || right == JavaLangInteger_MAX_VALUE || bottom == JavaLangInteger_MIN_VALUE || bottom == JavaLangInteger_MAX_VALUE) {
    left = 0;
    top = 0;
    right = 0;
    bottom = 0;
  }
  [self setFrameWithInt:left withInt:top withInt:right withInt:bottom];
}

- (void)copy__WithADXConstraintWidget:(ADXConstraintWidget *)src
                  withJavaUtilHashMap:(JavaUtilHashMap *)map {
  mHorizontalResolution_ = ((ADXConstraintWidget *) nil_chk(src))->mHorizontalResolution_;
  mVerticalResolution_ = src->mVerticalResolution_;
  mMatchConstraintDefaultWidth_ = src->mMatchConstraintDefaultWidth_;
  mMatchConstraintDefaultHeight_ = src->mMatchConstraintDefaultHeight_;
  *IOSIntArray_GetRef(nil_chk(mResolvedMatchConstraintDefault_), 0) = IOSIntArray_Get(src->mResolvedMatchConstraintDefault_, 0);
  *IOSIntArray_GetRef(mResolvedMatchConstraintDefault_, 1) = IOSIntArray_Get(src->mResolvedMatchConstraintDefault_, 1);
  mMatchConstraintMinWidth_ = src->mMatchConstraintMinWidth_;
  mMatchConstraintMaxWidth_ = src->mMatchConstraintMaxWidth_;
  mMatchConstraintMinHeight_ = src->mMatchConstraintMinHeight_;
  mMatchConstraintMaxHeight_ = src->mMatchConstraintMaxHeight_;
  mMatchConstraintPercentHeight_ = src->mMatchConstraintPercentHeight_;
  mIsWidthWrapContent_ = src->mIsWidthWrapContent_;
  mIsHeightWrapContent_ = src->mIsHeightWrapContent_;
  mResolvedDimensionRatioSide_ = src->mResolvedDimensionRatioSide_;
  mResolvedDimensionRatio_ = src->mResolvedDimensionRatio_;
  JreStrongAssign(&mMaxDimension_, JavaUtilArrays_copyOfWithIntArray_withInt_(src->mMaxDimension_, ((IOSIntArray *) nil_chk(src->mMaxDimension_))->size_));
  mCircleConstraintAngle_ = src->mCircleConstraintAngle_;
  hasBaseline_ = src->hasBaseline_;
  inPlaceholder_ = src->inPlaceholder_;
  [((ADXConstraintAnchor *) nil_chk(mLeft_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mTop_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mRight_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mBottom_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mBaseline_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mCenterX_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mCenterY_)) reset];
  [((ADXConstraintAnchor *) nil_chk(mCenter_)) reset];
  JreStrongAssign(&mListDimensionBehaviors_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(mListDimensionBehaviors_, 2));
  mParent_ = (mParent_ == nil) ? nil : [((JavaUtilHashMap *) nil_chk(map)) getWithId:src->mParent_];
  mWidth_ = src->mWidth_;
  mHeight_ = src->mHeight_;
  mDimensionRatio_ = src->mDimensionRatio_;
  mDimensionRatioSide_ = src->mDimensionRatioSide_;
  mX_ = src->mX_;
  mY_ = src->mY_;
  mRelX_ = src->mRelX_;
  mRelY_ = src->mRelY_;
  mOffsetX_ = src->mOffsetX_;
  mOffsetY_ = src->mOffsetY_;
  mBaselineDistance_ = src->mBaselineDistance_;
  mMinWidth_ = src->mMinWidth_;
  mMinHeight_ = src->mMinHeight_;
  mHorizontalBiasPercent_ = src->mHorizontalBiasPercent_;
  mVerticalBiasPercent_ = src->mVerticalBiasPercent_;
  JreStrongAssign(&mCompanionWidget_, src->mCompanionWidget_);
  mContainerItemSkip_ = src->mContainerItemSkip_;
  mVisibility_ = src->mVisibility_;
  JreStrongAssign(&mDebugName_, src->mDebugName_);
  JreStrongAssign(&mType_, src->mType_);
  mDistToTop_ = src->mDistToTop_;
  mDistToLeft_ = src->mDistToLeft_;
  mDistToRight_ = src->mDistToRight_;
  mDistToBottom_ = src->mDistToBottom_;
  mLeftHasCentered_ = src->mLeftHasCentered_;
  mRightHasCentered_ = src->mRightHasCentered_;
  mTopHasCentered_ = src->mTopHasCentered_;
  mBottomHasCentered_ = src->mBottomHasCentered_;
  mHorizontalWrapVisited_ = src->mHorizontalWrapVisited_;
  mVerticalWrapVisited_ = src->mVerticalWrapVisited_;
  mHorizontalChainStyle_ = src->mHorizontalChainStyle_;
  mVerticalChainStyle_ = src->mVerticalChainStyle_;
  mHorizontalChainFixedPosition_ = src->mHorizontalChainFixedPosition_;
  mVerticalChainFixedPosition_ = src->mVerticalChainFixedPosition_;
  *IOSFloatArray_GetRef(nil_chk(mWeight_), 0) = IOSFloatArray_Get(src->mWeight_, 0);
  *IOSFloatArray_GetRef(mWeight_, 1) = IOSFloatArray_Get(src->mWeight_, 1);
  IOSObjectArray_Set(nil_chk(mListNextMatchConstraintsWidget_), 0, IOSObjectArray_Get(src->mListNextMatchConstraintsWidget_, 0));
  IOSObjectArray_Set(mListNextMatchConstraintsWidget_, 1, IOSObjectArray_Get(src->mListNextMatchConstraintsWidget_, 1));
  IOSObjectArray_Set(nil_chk(mNextChainWidget_), 0, IOSObjectArray_Get(src->mNextChainWidget_, 0));
  IOSObjectArray_Set(mNextChainWidget_, 1, IOSObjectArray_Get(src->mNextChainWidget_, 1));
  JreStrongAssign(&mHorizontalNextWidget_, (src->mHorizontalNextWidget_ == nil) ? nil : [((JavaUtilHashMap *) nil_chk(map)) getWithId:src->mHorizontalNextWidget_]);
  JreStrongAssign(&mVerticalNextWidget_, (src->mVerticalNextWidget_ == nil) ? nil : [((JavaUtilHashMap *) nil_chk(map)) getWithId:src->mVerticalNextWidget_]);
}

- (void)updateFromRunsWithBoolean:(jboolean)updateHorizontal
                      withBoolean:(jboolean)updateVertical {
  updateHorizontal &= [((ADXHorizontalWidgetRun *) nil_chk(horizontalRun_)) isResolved];
  updateVertical &= [((ADXVerticalWidgetRun *) nil_chk(verticalRun_)) isResolved];
  jint left = ((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(horizontalRun_))->start_))->value_;
  jint top = ((ADXVerticalWidgetRun *) nil_chk(verticalRun_))->start_->value_;
  jint right = ((ADXDependencyNode *) nil_chk(horizontalRun_->end_))->value_;
  jint bottom = verticalRun_->end_->value_;
  jint w = right - left;
  jint h = bottom - top;
  if (w < 0 || h < 0 || left == JavaLangInteger_MIN_VALUE || left == JavaLangInteger_MAX_VALUE || top == JavaLangInteger_MIN_VALUE || top == JavaLangInteger_MAX_VALUE || right == JavaLangInteger_MIN_VALUE || right == JavaLangInteger_MAX_VALUE || bottom == JavaLangInteger_MIN_VALUE || bottom == JavaLangInteger_MAX_VALUE) {
    left = 0;
    top = 0;
    right = 0;
    bottom = 0;
  }
  w = right - left;
  h = bottom - top;
  if (updateHorizontal) {
    mX_ = left;
  }
  if (updateVertical) {
    mY_ = top;
  }
  if (mVisibility_ == ADXConstraintWidget_GONE) {
    mWidth_ = 0;
    mHeight_ = 0;
    return;
  }
  if (updateHorizontal) {
    if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) && w < mWidth_) {
      w = mWidth_;
    }
    mWidth_ = w;
    if (mWidth_ < mMinWidth_) {
      mWidth_ = mMinWidth_;
    }
  }
  if (updateVertical) {
    if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) && h < mHeight_) {
      h = mHeight_;
    }
    mHeight_ = h;
    if (mHeight_ < mMinHeight_) {
      mHeight_ = mMinHeight_;
    }
  }
}

- (void)addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                                    withADXLinearSystem:(ADXLinearSystem *)system
                                                    withJavaUtilHashSet:(JavaUtilHashSet *)widgets
                                                                withInt:(jint)orientation
                                                            withBoolean:(jboolean)addSelf {
  if (addSelf) {
    if (![((JavaUtilHashSet *) nil_chk(widgets)) containsWithId:self]) {
      return;
    }
    ADXOptimizer_checkMatchParentWithADXConstraintWidgetContainer_withADXLinearSystem_withADXConstraintWidget_(container, system, self);
    [widgets removeWithId:self];
    [self addToSolverWithADXLinearSystem:system withBoolean:[((ADXConstraintWidgetContainer *) nil_chk(container)) optimizeForWithInt:ADXOptimizer_OPTIMIZATION_GRAPH]];
  }
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    JavaUtilHashSet *dependents = JreRetainedLocalValue([((ADXConstraintAnchor *) nil_chk(mLeft_)) getDependents]);
    if (dependents != nil) {
      for (ADXConstraintAnchor * __strong anchor in dependents) {
        [((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(anchor))->mOwner_)) addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:container withADXLinearSystem:system withJavaUtilHashSet:widgets withInt:orientation withBoolean:true];
      }
    }
    dependents = [((ADXConstraintAnchor *) nil_chk(mRight_)) getDependents];
    if (dependents != nil) {
      for (ADXConstraintAnchor * __strong anchor in dependents) {
        [((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(anchor))->mOwner_)) addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:container withADXLinearSystem:system withJavaUtilHashSet:widgets withInt:orientation withBoolean:true];
      }
    }
  }
  else {
    JavaUtilHashSet *dependents = JreRetainedLocalValue([((ADXConstraintAnchor *) nil_chk(mTop_)) getDependents]);
    if (dependents != nil) {
      for (ADXConstraintAnchor * __strong anchor in dependents) {
        [((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(anchor))->mOwner_)) addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:container withADXLinearSystem:system withJavaUtilHashSet:widgets withInt:orientation withBoolean:true];
      }
    }
    dependents = [((ADXConstraintAnchor *) nil_chk(mBottom_)) getDependents];
    if (dependents != nil) {
      for (ADXConstraintAnchor * __strong anchor in dependents) {
        [((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(anchor))->mOwner_)) addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:container withADXLinearSystem:system withJavaUtilHashSet:widgets withInt:orientation withBoolean:true];
      }
    }
    dependents = [((ADXConstraintAnchor *) nil_chk(mBaseline_)) getDependents];
    if (dependents != nil) {
      for (ADXConstraintAnchor * __strong anchor in dependents) {
        [((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(anchor))->mOwner_)) addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:container withADXLinearSystem:system withJavaUtilHashSet:widgets withInt:orientation withBoolean:true];
      }
    }
  }
}

- (void)__javaClone:(ADXConstraintWidget *)original {
  [super __javaClone:original];
  [mParent_ release];
}

- (void)dealloc {
  RELEASE_(run_);
  RELEASE_(horizontalChainRun_);
  RELEASE_(verticalChainRun_);
  RELEASE_(horizontalRun_);
  RELEASE_(verticalRun_);
  RELEASE_(isTerminalWidget_);
  RELEASE_(frame_);
  RELEASE_(stringId_);
  RELEASE_(mResolvedMatchConstraintDefault_);
  RELEASE_(mMaxDimension_);
  RELEASE_(mLeft_);
  RELEASE_(mTop_);
  RELEASE_(mRight_);
  RELEASE_(mBottom_);
  RELEASE_(mBaseline_);
  RELEASE_(mCenterX_);
  RELEASE_(mCenterY_);
  RELEASE_(mCenter_);
  RELEASE_(mListAnchors_);
  RELEASE_(mAnchors_);
  RELEASE_(mIsInBarrier_);
  RELEASE_(mListDimensionBehaviors_);
  RELEASE_(mCompanionWidget_);
  RELEASE_(mDebugName_);
  RELEASE_(mType_);
  RELEASE_(mWeight_);
  RELEASE_(mListNextMatchConstraintsWidget_);
  RELEASE_(mNextChainWidget_);
  RELEASE_(mHorizontalNextWidget_);
  RELEASE_(mVerticalNextWidget_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXWidgetRun;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 33, -1, -1, -1, -1 },
    { NULL, "LJavaLangStringBuilder;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 36, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 37, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 38, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 39, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 53, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 55, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 56, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 57, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 58, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 59, -1, -1 },
    { NULL, "V", 0x1, 60, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 65, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 81, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 84, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 85, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 86, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 90, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 95, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 97, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 101, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintAnchor;", 0x1, 102, 103, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget_DimensionBehaviour;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget_DimensionBehaviour;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget_DimensionBehaviour;", 0x1, 104, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 105, 106, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 107, 106, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, 108, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, 109, 1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 110, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 111, 112, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 113, 114, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 115, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 117, 112, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 118, 119, -1, 120, -1, -1 },
    { NULL, "V", 0x1, 121, 122, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 123, 124, -1, 125, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getRunWithInt:);
  methods[1].selector = @selector(setFinalFrameWithInt:withInt:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(setFinalLeftWithInt:);
  methods[3].selector = @selector(setFinalTopWithInt:);
  methods[4].selector = @selector(resetSolvingPassFlag);
  methods[5].selector = @selector(isHorizontalSolvingPassDone);
  methods[6].selector = @selector(isVerticalSolvingPassDone);
  methods[7].selector = @selector(markHorizontalSolvingPassDone);
  methods[8].selector = @selector(markVerticalSolvingPassDone);
  methods[9].selector = @selector(setFinalHorizontalWithInt:withInt:);
  methods[10].selector = @selector(setFinalVerticalWithInt:withInt:);
  methods[11].selector = @selector(setFinalBaselineWithInt:);
  methods[12].selector = @selector(isResolvedHorizontally);
  methods[13].selector = @selector(isResolvedVertically);
  methods[14].selector = @selector(resetFinalResolution);
  methods[15].selector = @selector(ensureMeasureRequested);
  methods[16].selector = @selector(hasDependencies);
  methods[17].selector = @selector(hasDanglingDimensionWithInt:);
  methods[18].selector = @selector(hasResolvedTargetsWithInt:withInt:);
  methods[19].selector = @selector(isInVirtualLayout);
  methods[20].selector = @selector(setInVirtualLayoutWithBoolean:);
  methods[21].selector = @selector(getMaxHeight);
  methods[22].selector = @selector(getMaxWidth);
  methods[23].selector = @selector(setMaxWidthWithInt:);
  methods[24].selector = @selector(setMaxHeightWithInt:);
  methods[25].selector = @selector(isSpreadWidth);
  methods[26].selector = @selector(isSpreadHeight);
  methods[27].selector = @selector(setHasBaselineWithBoolean:);
  methods[28].selector = @selector(getHasBaseline);
  methods[29].selector = @selector(isInPlaceholder);
  methods[30].selector = @selector(setInPlaceholderWithBoolean:);
  methods[31].selector = @selector(setInBarrierWithInt:withBoolean:);
  methods[32].selector = @selector(isInBarrierWithInt:);
  methods[33].selector = @selector(setMeasureRequestedWithBoolean:);
  methods[34].selector = @selector(isMeasureRequested);
  methods[35].selector = @selector(setWrapBehaviorInParentWithInt:);
  methods[36].selector = @selector(getWrapBehaviorInParent);
  methods[37].selector = @selector(getLastHorizontalMeasureSpec);
  methods[38].selector = @selector(getLastVerticalMeasureSpec);
  methods[39].selector = @selector(setLastMeasureSpecWithInt:withInt:);
  methods[40].selector = @selector(reset);
  methods[41].selector = @selector(serializeAnchorWithJavaLangStringBuilder:withNSString:withADXConstraintAnchor:);
  methods[42].selector = @selector(serializeCircleWithJavaLangStringBuilder:withADXConstraintAnchor:withFloat:);
  methods[43].selector = @selector(serializeAttributeWithJavaLangStringBuilder:withNSString:withFloat:withFloat:);
  methods[44].selector = @selector(serializeDimensionRatioWithJavaLangStringBuilder:withNSString:withFloat:withInt:);
  methods[45].selector = @selector(serializeSizeWithJavaLangStringBuilder:withNSString:withInt:withInt:withInt:withInt:withInt:withInt:withFloat:withFloat:);
  methods[46].selector = @selector(serializeWithJavaLangStringBuilder:);
  methods[47].selector = @selector(oppositeDimensionDependsOnWithInt:);
  methods[48].selector = @selector(oppositeDimensionsTied);
  methods[49].selector = @selector(hasDimensionOverride);
  methods[50].selector = @selector(init);
  methods[51].selector = @selector(initWithNSString:);
  methods[52].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[53].selector = @selector(initWithNSString:withInt:withInt:withInt:withInt:);
  methods[54].selector = @selector(initWithInt:withInt:);
  methods[55].selector = @selector(ensureWidgetRuns);
  methods[56].selector = @selector(initWithNSString:withInt:withInt:);
  methods[57].selector = @selector(resetSolverVariablesWithADXCache:);
  methods[58].selector = @selector(addAnchors);
  methods[59].selector = @selector(isRoot);
  methods[60].selector = @selector(getParent);
  methods[61].selector = @selector(setParentWithADXConstraintWidget:);
  methods[62].selector = @selector(setWidthWrapContentWithBoolean:);
  methods[63].selector = @selector(isWidthWrapContent);
  methods[64].selector = @selector(setHeightWrapContentWithBoolean:);
  methods[65].selector = @selector(isHeightWrapContent);
  methods[66].selector = @selector(connectCircularConstraintWithADXConstraintWidget:withFloat:withInt:);
  methods[67].selector = @selector(getType);
  methods[68].selector = @selector(setTypeWithNSString:);
  methods[69].selector = @selector(setVisibilityWithInt:);
  methods[70].selector = @selector(getVisibility);
  methods[71].selector = @selector(getDebugName);
  methods[72].selector = @selector(setDebugNameWithNSString:);
  methods[73].selector = @selector(setDebugSolverNameWithADXLinearSystem:withNSString:);
  methods[74].selector = @selector(createObjectVariablesWithADXLinearSystem:);
  methods[75].selector = @selector(description);
  methods[76].selector = @selector(getX);
  methods[77].selector = @selector(getY);
  methods[78].selector = @selector(getWidth);
  methods[79].selector = @selector(getOptimizerWrapWidth);
  methods[80].selector = @selector(getOptimizerWrapHeight);
  methods[81].selector = @selector(getHeight);
  methods[82].selector = @selector(getLengthWithInt:);
  methods[83].selector = @selector(getRootX);
  methods[84].selector = @selector(getRootY);
  methods[85].selector = @selector(getMinWidth);
  methods[86].selector = @selector(getMinHeight);
  methods[87].selector = @selector(getLeft);
  methods[88].selector = @selector(getTop);
  methods[89].selector = @selector(getRight);
  methods[90].selector = @selector(getBottom);
  methods[91].selector = @selector(getHorizontalMargin);
  methods[92].selector = @selector(getVerticalMargin);
  methods[93].selector = @selector(getHorizontalBiasPercent);
  methods[94].selector = @selector(getVerticalBiasPercent);
  methods[95].selector = @selector(getBiasPercentWithInt:);
  methods[96].selector = @selector(hasBaseline);
  methods[97].selector = @selector(getBaselineDistance);
  methods[98].selector = @selector(getCompanionWidget);
  methods[99].selector = @selector(getAnchors);
  methods[100].selector = @selector(setXWithInt:);
  methods[101].selector = @selector(setYWithInt:);
  methods[102].selector = @selector(setOriginWithInt:withInt:);
  methods[103].selector = @selector(setOffsetWithInt:withInt:);
  methods[104].selector = @selector(setGoneMarginWithADXConstraintAnchor_Type:withInt:);
  methods[105].selector = @selector(setWidthWithInt:);
  methods[106].selector = @selector(setHeightWithInt:);
  methods[107].selector = @selector(setLengthWithInt:withInt:);
  methods[108].selector = @selector(setHorizontalMatchStyleWithInt:withInt:withInt:withFloat:);
  methods[109].selector = @selector(setVerticalMatchStyleWithInt:withInt:withInt:withFloat:);
  methods[110].selector = @selector(setDimensionRatioWithNSString:);
  methods[111].selector = @selector(setDimensionRatioWithFloat:withInt:);
  methods[112].selector = @selector(getDimensionRatio);
  methods[113].selector = @selector(getDimensionRatioSide);
  methods[114].selector = @selector(setHorizontalBiasPercentWithFloat:);
  methods[115].selector = @selector(setVerticalBiasPercentWithFloat:);
  methods[116].selector = @selector(setMinWidthWithInt:);
  methods[117].selector = @selector(setMinHeightWithInt:);
  methods[118].selector = @selector(setDimensionWithInt:withInt:);
  methods[119].selector = @selector(setFrameWithInt:withInt:withInt:withInt:);
  methods[120].selector = @selector(setFrameWithInt:withInt:withInt:);
  methods[121].selector = @selector(setHorizontalDimensionWithInt:withInt:);
  methods[122].selector = @selector(setVerticalDimensionWithInt:withInt:);
  methods[123].selector = @selector(getRelativePositioningWithInt:);
  methods[124].selector = @selector(setRelativePositioningWithInt:withInt:);
  methods[125].selector = @selector(setBaselineDistanceWithInt:);
  methods[126].selector = @selector(setCompanionWidgetWithId:);
  methods[127].selector = @selector(setContainerItemSkipWithInt:);
  methods[128].selector = @selector(getContainerItemSkip);
  methods[129].selector = @selector(setHorizontalWeightWithFloat:);
  methods[130].selector = @selector(setVerticalWeightWithFloat:);
  methods[131].selector = @selector(setHorizontalChainStyleWithInt:);
  methods[132].selector = @selector(getHorizontalChainStyle);
  methods[133].selector = @selector(setVerticalChainStyleWithInt:);
  methods[134].selector = @selector(getVerticalChainStyle);
  methods[135].selector = @selector(allowedInBarrier);
  methods[136].selector = @selector(immediateConnectWithADXConstraintAnchor_Type:withADXConstraintWidget:withADXConstraintAnchor_Type:withInt:withInt:);
  methods[137].selector = @selector(connectWithADXConstraintAnchor:withADXConstraintAnchor:withInt:);
  methods[138].selector = @selector(connectWithADXConstraintAnchor_Type:withADXConstraintWidget:withADXConstraintAnchor_Type:);
  methods[139].selector = @selector(connectWithADXConstraintAnchor_Type:withADXConstraintWidget:withADXConstraintAnchor_Type:withInt:);
  methods[140].selector = @selector(resetAllConstraints);
  methods[141].selector = @selector(resetAnchorWithADXConstraintAnchor:);
  methods[142].selector = @selector(resetAnchors);
  methods[143].selector = @selector(getAnchorWithADXConstraintAnchor_Type:);
  methods[144].selector = @selector(getHorizontalDimensionBehaviour);
  methods[145].selector = @selector(getVerticalDimensionBehaviour);
  methods[146].selector = @selector(getDimensionBehaviourWithInt:);
  methods[147].selector = @selector(setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:);
  methods[148].selector = @selector(setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:);
  methods[149].selector = @selector(isInHorizontalChain);
  methods[150].selector = @selector(getPreviousChainMemberWithInt:);
  methods[151].selector = @selector(getNextChainMemberWithInt:);
  methods[152].selector = @selector(getHorizontalChainControlWidget);
  methods[153].selector = @selector(isInVerticalChain);
  methods[154].selector = @selector(getVerticalChainControlWidget);
  methods[155].selector = @selector(isChainHeadWithInt:);
  methods[156].selector = @selector(addToSolverWithADXLinearSystem:withBoolean:);
  methods[157].selector = @selector(addFirst);
  methods[158].selector = @selector(setupDimensionRatioWithBoolean:withBoolean:withBoolean:withBoolean:);
  methods[159].selector = @selector(applyConstraintsWithADXLinearSystem:withBoolean:withBoolean:withBoolean:withBoolean:withADXSolverVariable:withADXSolverVariable:withADXConstraintWidget_DimensionBehaviour:withBoolean:withADXConstraintAnchor:withADXConstraintAnchor:withInt:withInt:withInt:withInt:withFloat:withBoolean:withBoolean:withBoolean:withBoolean:withBoolean:withInt:withInt:withInt:withInt:withFloat:withBoolean:);
  methods[160].selector = @selector(updateFromSolverWithADXLinearSystem:withBoolean:);
  methods[161].selector = @selector(copy__WithADXConstraintWidget:withJavaUtilHashMap:);
  methods[162].selector = @selector(updateFromRunsWithBoolean:withBoolean:);
  methods[163].selector = @selector(addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:withADXLinearSystem:withJavaUtilHashSet:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "AUTOTAG_CENTER", "Z", .constantValue.asBOOL = ADXConstraintWidget_AUTOTAG_CENTER, 0x1a, -1, -1, -1, -1 },
    { "SOLVER", "I", .constantValue.asInt = ADXConstraintWidget_SOLVER, 0x1c, -1, -1, -1, -1 },
    { "DIRECT", "I", .constantValue.asInt = ADXConstraintWidget_DIRECT, 0x1c, -1, -1, -1, -1 },
    { "USE_WRAP_DIMENSION_FOR_SPREAD", "Z", .constantValue.asBOOL = ADXConstraintWidget_USE_WRAP_DIMENSION_FOR_SPREAD, 0x1a, -1, -1, -1, -1 },
    { "measured_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "run_", "[LADXWidgetRun;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalChainRun_", "LADXChainRun;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalChainRun_", "LADXChainRun;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalRun_", "LADXHorizontalWidgetRun;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalRun_", "LADXVerticalWidgetRun;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "isTerminalWidget_", "[Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mResolvedHasRatio_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMeasureRequested_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "OPTIMIZE_WRAP_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "OPTIMIZE_WRAP_ON_RESOLVED_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidthOverride_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeightOverride_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "frame_", "LADXWidgetFrame;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "stringId_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "resolvedHorizontal_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resolvedVertical_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "horizontalSolvingPass_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "verticalSolvingPass_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_SPREAD", "I", .constantValue.asInt = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_WRAP", "I", .constantValue.asInt = ADXConstraintWidget_MATCH_CONSTRAINT_WRAP, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_PERCENT", "I", .constantValue.asInt = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_RATIO", "I", .constantValue.asInt = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_RATIO_RESOLVED", "I", .constantValue.asInt = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED, 0x19, -1, -1, -1, -1 },
    { "UNKNOWN", "I", .constantValue.asInt = ADXConstraintWidget_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL", "I", .constantValue.asInt = ADXConstraintWidget_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXConstraintWidget_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "BOTH", "I", .constantValue.asInt = ADXConstraintWidget_BOTH, 0x19, -1, -1, -1, -1 },
    { "VISIBLE", "I", .constantValue.asInt = ADXConstraintWidget_VISIBLE, 0x19, -1, -1, -1, -1 },
    { "INVISIBLE", "I", .constantValue.asInt = ADXConstraintWidget_INVISIBLE, 0x19, -1, -1, -1, -1 },
    { "GONE", "I", .constantValue.asInt = ADXConstraintWidget_GONE, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD", "I", .constantValue.asInt = ADXConstraintWidget_CHAIN_SPREAD, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD_INSIDE", "I", .constantValue.asInt = ADXConstraintWidget_CHAIN_SPREAD_INSIDE, 0x19, -1, -1, -1, -1 },
    { "CHAIN_PACKED", "I", .constantValue.asInt = ADXConstraintWidget_CHAIN_PACKED, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_INCLUDED", "I", .constantValue.asInt = ADXConstraintWidget_WRAP_BEHAVIOR_INCLUDED, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_HORIZONTAL_ONLY", "I", .constantValue.asInt = ADXConstraintWidget_WRAP_BEHAVIOR_HORIZONTAL_ONLY, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_VERTICAL_ONLY", "I", .constantValue.asInt = ADXConstraintWidget_WRAP_BEHAVIOR_VERTICAL_ONLY, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_SKIPPED", "I", .constantValue.asInt = ADXConstraintWidget_WRAP_BEHAVIOR_SKIPPED, 0x19, -1, -1, -1, -1 },
    { "mHorizontalResolution_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVerticalResolution_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "WRAP", "I", .constantValue.asInt = ADXConstraintWidget_WRAP, 0x1a, -1, -1, -1, -1 },
    { "mWrapBehaviorInParent_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMatchConstraintDefaultWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintDefaultHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mResolvedMatchConstraintDefault_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintMinWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintMaxWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintPercentWidth_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintMinHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintMaxHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMatchConstraintPercentHeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mIsWidthWrapContent_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mIsHeightWrapContent_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mResolvedDimensionRatioSide_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mResolvedDimensionRatio_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMaxDimension_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCircleConstraintAngle_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hasBaseline_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "inPlaceholder_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInVirtualLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastHorizontalMeasureSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastVerticalMeasureSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLeft_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTop_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mRight_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBottom_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mBaseline_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCenterX_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCenterY_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCenter_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "ANCHOR_LEFT", "I", .constantValue.asInt = ADXConstraintWidget_ANCHOR_LEFT, 0x19, -1, -1, -1, -1 },
    { "ANCHOR_RIGHT", "I", .constantValue.asInt = ADXConstraintWidget_ANCHOR_RIGHT, 0x19, -1, -1, -1, -1 },
    { "ANCHOR_TOP", "I", .constantValue.asInt = ADXConstraintWidget_ANCHOR_TOP, 0x19, -1, -1, -1, -1 },
    { "ANCHOR_BOTTOM", "I", .constantValue.asInt = ADXConstraintWidget_ANCHOR_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "ANCHOR_BASELINE", "I", .constantValue.asInt = ADXConstraintWidget_ANCHOR_BASELINE, 0x19, -1, -1, -1, -1 },
    { "mListAnchors_", "[LADXConstraintAnchor;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAnchors_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x4, -1, -1, 126, -1 },
    { "mIsInBarrier_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DIMENSION_HORIZONTAL", "I", .constantValue.asInt = ADXConstraintWidget_DIMENSION_HORIZONTAL, 0x18, -1, -1, -1, -1 },
    { "DIMENSION_VERTICAL", "I", .constantValue.asInt = ADXConstraintWidget_DIMENSION_VERTICAL, 0x18, -1, -1, -1, -1 },
    { "mListDimensionBehaviors_", "[LADXConstraintWidget_DimensionBehaviour;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mParent_", "LADXConstraintWidget;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDimensionRatio_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDimensionRatioSide_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mX_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mY_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRelX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRelY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOffsetX_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mOffsetY_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBaselineDistance_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMinWidth_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMinHeight_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "DEFAULT_BIAS", "F", .constantValue.asLong = 0, 0x9, -1, 127, -1, -1 },
    { "mHorizontalBiasPercent_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalBiasPercent_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCompanionWidget_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContainerItemSkip_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVisibility_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDebugName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDistToTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDistToLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDistToRight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDistToBottom_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLeftHasCentered_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRightHasCentered_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTopHasCentered_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBottomHasCentered_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalWrapVisited_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalWrapVisited_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGroupsToSolver_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalChainStyle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalChainStyle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalChainFixedPosition_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalChainFixedPosition_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWeight_", "[F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mListNextMatchConstraintsWidget_", "[LADXConstraintWidget;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mNextChainWidget_", "[LADXConstraintWidget;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mHorizontalNextWidget_", "LADXConstraintWidget;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalNextWidget_", "LADXConstraintWidget;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "horizontalGroup_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalGroup_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getRun", "I", "setFinalFrame", "IIIIII", "setFinalLeft", "setFinalTop", "setFinalHorizontal", "II", "setFinalVertical", "setFinalBaseline", "hasDanglingDimension", "hasResolvedTargets", "setInVirtualLayout", "Z", "setMaxWidth", "setMaxHeight", "setHasBaseline", "setInPlaceholder", "setInBarrier", "IZ", "isInBarrier", "setMeasureRequested", "setWrapBehaviorInParent", "setLastMeasureSpec", "serializeAnchor", "LJavaLangStringBuilder;LNSString;LADXConstraintAnchor;", "serializeCircle", "LJavaLangStringBuilder;LADXConstraintAnchor;F", "serializeAttribute", "LJavaLangStringBuilder;LNSString;FF", "serializeDimensionRatio", "LJavaLangStringBuilder;LNSString;FI", "serializeSize", "LJavaLangStringBuilder;LNSString;IIIIIIFF", "serialize", "LJavaLangStringBuilder;", "oppositeDimensionDependsOn", "LNSString;", "IIII", "LNSString;IIII", "LNSString;II", "resetSolverVariables", "LADXCache;", "setParent", "LADXConstraintWidget;", "setWidthWrapContent", "setHeightWrapContent", "connectCircularConstraint", "LADXConstraintWidget;FI", "setType", "setVisibility", "setDebugName", "setDebugSolverName", "LADXLinearSystem;LNSString;", "createObjectVariables", "LADXLinearSystem;", "toString", "getLength", "getBiasPercent", "()Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/ConstraintAnchor;>;", "setX", "setY", "setOrigin", "setOffset", "setGoneMargin", "LADXConstraintAnchor_Type;I", "setWidth", "setHeight", "setLength", "setHorizontalMatchStyle", "IIIF", "setVerticalMatchStyle", "setDimensionRatio", "FI", "setHorizontalBiasPercent", "F", "setVerticalBiasPercent", "setMinWidth", "setMinHeight", "setDimension", "setFrame", "III", "setHorizontalDimension", "setVerticalDimension", "getRelativePositioning", "setRelativePositioning", "setBaselineDistance", "setCompanionWidget", "LNSObject;", "setContainerItemSkip", "setHorizontalWeight", "setVerticalWeight", "setHorizontalChainStyle", "setVerticalChainStyle", "immediateConnect", "LADXConstraintAnchor_Type;LADXConstraintWidget;LADXConstraintAnchor_Type;II", "connect", "LADXConstraintAnchor;LADXConstraintAnchor;I", "LADXConstraintAnchor_Type;LADXConstraintWidget;LADXConstraintAnchor_Type;", "LADXConstraintAnchor_Type;LADXConstraintWidget;LADXConstraintAnchor_Type;I", "resetAnchor", "LADXConstraintAnchor;", "getAnchor", "LADXConstraintAnchor_Type;", "getDimensionBehaviour", "setHorizontalDimensionBehaviour", "LADXConstraintWidget_DimensionBehaviour;", "setVerticalDimensionBehaviour", "getPreviousChainMember", "getNextChainMember", "isChainHead", "addToSolver", "LADXLinearSystem;Z", "setupDimensionRatio", "ZZZZ", "applyConstraints", "LADXLinearSystem;ZZZZLADXSolverVariable;LADXSolverVariable;LADXConstraintWidget_DimensionBehaviour;ZLADXConstraintAnchor;LADXConstraintAnchor;IIIIFZZZZZIIIIFZ", "updateFromSolver", "copy", "LADXConstraintWidget;LJavaUtilHashMap;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidget;Ljava/util/HashMap<Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "updateFromRuns", "ZZ", "addChildrenToSolverByDependency", "LADXConstraintWidgetContainer;LADXLinearSystem;LJavaUtilHashSet;IZ", "(Landroidx/constraintlayout/core/widgets/ConstraintWidgetContainer;Landroidx/constraintlayout/core/LinearSystem;Ljava/util/HashSet<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;IZ)V", "Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/ConstraintAnchor;>;", &ADXConstraintWidget_DEFAULT_BIAS };
  static const J2ObjcClassInfo _ADXConstraintWidget = { "ConstraintWidget", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x1, 164, 129, -1, 106, -1, -1, -1 };
  return &_ADXConstraintWidget;
}

@end

void ADXConstraintWidget_serializeAnchorWithJavaLangStringBuilder_withNSString_withADXConstraintAnchor_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *side, ADXConstraintAnchor *a) {
  if (((ADXConstraintAnchor *) nil_chk(a))->mTarget_ == nil) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(ret)) appendWithNSString:side];
  [ret appendWithNSString:@" : [ '"];
  [ret appendWithId:a->mTarget_];
  [ret appendWithNSString:@"',"];
  [ret appendWithInt:a->mMargin_];
  [ret appendWithNSString:@","];
  [ret appendWithInt:a->mGoneMargin_];
  [ret appendWithNSString:@","];
  [ret appendWithNSString:@" ] ,\n"];
}

void ADXConstraintWidget_serializeCircleWithJavaLangStringBuilder_withADXConstraintAnchor_withFloat_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, ADXConstraintAnchor *a, jfloat angle) {
  if (((ADXConstraintAnchor *) nil_chk(a))->mTarget_ == nil) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(ret)) appendWithNSString:@"circle : [ '"];
  [ret appendWithId:a->mTarget_];
  [ret appendWithNSString:@"',"];
  [ret appendWithInt:a->mMargin_];
  [ret appendWithNSString:@","];
  [ret appendWithFloat:angle];
  [ret appendWithNSString:@","];
  [ret appendWithNSString:@" ] ,\n"];
}

void ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *type, jfloat value, jfloat def) {
  if (value == def) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(ret)) appendWithNSString:type];
  [ret appendWithNSString:@" :   "];
  [ret appendWithFloat:def];
  [ret appendWithNSString:@",\n"];
}

void ADXConstraintWidget_serializeDimensionRatioWithJavaLangStringBuilder_withNSString_withFloat_withInt_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *type, jfloat value, jint whichSide) {
  if (value == 0) {
    return;
  }
  [((JavaLangStringBuilder *) nil_chk(ret)) appendWithNSString:type];
  [ret appendWithNSString:@" :  ["];
  [ret appendWithFloat:value];
  [ret appendWithNSString:@","];
  [ret appendWithInt:whichSide];
  [ret appendWithNSString:@""];
  [ret appendWithNSString:@"],\n"];
}

void ADXConstraintWidget_serializeSizeWithJavaLangStringBuilder_withNSString_withInt_withInt_withInt_withInt_withInt_withInt_withFloat_withFloat_(ADXConstraintWidget *self, JavaLangStringBuilder *ret, NSString *type, jint size, jint min, jint max, jint override, jint matchConstraintMin, jint matchConstraintDefault, jfloat MatchConstraintPercent, jfloat weight) {
  [((JavaLangStringBuilder *) nil_chk(ret)) appendWithNSString:type];
  [ret appendWithNSString:@" :  {\n"];
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"size", size, JavaLangInteger_MIN_VALUE);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"min", min, 0);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"max", max, JavaLangInteger_MAX_VALUE);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"matchMin", matchConstraintMin, 0);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"matchDef", matchConstraintDefault, ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD);
  ADXConstraintWidget_serializeAttributeWithJavaLangStringBuilder_withNSString_withFloat_withFloat_(self, ret, @"matchPercent", matchConstraintDefault, 1);
  [ret appendWithNSString:@"},\n"];
}

void ADXConstraintWidget_init(ADXConstraintWidget *self) {
  NSObject_init(self);
  self->measured_ = false;
  JreStrongAssignAndConsume(&self->run_, [IOSObjectArray newArrayWithLength:2 type:ADXWidgetRun_class_()]);
  JreStrongAssign(&self->horizontalRun_, nil);
  JreStrongAssign(&self->verticalRun_, nil);
  JreStrongAssignAndConsume(&self->isTerminalWidget_, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true } count:2]);
  self->mResolvedHasRatio_ = false;
  self->mMeasureRequested_ = true;
  self->OPTIMIZE_WRAP_ = false;
  self->OPTIMIZE_WRAP_ON_RESOLVED_ = true;
  self->mWidthOverride_ = -1;
  self->mHeightOverride_ = -1;
  JreStrongAssignAndConsume(&self->frame_, new_ADXWidgetFrame_initWithADXConstraintWidget_(self));
  self->resolvedHorizontal_ = false;
  self->resolvedVertical_ = false;
  self->horizontalSolvingPass_ = false;
  self->verticalSolvingPass_ = false;
  self->mHorizontalResolution_ = ADXConstraintWidget_UNKNOWN;
  self->mVerticalResolution_ = ADXConstraintWidget_UNKNOWN;
  self->mWrapBehaviorInParent_ = ADXConstraintWidget_WRAP_BEHAVIOR_INCLUDED;
  self->mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  self->mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  JreStrongAssignAndConsume(&self->mResolvedMatchConstraintDefault_, [IOSIntArray newArrayWithLength:2]);
  self->mMatchConstraintMinWidth_ = 0;
  self->mMatchConstraintMaxWidth_ = 0;
  self->mMatchConstraintPercentWidth_ = 1;
  self->mMatchConstraintMinHeight_ = 0;
  self->mMatchConstraintMaxHeight_ = 0;
  self->mMatchConstraintPercentHeight_ = 1;
  self->mResolvedDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  self->mResolvedDimensionRatio_ = 1.0f;
  JreStrongAssignAndConsume(&self->mMaxDimension_, [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE } count:2]);
  self->mCircleConstraintAngle_ = 0;
  self->hasBaseline_ = false;
  self->mInVirtualLayout_ = false;
  self->mLastHorizontalMeasureSpec_ = 0;
  self->mLastVerticalMeasureSpec_ = 0;
  JreStrongAssignAndConsume(&self->mLeft_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, LEFT)));
  JreStrongAssignAndConsume(&self->mTop_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, TOP)));
  JreStrongAssignAndConsume(&self->mRight_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)));
  JreStrongAssignAndConsume(&self->mBottom_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)));
  JreStrongAssignAndConsume(&self->mBaseline_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)));
  JreStrongAssignAndConsume(&self->mCenterX_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)));
  JreStrongAssignAndConsume(&self->mCenterY_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)));
  JreStrongAssignAndConsume(&self->mCenter_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER)));
  JreStrongAssignAndConsume(&self->mListAnchors_, [IOSObjectArray newArrayWithObjects:(id[]){ self->mLeft_, self->mRight_, self->mTop_, self->mBottom_, self->mBaseline_, self->mCenter_ } count:6 type:ADXConstraintAnchor_class_()]);
  JreStrongAssignAndConsume(&self->mAnchors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mIsInBarrier_, [IOSBooleanArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mListDimensionBehaviors_, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) } count:2 type:ADXConstraintWidget_DimensionBehaviour_class_()]);
  self->mParent_ = nil;
  self->mWidth_ = 0;
  self->mHeight_ = 0;
  self->mDimensionRatio_ = 0;
  self->mDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  self->mX_ = 0;
  self->mY_ = 0;
  self->mRelX_ = 0;
  self->mRelY_ = 0;
  self->mOffsetX_ = 0;
  self->mOffsetY_ = 0;
  self->mBaselineDistance_ = 0;
  self->mHorizontalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  self->mVerticalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  self->mContainerItemSkip_ = 0;
  self->mVisibility_ = ADXConstraintWidget_VISIBLE;
  JreStrongAssign(&self->mDebugName_, nil);
  JreStrongAssign(&self->mType_, nil);
  self->mGroupsToSolver_ = false;
  self->mHorizontalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  self->mVerticalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  JreStrongAssignAndConsume(&self->mWeight_, [IOSFloatArray newArrayWithFloats:(jfloat[]){ ADXConstraintWidget_UNKNOWN, ADXConstraintWidget_UNKNOWN } count:2]);
  JreStrongAssignAndConsume(&self->mListNextMatchConstraintsWidget_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:ADXConstraintWidget_class_()]);
  JreStrongAssignAndConsume(&self->mNextChainWidget_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:ADXConstraintWidget_class_()]);
  JreStrongAssign(&self->mHorizontalNextWidget_, nil);
  JreStrongAssign(&self->mVerticalNextWidget_, nil);
  self->horizontalGroup_ = -1;
  self->verticalGroup_ = -1;
  ADXConstraintWidget_addAnchors(self);
}

ADXConstraintWidget *new_ADXConstraintWidget_init() {
  J2OBJC_NEW_IMPL(ADXConstraintWidget, init)
}

ADXConstraintWidget *create_ADXConstraintWidget_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintWidget, init)
}

void ADXConstraintWidget_initWithNSString_(ADXConstraintWidget *self, NSString *debugName) {
  NSObject_init(self);
  self->measured_ = false;
  JreStrongAssignAndConsume(&self->run_, [IOSObjectArray newArrayWithLength:2 type:ADXWidgetRun_class_()]);
  JreStrongAssign(&self->horizontalRun_, nil);
  JreStrongAssign(&self->verticalRun_, nil);
  JreStrongAssignAndConsume(&self->isTerminalWidget_, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true } count:2]);
  self->mResolvedHasRatio_ = false;
  self->mMeasureRequested_ = true;
  self->OPTIMIZE_WRAP_ = false;
  self->OPTIMIZE_WRAP_ON_RESOLVED_ = true;
  self->mWidthOverride_ = -1;
  self->mHeightOverride_ = -1;
  JreStrongAssignAndConsume(&self->frame_, new_ADXWidgetFrame_initWithADXConstraintWidget_(self));
  self->resolvedHorizontal_ = false;
  self->resolvedVertical_ = false;
  self->horizontalSolvingPass_ = false;
  self->verticalSolvingPass_ = false;
  self->mHorizontalResolution_ = ADXConstraintWidget_UNKNOWN;
  self->mVerticalResolution_ = ADXConstraintWidget_UNKNOWN;
  self->mWrapBehaviorInParent_ = ADXConstraintWidget_WRAP_BEHAVIOR_INCLUDED;
  self->mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  self->mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  JreStrongAssignAndConsume(&self->mResolvedMatchConstraintDefault_, [IOSIntArray newArrayWithLength:2]);
  self->mMatchConstraintMinWidth_ = 0;
  self->mMatchConstraintMaxWidth_ = 0;
  self->mMatchConstraintPercentWidth_ = 1;
  self->mMatchConstraintMinHeight_ = 0;
  self->mMatchConstraintMaxHeight_ = 0;
  self->mMatchConstraintPercentHeight_ = 1;
  self->mResolvedDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  self->mResolvedDimensionRatio_ = 1.0f;
  JreStrongAssignAndConsume(&self->mMaxDimension_, [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE } count:2]);
  self->mCircleConstraintAngle_ = 0;
  self->hasBaseline_ = false;
  self->mInVirtualLayout_ = false;
  self->mLastHorizontalMeasureSpec_ = 0;
  self->mLastVerticalMeasureSpec_ = 0;
  JreStrongAssignAndConsume(&self->mLeft_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, LEFT)));
  JreStrongAssignAndConsume(&self->mTop_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, TOP)));
  JreStrongAssignAndConsume(&self->mRight_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)));
  JreStrongAssignAndConsume(&self->mBottom_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)));
  JreStrongAssignAndConsume(&self->mBaseline_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)));
  JreStrongAssignAndConsume(&self->mCenterX_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)));
  JreStrongAssignAndConsume(&self->mCenterY_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)));
  JreStrongAssignAndConsume(&self->mCenter_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER)));
  JreStrongAssignAndConsume(&self->mListAnchors_, [IOSObjectArray newArrayWithObjects:(id[]){ self->mLeft_, self->mRight_, self->mTop_, self->mBottom_, self->mBaseline_, self->mCenter_ } count:6 type:ADXConstraintAnchor_class_()]);
  JreStrongAssignAndConsume(&self->mAnchors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mIsInBarrier_, [IOSBooleanArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mListDimensionBehaviors_, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) } count:2 type:ADXConstraintWidget_DimensionBehaviour_class_()]);
  self->mParent_ = nil;
  self->mWidth_ = 0;
  self->mHeight_ = 0;
  self->mDimensionRatio_ = 0;
  self->mDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  self->mX_ = 0;
  self->mY_ = 0;
  self->mRelX_ = 0;
  self->mRelY_ = 0;
  self->mOffsetX_ = 0;
  self->mOffsetY_ = 0;
  self->mBaselineDistance_ = 0;
  self->mHorizontalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  self->mVerticalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  self->mContainerItemSkip_ = 0;
  self->mVisibility_ = ADXConstraintWidget_VISIBLE;
  JreStrongAssign(&self->mDebugName_, nil);
  JreStrongAssign(&self->mType_, nil);
  self->mGroupsToSolver_ = false;
  self->mHorizontalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  self->mVerticalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  JreStrongAssignAndConsume(&self->mWeight_, [IOSFloatArray newArrayWithFloats:(jfloat[]){ ADXConstraintWidget_UNKNOWN, ADXConstraintWidget_UNKNOWN } count:2]);
  JreStrongAssignAndConsume(&self->mListNextMatchConstraintsWidget_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:ADXConstraintWidget_class_()]);
  JreStrongAssignAndConsume(&self->mNextChainWidget_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:ADXConstraintWidget_class_()]);
  JreStrongAssign(&self->mHorizontalNextWidget_, nil);
  JreStrongAssign(&self->mVerticalNextWidget_, nil);
  self->horizontalGroup_ = -1;
  self->verticalGroup_ = -1;
  ADXConstraintWidget_addAnchors(self);
  [self setDebugNameWithNSString:debugName];
}

ADXConstraintWidget *new_ADXConstraintWidget_initWithNSString_(NSString *debugName) {
  J2OBJC_NEW_IMPL(ADXConstraintWidget, initWithNSString_, debugName)
}

ADXConstraintWidget *create_ADXConstraintWidget_initWithNSString_(NSString *debugName) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidget, initWithNSString_, debugName)
}

void ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(ADXConstraintWidget *self, jint x, jint y, jint width, jint height) {
  NSObject_init(self);
  self->measured_ = false;
  JreStrongAssignAndConsume(&self->run_, [IOSObjectArray newArrayWithLength:2 type:ADXWidgetRun_class_()]);
  JreStrongAssign(&self->horizontalRun_, nil);
  JreStrongAssign(&self->verticalRun_, nil);
  JreStrongAssignAndConsume(&self->isTerminalWidget_, [IOSBooleanArray newArrayWithBooleans:(jboolean[]){ true, true } count:2]);
  self->mResolvedHasRatio_ = false;
  self->mMeasureRequested_ = true;
  self->OPTIMIZE_WRAP_ = false;
  self->OPTIMIZE_WRAP_ON_RESOLVED_ = true;
  self->mWidthOverride_ = -1;
  self->mHeightOverride_ = -1;
  JreStrongAssignAndConsume(&self->frame_, new_ADXWidgetFrame_initWithADXConstraintWidget_(self));
  self->resolvedHorizontal_ = false;
  self->resolvedVertical_ = false;
  self->horizontalSolvingPass_ = false;
  self->verticalSolvingPass_ = false;
  self->mHorizontalResolution_ = ADXConstraintWidget_UNKNOWN;
  self->mVerticalResolution_ = ADXConstraintWidget_UNKNOWN;
  self->mWrapBehaviorInParent_ = ADXConstraintWidget_WRAP_BEHAVIOR_INCLUDED;
  self->mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  self->mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
  JreStrongAssignAndConsume(&self->mResolvedMatchConstraintDefault_, [IOSIntArray newArrayWithLength:2]);
  self->mMatchConstraintMinWidth_ = 0;
  self->mMatchConstraintMaxWidth_ = 0;
  self->mMatchConstraintPercentWidth_ = 1;
  self->mMatchConstraintMinHeight_ = 0;
  self->mMatchConstraintMaxHeight_ = 0;
  self->mMatchConstraintPercentHeight_ = 1;
  self->mResolvedDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  self->mResolvedDimensionRatio_ = 1.0f;
  JreStrongAssignAndConsume(&self->mMaxDimension_, [IOSIntArray newArrayWithInts:(jint[]){ JavaLangInteger_MAX_VALUE, JavaLangInteger_MAX_VALUE } count:2]);
  self->mCircleConstraintAngle_ = 0;
  self->hasBaseline_ = false;
  self->mInVirtualLayout_ = false;
  self->mLastHorizontalMeasureSpec_ = 0;
  self->mLastVerticalMeasureSpec_ = 0;
  JreStrongAssignAndConsume(&self->mLeft_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, LEFT)));
  JreStrongAssignAndConsume(&self->mTop_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, TOP)));
  JreStrongAssignAndConsume(&self->mRight_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)));
  JreStrongAssignAndConsume(&self->mBottom_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)));
  JreStrongAssignAndConsume(&self->mBaseline_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)));
  JreStrongAssignAndConsume(&self->mCenterX_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER_X)));
  JreStrongAssignAndConsume(&self->mCenterY_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER_Y)));
  JreStrongAssignAndConsume(&self->mCenter_, new_ADXConstraintAnchor_initWithADXConstraintWidget_withADXConstraintAnchor_Type_(self, JreLoadEnum(ADXConstraintAnchor_Type, CENTER)));
  JreStrongAssignAndConsume(&self->mListAnchors_, [IOSObjectArray newArrayWithObjects:(id[]){ self->mLeft_, self->mRight_, self->mTop_, self->mBottom_, self->mBaseline_, self->mCenter_ } count:6 type:ADXConstraintAnchor_class_()]);
  JreStrongAssignAndConsume(&self->mAnchors_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mIsInBarrier_, [IOSBooleanArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mListDimensionBehaviors_, [IOSObjectArray newArrayWithObjects:(id[]){ JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) } count:2 type:ADXConstraintWidget_DimensionBehaviour_class_()]);
  self->mParent_ = nil;
  self->mWidth_ = 0;
  self->mHeight_ = 0;
  self->mDimensionRatio_ = 0;
  self->mDimensionRatioSide_ = ADXConstraintWidget_UNKNOWN;
  self->mX_ = 0;
  self->mY_ = 0;
  self->mRelX_ = 0;
  self->mRelY_ = 0;
  self->mOffsetX_ = 0;
  self->mOffsetY_ = 0;
  self->mBaselineDistance_ = 0;
  self->mHorizontalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  self->mVerticalBiasPercent_ = ADXConstraintWidget_DEFAULT_BIAS;
  self->mContainerItemSkip_ = 0;
  self->mVisibility_ = ADXConstraintWidget_VISIBLE;
  JreStrongAssign(&self->mDebugName_, nil);
  JreStrongAssign(&self->mType_, nil);
  self->mGroupsToSolver_ = false;
  self->mHorizontalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  self->mVerticalChainStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
  JreStrongAssignAndConsume(&self->mWeight_, [IOSFloatArray newArrayWithFloats:(jfloat[]){ ADXConstraintWidget_UNKNOWN, ADXConstraintWidget_UNKNOWN } count:2]);
  JreStrongAssignAndConsume(&self->mListNextMatchConstraintsWidget_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:ADXConstraintWidget_class_()]);
  JreStrongAssignAndConsume(&self->mNextChainWidget_, [IOSObjectArray newArrayWithObjects:(id[]){ nil, nil } count:2 type:ADXConstraintWidget_class_()]);
  JreStrongAssign(&self->mHorizontalNextWidget_, nil);
  JreStrongAssign(&self->mVerticalNextWidget_, nil);
  self->horizontalGroup_ = -1;
  self->verticalGroup_ = -1;
  self->mX_ = x;
  self->mY_ = y;
  self->mWidth_ = width;
  self->mHeight_ = height;
  ADXConstraintWidget_addAnchors(self);
}

ADXConstraintWidget *new_ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidget, initWithInt_withInt_withInt_withInt_, x, y, width, height)
}

ADXConstraintWidget *create_ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidget, initWithInt_withInt_withInt_withInt_, x, y, width, height)
}

void ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(ADXConstraintWidget *self, NSString *debugName, jint x, jint y, jint width, jint height) {
  ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(self, x, y, width, height);
  [self setDebugNameWithNSString:debugName];
}

ADXConstraintWidget *new_ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(NSString *debugName, jint x, jint y, jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidget, initWithNSString_withInt_withInt_withInt_withInt_, debugName, x, y, width, height)
}

ADXConstraintWidget *create_ADXConstraintWidget_initWithNSString_withInt_withInt_withInt_withInt_(NSString *debugName, jint x, jint y, jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidget, initWithNSString_withInt_withInt_withInt_withInt_, debugName, x, y, width, height)
}

void ADXConstraintWidget_initWithInt_withInt_(ADXConstraintWidget *self, jint width, jint height) {
  ADXConstraintWidget_initWithInt_withInt_withInt_withInt_(self, 0, 0, width, height);
}

ADXConstraintWidget *new_ADXConstraintWidget_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidget, initWithInt_withInt_, width, height)
}

ADXConstraintWidget *create_ADXConstraintWidget_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidget, initWithInt_withInt_, width, height)
}

void ADXConstraintWidget_initWithNSString_withInt_withInt_(ADXConstraintWidget *self, NSString *debugName, jint width, jint height) {
  ADXConstraintWidget_initWithInt_withInt_(self, width, height);
  [self setDebugNameWithNSString:debugName];
}

ADXConstraintWidget *new_ADXConstraintWidget_initWithNSString_withInt_withInt_(NSString *debugName, jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidget, initWithNSString_withInt_withInt_, debugName, width, height)
}

ADXConstraintWidget *create_ADXConstraintWidget_initWithNSString_withInt_withInt_(NSString *debugName, jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidget, initWithNSString_withInt_withInt_, debugName, width, height)
}

void ADXConstraintWidget_addAnchors(ADXConstraintWidget *self) {
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mLeft_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mTop_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mRight_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mBottom_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mCenterX_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mCenterY_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mCenter_];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mBaseline_];
}

jboolean ADXConstraintWidget_isChainHeadWithInt_(ADXConstraintWidget *self, jint orientation) {
  jint offset = orientation * 2;
  return (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(self->mListAnchors_), offset)))->mTarget_ != nil && ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(self->mListAnchors_, offset)))->mTarget_->mTarget_ != IOSObjectArray_Get(self->mListAnchors_, offset)) && (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(self->mListAnchors_, offset + 1)))->mTarget_ != nil && ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(self->mListAnchors_, offset + 1)))->mTarget_->mTarget_ == IOSObjectArray_Get(self->mListAnchors_, offset + 1));
}

void ADXConstraintWidget_applyConstraintsWithADXLinearSystem_withBoolean_withBoolean_withBoolean_withBoolean_withADXSolverVariable_withADXSolverVariable_withADXConstraintWidget_DimensionBehaviour_withBoolean_withADXConstraintAnchor_withADXConstraintAnchor_withInt_withInt_withInt_withInt_withFloat_withBoolean_withBoolean_withBoolean_withBoolean_withBoolean_withInt_withInt_withInt_withInt_withFloat_withBoolean_(ADXConstraintWidget *self, ADXLinearSystem *system, jboolean isHorizontal, jboolean parentWrapContent, jboolean oppositeParentWrapContent, jboolean isTerminal, ADXSolverVariable *parentMin, ADXSolverVariable *parentMax, ADXConstraintWidget_DimensionBehaviour *dimensionBehaviour, jboolean wrapContent, ADXConstraintAnchor *beginAnchor, ADXConstraintAnchor *endAnchor, jint beginPosition, jint dimension, jint minDimension, jint maxDimension, jfloat bias, jboolean useRatio, jboolean oppositeVariable, jboolean inChain, jboolean oppositeInChain, jboolean inBarrier, jint matchConstraintDefault, jint oppositeMatchConstraintDefault, jint matchMinDimension, jint matchMaxDimension, jfloat matchPercentDimension, jboolean applyPosition) {
  ADXSolverVariable *begin = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:beginAnchor]);
  ADXSolverVariable *end = JreRetainedLocalValue([system createObjectVariableWithId:endAnchor]);
  ADXSolverVariable *beginTarget = JreRetainedLocalValue([system createObjectVariableWithId:[((ADXConstraintAnchor *) nil_chk(beginAnchor)) getTarget]]);
  ADXSolverVariable *endTarget = JreRetainedLocalValue([system createObjectVariableWithId:[((ADXConstraintAnchor *) nil_chk(endAnchor)) getTarget]]);
  if (ADXLinearSystem_getMetrics() != nil) {
    ((ADXMetrics *) nil_chk(ADXLinearSystem_getMetrics()))->nonresolvedWidgets_++;
  }
  jboolean isBeginConnected = [beginAnchor isConnected];
  jboolean isEndConnected = [endAnchor isConnected];
  jboolean isCenterConnected = [((ADXConstraintAnchor *) nil_chk(self->mCenter_)) isConnected];
  jboolean variableSize = false;
  jint numConnections = 0;
  if (isBeginConnected) {
    numConnections++;
  }
  if (isEndConnected) {
    numConnections++;
  }
  if (isCenterConnected) {
    numConnections++;
  }
  if (useRatio) {
    matchConstraintDefault = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
  }
  switch ([dimensionBehaviour ordinal]) {
    case ADXConstraintWidget_DimensionBehaviour_Enum_FIXED:
    {
      variableSize = false;
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_WRAP_CONTENT:
    {
      variableSize = false;
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_PARENT:
    {
      variableSize = false;
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_CONSTRAINT:
    {
      variableSize = (matchConstraintDefault != ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED);
    }
    break;
  }
  if (self->mWidthOverride_ != -1 && isHorizontal) {
    variableSize = false;
    dimension = self->mWidthOverride_;
    self->mWidthOverride_ = -1;
  }
  if (self->mHeightOverride_ != -1 && !isHorizontal) {
    variableSize = false;
    dimension = self->mHeightOverride_;
    self->mHeightOverride_ = -1;
  }
  if (self->mVisibility_ == ADXConstraintWidget_GONE) {
    dimension = 0;
    variableSize = false;
  }
  if (applyPosition) {
    if (!isBeginConnected && !isEndConnected && !isCenterConnected) {
      [system addEqualityWithADXSolverVariable:begin withInt:beginPosition];
    }
    else if (isBeginConnected && !isEndConnected) {
      [system addEqualityWithADXSolverVariable:begin withADXSolverVariable:beginTarget withInt:[beginAnchor getMargin] withInt:ADXSolverVariable_STRENGTH_FIXED];
    }
  }
  if (!variableSize) {
    if (wrapContent) {
      [system addEqualityWithADXSolverVariable:end withADXSolverVariable:begin withInt:0 withInt:ADXSolverVariable_STRENGTH_HIGH];
      if (minDimension > 0) {
        [system addGreaterThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:minDimension withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
      if (maxDimension < JavaLangInteger_MAX_VALUE) {
        [system addLowerThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:maxDimension withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
    }
    else {
      [system addEqualityWithADXSolverVariable:end withADXSolverVariable:begin withInt:dimension withInt:ADXSolverVariable_STRENGTH_FIXED];
    }
  }
  else {
    if (numConnections != 2 && !useRatio && ((matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) || (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD))) {
      variableSize = false;
      jint d = JavaLangMath_maxWithInt_withInt_(matchMinDimension, dimension);
      if (matchMaxDimension > 0) {
        d = JavaLangMath_minWithInt_withInt_(matchMaxDimension, d);
      }
      [system addEqualityWithADXSolverVariable:end withADXSolverVariable:begin withInt:d withInt:ADXSolverVariable_STRENGTH_FIXED];
    }
    else {
      if (matchMinDimension == ADXConstraintWidget_WRAP) {
        matchMinDimension = dimension;
      }
      if (matchMaxDimension == ADXConstraintWidget_WRAP) {
        matchMaxDimension = dimension;
      }
      if (dimension > 0 && matchConstraintDefault != ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
        dimension = 0;
      }
      if (matchMinDimension > 0) {
        [system addGreaterThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:matchMinDimension withInt:ADXSolverVariable_STRENGTH_FIXED];
        dimension = JavaLangMath_maxWithInt_withInt_(dimension, matchMinDimension);
      }
      if (matchMaxDimension > 0) {
        jboolean applyLimit = true;
        if (parentWrapContent && matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
          applyLimit = false;
        }
        if (applyLimit) {
          [system addLowerThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:matchMaxDimension withInt:ADXSolverVariable_STRENGTH_FIXED];
        }
        dimension = JavaLangMath_minWithInt_withInt_(dimension, matchMaxDimension);
      }
      if (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
        if (parentWrapContent) {
          [system addEqualityWithADXSolverVariable:end withADXSolverVariable:begin withInt:dimension withInt:ADXSolverVariable_STRENGTH_FIXED];
        }
        else if (inChain) {
          [system addEqualityWithADXSolverVariable:end withADXSolverVariable:begin withInt:dimension withInt:ADXSolverVariable_STRENGTH_EQUALITY];
          [system addLowerThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:dimension withInt:ADXSolverVariable_STRENGTH_FIXED];
        }
        else {
          [system addEqualityWithADXSolverVariable:end withADXSolverVariable:begin withInt:dimension withInt:ADXSolverVariable_STRENGTH_EQUALITY];
          [system addLowerThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:dimension withInt:ADXSolverVariable_STRENGTH_FIXED];
        }
      }
      else if (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT) {
        ADXSolverVariable *percentBegin = nil;
        ADXSolverVariable *percentEnd = nil;
        if ([beginAnchor getType] == JreLoadEnum(ADXConstraintAnchor_Type, TOP) || [beginAnchor getType] == JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)) {
          percentBegin = [system createObjectVariableWithId:[((ADXConstraintWidget *) nil_chk(self->mParent_)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]];
          percentEnd = [system createObjectVariableWithId:[((ADXConstraintWidget *) nil_chk(self->mParent_)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]];
        }
        else {
          percentBegin = [system createObjectVariableWithId:[((ADXConstraintWidget *) nil_chk(self->mParent_)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]];
          percentEnd = [system createObjectVariableWithId:[((ADXConstraintWidget *) nil_chk(self->mParent_)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]];
        }
        [system addConstraintWithADXArrayRow:[((ADXArrayRow *) nil_chk([system createRow])) createRowDimensionRatioWithADXSolverVariable:end withADXSolverVariable:begin withADXSolverVariable:percentEnd withADXSolverVariable:percentBegin withFloat:matchPercentDimension]];
        if (parentWrapContent) {
          variableSize = false;
        }
      }
      else {
        isTerminal = true;
      }
    }
  }
  if (!applyPosition || inChain) {
    if (numConnections < 2 && parentWrapContent && isTerminal) {
      [system addGreaterThanWithADXSolverVariable:begin withADXSolverVariable:parentMin withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
      jboolean applyEnd = isHorizontal || (((ADXConstraintAnchor *) nil_chk(self->mBaseline_))->mTarget_ == nil);
      if (!isHorizontal && ((ADXConstraintAnchor *) nil_chk(self->mBaseline_))->mTarget_ != nil) {
        ADXConstraintWidget *target = JreRetainedLocalValue(((ADXConstraintAnchor *) nil_chk(self->mBaseline_))->mTarget_->mOwner_);
        if (((ADXConstraintWidget *) nil_chk(target))->mDimensionRatio_ != 0 && IOSObjectArray_Get(nil_chk(target->mListDimensionBehaviors_), 0) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && IOSObjectArray_Get(target->mListDimensionBehaviors_, 1) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
          applyEnd = true;
        }
        else {
          applyEnd = false;
        }
      }
      if (applyEnd) {
        [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:end withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
    }
    return;
  }
  jint wrapStrength = ADXSolverVariable_STRENGTH_EQUALITY;
  if (!isBeginConnected && !isEndConnected && !isCenterConnected) {
  }
  else if (isBeginConnected && !isEndConnected) {
    ADXConstraintWidget *beginWidget = JreRetainedLocalValue(((ADXConstraintAnchor *) nil_chk(beginAnchor->mTarget_))->mOwner_);
    if (parentWrapContent && [beginWidget isKindOfClass:[ADXCoreBarrier class]]) {
      wrapStrength = ADXSolverVariable_STRENGTH_FIXED;
    }
  }
  else if (!isBeginConnected && isEndConnected) {
    [system addEqualityWithADXSolverVariable:end withADXSolverVariable:endTarget withInt:-[endAnchor getMargin] withInt:ADXSolverVariable_STRENGTH_FIXED];
    if (parentWrapContent) {
      if (self->OPTIMIZE_WRAP_ && ((ADXSolverVariable *) nil_chk(begin))->isFinalValue_ && self->mParent_ != nil) {
        ADXConstraintWidgetContainer *container = (ADXConstraintWidgetContainer *) cast_chk(self->mParent_, [ADXConstraintWidgetContainer class]);
        if (isHorizontal) {
          [container addHorizontalWrapMinVariableWithADXConstraintAnchor:beginAnchor];
        }
        else {
          [container addVerticalWrapMinVariableWithADXConstraintAnchor:beginAnchor];
        }
      }
      else {
        [system addGreaterThanWithADXSolverVariable:begin withADXSolverVariable:parentMin withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
      }
    }
  }
  else if (isBeginConnected && isEndConnected) {
    jboolean applyBoundsCheck = true;
    jboolean applyCentering = false;
    jboolean applyStrongChecks = false;
    jboolean applyRangeCheck = false;
    jint rangeCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
    jint boundsCheckStrength = ADXSolverVariable_STRENGTH_HIGHEST;
    jint centeringStrength = ADXSolverVariable_STRENGTH_BARRIER;
    if (parentWrapContent) {
      rangeCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
    }
    ADXConstraintWidget *beginWidget = JreRetainedLocalValue(((ADXConstraintAnchor *) nil_chk(beginAnchor->mTarget_))->mOwner_);
    ADXConstraintWidget *endWidget = JreRetainedLocalValue(endAnchor->mTarget_->mOwner_);
    ADXConstraintWidget *parent = JreRetainedLocalValue([self getParent]);
    if (variableSize) {
      if (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
        if (matchMaxDimension == 0 && matchMinDimension == 0) {
          applyStrongChecks = true;
          rangeCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
          boundsCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
          if (((ADXSolverVariable *) nil_chk(beginTarget))->isFinalValue_ && ((ADXSolverVariable *) nil_chk(endTarget))->isFinalValue_) {
            [system addEqualityWithADXSolverVariable:begin withADXSolverVariable:beginTarget withInt:[beginAnchor getMargin] withInt:ADXSolverVariable_STRENGTH_FIXED];
            [system addEqualityWithADXSolverVariable:end withADXSolverVariable:endTarget withInt:-[endAnchor getMargin] withInt:ADXSolverVariable_STRENGTH_FIXED];
            return;
          }
        }
        else {
          applyCentering = true;
          rangeCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
          boundsCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
          applyBoundsCheck = true;
          applyRangeCheck = true;
        }
        if ([beginWidget isKindOfClass:[ADXCoreBarrier class]] || [endWidget isKindOfClass:[ADXCoreBarrier class]]) {
          boundsCheckStrength = ADXSolverVariable_STRENGTH_HIGHEST;
        }
      }
      else if (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT) {
        applyCentering = true;
        rangeCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
        boundsCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
        applyBoundsCheck = true;
        applyRangeCheck = true;
        if ([beginWidget isKindOfClass:[ADXCoreBarrier class]] || [endWidget isKindOfClass:[ADXCoreBarrier class]]) {
          boundsCheckStrength = ADXSolverVariable_STRENGTH_HIGHEST;
        }
      }
      else if (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
        applyCentering = true;
        applyRangeCheck = true;
        rangeCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
      }
      else if (matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
        if (self->mResolvedDimensionRatioSide_ == ADXConstraintWidget_UNKNOWN) {
          applyCentering = true;
          applyRangeCheck = true;
          applyStrongChecks = true;
          rangeCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
          boundsCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
          if (oppositeInChain) {
            boundsCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
            centeringStrength = ADXSolverVariable_STRENGTH_HIGHEST;
            if (parentWrapContent) {
              centeringStrength = ADXSolverVariable_STRENGTH_EQUALITY;
            }
          }
          else {
            centeringStrength = ADXSolverVariable_STRENGTH_FIXED;
          }
        }
        else {
          applyCentering = true;
          applyRangeCheck = true;
          applyStrongChecks = true;
          if (useRatio) {
            jboolean otherSideInvariable = oppositeMatchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT || oppositeMatchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP;
            if (!otherSideInvariable) {
              rangeCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
              boundsCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
            }
          }
          else {
            rangeCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
            if (matchMaxDimension > 0) {
              boundsCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
            }
            else if (matchMaxDimension == 0 && matchMinDimension == 0) {
              if (!oppositeInChain) {
                boundsCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
              }
              else {
                if (beginWidget != parent && endWidget != parent) {
                  rangeCheckStrength = ADXSolverVariable_STRENGTH_HIGHEST;
                }
                else {
                  rangeCheckStrength = ADXSolverVariable_STRENGTH_EQUALITY;
                }
                boundsCheckStrength = ADXSolverVariable_STRENGTH_HIGHEST;
              }
            }
          }
        }
      }
    }
    else {
      applyCentering = true;
      applyRangeCheck = true;
      if (((ADXSolverVariable *) nil_chk(beginTarget))->isFinalValue_ && ((ADXSolverVariable *) nil_chk(endTarget))->isFinalValue_) {
        [system addCenteringWithADXSolverVariable:begin withADXSolverVariable:beginTarget withInt:[beginAnchor getMargin] withFloat:bias withADXSolverVariable:endTarget withADXSolverVariable:end withInt:[endAnchor getMargin] withInt:ADXSolverVariable_STRENGTH_FIXED];
        if (parentWrapContent && isTerminal) {
          jint margin = 0;
          if (endAnchor->mTarget_ != nil) {
            margin = [endAnchor getMargin];
          }
          if (endTarget != parentMax) {
            [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:end withInt:margin withInt:wrapStrength];
          }
        }
        return;
      }
    }
    if (applyRangeCheck && beginTarget == endTarget && beginWidget != parent) {
      applyRangeCheck = false;
      applyBoundsCheck = false;
    }
    if (applyCentering) {
      if (!variableSize && !oppositeVariable && !oppositeInChain && beginTarget == parentMin && endTarget == parentMax) {
        centeringStrength = ADXSolverVariable_STRENGTH_FIXED;
        rangeCheckStrength = ADXSolverVariable_STRENGTH_FIXED;
        applyBoundsCheck = false;
        parentWrapContent = false;
      }
      [system addCenteringWithADXSolverVariable:begin withADXSolverVariable:beginTarget withInt:[beginAnchor getMargin] withFloat:bias withADXSolverVariable:endTarget withADXSolverVariable:end withInt:[endAnchor getMargin] withInt:centeringStrength];
    }
    if (self->mVisibility_ == ADXConstraintWidget_GONE && ![endAnchor hasDependents]) {
      return;
    }
    if (applyRangeCheck) {
      if (parentWrapContent && beginTarget != endTarget && !variableSize) {
        if ([beginWidget isKindOfClass:[ADXCoreBarrier class]] || [endWidget isKindOfClass:[ADXCoreBarrier class]]) {
          rangeCheckStrength = ADXSolverVariable_STRENGTH_BARRIER;
        }
      }
      [system addGreaterThanWithADXSolverVariable:begin withADXSolverVariable:beginTarget withInt:[beginAnchor getMargin] withInt:rangeCheckStrength];
      [system addLowerThanWithADXSolverVariable:end withADXSolverVariable:endTarget withInt:-[endAnchor getMargin] withInt:rangeCheckStrength];
    }
    if (parentWrapContent && inBarrier && !([beginWidget isKindOfClass:[ADXCoreBarrier class]] || [endWidget isKindOfClass:[ADXCoreBarrier class]]) && !(endWidget == parent)) {
      boundsCheckStrength = ADXSolverVariable_STRENGTH_BARRIER;
      rangeCheckStrength = ADXSolverVariable_STRENGTH_BARRIER;
      applyBoundsCheck = true;
    }
    if (applyBoundsCheck) {
      if (applyStrongChecks && (!oppositeInChain || oppositeParentWrapContent)) {
        jint strength = boundsCheckStrength;
        if (beginWidget == parent || endWidget == parent) {
          strength = ADXSolverVariable_STRENGTH_BARRIER;
        }
        if ([beginWidget isKindOfClass:[ADXCoreGuideline class]] || [endWidget isKindOfClass:[ADXCoreGuideline class]]) {
          strength = ADXSolverVariable_STRENGTH_EQUALITY;
        }
        if ([beginWidget isKindOfClass:[ADXCoreBarrier class]] || [endWidget isKindOfClass:[ADXCoreBarrier class]]) {
          strength = ADXSolverVariable_STRENGTH_EQUALITY;
        }
        if (oppositeInChain) {
          strength = ADXSolverVariable_STRENGTH_EQUALITY;
        }
        boundsCheckStrength = JavaLangMath_maxWithInt_withInt_(strength, boundsCheckStrength);
      }
      if (parentWrapContent) {
        boundsCheckStrength = JavaLangMath_minWithInt_withInt_(rangeCheckStrength, boundsCheckStrength);
        if (useRatio && !oppositeInChain && (beginWidget == parent || endWidget == parent)) {
          boundsCheckStrength = ADXSolverVariable_STRENGTH_HIGHEST;
        }
      }
      [system addEqualityWithADXSolverVariable:begin withADXSolverVariable:beginTarget withInt:[beginAnchor getMargin] withInt:boundsCheckStrength];
      [system addEqualityWithADXSolverVariable:end withADXSolverVariable:endTarget withInt:-[endAnchor getMargin] withInt:boundsCheckStrength];
    }
    if (parentWrapContent) {
      jint margin = 0;
      if (parentMin == beginTarget) {
        margin = [beginAnchor getMargin];
      }
      if (beginTarget != parentMin) {
        [system addGreaterThanWithADXSolverVariable:begin withADXSolverVariable:parentMin withInt:margin withInt:wrapStrength];
      }
    }
    if (parentWrapContent && variableSize && minDimension == 0 && matchMinDimension == 0) {
      if (variableSize && matchConstraintDefault == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
        [system addGreaterThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:0 withInt:ADXSolverVariable_STRENGTH_FIXED];
      }
      else {
        [system addGreaterThanWithADXSolverVariable:end withADXSolverVariable:begin withInt:0 withInt:wrapStrength];
      }
    }
  }
  if (parentWrapContent && isTerminal) {
    jint margin = 0;
    if (endAnchor->mTarget_ != nil) {
      margin = [endAnchor getMargin];
    }
    if (endTarget != parentMax) {
      if (self->OPTIMIZE_WRAP_ && ((ADXSolverVariable *) nil_chk(end))->isFinalValue_ && self->mParent_ != nil) {
        ADXConstraintWidgetContainer *container = (ADXConstraintWidgetContainer *) cast_chk(self->mParent_, [ADXConstraintWidgetContainer class]);
        if (isHorizontal) {
          [container addHorizontalWrapMaxVariableWithADXConstraintAnchor:endAnchor];
        }
        else {
          [container addVerticalWrapMaxVariableWithADXConstraintAnchor:endAnchor];
        }
        return;
      }
      [system addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:end withInt:margin withInt:wrapStrength];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintWidget)

J2OBJC_INITIALIZED_DEFN(ADXConstraintWidget_DimensionBehaviour)

ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_values_[4];

@implementation ADXConstraintWidget_DimensionBehaviour

+ (IOSObjectArray *)values {
  return ADXConstraintWidget_DimensionBehaviour_values();
}

+ (ADXConstraintWidget_DimensionBehaviour *)valueOfWithNSString:(NSString *)name {
  return ADXConstraintWidget_DimensionBehaviour_valueOfWithNSString_(name);
}

- (ADXConstraintWidget_DimensionBehaviour_Enum)toNSEnum {
  return (ADXConstraintWidget_DimensionBehaviour_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXConstraintWidget_DimensionBehaviour;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget_DimensionBehaviour;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIXED", "LADXConstraintWidget_DimensionBehaviour;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "WRAP_CONTENT", "LADXConstraintWidget_DimensionBehaviour;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MATCH_CONSTRAINT", "LADXConstraintWidget_DimensionBehaviour;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "MATCH_PARENT", "LADXConstraintWidget_DimensionBehaviour;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), &JreEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), &JreEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT), &JreEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT), "LADXConstraintWidget;", "Ljava/lang/Enum<Landroidx/constraintlayout/core/widgets/ConstraintWidget$DimensionBehaviour;>;" };
  static const J2ObjcClassInfo _ADXConstraintWidget_DimensionBehaviour = { "DimensionBehaviour", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ADXConstraintWidget_DimensionBehaviour;
}

+ (void)initialize {
  if (self == [ADXConstraintWidget_DimensionBehaviour class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(ADXConstraintWidget_DimensionBehaviour_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXConstraintWidget_DimensionBehaviour_initWithNSString_withInt_(e, JreEnumConstantName(ADXConstraintWidget_DimensionBehaviour_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXConstraintWidget_DimensionBehaviour)
  }
}

@end

void ADXConstraintWidget_DimensionBehaviour_initWithNSString_withInt_(ADXConstraintWidget_DimensionBehaviour *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXConstraintWidget_DimensionBehaviour_values() {
  ADXConstraintWidget_DimensionBehaviour_initialize();
  return [IOSObjectArray arrayWithObjects:ADXConstraintWidget_DimensionBehaviour_values_ count:4 type:ADXConstraintWidget_DimensionBehaviour_class_()];
}

ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_valueOfWithNSString_(NSString *name) {
  ADXConstraintWidget_DimensionBehaviour_initialize();
  for (int i = 0; i < 4; i++) {
    ADXConstraintWidget_DimensionBehaviour *e = ADXConstraintWidget_DimensionBehaviour_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXConstraintWidget_DimensionBehaviour *ADXConstraintWidget_DimensionBehaviour_fromOrdinal(NSUInteger ordinal) {
  ADXConstraintWidget_DimensionBehaviour_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ADXConstraintWidget_DimensionBehaviour_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintWidget_DimensionBehaviour)
