//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\model\ModelExpressionParser.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ModelDataType.h"
#include "ModelExpressionParser.h"
#include "ModelScope.h"
#include "java/io/PrintStream.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class JavaUtilRegexPattern;
@protocol JavaUtilList;


@interface ASModelExpressionParser ()

+ (id<JavaUtilList>)evelRegExWithNSString:(NSString *)expression
                 withJavaUtilRegexPattern:(JavaUtilRegexPattern *)regEx
                             withNSString:(NSString *)message;

@end

inline JavaUtilRegexPattern *ASModelExpressionParser_get_VAR_REGEX(void);
static JavaUtilRegexPattern *ASModelExpressionParser_VAR_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, VAR_REGEX, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_LOOP_REGEX(void);
static JavaUtilRegexPattern *ASModelExpressionParser_LOOP_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, LOOP_REGEX, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_UISET_FROMMODEL_REGEX(void);
static JavaUtilRegexPattern *ASModelExpressionParser_UISET_FROMMODEL_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, UISET_FROMMODEL_REGEX, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_MODELSET_FROMUI_REGEX(void);
static JavaUtilRegexPattern *ASModelExpressionParser_MODELSET_FROMUI_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, MODELSET_FROMUI_REGEX, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_EVENT_VAR_EXPRESSION(void);
static JavaUtilRegexPattern *ASModelExpressionParser_EVENT_VAR_EXPRESSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, EVENT_VAR_EXPRESSION, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_MODEL_FROM_SCOPE_EXPRESSION(void);
static JavaUtilRegexPattern *ASModelExpressionParser_MODEL_FROM_SCOPE_EXPRESSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, MODEL_FROM_SCOPE_EXPRESSION, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_MODEL_UPDATE_TO_SCOPE_EXPRESSION(void);
static JavaUtilRegexPattern *ASModelExpressionParser_MODEL_UPDATE_TO_SCOPE_EXPRESSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, MODEL_UPDATE_TO_SCOPE_EXPRESSION, JavaUtilRegexPattern *)

inline JavaUtilRegexPattern *ASModelExpressionParser_get_VAR_SET_STORE_REGEX(void);
static JavaUtilRegexPattern *ASModelExpressionParser_VAR_SET_STORE_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASModelExpressionParser, VAR_SET_STORE_REGEX, JavaUtilRegexPattern *)

__attribute__((unused)) static id<JavaUtilList> ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(NSString *expression, JavaUtilRegexPattern *regEx, NSString *message);

J2OBJC_INITIALIZED_DEFN(ASModelExpressionParser)

@implementation ASModelExpressionParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASModelExpressionParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (id<JavaUtilList>)parseEventExpressionWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseEventExpressionWithNSString_(expression);
}

+ (ASModelExpressionParser_ModelFromScopeHolder *)parseModelFromScopeWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseModelFromScopeWithNSString_(expression);
}

+ (id<JavaUtilList>)parsePojoToUiExpressionWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parsePojoToUiExpressionWithNSString_(expression);
}

+ (id<JavaUtilList>)parseUiToPojoExpressionWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseUiToPojoExpressionWithNSString_(expression);
}

+ (ASModelExpressionParser_ModelStoreVarHolder *)parseModelStoreVarExpressionWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseModelStoreVarExpressionWithNSString_(expression);
}

+ (id<JavaUtilList>)parseModelVarExpressionWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseModelVarExpressionWithNSString_(expression);
}

+ (ASModelExpressionParser_ModelLoopHolder *)parseModelLoopExpressionWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseModelLoopExpressionWithNSString_(expression);
}

+ (id<JavaUtilList>)evelRegExWithNSString:(NSString *)expression
                 withJavaUtilRegexPattern:(JavaUtilRegexPattern *)regEx
                             withNSString:(NSString *)message {
  return ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(expression, regEx, message);
}

+ (ASModelExpressionParser_ModelUpdateToScopeHolder *)parseModelUpdateToScopeWithNSString:(NSString *)expression {
  return ASModelExpressionParser_parseModelUpdateToScopeWithNSString_(expression);
}

+ (id<JavaUtilMap>)parseSimpleCssExpressionWithNSString:(NSString *)cssStr {
  return ASModelExpressionParser_parseSimpleCssExpressionWithNSString_(cssStr);
}

+ (id<JavaUtilMap>)parseSimpleCssExpressionWithNSString:(NSString *)cssStr
                                        withJavaUtilMap:(id<JavaUtilMap>)params {
  return ASModelExpressionParser_parseSimpleCssExpressionWithNSString_withJavaUtilMap_(cssStr, params);
}

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  ASModelExpressionParser_mainWithNSStringArray_(args);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 0, 1, -1, 2, -1, -1 },
    { NULL, "LASModelExpressionParser_ModelFromScopeHolder;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 4, 1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 6, 1, -1, 7, -1, -1 },
    { NULL, "LASModelExpressionParser_ModelStoreVarHolder;", 0x9, 8, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 9, 1, -1, 10, -1, -1 },
    { NULL, "LASModelExpressionParser_ModelLoopHolder;", 0x9, 11, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0xa, 12, 13, -1, 14, -1, -1 },
    { NULL, "LASModelExpressionParser_ModelUpdateToScopeHolder;", 0x9, 15, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 16, 1, -1, 17, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x9, 16, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x9, 20, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(parseEventExpressionWithNSString:);
  methods[2].selector = @selector(parseModelFromScopeWithNSString:);
  methods[3].selector = @selector(parsePojoToUiExpressionWithNSString:);
  methods[4].selector = @selector(parseUiToPojoExpressionWithNSString:);
  methods[5].selector = @selector(parseModelStoreVarExpressionWithNSString:);
  methods[6].selector = @selector(parseModelVarExpressionWithNSString:);
  methods[7].selector = @selector(parseModelLoopExpressionWithNSString:);
  methods[8].selector = @selector(evelRegExWithNSString:withJavaUtilRegexPattern:withNSString:);
  methods[9].selector = @selector(parseModelUpdateToScopeWithNSString:);
  methods[10].selector = @selector(parseSimpleCssExpressionWithNSString:);
  methods[11].selector = @selector(parseSimpleCssExpressionWithNSString:withJavaUtilMap:);
  methods[12].selector = @selector(mainWithNSStringArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VAR_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 22, -1, -1 },
    { "LOOP_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "UISET_FROMMODEL_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 24, -1, -1 },
    { "MODELSET_FROMUI_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 25, -1, -1 },
    { "EVENT_VAR_EXPRESSION", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 26, -1, -1 },
    { "MODEL_FROM_SCOPE_EXPRESSION", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 27, -1, -1 },
    { "MODEL_UPDATE_TO_SCOPE_EXPRESSION", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "VAR_SET_STORE_REGEX", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
  };
  static const void *ptrTable[] = { "parseEventExpression", "LNSString;", "(Ljava/lang/String;)Ljava/util/List<Lcom/ashera/model/ModelExpressionParser$ModelEventHolder;>;", "parseModelFromScope", "parsePojoToUiExpression", "(Ljava/lang/String;)Ljava/util/List<Lcom/ashera/model/ModelExpressionParser$ModelPojoToUiHolder;>;", "parseUiToPojoExpression", "(Ljava/lang/String;)Ljava/util/List<Lcom/ashera/model/ModelExpressionParser$ModelUiToPojoHolder;>;", "parseModelStoreVarExpression", "parseModelVarExpression", "(Ljava/lang/String;)Ljava/util/List<Lcom/ashera/model/ModelExpressionParser$ModelVarHolder;>;", "parseModelLoopExpression", "evelRegEx", "LNSString;LJavaUtilRegexPattern;LNSString;", "(Ljava/lang/String;Ljava/util/regex/Pattern;Ljava/lang/String;)Ljava/util/List<Ljava/lang/String;>;", "parseModelUpdateToScope", "parseSimpleCssExpression", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "main", "[LNSString;", &ASModelExpressionParser_VAR_REGEX, &ASModelExpressionParser_LOOP_REGEX, &ASModelExpressionParser_UISET_FROMMODEL_REGEX, &ASModelExpressionParser_MODELSET_FROMUI_REGEX, &ASModelExpressionParser_EVENT_VAR_EXPRESSION, &ASModelExpressionParser_MODEL_FROM_SCOPE_EXPRESSION, &ASModelExpressionParser_MODEL_UPDATE_TO_SCOPE_EXPRESSION, &ASModelExpressionParser_VAR_SET_STORE_REGEX, "LASModelExpressionParser_ModelEventHolder;LASModelExpressionParser_ModelFromScopeHolder;LASModelExpressionParser_ModelPojoToUiHolder;LASModelExpressionParser_ModelUiToPojoHolder;LASModelExpressionParser_ModelStoreVarHolder;LASModelExpressionParser_ModelVarHolder;LASModelExpressionParser_ModelLoopHolder;LASModelExpressionParser_ModelUpdateToScopeHolder;" };
  static const J2ObjcClassInfo _ASModelExpressionParser = { "ModelExpressionParser", "com.ashera.model", ptrTable, methods, fields, 7, 0x1, 13, 8, -1, 30, -1, -1, -1 };
  return &_ASModelExpressionParser;
}

+ (void)initialize {
  if (self == [ASModelExpressionParser class]) {
    JreStrongAssign(&ASModelExpressionParser_VAR_REGEX, JavaUtilRegexPattern_compileWithNSString_(@"let\\s*(\\w+)\\s*=\\s*([\\w\\.\\[\\]]+)\\s*from\\s*(\\w+)\\s*\\->(\\w+)\\s*into\\s*(\\w+)\\s*as\\s*(\\w+)\\s*"));
    JreStrongAssign(&ASModelExpressionParser_LOOP_REGEX, JavaUtilRegexPattern_compileWithNSString_(@"let\\s*(\\w+)\\s*in\\s*([\\w\\.\\[\\]]+)\\s*from\\s*(\\w+)\\s*\\->(\\w+)\\s*into\\s*(\\w+)\\s*as\\s*(\\w+)\\s*"));
    JreStrongAssign(&ASModelExpressionParser_UISET_FROMMODEL_REGEX, JavaUtilRegexPattern_compileWithNSString_(@"\\s*(\\w+)\\s*=\\s*(\\w*\\()?([\\w\\.\\[\\]]+)\\)?\\s*from\\s*(\\w+)\\s*\\->(\\w+)\\s*"));
    JreStrongAssign(&ASModelExpressionParser_MODELSET_FROMUI_REGEX, JavaUtilRegexPattern_compileWithNSString_(@"\\s*([\\w\\.]+)\\s*=\\s*([\\w\\.\\[\\]]+)\\s*into\\s*(\\w+)\\s*\\->(\\w+)\\s*(as\\s*(\\w+)\\s*)?"));
    JreStrongAssign(&ASModelExpressionParser_EVENT_VAR_EXPRESSION, JavaUtilRegexPattern_compileWithNSString_(@"\\s*(\\w+)\\s*=\\s*(\\w*\\{)?([\\w\\.\\[\\]]+)\\}?\\s*from\\s*(\\w+)\\s*\\->(\\w+)\\s*"));
    JreStrongAssign(&ASModelExpressionParser_MODEL_FROM_SCOPE_EXPRESSION, JavaUtilRegexPattern_compileWithNSString_(@"\\s*([\\w\\.\\[\\]]+)\\s*from\\s*(\\w+)\\s*\\->(\\w+)\\s*"));
    JreStrongAssign(&ASModelExpressionParser_MODEL_UPDATE_TO_SCOPE_EXPRESSION, JavaUtilRegexPattern_compileWithNSString_(@"\\s*([\\w\\.\\[\\]]+)\\s*into\\s*(\\w+)\\s*\\->(\\w+)\\s*(as\\s*(\\w+)\\s*)?"));
    JreStrongAssign(&ASModelExpressionParser_VAR_SET_STORE_REGEX, JavaUtilRegexPattern_compileWithNSString_(@"\\s*(\\w+)\\s*\\->(\\w+)\\s*as\\s*(\\w+)\\s*"));
    J2OBJC_SET_INITIALIZED(ASModelExpressionParser)
  }
}

@end

void ASModelExpressionParser_init(ASModelExpressionParser *self) {
  NSObject_init(self);
}

ASModelExpressionParser *new_ASModelExpressionParser_init() {
  J2OBJC_NEW_IMPL(ASModelExpressionParser, init)
}

ASModelExpressionParser *create_ASModelExpressionParser_init() {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser, init)
}

id<JavaUtilList> ASModelExpressionParser_parseEventExpressionWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  IOSObjectArray *varParams = [((NSString *) nil_chk(expression)) java_split:@","];
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = varParams;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *varParam = *b__++;
      [result addWithId:create_ASModelExpressionParser_ModelEventHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(varParam, ASModelExpressionParser_EVENT_VAR_EXPRESSION, @"Invalid expression. e.g. y=z from z->view"))];
    }
  }
  return result;
}

ASModelExpressionParser_ModelFromScopeHolder *ASModelExpressionParser_parseModelFromScopeWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  return create_ASModelExpressionParser_ModelFromScopeHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(expression, ASModelExpressionParser_MODEL_FROM_SCOPE_EXPRESSION, @"Invalid expression. e.g. z from z->view"));
}

id<JavaUtilList> ASModelExpressionParser_parsePojoToUiExpressionWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  IOSObjectArray *varParams = [((NSString *) nil_chk(expression)) java_split:@";"];
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = varParams;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *varParam = *b__++;
      [result addWithId:create_ASModelExpressionParser_ModelPojoToUiHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(varParam, ASModelExpressionParser_UISET_FROMMODEL_REGEX, @"Invalid expression. e.g. text=abcd from x->view"))];
    }
  }
  return result;
}

id<JavaUtilList> ASModelExpressionParser_parseUiToPojoExpressionWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  IOSObjectArray *varParams = [((NSString *) nil_chk(expression)) java_split:@";"];
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = varParams;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *varParam = *b__++;
      [result addWithId:create_ASModelExpressionParser_ModelUiToPojoHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(varParam, ASModelExpressionParser_MODELSET_FROMUI_REGEX, @"Invalid expression. e.g. abcd=text into x->view as boolean"))];
    }
  }
  return result;
}

ASModelExpressionParser_ModelStoreVarHolder *ASModelExpressionParser_parseModelStoreVarExpressionWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  return create_ASModelExpressionParser_ModelStoreVarHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(expression, ASModelExpressionParser_VAR_SET_STORE_REGEX, @"Invalid expression. e.g. y->intent as pathmap"));
}

id<JavaUtilList> ASModelExpressionParser_parseModelVarExpressionWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  IOSObjectArray *varParams = [((NSString *) nil_chk(expression)) java_split:@";"];
  id<JavaUtilList> result = create_JavaUtilArrayList_init();
  {
    IOSObjectArray *a__ = varParams;
    NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    NSString * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      NSString *varParam = *b__++;
      [result addWithId:create_ASModelExpressionParser_ModelVarHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(varParam, ASModelExpressionParser_VAR_REGEX, @"Invalid expression. e.g. let x = . from y->view into session as pathmap"))];
    }
  }
  return result;
}

ASModelExpressionParser_ModelLoopHolder *ASModelExpressionParser_parseModelLoopExpressionWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  return create_ASModelExpressionParser_ModelLoopHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(expression, ASModelExpressionParser_LOOP_REGEX, @"Invalid expression. e.g. let x in y[0] from y->view into session as pathmap"));
}

id<JavaUtilList> ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(NSString *expression, JavaUtilRegexPattern *regEx, NSString *message) {
  ASModelExpressionParser_initialize();
  JavaUtilRegexMatcher *m = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(regEx)) matcherWithJavaLangCharSequence:expression]);
  jboolean b = [((JavaUtilRegexMatcher *) nil_chk(m)) matches];
  id<JavaUtilList> groups = create_JavaUtilArrayList_init();
  if (b) {
    for (jint i = 1; i <= [m groupCount]; i++) {
      [groups addWithId:[m groupWithInt:i]];
    }
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$$", message, @" : ", expression));
  }
  return groups;
}

ASModelExpressionParser_ModelUpdateToScopeHolder *ASModelExpressionParser_parseModelUpdateToScopeWithNSString_(NSString *expression) {
  ASModelExpressionParser_initialize();
  return create_ASModelExpressionParser_ModelUpdateToScopeHolder_initWithJavaUtilList_(ASModelExpressionParser_evelRegExWithNSString_withJavaUtilRegexPattern_withNSString_(expression, ASModelExpressionParser_MODEL_UPDATE_TO_SCOPE_EXPRESSION, @"Invalid expression. e.g. flag into map->view as boolean"));
}

id<JavaUtilMap> ASModelExpressionParser_parseSimpleCssExpressionWithNSString_(NSString *cssStr) {
  ASModelExpressionParser_initialize();
  id<JavaUtilMap> params = create_JavaUtilHashMap_init();
  return ASModelExpressionParser_parseSimpleCssExpressionWithNSString_withJavaUtilMap_(cssStr, params);
}

id<JavaUtilMap> ASModelExpressionParser_parseSimpleCssExpressionWithNSString_withJavaUtilMap_(NSString *cssStr, id<JavaUtilMap> params) {
  ASModelExpressionParser_initialize();
  if (cssStr != nil && ![cssStr java_isEmpty]) {
    IOSObjectArray *attrs = [cssStr java_split:@";"];
    {
      IOSObjectArray *a__ = attrs;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *attr = *b__++;
        attr = [((NSString *) nil_chk(attr)) java_trim];
        IOSObjectArray *nameAndValue = [((NSString *) nil_chk(attr)) java_split:@"\\:"];
        NSString *key = IOSObjectArray_Get(nil_chk(nameAndValue), 0);
        NSString *value = nameAndValue->size_ <= 1 ? @"" : IOSObjectArray_Get(nameAndValue, 1);
        key = [((NSString *) nil_chk(key)) java_trim];
        value = [value java_trim];
        [((id<JavaUtilMap>) nil_chk(params)) putWithId:key withId:value];
      }
    }
  }
  return params;
}

void ASModelExpressionParser_mainWithNSStringArray_(IOSObjectArray *args) {
  ASModelExpressionParser_initialize();
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithId:((ASModelExpressionParser_ModelUiToPojoHolder *) nil_chk([((id<JavaUtilList>) nil_chk(ASModelExpressionParser_parseUiToPojoExpressionWithNSString_(@"abcd=text into x->view"))) getWithInt:0]))->varType_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser)

@implementation ASModelExpressionParser_ModelEventHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelEventHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varName_);
  RELEASE_(varPath_);
  RELEASE_(key_);
  RELEASE_(varScope_);
  RELEASE_(methodName_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "methodName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelEventHolder = { "ModelEventHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 5, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelEventHolder;
}

@end

void ASModelExpressionParser_ModelEventHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelEventHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->key_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->methodName_, [data getWithInt:1]);
  if (self->methodName_ != nil) {
    JreStrongAssign(&self->methodName_, [self->methodName_ java_replaceAll:@"\\{" withReplacement:@""]);
  }
  JreStrongAssign(&self->varPath_, [data getWithInt:2]);
  JreStrongAssign(&self->varName_, [data getWithInt:3]);
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:4]));
}

ASModelExpressionParser_ModelEventHolder *new_ASModelExpressionParser_ModelEventHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelEventHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelEventHolder *create_ASModelExpressionParser_ModelEventHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelEventHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelEventHolder)

@implementation ASModelExpressionParser_ModelFromScopeHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelFromScopeHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varName_);
  RELEASE_(varPath_);
  RELEASE_(varScope_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelFromScopeHolder = { "ModelFromScopeHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 3, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelFromScopeHolder;
}

@end

void ASModelExpressionParser_ModelFromScopeHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelFromScopeHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->varPath_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->varName_, [data getWithInt:1]);
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:2]));
}

ASModelExpressionParser_ModelFromScopeHolder *new_ASModelExpressionParser_ModelFromScopeHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelFromScopeHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelFromScopeHolder *create_ASModelExpressionParser_ModelFromScopeHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelFromScopeHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelFromScopeHolder)

@implementation ASModelExpressionParser_ModelPojoToUiHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelPojoToUiHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varPath_);
  RELEASE_(key_);
  RELEASE_(methodName_);
  RELEASE_(varScope_);
  RELEASE_(modelAttribute_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "methodName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "modelAttribute_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelPojoToUiHolder = { "ModelPojoToUiHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 5, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelPojoToUiHolder;
}

@end

void ASModelExpressionParser_ModelPojoToUiHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelPojoToUiHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->modelAttribute_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->methodName_, [data getWithInt:1]);
  if (self->methodName_ != nil) {
    JreStrongAssign(&self->methodName_, [self->methodName_ java_replaceAll:@"\\(" withReplacement:@""]);
  }
  JreStrongAssign(&self->varPath_, [data getWithInt:2]);
  JreStrongAssign(&self->key_, [data getWithInt:3]);
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:4]));
}

ASModelExpressionParser_ModelPojoToUiHolder *new_ASModelExpressionParser_ModelPojoToUiHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelPojoToUiHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelPojoToUiHolder *create_ASModelExpressionParser_ModelPojoToUiHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelPojoToUiHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelPojoToUiHolder)

@implementation ASModelExpressionParser_ModelUiToPojoHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelUiToPojoHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varPath_);
  RELEASE_(key_);
  RELEASE_(varScope_);
  RELEASE_(modelAttribute_);
  RELEASE_(varName_);
  RELEASE_(varType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "modelAttribute_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varType_", "LASModelDataType;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelUiToPojoHolder = { "ModelUiToPojoHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 6, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelUiToPojoHolder;
}

@end

void ASModelExpressionParser_ModelUiToPojoHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelUiToPojoHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->varPath_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->modelAttribute_, [data getWithInt:1]);
  JreStrongAssign(&self->varName_, [data getWithInt:2]);
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:3]));
  NSString *strVarType = JreRetainedLocalValue([data getWithInt:5]);
  if (strVarType != nil) {
    JreStrongAssign(&self->varType_, ASModelDataType_valueOfWithNSString_(strVarType));
  }
}

ASModelExpressionParser_ModelUiToPojoHolder *new_ASModelExpressionParser_ModelUiToPojoHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelUiToPojoHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelUiToPojoHolder *create_ASModelExpressionParser_ModelUiToPojoHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelUiToPojoHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelUiToPojoHolder)

@implementation ASModelExpressionParser_ModelStoreVarHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelStoreVarHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varName_);
  RELEASE_(varScope_);
  RELEASE_(varType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varType_", "LASModelDataType;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelStoreVarHolder = { "ModelStoreVarHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 3, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelStoreVarHolder;
}

@end

void ASModelExpressionParser_ModelStoreVarHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelStoreVarHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->varName_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:1]));
  NSString *strVarType = JreRetainedLocalValue([data getWithInt:2]);
  if (strVarType != nil) {
    JreStrongAssign(&self->varType_, ASModelDataType_valueOfWithNSString_(strVarType));
  }
}

ASModelExpressionParser_ModelStoreVarHolder *new_ASModelExpressionParser_ModelStoreVarHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelStoreVarHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelStoreVarHolder *create_ASModelExpressionParser_ModelStoreVarHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelStoreVarHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelStoreVarHolder)

@implementation ASModelExpressionParser_ModelVarHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelVarHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varName_);
  RELEASE_(varPath_);
  RELEASE_(key_);
  RELEASE_(varSource_);
  RELEASE_(varScope_);
  RELEASE_(dataType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varSource_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dataType_", "LASModelDataType;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelVarHolder = { "ModelVarHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 6, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelVarHolder;
}

@end

void ASModelExpressionParser_ModelVarHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelVarHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->varName_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->varPath_, [data getWithInt:1]);
  JreStrongAssign(&self->key_, [data getWithInt:2]);
  JreStrongAssign(&self->varSource_, ASModelScope_valueOfWithNSString_([data getWithInt:3]));
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:4]));
  JreStrongAssign(&self->dataType_, ASModelDataType_valueOfWithNSString_([data getWithInt:5]));
}

ASModelExpressionParser_ModelVarHolder *new_ASModelExpressionParser_ModelVarHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelVarHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelVarHolder *create_ASModelExpressionParser_ModelVarHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelVarHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelVarHolder)

@implementation ASModelExpressionParser_ModelLoopHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelLoopHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varName_);
  RELEASE_(varPath_);
  RELEASE_(key_);
  RELEASE_(varSource_);
  RELEASE_(varScope_);
  RELEASE_(dataType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varSource_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dataType_", "LASModelDataType;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelLoopHolder = { "ModelLoopHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 6, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelLoopHolder;
}

@end

void ASModelExpressionParser_ModelLoopHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelLoopHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->varName_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->varPath_, [data getWithInt:1]);
  JreStrongAssign(&self->key_, [data getWithInt:2]);
  JreStrongAssign(&self->varSource_, ASModelScope_valueOfWithNSString_([data getWithInt:3]));
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:4]));
  JreStrongAssign(&self->dataType_, ASModelDataType_valueOfWithNSString_([data getWithInt:5]));
}

ASModelExpressionParser_ModelLoopHolder *new_ASModelExpressionParser_ModelLoopHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelLoopHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelLoopHolder *create_ASModelExpressionParser_ModelLoopHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelLoopHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelLoopHolder)

@implementation ASModelExpressionParser_ModelUpdateToScopeHolder

- (instancetype)initWithJavaUtilList:(id<JavaUtilList>)data {
  ASModelExpressionParser_ModelUpdateToScopeHolder_initWithJavaUtilList_(self, data);
  return self;
}

- (void)dealloc {
  RELEASE_(varName_);
  RELEASE_(varPath_);
  RELEASE_(varType_);
  RELEASE_(varScope_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "varName_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varPath_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varType_", "LASModelDataType;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "varScope_", "LASModelScope;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilList;", "(Ljava/util/List<Ljava/lang/String;>;)V", "LASModelExpressionParser;" };
  static const J2ObjcClassInfo _ASModelExpressionParser_ModelUpdateToScopeHolder = { "ModelUpdateToScopeHolder", "com.ashera.model", ptrTable, methods, fields, 7, 0x9, 1, 4, 2, -1, -1, -1, -1 };
  return &_ASModelExpressionParser_ModelUpdateToScopeHolder;
}

@end

void ASModelExpressionParser_ModelUpdateToScopeHolder_initWithJavaUtilList_(ASModelExpressionParser_ModelUpdateToScopeHolder *self, id<JavaUtilList> data) {
  NSObject_init(self);
  JreStrongAssign(&self->varPath_, [((id<JavaUtilList>) nil_chk(data)) getWithInt:0]);
  JreStrongAssign(&self->varName_, [data getWithInt:1]);
  JreStrongAssign(&self->varScope_, ASModelScope_valueOfWithNSString_([data getWithInt:2]));
  JreStrongAssign(&self->varType_, ASModelDataType_valueOfWithNSString_([data getWithInt:4]));
}

ASModelExpressionParser_ModelUpdateToScopeHolder *new_ASModelExpressionParser_ModelUpdateToScopeHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_NEW_IMPL(ASModelExpressionParser_ModelUpdateToScopeHolder, initWithJavaUtilList_, data)
}

ASModelExpressionParser_ModelUpdateToScopeHolder *create_ASModelExpressionParser_ModelUpdateToScopeHolder_initWithJavaUtilList_(id<JavaUtilList> data) {
  J2OBJC_CREATE_IMPL(ASModelExpressionParser_ModelUpdateToScopeHolder, initWithJavaUtilList_, data)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelExpressionParser_ModelUpdateToScopeHolder)
