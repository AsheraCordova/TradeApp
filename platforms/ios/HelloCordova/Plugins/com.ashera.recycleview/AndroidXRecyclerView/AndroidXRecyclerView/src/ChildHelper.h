//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\ChildHelper.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ChildHelper")
#ifdef RESTRICT_ChildHelper
#define INCLUDE_ALL_ChildHelper 0
#else
#define INCLUDE_ALL_ChildHelper 1
#endif
#undef RESTRICT_ChildHelper

#if !defined (ADXChildHelper_) && (INCLUDE_ALL_ChildHelper || defined(INCLUDE_ADXChildHelper))
#define ADXChildHelper_

@class ADView;
@class ADViewGroup_LayoutParams;
@class ADXChildHelper_Bucket;
@protocol ADXChildHelper_Callback;
@protocol JavaUtilList;

/*!
 @brief Helper class to manage children.
 <p>
  It wraps a RecyclerView and adds ability to hide some children. There are two sets of methods
  provided by this class. <b>Regular</b> methods are the ones that replicate ViewGroup methods
  like getChildAt, getChildCount etc. These methods ignore hidden children. 
 <p>
  When RecyclerView needs direct access to the view group children, it can call unfiltered
  methods like get getUnfilteredChildCount or getUnfilteredChildAt.
 */
@interface ADXChildHelper : NSObject {
 @public
  id<ADXChildHelper_Callback> mCallback_;
  ADXChildHelper_Bucket *mBucket_;
  id<JavaUtilList> mHiddenViews_;
}

#pragma mark Public

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithADXChildHelper_Callback:(id<ADXChildHelper_Callback>)callback;

/*!
 @brief Adds a view to the ViewGroup
 @param child View to add.
 @param hidden If set to true, this item will be invisible from regular methods.
 */
- (void)addViewWithADView:(ADView *)child
              withBoolean:(jboolean)hidden;

/*!
 @brief Add a view to the ViewGroup at an index
 @param child View to add.
 @param index Index of the child from the regular perspective (excluding hidden views).                ChildHelper offsets this index to actual ViewGroup index.
 @param hidden If set to true, this item will be invisible from regular methods.
 */
- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index
              withBoolean:(jboolean)hidden;

/*!
 @brief Attaches the provided view to the underlying ViewGroup.
 @param child Child to attach.
 @param index Index of the child to attach in regular perspective.
 @param layoutParams LayoutParams for the child.
 @param hidden If set to true, this item will be invisible to the regular methods.
 */
- (void)attachViewToParentWithADView:(ADView *)child
                             withInt:(jint)index
        withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams
                         withBoolean:(jboolean)hidden;

/*!
 @brief Detaches the view at the provided index.
 @param index Index of the child to return in regular perspective.
 */
- (void)detachViewFromParentWithInt:(jint)index;

/*!
 @brief This can be used to find a disappearing view by position.
 @param position The adapter position of the item.
 @return A hidden view with a valid ViewHolder that matches the position.
 */
- (ADView *)findHiddenNonRemovedViewWithInt:(jint)position;

/*!
 @brief Returns the child at provided index.
 @param index Index of the child to return in regular perspective.
 */
- (ADView *)getChildAtWithInt:(jint)index;

/*!
 @brief Returns the number of children that are not hidden.
 @return Number of children that are not hidden.
 - seealso: #getChildAt(int)
 */
- (jint)getChildCount;

/*!
 @brief Returns a child by ViewGroup offset.ChildHelper won't offset this index.
 @param index ViewGroup index of the child to return.
 @return The view in the provided index.
 */
- (ADView *)getUnfilteredChildAtWithInt:(jint)index;

/*!
 @brief Returns the total number of children.
 @return The total number of children including the hidden views.
 - seealso: #getUnfilteredChildAt(int)
 */
- (jint)getUnfilteredChildCount;

/*!
 @brief Marks a child view as hidden.
 @param view The view to hide.
 */
- (void)hideWithADView:(ADView *)view;

/*!
 @brief Returns the index of the child in regular perspective.
 @param child The child whose index will be returned.
 @return The regular perspective index of the child or -1 if it does not exists.
 */
- (jint)indexOfChildWithADView:(ADView *)child;

/*!
 @brief Returns whether a View is visible to LayoutManager or not.
 @param view The child view to check. Should be a child of the Callback.
 @return True if the View is not visible to LayoutManager
 */
- (jboolean)isHiddenWithADView:(ADView *)view;

/*!
 @brief Removes all views from the ViewGroup including the hidden ones.
 */
- (void)removeAllViewsUnfiltered;

/*!
 @brief Removes the provided View from underlying RecyclerView.
 @param view The view to remove.
 */
- (void)removeViewWithADView:(ADView *)view;

/*!
 @brief Removes the view at the provided index from RecyclerView.
 @param index Index of the child from the regular perspective (excluding hidden views).               ChildHelper offsets this index to actual ViewGroup index.
 */
- (void)removeViewAtWithInt:(jint)index;

/*!
 @brief Removes a view from the ViewGroup if it is hidden.
 @param view The view to remove.
 @return True if the View is found and it is hidden. False otherwise.
 */
- (jboolean)removeViewIfHiddenWithADView:(ADView *)view;

/*!
 @brief Moves a child view from hidden list to regular list.
 Calling this method should probably be followed by a detach, otherwise, it will suddenly
  show up in LayoutManager's children list.
 @param view The hidden View to unhide
 */
- (void)unhideWithADView:(ADView *)view;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXChildHelper)

J2OBJC_FIELD_SETTER(ADXChildHelper, mCallback_, id<ADXChildHelper_Callback>)
J2OBJC_FIELD_SETTER(ADXChildHelper, mBucket_, ADXChildHelper_Bucket *)
J2OBJC_FIELD_SETTER(ADXChildHelper, mHiddenViews_, id<JavaUtilList>)

FOUNDATION_EXPORT void ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(ADXChildHelper *self, id<ADXChildHelper_Callback> callback);

FOUNDATION_EXPORT ADXChildHelper *new_ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(id<ADXChildHelper_Callback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXChildHelper *create_ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(id<ADXChildHelper_Callback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ADXChildHelper)

@compatibility_alias AndroidxRecyclerviewWidgetChildHelper ADXChildHelper;

#endif

#if !defined (ADXChildHelper_Bucket_) && (INCLUDE_ALL_ChildHelper || defined(INCLUDE_ADXChildHelper_Bucket))
#define ADXChildHelper_Bucket_

/*!
 @brief Bitset implementation that provides methods to offset indices.
 */
@interface ADXChildHelper_Bucket : NSObject {
 @public
  jlong mData_;
  ADXChildHelper_Bucket *mNext_;
}

#pragma mark Public

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)init;

- (void)clearWithInt:(jint)index;

- (jint)countOnesBeforeWithInt:(jint)index;

- (jboolean)getWithInt:(jint)index;

- (void)insertWithInt:(jint)index
          withBoolean:(jboolean)value;

- (jboolean)removeWithInt:(jint)index;

- (void)reset;

- (void)setWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXChildHelper_Bucket)

J2OBJC_FIELD_SETTER(ADXChildHelper_Bucket, mNext_, ADXChildHelper_Bucket *)

inline jint ADXChildHelper_Bucket_get_BITS_PER_WORD(void);
#define ADXChildHelper_Bucket_BITS_PER_WORD 64
J2OBJC_STATIC_FIELD_CONSTANT(ADXChildHelper_Bucket, BITS_PER_WORD, jint)

inline jlong ADXChildHelper_Bucket_get_LAST_BIT(void);
#define ADXChildHelper_Bucket_LAST_BIT ((jlong) 0x8000000000000000LL)
J2OBJC_STATIC_FIELD_CONSTANT(ADXChildHelper_Bucket, LAST_BIT, jlong)

FOUNDATION_EXPORT void ADXChildHelper_Bucket_init(ADXChildHelper_Bucket *self);

FOUNDATION_EXPORT ADXChildHelper_Bucket *new_ADXChildHelper_Bucket_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXChildHelper_Bucket *create_ADXChildHelper_Bucket_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXChildHelper_Bucket)

#endif

#if !defined (ADXChildHelper_Callback_) && (INCLUDE_ALL_ChildHelper || defined(INCLUDE_ADXChildHelper_Callback))
#define ADXChildHelper_Callback_

@class ADView;
@class ADViewGroup_LayoutParams;
@class ADXRecyclerView_ViewHolder;

@protocol ADXChildHelper_Callback < JavaObject >

- (jint)getChildCount;

- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index;

- (jint)indexOfChildWithADView:(ADView *)view;

- (void)removeViewAtWithInt:(jint)index;

- (ADView *)getChildAtWithInt:(jint)offset;

- (void)removeAllViews;

- (ADXRecyclerView_ViewHolder *)getChildViewHolderWithADView:(ADView *)view;

- (void)attachViewToParentWithADView:(ADView *)child
                             withInt:(jint)index
        withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams;

- (void)detachViewFromParentWithInt:(jint)offset;

- (void)onEnteredHiddenStateWithADView:(ADView *)child;

- (void)onLeftHiddenStateWithADView:(ADView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXChildHelper_Callback)

J2OBJC_TYPE_LITERAL_HEADER(ADXChildHelper_Callback)

#endif

#pragma pop_macro("INCLUDE_ALL_ChildHelper")
