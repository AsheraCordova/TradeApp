//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\content\Intent.java
//

#include "Bundle.h"
#include "IOSClass.h"
#include "Intent.h"
#include "J2ObjC_source.h"
#include "Uri.h"
#include "java/io/Serializable.h"
#include "java/util/HashMap.h"

@class JavaUtilHashMap;


@interface ADIntent () {
 @public
  JavaUtilHashMap *mExtras_;
}

@end

J2OBJC_FIELD_SETTER(ADIntent, mExtras_, JavaUtilHashMap *)

NSString *ADIntent_ACTION_CONFIGURATION_CHANGED = @"android.intent.action.CONFIGURATION_CHANGED";
NSString *ADIntent_EXTRA_ALLOW_MULTIPLE = @"android.intent.extra.ALLOW_MULTIPLE";
NSString *ADIntent_EXTRA_MIME_TYPES = @"android.intent.extra.MIME_TYPES";

@implementation ADIntent

- (instancetype)initWithInt:(jint)actionView {
  ADIntent_initWithInt_(self, actionView);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADIntent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADIntent *)putExtraWithNSString:(NSString *)name
                            withId:(id)value {
  if (mExtras_ == nil) {
    JreStrongAssignAndConsume(&mExtras_, new_JavaUtilHashMap_init());
  }
  [mExtras_ putWithId:name withId:value];
  return self;
}

- (id<JavaIoSerializable>)getSerializableExtraWithNSString:(NSString *)localIntentOptionKey {
  if (mExtras_ == nil) {
    return nil;
  }
  return (id<JavaIoSerializable>) cast_check([mExtras_ getWithId:localIntentOptionKey], JavaIoSerializable_class_());
}

- (id)getExtraWithNSString:(NSString *)localIntentOptionKey {
  if (mExtras_ == nil) {
    return nil;
  }
  return [mExtras_ getWithId:localIntentOptionKey];
}

- (NSString *)getStringExtraWithNSString:(NSString *)localDataKey {
  if (mExtras_ == nil) {
    return nil;
  }
  id object = JreRetainedLocalValue([mExtras_ getWithId:localDataKey]);
  if ([object isKindOfClass:[NSString class]]) {
    return (NSString *) object;
  }
  return nil;
}

- (ADBundle *)getExtras {
  return nil;
}

- (id)getAction {
  return nil;
}

- (jboolean)hasExtraWithNSString:(NSString *)extraState {
  return false;
}

- (void)addCategoryWithInt:(jint)categoryBrowsable {
}

- (void)setDataAndTypeWithADUri:(ADUri *)uri
                   withNSString:(NSString *)mimeType {
}

- (void)setDataWithADUri:(ADUri *)uri {
}

- (void)setTypeWithNSString:(NSString *)string {
}

- (ADUri *)getData {
  return nil;
}

- (ADIntent_ClipData *)getClipData {
  return nil;
}

- (void)dealloc {
  RELEASE_(mExtras_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADIntent;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaIoSerializable;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LADBundle;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADIntent_ClipData;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(putExtraWithNSString:withId:);
  methods[3].selector = @selector(getSerializableExtraWithNSString:);
  methods[4].selector = @selector(getExtraWithNSString:);
  methods[5].selector = @selector(getStringExtraWithNSString:);
  methods[6].selector = @selector(getExtras);
  methods[7].selector = @selector(getAction);
  methods[8].selector = @selector(hasExtraWithNSString:);
  methods[9].selector = @selector(addCategoryWithInt:);
  methods[10].selector = @selector(setDataAndTypeWithADUri:withNSString:);
  methods[11].selector = @selector(setDataWithADUri:);
  methods[12].selector = @selector(setTypeWithNSString:);
  methods[13].selector = @selector(getData);
  methods[14].selector = @selector(getClipData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACTION_VIEW", "I", .constantValue.asInt = ADIntent_ACTION_VIEW, 0x19, -1, -1, -1, -1 },
    { "CATEGORY_BROWSABLE", "I", .constantValue.asInt = ADIntent_CATEGORY_BROWSABLE, 0x19, -1, -1, -1, -1 },
    { "ACTION_GET_CONTENT", "I", .constantValue.asInt = ADIntent_ACTION_GET_CONTENT, 0x19, -1, -1, -1, -1 },
    { "CATEGORY_OPENABLE", "I", .constantValue.asInt = ADIntent_CATEGORY_OPENABLE, 0x19, -1, -1, -1, -1 },
    { "ACTION_CONFIGURATION_CHANGED", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 14, -1, -1 },
    { "FLAG_GRANT_READ_URI_PERMISSION", "I", .constantValue.asInt = ADIntent_FLAG_GRANT_READ_URI_PERMISSION, 0x19, -1, -1, -1, -1 },
    { "FLAG_GRANT_WRITE_URI_PERMISSION", "I", .constantValue.asInt = ADIntent_FLAG_GRANT_WRITE_URI_PERMISSION, 0x19, -1, -1, -1, -1 },
    { "FLAG_FROM_BACKGROUND", "I", .constantValue.asInt = ADIntent_FLAG_FROM_BACKGROUND, 0x19, -1, -1, -1, -1 },
    { "FLAG_GRANT_PERSISTABLE_URI_PERMISSION", "I", .constantValue.asInt = ADIntent_FLAG_GRANT_PERSISTABLE_URI_PERMISSION, 0x19, -1, -1, -1, -1 },
    { "FLAG_GRANT_PREFIX_URI_PERMISSION", "I", .constantValue.asInt = ADIntent_FLAG_GRANT_PREFIX_URI_PERMISSION, 0x19, -1, -1, -1, -1 },
    { "EXTRA_ALLOW_MULTIPLE", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 15, -1, -1 },
    { "EXTRA_MIME_TYPES", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 16, -1, -1 },
    { "mExtras_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
  };
  static const void *ptrTable[] = { "I", "putExtra", "LNSString;LNSObject;", "getSerializableExtra", "LNSString;", "getExtra", "getStringExtra", "hasExtra", "addCategory", "setDataAndType", "LADUri;LNSString;", "setData", "LADUri;", "setType", &ADIntent_ACTION_CONFIGURATION_CHANGED, &ADIntent_EXTRA_ALLOW_MULTIPLE, &ADIntent_EXTRA_MIME_TYPES, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Object;>;", "LADIntent_ClipData;LADIntent_Item;" };
  static const J2ObjcClassInfo _ADIntent = { "Intent", "r.android.content", ptrTable, methods, fields, 7, 0x1, 15, 13, -1, 18, -1, -1, -1 };
  return &_ADIntent;
}

@end

void ADIntent_initWithInt_(ADIntent *self, jint actionView) {
  NSObject_init(self);
}

ADIntent *new_ADIntent_initWithInt_(jint actionView) {
  J2OBJC_NEW_IMPL(ADIntent, initWithInt_, actionView)
}

ADIntent *create_ADIntent_initWithInt_(jint actionView) {
  J2OBJC_CREATE_IMPL(ADIntent, initWithInt_, actionView)
}

void ADIntent_init(ADIntent *self) {
  NSObject_init(self);
}

ADIntent *new_ADIntent_init() {
  J2OBJC_NEW_IMPL(ADIntent, init)
}

ADIntent *create_ADIntent_init() {
  J2OBJC_CREATE_IMPL(ADIntent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADIntent)

@implementation ADIntent_ClipData

- (instancetype)initWithADIntent:(ADIntent *)outer$ {
  ADIntent_ClipData_initWithADIntent_(self, outer$);
  return self;
}

- (jint)getItemCount {
  return 0;
}

- (ADIntent_Item *)getItemAtWithInt:(jint)i {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADIntent_Item;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADIntent:);
  methods[1].selector = @selector(getItemCount);
  methods[2].selector = @selector(getItemAtWithInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADIntent;", "getItemAt", "I" };
  static const J2ObjcClassInfo _ADIntent_ClipData = { "ClipData", "r.android.content", ptrTable, methods, NULL, 7, 0x1, 3, 0, 0, -1, -1, -1, -1 };
  return &_ADIntent_ClipData;
}

@end

void ADIntent_ClipData_initWithADIntent_(ADIntent_ClipData *self, ADIntent *outer$) {
  NSObject_init(self);
}

ADIntent_ClipData *new_ADIntent_ClipData_initWithADIntent_(ADIntent *outer$) {
  J2OBJC_NEW_IMPL(ADIntent_ClipData, initWithADIntent_, outer$)
}

ADIntent_ClipData *create_ADIntent_ClipData_initWithADIntent_(ADIntent *outer$) {
  J2OBJC_CREATE_IMPL(ADIntent_ClipData, initWithADIntent_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADIntent_ClipData)

@implementation ADIntent_Item

- (instancetype)initWithADIntent:(ADIntent *)outer$ {
  ADIntent_Item_initWithADIntent_(self, outer$);
  return self;
}

- (ADUri *)getUri {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADUri;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADIntent:);
  methods[1].selector = @selector(getUri);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADIntent;" };
  static const J2ObjcClassInfo _ADIntent_Item = { "Item", "r.android.content", ptrTable, methods, NULL, 7, 0x1, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADIntent_Item;
}

@end

void ADIntent_Item_initWithADIntent_(ADIntent_Item *self, ADIntent *outer$) {
  NSObject_init(self);
}

ADIntent_Item *new_ADIntent_Item_initWithADIntent_(ADIntent *outer$) {
  J2OBJC_NEW_IMPL(ADIntent_Item, initWithADIntent_, outer$)
}

ADIntent_Item *create_ADIntent_Item_initWithADIntent_(ADIntent *outer$) {
  J2OBJC_CREATE_IMPL(ADIntent_Item, initWithADIntent_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADIntent_Item)
