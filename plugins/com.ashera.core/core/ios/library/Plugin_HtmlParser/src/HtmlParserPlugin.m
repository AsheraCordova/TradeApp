//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_HtmlParser\src\com\ashera\parser\html\HtmlParserPlugin.java
//

#include "HasWidgets.h"
#include "HtmlParser.h"
#include "HtmlParserPlugin.h"
#include "HtmlSaxHandler.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "WidgetAttributeMap.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/Map.h"


@implementation ASHtmlParserPlugin

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASHtmlParserPlugin_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)invokeWithNSString:(NSString *)name
       withNSObjectArray:(IOSObjectArray *)args {
  switch (JreIndexOfStr(name, (id[]){ @"parse", @"parseWithParent", @"parseFile", @"parseInclude", @"getHandler", @"handlerStart", @"handlerEnd", @"addToCurrentParent" }, 8)) {
    case 0:
    return [self parseWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangBoolean class]))) booleanValue] withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 2), ASIFragment_class_())];
    case 1:
    return [self parseWithParentWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangBoolean class]))) booleanValue] withASHasWidgets:(id<ASHasWidgets>) cast_check(IOSObjectArray_Get(args, 2), ASHasWidgets_class_()) withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 3), ASIFragment_class_())];
    case 2:
    return [self parseFileWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangBoolean class]))) booleanValue] withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 2), ASIFragment_class_())];
    case 3:
    [self parseIncludeWithASHasWidgets:(id<ASHasWidgets>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), ASHasWidgets_class_()) withNSString:(NSString *) cast_chk(IOSObjectArray_Get(args, 1), [NSString class]) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 2), [JavaLangBoolean class]))) booleanValue] withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 3), ASIFragment_class_())];
    return nil;
    case 4:
    return [self getHandlerWithASHasWidgets:(id<ASHasWidgets>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), ASHasWidgets_class_()) withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangInteger class]))) intValue] withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 2), ASIFragment_class_())];
    case 5:
    return [self handlerStartWithId:IOSObjectArray_Get(nil_chk(args), 0) withASIWidget:(id<ASIWidget>) cast_check(IOSObjectArray_Get(args, 1), ASIWidget_class_()) withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, 2), [JavaLangInteger class]))) intValue]];
    case 6:
    [self handlerEndWithId:IOSObjectArray_Get(nil_chk(args), 0) withASIWidget:(id<ASIWidget>) cast_check(IOSObjectArray_Get(args, 1), ASIWidget_class_())];
    return nil;
    case 7:
    [self addToCurrentParentWithId:IOSObjectArray_Get(nil_chk(args), 0) withASIWidget:(id<ASIWidget>) cast_check(IOSObjectArray_Get(args, 1), ASIWidget_class_())];
    return nil;
    default:
    break;
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown method ", name));
}

- (NSString *)getName {
  return @"htmlparser";
}

- (id<ASIWidget>)parseWithNSString:(NSString *)html
                       withBoolean:(jboolean)template_
                   withASIFragment:(id<ASIFragment>)fragment {
  return [self parseWithParentWithNSString:html withBoolean:template_ withASHasWidgets:nil withASIFragment:fragment];
}

- (id<ASIWidget>)parseWithParentWithNSString:(NSString *)html
                                 withBoolean:(jboolean)template_
                            withASHasWidgets:(id<ASHasWidgets>)parent
                             withASIFragment:(id<ASIFragment>)fragment {
  ASHtmlSaxHandler *handler = create_ASHtmlSaxHandler_initWithASIFragment_withBoolean_(fragment, template_);
  if (parent != nil) {
    [handler initRootWithASHasWidgets:parent];
  }
  ASHtmlParser_parseWithOrgXmlSaxContentHandler_withNSString_(handler, html);
  return [handler getRoot];
}

- (id<ASIWidget>)parseFileWithNSString:(NSString *)fileName
                           withBoolean:(jboolean)template_
                       withASIFragment:(id<ASIFragment>)fragment {
  NSString *html = ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(JreStrcat("$$", @"www/", fileName), fragment);
  return [self parseWithNSString:html withBoolean:template_ withASIFragment:fragment];
}

- (id)getHandlerWithASHasWidgets:(id<ASHasWidgets>)parent
                         withInt:(jint)index
                 withASIFragment:(id<ASIFragment>)fragment {
  ASHtmlSaxHandler *handler = create_ASHtmlSaxHandler_initWithASIFragment_withBoolean_(fragment, false);
  if (parent != nil) {
    [handler initRootWithASHasWidgets:parent];
  }
  return handler;
}

- (id<ASIWidget>)handlerStartWithId:(id)handler
                      withASIWidget:(id<ASIWidget>)widget
                            withInt:(jint)index {
  return [((ASHtmlSaxHandler *) nil_chk(((ASHtmlSaxHandler *) cast_chk(handler, [ASHtmlSaxHandler class])))) startCreateWidgetWithNSString:[((id<ASIWidget>) nil_chk(widget)) getLocalName] withASIWidget:nil withNSString:nil withNSString:[widget getId] withInt:index withOrgXmlSaxAttributes:nil withASWidgetAttributeMap:[widget getAttributes] withJavaUtilMap:[widget getParams]];
}

- (void)handlerEndWithId:(id)handler
           withASIWidget:(id<ASIWidget>)widget {
  [((ASHtmlSaxHandler *) nil_chk(((ASHtmlSaxHandler *) cast_chk(handler, [ASHtmlSaxHandler class])))) endCreateWidgetWithNSString:[((id<ASIWidget>) nil_chk(widget)) getLocalName]];
}

- (void)addToCurrentParentWithId:(id)handler
                   withASIWidget:(id<ASIWidget>)widget {
  [((ASHtmlSaxHandler *) nil_chk(((ASHtmlSaxHandler *) cast_chk(handler, [ASHtmlSaxHandler class])))) addToCurrentParentWithASIWidget:widget];
}

- (void)parseIncludeWithASHasWidgets:(id<ASHasWidgets>)parent
                        withNSString:(NSString *)fileName
                         withBoolean:(jboolean)template_
                     withASIFragment:(id<ASIFragment>)fragment {
  ASHtmlSaxHandler *handler = create_ASHtmlSaxHandler_initWithASIFragment_withBoolean_(fragment, template_);
  [handler initRootWithASHasWidgets:parent];
  fileName = JreStrcat("$$", [((NSString *) nil_chk(fileName)) java_replace:@"@layout/" withSequence:@""], @".xml");
  NSString *html = ASPluginInvoker_getFileAssetWithNSString_withASIFragment_(JreStrcat("$$", @"www/layout/", fileName), fragment);
  ASHtmlParser_parseWithOrgXmlSaxContentHandler_withNSString_(handler, html);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(invokeWithNSString:withNSObjectArray:);
  methods[2].selector = @selector(getName);
  methods[3].selector = @selector(parseWithNSString:withBoolean:withASIFragment:);
  methods[4].selector = @selector(parseWithParentWithNSString:withBoolean:withASHasWidgets:withASIFragment:);
  methods[5].selector = @selector(parseFileWithNSString:withBoolean:withASIFragment:);
  methods[6].selector = @selector(getHandlerWithASHasWidgets:withInt:withASIFragment:);
  methods[7].selector = @selector(handlerStartWithId:withASIWidget:withInt:);
  methods[8].selector = @selector(handlerEndWithId:withASIWidget:);
  methods[9].selector = @selector(addToCurrentParentWithId:withASIWidget:);
  methods[10].selector = @selector(parseIncludeWithASHasWidgets:withNSString:withBoolean:withASIFragment:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "invoke", "LNSString;[LNSObject;", "parse", "LNSString;ZLASIFragment;", "parseWithParent", "LNSString;ZLASHasWidgets;LASIFragment;", "parseFile", "getHandler", "LASHasWidgets;ILASIFragment;", "handlerStart", "LNSObject;LASIWidget;I", "handlerEnd", "LNSObject;LASIWidget;", "addToCurrentParent", "parseInclude", "LASHasWidgets;LNSString;ZLASIFragment;" };
  static const J2ObjcClassInfo _ASHtmlParserPlugin = { "HtmlParserPlugin", "com.ashera.parser.html", ptrTable, methods, NULL, 7, 0x1, 11, 0, -1, -1, -1, -1, -1 };
  return &_ASHtmlParserPlugin;
}

@end

void ASHtmlParserPlugin_init(ASHtmlParserPlugin *self) {
  NSObject_init(self);
}

ASHtmlParserPlugin *new_ASHtmlParserPlugin_init() {
  J2OBJC_NEW_IMPL(ASHtmlParserPlugin, init)
}

ASHtmlParserPlugin *create_ASHtmlParserPlugin_init() {
  J2OBJC_CREATE_IMPL(ASHtmlParserPlugin, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASHtmlParserPlugin)
