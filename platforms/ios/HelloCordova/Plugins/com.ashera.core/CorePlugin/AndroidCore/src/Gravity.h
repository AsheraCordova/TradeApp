//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\Gravity.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Gravity")
#ifdef RESTRICT_Gravity
#define INCLUDE_ALL_Gravity 0
#else
#define INCLUDE_ALL_Gravity 1
#endif
#undef RESTRICT_Gravity

#if !defined (ADGravity_) && (INCLUDE_ALL_Gravity || defined(INCLUDE_ADGravity))
#define ADGravity_

@class ADRect;

/*!
 @brief Standard constants and tools for placing an object within a potentially
  larger container.
 */
@interface ADGravity : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Apply a gravity constant to an object.
 @param gravity The desired placement of the object, as defined by the                 constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object                   will be placed.  Should be large enough to contain the
                    width and height of the object.
 @param xAdj Offset to apply to the X axis.  If gravity is LEFT this              pushes it to the right; if gravity is RIGHT it pushes it to
               the left; if gravity is CENTER_HORIZONTAL it pushes it to the
               right or left; otherwise it is ignored.
 @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes              it down; if gravity is BOTTOM it pushes it up; if gravity is
               CENTER_VERTICAL it pushes it down or up; otherwise it is
               ignored.
 @param outRect Receives the computed frame of the object in its                 container.
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
             withInt:(jint)xAdj
             withInt:(jint)yAdj
          withADRect:(ADRect *)outRect;

/*!
 @brief Apply a gravity constant to an object.
 @param gravity The desired placement of the object, as defined by the                 constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object                   will be placed.  Should be large enough to contain the
                    width and height of the object.
 @param xAdj Offset to apply to the X axis.  If gravity is LEFT this              pushes it to the right; if gravity is RIGHT it pushes it to
               the left; if gravity is CENTER_HORIZONTAL it pushes it to the
               right or left; otherwise it is ignored.
 @param yAdj Offset to apply to the Y axis.  If gravity is TOP this pushes              it down; if gravity is BOTTOM it pushes it up; if gravity is
               CENTER_VERTICAL it pushes it down or up; otherwise it is
               ignored.
 @param outRect Receives the computed frame of the object in its                 container.
 @param layoutDirection The layout direction.
 - seealso: View#LAYOUT_DIRECTION_LTR
 - seealso: View#LAYOUT_DIRECTION_RTL
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
             withInt:(jint)xAdj
             withInt:(jint)yAdj
          withADRect:(ADRect *)outRect
             withInt:(jint)layoutDirection;

/*!
 @brief Apply a gravity constant to an object.This supposes that the layout direction is LTR.
 @param gravity The desired placement of the object, as defined by the                 constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object                   will be placed.  Should be large enough to contain the
                    width and height of the object.
 @param outRect Receives the computed frame of the object in its                 container.
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
          withADRect:(ADRect *)outRect;

/*!
 @brief Apply a gravity constant to an object and take care if layout direction is RTL or not.
 @param gravity The desired placement of the object, as defined by the                 constants in this class.
 @param w The horizontal size of the object.
 @param h The vertical size of the object.
 @param container The frame of the containing space, in which the object                   will be placed.  Should be large enough to contain the
                    width and height of the object.
 @param outRect Receives the computed frame of the object in its                 container.
 @param layoutDirection The layout direction.
 - seealso: View#LAYOUT_DIRECTION_LTR
 - seealso: View#LAYOUT_DIRECTION_RTL
 */
+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
          withADRect:(ADRect *)outRect
             withInt:(jint)layoutDirection;

/*!
 @brief Apply additional gravity behavior based on the overall "display" that an
  object exists in.This can be used after 
 <code>apply(int, int, int, Rect, int, int, Rect)</code> to place the object
  within a visible display.
 By default this moves or clips the object
  to be visible in the display; the gravity flags 
 <code>DISPLAY_CLIP_HORIZONTAL</code> and <code>DISPLAY_CLIP_VERTICAL</code>
  can be used to change this behavior.
 @param gravity Gravity constants to modify the placement within the  display.
 @param display The rectangle of the display in which the object is  being placed.
 @param inoutObj Supplies the current object position; returns with it  modified if needed to fit in the display.
 */
+ (void)applyDisplayWithInt:(jint)gravity
                 withADRect:(ADRect *)display
                 withADRect:(ADRect *)inoutObj;

/*!
 @brief Apply additional gravity behavior based on the overall "display" that an
  object exists in.This can be used after 
 <code>apply(int, int, int, Rect, int, int, Rect)</code> to place the object
  within a visible display.
 By default this moves or clips the object
  to be visible in the display; the gravity flags 
 <code>DISPLAY_CLIP_HORIZONTAL</code> and <code>DISPLAY_CLIP_VERTICAL</code>
  can be used to change this behavior.
 @param gravity Gravity constants to modify the placement within the  display.
 @param display The rectangle of the display in which the object is  being placed.
 @param inoutObj Supplies the current object position; returns with it  modified if needed to fit in the display.
 @param layoutDirection The layout direction.
 - seealso: View#LAYOUT_DIRECTION_LTR
 - seealso: View#LAYOUT_DIRECTION_RTL
 */
+ (void)applyDisplayWithInt:(jint)gravity
                 withADRect:(ADRect *)display
                 withADRect:(ADRect *)inoutObj
                    withInt:(jint)layoutDirection;

/*!
 @brief <p>Convert script specific gravity to absolute horizontal value.
 </p>
  if horizontal direction is LTR, then START will set LEFT and END will set RIGHT.
  if horizontal direction is RTL, then START will set RIGHT and END will set LEFT.
 @param gravity The gravity to convert to absolute (horizontal) values.
 @param layoutDirection The layout direction.
 @return gravity converted to absolute (horizontal) values.
 */
+ (jint)getAbsoluteGravityWithInt:(jint)gravity
                          withInt:(jint)layoutDirection;

/*!
 @brief <p>Indicate whether the supplied gravity has an horizontal pull.
 </p>
 @param gravity the gravity to check for horizontal pull
 @return true if the supplied gravity has an horizontal pull
 */
+ (jboolean)isHorizontalWithInt:(jint)gravity;

/*!
 @brief <p>Indicate whether the supplied gravity has a vertical pull.
 </p>
 @param gravity the gravity to check for vertical pull
 @return true if the supplied gravity has a vertical pull
 */
+ (jboolean)isVerticalWithInt:(jint)gravity;

@end

J2OBJC_EMPTY_STATIC_INIT(ADGravity)

/*!
 @brief Constant indicating that no gravity has been set
 */
inline jint ADGravity_get_NO_GRAVITY(void);
#define ADGravity_NO_GRAVITY 0
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, NO_GRAVITY, jint)

/*!
 @brief Raw bit indicating the gravity for an axis has been specified.
 */
inline jint ADGravity_get_AXIS_SPECIFIED(void);
#define ADGravity_AXIS_SPECIFIED 1
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_SPECIFIED, jint)

/*!
 @brief Raw bit controlling how the left/top edge is placed.
 */
inline jint ADGravity_get_AXIS_PULL_BEFORE(void);
#define ADGravity_AXIS_PULL_BEFORE 2
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_PULL_BEFORE, jint)

/*!
 @brief Raw bit controlling how the right/bottom edge is placed.
 */
inline jint ADGravity_get_AXIS_PULL_AFTER(void);
#define ADGravity_AXIS_PULL_AFTER 4
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_PULL_AFTER, jint)

/*!
 @brief Raw bit controlling whether the right/bottom edge is clipped to its
  container, based on the gravity direction being applied.
 */
inline jint ADGravity_get_AXIS_CLIP(void);
#define ADGravity_AXIS_CLIP 8
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_CLIP, jint)

/*!
 @brief Bits defining the horizontal axis.
 */
inline jint ADGravity_get_AXIS_X_SHIFT(void);
#define ADGravity_AXIS_X_SHIFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_X_SHIFT, jint)

/*!
 @brief Bits defining the vertical axis.
 */
inline jint ADGravity_get_AXIS_Y_SHIFT(void);
#define ADGravity_AXIS_Y_SHIFT 4
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_Y_SHIFT, jint)

/*!
 @brief Push object to the top of its container, not changing its size.
 */
inline jint ADGravity_get_TOP(void);
#define ADGravity_TOP 48
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, TOP, jint)

/*!
 @brief Push object to the bottom of its container, not changing its size.
 */
inline jint ADGravity_get_BOTTOM(void);
#define ADGravity_BOTTOM 80
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, BOTTOM, jint)

/*!
 @brief Push object to the left of its container, not changing its size.
 */
inline jint ADGravity_get_LEFT(void);
#define ADGravity_LEFT 3
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, LEFT, jint)

/*!
 @brief Push object to the right of its container, not changing its size.
 */
inline jint ADGravity_get_RIGHT(void);
#define ADGravity_RIGHT 5
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, RIGHT, jint)

/*!
 @brief Place object in the vertical center of its container, not changing its
   size.
 */
inline jint ADGravity_get_CENTER_VERTICAL(void);
#define ADGravity_CENTER_VERTICAL 16
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, CENTER_VERTICAL, jint)

/*!
 @brief Grow the vertical size of the object if needed so it completely fills
   its container.
 */
inline jint ADGravity_get_FILL_VERTICAL(void);
#define ADGravity_FILL_VERTICAL 112
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, FILL_VERTICAL, jint)

/*!
 @brief Place object in the horizontal center of its container, not changing its
   size.
 */
inline jint ADGravity_get_CENTER_HORIZONTAL(void);
#define ADGravity_CENTER_HORIZONTAL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, CENTER_HORIZONTAL, jint)

/*!
 @brief Grow the horizontal size of the object if needed so it completely fills
   its container.
 */
inline jint ADGravity_get_FILL_HORIZONTAL(void);
#define ADGravity_FILL_HORIZONTAL 7
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, FILL_HORIZONTAL, jint)

/*!
 @brief Place the object in the center of its container in both the vertical
   and horizontal axis, not changing its size.
 */
inline jint ADGravity_get_CENTER(void);
#define ADGravity_CENTER 17
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, CENTER, jint)

/*!
 @brief Grow the horizontal and vertical size of the object if needed so it
   completely fills its container.
 */
inline jint ADGravity_get_FILL(void);
#define ADGravity_FILL 119
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, FILL, jint)

/*!
 @brief Flag to clip the edges of the object to its container along the
   vertical axis.
 */
inline jint ADGravity_get_CLIP_VERTICAL(void);
#define ADGravity_CLIP_VERTICAL 128
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, CLIP_VERTICAL, jint)

/*!
 @brief Flag to clip the edges of the object to its container along the
   horizontal axis.
 */
inline jint ADGravity_get_CLIP_HORIZONTAL(void);
#define ADGravity_CLIP_HORIZONTAL 8
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, CLIP_HORIZONTAL, jint)

/*!
 @brief Raw bit controlling whether the layout direction is relative or not (START/END instead of
  absolute LEFT/RIGHT).
 */
inline jint ADGravity_get_RELATIVE_LAYOUT_DIRECTION(void);
#define ADGravity_RELATIVE_LAYOUT_DIRECTION 8388608
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, RELATIVE_LAYOUT_DIRECTION, jint)

/*!
 @brief Binary mask to get the absolute horizontal gravity of a gravity.
 */
inline jint ADGravity_get_HORIZONTAL_GRAVITY_MASK(void);
#define ADGravity_HORIZONTAL_GRAVITY_MASK 7
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, HORIZONTAL_GRAVITY_MASK, jint)

/*!
 @brief Binary mask to get the vertical gravity of a gravity.
 */
inline jint ADGravity_get_VERTICAL_GRAVITY_MASK(void);
#define ADGravity_VERTICAL_GRAVITY_MASK 112
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, VERTICAL_GRAVITY_MASK, jint)

/*!
 @brief Special constant to enable clipping to an overall display along the
   vertical dimension.This is not applied by default by
   <code>apply(int, int, int, Rect, int, int, Rect)</code>; you must do so
   yourself by calling <code>applyDisplay</code>.
 */
inline jint ADGravity_get_DISPLAY_CLIP_VERTICAL(void);
#define ADGravity_DISPLAY_CLIP_VERTICAL 268435456
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, DISPLAY_CLIP_VERTICAL, jint)

/*!
 @brief Special constant to enable clipping to an overall display along the
   horizontal dimension.This is not applied by default by
   <code>apply(int, int, int, Rect, int, int, Rect)</code>; you must do so
   yourself by calling <code>applyDisplay</code>.
 */
inline jint ADGravity_get_DISPLAY_CLIP_HORIZONTAL(void);
#define ADGravity_DISPLAY_CLIP_HORIZONTAL 16777216
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, DISPLAY_CLIP_HORIZONTAL, jint)

/*!
 @brief Push object to x-axis position at the start of its container, not changing its size.
 */
inline jint ADGravity_get_START(void);
#define ADGravity_START 8388611
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, START, jint)

/*!
 @brief Push object to x-axis position at the end of its container, not changing its size.
 */
inline jint ADGravity_get_END(void);
#define ADGravity_END 8388613
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, END, jint)

/*!
 @brief Binary mask for the horizontal gravity and script specific direction bit.
 */
inline jint ADGravity_get_RELATIVE_HORIZONTAL_GRAVITY_MASK(void);
#define ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK 8388615
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, RELATIVE_HORIZONTAL_GRAVITY_MASK, jint)

FOUNDATION_EXPORT void ADGravity_init(ADGravity *self);

FOUNDATION_EXPORT ADGravity *new_ADGravity_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADGravity *create_ADGravity_init(void);

FOUNDATION_EXPORT void ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_(jint gravity, jint w, jint h, ADRect *container, ADRect *outRect);

FOUNDATION_EXPORT void ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(jint gravity, jint w, jint h, ADRect *container, ADRect *outRect, jint layoutDirection);

FOUNDATION_EXPORT void ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_(jint gravity, jint w, jint h, ADRect *container, jint xAdj, jint yAdj, ADRect *outRect);

FOUNDATION_EXPORT void ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_withInt_(jint gravity, jint w, jint h, ADRect *container, jint xAdj, jint yAdj, ADRect *outRect, jint layoutDirection);

FOUNDATION_EXPORT void ADGravity_applyDisplayWithInt_withADRect_withADRect_(jint gravity, ADRect *display, ADRect *inoutObj);

FOUNDATION_EXPORT void ADGravity_applyDisplayWithInt_withADRect_withADRect_withInt_(jint gravity, ADRect *display, ADRect *inoutObj, jint layoutDirection);

FOUNDATION_EXPORT jboolean ADGravity_isVerticalWithInt_(jint gravity);

FOUNDATION_EXPORT jboolean ADGravity_isHorizontalWithInt_(jint gravity);

FOUNDATION_EXPORT jint ADGravity_getAbsoluteGravityWithInt_withInt_(jint gravity, jint layoutDirection);

J2OBJC_TYPE_LITERAL_HEADER(ADGravity)

@compatibility_alias RAndroidViewGravity ADGravity;

#endif

#pragma pop_macro("INCLUDE_ALL_Gravity")
