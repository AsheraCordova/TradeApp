//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSToolbarPlugin\src\main\java\com\ashera\toolbar\ActionMenuViewImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "ActionMenuView.h"
#include "ActionMenuViewImpl.h"
#include "BaseHasWidgets.h"
#include "BaseMeasurableView.h"
#include "Canvas.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "HasWidgets.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "MenuBuilder.h"
#include "MenuItem.h"
#include "MenuItemImpl.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "Toolbar.h"
#include "ToolbarImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIImageView.h"
#include "KxMenu.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASActionMenuViewImpl () {
 @public
  id uiView_;
  id<ADCanvas> canvas_;
  ADXActionMenuView *actionMenuView_;
  id<JavaUtilMap> menuItemMap_;
  id<ASIWidget> overFlowButton_;
  ASActionMenuViewImpl_ActionMenuViewCommandBuilder *builder_;
  ASActionMenuViewImpl_ActionMenuViewBean *bean_;
  ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *paramsBuilder_;
  ASActionMenuViewImpl_ActionMenuViewParamsBean *paramsBean_;
  ASToolbarImpl *toolbar_;
  id itemArray_;
  NSString *OVERFLOW_BUTTON_TYPE_;
  id<JavaUtilMap> menuItemToNativeMenuItemMap_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXActionMenuView_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)loadCustomAttributesWithNSString:(NSString *)localName;

- (jboolean)shouldAllowTextWithIcon;

- (ADView *)getOverFlowButton;

- (void)setDividerPaddingWithId:(id)objValue;

- (void)setShowDividersWithId:(id)objValue;

- (id)getDividerPadding;

- (id)getShowDividers;

- (void)createCanvas;

- (void)addMenuClickListenerWithADMenuItem:(id<ADMenuItem>)item
                             withASIWidget:(id<ASIWidget>)widget
                         withASToolbarImpl:(ASToolbarImpl *)toolbar;

- (IOSIntArray *)getImageDimensionWithADDrawable:(ADDrawable *)drawable;

- (void)resizeImageIfRequiredWithADDrawable:(ADDrawable *)drawable
                                    withInt:(jint)width
                                    withInt:(jint)height;

- (jboolean)isLandScape;

- (void)createPopUpMenuWithASToolbarImpl:(ASToolbarImpl *)toolbar;

- (void)nativeShowKxMenuWithId:(id)root
                        withId:(id)overflowButton;

- (void)setKxMenuOnButtonWithId:(id)button
               withJavaUtilList:(id<JavaUtilList>)actionsObjs;

- (id)getKXMenuWithASToolbarImpl:(ASToolbarImpl *)toolbar
             withADXMenuItemImpl:(ADXMenuItemImpl *)menuItem;

- (void)handleOnKxMenuItemClickWithId:(id)kxmenuItem;

- (jboolean)isKxMenuToBeShown;

- (void)setMenuOnButtonWithId:(id)button
             withJavaUtilList:(id<JavaUtilList>)actionsObjs;

- (id)getActionWithASToolbarImpl:(ASToolbarImpl *)toolbar
             withADXMenuItemImpl:(ADXMenuItemImpl *)menuItem;

- (void)handleOnMenuItemClickWithASToolbarImpl:(ASToolbarImpl *)toolbar
                           withADXMenuItemImpl:(ADXMenuItemImpl *)menuItem;

@end

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, canvas_, id<ADCanvas>)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, actionMenuView_, ADXActionMenuView *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, menuItemMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, overFlowButton_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, builder_, ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, bean_, ASActionMenuViewImpl_ActionMenuViewBean *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, paramsBuilder_, ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, paramsBean_, ASActionMenuViewImpl_ActionMenuViewParamsBean *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, toolbar_, ASToolbarImpl *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, itemArray_, id)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, OVERFLOW_BUTTON_TYPE_, NSString *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl, menuItemToNativeMenuItemMap_, id<JavaUtilMap>)

inline NSString *ASActionMenuViewImpl_get_MAX_ICON_SIZE(void);
static NSString *ASActionMenuViewImpl_MAX_ICON_SIZE = @"32dp";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASActionMenuViewImpl, MAX_ICON_SIZE, NSString *)

__attribute__((unused)) static void ASActionMenuViewImpl_setWidgetOnNativeClass(ASActionMenuViewImpl *self);

__attribute__((unused)) static void ASActionMenuViewImpl_createLayoutParamsWithADView_(ASActionMenuViewImpl *self, ADView *view);

__attribute__((unused)) static ADXActionMenuView_LayoutParams *ASActionMenuViewImpl_getLayoutParamsWithADView_(ASActionMenuViewImpl *self, ADView *view);

__attribute__((unused)) static void ASActionMenuViewImpl_loadCustomAttributesWithNSString_(ASActionMenuViewImpl *self, NSString *localName);

__attribute__((unused)) static jboolean ASActionMenuViewImpl_shouldAllowTextWithIcon(ASActionMenuViewImpl *self);

__attribute__((unused)) static ADView *ASActionMenuViewImpl_getOverFlowButton(ASActionMenuViewImpl *self);

__attribute__((unused)) static void ASActionMenuViewImpl_setDividerPaddingWithId_(ASActionMenuViewImpl *self, id objValue);

__attribute__((unused)) static void ASActionMenuViewImpl_setShowDividersWithId_(ASActionMenuViewImpl *self, id objValue);

__attribute__((unused)) static id ASActionMenuViewImpl_getDividerPadding(ASActionMenuViewImpl *self);

__attribute__((unused)) static id ASActionMenuViewImpl_getShowDividers(ASActionMenuViewImpl *self);

__attribute__((unused)) static void ASActionMenuViewImpl_createCanvas(ASActionMenuViewImpl *self);

__attribute__((unused)) static void ASActionMenuViewImpl_addMenuClickListenerWithADMenuItem_withASIWidget_withASToolbarImpl_(ASActionMenuViewImpl *self, id<ADMenuItem> item, id<ASIWidget> widget, ASToolbarImpl *toolbar);

__attribute__((unused)) static IOSIntArray *ASActionMenuViewImpl_getImageDimensionWithADDrawable_(ASActionMenuViewImpl *self, ADDrawable *drawable);

__attribute__((unused)) static void ASActionMenuViewImpl_resizeImageIfRequiredWithADDrawable_withInt_withInt_(ASActionMenuViewImpl *self, ADDrawable *drawable, jint width, jint height);

__attribute__((unused)) static jboolean ASActionMenuViewImpl_isLandScape(ASActionMenuViewImpl *self);

__attribute__((unused)) static void ASActionMenuViewImpl_createPopUpMenuWithASToolbarImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar);

__attribute__((unused)) static void ASActionMenuViewImpl_nativeShowKxMenuWithId_withId_(ASActionMenuViewImpl *self, id root, id overflowButton);

__attribute__((unused)) static void ASActionMenuViewImpl_setKxMenuOnButtonWithId_withJavaUtilList_(ASActionMenuViewImpl *self, id button, id<JavaUtilList> actionsObjs);

__attribute__((unused)) static id ASActionMenuViewImpl_getKXMenuWithASToolbarImpl_withADXMenuItemImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar, ADXMenuItemImpl *menuItem);

__attribute__((unused)) static void ASActionMenuViewImpl_handleOnKxMenuItemClickWithId_(ASActionMenuViewImpl *self, id kxmenuItem);

__attribute__((unused)) static jboolean ASActionMenuViewImpl_isKxMenuToBeShown(ASActionMenuViewImpl *self);

__attribute__((unused)) static void ASActionMenuViewImpl_setMenuOnButtonWithId_withJavaUtilList_(ASActionMenuViewImpl *self, id button, id<JavaUtilList> actionsObjs);

__attribute__((unused)) static id ASActionMenuViewImpl_getActionWithASToolbarImpl_withADXMenuItemImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar, ADXMenuItemImpl *menuItem);

__attribute__((unused)) static void ASActionMenuViewImpl_handleOnMenuItemClickWithASToolbarImpl_withADXMenuItemImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar, ADXMenuItemImpl *menuItem);

@interface ASActionMenuViewImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASActionMenuViewImpl_Divider () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_Divider, mapping_, id<JavaUtilMap>)

@interface ASActionMenuViewImpl_ActionMenuViewExt () {
 @public
  __unsafe_unretained ASActionMenuViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_ActionMenuViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_ActionMenuViewExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASActionMenuViewImpl_ShowAsAction () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_ShowAsAction, mapping_, id<JavaUtilMap>)

@interface ASActionMenuViewImpl_LLCanvas : NSObject < ADCanvas > {
 @public
  id<JavaUtilList> imageViews_;
  __unsafe_unretained id<ASIWidget> widget_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)drawWithADDrawable:(ADDrawable *)mDivider;

- (void)reset;

- (id)nativeCreateImageViewWithId:(id)image;

@end

J2OBJC_EMPTY_STATIC_INIT(ASActionMenuViewImpl_LLCanvas)

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_LLCanvas, imageViews_, id<JavaUtilList>)

__attribute__((unused)) static void ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(ASActionMenuViewImpl_LLCanvas *self, id<ASIWidget> widget);

__attribute__((unused)) static ASActionMenuViewImpl_LLCanvas *new_ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASActionMenuViewImpl_LLCanvas *create_ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ASActionMenuViewImpl_LLCanvas)

@interface ASActionMenuViewImpl_ActionMenuViewCommandBuilder () {
 @public
  ASActionMenuViewImpl *this$0_;
}

@end

@interface ASActionMenuViewImpl_ActionMenuViewBean () {
 @public
  ASActionMenuViewImpl *this$0_;
}

@end

@interface ASActionMenuViewImpl_ActionMenuViewParamsBean () {
 @public
  ASActionMenuViewImpl *this$0_;
}

@end

@interface ASActionMenuViewImpl_MenuOnClickListener : NSObject < ADView_OnClickListener > {
 @public
  ASToolbarImpl *toolbar_;
  id<ADMenuItem> item_;
}

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$
                           withASToolbarImpl:(ASToolbarImpl *)toolbar
                              withADMenuItem:(id<ADMenuItem>)item;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASActionMenuViewImpl_MenuOnClickListener)

J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_MenuOnClickListener, toolbar_, ASToolbarImpl *)
J2OBJC_FIELD_SETTER(ASActionMenuViewImpl_MenuOnClickListener, item_, id<ADMenuItem>)

__attribute__((unused)) static void ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(ASActionMenuViewImpl_MenuOnClickListener *self, ASActionMenuViewImpl *outer$, ASToolbarImpl *toolbar, id<ADMenuItem> item);

__attribute__((unused)) static ASActionMenuViewImpl_MenuOnClickListener *new_ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(ASActionMenuViewImpl *outer$, ASToolbarImpl *toolbar, id<ADMenuItem> item) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASActionMenuViewImpl_MenuOnClickListener *create_ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(ASActionMenuViewImpl *outer$, ASToolbarImpl *toolbar, id<ADMenuItem> item);

J2OBJC_TYPE_LITERAL_HEADER(ASActionMenuViewImpl_MenuOnClickListener)

@interface ASActionMenuViewImpl_MenuClickListener : NSObject < ADView_OnClickListener > {
 @public
  __unsafe_unretained ASActionMenuViewImpl *this$0_;
}

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASActionMenuViewImpl_MenuClickListener)

__attribute__((unused)) static void ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_MenuClickListener *self, ASActionMenuViewImpl *outer$);

__attribute__((unused)) static ASActionMenuViewImpl_MenuClickListener *new_ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASActionMenuViewImpl_MenuClickListener *create_ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASActionMenuViewImpl_MenuClickListener)

NSString *ASActionMenuViewImpl_LOCAL_NAME = @"androidx.appcompat.widget.ActionMenuView";
NSString *ASActionMenuViewImpl_GROUP_NAME = @"androidx.appcompat.widget.ActionMenuView";

@implementation ASActionMenuViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.appcompat.widget.ActionMenuView.orientation", new_ASActionMenuViewImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"orientation"])) withTypeWithNSString:@"androidx.appcompat.widget.ActionMenuView.orientation"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAligned"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAlignedChildIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"divider"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureWithLargestChild"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"weightSum"])) withTypeWithNSString:@"float"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.appcompat.widget.ActionMenuView.divider", new_ASActionMenuViewImpl_Divider_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showDividers"])) withTypeWithNSString:@"androidx.appcompat.widget.ActionMenuView.divider"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dividerPadding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_weight"])) withTypeWithNSString:@"float"])) forChild]);
  ASActionMenuViewImpl_loadCustomAttributesWithNSString_(self, localName);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASActionMenuViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASActionMenuViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASActionMenuViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASActionMenuViewImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  actionMenuView_ = new_ASActionMenuViewImpl_ActionMenuViewExt_initWithASActionMenuViewImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASActionMenuViewImpl_createCanvas(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASActionMenuViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASActionMenuViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return actionMenuView_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXActionMenuView *) nil_chk(actionMenuView_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXActionMenuView *) nil_chk(actionMenuView_)) getChildCount]) {
    [((ADXActionMenuView *) nil_chk(actionMenuView_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASActionMenuViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) addViewWithADView:view];
    }
    else {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASActionMenuViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXActionMenuView_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASActionMenuViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXActionMenuView_LayoutParams *layoutParams = ASActionMenuViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    ((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->weight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXActionMenuView_LayoutParams *layoutParams = ASActionMenuViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
    case 3:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADXActionMenuView_LayoutParams *) nil_chk(layoutParams))->weight_);
    }
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASActionMenuViewImpl_ActionMenuViewExt *) nil_chk(((ASActionMenuViewImpl_ActionMenuViewExt *) cast_chk(actionMenuView_, [ASActionMenuViewImpl_ActionMenuViewExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"orientation", @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"weightSum", @"showDividers", @"dividerPadding" }, 9)) {
    case 0:
    {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) setOrientationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) setBaselineAlignedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 2:
    {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) setBaselineAlignedChildIndexWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      {
        [((ADXActionMenuView *) nil_chk(actionMenuView_)) setDividerDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
      }
    }
    break;
    case 4:
    {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 5:
    {
      {
        [((ADXActionMenuView *) nil_chk(actionMenuView_)) setMeasureWithLargestChildEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    case 6:
    {
      [((ADXActionMenuView *) nil_chk(actionMenuView_)) setWeightSumWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 7:
    {
      ASActionMenuViewImpl_setShowDividersWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASActionMenuViewImpl_setDividerPaddingWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"weightSum", @"showDividers", @"dividerPadding" }, 8)) {
    case 0:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADXActionMenuView *) nil_chk(actionMenuView_)) isBaselineAligned]);
    }
    case 1:
    {
      return JavaLangInteger_valueOfWithInt_([((ADXActionMenuView *) nil_chk(actionMenuView_)) getBaselineAlignedChildIndex]);
    }
    case 2:
    {
      {
        return [((ADXActionMenuView *) nil_chk(actionMenuView_)) getDividerDrawable];
      }
    }
    case 3:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADXActionMenuView *) nil_chk(actionMenuView_)) getGravity]);
      }
    }
    case 4:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADXActionMenuView *) nil_chk(actionMenuView_)) isMeasureWithLargestChildEnabled]);
      }
    }
    case 5:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADXActionMenuView *) nil_chk(actionMenuView_)) getWeightSum]);
    }
    case 6:
    {
      return ASActionMenuViewImpl_getShowDividers(self);
    }
    case 7:
    {
      return ASActionMenuViewImpl_getDividerPadding(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)loadCustomAttributesWithNSString:(NSString *)localName {
  ASActionMenuViewImpl_loadCustomAttributesWithNSString_(self, localName);
}

- (ADView *)getItemViewWithADMenuItem:(id<ADMenuItem>)item {
  id<ASIWidget> widget = [((id<JavaUtilMap>) nil_chk(menuItemMap_)) getWithId:item];
  if (widget == nil) {
    widget = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"Toolbar_itemView", self, true);
    (void) [((id<JavaUtilMap>) nil_chk(menuItemMap_)) putWithId:item withId:widget];
    ADDrawable *drawable = [((id<ADMenuItem>) nil_chk(item)) getIcon];
    if (drawable != nil) {
      jint mMaxIconSize = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:ASActionMenuViewImpl_MAX_ICON_SIZE withNSString:@"dimension"], [JavaLangInteger class]))) intValue];
      IOSIntArray *widthHeightArr = ASActionMenuViewImpl_getImageDimensionWithADDrawable_(self, drawable);
      jint width = IOSIntArray_Get(nil_chk(widthHeightArr), 0);
      jint height = IOSIntArray_Get(widthHeightArr, 1);
      if (width > mMaxIconSize) {
        jfloat scale_ = (jfloat) mMaxIconSize / width;
        width = mMaxIconSize;
        JreTimesAssignIntF(&height, scale_);
      }
      if (height > mMaxIconSize) {
        jfloat scale_ = (jfloat) mMaxIconSize / height;
        height = mMaxIconSize;
        JreTimesAssignIntF(&width, scale_);
      }
      [drawable setMinimumHeightWithInt:height];
      [drawable setMinimumWidthWithInt:width];
      ASActionMenuViewImpl_resizeImageIfRequiredWithADDrawable_withInt_withInt_(self, drawable, width, height);
      [((id<ASIWidget>) nil_chk(widget)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"drawableStart") withId:drawable withBoolean:true];
    }
    ASWidgetAttribute *tooltipAttr = ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"tooltipText");
    if (tooltipAttr != nil) {
      [((id<ASIWidget>) nil_chk(widget)) setAttributeWithASWidgetAttribute:tooltipAttr withId:[item getTitle] withBoolean:true];
    }
    if (ASActionMenuViewImpl_shouldAllowTextWithIcon(self) || drawable == nil) {
      [((id<ASIWidget>) nil_chk(widget)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"text") withId:[item getTitle] withBoolean:true];
    }
    ASToolbarImpl *toolbar = (ASToolbarImpl *) cast_chk([self getParent], [ASToolbarImpl class]);
    if ([((ASToolbarImpl *) nil_chk(toolbar)) getOnMenuItemClickListener] != nil) {
      ASActionMenuViewImpl_addMenuClickListenerWithADMenuItem_withASIWidget_withASToolbarImpl_(self, item, widget, toolbar);
    }
    ASBaseMeasurableView *view = (ASBaseMeasurableView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ASBaseMeasurableView class]);
    [((ASBaseMeasurableView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:new_ADXActionMenuView_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT)];
  }
  ASBaseMeasurableView *view = (ASBaseMeasurableView *) cast_chk([widget asWidget], [ASBaseMeasurableView class]);
  return view;
}

- (jboolean)shouldAllowTextWithIcon {
  return ASActionMenuViewImpl_shouldAllowTextWithIcon(self);
}

- (id<ASIWidget>)getOverFlowButtonWidget {
  return overFlowButton_;
}

- (ADView *)getOverFlowButton {
  return ASActionMenuViewImpl_getOverFlowButton(self);
}

- (void)setDividerPaddingWithId:(id)objValue {
  ASActionMenuViewImpl_setDividerPaddingWithId_(self, objValue);
}

- (void)setShowDividersWithId:(id)objValue {
  ASActionMenuViewImpl_setShowDividersWithId_(self, objValue);
}

- (id)getDividerPadding {
  return ASActionMenuViewImpl_getDividerPadding(self);
}

- (id)getShowDividers {
  return ASActionMenuViewImpl_getShowDividers(self);
}

- (void)createCanvas {
  ASActionMenuViewImpl_createCanvas(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXActionMenuView *) nil_chk(actionMenuView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASActionMenuViewImpl_ActionMenuViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASActionMenuViewImpl_ActionMenuViewBean_initWithASActionMenuViewImpl_(self);
  }
  return bean_;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASActionMenuViewImpl_ActionMenuViewCommandBuilder_initWithASActionMenuViewImpl_(self);
  }
  return builder_;
}

- (ASActionMenuViewImpl_ActionMenuViewParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASActionMenuViewImpl_ActionMenuViewParamsBean_initWithASActionMenuViewImpl_(self);
  }
  return paramsBean_;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder_initWithASActionMenuViewImpl_(self);
  }
  return paramsBuilder_;
}

- (void)addMenuClickListenerWithADMenuItem:(id<ADMenuItem>)item
                             withASIWidget:(id<ASIWidget>)widget
                         withASToolbarImpl:(ASToolbarImpl *)toolbar {
  ASActionMenuViewImpl_addMenuClickListenerWithADMenuItem_withASIWidget_withASToolbarImpl_(self, item, widget, toolbar);
}

- (IOSIntArray *)getImageDimensionWithADDrawable:(ADDrawable *)drawable {
  return ASActionMenuViewImpl_getImageDimensionWithADDrawable_(self, drawable);
}

- (void)resizeImageIfRequiredWithADDrawable:(ADDrawable *)drawable
                                    withInt:(jint)width
                                    withInt:(jint)height {
  ASActionMenuViewImpl_resizeImageIfRequiredWithADDrawable_withInt_withInt_(self, drawable, width, height);
}

- (jboolean)isLandScape {
  return ASActionMenuViewImpl_isLandScape(self);
}

- (void)createPopUpMenuWithASToolbarImpl:(ASToolbarImpl *)toolbar {
  ASActionMenuViewImpl_createPopUpMenuWithASToolbarImpl_(self, toolbar);
}

- (void)nativeShowKxMenuWithId:(id)root
                        withId:(id)overflowButton {
  ASActionMenuViewImpl_nativeShowKxMenuWithId_withId_(self, root, overflowButton);
}

- (void)setKxMenuOnButtonWithId:(id)button
               withJavaUtilList:(id<JavaUtilList>)actionsObjs {
  ASActionMenuViewImpl_setKxMenuOnButtonWithId_withJavaUtilList_(self, button, actionsObjs);
}

- (id)getKXMenuWithASToolbarImpl:(ASToolbarImpl *)toolbar
             withADXMenuItemImpl:(ADXMenuItemImpl *)menuItem {
  return ASActionMenuViewImpl_getKXMenuWithASToolbarImpl_withADXMenuItemImpl_(self, toolbar, menuItem);
}

- (void) menuItemClicked:(id)sender {
  [self handleOnKxMenuItemClickWithId: sender];
}

- (void)handleOnKxMenuItemClickWithId:(id)kxmenuItem {
  ASActionMenuViewImpl_handleOnKxMenuItemClickWithId_(self, kxmenuItem);
}

- (jboolean)isKxMenuToBeShown {
  return ASActionMenuViewImpl_isKxMenuToBeShown(self);
}

- (void)setMenuOnButtonWithId:(id)button
             withJavaUtilList:(id<JavaUtilList>)actionsObjs {
  ASActionMenuViewImpl_setMenuOnButtonWithId_withJavaUtilList_(self, button, actionsObjs);
}

- (id)getActionWithASToolbarImpl:(ASToolbarImpl *)toolbar
             withADXMenuItemImpl:(ADXMenuItemImpl *)menuItem {
  return ASActionMenuViewImpl_getActionWithASToolbarImpl_withADXMenuItemImpl_(self, toolbar, menuItem);
}

- (void)handleOnMenuItemClickWithASToolbarImpl:(ASToolbarImpl *)toolbar
                           withADXMenuItemImpl:(ADXMenuItemImpl *)menuItem {
  ASActionMenuViewImpl_handleOnMenuItemClickWithASToolbarImpl_withADXMenuItemImpl_(self, toolbar, menuItem);
}

- (void)initialized {
  [super initialized];
  if (overFlowButton_ != nil) {
    id<JavaUtilList> actions = new_JavaUtilArrayList_init();
    if (menuItemToNativeMenuItemMap_ == nil && ASActionMenuViewImpl_isKxMenuToBeShown(self)) {
      menuItemToNativeMenuItemMap_ = new_JavaUtilHashMap_init();
    }
    for (ADXMenuItemImpl * __strong menuItem in nil_chk([((ADXMenuBuilder *) nil_chk([((ADXActionMenuView *) nil_chk(actionMenuView_)) getMenu])) getNonActionItems])) {
      if (menuItemToNativeMenuItemMap_ != nil) {
        id item = ASActionMenuViewImpl_getKXMenuWithASToolbarImpl_withADXMenuItemImpl_(self, toolbar_, menuItem);
        [actions addWithId:item];
        (void) [((id<JavaUtilMap>) nil_chk(menuItemToNativeMenuItemMap_)) putWithId:item withId:menuItem];
      }
      else {
        id item = ASActionMenuViewImpl_getActionWithASToolbarImpl_withADXMenuItemImpl_(self, toolbar_, menuItem);
        [actions addWithId:item];
      }
    }
    if (ASActionMenuViewImpl_isKxMenuToBeShown(self)) {
      ASActionMenuViewImpl_setKxMenuOnButtonWithId_withJavaUtilList_(self, [((id<ASIWidget>) nil_chk(overFlowButton_)) asNativeWidget], actions);
    }
    else {
      ASActionMenuViewImpl_setMenuOnButtonWithId_withJavaUtilList_(self, [((id<ASIWidget>) nil_chk(overFlowButton_)) asNativeWidget], actions);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXActionMenuView_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, 1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 37, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 46, 47, -1, 48, -1, -1 },
    { NULL, "LNSObject;", 0x102, 49, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 52, 47, -1, 48, -1, -1 },
    { NULL, "LNSObject;", 0x102, 53, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 50, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(loadCustomAttributesWithNSString:);
  methods[24].selector = @selector(getItemViewWithADMenuItem:);
  methods[25].selector = @selector(shouldAllowTextWithIcon);
  methods[26].selector = @selector(getOverFlowButtonWidget);
  methods[27].selector = @selector(getOverFlowButton);
  methods[28].selector = @selector(setDividerPaddingWithId:);
  methods[29].selector = @selector(setShowDividersWithId:);
  methods[30].selector = @selector(getDividerPadding);
  methods[31].selector = @selector(getShowDividers);
  methods[32].selector = @selector(createCanvas);
  methods[33].selector = @selector(setIdWithNSString:);
  methods[34].selector = @selector(getPluginWithNSString:);
  methods[35].selector = @selector(getBean);
  methods[36].selector = @selector(getBuilder);
  methods[37].selector = @selector(getParamsBean);
  methods[38].selector = @selector(getParamsBuilder);
  methods[39].selector = @selector(addMenuClickListenerWithADMenuItem:withASIWidget:withASToolbarImpl:);
  methods[40].selector = @selector(getImageDimensionWithADDrawable:);
  methods[41].selector = @selector(resizeImageIfRequiredWithADDrawable:withInt:withInt:);
  methods[42].selector = @selector(isLandScape);
  methods[43].selector = @selector(createPopUpMenuWithASToolbarImpl:);
  methods[44].selector = @selector(nativeShowKxMenuWithId:withId:);
  methods[45].selector = @selector(setKxMenuOnButtonWithId:withJavaUtilList:);
  methods[46].selector = @selector(getKXMenuWithASToolbarImpl:withADXMenuItemImpl:);
  methods[47].selector = @selector(handleOnKxMenuItemClickWithId:);
  methods[48].selector = @selector(isKxMenuToBeShown);
  methods[49].selector = @selector(setMenuOnButtonWithId:withJavaUtilList:);
  methods[50].selector = @selector(getActionWithASToolbarImpl:withADXMenuItemImpl:);
  methods[51].selector = @selector(handleOnMenuItemClickWithASToolbarImpl:withADXMenuItemImpl:);
  methods[52].selector = @selector(initialized);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvas_", "LADCanvas;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "actionMenuView_", "LADXActionMenuView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_ICON_SIZE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 57, -1, -1 },
    { "menuItemMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 58, -1 },
    { "overFlowButton_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASActionMenuViewImpl_ActionMenuViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASActionMenuViewImpl_ActionMenuViewParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "toolbar_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "itemArray_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "OVERFLOW_BUTTON_TYPE_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "menuItemToNativeMenuItemMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 59, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "loadCustomAttributes", "getItemView", "LADMenuItem;", "setDividerPadding", "LNSObject;", "setShowDividers", "setId", "getPlugin", "addMenuClickListener", "LADMenuItem;LASIWidget;LASToolbarImpl;", "getImageDimension", "LADDrawable;", "resizeImageIfRequired", "LADDrawable;II", "createPopUpMenu", "LASToolbarImpl;", "nativeShowKxMenu", "LNSObject;LNSObject;", "setKxMenuOnButton", "LNSObject;LJavaUtilList;", "(Ljava/lang/Object;Ljava/util/List<Ljava/lang/Object;>;)V", "getKXMenu", "LASToolbarImpl;LADXMenuItemImpl;", "handleOnKxMenuItemClick", "setMenuOnButton", "getAction", "handleOnMenuItemClick", &ASActionMenuViewImpl_LOCAL_NAME, &ASActionMenuViewImpl_GROUP_NAME, &ASActionMenuViewImpl_MAX_ICON_SIZE, "Ljava/util/Map<Lr/android/view/MenuItem;Lcom/ashera/widget/IWidget;>;", "Ljava/util/Map<Ljava/lang/Object;Landroidx/appcompat/view/menu/MenuItemImpl;>;", "LASActionMenuViewImpl_Orientation;LASActionMenuViewImpl_Divider;LASActionMenuViewImpl_ActionMenuViewExt;LASActionMenuViewImpl_ShowAsAction;LASActionMenuViewImpl_LLCanvas;LASActionMenuViewImpl_ActionMenuViewCommandBuilder;LASActionMenuViewImpl_ActionMenuViewBean;LASActionMenuViewImpl_ActionMenuViewParamsBean;LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;LASActionMenuViewImpl_MenuOnClickListener;LASActionMenuViewImpl_MenuClickListener;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl = { "ActionMenuViewImpl", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 53, 16, -1, 60, -1, -1, -1 };
  return &_ASActionMenuViewImpl;
}

@end

void ASActionMenuViewImpl_init(ASActionMenuViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASActionMenuViewImpl_GROUP_NAME, ASActionMenuViewImpl_LOCAL_NAME);
  self->menuItemMap_ = new_JavaUtilHashMap_init();
  self->OVERFLOW_BUTTON_TYPE_ = @"ImageButton";
}

ASActionMenuViewImpl *new_ASActionMenuViewImpl_init() {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl, init)
}

ASActionMenuViewImpl *create_ASActionMenuViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl, init)
}

void ASActionMenuViewImpl_initWithNSString_(ASActionMenuViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASActionMenuViewImpl_GROUP_NAME, localname);
  self->menuItemMap_ = new_JavaUtilHashMap_init();
  self->OVERFLOW_BUTTON_TYPE_ = @"ImageButton";
}

ASActionMenuViewImpl *new_ASActionMenuViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl, initWithNSString_, localname)
}

ASActionMenuViewImpl *create_ASActionMenuViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl, initWithNSString_, localname)
}

void ASActionMenuViewImpl_initWithNSString_withNSString_(ASActionMenuViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->menuItemMap_ = new_JavaUtilHashMap_init();
  self->OVERFLOW_BUTTON_TYPE_ = @"ImageButton";
}

ASActionMenuViewImpl *new_ASActionMenuViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASActionMenuViewImpl *create_ASActionMenuViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASActionMenuViewImpl_setWidgetOnNativeClass(ASActionMenuViewImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASActionMenuViewImpl_createLayoutParamsWithADView_(ASActionMenuViewImpl *self, ADView *view) {
  ADXActionMenuView_LayoutParams *layoutParams = (ADXActionMenuView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXActionMenuView_LayoutParams class]);
  layoutParams = (ADXActionMenuView_LayoutParams *) cast_chk([view getLayoutParams], [ADXActionMenuView_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXActionMenuView_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXActionMenuView_LayoutParams *ASActionMenuViewImpl_getLayoutParamsWithADView_(ASActionMenuViewImpl *self, ADView *view) {
  return (ADXActionMenuView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXActionMenuView_LayoutParams class]);
}

void ASActionMenuViewImpl_loadCustomAttributesWithNSString_(ASActionMenuViewImpl *self, NSString *localName) {
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.appcompat.widget.ActionMenuView.showAsAction", new_ASActionMenuViewImpl_ShowAsAction_init());
}

jboolean ASActionMenuViewImpl_shouldAllowTextWithIcon(ASActionMenuViewImpl *self) {
  jint width = ASPluginInvoker_getScreenWidthDp();
  jint height = ASPluginInvoker_getScreenHeightDp();
  jint scale_ = 2;
  return width >= (480 * scale_) || (width >= 640 * scale_ && height >= 480 * scale_) || ASActionMenuViewImpl_isLandScape(self);
}

ADView *ASActionMenuViewImpl_getOverFlowButton(ASActionMenuViewImpl *self) {
  ASToolbarImpl *toolbar = (ASToolbarImpl *) cast_chk([self getParent], [ASToolbarImpl class]);
  if (self->overFlowButton_ == nil) {
    self->overFlowButton_ = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(self->OVERFLOW_BUTTON_TYPE_, @"Toolbar_overFlowButton", self, true);
  }
  ASActionMenuViewImpl_createPopUpMenuWithASToolbarImpl_(self, toolbar);
  return (ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->overFlowButton_)) asWidget], [ADView class]);
}

void ASActionMenuViewImpl_setDividerPaddingWithId_(ASActionMenuViewImpl *self, id objValue) {
  {
    [((ADXActionMenuView *) nil_chk(self->actionMenuView_)) setDividerPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASActionMenuViewImpl_setShowDividersWithId_(ASActionMenuViewImpl *self, id objValue) {
  {
    [((ADXActionMenuView *) nil_chk(self->actionMenuView_)) setShowDividersWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

id ASActionMenuViewImpl_getDividerPadding(ASActionMenuViewImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADXActionMenuView *) nil_chk(self->actionMenuView_)) getDividerPadding]);
  }
}

id ASActionMenuViewImpl_getShowDividers(ASActionMenuViewImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADXActionMenuView *) nil_chk(self->actionMenuView_)) getShowDividers]);
  }
}

void ASActionMenuViewImpl_createCanvas(ASActionMenuViewImpl *self) {
  self->canvas_ = new_ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(self);
}

void ASActionMenuViewImpl_addMenuClickListenerWithADMenuItem_withASIWidget_withASToolbarImpl_(ASActionMenuViewImpl *self, id<ADMenuItem> item, id<ASIWidget> widget, ASToolbarImpl *toolbar) {
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(widget, @"click", [((id<ASIWidget>) nil_chk(widget)) asNativeWidget], new_ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(self, toolbar, item));
}

IOSIntArray *ASActionMenuViewImpl_getImageDimensionWithADDrawable_(ASActionMenuViewImpl *self, ADDrawable *drawable) {
  return [IOSIntArray newArrayWithInts:(jint[]){ [((ADDrawable *) nil_chk(drawable)) getMinimumWidth], [drawable getMinimumHeight] } count:2];
}

void ASActionMenuViewImpl_resizeImageIfRequiredWithADDrawable_withInt_withInt_(ASActionMenuViewImpl *self, ADDrawable *drawable, jint width, jint height) {
}

jboolean ASActionMenuViewImpl_isLandScape(ASActionMenuViewImpl *self) {
  return [((NSString *) nil_chk(ASPluginInvoker_getOrientation())) isEqual:@"landscape"];
}

void ASActionMenuViewImpl_createPopUpMenuWithASToolbarImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar) {
  self->toolbar_ = toolbar;
  if (ASActionMenuViewImpl_isKxMenuToBeShown(self)) {
    ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(self, @"menu-click", [((id<ASIWidget>) nil_chk(self->overFlowButton_)) asNativeWidget], new_ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(self));
  }
}

void ASActionMenuViewImpl_nativeShowKxMenuWithId_withId_(ASActionMenuViewImpl *self, id root, id overflowButton) {
  CGRect newFrame = [((UIView*) overflowButton) convertRect:((UIView*) overflowButton).frame toView:((UIView*) root)];
  [KxMenu showMenuInView:((UIView*) root) fromRect:newFrame menuItems:self->itemArray_];
}

void ASActionMenuViewImpl_setKxMenuOnButtonWithId_withJavaUtilList_(ASActionMenuViewImpl *self, id button, id<JavaUtilList> actionsObjs) {
  NSMutableArray* actions = [[NSMutableArray alloc] init];
  for (id action in actionsObjs) {
    [actions addObject: action];
  }
  self->itemArray_ = actions;
}

id ASActionMenuViewImpl_getKXMenuWithASToolbarImpl_withADXMenuItemImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar, ADXMenuItemImpl *menuItem) {
  return [KxMenuItem menuItem:[menuItem getTitle] image:nil target:self action:@selector(menuItemClicked:)];
}

void ASActionMenuViewImpl_handleOnKxMenuItemClickWithId_(ASActionMenuViewImpl *self, id kxmenuItem) {
  if ([((ASToolbarImpl *) nil_chk(self->toolbar_)) getOnMenuItemClickListener] != nil) {
    [((id<ADXToolbar_OnMenuItemClickListener>) nil_chk([((ASToolbarImpl *) nil_chk(self->toolbar_)) getOnMenuItemClickListener])) onMenuItemClickWithADMenuItem:[((id<JavaUtilMap>) nil_chk(self->menuItemToNativeMenuItemMap_)) getWithId:kxmenuItem]];
  }
}

jboolean ASActionMenuViewImpl_isKxMenuToBeShown(ASActionMenuViewImpl *self) {
  return ![self checkIosVersionWithNSString:@"13.0"];
}

void ASActionMenuViewImpl_setMenuOnButtonWithId_withJavaUtilList_(ASActionMenuViewImpl *self, id button, id<JavaUtilList> actionsObjs) {
  NSMutableArray* actions = [[NSMutableArray alloc] init];
  for (id action in actionsObjs) {
    [actions addObject: action];
  }
  UIMenu* menu = [UIMenu menuWithTitle:@"" children:actions];
  ((UIButton*)button).showsMenuAsPrimaryAction = YES;
  ((UIButton*)button).menu = menu;
}

id ASActionMenuViewImpl_getActionWithASToolbarImpl_withADXMenuItemImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar, ADXMenuItemImpl *menuItem) {
  return [UIAction actionWithTitle:[menuItem getTitle]
  image:nil
  identifier:nil
  handler:^(__kindof UIAction* _Nonnull action) {
    [self handleOnMenuItemClickWithASToolbarImpl: toolbar withADXMenuItemImpl: menuItem];
  }];
}

void ASActionMenuViewImpl_handleOnMenuItemClickWithASToolbarImpl_withADXMenuItemImpl_(ASActionMenuViewImpl *self, ASToolbarImpl *toolbar, ADXMenuItemImpl *menuItem) {
  if ([((ASToolbarImpl *) nil_chk(toolbar)) getOnMenuItemClickListener] != nil) {
    [((id<ADXToolbar_OnMenuItemClickListener>) nil_chk([toolbar getOnMenuItemClickListener])) onMenuItemClickWithADMenuItem:menuItem];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl)

@implementation ASActionMenuViewImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASActionMenuViewImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASActionMenuViewImpl;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_Orientation = { "Orientation", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_Orientation;
}

@end

void ASActionMenuViewImpl_Orientation_init(ASActionMenuViewImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASActionMenuViewImpl_Orientation *new_ASActionMenuViewImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_Orientation, init)
}

ASActionMenuViewImpl_Orientation *create_ASActionMenuViewImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_Orientation)

@implementation ASActionMenuViewImpl_Divider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASActionMenuViewImpl_Divider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASActionMenuViewImpl;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_Divider = { "Divider", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_Divider;
}

@end

void ASActionMenuViewImpl_Divider_init(ASActionMenuViewImpl_Divider *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"beginning" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASActionMenuViewImpl_Divider *new_ASActionMenuViewImpl_Divider_init() {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_Divider, init)
}

ASActionMenuViewImpl_Divider *create_ASActionMenuViewImpl_Divider_init() {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_Divider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_Divider)

@implementation ASActionMenuViewImpl_ActionMenuViewExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$ {
  ASActionMenuViewImpl_ActionMenuViewExt_initWithASActionMenuViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  [((id<ADCanvas>) nil_chk(this$0_->canvas_)) reset];
  [self onDrawWithADCanvas:this$0_->canvas_];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (ADView *)getItemViewWithADMenuItem:(id<ADMenuItem>)item {
  return [this$0_ getItemViewWithADMenuItem:item];
}

- (ADView *)getOverFlowButton {
  return ASActionMenuViewImpl_getOverFlowButton(this$0_);
}

- (void)__javaClone:(ASActionMenuViewImpl_ActionMenuViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASActionMenuViewImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  methods[18].selector = @selector(getItemViewWithADMenuItem:);
  methods[19].selector = @selector(getOverFlowButton);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASActionMenuViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASActionMenuViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility", "getItemView", "LADMenuItem;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_ActionMenuViewExt = { "ActionMenuViewExt", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 20, 5, 3, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_ActionMenuViewExt;
}

@end

void ASActionMenuViewImpl_ActionMenuViewExt_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_ActionMenuViewExt *self, ASActionMenuViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXActionMenuView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASActionMenuViewImpl_ActionMenuViewExt *new_ASActionMenuViewImpl_ActionMenuViewExt_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_ActionMenuViewExt, initWithASActionMenuViewImpl_, outer$)
}

ASActionMenuViewImpl_ActionMenuViewExt *create_ASActionMenuViewImpl_ActionMenuViewExt_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_ActionMenuViewExt, initWithASActionMenuViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_ActionMenuViewExt)

@implementation ASActionMenuViewImpl_ShowAsAction

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASActionMenuViewImpl_ShowAsAction_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASActionMenuViewImpl;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_ShowAsAction = { "ShowAsAction", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_ShowAsAction;
}

@end

void ASActionMenuViewImpl_ShowAsAction_init(ASActionMenuViewImpl_ShowAsAction *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"always" withId:JavaLangInteger_valueOfWithInt_(ADMenuItem_SHOW_AS_ACTION_ALWAYS)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ifRoom" withId:JavaLangInteger_valueOfWithInt_(ADMenuItem_SHOW_AS_ACTION_IF_ROOM)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"never" withId:JavaLangInteger_valueOfWithInt_(ADMenuItem_SHOW_AS_ACTION_NEVER)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"collapseActionView" withId:JavaLangInteger_valueOfWithInt_(ADMenuItem_SHOW_AS_ACTION_COLLAPSE_ACTION_VIEW)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"withText" withId:JavaLangInteger_valueOfWithInt_(ADMenuItem_SHOW_AS_ACTION_WITH_TEXT)];
  }
}

ASActionMenuViewImpl_ShowAsAction *new_ASActionMenuViewImpl_ShowAsAction_init() {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_ShowAsAction, init)
}

ASActionMenuViewImpl_ShowAsAction *create_ASActionMenuViewImpl_ShowAsAction_init() {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_ShowAsAction, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_ShowAsAction)

@implementation ASActionMenuViewImpl_LLCanvas

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(self, widget);
  return self;
}

- (void)drawWithADDrawable:(ADDrawable *)mDivider {
  if ([((ADDrawable *) nil_chk(mDivider)) getDrawable] != nil) {
    id imageView = [self nativeCreateImageViewWithId:[mDivider getDrawable]];
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(imageView, [mDivider getLeft], [mDivider getTop], [mDivider getRight], [mDivider getBottom]);
    [((id<JavaUtilList>) nil_chk(imageViews_)) addWithId:imageView];
    ASViewGroupImpl_nativeAddViewWithId_withId_([((id<ASIWidget>) nil_chk(widget_)) asNativeWidget], imageView);
  }
}

- (void)reset {
  for (id __strong imageView in nil_chk(imageViews_)) {
    ASViewGroupImpl_removeViewWithId_(imageView);
  }
  [imageViews_ clear];
}

- (id)nativeCreateImageViewWithId:(id)image {
  ASUIImageView* imageView = [ASUIImageView new];
  if ([image isKindOfClass:[UIImage class]]) {
    imageView.image = image;
    imageView.backgroundColor = nil;
  }else if ([image isKindOfClass:[UIColor class]]) {
    imageView.backgroundColor = image;
    imageView.image = nil;
  }
  return imageView;
}

- (void)translateWithInt:(jint)arg0
                 withInt:(jint)arg1 {
  ADCanvas_translateWithInt_withInt_(self, arg0, arg1);
}

- (void)__javaClone:(ASActionMenuViewImpl_LLCanvas *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(drawWithADDrawable:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(nativeCreateImageViewWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "imageViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "draw", "LADDrawable;", "nativeCreateImageView", "LNSObject;", "Ljava/util/List<Ljava/lang/Object;>;", "LASActionMenuViewImpl;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_LLCanvas = { "LLCanvas", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1a, 4, 2, 6, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_LLCanvas;
}

@end

void ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(ASActionMenuViewImpl_LLCanvas *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->imageViews_ = new_JavaUtilArrayList_init();
  self->widget_ = widget;
}

ASActionMenuViewImpl_LLCanvas *new_ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_LLCanvas, initWithASIWidget_, widget)
}

ASActionMenuViewImpl_LLCanvas *create_ASActionMenuViewImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_LLCanvas, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_LLCanvas)

@implementation ASActionMenuViewImpl_ActionMenuViewCommandBuilder

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$ {
  ASActionMenuViewImpl_ActionMenuViewCommandBuilder_initWithASActionMenuViewImpl_(self, outer$);
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setOrientationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetBaselineAligned {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAligned"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isBaselineAligned {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAligned"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setBaselineAlignedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAligned"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetBaselineAlignedChildIndex {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignedChildIndex"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBaselineAlignedChildIndex {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignedChildIndex"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setBaselineAlignedChildIndexWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignedChildIndex"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetDivider {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"divider"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDivider {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"divider"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setDividerWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"divider"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetMeasureWithLargestChild {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureWithLargestChild"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isMeasureWithLargestChild {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureWithLargestChild"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setMeasureWithLargestChildWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureWithLargestChild"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetWeightSum {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWeightSum {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setWeightSumWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetShowDividers {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDividers"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShowDividers {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDividers"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setShowDividersWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDividers"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)tryGetDividerPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dividerPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDividerPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dividerPadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandBuilder *)setDividerPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dividerPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASActionMenuViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setOrientationWithNSString:);
  methods[3].selector = @selector(tryGetBaselineAligned);
  methods[4].selector = @selector(isBaselineAligned);
  methods[5].selector = @selector(setBaselineAlignedWithBoolean:);
  methods[6].selector = @selector(tryGetBaselineAlignedChildIndex);
  methods[7].selector = @selector(getBaselineAlignedChildIndex);
  methods[8].selector = @selector(setBaselineAlignedChildIndexWithInt:);
  methods[9].selector = @selector(tryGetDivider);
  methods[10].selector = @selector(getDivider);
  methods[11].selector = @selector(setDividerWithNSString:);
  methods[12].selector = @selector(tryGetGravity);
  methods[13].selector = @selector(getGravity);
  methods[14].selector = @selector(setGravityWithNSString:);
  methods[15].selector = @selector(tryGetMeasureWithLargestChild);
  methods[16].selector = @selector(isMeasureWithLargestChild);
  methods[17].selector = @selector(setMeasureWithLargestChildWithBoolean:);
  methods[18].selector = @selector(tryGetWeightSum);
  methods[19].selector = @selector(getWeightSum);
  methods[20].selector = @selector(setWeightSumWithFloat:);
  methods[21].selector = @selector(tryGetShowDividers);
  methods[22].selector = @selector(getShowDividers);
  methods[23].selector = @selector(setShowDividersWithNSString:);
  methods[24].selector = @selector(tryGetDividerPadding);
  methods[25].selector = @selector(getDividerPadding);
  methods[26].selector = @selector(setDividerPaddingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASActionMenuViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASActionMenuViewImpl;", "execute", "Z", "setOrientation", "LNSString;", "setBaselineAligned", "setBaselineAlignedChildIndex", "I", "setDivider", "setGravity", "setMeasureWithLargestChild", "setWeightSum", "F", "setShowDividers", "setDividerPadding", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/toolbar/ActionMenuViewImpl$ActionMenuViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_ActionMenuViewCommandBuilder = { "ActionMenuViewCommandBuilder", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 27, 1, 0, -1, -1, 15, -1 };
  return &_ASActionMenuViewImpl_ActionMenuViewCommandBuilder;
}

@end

void ASActionMenuViewImpl_ActionMenuViewCommandBuilder_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_ActionMenuViewCommandBuilder *self, ASActionMenuViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASActionMenuViewImpl_ActionMenuViewCommandBuilder *new_ASActionMenuViewImpl_ActionMenuViewCommandBuilder_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_ActionMenuViewCommandBuilder, initWithASActionMenuViewImpl_, outer$)
}

ASActionMenuViewImpl_ActionMenuViewCommandBuilder *create_ASActionMenuViewImpl_ActionMenuViewCommandBuilder_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_ActionMenuViewCommandBuilder, initWithASActionMenuViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_ActionMenuViewCommandBuilder)

@implementation ASActionMenuViewImpl_ActionMenuViewBean

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$ {
  ASActionMenuViewImpl_ActionMenuViewBean_initWithASActionMenuViewImpl_(self, outer$);
  return self;
}

- (void)setOrientationWithNSString:(NSString *)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOrientationWithNSString:value])) executeWithBoolean:true];
}

- (id)isBaselineAligned {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaselineAligned])) executeWithBoolean:false])) isBaselineAligned];
}

- (void)setBaselineAlignedWithBoolean:(jboolean)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineAlignedWithBoolean:value])) executeWithBoolean:true];
}

- (id)getBaselineAlignedChildIndex {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaselineAlignedChildIndex])) executeWithBoolean:false])) getBaselineAlignedChildIndex];
}

- (void)setBaselineAlignedChildIndexWithInt:(jint)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineAlignedChildIndexWithInt:value])) executeWithBoolean:true];
}

- (id)getDivider {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDivider])) executeWithBoolean:false])) getDivider];
}

- (void)setDividerWithNSString:(NSString *)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDividerWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)isMeasureWithLargestChild {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMeasureWithLargestChild])) executeWithBoolean:false])) isMeasureWithLargestChild];
}

- (void)setMeasureWithLargestChildWithBoolean:(jboolean)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMeasureWithLargestChildWithBoolean:value])) executeWithBoolean:true];
}

- (id)getWeightSum {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWeightSum])) executeWithBoolean:false])) getWeightSum];
}

- (void)setWeightSumWithFloat:(jfloat)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWeightSumWithFloat:value])) executeWithBoolean:true];
}

- (id)getShowDividers {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShowDividers])) executeWithBoolean:false])) getShowDividers];
}

- (void)setShowDividersWithNSString:(NSString *)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShowDividersWithNSString:value])) executeWithBoolean:true];
}

- (id)getDividerPadding {
  return [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDividerPadding])) executeWithBoolean:false])) getDividerPadding];
}

- (void)setDividerPaddingWithNSString:(NSString *)value {
  (void) [((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDividerPaddingWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASActionMenuViewImpl:);
  methods[1].selector = @selector(setOrientationWithNSString:);
  methods[2].selector = @selector(isBaselineAligned);
  methods[3].selector = @selector(setBaselineAlignedWithBoolean:);
  methods[4].selector = @selector(getBaselineAlignedChildIndex);
  methods[5].selector = @selector(setBaselineAlignedChildIndexWithInt:);
  methods[6].selector = @selector(getDivider);
  methods[7].selector = @selector(setDividerWithNSString:);
  methods[8].selector = @selector(getGravity);
  methods[9].selector = @selector(setGravityWithNSString:);
  methods[10].selector = @selector(isMeasureWithLargestChild);
  methods[11].selector = @selector(setMeasureWithLargestChildWithBoolean:);
  methods[12].selector = @selector(getWeightSum);
  methods[13].selector = @selector(setWeightSumWithFloat:);
  methods[14].selector = @selector(getShowDividers);
  methods[15].selector = @selector(setShowDividersWithNSString:);
  methods[16].selector = @selector(getDividerPadding);
  methods[17].selector = @selector(setDividerPaddingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASActionMenuViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASActionMenuViewImpl;", "setOrientation", "LNSString;", "setBaselineAligned", "Z", "setBaselineAlignedChildIndex", "I", "setDivider", "setGravity", "setMeasureWithLargestChild", "setWeightSum", "F", "setShowDividers", "setDividerPadding" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_ActionMenuViewBean = { "ActionMenuViewBean", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 18, 1, 0, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_ActionMenuViewBean;
}

@end

void ASActionMenuViewImpl_ActionMenuViewBean_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_ActionMenuViewBean *self, ASActionMenuViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASActionMenuViewImpl_ActionMenuViewBean *new_ASActionMenuViewImpl_ActionMenuViewBean_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_ActionMenuViewBean, initWithASActionMenuViewImpl_, outer$)
}

ASActionMenuViewImpl_ActionMenuViewBean *create_ASActionMenuViewImpl_ActionMenuViewBean_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_ActionMenuViewBean, initWithASActionMenuViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_ActionMenuViewBean)

@implementation ASActionMenuViewImpl_ActionMenuViewParamsBean

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$ {
  ASActionMenuViewImpl_ActionMenuViewParamsBean_initWithASActionMenuViewImpl_(self, outer$);
  return self;
}

- (id)getLayoutGravityWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutGravity])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutGravity];
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutWeightWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutWeight])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutWeight];
}

- (void)setLayoutWeightWithASIWidget:(id<ASIWidget>)w
                           withFloat:(jfloat)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([((ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutWeightWithFloat:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASActionMenuViewImpl:);
  methods[1].selector = @selector(getLayoutGravityWithASIWidget:);
  methods[2].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  methods[3].selector = @selector(getLayoutWeightWithASIWidget:);
  methods[4].selector = @selector(setLayoutWeightWithASIWidget:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASActionMenuViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASActionMenuViewImpl;", "getLayoutGravity", "LASIWidget;", "setLayoutGravity", "LASIWidget;LNSString;", "getLayoutWeight", "setLayoutWeight", "LASIWidget;F" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_ActionMenuViewParamsBean = { "ActionMenuViewParamsBean", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x1, 5, 1, 0, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_ActionMenuViewParamsBean;
}

@end

void ASActionMenuViewImpl_ActionMenuViewParamsBean_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_ActionMenuViewParamsBean *self, ASActionMenuViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASActionMenuViewImpl_ActionMenuViewParamsBean *new_ASActionMenuViewImpl_ActionMenuViewParamsBean_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_ActionMenuViewParamsBean, initWithASActionMenuViewImpl_, outer$)
}

ASActionMenuViewImpl_ActionMenuViewParamsBean *create_ASActionMenuViewImpl_ActionMenuViewParamsBean_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_ActionMenuViewParamsBean, initWithASActionMenuViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_ActionMenuViewParamsBean)

@implementation ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$ {
  ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder_initWithASActionMenuViewImpl_(self, outer$);
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *)tryGetLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *)tryGetLayoutWeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutWeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *)setLayoutWeightWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASActionMenuViewImpl:);
  methods[1].selector = @selector(tryGetLayoutGravity);
  methods[2].selector = @selector(getLayoutGravity);
  methods[3].selector = @selector(setLayoutGravityWithNSString:);
  methods[4].selector = @selector(tryGetLayoutWeight);
  methods[5].selector = @selector(getLayoutWeight);
  methods[6].selector = @selector(setLayoutWeightWithFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASActionMenuViewImpl;", "setLayoutGravity", "LNSString;", "setLayoutWeight", "F", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/toolbar/ActionMenuViewImpl$ActionMenuViewCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder = { "ActionMenuViewCommandParamsBuilder", "com.ashera.toolbar", ptrTable, methods, NULL, 7, 0x1, 7, 0, 0, -1, -1, 5, -1 };
  return &_ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder;
}

@end

void ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *self, ASActionMenuViewImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *new_ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder, initWithASActionMenuViewImpl_, outer$)
}

ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder *create_ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder, initWithASActionMenuViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_ActionMenuViewCommandParamsBuilder)

@implementation ASActionMenuViewImpl_MenuOnClickListener

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$
                           withASToolbarImpl:(ASToolbarImpl *)toolbar
                              withADMenuItem:(id<ADMenuItem>)item {
  ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(self, outer$, toolbar, item);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  [((id<ADXToolbar_OnMenuItemClickListener>) nil_chk([((ASToolbarImpl *) nil_chk(toolbar_)) getOnMenuItemClickListener])) onMenuItemClickWithADMenuItem:item_];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASActionMenuViewImpl:withASToolbarImpl:withADMenuItem:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "toolbar_", "LASToolbarImpl;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "item_", "LADMenuItem;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASActionMenuViewImpl;LASToolbarImpl;LADMenuItem;", "onClick", "LADView;", "LASActionMenuViewImpl;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_MenuOnClickListener = { "MenuOnClickListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x2, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_MenuOnClickListener;
}

@end

void ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(ASActionMenuViewImpl_MenuOnClickListener *self, ASActionMenuViewImpl *outer$, ASToolbarImpl *toolbar, id<ADMenuItem> item) {
  NSObject_init(self);
  self->toolbar_ = toolbar;
  self->item_ = item;
}

ASActionMenuViewImpl_MenuOnClickListener *new_ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(ASActionMenuViewImpl *outer$, ASToolbarImpl *toolbar, id<ADMenuItem> item) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_MenuOnClickListener, initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_, outer$, toolbar, item)
}

ASActionMenuViewImpl_MenuOnClickListener *create_ASActionMenuViewImpl_MenuOnClickListener_initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_(ASActionMenuViewImpl *outer$, ASToolbarImpl *toolbar, id<ADMenuItem> item) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_MenuOnClickListener, initWithASActionMenuViewImpl_withASToolbarImpl_withADMenuItem_, outer$, toolbar, item)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_MenuOnClickListener)

@implementation ASActionMenuViewImpl_MenuClickListener

- (instancetype)initWithASActionMenuViewImpl:(ASActionMenuViewImpl *)outer$ {
  ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  ASActionMenuViewImpl_nativeShowKxMenuWithId_withId_(this$0_, [((id<ASIWidget>) nil_chk([((id<ASIFragment>) nil_chk(this$0_->fragment_)) getRootWidget])) asNativeWidget], [((id<ASIWidget>) nil_chk(this$0_->overFlowButton_)) asNativeWidget]);
}

- (void)__javaClone:(ASActionMenuViewImpl_MenuClickListener *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASActionMenuViewImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASActionMenuViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASActionMenuViewImpl;", "onClick", "LADView;" };
  static const J2ObjcClassInfo _ASActionMenuViewImpl_MenuClickListener = { "MenuClickListener", "com.ashera.toolbar", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASActionMenuViewImpl_MenuClickListener;
}

@end

void ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(ASActionMenuViewImpl_MenuClickListener *self, ASActionMenuViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASActionMenuViewImpl_MenuClickListener *new_ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASActionMenuViewImpl_MenuClickListener, initWithASActionMenuViewImpl_, outer$)
}

ASActionMenuViewImpl_MenuClickListener *create_ASActionMenuViewImpl_MenuClickListener_initWithASActionMenuViewImpl_(ASActionMenuViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASActionMenuViewImpl_MenuClickListener, initWithASActionMenuViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASActionMenuViewImpl_MenuClickListener)
