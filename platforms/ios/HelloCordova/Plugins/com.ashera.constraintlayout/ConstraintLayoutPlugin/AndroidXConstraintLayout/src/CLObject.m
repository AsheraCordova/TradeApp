//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLObject.java
//

#include "CLContainer.h"
#include "CLElement.h"
#include "CLKey.h"
#include "CLObject.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Iterable.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"
#include "java/util/Iterator.h"
#include "java/util/Spliterator.h"
#include "java/util/function/Consumer.h"

@protocol JavaUtilFunctionConsumer;


@interface ADXCLObject_CLObjectIterator : NSObject < JavaUtilIterator > {
 @public
  ADXCLObject *myObject_;
  jint index_;
}

- (instancetype)initWithADXCLObject:(ADXCLObject *)outer$
                    withADXCLObject:(ADXCLObject *)clObject;

- (jboolean)hasNext;

- (id)next;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCLObject_CLObjectIterator)

J2OBJC_FIELD_SETTER(ADXCLObject_CLObjectIterator, myObject_, ADXCLObject *)

__attribute__((unused)) static void ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(ADXCLObject_CLObjectIterator *self, ADXCLObject *outer$, ADXCLObject *clObject);

__attribute__((unused)) static ADXCLObject_CLObjectIterator *new_ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(ADXCLObject *outer$, ADXCLObject *clObject) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCLObject_CLObjectIterator *create_ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(ADXCLObject *outer$, ADXCLObject *clObject);

J2OBJC_TYPE_LITERAL_HEADER(ADXCLObject_CLObjectIterator)

@implementation ADXCLObject

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLObject_initWithCharArray_(self, content);
  return self;
}

+ (ADXCLObject *)allocateWithCharArray:(IOSCharArray *)content {
  return ADXCLObject_allocateWithCharArray_(content);
}

- (NSString *)toJSON {
  JavaLangStringBuilder *json = create_JavaLangStringBuilder_initWithNSString_(JreStrcat("$$", [self getDebugName], @"{ "));
  jboolean first = true;
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    if (!first) {
      [json appendWithNSString:@", "];
    }
    else {
      first = false;
    }
    [json appendWithNSString:[((ADXCLElement *) nil_chk(element)) toJSON]];
  }
  [json appendWithNSString:@" }"];
  return [json description];
}

- (NSString *)toFormattedJSON {
  return [self toFormattedJSONWithInt:0 withInt:0];
}

- (NSString *)toFormattedJSONWithInt:(jint)indent
                             withInt:(jint)forceIndent {
  JavaLangStringBuilder *json = create_JavaLangStringBuilder_initWithNSString_([self getDebugName]);
  [json appendWithNSString:@"{\n"];
  jboolean first = true;
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    if (!first) {
      [json appendWithNSString:@",\n"];
    }
    else {
      first = false;
    }
    [json appendWithNSString:[((ADXCLElement *) nil_chk(element)) toFormattedJSONWithInt:indent + JreLoadStatic(ADXCLElement, BASE_INDENT) withInt:forceIndent - 1]];
  }
  [json appendWithNSString:@"\n"];
  [self addIndentWithJavaLangStringBuilder:json withInt:indent];
  [json appendWithNSString:@"}"];
  return [json description];
}

- (id<JavaUtilIterator>)iterator {
  return create_ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(self, self);
}

- (void)forEachWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaLangIterable_forEachWithJavaUtilFunctionConsumer_(self, arg0);
}

- (id<JavaUtilSpliterator>)spliterator {
  return JavaLangIterable_spliterator(self);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXCLObject;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilIterator;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(allocateWithCharArray:);
  methods[2].selector = @selector(toJSON);
  methods[3].selector = @selector(toFormattedJSON);
  methods[4].selector = @selector(toFormattedJSONWithInt:withInt:);
  methods[5].selector = @selector(iterator);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[C", "allocate", "toFormattedJSON", "II", "LADXCLObject_CLObjectIterator;", "Landroidx/constraintlayout/core/parser/CLContainer;Ljava/lang/Iterable<Landroidx/constraintlayout/core/parser/CLKey;>;" };
  static const J2ObjcClassInfo _ADXCLObject = { "CLObject", "androidx.constraintlayout.core.parser", ptrTable, methods, NULL, 7, 0x1, 6, 0, -1, 4, -1, 5, -1 };
  return &_ADXCLObject;
}

@end

void ADXCLObject_initWithCharArray_(ADXCLObject *self, IOSCharArray *content) {
  ADXCLContainer_initWithCharArray_(self, content);
}

ADXCLObject *new_ADXCLObject_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLObject, initWithCharArray_, content)
}

ADXCLObject *create_ADXCLObject_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLObject, initWithCharArray_, content)
}

ADXCLObject *ADXCLObject_allocateWithCharArray_(IOSCharArray *content) {
  ADXCLObject_initialize();
  return create_ADXCLObject_initWithCharArray_(content);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLObject)

@implementation ADXCLObject_CLObjectIterator

- (instancetype)initWithADXCLObject:(ADXCLObject *)outer$
                    withADXCLObject:(ADXCLObject *)clObject {
  ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(self, outer$, clObject);
  return self;
}

- (jboolean)hasNext {
  return index_ < [((ADXCLObject *) nil_chk(myObject_)) size];
}

- (id)next {
  ADXCLKey *key = (ADXCLKey *) cast_chk([((JavaUtilArrayList *) nil_chk(((ADXCLObject *) nil_chk(myObject_))->mElements_)) getWithInt:index_], [ADXCLKey class]);
  index_++;
  return key;
}

- (void)remove {
  JavaUtilIterator_remove(self);
}

- (void)forEachRemainingWithJavaUtilFunctionConsumer:(id<JavaUtilFunctionConsumer>)arg0 {
  JavaUtilIterator_forEachRemainingWithJavaUtilFunctionConsumer_(self, arg0);
}

- (void)dealloc {
  RELEASE_(myObject_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXCLObject:withADXCLObject:);
  methods[1].selector = @selector(hasNext);
  methods[2].selector = @selector(next);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "myObject_", "LADXCLObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "index_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCLObject;LADXCLObject;", "LADXCLObject;" };
  static const J2ObjcClassInfo _ADXCLObject_CLObjectIterator = { "CLObjectIterator", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x2, 3, 2, 1, -1, -1, -1, -1 };
  return &_ADXCLObject_CLObjectIterator;
}

@end

void ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(ADXCLObject_CLObjectIterator *self, ADXCLObject *outer$, ADXCLObject *clObject) {
  NSObject_init(self);
  self->index_ = 0;
  JreStrongAssign(&self->myObject_, clObject);
}

ADXCLObject_CLObjectIterator *new_ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(ADXCLObject *outer$, ADXCLObject *clObject) {
  J2OBJC_NEW_IMPL(ADXCLObject_CLObjectIterator, initWithADXCLObject_withADXCLObject_, outer$, clObject)
}

ADXCLObject_CLObjectIterator *create_ADXCLObject_CLObjectIterator_initWithADXCLObject_withADXCLObject_(ADXCLObject *outer$, ADXCLObject *clObject) {
  J2OBJC_CREATE_IMPL(ADXCLObject_CLObjectIterator, initWithADXCLObject_withADXCLObject_, outer$, clObject)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLObject_CLObjectIterator)
