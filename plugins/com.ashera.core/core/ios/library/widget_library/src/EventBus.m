//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\bus\EventBus.java
//

#include "CompositeHandler.h"
#include "EventBus.h"
#include "EventBusCallback.h"
#include "EventBusHandler.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@protocol JavaUtilMap;


@interface ASEventBus () {
 @public
  id<JavaUtilMap> _listeners_;
}

@end

J2OBJC_FIELD_SETTER(ASEventBus, _listeners_, id<JavaUtilMap>)

@interface ASEventBus_1 : NSObject < ASEventBusCallback >

- (instancetype)init;

- (void)call;

@end

J2OBJC_EMPTY_STATIC_INIT(ASEventBus_1)

__attribute__((unused)) static void ASEventBus_1_init(ASEventBus_1 *self);

__attribute__((unused)) static ASEventBus_1 *new_ASEventBus_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASEventBus_1 *create_ASEventBus_1_init(void);

J2OBJC_INITIALIZED_DEFN(ASEventBus)

id<ASEventBusCallback> ASEventBus__DEFAULT;

@implementation ASEventBus

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASEventBus_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onWithNSString:(NSString *)type
withASEventBusHandlerArray:(IOSObjectArray *)handler {
  if (![self handlesWithNSString:type]) {
    [((id<JavaUtilMap>) nil_chk(_listeners_)) putWithId:type withId:create_ASCompositeHandler_initWithNSString_withASEventBusHandlerArray_(type, [IOSObjectArray arrayWithLength:0 type:ASEventBusHandler_class_()])];
  }
  [((ASCompositeHandler *) nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) getWithId:type])) addWithASEventBusHandlerArray:handler];
}

- (void)offWithNSString:(NSString *)type {
  [((id<JavaUtilMap>) nil_chk(_listeners_)) removeWithId:type];
}

- (jboolean)handlesWithNSString:(NSString *)eventName {
  return [((id<JavaUtilMap>) nil_chk(_listeners_)) containsKeyWithId:eventName];
}

- (void)notifyObserversWithNSString:(NSString *)type
                             withId:(id)data {
  if ([self handlesWithNSString:type]) {
    [((ASCompositeHandler *) nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) getWithId:type])) performWithId:data];
  }
}

- (void)offWithASEventBusHandlerArray:(IOSObjectArray *)widgetEventBusHandlers {
  {
    IOSObjectArray *a__ = widgetEventBusHandlers;
    ASEventBusHandler * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ASEventBusHandler * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ASEventBusHandler *eventBusHandler = *b__++;
      [((ASCompositeHandler *) nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) getWithId:[((ASEventBusHandler *) nil_chk(eventBusHandler)) getType]])) removeWithASEventBusHandler:eventBusHandler];
    }
  }
}

- (void)offWithJavaUtilList:(id<JavaUtilList>)widgetEventBusHandlers {
  for (ASEventBusHandler * __strong eventBusHandler in nil_chk(widgetEventBusHandlers)) {
    [((ASCompositeHandler *) nil_chk([((id<JavaUtilMap>) nil_chk(_listeners_)) getWithId:[((ASEventBusHandler *) nil_chk(eventBusHandler)) getType]])) removeWithASEventBusHandler:eventBusHandler];
  }
}

- (void)offAll {
  [((id<JavaUtilMap>) nil_chk(_listeners_)) clear];
}

- (void)dealloc {
  RELEASE_(_listeners_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 2, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onWithNSString:withASEventBusHandlerArray:);
  methods[2].selector = @selector(offWithNSString:);
  methods[3].selector = @selector(handlesWithNSString:);
  methods[4].selector = @selector(notifyObserversWithNSString:withId:);
  methods[5].selector = @selector(offWithASEventBusHandlerArray:);
  methods[6].selector = @selector(offWithJavaUtilList:);
  methods[7].selector = @selector(offAll);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_DEFAULT", "LASEventBusCallback;", .constantValue.asLong = 0, 0x1c, -1, 10, -1, -1 },
    { "_listeners_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "on", "LNSString;[LASEventBusHandler;", "off", "LNSString;", "handles", "notifyObservers", "LNSString;LNSObject;", "[LASEventBusHandler;", "LJavaUtilList;", "(Ljava/util/List<Lcom/ashera/widget/bus/EventBusHandler;>;)V", &ASEventBus__DEFAULT, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/bus/CompositeHandler;>;" };
  static const J2ObjcClassInfo _ASEventBus = { "EventBus", "com.ashera.widget.bus", ptrTable, methods, fields, 7, 0x1, 8, 2, -1, -1, -1, -1, -1 };
  return &_ASEventBus;
}

+ (void)initialize {
  if (self == [ASEventBus class]) {
    JreStrongAssignAndConsume(&ASEventBus__DEFAULT, new_ASEventBus_1_init());
    J2OBJC_SET_INITIALIZED(ASEventBus)
  }
}

@end

void ASEventBus_init(ASEventBus *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->_listeners_, new_JavaUtilHashMap_init());
}

ASEventBus *new_ASEventBus_init() {
  J2OBJC_NEW_IMPL(ASEventBus, init)
}

ASEventBus *create_ASEventBus_init() {
  J2OBJC_CREATE_IMPL(ASEventBus, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASEventBus)

@implementation ASEventBus_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASEventBus_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)call {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASEventBus;" };
  static const J2ObjcClassInfo _ASEventBus_1 = { "", "com.ashera.widget.bus", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 0, -1, -1, -1, -1 };
  return &_ASEventBus_1;
}

@end

void ASEventBus_1_init(ASEventBus_1 *self) {
  NSObject_init(self);
}

ASEventBus_1 *new_ASEventBus_1_init() {
  J2OBJC_NEW_IMPL(ASEventBus_1, init)
}

ASEventBus_1 *create_ASEventBus_1_init() {
  J2OBJC_CREATE_IMPL(ASEventBus_1, init)
}
