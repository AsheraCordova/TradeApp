//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\os\AsyncTask.java
//

#include "AsyncTask.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "java/lang/Runnable.h"
#include "java/lang/Thread.h"


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADAsyncTask () {
 @public
  jboolean cancel_;
}

@end

@interface ADAsyncTask_$Lambda$2 : NSObject < JavaLangRunnable > {
 @public
  ADAsyncTask *this$0_;
  id val$result_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAsyncTask_$Lambda$2)

__attribute__((unused)) static void ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(ADAsyncTask_$Lambda$2 *self, ADAsyncTask *outer$, id capture$0);

__attribute__((unused)) static ADAsyncTask_$Lambda$2 *new_ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(ADAsyncTask *outer$, id capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADAsyncTask_$Lambda$2 *create_ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(ADAsyncTask *outer$, id capture$0);

@interface ADAsyncTask_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ADAsyncTask *this$0_;
  IOSObjectArray *val$params_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAsyncTask_$Lambda$1)

__attribute__((unused)) static void ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(ADAsyncTask_$Lambda$1 *self, ADAsyncTask *outer$, IOSObjectArray *capture$0);

__attribute__((unused)) static ADAsyncTask_$Lambda$1 *new_ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(ADAsyncTask *outer$, IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADAsyncTask_$Lambda$1 *create_ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(ADAsyncTask *outer$, IOSObjectArray *capture$0);

@implementation ADAsyncTask

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADAsyncTask_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)doInBackgroundWithNSObjectArray:(IOSObjectArray *)var1 {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)onPostExecuteWithId:(id)result {
}

- (ADAsyncTask *)executeWithNSObjectArray:(IOSObjectArray *)params {
  [create_JavaLangThread_initWithJavaLangRunnable_(create_ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(self, params)) start];
  return self;
}

- (void)cancelWithBoolean:(jboolean)cancel {
  self->cancel_ = cancel;
}

- (jboolean)isCancelled {
  return cancel_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x484, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, 5, -1, -1 },
    { NULL, "LADAsyncTask;", 0x91, 6, 1, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doInBackgroundWithNSObjectArray:);
  methods[2].selector = @selector(onPostExecuteWithId:);
  methods[3].selector = @selector(executeWithNSObjectArray:);
  methods[4].selector = @selector(cancelWithBoolean:);
  methods[5].selector = @selector(isCancelled);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cancel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "doInBackground", "[LNSObject;", "([TParams;)TResult;", "onPostExecute", "LNSObject;", "(TResult;)V", "execute", "([TParams;)Lr/android/os/AsyncTask<TParams;TProgress;TResult;>;", "cancel", "Z", "<Params:Ljava/lang/Object;Progress:Ljava/lang/Object;Result:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADAsyncTask = { "AsyncTask", "r.android.os", ptrTable, methods, fields, 7, 0x401, 6, 1, -1, -1, -1, 10, -1 };
  return &_ADAsyncTask;
}

@end

void ADAsyncTask_init(ADAsyncTask *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAsyncTask)

@implementation ADAsyncTask_$Lambda$2

- (void)run {
  [this$0_ onPostExecuteWithId:val$result_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$result_);
  [super dealloc];
}

@end

void ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(ADAsyncTask_$Lambda$2 *self, ADAsyncTask *outer$, id capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$result_, capture$0);
  NSObject_init(self);
}

ADAsyncTask_$Lambda$2 *new_ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(ADAsyncTask *outer$, id capture$0) {
  J2OBJC_NEW_IMPL(ADAsyncTask_$Lambda$2, initWithADAsyncTask_withId_, outer$, capture$0)
}

ADAsyncTask_$Lambda$2 *create_ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(ADAsyncTask *outer$, id capture$0) {
  J2OBJC_CREATE_IMPL(ADAsyncTask_$Lambda$2, initWithADAsyncTask_withId_, outer$, capture$0)
}

@implementation ADAsyncTask_$Lambda$1

- (void)run {
  id result = JreRetainedLocalValue([this$0_ doInBackgroundWithNSObjectArray:val$params_]);
  ASPluginInvoker_runOnMainThreadWithJavaLangRunnable_(create_ADAsyncTask_$Lambda$2_initWithADAsyncTask_withId_(this$0_, result));
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(val$params_);
  [super dealloc];
}

@end

void ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(ADAsyncTask_$Lambda$1 *self, ADAsyncTask *outer$, IOSObjectArray *capture$0) {
  JreStrongAssign(&self->this$0_, outer$);
  JreStrongAssign(&self->val$params_, capture$0);
  NSObject_init(self);
}

ADAsyncTask_$Lambda$1 *new_ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(ADAsyncTask *outer$, IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(ADAsyncTask_$Lambda$1, initWithADAsyncTask_withNSObjectArray_, outer$, capture$0)
}

ADAsyncTask_$Lambda$1 *create_ADAsyncTask_$Lambda$1_initWithADAsyncTask_withNSObjectArray_(ADAsyncTask *outer$, IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(ADAsyncTask_$Lambda$1, initWithADAsyncTask_withNSObjectArray_, outer$, capture$0)
}
