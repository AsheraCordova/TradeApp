//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSShutterBugPlugin\src\main\java\com\applidium\shutterbug\ShutterbugManager.java
//

#include "AsyncTask.h"
#include "Bitmap.h"
#include "BitmapFactoryScale.h"
#include "Context.h"
#include "DiskLruCache.h"
#include "DownloadRequest.h"
#include "Drawable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "ImageCache.h"
#include "J2ObjC_source.h"
#include "ShutterbugDownloader.h"
#include "ShutterbugImageCallBack.h"
#include "ShutterbugManager.h"
#include "java/io/InputStream.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/math/BigInteger.h"
#include "java/security/MessageDigest.h"
#include "java/security/NoSuchAlgorithmException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Queue.h"

@class JavaIoInputStream;
@protocol JavaUtilList;
@protocol JavaUtilMap;


@interface APShutterbugManager () {
 @public
  ADContext *mContext_;
  id<JavaUtilList> mFailedUrls_;
  id<JavaUtilList> mCacheListeners_;
  id<JavaUtilList> mCacheUrls_;
  id<JavaUtilMap> mDownloadersMap_;
  id<JavaUtilList> mDownloadRequests_;
  id<JavaUtilList> mDownloadImageListeners_;
  id<JavaUtilList> mDownloaders_;
}

- (jint)getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener:(id<APShutterbugManager_ShutterbugManagerListener>)listener
                                                             withNSString:(NSString *)url;

@end

J2OBJC_FIELD_SETTER(APShutterbugManager, mContext_, ADContext *)
J2OBJC_FIELD_SETTER(APShutterbugManager, mFailedUrls_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(APShutterbugManager, mCacheListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(APShutterbugManager, mCacheUrls_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(APShutterbugManager, mDownloadersMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(APShutterbugManager, mDownloadRequests_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(APShutterbugManager, mDownloadImageListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(APShutterbugManager, mDownloaders_, id<JavaUtilList>)

inline APShutterbugManager *APShutterbugManager_get_sImageManager(void);
inline APShutterbugManager *APShutterbugManager_set_sImageManager(APShutterbugManager *value);
static APShutterbugManager *APShutterbugManager_sImageManager;
J2OBJC_STATIC_FIELD_OBJ(APShutterbugManager, sImageManager, APShutterbugManager *)

inline jint APShutterbugManager_get_LISTENER_NOT_FOUND(void);
#define APShutterbugManager_LISTENER_NOT_FOUND -1
J2OBJC_STATIC_FIELD_CONSTANT(APShutterbugManager, LISTENER_NOT_FOUND, jint)

__attribute__((unused)) static jint APShutterbugManager_getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener_withNSString_(APShutterbugManager *self, id<APShutterbugManager_ShutterbugManagerListener> listener, NSString *url);

@interface APShutterbugManager_ShutterbugManagerListener : NSObject

@end

@interface APShutterbugManager_InputStreamHandlingTask : ADAsyncTask {
 @public
  APShutterbugManager *this$0_;
  APShutterbugDownloader *mDownloader_;
  APDownloadRequest *mDownloadRequest_;
}

- (instancetype)initWithAPShutterbugManager:(APShutterbugManager *)outer$
                 withAPShutterbugDownloader:(APShutterbugDownloader *)downloader
                      withAPDownloadRequest:(APDownloadRequest *)downloadRequest;

- (id<ADBitmap>)doInBackgroundWithNSObjectArray:(IOSObjectArray *)params;

- (void)onPostExecuteWithId:(id<ADBitmap>)bitmap;

@end

J2OBJC_EMPTY_STATIC_INIT(APShutterbugManager_InputStreamHandlingTask)

J2OBJC_FIELD_SETTER(APShutterbugManager_InputStreamHandlingTask, mDownloader_, APShutterbugDownloader *)
J2OBJC_FIELD_SETTER(APShutterbugManager_InputStreamHandlingTask, mDownloadRequest_, APDownloadRequest *)

__attribute__((unused)) static void APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(APShutterbugManager_InputStreamHandlingTask *self, APShutterbugManager *outer$, APShutterbugDownloader *downloader, APDownloadRequest *downloadRequest);

__attribute__((unused)) static APShutterbugManager_InputStreamHandlingTask *new_APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(APShutterbugManager *outer$, APShutterbugDownloader *downloader, APDownloadRequest *downloadRequest) NS_RETURNS_RETAINED;

__attribute__((unused)) static APShutterbugManager_InputStreamHandlingTask *create_APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(APShutterbugManager *outer$, APShutterbugDownloader *downloader, APDownloadRequest *downloadRequest);

J2OBJC_TYPE_LITERAL_HEADER(APShutterbugManager_InputStreamHandlingTask)

@interface APShutterbugManager_InputStreamHandlingTask_1 : NSObject < APBitmapFactoryScale_InputStreamGenerator > {
 @public
  APImageCache *val$sharedImageCache_;
  NSString *val$cacheKey_;
}

- (instancetype)initWithAPImageCache:(APImageCache *)capture$0
                        withNSString:(NSString *)capture$1;

- (JavaIoInputStream *)getStream;

@end

J2OBJC_EMPTY_STATIC_INIT(APShutterbugManager_InputStreamHandlingTask_1)

__attribute__((unused)) static void APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(APShutterbugManager_InputStreamHandlingTask_1 *self, APImageCache *capture$0, NSString *capture$1);

__attribute__((unused)) static APShutterbugManager_InputStreamHandlingTask_1 *new_APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(APImageCache *capture$0, NSString *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static APShutterbugManager_InputStreamHandlingTask_1 *create_APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(APImageCache *capture$0, NSString *capture$1);

@interface APShutterbugManager_ImageManagerListener : NSObject < APShutterbugManager_ShutterbugManagerListener > {
 @public
  id<APShutterbugImageCallBack> mImageView_;
}

- (instancetype)initWithAPShutterbugImageCallBack:(id<APShutterbugImageCallBack>)imageView;

- (void)onImageSuccessWithAPShutterbugManager:(APShutterbugManager *)imageManager
                                 withADBitmap:(id<ADBitmap>)bitmap
                                 withNSString:(NSString *)url;

- (void)onImageFailureWithAPShutterbugManager:(APShutterbugManager *)imageManager
                                 withNSString:(NSString *)url;

@end

J2OBJC_EMPTY_STATIC_INIT(APShutterbugManager_ImageManagerListener)

J2OBJC_FIELD_SETTER(APShutterbugManager_ImageManagerListener, mImageView_, id<APShutterbugImageCallBack>)

__attribute__((unused)) static void APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(APShutterbugManager_ImageManagerListener *self, id<APShutterbugImageCallBack> imageView);

__attribute__((unused)) static APShutterbugManager_ImageManagerListener *new_APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(id<APShutterbugImageCallBack> imageView) NS_RETURNS_RETAINED;

__attribute__((unused)) static APShutterbugManager_ImageManagerListener *create_APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(id<APShutterbugImageCallBack> imageView);

J2OBJC_TYPE_LITERAL_HEADER(APShutterbugManager_ImageManagerListener)

@implementation APShutterbugManager

- (instancetype)initWithADContext:(ADContext *)context {
  APShutterbugManager_initWithADContext_(self, context);
  return self;
}

+ (APShutterbugManager *)getSharedImageManagerWithADContext:(ADContext *)context {
  return APShutterbugManager_getSharedImageManagerWithADContext_(context);
}

- (void)downloadWithNSString:(NSString *)url
withAPShutterbugManager_ShutterbugManagerListener:(id<APShutterbugManager_ShutterbugManagerListener>)listener {
  [self downloadWithNSString:url withAPShutterbugManager_ShutterbugManagerListener:listener withInt:-1 withInt:-1];
}

- (void)downloadWithNSString:(NSString *)url
withAPShutterbugManager_ShutterbugManagerListener:(id<APShutterbugManager_ShutterbugManagerListener>)listener
                     withInt:(jint)desiredHeight
                     withInt:(jint)desiredWidth {
  if (url == nil || listener == nil || [((id<JavaUtilList>) nil_chk(mFailedUrls_)) containsWithId:url]) {
    return;
  }
  [((id<JavaUtilList>) nil_chk(mCacheListeners_)) addWithId:listener];
  [((id<JavaUtilList>) nil_chk(mCacheUrls_)) addWithId:url];
  [((APImageCache *) nil_chk(APImageCache_getSharedImageCacheWithADContext_(mContext_))) queryCacheWithNSString:APShutterbugManager_getCacheKeyWithNSString_(url) withAPImageCache_ImageCacheListener:self withAPDownloadRequest:new_APDownloadRequest_initWithNSString_withAPShutterbugManager_ShutterbugManagerListener_withInt_withInt_(url, listener, desiredHeight, desiredWidth)];
}

- (void)downloadWithNSString:(NSString *)url
              withADDrawable:(ADDrawable *)placeHolder
withAPShutterbugImageCallBack:(id<APShutterbugImageCallBack>)imageView {
  [self downloadWithNSString:url withADDrawable:placeHolder withAPShutterbugImageCallBack:imageView withInt:-1 withInt:-1];
}

- (void)downloadWithNSString:(NSString *)url
              withADDrawable:(ADDrawable *)placeHolder
withAPShutterbugImageCallBack:(id<APShutterbugImageCallBack>)imageView
                     withInt:(jint)desiredHeight
                     withInt:(jint)desiredWidth {
  [((id<APShutterbugImageCallBack>) nil_chk(imageView)) setImageDrawableWithADDrawable:placeHolder];
  [self cancelWithAPShutterbugImageCallBack:imageView];
  [self downloadWithNSString:url withAPShutterbugManager_ShutterbugManagerListener:new_APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(imageView) withInt:desiredHeight withInt:desiredWidth];
}

+ (NSString *)getCacheKeyWithNSString:(NSString *)url {
  return APShutterbugManager_getCacheKeyWithNSString_(url);
}

- (jint)getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener:(id<APShutterbugManager_ShutterbugManagerListener>)listener
                                                             withNSString:(NSString *)url {
  return APShutterbugManager_getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener_withNSString_(self, listener, url);
}

- (void)onImageFoundWithAPImageCache:(APImageCache *)imageCache
                        withADBitmap:(id<ADBitmap>)bitmap
                        withNSString:(NSString *)key
               withAPDownloadRequest:(APDownloadRequest *)downloadRequest {
  NSString *url = [((APDownloadRequest *) nil_chk(downloadRequest)) getUrl];
  id<APShutterbugManager_ShutterbugManagerListener> listener = [downloadRequest getListener];
  jint idx = APShutterbugManager_getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener_withNSString_(self, listener, url);
  if (idx == APShutterbugManager_LISTENER_NOT_FOUND) {
    return;
  }
  [((id<APShutterbugManager_ShutterbugManagerListener>) nil_chk(listener)) onImageSuccessWithAPShutterbugManager:self withADBitmap:bitmap withNSString:url];
  (void) [((id<JavaUtilList>) nil_chk(mCacheListeners_)) removeWithInt:idx];
  (void) [((id<JavaUtilList>) nil_chk(mCacheUrls_)) removeWithInt:idx];
}

- (void)onImageNotFoundWithAPImageCache:(APImageCache *)imageCache
                           withNSString:(NSString *)key
                  withAPDownloadRequest:(APDownloadRequest *)downloadRequest {
  NSString *url = [((APDownloadRequest *) nil_chk(downloadRequest)) getUrl];
  id<APShutterbugManager_ShutterbugManagerListener> listener = [downloadRequest getListener];
  jint idx = APShutterbugManager_getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener_withNSString_(self, listener, url);
  if (idx == APShutterbugManager_LISTENER_NOT_FOUND) {
    return;
  }
  (void) [((id<JavaUtilList>) nil_chk(mCacheListeners_)) removeWithInt:idx];
  (void) [((id<JavaUtilList>) nil_chk(mCacheUrls_)) removeWithInt:idx];
  APShutterbugDownloader *downloader = [((id<JavaUtilMap>) nil_chk(mDownloadersMap_)) getWithId:url];
  if (downloader == nil) {
    downloader = new_APShutterbugDownloader_initWithNSString_withAPShutterbugDownloader_ShutterbugDownloaderListener_withAPDownloadRequest_(url, self, downloadRequest);
    [downloader start];
    (void) [((id<JavaUtilMap>) nil_chk(mDownloadersMap_)) putWithId:url withId:downloader];
  }
  [((id<JavaUtilList>) nil_chk(mDownloadRequests_)) addWithId:downloadRequest];
  [((id<JavaUtilList>) nil_chk(mDownloadImageListeners_)) addWithId:listener];
  [((id<JavaUtilList>) nil_chk(mDownloaders_)) addWithId:downloader];
}

- (void)onImageDownloadSuccessWithAPShutterbugDownloader:(APShutterbugDownloader *)downloader
                                   withJavaIoInputStream:(JavaIoInputStream *)inputStream
                                   withAPDownloadRequest:(APDownloadRequest *)downloadRequest {
  (void) [new_APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(self, downloader, downloadRequest) executeWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ inputStream } count:1 type:JavaIoInputStream_class_()]];
}

- (void)onImageDownloadFailureWithAPShutterbugDownloader:(APShutterbugDownloader *)downloader
                                   withAPDownloadRequest:(APDownloadRequest *)downloadRequest {
  for (jint idx = [((id<JavaUtilList>) nil_chk(mDownloaders_)) size] - 1; idx >= 0; idx--) {
    jint uidx = idx;
    APShutterbugDownloader *aDownloader = [((id<JavaUtilList>) nil_chk(mDownloaders_)) getWithInt:uidx];
    if (aDownloader == downloader) {
      id<APShutterbugManager_ShutterbugManagerListener> listener = [((id<JavaUtilList>) nil_chk(mDownloadImageListeners_)) getWithInt:uidx];
      [((id<APShutterbugManager_ShutterbugManagerListener>) nil_chk(listener)) onImageFailureWithAPShutterbugManager:self withNSString:[((APDownloadRequest *) nil_chk(downloadRequest)) getUrl]];
      (void) [((id<JavaUtilList>) nil_chk(mDownloaders_)) removeWithInt:uidx];
      (void) [((id<JavaUtilList>) nil_chk(mDownloadImageListeners_)) removeWithInt:uidx];
    }
  }
  (void) [((id<JavaUtilMap>) nil_chk(mDownloadersMap_)) removeWithId:[((APDownloadRequest *) nil_chk(downloadRequest)) getUrl]];
}

- (void)cancelWithAPShutterbugManager_ShutterbugManagerListener:(id<APShutterbugManager_ShutterbugManagerListener>)listener {
  jint idx;
  while ((idx = [((id<JavaUtilList>) nil_chk(mCacheListeners_)) indexOfWithId:listener]) != -1) {
    (void) [((id<JavaUtilList>) nil_chk(mCacheListeners_)) removeWithInt:idx];
    (void) [((id<JavaUtilList>) nil_chk(mCacheUrls_)) removeWithInt:idx];
  }
  while ((idx = [((id<JavaUtilList>) nil_chk(mDownloadImageListeners_)) indexOfWithId:listener]) != -1) {
    APShutterbugDownloader *downloader = [((id<JavaUtilList>) nil_chk(mDownloaders_)) getWithInt:idx];
    (void) [((id<JavaUtilList>) nil_chk(mDownloadRequests_)) removeWithInt:idx];
    (void) [((id<JavaUtilList>) nil_chk(mDownloadImageListeners_)) removeWithInt:idx];
    (void) [((id<JavaUtilList>) nil_chk(mDownloaders_)) removeWithInt:idx];
    if (![((id<JavaUtilList>) nil_chk(mDownloaders_)) containsWithId:downloader]) {
      [((APShutterbugDownloader *) nil_chk(downloader)) cancel];
      (void) [((id<JavaUtilMap>) nil_chk(mDownloadersMap_)) removeWithId:[downloader getUrl]];
    }
  }
}

- (void)cancelWithAPShutterbugImageCallBack:(id<APShutterbugImageCallBack>)imageView {
  id<JavaUtilQueue> queue = new_JavaUtilLinkedList_init();
  for (id<APShutterbugManager_ShutterbugManagerListener> __strong listener in nil_chk(mCacheListeners_)) {
    if ([listener isKindOfClass:[APShutterbugManager_ImageManagerListener class]] && [((id<APShutterbugImageCallBack>) nil_chk(((APShutterbugManager_ImageManagerListener *) nil_chk(((APShutterbugManager_ImageManagerListener *) cast_chk(listener, [APShutterbugManager_ImageManagerListener class]))))->mImageView_)) isEqual:imageView]) {
      [queue addWithId:listener];
    }
  }
  for (id<APShutterbugManager_ShutterbugManagerListener> __strong listener in nil_chk(mDownloadImageListeners_)) {
    if ([listener isKindOfClass:[APShutterbugManager_ImageManagerListener class]] && [((id<APShutterbugImageCallBack>) nil_chk(((APShutterbugManager_ImageManagerListener *) nil_chk(((APShutterbugManager_ImageManagerListener *) cast_chk(listener, [APShutterbugManager_ImageManagerListener class]))))->mImageView_)) isEqual:imageView]) {
      [queue addWithId:listener];
    }
  }
  for (id<APShutterbugManager_ShutterbugManagerListener> __strong listener in queue) {
    [self cancelWithAPShutterbugManager_ShutterbugManagerListener:listener];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAPShutterbugManager;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 21, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADContext:);
  methods[1].selector = @selector(getSharedImageManagerWithADContext:);
  methods[2].selector = @selector(downloadWithNSString:withAPShutterbugManager_ShutterbugManagerListener:);
  methods[3].selector = @selector(downloadWithNSString:withAPShutterbugManager_ShutterbugManagerListener:withInt:withInt:);
  methods[4].selector = @selector(downloadWithNSString:withADDrawable:withAPShutterbugImageCallBack:);
  methods[5].selector = @selector(downloadWithNSString:withADDrawable:withAPShutterbugImageCallBack:withInt:withInt:);
  methods[6].selector = @selector(getCacheKeyWithNSString:);
  methods[7].selector = @selector(getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener:withNSString:);
  methods[8].selector = @selector(onImageFoundWithAPImageCache:withADBitmap:withNSString:withAPDownloadRequest:);
  methods[9].selector = @selector(onImageNotFoundWithAPImageCache:withNSString:withAPDownloadRequest:);
  methods[10].selector = @selector(onImageDownloadSuccessWithAPShutterbugDownloader:withJavaIoInputStream:withAPDownloadRequest:);
  methods[11].selector = @selector(onImageDownloadFailureWithAPShutterbugDownloader:withAPDownloadRequest:);
  methods[12].selector = @selector(cancelWithAPShutterbugManager_ShutterbugManagerListener:);
  methods[13].selector = @selector(cancelWithAPShutterbugImageCallBack:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sImageManager", "LAPShutterbugManager;", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
    { "mContext_", "LADContext;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFailedUrls_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "mCacheListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "mCacheUrls_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 23, -1 },
    { "mDownloadersMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 25, -1 },
    { "mDownloadRequests_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 26, -1 },
    { "mDownloadImageListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 24, -1 },
    { "mDownloaders_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 27, -1 },
    { "LISTENER_NOT_FOUND", "I", .constantValue.asInt = APShutterbugManager_LISTENER_NOT_FOUND, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADContext;", "getSharedImageManager", "download", "LNSString;LAPShutterbugManager_ShutterbugManagerListener;", "LNSString;LAPShutterbugManager_ShutterbugManagerListener;II", "LNSString;LADDrawable;LAPShutterbugImageCallBack;", "LNSString;LADDrawable;LAPShutterbugImageCallBack;II", "getCacheKey", "LNSString;", "getListenerIndex", "LAPShutterbugManager_ShutterbugManagerListener;LNSString;", "onImageFound", "LAPImageCache;LADBitmap;LNSString;LAPDownloadRequest;", "onImageNotFound", "LAPImageCache;LNSString;LAPDownloadRequest;", "onImageDownloadSuccess", "LAPShutterbugDownloader;LJavaIoInputStream;LAPDownloadRequest;", "onImageDownloadFailure", "LAPShutterbugDownloader;LAPDownloadRequest;", "cancel", "LAPShutterbugManager_ShutterbugManagerListener;", "LAPShutterbugImageCallBack;", &APShutterbugManager_sImageManager, "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/List<Lcom/applidium/shutterbug/ShutterbugManager$ShutterbugManagerListener;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/applidium/shutterbug/downloader/ShutterbugDownloader;>;", "Ljava/util/List<Lcom/applidium/shutterbug/utils/DownloadRequest;>;", "Ljava/util/List<Lcom/applidium/shutterbug/downloader/ShutterbugDownloader;>;", "LAPShutterbugManager_ShutterbugManagerListener;LAPShutterbugManager_InputStreamHandlingTask;LAPShutterbugManager_ImageManagerListener;" };
  static const J2ObjcClassInfo _APShutterbugManager = { "ShutterbugManager", "com.applidium.shutterbug", ptrTable, methods, fields, 7, 0x1, 14, 10, -1, 28, -1, -1, -1 };
  return &_APShutterbugManager;
}

@end

void APShutterbugManager_initWithADContext_(APShutterbugManager *self, ADContext *context) {
  NSObject_init(self);
  self->mFailedUrls_ = new_JavaUtilArrayList_init();
  self->mCacheListeners_ = new_JavaUtilArrayList_init();
  self->mCacheUrls_ = new_JavaUtilArrayList_init();
  self->mDownloadersMap_ = new_JavaUtilHashMap_init();
  self->mDownloadRequests_ = new_JavaUtilArrayList_init();
  self->mDownloadImageListeners_ = new_JavaUtilArrayList_init();
  self->mDownloaders_ = new_JavaUtilArrayList_init();
  self->mContext_ = context;
}

APShutterbugManager *new_APShutterbugManager_initWithADContext_(ADContext *context) {
  J2OBJC_NEW_IMPL(APShutterbugManager, initWithADContext_, context)
}

APShutterbugManager *create_APShutterbugManager_initWithADContext_(ADContext *context) {
  J2OBJC_CREATE_IMPL(APShutterbugManager, initWithADContext_, context)
}

APShutterbugManager *APShutterbugManager_getSharedImageManagerWithADContext_(ADContext *context) {
  APShutterbugManager_initialize();
  if (APShutterbugManager_sImageManager == nil) {
    APShutterbugManager_sImageManager = new_APShutterbugManager_initWithADContext_(context);
  }
  return APShutterbugManager_sImageManager;
}

NSString *APShutterbugManager_getCacheKeyWithNSString_(NSString *url) {
  APShutterbugManager_initialize();
  @try {
    JavaSecurityMessageDigest *md = JavaSecurityMessageDigest_getInstanceWithNSString_(@"SHA-1");
    [((JavaSecurityMessageDigest *) nil_chk(md)) updateWithByteArray:[((NSString *) nil_chk(url)) java_getBytesWithCharsetName:@"UTF-8"] withInt:0 withInt:[url java_length]];
    return NSString_java_formatWithNSString_withNSObjectArray_(@"%x", [IOSObjectArray newArrayWithObjects:(id[]){ create_JavaMathBigInteger_initWithByteArray_([md digest]) } count:1 type:NSObject_class_()]);
  }
  @catch (JavaSecurityNoSuchAlgorithmException *e) {
    [e printStackTrace];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    [e printStackTrace];
  }
  return nil;
}

jint APShutterbugManager_getListenerIndexWithAPShutterbugManager_ShutterbugManagerListener_withNSString_(APShutterbugManager *self, id<APShutterbugManager_ShutterbugManagerListener> listener, NSString *url) {
  for (jint index = 0; index < [((id<JavaUtilList>) nil_chk(self->mCacheListeners_)) size]; index++) {
    if ([((id<JavaUtilList>) nil_chk(self->mCacheListeners_)) getWithInt:index] == listener && [((NSString *) nil_chk([((id<JavaUtilList>) nil_chk(self->mCacheUrls_)) getWithInt:index])) isEqual:url]) {
      return index;
    }
  }
  return APShutterbugManager_LISTENER_NOT_FOUND;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APShutterbugManager)

@implementation APShutterbugManager_ShutterbugManagerListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onImageSuccessWithAPShutterbugManager:withADBitmap:withNSString:);
  methods[1].selector = @selector(onImageFailureWithAPShutterbugManager:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onImageSuccess", "LAPShutterbugManager;LADBitmap;LNSString;", "onImageFailure", "LAPShutterbugManager;LNSString;", "LAPShutterbugManager;" };
  static const J2ObjcClassInfo _APShutterbugManager_ShutterbugManagerListener = { "ShutterbugManagerListener", "com.applidium.shutterbug", ptrTable, methods, NULL, 7, 0x609, 2, 0, 4, -1, -1, -1, -1 };
  return &_APShutterbugManager_ShutterbugManagerListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(APShutterbugManager_ShutterbugManagerListener)

@implementation APShutterbugManager_InputStreamHandlingTask

- (instancetype)initWithAPShutterbugManager:(APShutterbugManager *)outer$
                 withAPShutterbugDownloader:(APShutterbugDownloader *)downloader
                      withAPDownloadRequest:(APDownloadRequest *)downloadRequest {
  APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(self, outer$, downloader, downloadRequest);
  return self;
}

- (id<ADBitmap>)doInBackgroundWithNSObjectArray:(IOSObjectArray *)params {
  APImageCache *sharedImageCache = APImageCache_getSharedImageCacheWithADContext_(this$0_->mContext_);
  NSString *cacheKey = APShutterbugManager_getCacheKeyWithNSString_([((APDownloadRequest *) nil_chk(mDownloadRequest_)) getUrl]);
  APDiskLruCache_Snapshot *cachedSnapshot = [((APImageCache *) nil_chk(sharedImageCache)) storeToDiskWithJavaIoInputStream:IOSObjectArray_Get(nil_chk(params), 0) withNSString:cacheKey];
  id<ADBitmap> bitmap = nil;
  if (cachedSnapshot != nil) {
    bitmap = APBitmapFactoryScale_decodeSampledBitmapFromStreamWithAPBitmapFactoryScale_InputStreamGenerator_withAPDownloadRequest_(new_APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(sharedImageCache, cacheKey), mDownloadRequest_);
    if (bitmap != nil) {
      [sharedImageCache storeToMemoryWithADBitmap:bitmap withNSString:cacheKey];
    }
  }
  return bitmap;
}

- (void)onPostExecuteWithId:(id<ADBitmap>)bitmap {
  for (jint idx = [((id<JavaUtilList>) nil_chk(this$0_->mDownloaders_)) size] - 1; idx >= 0; idx--) {
    jint uidx = idx;
    APShutterbugDownloader *aDownloader = [((id<JavaUtilList>) nil_chk(this$0_->mDownloaders_)) getWithInt:uidx];
    if (aDownloader == mDownloader_) {
      id<APShutterbugManager_ShutterbugManagerListener> listener = [((id<JavaUtilList>) nil_chk(this$0_->mDownloadImageListeners_)) getWithInt:uidx];
      if (bitmap != nil) {
        [((id<APShutterbugManager_ShutterbugManagerListener>) nil_chk(listener)) onImageSuccessWithAPShutterbugManager:this$0_ withADBitmap:bitmap withNSString:[((APDownloadRequest *) nil_chk(mDownloadRequest_)) getUrl]];
      }
      else {
        [((id<APShutterbugManager_ShutterbugManagerListener>) nil_chk(listener)) onImageFailureWithAPShutterbugManager:this$0_ withNSString:[((APDownloadRequest *) nil_chk(mDownloadRequest_)) getUrl]];
      }
      (void) [((id<JavaUtilList>) nil_chk(this$0_->mDownloaders_)) removeWithInt:uidx];
      (void) [((id<JavaUtilList>) nil_chk(this$0_->mDownloadImageListeners_)) removeWithInt:uidx];
    }
  }
  if (bitmap != nil) {
  }
  else {
    [((id<JavaUtilList>) nil_chk(this$0_->mFailedUrls_)) addWithId:[((APDownloadRequest *) nil_chk(mDownloadRequest_)) getUrl]];
  }
  (void) [((id<JavaUtilMap>) nil_chk(this$0_->mDownloadersMap_)) removeWithId:[((APDownloadRequest *) nil_chk(mDownloadRequest_)) getUrl]];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADBitmap;", 0x84, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPShutterbugManager:withAPShutterbugDownloader:withAPDownloadRequest:);
  methods[1].selector = @selector(doInBackgroundWithNSObjectArray:);
  methods[2].selector = @selector(onPostExecuteWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAPShutterbugManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mDownloader_", "LAPShutterbugDownloader;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDownloadRequest_", "LAPDownloadRequest;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPShutterbugManager;LAPShutterbugDownloader;LAPDownloadRequest;", "doInBackground", "[LJavaIoInputStream;", "onPostExecute", "LADBitmap;", "LAPShutterbugManager;", "Lr/android/os/AsyncTask<Ljava/io/InputStream;Ljava/lang/Void;Lr/android/graphics/Bitmap;>;" };
  static const J2ObjcClassInfo _APShutterbugManager_InputStreamHandlingTask = { "InputStreamHandlingTask", "com.applidium.shutterbug", ptrTable, methods, fields, 7, 0x2, 3, 3, 5, -1, -1, 6, -1 };
  return &_APShutterbugManager_InputStreamHandlingTask;
}

@end

void APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(APShutterbugManager_InputStreamHandlingTask *self, APShutterbugManager *outer$, APShutterbugDownloader *downloader, APDownloadRequest *downloadRequest) {
  self->this$0_ = outer$;
  ADAsyncTask_init(self);
  self->mDownloader_ = downloader;
  self->mDownloadRequest_ = downloadRequest;
}

APShutterbugManager_InputStreamHandlingTask *new_APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(APShutterbugManager *outer$, APShutterbugDownloader *downloader, APDownloadRequest *downloadRequest) {
  J2OBJC_NEW_IMPL(APShutterbugManager_InputStreamHandlingTask, initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_, outer$, downloader, downloadRequest)
}

APShutterbugManager_InputStreamHandlingTask *create_APShutterbugManager_InputStreamHandlingTask_initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_(APShutterbugManager *outer$, APShutterbugDownloader *downloader, APDownloadRequest *downloadRequest) {
  J2OBJC_CREATE_IMPL(APShutterbugManager_InputStreamHandlingTask, initWithAPShutterbugManager_withAPShutterbugDownloader_withAPDownloadRequest_, outer$, downloader, downloadRequest)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APShutterbugManager_InputStreamHandlingTask)

@implementation APShutterbugManager_InputStreamHandlingTask_1

- (instancetype)initWithAPImageCache:(APImageCache *)capture$0
                        withNSString:(NSString *)capture$1 {
  APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(self, capture$0, capture$1);
  return self;
}

- (JavaIoInputStream *)getStream {
  return [((APDiskLruCache_Snapshot *) nil_chk([((APImageCache *) nil_chk(val$sharedImageCache_)) queryDiskCacheWithNSString:val$cacheKey_])) getInputStreamWithInt:0];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPImageCache:withNSString:);
  methods[1].selector = @selector(getStream);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$sharedImageCache_", "LAPImageCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$cacheKey_", "LNSString;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPImageCache;LNSString;", "LAPShutterbugManager_InputStreamHandlingTask;", "doInBackgroundWithNSObjectArray:" };
  static const J2ObjcClassInfo _APShutterbugManager_InputStreamHandlingTask_1 = { "", "com.applidium.shutterbug", ptrTable, methods, fields, 7, 0x8010, 2, 2, 1, -1, 2, -1, -1 };
  return &_APShutterbugManager_InputStreamHandlingTask_1;
}

@end

void APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(APShutterbugManager_InputStreamHandlingTask_1 *self, APImageCache *capture$0, NSString *capture$1) {
  self->val$sharedImageCache_ = capture$0;
  self->val$cacheKey_ = capture$1;
  NSObject_init(self);
}

APShutterbugManager_InputStreamHandlingTask_1 *new_APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(APImageCache *capture$0, NSString *capture$1) {
  J2OBJC_NEW_IMPL(APShutterbugManager_InputStreamHandlingTask_1, initWithAPImageCache_withNSString_, capture$0, capture$1)
}

APShutterbugManager_InputStreamHandlingTask_1 *create_APShutterbugManager_InputStreamHandlingTask_1_initWithAPImageCache_withNSString_(APImageCache *capture$0, NSString *capture$1) {
  J2OBJC_CREATE_IMPL(APShutterbugManager_InputStreamHandlingTask_1, initWithAPImageCache_withNSString_, capture$0, capture$1)
}

@implementation APShutterbugManager_ImageManagerListener

- (instancetype)initWithAPShutterbugImageCallBack:(id<APShutterbugImageCallBack>)imageView {
  APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(self, imageView);
  return self;
}

- (void)onImageSuccessWithAPShutterbugManager:(APShutterbugManager *)imageManager
                                 withADBitmap:(id<ADBitmap>)bitmap
                                 withNSString:(NSString *)url {
  [((id<APShutterbugImageCallBack>) nil_chk(mImageView_)) setImageBitmapWithADBitmap:bitmap];
}

- (void)onImageFailureWithAPShutterbugManager:(APShutterbugManager *)imageManager
                                 withNSString:(NSString *)url {
  [((id<APShutterbugImageCallBack>) nil_chk(mImageView_)) showErrorWithNSString:url];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPShutterbugImageCallBack:);
  methods[1].selector = @selector(onImageSuccessWithAPShutterbugManager:withADBitmap:withNSString:);
  methods[2].selector = @selector(onImageFailureWithAPShutterbugManager:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mImageView_", "LAPShutterbugImageCallBack;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPShutterbugImageCallBack;", "onImageSuccess", "LAPShutterbugManager;LADBitmap;LNSString;", "onImageFailure", "LAPShutterbugManager;LNSString;", "LAPShutterbugManager;" };
  static const J2ObjcClassInfo _APShutterbugManager_ImageManagerListener = { "ImageManagerListener", "com.applidium.shutterbug", ptrTable, methods, fields, 7, 0xa, 3, 1, 5, -1, -1, -1, -1 };
  return &_APShutterbugManager_ImageManagerListener;
}

@end

void APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(APShutterbugManager_ImageManagerListener *self, id<APShutterbugImageCallBack> imageView) {
  NSObject_init(self);
  self->mImageView_ = imageView;
}

APShutterbugManager_ImageManagerListener *new_APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(id<APShutterbugImageCallBack> imageView) {
  J2OBJC_NEW_IMPL(APShutterbugManager_ImageManagerListener, initWithAPShutterbugImageCallBack_, imageView)
}

APShutterbugManager_ImageManagerListener *create_APShutterbugManager_ImageManagerListener_initWithAPShutterbugImageCallBack_(id<APShutterbugImageCallBack> imageView) {
  J2OBJC_CREATE_IMPL(APShutterbugManager_ImageManagerListener, initWithAPShutterbugImageCallBack_, imageView)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APShutterbugManager_ImageManagerListener)
