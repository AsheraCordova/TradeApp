//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\LinearLayout.java
//

#include "Canvas.h"
#include "Context.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearLayout.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"


@interface ADLinearLayout () {
 @public
  jboolean mAllowInconsistentMeasurement_;
  jboolean mBaselineAligned_;
  jint mBaselineAlignedChildIndex_;
  jint mBaselineChildTop_;
  jint mOrientation_;
  jint mGravity_;
  jint mTotalLength_;
  jfloat mWeightSum_;
  jboolean mUseLargestChild_;
  IOSIntArray *mMaxAscent_;
  IOSIntArray *mMaxDescent_;
  ADDrawable *mDivider_;
  jint mDividerWidth_;
  jint mDividerHeight_;
  jint mShowDividers_;
  jint mDividerPadding_;
  jint mLayoutDirection_;
}

- (jboolean)isShowingDividers;

- (ADView *)getLastNonGoneChild;

- (jboolean)allViewsAreGoneBeforeWithInt:(jint)childIndex;

- (void)forceUniformWidthWithInt:(jint)count
                         withInt:(jint)heightMeasureSpec;

- (void)forceUniformHeightWithInt:(jint)count
                          withInt:(jint)widthMeasureSpec;

- (void)setChildFrameWithADView:(ADView *)child
                        withInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)width
                        withInt:(jint)height;

@end

J2OBJC_FIELD_SETTER(ADLinearLayout, mMaxAscent_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADLinearLayout, mMaxDescent_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADLinearLayout, mDivider_, ADDrawable *)

inline jint ADLinearLayout_get_VERTICAL_GRAVITY_COUNT(void);
#define ADLinearLayout_VERTICAL_GRAVITY_COUNT 4
J2OBJC_STATIC_FIELD_CONSTANT(ADLinearLayout, VERTICAL_GRAVITY_COUNT, jint)

inline jint ADLinearLayout_get_INDEX_CENTER_VERTICAL(void);
#define ADLinearLayout_INDEX_CENTER_VERTICAL 0
J2OBJC_STATIC_FIELD_CONSTANT(ADLinearLayout, INDEX_CENTER_VERTICAL, jint)

inline jint ADLinearLayout_get_INDEX_TOP(void);
#define ADLinearLayout_INDEX_TOP 1
J2OBJC_STATIC_FIELD_CONSTANT(ADLinearLayout, INDEX_TOP, jint)

inline jint ADLinearLayout_get_INDEX_BOTTOM(void);
#define ADLinearLayout_INDEX_BOTTOM 2
J2OBJC_STATIC_FIELD_CONSTANT(ADLinearLayout, INDEX_BOTTOM, jint)

inline jint ADLinearLayout_get_INDEX_FILL(void);
#define ADLinearLayout_INDEX_FILL 3
J2OBJC_STATIC_FIELD_CONSTANT(ADLinearLayout, INDEX_FILL, jint)

inline jboolean ADLinearLayout_get_sCompatibilityDone(void);
inline jboolean ADLinearLayout_set_sCompatibilityDone(jboolean value);
inline jboolean *ADLinearLayout_getRef_sCompatibilityDone(void);
static jboolean ADLinearLayout_sCompatibilityDone = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADLinearLayout, sCompatibilityDone, jboolean)

inline jboolean ADLinearLayout_get_sRemeasureWeightedChildren(void);
inline jboolean ADLinearLayout_set_sRemeasureWeightedChildren(jboolean value);
inline jboolean *ADLinearLayout_getRef_sRemeasureWeightedChildren(void);
static jboolean ADLinearLayout_sRemeasureWeightedChildren = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADLinearLayout, sRemeasureWeightedChildren, jboolean)

__attribute__((unused)) static jboolean ADLinearLayout_isShowingDividers(ADLinearLayout *self);

__attribute__((unused)) static ADView *ADLinearLayout_getLastNonGoneChild(ADLinearLayout *self);

__attribute__((unused)) static jboolean ADLinearLayout_allViewsAreGoneBeforeWithInt_(ADLinearLayout *self, jint childIndex);

__attribute__((unused)) static void ADLinearLayout_forceUniformWidthWithInt_withInt_(ADLinearLayout *self, jint count, jint heightMeasureSpec);

__attribute__((unused)) static void ADLinearLayout_forceUniformHeightWithInt_withInt_(ADLinearLayout *self, jint count, jint widthMeasureSpec);

__attribute__((unused)) static void ADLinearLayout_setChildFrameWithADView_withInt_withInt_withInt_withInt_(ADLinearLayout *self, ADView *child, jint left, jint top, jint width, jint height);

@implementation ADLinearLayout

- (jboolean)isShowingDividers {
  return ADLinearLayout_isShowingDividers(self);
}

- (void)setShowDividersWithInt:(jint)showDividers {
  if (showDividers == mShowDividers_) {
    return;
  }
  mShowDividers_ = showDividers;
  [self setWillNotDrawWithBoolean:!ADLinearLayout_isShowingDividers(self)];
  [self requestLayout];
}

- (jint)getShowDividers {
  return mShowDividers_;
}

- (ADDrawable *)getDividerDrawable {
  return mDivider_;
}

- (void)setDividerDrawableWithADDrawable:(ADDrawable *)divider {
  if (divider == mDivider_) {
    return;
  }
  JreStrongAssign(&mDivider_, divider);
  if (divider != nil) {
    mDividerWidth_ = [divider getIntrinsicWidth];
    mDividerHeight_ = [divider getIntrinsicHeight];
  }
  else {
    mDividerWidth_ = 0;
    mDividerHeight_ = 0;
  }
  [self setWillNotDrawWithBoolean:!ADLinearLayout_isShowingDividers(self)];
  [self requestLayout];
}

- (void)setDividerPaddingWithInt:(jint)padding {
  if (padding == mDividerPadding_) {
    return;
  }
  mDividerPadding_ = padding;
  if (ADLinearLayout_isShowingDividers(self)) {
    [self requestLayout];
    [self invalidate];
  }
}

- (jint)getDividerPadding {
  return mDividerPadding_;
}

- (void)onDrawWithADCanvas:(id<ADCanvas>)canvas {
  if (mDivider_ == nil) {
    return;
  }
  if (mOrientation_ == ADLinearLayout_VERTICAL) {
    [self drawDividersVerticalWithADCanvas:canvas];
  }
  else {
    [self drawDividersHorizontalWithADCanvas:canvas];
  }
}

- (void)drawDividersVerticalWithADCanvas:(id<ADCanvas>)canvas {
  jint count = [self getVirtualChildCount];
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      if ([self hasDividerBeforeChildAtWithInt:i]) {
        ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
        jint top = [child getTop] - ((ADLinearLayout_LayoutParams *) nil_chk(lp))->topMargin_ - mDividerHeight_;
        [self drawHorizontalDividerWithADCanvas:canvas withInt:top];
      }
    }
  }
  if ([self hasDividerBeforeChildAtWithInt:count]) {
    ADView *child = ADLinearLayout_getLastNonGoneChild(self);
    jint bottom = 0;
    if (child == nil) {
      bottom = [self getHeight] - [self getPaddingBottom] - mDividerHeight_;
    }
    else {
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      bottom = [child getBottom] + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->bottomMargin_;
    }
    [self drawHorizontalDividerWithADCanvas:canvas withInt:bottom];
  }
}

- (ADView *)getLastNonGoneChild {
  return ADLinearLayout_getLastNonGoneChild(self);
}

- (void)drawDividersHorizontalWithADCanvas:(id<ADCanvas>)canvas {
  jint count = [self getVirtualChildCount];
  jboolean isLayoutRtl = [self isLayoutRtl];
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      if ([self hasDividerBeforeChildAtWithInt:i]) {
        ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
        jint position;
        if (isLayoutRtl) {
          position = [child getRight] + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->rightMargin_;
        }
        else {
          position = [child getLeft] - ((ADLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ - mDividerWidth_;
        }
        [self drawVerticalDividerWithADCanvas:canvas withInt:position];
      }
    }
  }
  if ([self hasDividerBeforeChildAtWithInt:count]) {
    ADView *child = ADLinearLayout_getLastNonGoneChild(self);
    jint position;
    if (child == nil) {
      if (isLayoutRtl) {
        position = [self getPaddingLeft];
      }
      else {
        position = [self getWidth] - [self getPaddingRight] - mDividerWidth_;
      }
    }
    else {
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      if (isLayoutRtl) {
        position = [child getLeft] - ((ADLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ - mDividerWidth_;
      }
      else {
        position = [child getRight] + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->rightMargin_;
      }
    }
    [self drawVerticalDividerWithADCanvas:canvas withInt:position];
  }
}

- (void)drawHorizontalDividerWithADCanvas:(id<ADCanvas>)canvas
                                  withInt:(jint)top {
  [((ADDrawable *) nil_chk(mDivider_)) setBoundsWithInt:[self getPaddingLeft] + mDividerPadding_ withInt:top withInt:[self getWidth] - [self getPaddingRight] - mDividerPadding_ withInt:top + mDividerHeight_];
  [((ADDrawable *) nil_chk(mDivider_)) drawWithADCanvas:canvas];
}

- (void)drawVerticalDividerWithADCanvas:(id<ADCanvas>)canvas
                                withInt:(jint)left {
  [((ADDrawable *) nil_chk(mDivider_)) setBoundsWithInt:left withInt:[self getPaddingTop] + mDividerPadding_ withInt:left + mDividerWidth_ withInt:[self getHeight] - [self getPaddingBottom] - mDividerPadding_];
  [((ADDrawable *) nil_chk(mDivider_)) drawWithADCanvas:canvas];
}

- (jboolean)isBaselineAligned {
  return mBaselineAligned_;
}

- (void)setBaselineAlignedWithBoolean:(jboolean)baselineAligned {
  mBaselineAligned_ = baselineAligned;
}

- (jboolean)isMeasureWithLargestChildEnabled {
  return mUseLargestChild_;
}

- (void)setMeasureWithLargestChildEnabledWithBoolean:(jboolean)enabled {
  mUseLargestChild_ = enabled;
}

- (jint)getBaseline {
  if (mBaselineAlignedChildIndex_ < 0) {
    return [super getBaseline];
  }
  if ([self getChildCount] <= mBaselineAlignedChildIndex_) {
    @throw create_JavaLangRuntimeException_initWithNSString_(@"mBaselineAlignedChildIndex of LinearLayout set to an index that is out of bounds.");
  }
  ADView *child = [self getChildAtWithInt:mBaselineAlignedChildIndex_];
  jint childBaseline = [((ADView *) nil_chk(child)) getBaseline];
  if (childBaseline == -1) {
    if (mBaselineAlignedChildIndex_ == 0) {
      return -1;
    }
    @throw create_JavaLangRuntimeException_initWithNSString_(@"mBaselineAlignedChildIndex of LinearLayout points to a View that doesn't know how to get its baseline.");
  }
  jint childTop = mBaselineChildTop_;
  if (mOrientation_ == ADLinearLayout_VERTICAL) {
    jint majorGravity = mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
    if (majorGravity != ADGravity_TOP) {
      switch (majorGravity) {
        case ADGravity_BOTTOM:
        childTop = mBottom_ - mTop_ - mPaddingBottom_ - mTotalLength_;
        break;
        case ADGravity_CENTER_VERTICAL:
        childTop += JreIntDiv(((mBottom_ - mTop_ - mPaddingTop_ - mPaddingBottom_) - mTotalLength_), 2);
        break;
      }
    }
  }
  ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
  return childTop + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->topMargin_ + childBaseline;
}

- (jint)getBaselineAlignedChildIndex {
  return mBaselineAlignedChildIndex_;
}

- (void)setBaselineAlignedChildIndexWithInt:(jint)i {
  if ((i < 0) || (i >= [self getChildCount])) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$IC", @"base aligned child index out of range (0, ", [self getChildCount], ')'));
  }
  mBaselineAlignedChildIndex_ = i;
}

- (ADView *)getVirtualChildAtWithInt:(jint)index {
  return [self getChildAtWithInt:index];
}

- (jint)getVirtualChildCount {
  return [self getChildCount];
}

- (jfloat)getWeightSum {
  return mWeightSum_;
}

- (void)setWeightSumWithFloat:(jfloat)weightSum {
  mWeightSum_ = JavaLangMath_maxWithFloat_withFloat_(0.0f, weightSum);
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mOrientation_ == ADLinearLayout_VERTICAL) {
    [self measureVerticalWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
  else {
    [self measureHorizontalWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
}

- (jboolean)hasDividerBeforeChildAtWithInt:(jint)childIndex {
  if (childIndex == [self getVirtualChildCount]) {
    return (mShowDividers_ & ADLinearLayout_SHOW_DIVIDER_END) != 0;
  }
  jboolean allViewsAreGoneBefore = ADLinearLayout_allViewsAreGoneBeforeWithInt_(self, childIndex);
  if (allViewsAreGoneBefore) {
    return (mShowDividers_ & ADLinearLayout_SHOW_DIVIDER_BEGINNING) != 0;
  }
  else {
    return (mShowDividers_ & ADLinearLayout_SHOW_DIVIDER_MIDDLE) != 0;
  }
}

- (jboolean)allViewsAreGoneBeforeWithInt:(jint)childIndex {
  return ADLinearLayout_allViewsAreGoneBeforeWithInt_(self, childIndex);
}

- (void)measureVerticalWithInt:(jint)widthMeasureSpec
                       withInt:(jint)heightMeasureSpec {
  mTotalLength_ = 0;
  jint maxWidth = 0;
  jint childState = 0;
  jint alternativeMaxWidth = 0;
  jint weightedMaxWidth = 0;
  jboolean allFillParent = true;
  jfloat totalWeight = 0;
  jint count = [self getVirtualChildCount];
  jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jboolean matchWidth = false;
  jboolean skippedMeasure = false;
  jint baselineChildIndex = mBaselineAlignedChildIndex_;
  jboolean useLargestChild = mUseLargestChild_;
  jint largestChildHeight = JavaLangInteger_MIN_VALUE;
  jint consumedExcessSpace = 0;
  jint nonSkippedChildCount = 0;
  for (jint i = 0; i < count; ++i) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child == nil) {
      mTotalLength_ += [self measureNullChildWithInt:i];
      continue;
    }
    if ([child getVisibility] == ADView_GONE) {
      i += [self getChildrenSkipCountWithADView:child withInt:i];
      continue;
    }
    nonSkippedChildCount++;
    if ([self hasDividerBeforeChildAtWithInt:i]) {
      mTotalLength_ += mDividerHeight_;
    }
    ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
    JrePlusAssignFloatF(&totalWeight, ((ADLinearLayout_LayoutParams *) nil_chk(lp))->weight_);
    jboolean useExcessSpace = lp->height_ == 0 && lp->weight_ > 0;
    if (heightMode == ADView_MeasureSpec_EXACTLY && useExcessSpace) {
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + lp->topMargin_ + lp->bottomMargin_);
      skippedMeasure = true;
    }
    else {
      if (useExcessSpace) {
        lp->height_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
      }
      jint usedHeight = totalWeight == 0 ? mTotalLength_ : 0;
      [self measureChildBeforeLayoutWithADView:child withInt:i withInt:widthMeasureSpec withInt:0 withInt:heightMeasureSpec withInt:usedHeight];
      jint childHeight = [child getMeasuredHeight];
      if (useExcessSpace) {
        lp->height_ = 0;
        consumedExcessSpace += childHeight;
      }
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + childHeight + lp->topMargin_ + lp->bottomMargin_ + [self getNextLocationOffsetWithADView:child]);
      if (useLargestChild) {
        largestChildHeight = JavaLangMath_maxWithInt_withInt_(childHeight, largestChildHeight);
      }
    }
    if ((baselineChildIndex >= 0) && (baselineChildIndex == i + 1)) {
      mBaselineChildTop_ = mTotalLength_;
    }
    if (i < baselineChildIndex && lp->weight_ > 0) {
      @throw create_JavaLangRuntimeException_initWithNSString_(@"A child of LinearLayout with index less than mBaselineAlignedChildIndex has weight > 0, which won't work.  Either remove the weight, or don't set mBaselineAlignedChildIndex.");
    }
    jboolean matchWidthLocally = false;
    if (widthMode != ADView_MeasureSpec_EXACTLY && lp->width_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      matchWidth = true;
      matchWidthLocally = true;
    }
    jint margin = lp->leftMargin_ + lp->rightMargin_;
    jint measuredWidth = [child getMeasuredWidth] + margin;
    maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, measuredWidth);
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
    allFillParent = (allFillParent && lp->width_ == ADViewGroup_LayoutParams_MATCH_PARENT);
    if (lp->weight_ > 0) {
      weightedMaxWidth = JavaLangMath_maxWithInt_withInt_(weightedMaxWidth, matchWidthLocally ? margin : measuredWidth);
    }
    else {
      alternativeMaxWidth = JavaLangMath_maxWithInt_withInt_(alternativeMaxWidth, matchWidthLocally ? margin : measuredWidth);
    }
    i += [self getChildrenSkipCountWithADView:child withInt:i];
  }
  if (nonSkippedChildCount > 0 && [self hasDividerBeforeChildAtWithInt:count]) {
    mTotalLength_ += mDividerHeight_;
  }
  if (useLargestChild && (heightMode == ADView_MeasureSpec_AT_MOST || heightMode == ADView_MeasureSpec_UNSPECIFIED)) {
    mTotalLength_ = 0;
    for (jint i = 0; i < count; ++i) {
      ADView *child = [self getVirtualChildAtWithInt:i];
      if (child == nil) {
        mTotalLength_ += [self measureNullChildWithInt:i];
        continue;
      }
      if ([child getVisibility] == ADView_GONE) {
        i += [self getChildrenSkipCountWithADView:child withInt:i];
        continue;
      }
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + largestChildHeight + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->topMargin_ + lp->bottomMargin_ + [self getNextLocationOffsetWithADView:child]);
    }
  }
  mTotalLength_ += mPaddingTop_ + mPaddingBottom_;
  jint heightSize = mTotalLength_;
  heightSize = JavaLangMath_maxWithInt_withInt_(heightSize, [self getSuggestedMinimumHeight]);
  jint heightSizeAndState = ADView_resolveSizeAndStateWithInt_withInt_withInt_(heightSize, heightMeasureSpec, 0);
  heightSize = heightSizeAndState & ADView_MEASURED_SIZE_MASK;
  jint remainingExcess = heightSize - mTotalLength_ + (mAllowInconsistentMeasurement_ ? 0 : consumedExcessSpace);
  if (skippedMeasure || ((ADLinearLayout_sRemeasureWeightedChildren || remainingExcess != 0) && totalWeight > 0.0f)) {
    jfloat remainingWeightSum = mWeightSum_ > 0.0f ? mWeightSum_ : totalWeight;
    mTotalLength_ = 0;
    for (jint i = 0; i < count; ++i) {
      ADView *child = [self getVirtualChildAtWithInt:i];
      if (child == nil || [child getVisibility] == ADView_GONE) {
        continue;
      }
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      jfloat childWeight = ((ADLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
      if (childWeight > 0) {
        jint share = JreFpToInt((childWeight * remainingExcess / remainingWeightSum));
        remainingExcess -= share;
        JreMinusAssignFloatF(&remainingWeightSum, childWeight);
        jint childHeight;
        if (mUseLargestChild_ && heightMode != ADView_MeasureSpec_EXACTLY) {
          childHeight = largestChildHeight;
        }
        else if (lp->height_ == 0 && (!mAllowInconsistentMeasurement_ || heightMode == ADView_MeasureSpec_EXACTLY)) {
          childHeight = share;
        }
        else {
          childHeight = [child getMeasuredHeight] + share;
        }
        jint childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(0, childHeight), ADView_MeasureSpec_EXACTLY);
        jint childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, mPaddingLeft_ + mPaddingRight_ + lp->leftMargin_ + lp->rightMargin_, lp->width_);
        [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
        childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState] & (JreRShift32(ADView_MEASURED_STATE_MASK, ADView_MEASURED_HEIGHT_STATE_SHIFT)));
      }
      jint margin = lp->leftMargin_ + lp->rightMargin_;
      jint measuredWidth = [child getMeasuredWidth] + margin;
      maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, measuredWidth);
      jboolean matchWidthLocally = widthMode != ADView_MeasureSpec_EXACTLY && lp->width_ == ADViewGroup_LayoutParams_MATCH_PARENT;
      alternativeMaxWidth = JavaLangMath_maxWithInt_withInt_(alternativeMaxWidth, matchWidthLocally ? margin : measuredWidth);
      allFillParent = (allFillParent && lp->width_ == ADViewGroup_LayoutParams_MATCH_PARENT);
      jint totalLength = mTotalLength_;
      mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + [child getMeasuredHeight] + lp->topMargin_ + lp->bottomMargin_ + [self getNextLocationOffsetWithADView:child]);
    }
    mTotalLength_ += mPaddingTop_ + mPaddingBottom_;
  }
  else {
    alternativeMaxWidth = JavaLangMath_maxWithInt_withInt_(alternativeMaxWidth, weightedMaxWidth);
    if (useLargestChild && heightMode != ADView_MeasureSpec_EXACTLY) {
      for (jint i = 0; i < count; i++) {
        ADView *child = [self getVirtualChildAtWithInt:i];
        if (child == nil || [child getVisibility] == ADView_GONE) {
          continue;
        }
        ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
        jfloat childExtra = ((ADLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
        if (childExtra > 0) {
          [child measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([child getMeasuredWidth], ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(largestChildHeight, ADView_MeasureSpec_EXACTLY)];
        }
      }
    }
  }
  if (!allFillParent && widthMode != ADView_MeasureSpec_EXACTLY) {
    maxWidth = alternativeMaxWidth;
  }
  maxWidth += mPaddingLeft_ + mPaddingRight_;
  maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [self getSuggestedMinimumWidth]);
  [self setMeasuredDimensionWithInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(maxWidth, widthMeasureSpec, childState) withInt:heightSizeAndState];
  if (matchWidth) {
    ADLinearLayout_forceUniformWidthWithInt_withInt_(self, count, heightMeasureSpec);
  }
}

- (void)forceUniformWidthWithInt:(jint)count
                         withInt:(jint)heightMeasureSpec {
  ADLinearLayout_forceUniformWidthWithInt_withInt_(self, count, heightMeasureSpec);
}

- (void)measureHorizontalWithInt:(jint)widthMeasureSpec
                         withInt:(jint)heightMeasureSpec {
  mTotalLength_ = 0;
  jint maxHeight = 0;
  jint childState = 0;
  jint alternativeMaxHeight = 0;
  jint weightedMaxHeight = 0;
  jboolean allFillParent = true;
  jfloat totalWeight = 0;
  jint count = [self getVirtualChildCount];
  jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jboolean matchHeight = false;
  jboolean skippedMeasure = false;
  if (mMaxAscent_ == nil || mMaxDescent_ == nil) {
    JreStrongAssignAndConsume(&mMaxAscent_, [IOSIntArray newArrayWithLength:ADLinearLayout_VERTICAL_GRAVITY_COUNT]);
    JreStrongAssignAndConsume(&mMaxDescent_, [IOSIntArray newArrayWithLength:ADLinearLayout_VERTICAL_GRAVITY_COUNT]);
  }
  IOSIntArray *maxAscent = mMaxAscent_;
  IOSIntArray *maxDescent = mMaxDescent_;
  *IOSIntArray_GetRef(maxAscent, 0) = *IOSIntArray_GetRef(maxAscent, 1) = *IOSIntArray_GetRef(maxAscent, 2) = *IOSIntArray_GetRef(maxAscent, 3) = -1;
  *IOSIntArray_GetRef(maxDescent, 0) = *IOSIntArray_GetRef(maxDescent, 1) = *IOSIntArray_GetRef(maxDescent, 2) = *IOSIntArray_GetRef(maxDescent, 3) = -1;
  jboolean baselineAligned = mBaselineAligned_;
  jboolean useLargestChild = mUseLargestChild_;
  jboolean isExactly = widthMode == ADView_MeasureSpec_EXACTLY;
  jint largestChildWidth = JavaLangInteger_MIN_VALUE;
  jint usedExcessSpace = 0;
  jint nonSkippedChildCount = 0;
  for (jint i = 0; i < count; ++i) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child == nil) {
      mTotalLength_ += [self measureNullChildWithInt:i];
      continue;
    }
    if ([child getVisibility] == ADView_GONE) {
      i += [self getChildrenSkipCountWithADView:child withInt:i];
      continue;
    }
    nonSkippedChildCount++;
    if ([self hasDividerBeforeChildAtWithInt:i]) {
      mTotalLength_ += mDividerWidth_;
    }
    ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
    JrePlusAssignFloatF(&totalWeight, ((ADLinearLayout_LayoutParams *) nil_chk(lp))->weight_);
    jboolean useExcessSpace = lp->width_ == 0 && lp->weight_ > 0;
    if (widthMode == ADView_MeasureSpec_EXACTLY && useExcessSpace) {
      if (isExactly) {
        mTotalLength_ += lp->leftMargin_ + lp->rightMargin_;
      }
      else {
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + lp->leftMargin_ + lp->rightMargin_);
      }
      if (baselineAligned) {
        jint freeWidthSpec = ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec), ADView_MeasureSpec_UNSPECIFIED);
        jint freeHeightSpec = ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec), ADView_MeasureSpec_UNSPECIFIED);
        [child measureWithInt:freeWidthSpec withInt:freeHeightSpec];
      }
      else {
        skippedMeasure = true;
      }
    }
    else {
      if (useExcessSpace) {
        lp->width_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
      }
      jint usedWidth = totalWeight == 0 ? mTotalLength_ : 0;
      [self measureChildBeforeLayoutWithADView:child withInt:i withInt:widthMeasureSpec withInt:usedWidth withInt:heightMeasureSpec withInt:0];
      jint childWidth = [child getMeasuredWidth];
      if (useExcessSpace) {
        lp->width_ = 0;
        usedExcessSpace += childWidth;
      }
      if (isExactly) {
        mTotalLength_ += childWidth + lp->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child];
      }
      else {
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + childWidth + lp->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child]);
      }
      if (useLargestChild) {
        largestChildWidth = JavaLangMath_maxWithInt_withInt_(childWidth, largestChildWidth);
      }
    }
    jboolean matchHeightLocally = false;
    if (heightMode != ADView_MeasureSpec_EXACTLY && lp->height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      matchHeight = true;
      matchHeightLocally = true;
    }
    jint margin = lp->topMargin_ + lp->bottomMargin_;
    jint childHeight = [child getMeasuredHeight] + margin;
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
    if (baselineAligned) {
      jint childBaseline = [child getBaseline];
      if (childBaseline != -1) {
        jint gravity = (lp->gravity_ < 0 ? mGravity_ : lp->gravity_) & ADGravity_VERTICAL_GRAVITY_MASK;
        jint index = JreRShift32(((JreRShift32(gravity, ADGravity_AXIS_Y_SHIFT)) & ~ADGravity_AXIS_SPECIFIED), 1);
        *IOSIntArray_GetRef(maxAscent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, index), childBaseline);
        *IOSIntArray_GetRef(maxDescent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, index), childHeight - childBaseline);
      }
    }
    maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, childHeight);
    allFillParent = (allFillParent && lp->height_ == ADViewGroup_LayoutParams_MATCH_PARENT);
    if (lp->weight_ > 0) {
      weightedMaxHeight = JavaLangMath_maxWithInt_withInt_(weightedMaxHeight, matchHeightLocally ? margin : childHeight);
    }
    else {
      alternativeMaxHeight = JavaLangMath_maxWithInt_withInt_(alternativeMaxHeight, matchHeightLocally ? margin : childHeight);
    }
    i += [self getChildrenSkipCountWithADView:child withInt:i];
  }
  if (nonSkippedChildCount > 0 && [self hasDividerBeforeChildAtWithInt:count]) {
    mTotalLength_ += mDividerWidth_;
  }
  if (IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_TOP) != -1 || IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_CENTER_VERTICAL) != -1 || IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_BOTTOM) != -1 || IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_FILL) != -1) {
    jint ascent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_TOP), IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_BOTTOM))));
    jint descent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_TOP), IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_BOTTOM))));
    maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, ascent + descent);
  }
  if (useLargestChild && (widthMode == ADView_MeasureSpec_AT_MOST || widthMode == ADView_MeasureSpec_UNSPECIFIED)) {
    mTotalLength_ = 0;
    for (jint i = 0; i < count; ++i) {
      ADView *child = [self getVirtualChildAtWithInt:i];
      if (child == nil) {
        mTotalLength_ += [self measureNullChildWithInt:i];
        continue;
      }
      if ([child getVisibility] == ADView_GONE) {
        i += [self getChildrenSkipCountWithADView:child withInt:i];
        continue;
      }
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      if (isExactly) {
        mTotalLength_ += largestChildWidth + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child];
      }
      else {
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + largestChildWidth + ((ADLinearLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child]);
      }
    }
  }
  mTotalLength_ += mPaddingLeft_ + mPaddingRight_;
  jint widthSize = mTotalLength_;
  widthSize = JavaLangMath_maxWithInt_withInt_(widthSize, [self getSuggestedMinimumWidth]);
  jint widthSizeAndState = ADView_resolveSizeAndStateWithInt_withInt_withInt_(widthSize, widthMeasureSpec, 0);
  widthSize = widthSizeAndState & ADView_MEASURED_SIZE_MASK;
  jint remainingExcess = widthSize - mTotalLength_ + (mAllowInconsistentMeasurement_ ? 0 : usedExcessSpace);
  if (skippedMeasure || ((ADLinearLayout_sRemeasureWeightedChildren || remainingExcess != 0) && totalWeight > 0.0f)) {
    jfloat remainingWeightSum = mWeightSum_ > 0.0f ? mWeightSum_ : totalWeight;
    *IOSIntArray_GetRef(maxAscent, 0) = *IOSIntArray_GetRef(maxAscent, 1) = *IOSIntArray_GetRef(maxAscent, 2) = *IOSIntArray_GetRef(maxAscent, 3) = -1;
    *IOSIntArray_GetRef(maxDescent, 0) = *IOSIntArray_GetRef(maxDescent, 1) = *IOSIntArray_GetRef(maxDescent, 2) = *IOSIntArray_GetRef(maxDescent, 3) = -1;
    maxHeight = -1;
    mTotalLength_ = 0;
    for (jint i = 0; i < count; ++i) {
      ADView *child = [self getVirtualChildAtWithInt:i];
      if (child == nil || [child getVisibility] == ADView_GONE) {
        continue;
      }
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      jfloat childWeight = ((ADLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
      if (childWeight > 0) {
        jint share = JreFpToInt((childWeight * remainingExcess / remainingWeightSum));
        remainingExcess -= share;
        JreMinusAssignFloatF(&remainingWeightSum, childWeight);
        jint childWidth;
        if (mUseLargestChild_ && widthMode != ADView_MeasureSpec_EXACTLY) {
          childWidth = largestChildWidth;
        }
        else if (lp->width_ == 0 && (!mAllowInconsistentMeasurement_ || widthMode == ADView_MeasureSpec_EXACTLY)) {
          childWidth = share;
        }
        else {
          childWidth = [child getMeasuredWidth] + share;
        }
        jint childWidthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(0, childWidth), ADView_MeasureSpec_EXACTLY);
        jint childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_, lp->height_);
        [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
        childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState] & ADView_MEASURED_STATE_MASK);
      }
      if (isExactly) {
        mTotalLength_ += [child getMeasuredWidth] + lp->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child];
      }
      else {
        jint totalLength = mTotalLength_;
        mTotalLength_ = JavaLangMath_maxWithInt_withInt_(totalLength, totalLength + [child getMeasuredWidth] + lp->leftMargin_ + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child]);
      }
      jboolean matchHeightLocally = heightMode != ADView_MeasureSpec_EXACTLY && lp->height_ == ADViewGroup_LayoutParams_MATCH_PARENT;
      jint margin = lp->topMargin_ + lp->bottomMargin_;
      jint childHeight = [child getMeasuredHeight] + margin;
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, childHeight);
      alternativeMaxHeight = JavaLangMath_maxWithInt_withInt_(alternativeMaxHeight, matchHeightLocally ? margin : childHeight);
      allFillParent = (allFillParent && lp->height_ == ADViewGroup_LayoutParams_MATCH_PARENT);
      if (baselineAligned) {
        jint childBaseline = [child getBaseline];
        if (childBaseline != -1) {
          jint gravity = (lp->gravity_ < 0 ? mGravity_ : lp->gravity_) & ADGravity_VERTICAL_GRAVITY_MASK;
          jint index = JreRShift32(((JreRShift32(gravity, ADGravity_AXIS_Y_SHIFT)) & ~ADGravity_AXIS_SPECIFIED), 1);
          *IOSIntArray_GetRef(maxAscent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, index), childBaseline);
          *IOSIntArray_GetRef(maxDescent, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, index), childHeight - childBaseline);
        }
      }
    }
    mTotalLength_ += mPaddingLeft_ + mPaddingRight_;
    if (IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_TOP) != -1 || IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_CENTER_VERTICAL) != -1 || IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_BOTTOM) != -1 || IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_FILL) != -1) {
      jint ascent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_TOP), IOSIntArray_Get(maxAscent, ADLinearLayout_INDEX_BOTTOM))));
      jint descent = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_FILL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_CENTER_VERTICAL), JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_TOP), IOSIntArray_Get(maxDescent, ADLinearLayout_INDEX_BOTTOM))));
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, ascent + descent);
    }
  }
  else {
    alternativeMaxHeight = JavaLangMath_maxWithInt_withInt_(alternativeMaxHeight, weightedMaxHeight);
    if (useLargestChild && widthMode != ADView_MeasureSpec_EXACTLY) {
      for (jint i = 0; i < count; i++) {
        ADView *child = [self getVirtualChildAtWithInt:i];
        if (child == nil || [child getVisibility] == ADView_GONE) {
          continue;
        }
        ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
        jfloat childExtra = ((ADLinearLayout_LayoutParams *) nil_chk(lp))->weight_;
        if (childExtra > 0) {
          [child measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(largestChildWidth, ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([child getMeasuredHeight], ADView_MeasureSpec_EXACTLY)];
        }
      }
    }
  }
  if (!allFillParent && heightMode != ADView_MeasureSpec_EXACTLY) {
    maxHeight = alternativeMaxHeight;
  }
  maxHeight += mPaddingTop_ + mPaddingBottom_;
  maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [self getSuggestedMinimumHeight]);
  [self setMeasuredDimensionWithInt:widthSizeAndState | (childState & ADView_MEASURED_STATE_MASK) withInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(maxHeight, heightMeasureSpec, (JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT)))];
  if (matchHeight) {
    ADLinearLayout_forceUniformHeightWithInt_withInt_(self, count, widthMeasureSpec);
  }
}

- (void)forceUniformHeightWithInt:(jint)count
                          withInt:(jint)widthMeasureSpec {
  ADLinearLayout_forceUniformHeightWithInt_withInt_(self, count, widthMeasureSpec);
}

- (jint)getChildrenSkipCountWithADView:(ADView *)child
                               withInt:(jint)index {
  return 0;
}

- (jint)measureNullChildWithInt:(jint)childIndex {
  return 0;
}

- (void)measureChildBeforeLayoutWithADView:(ADView *)child
                                   withInt:(jint)childIndex
                                   withInt:(jint)widthMeasureSpec
                                   withInt:(jint)totalWidth
                                   withInt:(jint)heightMeasureSpec
                                   withInt:(jint)totalHeight {
  [self measureChildWithMarginsWithADView:child withInt:widthMeasureSpec withInt:totalWidth withInt:heightMeasureSpec withInt:totalHeight];
}

- (jint)getLocationOffsetWithADView:(ADView *)child {
  return 0;
}

- (jint)getNextLocationOffsetWithADView:(ADView *)child {
  return 0;
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  if (mOrientation_ == ADLinearLayout_VERTICAL) {
    [self layoutVerticalWithInt:l withInt:t withInt:r withInt:b];
  }
  else {
    [self layoutHorizontalWithInt:l withInt:t withInt:r withInt:b];
  }
}

- (void)layoutVerticalWithInt:(jint)left
                      withInt:(jint)top
                      withInt:(jint)right
                      withInt:(jint)bottom {
  jint paddingLeft = mPaddingLeft_;
  jint childTop;
  jint childLeft;
  jint width = right - left;
  jint childRight = width - mPaddingRight_;
  jint childSpace = width - paddingLeft - mPaddingRight_;
  jint count = [self getVirtualChildCount];
  jint majorGravity = mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
  jint minorGravity = mGravity_ & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK;
  switch (majorGravity) {
    case ADGravity_BOTTOM:
    childTop = mPaddingTop_ + bottom - top - mTotalLength_;
    break;
    case ADGravity_CENTER_VERTICAL:
    childTop = mPaddingTop_ + JreIntDiv((bottom - top - mTotalLength_), 2);
    break;
    case ADGravity_TOP:
    default:
    childTop = mPaddingTop_;
    break;
  }
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child == nil) {
      childTop += [self measureNullChildWithInt:i];
    }
    else if ([child getVisibility] != ADView_GONE) {
      jint childWidth = [child getMeasuredWidth];
      jint childHeight = [child getMeasuredHeight];
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      jint gravity = ((ADLinearLayout_LayoutParams *) nil_chk(lp))->gravity_;
      if (gravity < 0) {
        gravity = minorGravity;
      }
      jint layoutDirection = [self getLayoutDirection];
      jint absoluteGravity = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
      switch (absoluteGravity & ADGravity_HORIZONTAL_GRAVITY_MASK) {
        case ADGravity_CENTER_HORIZONTAL:
        childLeft = paddingLeft + (JreIntDiv((childSpace - childWidth), 2)) + lp->leftMargin_ - lp->rightMargin_;
        break;
        case ADGravity_RIGHT:
        childLeft = childRight - childWidth - lp->rightMargin_;
        break;
        case ADGravity_LEFT:
        default:
        childLeft = paddingLeft + lp->leftMargin_;
        break;
      }
      if ([self hasDividerBeforeChildAtWithInt:i]) {
        childTop += mDividerHeight_;
      }
      childTop += lp->topMargin_;
      ADLinearLayout_setChildFrameWithADView_withInt_withInt_withInt_withInt_(self, child, childLeft, childTop + [self getLocationOffsetWithADView:child], childWidth, childHeight);
      childTop += childHeight + lp->bottomMargin_ + [self getNextLocationOffsetWithADView:child];
      i += [self getChildrenSkipCountWithADView:child withInt:i];
    }
  }
}

- (void)layoutHorizontalWithInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)right
                        withInt:(jint)bottom {
  jboolean isLayoutRtl = [self isLayoutRtl];
  jint paddingTop = mPaddingTop_;
  jint childTop;
  jint childLeft;
  jint height = bottom - top;
  jint childBottom = height - mPaddingBottom_;
  jint childSpace = height - paddingTop - mPaddingBottom_;
  jint count = [self getVirtualChildCount];
  jint majorGravity = mGravity_ & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK;
  jint minorGravity = mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
  jboolean baselineAligned = mBaselineAligned_;
  IOSIntArray *maxAscent = mMaxAscent_;
  IOSIntArray *maxDescent = mMaxDescent_;
  jint layoutDirection = [self getLayoutDirection];
  switch (ADGravity_getAbsoluteGravityWithInt_withInt_(majorGravity, layoutDirection)) {
    case ADGravity_RIGHT:
    childLeft = mPaddingLeft_ + right - left - mTotalLength_;
    break;
    case ADGravity_CENTER_HORIZONTAL:
    childLeft = mPaddingLeft_ + JreIntDiv((right - left - mTotalLength_), 2);
    break;
    case ADGravity_LEFT:
    default:
    childLeft = mPaddingLeft_;
    break;
  }
  jint start = 0;
  jint dir = 1;
  if (isLayoutRtl) {
    start = count - 1;
    dir = -1;
  }
  for (jint i = 0; i < count; i++) {
    jint childIndex = start + dir * i;
    ADView *child = [self getVirtualChildAtWithInt:childIndex];
    if (child == nil) {
      childLeft += [self measureNullChildWithInt:childIndex];
    }
    else if ([child getVisibility] != ADView_GONE) {
      jint childWidth = [child getMeasuredWidth];
      jint childHeight = [child getMeasuredHeight];
      jint childBaseline = -1;
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      if (baselineAligned && ((ADLinearLayout_LayoutParams *) nil_chk(lp))->height_ != ADViewGroup_LayoutParams_MATCH_PARENT) {
        childBaseline = [child getBaseline];
      }
      jint gravity = ((ADLinearLayout_LayoutParams *) nil_chk(lp))->gravity_;
      if (gravity < 0) {
        gravity = minorGravity;
      }
      switch (gravity & ADGravity_VERTICAL_GRAVITY_MASK) {
        case ADGravity_TOP:
        childTop = paddingTop + lp->topMargin_;
        if (childBaseline != -1) {
          childTop += IOSIntArray_Get(nil_chk(maxAscent), ADLinearLayout_INDEX_TOP) - childBaseline;
        }
        break;
        case ADGravity_CENTER_VERTICAL:
        childTop = paddingTop + (JreIntDiv((childSpace - childHeight), 2)) + lp->topMargin_ - lp->bottomMargin_;
        break;
        case ADGravity_BOTTOM:
        childTop = childBottom - childHeight - lp->bottomMargin_;
        if (childBaseline != -1) {
          jint descent = [child getMeasuredHeight] - childBaseline;
          childTop -= (IOSIntArray_Get(nil_chk(maxDescent), ADLinearLayout_INDEX_BOTTOM) - descent);
        }
        break;
        default:
        childTop = paddingTop;
        break;
      }
      if ([self hasDividerBeforeChildAtWithInt:childIndex]) {
        childLeft += mDividerWidth_;
      }
      childLeft += lp->leftMargin_;
      ADLinearLayout_setChildFrameWithADView_withInt_withInt_withInt_withInt_(self, child, childLeft + [self getLocationOffsetWithADView:child], childTop, childWidth, childHeight);
      childLeft += childWidth + lp->rightMargin_ + [self getNextLocationOffsetWithADView:child];
      i += [self getChildrenSkipCountWithADView:child withInt:childIndex];
    }
  }
}

- (void)setChildFrameWithADView:(ADView *)child
                        withInt:(jint)left
                        withInt:(jint)top
                        withInt:(jint)width
                        withInt:(jint)height {
  ADLinearLayout_setChildFrameWithADView_withInt_withInt_withInt_withInt_(self, child, left, top, width, height);
}

- (void)setOrientationWithInt:(jint)orientation {
  if (mOrientation_ != orientation) {
    mOrientation_ = orientation;
    [self requestLayout];
  }
}

- (jint)getOrientation {
  return mOrientation_;
}

- (void)setGravityWithInt:(jint)gravity {
  if (mGravity_ != gravity) {
    if ((gravity & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
      gravity |= ADGravity_START;
    }
    if ((gravity & ADGravity_VERTICAL_GRAVITY_MASK) == 0) {
      gravity |= ADGravity_TOP;
    }
    mGravity_ = gravity;
    [self requestLayout];
  }
}

- (jint)getGravity {
  return mGravity_;
}

- (ADLinearLayout_LayoutParams *)generateDefaultLayoutParams {
  if (mOrientation_ == ADLinearLayout_HORIZONTAL) {
    return create_ADLinearLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  }
  else if (mOrientation_ == ADLinearLayout_VERTICAL) {
    return create_ADLinearLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  }
  return nil;
}

- (ADLinearLayout_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)lp {
  if (JreLoadStatic(ADView, sPreserveMarginParamsInLayoutParamConversion)) {
    if ([lp isKindOfClass:[ADLinearLayout_LayoutParams class]]) {
      return create_ADLinearLayout_LayoutParams_initWithADLinearLayout_LayoutParams_((ADLinearLayout_LayoutParams *) lp);
    }
    else if ([lp isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
      return create_ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_((ADViewGroup_MarginLayoutParams *) lp);
    }
  }
  return create_ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(lp);
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[ADLinearLayout_LayoutParams class]];
}

- (instancetype)initWithADContext:(ADContext *)context {
  ADLinearLayout_initWithADContext_(self, context);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinearLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateDividerHeightWithInt:(jint)mDividerHeight {
  self->mDividerHeight_ = mDividerHeight;
  if (mDivider_ != nil) {
    [mDivider_ setMinimumHeightWithInt:mDividerHeight];
  }
  [self requestLayout];
}

- (void)dealloc {
  RELEASE_(mMaxAscent_);
  RELEASE_(mMaxDescent_);
  RELEASE_(mDivider_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 6, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 8, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 16, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 21, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 22, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 29, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 32, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 34, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 39, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x4, 44, 45, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 46, 45, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 47, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isShowingDividers);
  methods[1].selector = @selector(setShowDividersWithInt:);
  methods[2].selector = @selector(getShowDividers);
  methods[3].selector = @selector(getDividerDrawable);
  methods[4].selector = @selector(setDividerDrawableWithADDrawable:);
  methods[5].selector = @selector(setDividerPaddingWithInt:);
  methods[6].selector = @selector(getDividerPadding);
  methods[7].selector = @selector(onDrawWithADCanvas:);
  methods[8].selector = @selector(drawDividersVerticalWithADCanvas:);
  methods[9].selector = @selector(getLastNonGoneChild);
  methods[10].selector = @selector(drawDividersHorizontalWithADCanvas:);
  methods[11].selector = @selector(drawHorizontalDividerWithADCanvas:withInt:);
  methods[12].selector = @selector(drawVerticalDividerWithADCanvas:withInt:);
  methods[13].selector = @selector(isBaselineAligned);
  methods[14].selector = @selector(setBaselineAlignedWithBoolean:);
  methods[15].selector = @selector(isMeasureWithLargestChildEnabled);
  methods[16].selector = @selector(setMeasureWithLargestChildEnabledWithBoolean:);
  methods[17].selector = @selector(getBaseline);
  methods[18].selector = @selector(getBaselineAlignedChildIndex);
  methods[19].selector = @selector(setBaselineAlignedChildIndexWithInt:);
  methods[20].selector = @selector(getVirtualChildAtWithInt:);
  methods[21].selector = @selector(getVirtualChildCount);
  methods[22].selector = @selector(getWeightSum);
  methods[23].selector = @selector(setWeightSumWithFloat:);
  methods[24].selector = @selector(onMeasureWithInt:withInt:);
  methods[25].selector = @selector(hasDividerBeforeChildAtWithInt:);
  methods[26].selector = @selector(allViewsAreGoneBeforeWithInt:);
  methods[27].selector = @selector(measureVerticalWithInt:withInt:);
  methods[28].selector = @selector(forceUniformWidthWithInt:withInt:);
  methods[29].selector = @selector(measureHorizontalWithInt:withInt:);
  methods[30].selector = @selector(forceUniformHeightWithInt:withInt:);
  methods[31].selector = @selector(getChildrenSkipCountWithADView:withInt:);
  methods[32].selector = @selector(measureNullChildWithInt:);
  methods[33].selector = @selector(measureChildBeforeLayoutWithADView:withInt:withInt:withInt:withInt:withInt:);
  methods[34].selector = @selector(getLocationOffsetWithADView:);
  methods[35].selector = @selector(getNextLocationOffsetWithADView:);
  methods[36].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[37].selector = @selector(layoutVerticalWithInt:withInt:withInt:withInt:);
  methods[38].selector = @selector(layoutHorizontalWithInt:withInt:withInt:withInt:);
  methods[39].selector = @selector(setChildFrameWithADView:withInt:withInt:withInt:withInt:);
  methods[40].selector = @selector(setOrientationWithInt:);
  methods[41].selector = @selector(getOrientation);
  methods[42].selector = @selector(setGravityWithInt:);
  methods[43].selector = @selector(getGravity);
  methods[44].selector = @selector(generateDefaultLayoutParams);
  methods[45].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[46].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[47].selector = @selector(initWithADContext:);
  methods[48].selector = @selector(init);
  methods[49].selector = @selector(updateDividerHeightWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HORIZONTAL", "I", .constantValue.asInt = ADLinearLayout_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADLinearLayout_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "SHOW_DIVIDER_NONE", "I", .constantValue.asInt = ADLinearLayout_SHOW_DIVIDER_NONE, 0x19, -1, -1, -1, -1 },
    { "SHOW_DIVIDER_BEGINNING", "I", .constantValue.asInt = ADLinearLayout_SHOW_DIVIDER_BEGINNING, 0x19, -1, -1, -1, -1 },
    { "SHOW_DIVIDER_MIDDLE", "I", .constantValue.asInt = ADLinearLayout_SHOW_DIVIDER_MIDDLE, 0x19, -1, -1, -1, -1 },
    { "SHOW_DIVIDER_END", "I", .constantValue.asInt = ADLinearLayout_SHOW_DIVIDER_END, 0x19, -1, -1, -1, -1 },
    { "mAllowInconsistentMeasurement_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mBaselineAligned_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBaselineAlignedChildIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBaselineChildTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOrientation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTotalLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWeightSum_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUseLargestChild_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxAscent_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxDescent_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "VERTICAL_GRAVITY_COUNT", "I", .constantValue.asInt = ADLinearLayout_VERTICAL_GRAVITY_COUNT, 0x1a, -1, -1, -1, -1 },
    { "INDEX_CENTER_VERTICAL", "I", .constantValue.asInt = ADLinearLayout_INDEX_CENTER_VERTICAL, 0x1a, -1, -1, -1, -1 },
    { "INDEX_TOP", "I", .constantValue.asInt = ADLinearLayout_INDEX_TOP, 0x1a, -1, -1, -1, -1 },
    { "INDEX_BOTTOM", "I", .constantValue.asInt = ADLinearLayout_INDEX_BOTTOM, 0x1a, -1, -1, -1, -1 },
    { "INDEX_FILL", "I", .constantValue.asInt = ADLinearLayout_INDEX_FILL, 0x1a, -1, -1, -1, -1 },
    { "mDivider_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDividerWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDividerHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mShowDividers_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDividerPadding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLayoutDirection_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sCompatibilityDone", "Z", .constantValue.asLong = 0, 0xa, -1, 49, -1, -1 },
    { "sRemeasureWeightedChildren", "Z", .constantValue.asLong = 0, 0xa, -1, 50, -1, -1 },
  };
  static const void *ptrTable[] = { "setShowDividers", "I", "setDividerDrawable", "LADDrawable;", "setDividerPadding", "onDraw", "LADCanvas;", "drawDividersVertical", "drawDividersHorizontal", "drawHorizontalDivider", "LADCanvas;I", "drawVerticalDivider", "setBaselineAligned", "Z", "setMeasureWithLargestChildEnabled", "setBaselineAlignedChildIndex", "getVirtualChildAt", "setWeightSum", "F", "onMeasure", "II", "hasDividerBeforeChildAt", "allViewsAreGoneBefore", "measureVertical", "forceUniformWidth", "measureHorizontal", "forceUniformHeight", "getChildrenSkipCount", "LADView;I", "measureNullChild", "measureChildBeforeLayout", "LADView;IIIII", "getLocationOffset", "LADView;", "getNextLocationOffset", "onLayout", "ZIIII", "layoutVertical", "IIII", "layoutHorizontal", "setChildFrame", "LADView;IIII", "setOrientation", "setGravity", "generateLayoutParams", "LADViewGroup_LayoutParams;", "checkLayoutParams", "LADContext;", "updateDividerHeight", &ADLinearLayout_sCompatibilityDone, &ADLinearLayout_sRemeasureWeightedChildren, "LADLinearLayout_LayoutParams;" };
  static const J2ObjcClassInfo _ADLinearLayout = { "LinearLayout", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 50, 30, -1, 51, -1, -1, -1 };
  return &_ADLinearLayout;
}

@end

jboolean ADLinearLayout_isShowingDividers(ADLinearLayout *self) {
  return (self->mShowDividers_ != ADLinearLayout_SHOW_DIVIDER_NONE) && (self->mDivider_ != nil);
}

ADView *ADLinearLayout_getLastNonGoneChild(ADLinearLayout *self) {
  for (jint i = [self getVirtualChildCount] - 1; i >= 0; i--) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      return child;
    }
  }
  return nil;
}

jboolean ADLinearLayout_allViewsAreGoneBeforeWithInt_(ADLinearLayout *self, jint childIndex) {
  for (jint i = childIndex - 1; i >= 0; i--) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      return false;
    }
  }
  return true;
}

void ADLinearLayout_forceUniformWidthWithInt_withInt_(ADLinearLayout *self, jint count, jint heightMeasureSpec) {
  jint uniformMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredWidth], ADView_MeasureSpec_EXACTLY);
  for (jint i = 0; i < count; ++i) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      ADLinearLayout_LayoutParams *lp = ((ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]));
      if (((ADLinearLayout_LayoutParams *) nil_chk(lp))->width_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
        jint oldHeight = lp->height_;
        lp->height_ = [child getMeasuredHeight];
        [self measureChildWithMarginsWithADView:child withInt:uniformMeasureSpec withInt:0 withInt:heightMeasureSpec withInt:0];
        lp->height_ = oldHeight;
      }
    }
  }
}

void ADLinearLayout_forceUniformHeightWithInt_withInt_(ADLinearLayout *self, jint count, jint widthMeasureSpec) {
  jint uniformMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredHeight], ADView_MeasureSpec_EXACTLY);
  for (jint i = 0; i < count; ++i) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      ADLinearLayout_LayoutParams *lp = (ADLinearLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADLinearLayout_LayoutParams class]);
      if (((ADLinearLayout_LayoutParams *) nil_chk(lp))->height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
        jint oldWidth = lp->width_;
        lp->width_ = [child getMeasuredWidth];
        [self measureChildWithMarginsWithADView:child withInt:widthMeasureSpec withInt:0 withInt:uniformMeasureSpec withInt:0];
        lp->width_ = oldWidth;
      }
    }
  }
}

void ADLinearLayout_setChildFrameWithADView_withInt_withInt_withInt_withInt_(ADLinearLayout *self, ADView *child, jint left, jint top, jint width, jint height) {
  [((ADView *) nil_chk(child)) layoutWithInt:left withInt:top withInt:left + width withInt:top + height];
}

void ADLinearLayout_initWithADContext_(ADLinearLayout *self, ADContext *context) {
  ADViewGroup_init(self);
  self->mBaselineAligned_ = true;
  self->mBaselineAlignedChildIndex_ = -1;
  self->mBaselineChildTop_ = 0;
  self->mGravity_ = ADGravity_START | ADGravity_TOP;
  self->mLayoutDirection_ = ADView_LAYOUT_DIRECTION_UNDEFINED;
  self->mAllowInconsistentMeasurement_ = false;
}

ADLinearLayout *new_ADLinearLayout_initWithADContext_(ADContext *context) {
  J2OBJC_NEW_IMPL(ADLinearLayout, initWithADContext_, context)
}

ADLinearLayout *create_ADLinearLayout_initWithADContext_(ADContext *context) {
  J2OBJC_CREATE_IMPL(ADLinearLayout, initWithADContext_, context)
}

void ADLinearLayout_init(ADLinearLayout *self) {
  ADViewGroup_init(self);
  self->mBaselineAligned_ = true;
  self->mBaselineAlignedChildIndex_ = -1;
  self->mBaselineChildTop_ = 0;
  self->mGravity_ = ADGravity_START | ADGravity_TOP;
  self->mLayoutDirection_ = ADView_LAYOUT_DIRECTION_UNDEFINED;
  self->mAllowInconsistentMeasurement_ = false;
}

ADLinearLayout *new_ADLinearLayout_init() {
  J2OBJC_NEW_IMPL(ADLinearLayout, init)
}

ADLinearLayout *create_ADLinearLayout_init() {
  J2OBJC_CREATE_IMPL(ADLinearLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLinearLayout)

@implementation ADLinearLayout_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADLinearLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  return self;
}

- (instancetype)initWithADLinearLayout_LayoutParams:(ADLinearLayout_LayoutParams *)source {
  ADLinearLayout_LayoutParams_initWithADLinearLayout_LayoutParams_(self, source);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[2].selector = @selector(initWithADLinearLayout_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "weight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "gravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_LayoutParams;", "LADLinearLayout_LayoutParams;", "LADLinearLayout;" };
  static const J2ObjcClassInfo _ADLinearLayout_LayoutParams = { "LayoutParams", "r.android.widget", ptrTable, methods, fields, 7, 0x9, 3, 2, 3, -1, -1, -1, -1 };
  return &_ADLinearLayout_LayoutParams;
}

@end

void ADLinearLayout_LayoutParams_initWithInt_withInt_(ADLinearLayout_LayoutParams *self, jint width, jint height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = -1;
  self->weight_ = 0;
}

ADLinearLayout_LayoutParams *new_ADLinearLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADLinearLayout_LayoutParams, initWithInt_withInt_, width, height)
}

ADLinearLayout_LayoutParams *create_ADLinearLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADLinearLayout_LayoutParams, initWithInt_withInt_, width, height)
}

void ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADLinearLayout_LayoutParams *self, ADViewGroup_LayoutParams *p) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  self->gravity_ = -1;
}

ADLinearLayout_LayoutParams *new_ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_NEW_IMPL(ADLinearLayout_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

ADLinearLayout_LayoutParams *create_ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_CREATE_IMPL(ADLinearLayout_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

void ADLinearLayout_LayoutParams_initWithADLinearLayout_LayoutParams_(ADLinearLayout_LayoutParams *self, ADLinearLayout_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  self->gravity_ = -1;
  self->weight_ = ((ADLinearLayout_LayoutParams *) nil_chk(source))->weight_;
  self->gravity_ = source->gravity_;
}

ADLinearLayout_LayoutParams *new_ADLinearLayout_LayoutParams_initWithADLinearLayout_LayoutParams_(ADLinearLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADLinearLayout_LayoutParams, initWithADLinearLayout_LayoutParams_, source)
}

ADLinearLayout_LayoutParams *create_ADLinearLayout_LayoutParams_initWithADLinearLayout_LayoutParams_(ADLinearLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADLinearLayout_LayoutParams, initWithADLinearLayout_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLinearLayout_LayoutParams)
