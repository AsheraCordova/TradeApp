//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\FontConverter.java
//

#include "FileUtils.h"
#include "FontConverter.h"
#include "FontDescriptor.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class JavaUtilProperties;


@interface ASFontConverter ()

+ (void)nativeSetVars;

- (JavaUtilProperties *)readPropsWithNSString:(NSString *)name;

- (NSString *)getFontKeyWithNSString:(NSString *)key;

@end

inline NSString *ASFontConverter_get_BASE_DIRECTORY(void);
static NSString *ASFontConverter_BASE_DIRECTORY = @"font/";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASFontConverter, BASE_DIRECTORY, NSString *)

inline NSString *ASFontConverter_get_MONOSPACE_FONT(void);
static NSString *ASFontConverter_MONOSPACE_FONT = @"Droid Sans Mono";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASFontConverter, MONOSPACE_FONT, NSString *)

inline NSString *ASFontConverter_get_SERIF_FONT(void);
static NSString *ASFontConverter_SERIF_FONT = @"Noto Serif";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASFontConverter, SERIF_FONT, NSString *)

inline NSString *ASFontConverter_get_NORMAL_FONT(void);
static NSString *ASFontConverter_NORMAL_FONT = @"Roboto";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASFontConverter, NORMAL_FONT, NSString *)

inline NSString *ASFontConverter_get_SANS_FONT(void);
static NSString *ASFontConverter_SANS_FONT = @"Roboto";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASFontConverter, SANS_FONT, NSString *)

inline jint ASFontConverter_get_ITALIC_FONT_TRAIT(void);
inline jint ASFontConverter_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASFontConverter_getRef_ITALIC_FONT_TRAIT(void);
static jint ASFontConverter_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASFontConverter, ITALIC_FONT_TRAIT, jint)

inline jint ASFontConverter_get_BOLD_FONT_TRAIT(void);
inline jint ASFontConverter_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASFontConverter_getRef_BOLD_FONT_TRAIT(void);
static jint ASFontConverter_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASFontConverter, BOLD_FONT_TRAIT, jint)

inline jint ASFontConverter_get_NORMAL_FONT_TRAIT(void);
#define ASFontConverter_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASFontConverter, NORMAL_FONT_TRAIT, jint)

__attribute__((unused)) static void ASFontConverter_nativeSetVars(void);

__attribute__((unused)) static JavaUtilProperties *ASFontConverter_readPropsWithNSString_(ASFontConverter *self, NSString *name);

__attribute__((unused)) static NSString *ASFontConverter_getFontKeyWithNSString_(ASFontConverter *self, NSString *key);

J2OBJC_INITIALIZED_DEFN(ASFontConverter)

@implementation ASFontConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFontConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)nativeSetVars {
  ASFontConverter_nativeSetVars();
}

- (id<JavaUtilMap>)convertFromWithId:(NSString *)value
                     withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                     withASIFragment:(id<ASIFragment>)fragment {
  if ([((id<ASIFragment>) nil_chk(fragment)) getFromTempCacheWithNSString:value] != nil) {
    return (id<JavaUtilMap>) cast_check([fragment getFromTempCacheWithNSString:value], JavaUtilMap_class_());
  }
  id<JavaUtilMap> fontDescriptors = new_JavaUtilHashMap_init();
  switch (JreIndexOfStr(value, (id[]){ @"normal", @"sans", @"serif", @"monospace" }, 4)) {
    case 0:
    {
      (void) [fontDescriptors putWithId:@"normal_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_NORMAL_FONT, ASFontConverter_NORMAL_FONT_TRAIT)];
      (void) [fontDescriptors putWithId:@"normal_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_NORMAL_FONT, ASFontConverter_BOLD_FONT_TRAIT)];
      (void) [fontDescriptors putWithId:@"italic_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_NORMAL_FONT, ASFontConverter_ITALIC_FONT_TRAIT)];
      (void) [fontDescriptors putWithId:@"italic_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_NORMAL_FONT, ASFontConverter_ITALIC_FONT_TRAIT | ASFontConverter_BOLD_FONT_TRAIT)];
      break;
    }
    case 1:
    (void) [fontDescriptors putWithId:@"normal_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SANS_FONT, ASFontConverter_NORMAL_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"normal_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SANS_FONT, ASFontConverter_BOLD_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"italic_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SANS_FONT, ASFontConverter_ITALIC_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"italic_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SANS_FONT, ASFontConverter_ITALIC_FONT_TRAIT | ASFontConverter_BOLD_FONT_TRAIT)];
    break;
    case 2:
    (void) [fontDescriptors putWithId:@"normal_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SERIF_FONT, ASFontConverter_NORMAL_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"normal_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SERIF_FONT, ASFontConverter_BOLD_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"italic_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SERIF_FONT, ASFontConverter_ITALIC_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"italic_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_SERIF_FONT, ASFontConverter_ITALIC_FONT_TRAIT | ASFontConverter_BOLD_FONT_TRAIT)];
    break;
    case 3:
    (void) [fontDescriptors putWithId:@"normal_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_MONOSPACE_FONT, ASFontConverter_NORMAL_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"normal_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_MONOSPACE_FONT, ASFontConverter_BOLD_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"italic_400" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_MONOSPACE_FONT, ASFontConverter_ITALIC_FONT_TRAIT)];
    (void) [fontDescriptors putWithId:@"italic_700" withId:new_ASFontDescriptor_initWithNSString_withInt_(ASFontConverter_MONOSPACE_FONT, ASFontConverter_ITALIC_FONT_TRAIT | ASFontConverter_BOLD_FONT_TRAIT)];
    break;
    default:
    if ([((NSString *) nil_chk(value)) java_hasPrefix:@"@font"]) {
      JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_(@"@([a-z0-9\\-]+)\\/([a-z0-9\\-]+)");
      JavaUtilRegexMatcher *matcher = [((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:value];
      jboolean matches = [((JavaUtilRegexMatcher *) nil_chk(matcher)) matches];
      if (matches) {
        JavaUtilProperties *bundle = ASFontConverter_readPropsWithNSString_(self, [matcher groupWithInt:2]);
        id<JavaUtilSet> fonts = [((JavaUtilProperties *) nil_chk(bundle)) keySet];
        for (id __strong font in nil_chk(fonts)) {
          NSString *fontKey = ASFontConverter_getFontKeyWithNSString_(self, [nil_chk(font) description]);
          if (fontKey != nil) {
            (void) [fontDescriptors putWithId:fontKey withId:new_ASFontDescriptor_initWithNSString_withInt_([bundle getPropertyWithNSString:[font description]], ASFontConverter_NORMAL_FONT_TRAIT)];
          }
        }
      }
    }
  }
  [fragment storeInTempCacheWithNSString:value withId:fontDescriptors];
  return fontDescriptors;
}

- (NSString *)convertToWithId:(id<JavaUtilMap>)value
              withASIFragment:(id<ASIFragment>)fragment {
  return @"";
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

- (JavaUtilProperties *)readPropsWithNSString:(NSString *)name {
  return ASFontConverter_readPropsWithNSString_(self, name);
}

- (NSString *)getFontKeyWithNSString:(NSString *)key {
  return ASFontConverter_getFontKeyWithNSString_(self, key);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaUtilProperties;", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 9, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(nativeSetVars);
  methods[2].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[3].selector = @selector(convertToWithId:withASIFragment:);
  methods[4].selector = @selector(getDependentAttributes);
  methods[5].selector = @selector(readPropsWithNSString:);
  methods[6].selector = @selector(getFontKeyWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BASE_DIRECTORY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "MONOSPACE_FONT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "SERIF_FONT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 12, -1, -1 },
    { "NORMAL_FONT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "SANS_FONT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 15, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASFontConverter_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", "convertTo", "LJavaUtilMap;LASIFragment;", "(Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;Lcom/ashera/core/IFragment;)Ljava/lang/String;", "()Ljava/util/List<Ljava/lang/String;>;", "readProps", "LNSString;", "getFontKey", &ASFontConverter_BASE_DIRECTORY, &ASFontConverter_MONOSPACE_FONT, &ASFontConverter_SERIF_FONT, &ASFontConverter_NORMAL_FONT, &ASFontConverter_SANS_FONT, &ASFontConverter_ITALIC_FONT_TRAIT, &ASFontConverter_BOLD_FONT_TRAIT, "Ljava/lang/Object;Lcom/ashera/converter/IConverter<Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASFontConverter = { "FontConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 7, 8, -1, -1, -1, 17, -1 };
  return &_ASFontConverter;
}

+ (void)initialize {
  if (self == [ASFontConverter class]) {
    {
      ASFontConverter_nativeSetVars();
    }
    J2OBJC_SET_INITIALIZED(ASFontConverter)
  }
}

@end

void ASFontConverter_init(ASFontConverter *self) {
  NSObject_init(self);
}

ASFontConverter *new_ASFontConverter_init() {
  J2OBJC_NEW_IMPL(ASFontConverter, init)
}

ASFontConverter *create_ASFontConverter_init() {
  J2OBJC_CREATE_IMPL(ASFontConverter, init)
}

void ASFontConverter_nativeSetVars() {
  ASFontConverter_initialize();
  ASFontConverter_ITALIC_FONT_TRAIT =  (jint) UIFontDescriptorTraitItalic;
  ASFontConverter_BOLD_FONT_TRAIT =  (jint) UIFontDescriptorTraitBold;
}

JavaUtilProperties *ASFontConverter_readPropsWithNSString_(ASFontConverter *self, NSString *name) {
  return ASFileUtils_loadPropertiesFromClassPathWithNSString_(JreStrcat("$$$$", ASFontConverter_BASE_DIRECTORY, @"font_", name, @".properties"));
}

NSString *ASFontConverter_getFontKeyWithNSString_(ASFontConverter *self, NSString *key) {
  if ([((NSString *) nil_chk(key)) java_hasSuffix:@"_ios"]) {
    return [key java_replaceAll:@"_ios" withReplacement:@""];
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFontConverter)
