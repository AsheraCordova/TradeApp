//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\MotionWidget.java
//

#include "CustomVariable.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "MotionWidget.h"
#include "TypedValues.h"
#include "WidgetFrame.h"
#include "java/lang/Float.h"
#include "java/util/Set.h"


@interface ADXMotionWidget () {
 @public
  jfloat mProgress_;
}

@end

inline jint ADXMotionWidget_get_INTERNAL_MATCH_PARENT(void);
#define ADXMotionWidget_INTERNAL_MATCH_PARENT -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget, INTERNAL_MATCH_PARENT, jint)

inline jint ADXMotionWidget_get_INTERNAL_WRAP_CONTENT(void);
#define ADXMotionWidget_INTERNAL_WRAP_CONTENT -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget, INTERNAL_WRAP_CONTENT, jint)

inline jint ADXMotionWidget_get_INTERNAL_MATCH_CONSTRAINT(void);
#define ADXMotionWidget_INTERNAL_MATCH_CONSTRAINT -3
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget, INTERNAL_MATCH_CONSTRAINT, jint)

inline jint ADXMotionWidget_get_INTERNAL_WRAP_CONTENT_CONSTRAINED(void);
#define ADXMotionWidget_INTERNAL_WRAP_CONTENT_CONSTRAINED -4
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget, INTERNAL_WRAP_CONTENT_CONSTRAINED, jint)

inline jint ADXMotionWidget_Motion_get_INTERPOLATOR_REFERENCE_ID(void);
#define ADXMotionWidget_Motion_INTERPOLATOR_REFERENCE_ID -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget_Motion, INTERPOLATOR_REFERENCE_ID, jint)

inline jint ADXMotionWidget_Motion_get_SPLINE_STRING(void);
#define ADXMotionWidget_Motion_SPLINE_STRING -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget_Motion, SPLINE_STRING, jint)

inline jint ADXMotionWidget_Motion_get_INTERPOLATOR_UNDEFINED(void);
#define ADXMotionWidget_Motion_INTERPOLATOR_UNDEFINED -3
J2OBJC_STATIC_FIELD_CONSTANT(ADXMotionWidget_Motion, INTERPOLATOR_UNDEFINED, jint)

@implementation ADXMotionWidget

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionWidget_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADXMotionWidget *)getParent {
  return nil;
}

- (ADXMotionWidget *)findViewByIdWithInt:(jint)mTransformPivotTarget {
  return nil;
}

- (void)setVisibilityWithInt:(jint)visibility {
  ((ADXMotionWidget_PropertySet *) nil_chk(propertySet_))->visibility_ = visibility;
}

- (NSString *)getName {
  return [[self java_getClass] getSimpleName];
}

- (void)layoutWithInt:(jint)l
              withInt:(jint)t
              withInt:(jint)r
              withInt:(jint)b {
  [self setBoundsWithInt:l withInt:t withInt:r withInt:b];
}

- (NSString *)description {
  return JreStrcat("I$I$I$I", ((ADXWidgetFrame *) nil_chk(widgetFrame_))->left_, @", ", widgetFrame_->top_, @", ", widgetFrame_->right_, @", ", widgetFrame_->bottom_);
}

- (void)setBoundsWithInt:(jint)left
                 withInt:(jint)top
                 withInt:(jint)right
                 withInt:(jint)bottom {
  if (widgetFrame_ == nil) {
    JreStrongAssignAndConsume(&widgetFrame_, new_ADXWidgetFrame_initWithADXConstraintWidget_(nil));
  }
  widgetFrame_->top_ = top;
  widgetFrame_->left_ = left;
  widgetFrame_->right_ = right;
  widgetFrame_->bottom_ = bottom;
}

- (instancetype)initWithADXWidgetFrame:(ADXWidgetFrame *)f {
  ADXMotionWidget_initWithADXWidgetFrame_(self, f);
  return self;
}

- (jboolean)setValueWithInt:(jint)id_
                    withInt:(jint)value {
  return [self setValueAttributesWithInt:id_ withFloat:value];
}

- (jboolean)setValueWithInt:(jint)id_
                  withFloat:(jfloat)value {
  jboolean set = [self setValueAttributesWithInt:id_ withFloat:value];
  if (set) {
    return true;
  }
  return [self setValueMotionWithInt:id_ withFloat:value];
}

- (jboolean)setValueWithInt:(jint)id_
               withNSString:(NSString *)value {
  return [self setValueMotionWithInt:id_ withNSString:value];
}

- (jboolean)setValueWithInt:(jint)id_
                withBoolean:(jboolean)value {
  return false;
}

- (jboolean)setValueMotionWithInt:(jint)id_
                          withInt:(jint)value {
  switch (id_) {
    case ADXTypedValues_Motion_TYPE_ANIMATE_RELATIVE_TO:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mAnimateRelativeTo_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_ANIMATE_CIRCLEANGLE_TO:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mAnimateCircleAngleTo_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_PATHMOTION_ARC:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mPathMotionArc_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_DRAW_PATH:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mDrawPath_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_POLAR_RELATIVETO:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mPolarRelativeTo_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_QUANTIZE_MOTIONSTEPS:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mQuantizeMotionSteps_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_QUANTIZE_INTERPOLATOR_TYPE:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mQuantizeInterpolatorType_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_QUANTIZE_INTERPOLATOR_ID:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mQuantizeInterpolatorID_ = value;
    break;
    default:
    return false;
  }
  return true;
}

- (jboolean)setValueMotionWithInt:(jint)id_
                     withNSString:(NSString *)value {
  switch (id_) {
    case ADXTypedValues_Motion_TYPE_EASING:
    JreStrongAssign(&((ADXMotionWidget_Motion *) nil_chk(motion_))->mTransitionEasing_, value);
    break;
    case ADXTypedValues_Motion_TYPE_QUANTIZE_INTERPOLATOR:
    JreStrongAssign(&((ADXMotionWidget_Motion *) nil_chk(motion_))->mQuantizeInterpolatorString_, value);
    break;
    default:
    return false;
  }
  return true;
}

- (jboolean)setValueMotionWithInt:(jint)id_
                        withFloat:(jfloat)value {
  switch (id_) {
    case ADXTypedValues_Motion_TYPE_STAGGER:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mMotionStagger_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_PATH_ROTATE:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mPathRotate_ = value;
    break;
    case ADXTypedValues_Motion_TYPE_QUANTIZE_MOTION_PHASE:
    ((ADXMotionWidget_Motion *) nil_chk(motion_))->mQuantizeMotionPhase_ = value;
    break;
    default:
    return false;
  }
  return true;
}

- (jboolean)setValueAttributesWithInt:(jint)id_
                            withFloat:(jfloat)value {
  switch (id_) {
    case ADXTypedValues_Attributes_TYPE_ALPHA:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->alpha_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_X:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Y:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Z:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationZ_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ROTATION_X:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Y:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Z:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationZ_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_SCALE_X:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_SCALE_Y:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PIVOT_X:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotX_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PIVOT_Y:
    ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotY_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PROGRESS:
    mProgress_ = value;
    break;
    case ADXTypedValues_Attributes_TYPE_PATH_ROTATE:
    mTransitionPathRotate_ = value;
    break;
    default:
    return false;
  }
  return true;
}

- (jfloat)getValueAttributesWithInt:(jint)id_ {
  switch (id_) {
    case ADXTypedValues_Attributes_TYPE_ALPHA:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->alpha_;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_X:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationX_;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Y:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationY_;
    case ADXTypedValues_Attributes_TYPE_TRANSLATION_Z:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationZ_;
    case ADXTypedValues_Attributes_TYPE_ROTATION_X:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationX_;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Y:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationY_;
    case ADXTypedValues_Attributes_TYPE_ROTATION_Z:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationZ_;
    case ADXTypedValues_Attributes_TYPE_SCALE_X:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleX_;
    case ADXTypedValues_Attributes_TYPE_SCALE_Y:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleY_;
    case ADXTypedValues_Attributes_TYPE_PIVOT_X:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotX_;
    case ADXTypedValues_Attributes_TYPE_PIVOT_Y:
    return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotY_;
    case ADXTypedValues_Attributes_TYPE_PROGRESS:
    return mProgress_;
    case ADXTypedValues_Attributes_TYPE_PATH_ROTATE:
    return mTransitionPathRotate_;
    default:
    return JavaLangFloat_NaN;
  }
}

- (jint)getIdWithNSString:(NSString *)name {
  jint ret = ADXTypedValues_Attributes_getIdWithNSString_(name);
  if (ret != -1) {
    return ret;
  }
  return ADXTypedValues_Motion_getIdWithNSString_(name);
}

- (jint)getTop {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->top_;
}

- (jint)getLeft {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->left_;
}

- (jint)getBottom {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->bottom_;
}

- (jint)getRight {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->right_;
}

- (void)setPivotXWithFloat:(jfloat)px {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotX_ = px;
}

- (void)setPivotYWithFloat:(jfloat)py {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotY_ = py;
}

- (jfloat)getRotationX {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationX_;
}

- (void)setRotationXWithFloat:(jfloat)rotationX {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationX_ = rotationX;
}

- (jfloat)getRotationY {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationY_;
}

- (void)setRotationYWithFloat:(jfloat)rotationY {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationY_ = rotationY;
}

- (jfloat)getRotationZ {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationZ_;
}

- (void)setRotationZWithFloat:(jfloat)rotationZ {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->rotationZ_ = rotationZ;
}

- (jfloat)getTranslationX {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationX_;
}

- (void)setTranslationXWithFloat:(jfloat)translationX {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationX_ = translationX;
}

- (jfloat)getTranslationY {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationY_;
}

- (void)setTranslationYWithFloat:(jfloat)translationY {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationY_ = translationY;
}

- (void)setTranslationZWithFloat:(jfloat)tz {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationZ_ = tz;
}

- (jfloat)getTranslationZ {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->translationZ_;
}

- (jfloat)getScaleX {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleX_;
}

- (void)setScaleXWithFloat:(jfloat)scaleX {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleX_ = scaleX;
}

- (jfloat)getScaleY {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleY_;
}

- (void)setScaleYWithFloat:(jfloat)scaleY {
  ((ADXWidgetFrame *) nil_chk(widgetFrame_))->scaleY_ = scaleY;
}

- (jint)getVisibility {
  return ((ADXMotionWidget_PropertySet *) nil_chk(propertySet_))->visibility_;
}

- (jfloat)getPivotX {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotX_;
}

- (jfloat)getPivotY {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->pivotY_;
}

- (jfloat)getAlpha {
  return ((ADXMotionWidget_PropertySet *) nil_chk(propertySet_))->alpha_;
}

- (jint)getX {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->left_;
}

- (jint)getY {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->top_;
}

- (jint)getWidth {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->right_ - widgetFrame_->left_;
}

- (jint)getHeight {
  return ((ADXWidgetFrame *) nil_chk(widgetFrame_))->bottom_ - widgetFrame_->top_;
}

- (ADXWidgetFrame *)getWidgetFrame {
  return widgetFrame_;
}

- (id<JavaUtilSet>)getCustomAttributeNames {
  return [((ADXWidgetFrame *) nil_chk(widgetFrame_)) getCustomAttributeNames];
}

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(jint)type
                             withFloat:(jfloat)value {
  [((ADXWidgetFrame *) nil_chk(widgetFrame_)) setCustomAttributeWithNSString:name withInt:type withFloat:value];
}

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(jint)type
                               withInt:(jint)value {
  [((ADXWidgetFrame *) nil_chk(widgetFrame_)) setCustomAttributeWithNSString:name withInt:type withInt:value];
}

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(jint)type
                           withBoolean:(jboolean)value {
  [((ADXWidgetFrame *) nil_chk(widgetFrame_)) setCustomAttributeWithNSString:name withInt:type withBoolean:value];
}

- (void)setCustomAttributeWithNSString:(NSString *)name
                               withInt:(jint)type
                          withNSString:(NSString *)value {
  [((ADXWidgetFrame *) nil_chk(widgetFrame_)) setCustomAttributeWithNSString:name withInt:type withNSString:value];
}

- (ADXCustomVariable *)getCustomAttributeWithNSString:(NSString *)name {
  return [((ADXWidgetFrame *) nil_chk(widgetFrame_)) getCustomAttributeWithNSString:name];
}

- (void)dealloc {
  RELEASE_(widgetFrame_);
  RELEASE_(motion_);
  RELEASE_(propertySet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMotionWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXMotionWidget;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 13, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 14, 10, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 19, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXWidgetFrame;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x1, -1, -1, -1, 29, -1, -1 },
    { NULL, "V", 0x1, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 34, -1, -1, -1, -1 },
    { NULL, "LADXCustomVariable;", 0x1, 35, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getParent);
  methods[2].selector = @selector(findViewByIdWithInt:);
  methods[3].selector = @selector(setVisibilityWithInt:);
  methods[4].selector = @selector(getName);
  methods[5].selector = @selector(layoutWithInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(description);
  methods[7].selector = @selector(setBoundsWithInt:withInt:withInt:withInt:);
  methods[8].selector = @selector(initWithADXWidgetFrame:);
  methods[9].selector = @selector(setValueWithInt:withInt:);
  methods[10].selector = @selector(setValueWithInt:withFloat:);
  methods[11].selector = @selector(setValueWithInt:withNSString:);
  methods[12].selector = @selector(setValueWithInt:withBoolean:);
  methods[13].selector = @selector(setValueMotionWithInt:withInt:);
  methods[14].selector = @selector(setValueMotionWithInt:withNSString:);
  methods[15].selector = @selector(setValueMotionWithInt:withFloat:);
  methods[16].selector = @selector(setValueAttributesWithInt:withFloat:);
  methods[17].selector = @selector(getValueAttributesWithInt:);
  methods[18].selector = @selector(getIdWithNSString:);
  methods[19].selector = @selector(getTop);
  methods[20].selector = @selector(getLeft);
  methods[21].selector = @selector(getBottom);
  methods[22].selector = @selector(getRight);
  methods[23].selector = @selector(setPivotXWithFloat:);
  methods[24].selector = @selector(setPivotYWithFloat:);
  methods[25].selector = @selector(getRotationX);
  methods[26].selector = @selector(setRotationXWithFloat:);
  methods[27].selector = @selector(getRotationY);
  methods[28].selector = @selector(setRotationYWithFloat:);
  methods[29].selector = @selector(getRotationZ);
  methods[30].selector = @selector(setRotationZWithFloat:);
  methods[31].selector = @selector(getTranslationX);
  methods[32].selector = @selector(setTranslationXWithFloat:);
  methods[33].selector = @selector(getTranslationY);
  methods[34].selector = @selector(setTranslationYWithFloat:);
  methods[35].selector = @selector(setTranslationZWithFloat:);
  methods[36].selector = @selector(getTranslationZ);
  methods[37].selector = @selector(getScaleX);
  methods[38].selector = @selector(setScaleXWithFloat:);
  methods[39].selector = @selector(getScaleY);
  methods[40].selector = @selector(setScaleYWithFloat:);
  methods[41].selector = @selector(getVisibility);
  methods[42].selector = @selector(getPivotX);
  methods[43].selector = @selector(getPivotY);
  methods[44].selector = @selector(getAlpha);
  methods[45].selector = @selector(getX);
  methods[46].selector = @selector(getY);
  methods[47].selector = @selector(getWidth);
  methods[48].selector = @selector(getHeight);
  methods[49].selector = @selector(getWidgetFrame);
  methods[50].selector = @selector(getCustomAttributeNames);
  methods[51].selector = @selector(setCustomAttributeWithNSString:withInt:withFloat:);
  methods[52].selector = @selector(setCustomAttributeWithNSString:withInt:withInt:);
  methods[53].selector = @selector(setCustomAttributeWithNSString:withInt:withBoolean:);
  methods[54].selector = @selector(setCustomAttributeWithNSString:withInt:withNSString:);
  methods[55].selector = @selector(getCustomAttributeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widgetFrame_", "LADXWidgetFrame;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "motion_", "LADXMotionWidget_Motion;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "propertySet_", "LADXMotionWidget_PropertySet;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mProgress_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionPathRotate_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "VISIBILITY_MODE_NORMAL", "I", .constantValue.asInt = ADXMotionWidget_VISIBILITY_MODE_NORMAL, 0x19, -1, -1, -1, -1 },
    { "VISIBILITY_MODE_IGNORE", "I", .constantValue.asInt = ADXMotionWidget_VISIBILITY_MODE_IGNORE, 0x19, -1, -1, -1, -1 },
    { "INTERNAL_MATCH_PARENT", "I", .constantValue.asInt = ADXMotionWidget_INTERNAL_MATCH_PARENT, 0x1a, -1, -1, -1, -1 },
    { "INTERNAL_WRAP_CONTENT", "I", .constantValue.asInt = ADXMotionWidget_INTERNAL_WRAP_CONTENT, 0x1a, -1, -1, -1, -1 },
    { "INVISIBLE", "I", .constantValue.asInt = ADXMotionWidget_INVISIBLE, 0x19, -1, -1, -1, -1 },
    { "VISIBLE", "I", .constantValue.asInt = ADXMotionWidget_VISIBLE, 0x19, -1, -1, -1, -1 },
    { "INTERNAL_MATCH_CONSTRAINT", "I", .constantValue.asInt = ADXMotionWidget_INTERNAL_MATCH_CONSTRAINT, 0x1a, -1, -1, -1, -1 },
    { "INTERNAL_WRAP_CONTENT_CONSTRAINED", "I", .constantValue.asInt = ADXMotionWidget_INTERNAL_WRAP_CONTENT_CONSTRAINED, 0x1a, -1, -1, -1, -1 },
    { "ROTATE_NONE", "I", .constantValue.asInt = ADXMotionWidget_ROTATE_NONE, 0x19, -1, -1, -1, -1 },
    { "ROTATE_PORTRATE_OF_RIGHT", "I", .constantValue.asInt = ADXMotionWidget_ROTATE_PORTRATE_OF_RIGHT, 0x19, -1, -1, -1, -1 },
    { "ROTATE_PORTRATE_OF_LEFT", "I", .constantValue.asInt = ADXMotionWidget_ROTATE_PORTRATE_OF_LEFT, 0x19, -1, -1, -1, -1 },
    { "ROTATE_RIGHT_OF_PORTRATE", "I", .constantValue.asInt = ADXMotionWidget_ROTATE_RIGHT_OF_PORTRATE, 0x19, -1, -1, -1, -1 },
    { "ROTATE_LEFT_OF_PORTRATE", "I", .constantValue.asInt = ADXMotionWidget_ROTATE_LEFT_OF_PORTRATE, 0x19, -1, -1, -1, -1 },
    { "UNSET", "I", .constantValue.asInt = ADXMotionWidget_UNSET, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT", "I", .constantValue.asInt = ADXMotionWidget_MATCH_CONSTRAINT, 0x19, -1, -1, -1, -1 },
    { "PARENT_ID", "I", .constantValue.asInt = ADXMotionWidget_PARENT_ID, 0x19, -1, -1, -1, -1 },
    { "FILL_PARENT", "I", .constantValue.asInt = ADXMotionWidget_FILL_PARENT, 0x19, -1, -1, -1, -1 },
    { "MATCH_PARENT", "I", .constantValue.asInt = ADXMotionWidget_MATCH_PARENT, 0x19, -1, -1, -1, -1 },
    { "WRAP_CONTENT", "I", .constantValue.asInt = ADXMotionWidget_WRAP_CONTENT, 0x19, -1, -1, -1, -1 },
    { "GONE_UNSET", "I", .constantValue.asInt = ADXMotionWidget_GONE_UNSET, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_WRAP", "I", .constantValue.asInt = ADXMotionWidget_MATCH_CONSTRAINT_WRAP, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "findViewById", "I", "setVisibility", "layout", "IIII", "toString", "setBounds", "LADXWidgetFrame;", "setValue", "II", "IF", "ILNSString;", "IZ", "setValueMotion", "setValueAttributes", "getValueAttributes", "getId", "LNSString;", "setPivotX", "F", "setPivotY", "setRotationX", "setRotationY", "setRotationZ", "setTranslationX", "setTranslationY", "setTranslationZ", "setScaleX", "setScaleY", "()Ljava/util/Set<Ljava/lang/String;>;", "setCustomAttribute", "LNSString;IF", "LNSString;II", "LNSString;IZ", "LNSString;ILNSString;", "getCustomAttribute", "LADXMotionWidget_Motion;LADXMotionWidget_PropertySet;" };
  static const J2ObjcClassInfo _ADXMotionWidget = { "MotionWidget", "androidx.constraintlayout.core.motion", ptrTable, methods, fields, 7, 0x1, 56, 26, -1, 36, -1, -1, -1 };
  return &_ADXMotionWidget;
}

@end

void ADXMotionWidget_init(ADXMotionWidget *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->widgetFrame_, new_ADXWidgetFrame_init());
  JreStrongAssignAndConsume(&self->motion_, new_ADXMotionWidget_Motion_init());
  JreStrongAssignAndConsume(&self->propertySet_, new_ADXMotionWidget_PropertySet_init());
}

ADXMotionWidget *new_ADXMotionWidget_init() {
  J2OBJC_NEW_IMPL(ADXMotionWidget, init)
}

ADXMotionWidget *create_ADXMotionWidget_init() {
  J2OBJC_CREATE_IMPL(ADXMotionWidget, init)
}

void ADXMotionWidget_initWithADXWidgetFrame_(ADXMotionWidget *self, ADXWidgetFrame *f) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->widgetFrame_, new_ADXWidgetFrame_init());
  JreStrongAssignAndConsume(&self->motion_, new_ADXMotionWidget_Motion_init());
  JreStrongAssignAndConsume(&self->propertySet_, new_ADXMotionWidget_PropertySet_init());
  JreStrongAssign(&self->widgetFrame_, f);
}

ADXMotionWidget *new_ADXMotionWidget_initWithADXWidgetFrame_(ADXWidgetFrame *f) {
  J2OBJC_NEW_IMPL(ADXMotionWidget, initWithADXWidgetFrame_, f)
}

ADXMotionWidget *create_ADXMotionWidget_initWithADXWidgetFrame_(ADXWidgetFrame *f) {
  J2OBJC_CREATE_IMPL(ADXMotionWidget, initWithADXWidgetFrame_, f)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionWidget)

@implementation ADXMotionWidget_Motion

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionWidget_Motion_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mTransitionEasing_);
  RELEASE_(mQuantizeInterpolatorString_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAnimateRelativeTo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAnimateCircleAngleTo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTransitionEasing_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPathMotionArc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDrawPath_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mMotionStagger_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPolarRelativeTo_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPathRotate_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeMotionPhase_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeMotionSteps_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeInterpolatorString_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeInterpolatorType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mQuantizeInterpolatorID_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "INTERPOLATOR_REFERENCE_ID", "I", .constantValue.asInt = ADXMotionWidget_Motion_INTERPOLATOR_REFERENCE_ID, 0x1a, -1, -1, -1, -1 },
    { "SPLINE_STRING", "I", .constantValue.asInt = ADXMotionWidget_Motion_SPLINE_STRING, 0x1a, -1, -1, -1, -1 },
    { "INTERPOLATOR_UNDEFINED", "I", .constantValue.asInt = ADXMotionWidget_Motion_INTERPOLATOR_UNDEFINED, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionWidget;" };
  static const J2ObjcClassInfo _ADXMotionWidget_Motion = { "Motion", "androidx.constraintlayout.core.motion", ptrTable, methods, fields, 7, 0x9, 1, 16, 0, -1, -1, -1, -1 };
  return &_ADXMotionWidget_Motion;
}

@end

void ADXMotionWidget_Motion_init(ADXMotionWidget_Motion *self) {
  NSObject_init(self);
  self->mAnimateRelativeTo_ = ADXMotionWidget_UNSET;
  self->mAnimateCircleAngleTo_ = 0;
  JreStrongAssign(&self->mTransitionEasing_, nil);
  self->mPathMotionArc_ = ADXMotionWidget_UNSET;
  self->mDrawPath_ = 0;
  self->mMotionStagger_ = JavaLangFloat_NaN;
  self->mPolarRelativeTo_ = ADXMotionWidget_UNSET;
  self->mPathRotate_ = JavaLangFloat_NaN;
  self->mQuantizeMotionPhase_ = JavaLangFloat_NaN;
  self->mQuantizeMotionSteps_ = ADXMotionWidget_UNSET;
  JreStrongAssign(&self->mQuantizeInterpolatorString_, nil);
  self->mQuantizeInterpolatorType_ = ADXMotionWidget_Motion_INTERPOLATOR_UNDEFINED;
  self->mQuantizeInterpolatorID_ = -1;
}

ADXMotionWidget_Motion *new_ADXMotionWidget_Motion_init() {
  J2OBJC_NEW_IMPL(ADXMotionWidget_Motion, init)
}

ADXMotionWidget_Motion *create_ADXMotionWidget_Motion_init() {
  J2OBJC_CREATE_IMPL(ADXMotionWidget_Motion, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionWidget_Motion)

@implementation ADXMotionWidget_PropertySet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionWidget_PropertySet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "visibility_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVisibilityMode_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "alpha_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mProgress_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXMotionWidget;" };
  static const J2ObjcClassInfo _ADXMotionWidget_PropertySet = { "PropertySet", "androidx.constraintlayout.core.motion", ptrTable, methods, fields, 7, 0x9, 1, 4, 0, -1, -1, -1, -1 };
  return &_ADXMotionWidget_PropertySet;
}

@end

void ADXMotionWidget_PropertySet_init(ADXMotionWidget_PropertySet *self) {
  NSObject_init(self);
  self->visibility_ = ADXMotionWidget_VISIBLE;
  self->mVisibilityMode_ = ADXMotionWidget_VISIBILITY_MODE_NORMAL;
  self->alpha_ = 1;
  self->mProgress_ = JavaLangFloat_NaN;
}

ADXMotionWidget_PropertySet *new_ADXMotionWidget_PropertySet_init() {
  J2OBJC_NEW_IMPL(ADXMotionWidget_PropertySet, init)
}

ADXMotionWidget_PropertySet *create_ADXMotionWidget_PropertySet_init() {
  J2OBJC_CREATE_IMPL(ADXMotionWidget_PropertySet, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionWidget_PropertySet)
