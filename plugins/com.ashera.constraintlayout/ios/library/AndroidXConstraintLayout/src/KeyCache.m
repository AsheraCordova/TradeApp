//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\KeyCache.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyCache.h"
#include "java/lang/Float.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"


@implementation ADXKeyCache

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyCache_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setFloatValueWithId:(id)view
               withNSString:(NSString *)type
                    withInt:(jint)element
                  withFloat:(jfloat)value {
  if (![((JavaUtilHashMap *) nil_chk(map_)) containsKeyWithId:view]) {
    JavaUtilHashMap *array = create_JavaUtilHashMap_init();
    IOSFloatArray *vArray = [IOSFloatArray arrayWithLength:element + 1];
    *IOSFloatArray_GetRef(vArray, element) = value;
    [array putWithId:type withId:vArray];
    [((JavaUtilHashMap *) nil_chk(map_)) putWithId:view withId:array];
  }
  else {
    JavaUtilHashMap *array = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(map_)) getWithId:view]);
    if (array == nil) {
      array = create_JavaUtilHashMap_init();
    }
    if (![array containsKeyWithId:type]) {
      IOSFloatArray *vArray = [IOSFloatArray arrayWithLength:element + 1];
      *IOSFloatArray_GetRef(vArray, element) = value;
      [array putWithId:type withId:vArray];
      [((JavaUtilHashMap *) nil_chk(map_)) putWithId:view withId:array];
    }
    else {
      IOSFloatArray *vArray = [array getWithId:type];
      if (vArray == nil) {
        vArray = [IOSFloatArray arrayWithLength:0];
      }
      if (vArray->size_ <= element) {
        vArray = JavaUtilArrays_copyOfWithFloatArray_withInt_(vArray, element + 1);
      }
      *IOSFloatArray_GetRef(nil_chk(vArray), element) = value;
      [array putWithId:type withId:vArray];
    }
  }
}

- (jfloat)getFloatValueWithId:(id)view
                 withNSString:(NSString *)type
                      withInt:(jint)element {
  if (![((JavaUtilHashMap *) nil_chk(map_)) containsKeyWithId:view]) {
    return JavaLangFloat_NaN;
  }
  else {
    JavaUtilHashMap *array = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(map_)) getWithId:view]);
    if (array == nil || ![array containsKeyWithId:type]) {
      return JavaLangFloat_NaN;
    }
    IOSFloatArray *vArray = [array getWithId:type];
    if (vArray == nil) {
      return JavaLangFloat_NaN;
    }
    if (vArray->size_ > element) {
      return IOSFloatArray_Get(vArray, element);
    }
    return JavaLangFloat_NaN;
  }
}

- (void)dealloc {
  RELEASE_(map_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setFloatValueWithId:withNSString:withInt:withFloat:);
  methods[2].selector = @selector(getFloatValueWithId:withNSString:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x0, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "setFloatValue", "LNSObject;LNSString;IF", "getFloatValue", "LNSObject;LNSString;I", "Ljava/util/HashMap<Ljava/lang/Object;Ljava/util/HashMap<Ljava/lang/String;[F>;>;" };
  static const J2ObjcClassInfo _ADXKeyCache = { "KeyCache", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ADXKeyCache;
}

@end

void ADXKeyCache_init(ADXKeyCache *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->map_, new_JavaUtilHashMap_init());
}

ADXKeyCache *new_ADXKeyCache_init() {
  J2OBJC_NEW_IMPL(ADXKeyCache, init)
}

ADXKeyCache *create_ADXKeyCache_init() {
  J2OBJC_CREATE_IMPL(ADXKeyCache, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyCache)
