//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\OpReorderer.java
//

#include "AdapterHelper.h"
#include "J2ObjC_source.h"
#include "OpReorderer.h"
#include "java/util/List.h"

@protocol JavaUtilList;


@interface ADXOpReorderer ()

- (void)swapMoveOpWithJavaUtilList:(id<JavaUtilList>)list
                           withInt:(jint)badMove
                           withInt:(jint)next;

- (void)swapMoveAddWithJavaUtilList:(id<JavaUtilList>)list
                            withInt:(jint)move
      withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)moveOp
                            withInt:(jint)add
      withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)addOp;

- (jint)getLastMoveOutOfOrderWithJavaUtilList:(id<JavaUtilList>)list;

@end

__attribute__((unused)) static void ADXOpReorderer_swapMoveOpWithJavaUtilList_withInt_withInt_(ADXOpReorderer *self, id<JavaUtilList> list, jint badMove, jint next);

__attribute__((unused)) static void ADXOpReorderer_swapMoveAddWithJavaUtilList_withInt_withADXAdapterHelper_UpdateOp_withInt_withADXAdapterHelper_UpdateOp_(ADXOpReorderer *self, id<JavaUtilList> list, jint move, ADXAdapterHelper_UpdateOp *moveOp, jint add, ADXAdapterHelper_UpdateOp *addOp);

__attribute__((unused)) static jint ADXOpReorderer_getLastMoveOutOfOrderWithJavaUtilList_(ADXOpReorderer *self, id<JavaUtilList> list);

@interface ADXOpReorderer_Callback : NSObject

@end

@implementation ADXOpReorderer

- (instancetype)initPackagePrivateWithADXOpReorderer_Callback:(id<ADXOpReorderer_Callback>)callback {
  ADXOpReorderer_initPackagePrivateWithADXOpReorderer_Callback_(self, callback);
  return self;
}

- (void)reorderOpsWithJavaUtilList:(id<JavaUtilList>)ops {
  jint badMove;
  while ((badMove = ADXOpReorderer_getLastMoveOutOfOrderWithJavaUtilList_(self, ops)) != -1) {
    ADXOpReorderer_swapMoveOpWithJavaUtilList_withInt_withInt_(self, ops, badMove, badMove + 1);
  }
}

- (void)swapMoveOpWithJavaUtilList:(id<JavaUtilList>)list
                           withInt:(jint)badMove
                           withInt:(jint)next {
  ADXOpReorderer_swapMoveOpWithJavaUtilList_withInt_withInt_(self, list, badMove, next);
}

- (void)swapMoveRemoveWithJavaUtilList:(id<JavaUtilList>)list
                               withInt:(jint)movePos
         withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)moveOp
                               withInt:(jint)removePos
         withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)removeOp {
  ADXAdapterHelper_UpdateOp *extraRm = nil;
  jboolean revertedMove = false;
  jboolean moveIsBackwards;
  if (((ADXAdapterHelper_UpdateOp *) nil_chk(moveOp))->positionStart_ < moveOp->itemCount_) {
    moveIsBackwards = false;
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(removeOp))->positionStart_ == moveOp->positionStart_ && removeOp->itemCount_ == moveOp->itemCount_ - moveOp->positionStart_) {
      revertedMove = true;
    }
  }
  else {
    moveIsBackwards = true;
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(removeOp))->positionStart_ == moveOp->itemCount_ + 1 && removeOp->itemCount_ == moveOp->positionStart_ - moveOp->itemCount_) {
      revertedMove = true;
    }
  }
  if (moveOp->itemCount_ < removeOp->positionStart_) {
    removeOp->positionStart_--;
  }
  else if (moveOp->itemCount_ < removeOp->positionStart_ + removeOp->itemCount_) {
    removeOp->itemCount_--;
    moveOp->cmd_ = ADXAdapterHelper_UpdateOp_REMOVE;
    moveOp->itemCount_ = 1;
    if (removeOp->itemCount_ == 0) {
      [((id<JavaUtilList>) nil_chk(list)) removeWithInt:removePos];
      [((id<ADXOpReorderer_Callback>) nil_chk(mCallback_)) recycleUpdateOpWithADXAdapterHelper_UpdateOp:removeOp];
    }
    return;
  }
  if (moveOp->positionStart_ <= removeOp->positionStart_) {
    removeOp->positionStart_++;
  }
  else if (moveOp->positionStart_ < removeOp->positionStart_ + removeOp->itemCount_) {
    jint remaining = removeOp->positionStart_ + removeOp->itemCount_ - moveOp->positionStart_;
    extraRm = [((id<ADXOpReorderer_Callback>) nil_chk(mCallback_)) obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_REMOVE withInt:moveOp->positionStart_ + 1 withInt:remaining withId:nil];
    removeOp->itemCount_ = moveOp->positionStart_ - removeOp->positionStart_;
  }
  if (revertedMove) {
    [((id<JavaUtilList>) nil_chk(list)) setWithInt:movePos withId:removeOp];
    [list removeWithInt:removePos];
    [((id<ADXOpReorderer_Callback>) nil_chk(mCallback_)) recycleUpdateOpWithADXAdapterHelper_UpdateOp:moveOp];
    return;
  }
  if (moveIsBackwards) {
    if (extraRm != nil) {
      if (moveOp->positionStart_ > extraRm->positionStart_) {
        moveOp->positionStart_ -= extraRm->itemCount_;
      }
      if (moveOp->itemCount_ > extraRm->positionStart_) {
        moveOp->itemCount_ -= extraRm->itemCount_;
      }
    }
    if (moveOp->positionStart_ > removeOp->positionStart_) {
      moveOp->positionStart_ -= removeOp->itemCount_;
    }
    if (moveOp->itemCount_ > removeOp->positionStart_) {
      moveOp->itemCount_ -= removeOp->itemCount_;
    }
  }
  else {
    if (extraRm != nil) {
      if (moveOp->positionStart_ >= extraRm->positionStart_) {
        moveOp->positionStart_ -= extraRm->itemCount_;
      }
      if (moveOp->itemCount_ >= extraRm->positionStart_) {
        moveOp->itemCount_ -= extraRm->itemCount_;
      }
    }
    if (moveOp->positionStart_ >= removeOp->positionStart_) {
      moveOp->positionStart_ -= removeOp->itemCount_;
    }
    if (moveOp->itemCount_ >= removeOp->positionStart_) {
      moveOp->itemCount_ -= removeOp->itemCount_;
    }
  }
  [((id<JavaUtilList>) nil_chk(list)) setWithInt:movePos withId:removeOp];
  if (moveOp->positionStart_ != moveOp->itemCount_) {
    [list setWithInt:removePos withId:moveOp];
  }
  else {
    [list removeWithInt:removePos];
  }
  if (extraRm != nil) {
    [list addWithInt:movePos withId:extraRm];
  }
}

- (void)swapMoveAddWithJavaUtilList:(id<JavaUtilList>)list
                            withInt:(jint)move
      withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)moveOp
                            withInt:(jint)add
      withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)addOp {
  ADXOpReorderer_swapMoveAddWithJavaUtilList_withInt_withADXAdapterHelper_UpdateOp_withInt_withADXAdapterHelper_UpdateOp_(self, list, move, moveOp, add, addOp);
}

- (void)swapMoveUpdateWithJavaUtilList:(id<JavaUtilList>)list
                               withInt:(jint)move
         withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)moveOp
                               withInt:(jint)update
         withADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)updateOp {
  ADXAdapterHelper_UpdateOp *extraUp1 = nil;
  ADXAdapterHelper_UpdateOp *extraUp2 = nil;
  if (((ADXAdapterHelper_UpdateOp *) nil_chk(moveOp))->itemCount_ < ((ADXAdapterHelper_UpdateOp *) nil_chk(updateOp))->positionStart_) {
    updateOp->positionStart_--;
  }
  else if (moveOp->itemCount_ < updateOp->positionStart_ + updateOp->itemCount_) {
    updateOp->itemCount_--;
    extraUp1 = [((id<ADXOpReorderer_Callback>) nil_chk(mCallback_)) obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_UPDATE withInt:moveOp->positionStart_ withInt:1 withId:updateOp->payload_];
  }
  if (moveOp->positionStart_ <= updateOp->positionStart_) {
    updateOp->positionStart_++;
  }
  else if (moveOp->positionStart_ < updateOp->positionStart_ + updateOp->itemCount_) {
    jint remaining = updateOp->positionStart_ + updateOp->itemCount_ - moveOp->positionStart_;
    extraUp2 = [((id<ADXOpReorderer_Callback>) nil_chk(mCallback_)) obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_UPDATE withInt:moveOp->positionStart_ + 1 withInt:remaining withId:updateOp->payload_];
    updateOp->itemCount_ -= remaining;
  }
  [((id<JavaUtilList>) nil_chk(list)) setWithInt:update withId:moveOp];
  if (updateOp->itemCount_ > 0) {
    [list setWithInt:move withId:updateOp];
  }
  else {
    [list removeWithInt:move];
    [((id<ADXOpReorderer_Callback>) nil_chk(mCallback_)) recycleUpdateOpWithADXAdapterHelper_UpdateOp:updateOp];
  }
  if (extraUp1 != nil) {
    [list addWithInt:move withId:extraUp1];
  }
  if (extraUp2 != nil) {
    [list addWithInt:move withId:extraUp2];
  }
}

- (jint)getLastMoveOutOfOrderWithJavaUtilList:(id<JavaUtilList>)list {
  return ADXOpReorderer_getLastMoveOutOfOrderWithJavaUtilList_(self, list);
}

- (void)dealloc {
  RELEASE_(mCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x2, 10, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x0, 11, 8, -1, 9, -1, -1 },
    { NULL, "I", 0x2, 12, 2, -1, 13, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXOpReorderer_Callback:);
  methods[1].selector = @selector(reorderOpsWithJavaUtilList:);
  methods[2].selector = @selector(swapMoveOpWithJavaUtilList:withInt:withInt:);
  methods[3].selector = @selector(swapMoveRemoveWithJavaUtilList:withInt:withADXAdapterHelper_UpdateOp:withInt:withADXAdapterHelper_UpdateOp:);
  methods[4].selector = @selector(swapMoveAddWithJavaUtilList:withInt:withADXAdapterHelper_UpdateOp:withInt:withADXAdapterHelper_UpdateOp:);
  methods[5].selector = @selector(swapMoveUpdateWithJavaUtilList:withInt:withADXAdapterHelper_UpdateOp:withInt:withADXAdapterHelper_UpdateOp:);
  methods[6].selector = @selector(getLastMoveOutOfOrderWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mCallback_", "LADXOpReorderer_Callback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXOpReorderer_Callback;", "reorderOps", "LJavaUtilList;", "(Ljava/util/List<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;)V", "swapMoveOp", "LJavaUtilList;II", "(Ljava/util/List<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;II)V", "swapMoveRemove", "LJavaUtilList;ILADXAdapterHelper_UpdateOp;ILADXAdapterHelper_UpdateOp;", "(Ljava/util/List<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;ILandroidx/recyclerview/widget/AdapterHelper$UpdateOp;ILandroidx/recyclerview/widget/AdapterHelper$UpdateOp;)V", "swapMoveAdd", "swapMoveUpdate", "getLastMoveOutOfOrder", "(Ljava/util/List<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;)I" };
  static const J2ObjcClassInfo _ADXOpReorderer = { "OpReorderer", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x0, 7, 1, -1, 0, -1, -1, -1 };
  return &_ADXOpReorderer;
}

@end

void ADXOpReorderer_initPackagePrivateWithADXOpReorderer_Callback_(ADXOpReorderer *self, id<ADXOpReorderer_Callback> callback) {
  NSObject_init(self);
  JreStrongAssign(&self->mCallback_, callback);
}

ADXOpReorderer *new_ADXOpReorderer_initPackagePrivateWithADXOpReorderer_Callback_(id<ADXOpReorderer_Callback> callback) {
  J2OBJC_NEW_IMPL(ADXOpReorderer, initPackagePrivateWithADXOpReorderer_Callback_, callback)
}

ADXOpReorderer *create_ADXOpReorderer_initPackagePrivateWithADXOpReorderer_Callback_(id<ADXOpReorderer_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADXOpReorderer, initPackagePrivateWithADXOpReorderer_Callback_, callback)
}

void ADXOpReorderer_swapMoveOpWithJavaUtilList_withInt_withInt_(ADXOpReorderer *self, id<JavaUtilList> list, jint badMove, jint next) {
  ADXAdapterHelper_UpdateOp *moveOp = [((id<JavaUtilList>) nil_chk(list)) getWithInt:badMove];
  ADXAdapterHelper_UpdateOp *nextOp = [list getWithInt:next];
  switch (((ADXAdapterHelper_UpdateOp *) nil_chk(nextOp))->cmd_) {
    case ADXAdapterHelper_UpdateOp_REMOVE:
    [self swapMoveRemoveWithJavaUtilList:list withInt:badMove withADXAdapterHelper_UpdateOp:moveOp withInt:next withADXAdapterHelper_UpdateOp:nextOp];
    break;
    case ADXAdapterHelper_UpdateOp_ADD:
    ADXOpReorderer_swapMoveAddWithJavaUtilList_withInt_withADXAdapterHelper_UpdateOp_withInt_withADXAdapterHelper_UpdateOp_(self, list, badMove, moveOp, next, nextOp);
    break;
    case ADXAdapterHelper_UpdateOp_UPDATE:
    [self swapMoveUpdateWithJavaUtilList:list withInt:badMove withADXAdapterHelper_UpdateOp:moveOp withInt:next withADXAdapterHelper_UpdateOp:nextOp];
    break;
  }
}

void ADXOpReorderer_swapMoveAddWithJavaUtilList_withInt_withADXAdapterHelper_UpdateOp_withInt_withADXAdapterHelper_UpdateOp_(ADXOpReorderer *self, id<JavaUtilList> list, jint move, ADXAdapterHelper_UpdateOp *moveOp, jint add, ADXAdapterHelper_UpdateOp *addOp) {
  jint offset = 0;
  if (((ADXAdapterHelper_UpdateOp *) nil_chk(moveOp))->itemCount_ < ((ADXAdapterHelper_UpdateOp *) nil_chk(addOp))->positionStart_) {
    offset--;
  }
  if (moveOp->positionStart_ < addOp->positionStart_) {
    offset++;
  }
  if (addOp->positionStart_ <= moveOp->positionStart_) {
    moveOp->positionStart_ += addOp->itemCount_;
  }
  if (addOp->positionStart_ <= moveOp->itemCount_) {
    moveOp->itemCount_ += addOp->itemCount_;
  }
  addOp->positionStart_ += offset;
  [((id<JavaUtilList>) nil_chk(list)) setWithInt:move withId:addOp];
  [list setWithInt:add withId:moveOp];
}

jint ADXOpReorderer_getLastMoveOutOfOrderWithJavaUtilList_(ADXOpReorderer *self, id<JavaUtilList> list) {
  jboolean foundNonMove = false;
  for (jint i = [((id<JavaUtilList>) nil_chk(list)) size] - 1; i >= 0; i--) {
    ADXAdapterHelper_UpdateOp *op1 = [list getWithInt:i];
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(op1))->cmd_ == ADXAdapterHelper_UpdateOp_MOVE) {
      if (foundNonMove) {
        return i;
      }
    }
    else {
      foundNonMove = true;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXOpReorderer)

@implementation ADXOpReorderer_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXAdapterHelper_UpdateOp;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(obtainUpdateOpWithInt:withInt:withInt:withId:);
  methods[1].selector = @selector(recycleUpdateOpWithADXAdapterHelper_UpdateOp:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "obtainUpdateOp", "IIILNSObject;", "recycleUpdateOp", "LADXAdapterHelper_UpdateOp;", "LADXOpReorderer;" };
  static const J2ObjcClassInfo _ADXOpReorderer_Callback = { "Callback", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x608, 2, 0, 4, -1, -1, -1, -1 };
  return &_ADXOpReorderer_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXOpReorderer_Callback)
