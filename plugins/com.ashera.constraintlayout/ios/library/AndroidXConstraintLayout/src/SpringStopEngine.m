//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\SpringStopEngine.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "SpringStopEngine.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/StackTraceElement.h"
#include "java/lang/System.h"
#include "java/lang/Throwable.h"


@interface ADXSpringStopEngine () {
 @public
  jboolean mInitialized_;
  jdouble mStiffness_;
  jdouble mTargetPos_;
  jdouble mLastVelocity_;
  jfloat mLastTime_;
  jfloat mPos_;
  jfloat mV_;
  jfloat mMass_;
  jfloat mStopThreshold_;
  jint mBoundaryMode_;
}

- (void)computeWithDouble:(jdouble)dt;

@end

inline jdouble ADXSpringStopEngine_get_UNSET(void);
#define ADXSpringStopEngine_UNSET __DBL_MAX__
J2OBJC_STATIC_FIELD_CONSTANT(ADXSpringStopEngine, UNSET, jdouble)

__attribute__((unused)) static void ADXSpringStopEngine_computeWithDouble_(ADXSpringStopEngine *self, jdouble dt);

@implementation ADXSpringStopEngine

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXSpringStopEngine_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)debugWithNSString:(NSString *)desc
                      withFloat:(jfloat)time {
  return nil;
}

- (void)logWithNSString:(NSString *)str {
  JavaLangStackTraceElement *s = IOSObjectArray_Get(nil_chk([create_JavaLangThrowable_init() getStackTrace]), 1);
  NSString *line = JreStrcat("$$CI$$$", @".(", [((JavaLangStackTraceElement *) nil_chk(s)) getFileName], ':', [s getLineNumber], @") ", [s getMethodName], @"() ");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", line, str)];
}

- (void)springConfigWithFloat:(jfloat)currentPos
                    withFloat:(jfloat)target
                    withFloat:(jfloat)currentVelocity
                    withFloat:(jfloat)mass
                    withFloat:(jfloat)stiffness
                    withFloat:(jfloat)damping
                    withFloat:(jfloat)stopThreshold
                      withInt:(jint)boundaryMode {
  mTargetPos_ = target;
  mDamping_ = damping;
  mInitialized_ = false;
  mPos_ = currentPos;
  mLastVelocity_ = currentVelocity;
  mStiffness_ = stiffness;
  mMass_ = mass;
  mStopThreshold_ = stopThreshold;
  mBoundaryMode_ = boundaryMode;
  mLastTime_ = 0;
}

- (jfloat)getVelocityWithFloat:(jfloat)t {
  return (jfloat) mV_;
}

- (jfloat)getInterpolationWithFloat:(jfloat)time {
  ADXSpringStopEngine_computeWithDouble_(self, time - mLastTime_);
  mLastTime_ = time;
  return (jfloat) (mPos_);
}

- (jfloat)getAcceleration {
  jdouble k = mStiffness_;
  jdouble c = mDamping_;
  jdouble x = (mPos_ - mTargetPos_);
  return (jfloat) (-k * x - c * mV_) / mMass_;
}

- (jfloat)getVelocity {
  return 0;
}

- (jboolean)isStopped {
  jdouble x = (mPos_ - mTargetPos_);
  jdouble k = mStiffness_;
  jdouble v = mV_;
  jdouble m = mMass_;
  jdouble energy = v * v * m + k * x * x;
  jdouble max_def = JavaLangMath_sqrtWithDouble_(energy / k);
  return max_def <= mStopThreshold_;
}

- (void)computeWithDouble:(jdouble)dt {
  ADXSpringStopEngine_computeWithDouble_(self, dt);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(debugWithNSString:withFloat:);
  methods[2].selector = @selector(logWithNSString:);
  methods[3].selector = @selector(springConfigWithFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withInt:);
  methods[4].selector = @selector(getVelocityWithFloat:);
  methods[5].selector = @selector(getInterpolationWithFloat:);
  methods[6].selector = @selector(getAcceleration);
  methods[7].selector = @selector(getVelocity);
  methods[8].selector = @selector(isStopped);
  methods[9].selector = @selector(computeWithDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDamping_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "UNSET", "D", .constantValue.asDouble = ADXSpringStopEngine_UNSET, 0x1a, -1, -1, -1, -1 },
    { "mInitialized_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStiffness_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTargetPos_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastVelocity_", "D", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastTime_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPos_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mV_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMass_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStopThreshold_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBoundaryMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "debug", "LNSString;F", "log", "LNSString;", "springConfig", "FFFFFFFI", "getVelocity", "F", "getInterpolation", "compute", "D" };
  static const J2ObjcClassInfo _ADXSpringStopEngine = { "SpringStopEngine", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 10, 12, -1, -1, -1, -1, -1 };
  return &_ADXSpringStopEngine;
}

@end

void ADXSpringStopEngine_init(ADXSpringStopEngine *self) {
  NSObject_init(self);
  self->mDamping_ = 0.5f;
  self->mInitialized_ = false;
  self->mBoundaryMode_ = 0;
}

ADXSpringStopEngine *new_ADXSpringStopEngine_init() {
  J2OBJC_NEW_IMPL(ADXSpringStopEngine, init)
}

ADXSpringStopEngine *create_ADXSpringStopEngine_init() {
  J2OBJC_CREATE_IMPL(ADXSpringStopEngine, init)
}

void ADXSpringStopEngine_computeWithDouble_(ADXSpringStopEngine *self, jdouble dt) {
  jdouble k = self->mStiffness_;
  jdouble c = self->mDamping_;
  jint overSample = JreFpToInt((1 + 9 / (JavaLangMath_sqrtWithDouble_(self->mStiffness_ / self->mMass_) * dt * 4)));
  JreDivideAssignDoubleD(&dt, overSample);
  for (jint i = 0; i < overSample; i++) {
    jdouble x = (self->mPos_ - self->mTargetPos_);
    jdouble a = (-k * x - c * self->mV_) / self->mMass_;
    jdouble avgV = self->mV_ + a * dt / 2;
    jdouble avgX = self->mPos_ + dt * (avgV) / 2 - self->mTargetPos_;
    a = (-avgX * k - avgV * c) / self->mMass_;
    jdouble dv = a * dt;
    avgV = self->mV_ + dv / 2;
    JrePlusAssignFloatD(&self->mV_, dv);
    JrePlusAssignFloatD(&self->mPos_, avgV * dt);
    if (self->mBoundaryMode_ > 0) {
      if (self->mPos_ < 0 && ((self->mBoundaryMode_ & 1) == 1)) {
        self->mPos_ = -self->mPos_;
        self->mV_ = -self->mV_;
      }
      if (self->mPos_ > 1 && ((self->mBoundaryMode_ & 2) == 2)) {
        self->mPos_ = 2 - self->mPos_;
        self->mV_ = -self->mV_;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSpringStopEngine)
