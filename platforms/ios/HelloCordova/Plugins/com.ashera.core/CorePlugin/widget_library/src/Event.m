//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\bus\Event.java
//

#include "Event.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"


@interface ASEvent () {
 @public
  ASEvent_StandardEvents *type_;
  id additionalData_;
}

@end

J2OBJC_FIELD_SETTER(ASEvent, type_, ASEvent_StandardEvents *)
J2OBJC_FIELD_SETTER(ASEvent, additionalData_, id)

__attribute__((unused)) static void ASEvent_StandardEvents_initWithNSString_withInt_(ASEvent_StandardEvents *self, NSString *__name, jint __ordinal);

@implementation ASEvent

- (instancetype)initWithASEvent_StandardEvents:(ASEvent_StandardEvents *)type
                                        withId:(id)additionalData {
  ASEvent_initWithASEvent_StandardEvents_withId_(self, type, additionalData);
  return self;
}

- (instancetype)initWithASEvent_StandardEvents:(ASEvent_StandardEvents *)type {
  ASEvent_initWithASEvent_StandardEvents_(self, type);
  return self;
}

- (ASEvent_StandardEvents *)getType {
  return type_;
}

- (void)setTypeWithASEvent_StandardEvents:(ASEvent_StandardEvents *)type {
  JreStrongAssign(&self->type_, type);
}

- (id)getAdditionalData {
  return additionalData_;
}

- (void)setAdditionalDataWithId:(id)additionalData {
  JreStrongAssign(&self->additionalData_, additionalData);
}

- (void)dealloc {
  RELEASE_(type_);
  RELEASE_(additionalData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "LASEvent_StandardEvents;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASEvent_StandardEvents:withId:);
  methods[1].selector = @selector(initWithASEvent_StandardEvents:);
  methods[2].selector = @selector(getType);
  methods[3].selector = @selector(setTypeWithASEvent_StandardEvents:);
  methods[4].selector = @selector(getAdditionalData);
  methods[5].selector = @selector(setAdditionalDataWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "additionalData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASEvent_StandardEvents;LNSObject;", "LASEvent_StandardEvents;", "setType", "setAdditionalData", "LNSObject;" };
  static const J2ObjcClassInfo _ASEvent = { "Event", "com.ashera.widget.bus", ptrTable, methods, fields, 7, 0x1, 6, 2, -1, 1, -1, -1, -1 };
  return &_ASEvent;
}

@end

void ASEvent_initWithASEvent_StandardEvents_withId_(ASEvent *self, ASEvent_StandardEvents *type, id additionalData) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, type);
  JreStrongAssign(&self->additionalData_, additionalData);
}

ASEvent *new_ASEvent_initWithASEvent_StandardEvents_withId_(ASEvent_StandardEvents *type, id additionalData) {
  J2OBJC_NEW_IMPL(ASEvent, initWithASEvent_StandardEvents_withId_, type, additionalData)
}

ASEvent *create_ASEvent_initWithASEvent_StandardEvents_withId_(ASEvent_StandardEvents *type, id additionalData) {
  J2OBJC_CREATE_IMPL(ASEvent, initWithASEvent_StandardEvents_withId_, type, additionalData)
}

void ASEvent_initWithASEvent_StandardEvents_(ASEvent *self, ASEvent_StandardEvents *type) {
  NSObject_init(self);
  JreStrongAssign(&self->type_, type);
}

ASEvent *new_ASEvent_initWithASEvent_StandardEvents_(ASEvent_StandardEvents *type) {
  J2OBJC_NEW_IMPL(ASEvent, initWithASEvent_StandardEvents_, type)
}

ASEvent *create_ASEvent_initWithASEvent_StandardEvents_(ASEvent_StandardEvents *type) {
  J2OBJC_CREATE_IMPL(ASEvent, initWithASEvent_StandardEvents_, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASEvent)

J2OBJC_INITIALIZED_DEFN(ASEvent_StandardEvents)

ASEvent_StandardEvents *ASEvent_StandardEvents_values_[7];

@implementation ASEvent_StandardEvents

+ (IOSObjectArray *)values {
  return ASEvent_StandardEvents_values();
}

+ (ASEvent_StandardEvents *)valueOfWithNSString:(NSString *)name {
  return ASEvent_StandardEvents_valueOfWithNSString_(name);
}

- (ASEvent_StandardEvents_Enum)toNSEnum {
  return (ASEvent_StandardEvents_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LASEvent_StandardEvents;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASEvent_StandardEvents;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "orientationChange", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "customEvent", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "initialise", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "orientationChangePostParentMeasure", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "postMeasure", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "preMeasure", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "dealloc", "LASEvent_StandardEvents;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ASEvent_StandardEvents, orientationChange), &JreEnum(ASEvent_StandardEvents, customEvent), &JreEnum(ASEvent_StandardEvents, initialise), &JreEnum(ASEvent_StandardEvents, orientationChangePostParentMeasure), &JreEnum(ASEvent_StandardEvents, postMeasure), &JreEnum(ASEvent_StandardEvents, preMeasure), &JreEnum(ASEvent_StandardEvents, dealloc), "LASEvent;", "Ljava/lang/Enum<Lcom/ashera/widget/bus/Event$StandardEvents;>;" };
  static const J2ObjcClassInfo _ASEvent_StandardEvents = { "StandardEvents", "com.ashera.widget.bus", ptrTable, methods, fields, 7, 0x4019, 2, 7, 9, -1, -1, 10, -1 };
  return &_ASEvent_StandardEvents;
}

+ (void)initialize {
  if (self == [ASEvent_StandardEvents class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 7 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 7; i++) {
      ((void)(ASEvent_StandardEvents_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ASEvent_StandardEvents_initWithNSString_withInt_(e, JreEnumConstantName(ASEvent_StandardEvents_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ASEvent_StandardEvents)
  }
}

@end

void ASEvent_StandardEvents_initWithNSString_withInt_(ASEvent_StandardEvents *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ASEvent_StandardEvents_values() {
  ASEvent_StandardEvents_initialize();
  return [IOSObjectArray arrayWithObjects:ASEvent_StandardEvents_values_ count:7 type:ASEvent_StandardEvents_class_()];
}

ASEvent_StandardEvents *ASEvent_StandardEvents_valueOfWithNSString_(NSString *name) {
  ASEvent_StandardEvents_initialize();
  for (int i = 0; i < 7; i++) {
    ASEvent_StandardEvents *e = ASEvent_StandardEvents_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ASEvent_StandardEvents *ASEvent_StandardEvents_fromOrdinal(NSUInteger ordinal) {
  ASEvent_StandardEvents_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return ASEvent_StandardEvents_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASEvent_StandardEvents)
