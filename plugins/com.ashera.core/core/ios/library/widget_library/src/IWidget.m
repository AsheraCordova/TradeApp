//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\IWidget.java
//

#include "IWidget.h"
#include "J2ObjC_source.h"


@interface ASIWidget : NSObject

@end

@interface ASIWidget_CommandCallBack : NSObject

@end

@implementation ASIWidget

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x401, 6, 7, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x401, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 13, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 14, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 15, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 16, 10, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x401, 17, 10, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttributeMap;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 18, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 19, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 22, 23, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttribute;", 0x401, 22, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 25, 27, -1, -1, -1, -1 },
    { NULL, "LASHasWidgets;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 28, 29, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, 30, 10, -1, -1, -1, -1 },
    { NULL, "LASIWidgetLifeCycleListener;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x401, 33, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x401, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, 40, 10, -1, -1, -1, -1 },
    { NULL, "LASIFragment;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 41, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x481, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x481, 46, 47, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 48, 49, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommandChain;", 0x401, 50, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x481, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x481, 53, 54, -1, -1, -1, -1 },
    { NULL, "V", 0x481, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 57, 58, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x401, 57, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 60, 61, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 64, 65, -1, 66, -1, -1 },
    { NULL, "LJavaUtilSet;", 0x401, -1, -1, -1, 67, -1, -1 },
    { NULL, "V", 0x401, 68, 69, -1, 70, -1, -1 },
    { NULL, "V", 0x401, 71, 10, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, 72, 73, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, 72, 74, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x401, 72, 29, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(asWidget);
  methods[1].selector = @selector(asNativeWidget);
  methods[2].selector = @selector(getLocalName);
  methods[3].selector = @selector(getGroupName);
  methods[4].selector = @selector(unwrapWithId:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(newLazyInstance);
  methods[7].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[8].selector = @selector(initialized);
  methods[9].selector = @selector(getParams);
  methods[10].selector = @selector(setParamsWithJavaUtilMap:);
  methods[11].selector = @selector(getUserDataWithNSString:);
  methods[12].selector = @selector(storeUserDataWithNSString:withId:);
  methods[13].selector = @selector(storeInTempCacheWithNSString:withId:);
  methods[14].selector = @selector(getFromTempCacheWithNSString:);
  methods[15].selector = @selector(getId);
  methods[16].selector = @selector(getIdAsInt);
  methods[17].selector = @selector(setIdWithNSString:);
  methods[18].selector = @selector(getBehaviorGroupId);
  methods[19].selector = @selector(setBehaviorGroupIdWithNSString:);
  methods[20].selector = @selector(getAttributeValueWithNSString:);
  methods[21].selector = @selector(getAttributes);
  methods[22].selector = @selector(loadAttributesWithNSString:);
  methods[23].selector = @selector(setAttributeWithASWidgetAttribute:withId:withBoolean:);
  methods[24].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[25].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[26].selector = @selector(getAttributeWithASHasWidgets:withNSString:withNSString:);
  methods[27].selector = @selector(updateWidgetMapWithASWidgetAttribute:withASWidgetAttributeValue:);
  methods[28].selector = @selector(updateWidgetMapWithASWidgetAttributeMap:);
  methods[29].selector = @selector(getParent);
  methods[30].selector = @selector(setParentWithASHasWidgets:);
  methods[31].selector = @selector(findWidgetByIdWithNSString:);
  methods[32].selector = @selector(getListener);
  methods[33].selector = @selector(setListenerWithASIWidgetLifeCycleListener:);
  methods[34].selector = @selector(executeCommandWithJavaUtilMap:withASIWidget_CommandCallBack:withInt:);
  methods[35].selector = @selector(executeCommandWithASIWidget:withJavaUtilList:withASIWidget_CommandCallBack:withInt:);
  methods[36].selector = @selector(setVisibleWithBoolean:);
  methods[37].selector = @selector(getBaseLine);
  methods[38].selector = @selector(isInitialised);
  methods[39].selector = @selector(findNearestViewWithNSString:);
  methods[40].selector = @selector(getFragment);
  methods[41].selector = @selector(afterParentInit);
  methods[42].selector = @selector(isAfterParentInitRequired);
  methods[43].selector = @selector(requestLayout);
  methods[44].selector = @selector(invalidate);
  methods[45].selector = @selector(isInvalidateOnFrameChange);
  methods[46].selector = @selector(setInvalidateOnFrameChangeWithBoolean:);
  methods[47].selector = @selector(applyAttributeCommandWithNSString:withNSString:withNSStringArray:withBoolean:withNSObjectArray:);
  methods[48].selector = @selector(rerunCommandOnSourceWithNSString:withNSString:);
  methods[49].selector = @selector(reapplyAttributeCommandWithNSString:withNSString:withNSString:withNSObjectArray:);
  methods[50].selector = @selector(getAttributeCommandValueWithNSString:withNSString:withNSString:);
  methods[51].selector = @selector(getAttributeCommandChainWithNSString:);
  methods[52].selector = @selector(registerForAttributeCommandChainWithNSStringArray:);
  methods[53].selector = @selector(registerForAttributeCommandChainWithPhaseWithNSString:withNSStringArray:);
  methods[54].selector = @selector(runAttributeCommandsWithId:withNSString:withNSString:withNSObjectArray:);
  methods[55].selector = @selector(replayBufferedEvents);
  methods[56].selector = @selector(quickConvertWithId:withNSString:);
  methods[57].selector = @selector(quickConvertWithId:withNSString:withNSString:withNSString:);
  methods[58].selector = @selector(drawableStateChanged);
  methods[59].selector = @selector(setDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[60].selector = @selector(getZIndex);
  methods[61].selector = @selector(setZIndexWithInt:);
  methods[62].selector = @selector(setEventBubblersWithJavaUtilCollection:);
  methods[63].selector = @selector(getEventBubblers);
  methods[64].selector = @selector(applyThemeConstructorArgsStyleWithNSString:withJavaUtilMap:);
  methods[65].selector = @selector(applyThemeStyleWithNSString:);
  methods[66].selector = @selector(loadLazyWidgetsWithASHasWidgets:withInt:withNSString:withASLoopParam:);
  methods[67].selector = @selector(loadLazyWidgetsWithASLoopParam:);
  methods[68].selector = @selector(loadLazyWidgetsWithASHasWidgets:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMMAND_EXEC_GETTER_METHOD", "I", .constantValue.asInt = ASIWidget_COMMAND_EXEC_GETTER_METHOD, 0x19, -1, -1, -1, -1 },
    { "COMMAND_EXEC_SETTER_METHOD", "I", .constantValue.asInt = ASIWidget_COMMAND_EXEC_SETTER_METHOD, 0x19, -1, -1, -1, -1 },
    { "BUFFER_STRATEGY_NONE", "I", .constantValue.asInt = ASIWidget_BUFFER_STRATEGY_NONE, 0x19, -1, -1, -1, -1 },
    { "BUFFER_STRATEGY_DURING_INIT", "I", .constantValue.asInt = ASIWidget_BUFFER_STRATEGY_DURING_INIT, 0x19, -1, -1, -1, -1 },
    { "BUFFER_STRATEGY_ALWAYS", "I", .constantValue.asInt = ASIWidget_BUFFER_STRATEGY_ALWAYS, 0x19, -1, -1, -1, -1 },
    { "UPDATE_UI_NONE", "I", .constantValue.asInt = ASIWidget_UPDATE_UI_NONE, 0x19, -1, -1, -1, -1 },
    { "UPDATE_UI_REQUEST_LAYOUT", "I", .constantValue.asInt = ASIWidget_UPDATE_UI_REQUEST_LAYOUT, 0x19, -1, -1, -1, -1 },
    { "UPDATE_UI_INVALIDATE", "I", .constantValue.asInt = ASIWidget_UPDATE_UI_INVALIDATE, 0x19, -1, -1, -1, -1 },
    { "UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE", "I", .constantValue.asInt = ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE, 0x19, -1, -1, -1, -1 },
    { "APPLY_TO_VIEW_WRAPPER", "I", .constantValue.asInt = ASIWidget_APPLY_TO_VIEW_WRAPPER, 0x19, -1, -1, -1, -1 },
    { "APPLY_TO_VIEW_HOLDER", "I", .constantValue.asInt = ASIWidget_APPLY_TO_VIEW_HOLDER, 0x19, -1, -1, -1, -1 },
    { "APPLY_TO_FOREGROUND", "I", .constantValue.asInt = ASIWidget_APPLY_TO_FOREGROUND, 0x19, -1, -1, -1, -1 },
    { "APPLY_TO_ALL", "I", .constantValue.asInt = ASIWidget_APPLY_TO_ALL, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "unwrap", "LNSObject;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "setParams", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "getUserData", "LNSString;", "storeUserData", "LNSString;LNSObject;", "storeInTempCache", "getFromTempCache", "setId", "setBehaviorGroupId", "getAttributeValue", "loadAttributes", "setAttribute", "LASWidgetAttribute;LNSObject;Z", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "LASHasWidgets;LNSString;LNSString;", "updateWidgetMap", "LASWidgetAttribute;LASWidgetAttributeValue;", "LASWidgetAttributeMap;", "setParent", "LASHasWidgets;", "findWidgetById", "setListener", "LASIWidgetLifeCycleListener;", "executeCommand", "LJavaUtilMap;LASIWidget_CommandCallBack;I", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/widget/IWidget$CommandCallBack;I)V", "LASIWidget;LJavaUtilList;LASIWidget_CommandCallBack;I", "(Lcom/ashera/widget/IWidget;Ljava/util/List<Ljava/lang/Object;>;Lcom/ashera/widget/IWidget$CommandCallBack;I)V", "setVisible", "Z", "findNearestView", "setInvalidateOnFrameChange", "applyAttributeCommand", "LNSString;LNSString;[LNSString;Z[LNSObject;", "rerunCommandOnSource", "LNSString;LNSString;", "reapplyAttributeCommand", "LNSString;LNSString;LNSString;[LNSObject;", "getAttributeCommandValue", "LNSString;LNSString;LNSString;", "getAttributeCommandChain", "registerForAttributeCommandChain", "[LNSString;", "registerForAttributeCommandChainWithPhase", "LNSString;[LNSString;", "runAttributeCommands", "LNSObject;LNSString;LNSString;[LNSObject;", "quickConvert", "LNSObject;LNSString;", "LNSObject;LNSString;LNSString;LNSString;", "setDrawableBounds", "IIII", "setZIndex", "I", "setEventBubblers", "LJavaUtilCollection;", "(Ljava/util/Collection<Ljava/lang/Integer;>;)V", "()Ljava/util/Set<Ljava/lang/Integer;>;", "applyThemeConstructorArgsStyle", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "applyThemeStyle", "loadLazyWidgets", "LASHasWidgets;ILNSString;LASLoopParam;", "LASLoopParam;", "LASIWidget_CommandCallBack;" };
  static const J2ObjcClassInfo _ASIWidget = { "IWidget", "com.ashera.widget", ptrTable, methods, fields, 7, 0x609, 69, 13, -1, 75, -1, -1, -1 };
  return &_ASIWidget;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASIWidget)

@implementation ASIWidget_CommandCallBack

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onWidgetWithASIWidget:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onWidget", "LASIWidget;" };
  static const J2ObjcClassInfo _ASIWidget_CommandCallBack = { "CommandCallBack", "com.ashera.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_ASIWidget_CommandCallBack;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASIWidget_CommandCallBack)
