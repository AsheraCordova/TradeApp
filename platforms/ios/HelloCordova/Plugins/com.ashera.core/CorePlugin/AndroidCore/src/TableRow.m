//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\TableRow.java
//

#include "Gravity.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearLayout.h"
#include "SparseIntArray.h"
#include "TableRow.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Math.h"


@interface ADTableRow () {
 @public
  jint mNumColumns_;
  IOSIntArray *mColumnWidths_;
  IOSIntArray *mConstrainedColumnWidths_;
  ADSparseIntArray *mColumnToChildIndex_;
}

- (void)mapIndexAndColumns;

@end

J2OBJC_FIELD_SETTER(ADTableRow, mColumnWidths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADTableRow, mConstrainedColumnWidths_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADTableRow, mColumnToChildIndex_, ADSparseIntArray *)

__attribute__((unused)) static void ADTableRow_mapIndexAndColumns(ADTableRow *self);

@interface ADTableRow_LayoutParams () {
 @public
  IOSIntArray *mOffset_;
}

@end

J2OBJC_FIELD_SETTER(ADTableRow_LayoutParams, mOffset_, IOSIntArray *)

inline jint ADTableRow_LayoutParams_get_LOCATION(void);
#define ADTableRow_LayoutParams_LOCATION 0
J2OBJC_STATIC_FIELD_CONSTANT(ADTableRow_LayoutParams, LOCATION, jint)

inline jint ADTableRow_LayoutParams_get_LOCATION_NEXT(void);
#define ADTableRow_LayoutParams_LOCATION_NEXT 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTableRow_LayoutParams, LOCATION_NEXT, jint)

@implementation ADTableRow

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTableRow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setColumnCollapsedWithInt:(jint)columnIndex
                      withBoolean:(jboolean)collapsed {
  ADView *child = [self getVirtualChildAtWithInt:columnIndex];
  if (child != nil) {
    [child setVisibilityWithInt:collapsed ? ADView_GONE : ADView_VISIBLE];
  }
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [self measureHorizontalWithInt:widthMeasureSpec withInt:heightMeasureSpec];
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [self layoutHorizontalWithInt:l withInt:t withInt:r withInt:b];
}

- (ADView *)getVirtualChildAtWithInt:(jint)i {
  if (mColumnToChildIndex_ == nil) {
    ADTableRow_mapIndexAndColumns(self);
  }
  jint deflectedIndex = [((ADSparseIntArray *) nil_chk(mColumnToChildIndex_)) getWithInt:i withInt:-1];
  if (deflectedIndex != -1) {
    return [self getChildAtWithInt:deflectedIndex];
  }
  return nil;
}

- (jint)getVirtualChildCount {
  if (mColumnToChildIndex_ == nil) {
    ADTableRow_mapIndexAndColumns(self);
  }
  return mNumColumns_;
}

- (void)mapIndexAndColumns {
  ADTableRow_mapIndexAndColumns(self);
}

- (jint)measureNullChildWithInt:(jint)childIndex {
  return IOSIntArray_Get(nil_chk(mConstrainedColumnWidths_), childIndex);
}

- (void)measureChildBeforeLayoutWithADView:(ADView *)child
                                   withInt:(jint)childIndex
                                   withInt:(jint)widthMeasureSpec
                                   withInt:(jint)totalWidth
                                   withInt:(jint)heightMeasureSpec
                                   withInt:(jint)totalHeight {
  if (mConstrainedColumnWidths_ != nil) {
    ADTableRow_LayoutParams *lp = (ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADTableRow_LayoutParams class]);
    jint measureMode = ADView_MeasureSpec_EXACTLY;
    jint columnWidth = 0;
    jint span = ((ADTableRow_LayoutParams *) nil_chk(lp))->span_;
    IOSIntArray *constrainedColumnWidths = mConstrainedColumnWidths_;
    for (jint i = 0; i < span; i++) {
      columnWidth += IOSIntArray_Get(nil_chk(constrainedColumnWidths), childIndex + i);
    }
    jint gravity = lp->gravity_;
    jboolean isHorizontalGravity = ADGravity_isHorizontalWithInt_(gravity);
    if (isHorizontalGravity) {
      measureMode = ADView_MeasureSpec_AT_MOST;
    }
    jint childWidthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(0, columnWidth - lp->leftMargin_ - lp->rightMargin_), measureMode);
    jint childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_ + totalHeight, lp->height_);
    [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
    if (isHorizontalGravity) {
      jint childWidth = [child getMeasuredWidth];
      *IOSIntArray_GetRef(nil_chk(lp->mOffset_), ADTableRow_LayoutParams_LOCATION_NEXT) = columnWidth - childWidth;
      jint layoutDirection = [self getLayoutDirection];
      jint absoluteGravity = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
      switch (absoluteGravity & ADGravity_HORIZONTAL_GRAVITY_MASK) {
        case ADGravity_LEFT:
        break;
        case ADGravity_RIGHT:
        *IOSIntArray_GetRef(nil_chk(lp->mOffset_), ADTableRow_LayoutParams_LOCATION) = IOSIntArray_Get(lp->mOffset_, ADTableRow_LayoutParams_LOCATION_NEXT);
        break;
        case ADGravity_CENTER_HORIZONTAL:
        *IOSIntArray_GetRef(nil_chk(lp->mOffset_), ADTableRow_LayoutParams_LOCATION) = JreIntDiv(IOSIntArray_Get(lp->mOffset_, ADTableRow_LayoutParams_LOCATION_NEXT), 2);
        break;
      }
    }
    else {
      *IOSIntArray_GetRef(nil_chk(lp->mOffset_), ADTableRow_LayoutParams_LOCATION) = *IOSIntArray_GetRef(lp->mOffset_, ADTableRow_LayoutParams_LOCATION_NEXT) = 0;
    }
  }
  else {
    [super measureChildBeforeLayoutWithADView:child withInt:childIndex withInt:widthMeasureSpec withInt:totalWidth withInt:heightMeasureSpec withInt:totalHeight];
  }
}

- (jint)getChildrenSkipCountWithADView:(ADView *)child
                               withInt:(jint)index {
  ADTableRow_LayoutParams *layoutParams = (ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADTableRow_LayoutParams class]);
  return ((ADTableRow_LayoutParams *) nil_chk(layoutParams))->span_ - 1;
}

- (jint)getLocationOffsetWithADView:(ADView *)child {
  return IOSIntArray_Get(nil_chk(((ADTableRow_LayoutParams *) nil_chk(((ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADTableRow_LayoutParams class]))))->mOffset_), ADTableRow_LayoutParams_LOCATION);
}

- (jint)getNextLocationOffsetWithADView:(ADView *)child {
  return IOSIntArray_Get(nil_chk(((ADTableRow_LayoutParams *) nil_chk(((ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADTableRow_LayoutParams class]))))->mOffset_), ADTableRow_LayoutParams_LOCATION_NEXT);
}

- (IOSIntArray *)getColumnsWidthsWithInt:(jint)widthMeasureSpec
                                 withInt:(jint)heightMeasureSpec {
  jint numColumns = [self getVirtualChildCount];
  if (mColumnWidths_ == nil || numColumns != mColumnWidths_->size_) {
    JreStrongAssignAndConsume(&mColumnWidths_, [IOSIntArray newArrayWithLength:numColumns]);
  }
  IOSIntArray *columnWidths = mColumnWidths_;
  for (jint i = 0; i < numColumns; i++) {
    ADView *child = [self getVirtualChildAtWithInt:i];
    if (child != nil && [child getVisibility] != ADView_GONE) {
      ADTableRow_LayoutParams *layoutParams = (ADTableRow_LayoutParams *) cast_chk([child getLayoutParams], [ADTableRow_LayoutParams class]);
      if (((ADTableRow_LayoutParams *) nil_chk(layoutParams))->span_ == 1) {
        jint spec;
        switch (layoutParams->width_) {
          case ADViewGroup_LayoutParams_WRAP_CONTENT:
          spec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, 0, ADViewGroup_LayoutParams_WRAP_CONTENT);
          break;
          case ADViewGroup_LayoutParams_MATCH_PARENT:
          spec = ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec), ADView_MeasureSpec_UNSPECIFIED);
          break;
          default:
          spec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(layoutParams->width_, ADView_MeasureSpec_EXACTLY);
        }
        [child measureWithInt:spec withInt:spec];
        jint width = [child getMeasuredWidth] + layoutParams->leftMargin_ + layoutParams->rightMargin_;
        *IOSIntArray_GetRef(columnWidths, i) = width;
      }
      else {
        *IOSIntArray_GetRef(columnWidths, i) = 0;
      }
    }
    else {
      *IOSIntArray_GetRef(columnWidths, i) = 0;
    }
  }
  return columnWidths;
}

- (void)setColumnsWidthConstraintsWithIntArray:(IOSIntArray *)columnWidths {
  if (columnWidths == nil || columnWidths->size_ < [self getVirtualChildCount]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"columnWidths should be >= getVirtualChildCount()");
  }
  JreStrongAssign(&mConstrainedColumnWidths_, columnWidths);
}

- (ADLinearLayout_LayoutParams *)generateDefaultLayoutParams {
  return create_ADTableRow_LayoutParams_init();
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[ADTableRow_LayoutParams class]];
}

- (ADLinearLayout_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return create_ADTableRow_LayoutParams_initWithADViewGroup_LayoutParams_(p);
}

- (void)dealloc {
  RELEASE_(mColumnWidths_);
  RELEASE_(mConstrainedColumnWidths_);
  RELEASE_(mColumnToChildIndex_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 15, 14, -1, -1, -1, -1 },
    { NULL, "[I", 0x0, 16, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x4, 21, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setColumnCollapsedWithInt:withBoolean:);
  methods[2].selector = @selector(onMeasureWithInt:withInt:);
  methods[3].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(getVirtualChildAtWithInt:);
  methods[5].selector = @selector(getVirtualChildCount);
  methods[6].selector = @selector(mapIndexAndColumns);
  methods[7].selector = @selector(measureNullChildWithInt:);
  methods[8].selector = @selector(measureChildBeforeLayoutWithADView:withInt:withInt:withInt:withInt:withInt:);
  methods[9].selector = @selector(getChildrenSkipCountWithADView:withInt:);
  methods[10].selector = @selector(getLocationOffsetWithADView:);
  methods[11].selector = @selector(getNextLocationOffsetWithADView:);
  methods[12].selector = @selector(getColumnsWidthsWithInt:withInt:);
  methods[13].selector = @selector(setColumnsWidthConstraintsWithIntArray:);
  methods[14].selector = @selector(generateDefaultLayoutParams);
  methods[15].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[16].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNumColumns_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColumnWidths_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConstrainedColumnWidths_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mColumnToChildIndex_", "LADSparseIntArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setColumnCollapsed", "IZ", "onMeasure", "II", "onLayout", "ZIIII", "getVirtualChildAt", "I", "measureNullChild", "measureChildBeforeLayout", "LADView;IIIII", "getChildrenSkipCount", "LADView;I", "getLocationOffset", "LADView;", "getNextLocationOffset", "getColumnsWidths", "setColumnsWidthConstraints", "[I", "checkLayoutParams", "LADViewGroup_LayoutParams;", "generateLayoutParams", "LADTableRow_LayoutParams;" };
  static const J2ObjcClassInfo _ADTableRow = { "TableRow", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 17, 4, -1, 22, -1, -1, -1 };
  return &_ADTableRow;
}

@end

void ADTableRow_init(ADTableRow *self) {
  ADLinearLayout_init(self);
  self->mNumColumns_ = 0;
}

ADTableRow *new_ADTableRow_init() {
  J2OBJC_NEW_IMPL(ADTableRow, init)
}

ADTableRow *create_ADTableRow_init() {
  J2OBJC_CREATE_IMPL(ADTableRow, init)
}

void ADTableRow_mapIndexAndColumns(ADTableRow *self) {
  if (self->mColumnToChildIndex_ == nil) {
    jint virtualCount = 0;
    jint count = [self getChildCount];
    JreStrongAssignAndConsume(&self->mColumnToChildIndex_, new_ADSparseIntArray_init());
    ADSparseIntArray *columnToChild = self->mColumnToChildIndex_;
    for (jint i = 0; i < count; i++) {
      ADView *child = [self getChildAtWithInt:i];
      ADTableRow_LayoutParams *layoutParams = (ADTableRow_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADTableRow_LayoutParams class]);
      if (((ADTableRow_LayoutParams *) nil_chk(layoutParams))->column_ >= virtualCount) {
        virtualCount = layoutParams->column_;
      }
      for (jint j = 0; j < layoutParams->span_; j++) {
        [columnToChild putWithInt:virtualCount++ withInt:i];
      }
    }
    self->mNumColumns_ = virtualCount;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTableRow)

@implementation ADTableRow_LayoutParams

- (instancetype)initWithInt:(jint)w
                    withInt:(jint)h {
  ADTableRow_LayoutParams_initWithInt_withInt_(self, w, h);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTableRow_LayoutParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  ADTableRow_LayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  return self;
}

- (void)dealloc {
  RELEASE_(mOffset_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "column_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "span_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "LOCATION", "I", .constantValue.asInt = ADTableRow_LayoutParams_LOCATION, 0x1a, -1, -1, -1, -1 },
    { "LOCATION_NEXT", "I", .constantValue.asInt = ADTableRow_LayoutParams_LOCATION_NEXT, 0x1a, -1, -1, -1, -1 },
    { "mOffset_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_LayoutParams;", "LADTableRow;" };
  static const J2ObjcClassInfo _ADTableRow_LayoutParams = { "LayoutParams", "r.android.widget", ptrTable, methods, fields, 7, 0x9, 3, 5, 2, -1, -1, -1, -1 };
  return &_ADTableRow_LayoutParams;
}

@end

void ADTableRow_LayoutParams_initWithInt_withInt_(ADTableRow_LayoutParams *self, jint w, jint h) {
  ADLinearLayout_LayoutParams_initWithInt_withInt_(self, w, h);
  JreStrongAssignAndConsume(&self->mOffset_, [IOSIntArray newArrayWithLength:2]);
  self->column_ = -1;
  self->span_ = 1;
}

ADTableRow_LayoutParams *new_ADTableRow_LayoutParams_initWithInt_withInt_(jint w, jint h) {
  J2OBJC_NEW_IMPL(ADTableRow_LayoutParams, initWithInt_withInt_, w, h)
}

ADTableRow_LayoutParams *create_ADTableRow_LayoutParams_initWithInt_withInt_(jint w, jint h) {
  J2OBJC_CREATE_IMPL(ADTableRow_LayoutParams, initWithInt_withInt_, w, h)
}

void ADTableRow_LayoutParams_init(ADTableRow_LayoutParams *self) {
  ADLinearLayout_LayoutParams_initWithInt_withInt_(self, ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
  JreStrongAssignAndConsume(&self->mOffset_, [IOSIntArray newArrayWithLength:2]);
  self->column_ = -1;
  self->span_ = 1;
}

ADTableRow_LayoutParams *new_ADTableRow_LayoutParams_init() {
  J2OBJC_NEW_IMPL(ADTableRow_LayoutParams, init)
}

ADTableRow_LayoutParams *create_ADTableRow_LayoutParams_init() {
  J2OBJC_CREATE_IMPL(ADTableRow_LayoutParams, init)
}

void ADTableRow_LayoutParams_initWithADViewGroup_LayoutParams_(ADTableRow_LayoutParams *self, ADViewGroup_LayoutParams *p) {
  ADLinearLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, p);
  JreStrongAssignAndConsume(&self->mOffset_, [IOSIntArray newArrayWithLength:2]);
}

ADTableRow_LayoutParams *new_ADTableRow_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_NEW_IMPL(ADTableRow_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

ADTableRow_LayoutParams *create_ADTableRow_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *p) {
  J2OBJC_CREATE_IMPL(ADTableRow_LayoutParams, initWithADViewGroup_LayoutParams_, p)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTableRow_LayoutParams)
