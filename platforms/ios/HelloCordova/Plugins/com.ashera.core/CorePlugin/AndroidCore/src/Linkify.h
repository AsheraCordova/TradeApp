//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\text\util\Linkify.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Linkify")
#ifdef RESTRICT_Linkify
#define INCLUDE_ALL_Linkify 0
#else
#define INCLUDE_ALL_Linkify 1
#endif
#undef RESTRICT_Linkify

#if !defined (ADLinkify_) && (INCLUDE_ALL_Linkify || defined(INCLUDE_ADLinkify))
#define ADLinkify_

@class IOSObjectArray;
@class JavaUtilRegexPattern;
@protocol ADLinkify_MatchFilter;
@protocol ADLinkify_Spannable;
@protocol ADLinkify_TransformFilter;
@protocol JavaUtilFunctionFunction;

@interface ADLinkify : NSObject

#pragma mark Public

- (instancetype)init;

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                                    withInt:(jint)mask;

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                                    withInt:(jint)mask
               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory;

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)scheme;

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)spannable
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)scheme
                  withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
              withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter;

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)spannable
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)defaultScheme
                          withNSStringArray:(IOSObjectArray *)schemes
                  withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
              withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter;

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)spannable
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)defaultScheme
                          withNSStringArray:(IOSObjectArray *)schemes
                  withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
              withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter
               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory;

+ (jboolean)containsUnsupportedCharactersWithNSString:(NSString *)text;

+ (NSString *)linkifyWithNSString:(NSString *)url
                          withInt:(jint)mask
                      withBoolean:(jboolean)clickable;

@end

J2OBJC_STATIC_INIT(ADLinkify)

inline jint ADLinkify_get_WEB_URLS(void);
#define ADLinkify_WEB_URLS 1
J2OBJC_STATIC_FIELD_CONSTANT(ADLinkify, WEB_URLS, jint)

inline jint ADLinkify_get_EMAIL_ADDRESSES(void);
#define ADLinkify_EMAIL_ADDRESSES 2
J2OBJC_STATIC_FIELD_CONSTANT(ADLinkify, EMAIL_ADDRESSES, jint)

inline jint ADLinkify_get_PHONE_NUMBERS(void);
#define ADLinkify_PHONE_NUMBERS 4
J2OBJC_STATIC_FIELD_CONSTANT(ADLinkify, PHONE_NUMBERS, jint)

inline jint ADLinkify_get_MAP_ADDRESSES(void);
#define ADLinkify_MAP_ADDRESSES 8
J2OBJC_STATIC_FIELD_CONSTANT(ADLinkify, MAP_ADDRESSES, jint)

inline jint ADLinkify_get_ALL(void);
#define ADLinkify_ALL 15
J2OBJC_STATIC_FIELD_CONSTANT(ADLinkify, ALL, jint)

inline id<ADLinkify_MatchFilter> ADLinkify_get_sUrlMatchFilter(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADLinkify_MatchFilter> ADLinkify_sUrlMatchFilter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADLinkify, sUrlMatchFilter, id<ADLinkify_MatchFilter>)

inline id<ADLinkify_MatchFilter> ADLinkify_get_sPhoneNumberMatchFilter(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADLinkify_MatchFilter> ADLinkify_sPhoneNumberMatchFilter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADLinkify, sPhoneNumberMatchFilter, id<ADLinkify_MatchFilter>)

inline id<ADLinkify_TransformFilter> ADLinkify_get_sPhoneNumberTransformFilter(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADLinkify_TransformFilter> ADLinkify_sPhoneNumberTransformFilter;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADLinkify, sPhoneNumberTransformFilter, id<ADLinkify_TransformFilter>)

FOUNDATION_EXPORT void ADLinkify_init(ADLinkify *self);

FOUNDATION_EXPORT ADLinkify *new_ADLinkify_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADLinkify *create_ADLinkify_init(void);

FOUNDATION_EXPORT jboolean ADLinkify_addLinksWithADLinkify_Spannable_withInt_(id<ADLinkify_Spannable> text, jint mask);

FOUNDATION_EXPORT jboolean ADLinkify_addLinksWithADLinkify_Spannable_withInt_withJavaUtilFunctionFunction_(id<ADLinkify_Spannable> text, jint mask, id<JavaUtilFunctionFunction> urlSpanFactory);

FOUNDATION_EXPORT jboolean ADLinkify_containsUnsupportedCharactersWithNSString_(NSString *text);

FOUNDATION_EXPORT jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_(id<ADLinkify_Spannable> text, JavaUtilRegexPattern *pattern, NSString *scheme);

FOUNDATION_EXPORT jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(id<ADLinkify_Spannable> spannable, JavaUtilRegexPattern *pattern, NSString *scheme, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter);

FOUNDATION_EXPORT jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(id<ADLinkify_Spannable> spannable, JavaUtilRegexPattern *pattern, NSString *defaultScheme, IOSObjectArray *schemes, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter);

FOUNDATION_EXPORT jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_withJavaUtilFunctionFunction_(id<ADLinkify_Spannable> spannable, JavaUtilRegexPattern *pattern, NSString *defaultScheme, IOSObjectArray *schemes, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter, id<JavaUtilFunctionFunction> urlSpanFactory);

FOUNDATION_EXPORT NSString *ADLinkify_linkifyWithNSString_withInt_withBoolean_(NSString *url, jint mask, jboolean clickable);

J2OBJC_TYPE_LITERAL_HEADER(ADLinkify)

@compatibility_alias RAndroidTextUtilLinkify ADLinkify;

#endif

#if !defined (ADLinkSpec_) && (INCLUDE_ALL_Linkify || defined(INCLUDE_ADLinkSpec))
#define ADLinkSpec_

@interface ADLinkSpec : NSObject {
 @public
  NSString *url_;
  jint start_;
  jint end_;
}

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkSpec)

J2OBJC_FIELD_SETTER(ADLinkSpec, url_, NSString *)

FOUNDATION_EXPORT void ADLinkSpec_initPackagePrivate(ADLinkSpec *self);

FOUNDATION_EXPORT ADLinkSpec *new_ADLinkSpec_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADLinkSpec *create_ADLinkSpec_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(ADLinkSpec)

@compatibility_alias RAndroidTextUtilLinkSpec ADLinkSpec;

#endif

#if !defined (ADLinkify_MatchFilter_) && (INCLUDE_ALL_Linkify || defined(INCLUDE_ADLinkify_MatchFilter))
#define ADLinkify_MatchFilter_

@protocol JavaLangCharSequence;

@protocol ADLinkify_MatchFilter < JavaObject >

- (jboolean)acceptMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                        withInt:(jint)start
                                        withInt:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_MatchFilter)

J2OBJC_TYPE_LITERAL_HEADER(ADLinkify_MatchFilter)

#endif

#if !defined (ADLinkify_TransformFilter_) && (INCLUDE_ALL_Linkify || defined(INCLUDE_ADLinkify_TransformFilter))
#define ADLinkify_TransformFilter_

@class JavaUtilRegexMatcher;

@protocol ADLinkify_TransformFilter < JavaObject >

- (NSString *)transformUrlWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)match
                                      withNSString:(NSString *)url;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_TransformFilter)

J2OBJC_TYPE_LITERAL_HEADER(ADLinkify_TransformFilter)

#endif

#if !defined (ADLinkify_Spannable_) && (INCLUDE_ALL_Linkify || defined(INCLUDE_ADLinkify_Spannable))
#define ADLinkify_Spannable_

#define RESTRICT_JavaLangCharSequence 1
#define INCLUDE_JavaLangCharSequence 1
#include "java/lang/CharSequence.h"

@class ADLinkify_URLSpan;
@class IOSClass;
@class IOSObjectArray;

@protocol ADLinkify_Spannable < JavaLangCharSequence, JavaObject >

- (IOSObjectArray *)getSpansWithInt:(jint)i
                            withInt:(jint)length
                       withIOSClass:(IOSClass *)class1;

- (void)removeSpanWithADLinkify_URLSpan:(ADLinkify_URLSpan *)urlSpan;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_Spannable)

J2OBJC_TYPE_LITERAL_HEADER(ADLinkify_Spannable)

#endif

#if !defined (ADLinkify_URLSpan_) && (INCLUDE_ALL_Linkify || defined(INCLUDE_ADLinkify_URLSpan))
#define ADLinkify_URLSpan_

@interface ADLinkify_URLSpan : NSObject {
 @public
  NSString *url_;
  jint start_;
  jint end_;
}

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_URLSpan)

J2OBJC_FIELD_SETTER(ADLinkify_URLSpan, url_, NSString *)

FOUNDATION_EXPORT void ADLinkify_URLSpan_init(ADLinkify_URLSpan *self);

FOUNDATION_EXPORT ADLinkify_URLSpan *new_ADLinkify_URLSpan_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADLinkify_URLSpan *create_ADLinkify_URLSpan_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADLinkify_URLSpan)

#endif

#pragma pop_macro("INCLUDE_ALL_Linkify")
