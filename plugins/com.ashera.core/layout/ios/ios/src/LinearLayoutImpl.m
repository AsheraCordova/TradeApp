//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\LinearLayoutImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "Canvas.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "LinearLayout.h"
#include "LinearLayoutImpl.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIImageView.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASLinearLayoutImpl () {
 @public
  id uiView_;
  id<ADCanvas> canvas_;
  ADLinearLayout *linearLayout_;
  ASLinearLayoutImpl_LinearLayoutCommandBuilder *builder_;
  ASLinearLayoutImpl_LinearLayoutBean *bean_;
  ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *paramsBuilder_;
  ASLinearLayoutImpl_LinearLayoutParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setDividerPaddingWithId:(id)objValue;

- (void)setShowDividersWithId:(id)objValue;

- (id)getDividerPadding;

- (id)getShowDividers;

- (void)createCanvas;

@end

J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, canvas_, id<ADCanvas>)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, linearLayout_, ADLinearLayout *)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, builder_, ASLinearLayoutImpl_LinearLayoutCommandBuilder *)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, bean_, ASLinearLayoutImpl_LinearLayoutBean *)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, paramsBuilder_, ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl, paramsBean_, ASLinearLayoutImpl_LinearLayoutParamsBean *)

__attribute__((unused)) static void ASLinearLayoutImpl_setWidgetOnNativeClass(ASLinearLayoutImpl *self);

__attribute__((unused)) static void ASLinearLayoutImpl_createLayoutParamsWithADView_(ASLinearLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADLinearLayout_LayoutParams *ASLinearLayoutImpl_getLayoutParamsWithADView_(ASLinearLayoutImpl *self, ADView *view);

__attribute__((unused)) static void ASLinearLayoutImpl_setDividerPaddingWithId_(ASLinearLayoutImpl *self, id objValue);

__attribute__((unused)) static void ASLinearLayoutImpl_setShowDividersWithId_(ASLinearLayoutImpl *self, id objValue);

__attribute__((unused)) static id ASLinearLayoutImpl_getDividerPadding(ASLinearLayoutImpl *self);

__attribute__((unused)) static id ASLinearLayoutImpl_getShowDividers(ASLinearLayoutImpl *self);

__attribute__((unused)) static void ASLinearLayoutImpl_createCanvas(ASLinearLayoutImpl *self);

@interface ASLinearLayoutImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASLinearLayoutImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASLinearLayoutImpl_Divider () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASLinearLayoutImpl_Divider, mapping_, id<JavaUtilMap>)

@interface ASLinearLayoutImpl_LinearLayoutExt () {
 @public
  __unsafe_unretained ASLinearLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASLinearLayoutImpl_LinearLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASLinearLayoutImpl_LinearLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASLinearLayoutImpl_LinearLayoutCommandBuilder () {
 @public
  ASLinearLayoutImpl *this$0_;
}

@end

@interface ASLinearLayoutImpl_LinearLayoutBean () {
 @public
  ASLinearLayoutImpl *this$0_;
}

@end

@interface ASLinearLayoutImpl_LinearLayoutParamsBean () {
 @public
  ASLinearLayoutImpl *this$0_;
}

@end

@interface ASLinearLayoutImpl_LLCanvas : NSObject < ADCanvas > {
 @public
  id<JavaUtilList> imageViews_;
  __unsafe_unretained id<ASIWidget> widget_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)drawWithADDrawable:(ADDrawable *)mDivider;

- (void)reset;

- (id)nativeCreateImageViewWithId:(id)image;

@end

J2OBJC_EMPTY_STATIC_INIT(ASLinearLayoutImpl_LLCanvas)

J2OBJC_FIELD_SETTER(ASLinearLayoutImpl_LLCanvas, imageViews_, id<JavaUtilList>)

__attribute__((unused)) static void ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(ASLinearLayoutImpl_LLCanvas *self, id<ASIWidget> widget);

__attribute__((unused)) static ASLinearLayoutImpl_LLCanvas *new_ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASLinearLayoutImpl_LLCanvas *create_ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ASLinearLayoutImpl_LLCanvas)

NSString *ASLinearLayoutImpl_LOCAL_NAME = @"LinearLayout";
NSString *ASLinearLayoutImpl_GROUP_NAME = @"LinearLayout";

@implementation ASLinearLayoutImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAligned"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAlignedChildIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"divider"])) withTypeWithNSString:@"drawable"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"measureWithLargestChild"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"LinearLayout.orientation", new_ASLinearLayoutImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"orientation"])) withTypeWithNSString:@"LinearLayout.orientation"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"weightSum"])) withTypeWithNSString:@"float"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"LinearLayout.divider", new_ASLinearLayoutImpl_Divider_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showDividers"])) withTypeWithNSString:@"LinearLayout.divider"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"dividerPadding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_weight"])) withTypeWithNSString:@"float"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASLinearLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASLinearLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASLinearLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASLinearLayoutImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  linearLayout_ = new_ASLinearLayoutImpl_LinearLayoutExt_initWithASLinearLayoutImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASLinearLayoutImpl_createCanvas(self);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASLinearLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASLinearLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return linearLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADLinearLayout *) nil_chk(linearLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADLinearLayout *) nil_chk(linearLayout_)) getChildCount]) {
    [((ADLinearLayout *) nil_chk(linearLayout_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASLinearLayoutImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADLinearLayout *) nil_chk(linearLayout_)) addViewWithADView:view];
    }
    else {
      [((ADLinearLayout *) nil_chk(linearLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASLinearLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADLinearLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASLinearLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASLinearLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->gravity_ = [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue];
    }
    break;
    case 3:
    {
      ((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->weight_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADLinearLayout_LayoutParams *layoutParams = ASLinearLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_gravity", @"layout_weight" }, 4)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return JavaLangInteger_valueOfWithInt_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->gravity_);
    }
    case 3:
    {
      return JavaLangFloat_valueOfWithFloat_(((ADLinearLayout_LayoutParams *) nil_chk(layoutParams))->weight_);
    }
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASLinearLayoutImpl_LinearLayoutExt *) nil_chk(((ASLinearLayoutImpl_LinearLayoutExt *) cast_chk(linearLayout_, [ASLinearLayoutImpl_LinearLayoutExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"orientation", @"weightSum", @"showDividers", @"dividerPadding" }, 9)) {
    case 0:
    {
      [((ADLinearLayout *) nil_chk(linearLayout_)) setBaselineAlignedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
    }
    break;
    case 1:
    {
      [((ADLinearLayout *) nil_chk(linearLayout_)) setBaselineAlignedChildIndexWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      {
        [((ADLinearLayout *) nil_chk(linearLayout_)) setDividerDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
      }
    }
    break;
    case 3:
    {
      [((ADLinearLayout *) nil_chk(linearLayout_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      {
        [((ADLinearLayout *) nil_chk(linearLayout_)) setMeasureWithLargestChildEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    case 5:
    {
      [((ADLinearLayout *) nil_chk(linearLayout_)) setOrientationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 6:
    {
      [((ADLinearLayout *) nil_chk(linearLayout_)) setWeightSumWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 7:
    {
      ASLinearLayoutImpl_setShowDividersWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASLinearLayoutImpl_setDividerPaddingWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"baselineAligned", @"baselineAlignedChildIndex", @"divider", @"gravity", @"measureWithLargestChild", @"orientation", @"weightSum", @"showDividers", @"dividerPadding" }, 9)) {
    case 0:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADLinearLayout *) nil_chk(linearLayout_)) isBaselineAligned]);
    }
    case 1:
    {
      return JavaLangInteger_valueOfWithInt_([((ADLinearLayout *) nil_chk(linearLayout_)) getBaselineAlignedChildIndex]);
    }
    case 2:
    {
      {
        return [((ADLinearLayout *) nil_chk(linearLayout_)) getDividerDrawable];
      }
    }
    case 3:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADLinearLayout *) nil_chk(linearLayout_)) getGravity]);
      }
    }
    case 4:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADLinearLayout *) nil_chk(linearLayout_)) isMeasureWithLargestChildEnabled]);
      }
    }
    case 5:
    {
      return JavaLangInteger_valueOfWithInt_([((ADLinearLayout *) nil_chk(linearLayout_)) getOrientation]);
    }
    case 6:
    {
      return JavaLangFloat_valueOfWithFloat_([((ADLinearLayout *) nil_chk(linearLayout_)) getWeightSum]);
    }
    case 7:
    {
      return ASLinearLayoutImpl_getShowDividers(self);
    }
    case 8:
    {
      return ASLinearLayoutImpl_getDividerPadding(self);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setDividerPaddingWithId:(id)objValue {
  ASLinearLayoutImpl_setDividerPaddingWithId_(self, objValue);
}

- (void)setShowDividersWithId:(id)objValue {
  ASLinearLayoutImpl_setShowDividersWithId_(self, objValue);
}

- (id)getDividerPadding {
  return ASLinearLayoutImpl_getDividerPadding(self);
}

- (id)getShowDividers {
  return ASLinearLayoutImpl_getShowDividers(self);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADLinearLayout *) nil_chk(linearLayout_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASLinearLayoutImpl_LinearLayoutBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASLinearLayoutImpl_LinearLayoutBean_initWithASLinearLayoutImpl_(self);
  }
  return bean_;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASLinearLayoutImpl_LinearLayoutCommandBuilder_initWithASLinearLayoutImpl_(self);
  }
  return builder_;
}

- (ASLinearLayoutImpl_LinearLayoutParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASLinearLayoutImpl_LinearLayoutParamsBean_initWithASLinearLayoutImpl_(self);
  }
  return paramsBean_;
}

- (ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder_initWithASLinearLayoutImpl_(self);
  }
  return paramsBuilder_;
}

- (void)createCanvas {
  ASLinearLayoutImpl_createCanvas(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADLinearLayout_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, 1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(setDividerPaddingWithId:);
  methods[24].selector = @selector(setShowDividersWithId:);
  methods[25].selector = @selector(getDividerPadding);
  methods[26].selector = @selector(getShowDividers);
  methods[27].selector = @selector(setIdWithNSString:);
  methods[28].selector = @selector(getPluginWithNSString:);
  methods[29].selector = @selector(getBean);
  methods[30].selector = @selector(getBuilder);
  methods[31].selector = @selector(getParamsBean);
  methods[32].selector = @selector(getParamsBuilder);
  methods[33].selector = @selector(createCanvas);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "canvas_", "LADCanvas;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "linearLayout_", "LADLinearLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASLinearLayoutImpl_LinearLayoutBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASLinearLayoutImpl_LinearLayoutParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setDividerPadding", "LNSObject;", "setShowDividers", "setId", "getPlugin", &ASLinearLayoutImpl_LOCAL_NAME, &ASLinearLayoutImpl_GROUP_NAME, "LASLinearLayoutImpl_Orientation;LASLinearLayoutImpl_Divider;LASLinearLayoutImpl_LinearLayoutExt;LASLinearLayoutImpl_LinearLayoutCommandBuilder;LASLinearLayoutImpl_LinearLayoutBean;LASLinearLayoutImpl_LinearLayoutParamsBean;LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;LASLinearLayoutImpl_LLCanvas;" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl = { "LinearLayoutImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 34, 9, -1, 35, -1, -1, -1 };
  return &_ASLinearLayoutImpl;
}

@end

void ASLinearLayoutImpl_init(ASLinearLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASLinearLayoutImpl_GROUP_NAME, ASLinearLayoutImpl_LOCAL_NAME);
}

ASLinearLayoutImpl *new_ASLinearLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl, init)
}

ASLinearLayoutImpl *create_ASLinearLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl, init)
}

void ASLinearLayoutImpl_initWithNSString_(ASLinearLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASLinearLayoutImpl_GROUP_NAME, localname);
}

ASLinearLayoutImpl *new_ASLinearLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl, initWithNSString_, localname)
}

ASLinearLayoutImpl *create_ASLinearLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl, initWithNSString_, localname)
}

void ASLinearLayoutImpl_initWithNSString_withNSString_(ASLinearLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASLinearLayoutImpl *new_ASLinearLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASLinearLayoutImpl *create_ASLinearLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASLinearLayoutImpl_setWidgetOnNativeClass(ASLinearLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASLinearLayoutImpl_createLayoutParamsWithADView_(ASLinearLayoutImpl *self, ADView *view) {
  ADLinearLayout_LayoutParams *layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
  layoutParams = (ADLinearLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADLinearLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADLinearLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADLinearLayout_LayoutParams *ASLinearLayoutImpl_getLayoutParamsWithADView_(ASLinearLayoutImpl *self, ADView *view) {
  return (ADLinearLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADLinearLayout_LayoutParams class]);
}

void ASLinearLayoutImpl_setDividerPaddingWithId_(ASLinearLayoutImpl *self, id objValue) {
  {
    [((ADLinearLayout *) nil_chk(self->linearLayout_)) setDividerPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASLinearLayoutImpl_setShowDividersWithId_(ASLinearLayoutImpl *self, id objValue) {
  {
    [((ADLinearLayout *) nil_chk(self->linearLayout_)) setShowDividersWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

id ASLinearLayoutImpl_getDividerPadding(ASLinearLayoutImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADLinearLayout *) nil_chk(self->linearLayout_)) getDividerPadding]);
  }
}

id ASLinearLayoutImpl_getShowDividers(ASLinearLayoutImpl *self) {
  {
    return JavaLangInteger_valueOfWithInt_([((ADLinearLayout *) nil_chk(self->linearLayout_)) getShowDividers]);
  }
}

void ASLinearLayoutImpl_createCanvas(ASLinearLayoutImpl *self) {
  self->canvas_ = new_ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl)

@implementation ASLinearLayoutImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASLinearLayoutImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASLinearLayoutImpl;" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_Orientation = { "Orientation", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASLinearLayoutImpl_Orientation;
}

@end

void ASLinearLayoutImpl_Orientation_init(ASLinearLayoutImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASLinearLayoutImpl_Orientation *new_ASLinearLayoutImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_Orientation, init)
}

ASLinearLayoutImpl_Orientation *create_ASLinearLayoutImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_Orientation)

@implementation ASLinearLayoutImpl_Divider

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASLinearLayoutImpl_Divider_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASLinearLayoutImpl;" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_Divider = { "Divider", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASLinearLayoutImpl_Divider;
}

@end

void ASLinearLayoutImpl_Divider_init(ASLinearLayoutImpl_Divider *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"beginning" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASLinearLayoutImpl_Divider *new_ASLinearLayoutImpl_Divider_init() {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_Divider, init)
}

ASLinearLayoutImpl_Divider *create_ASLinearLayoutImpl_Divider_init() {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_Divider, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_Divider)

@implementation ASLinearLayoutImpl_LinearLayoutExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASLinearLayoutImpl:(ASLinearLayoutImpl *)outer$ {
  ASLinearLayoutImpl_LinearLayoutExt_initWithASLinearLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  [((id<ADCanvas>) nil_chk(this$0_->canvas_)) reset];
  [self onDrawWithADCanvas:this$0_->canvas_];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASLinearLayoutImpl_LinearLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASLinearLayoutImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASLinearLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASLinearLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_LinearLayoutExt = { "LinearLayoutExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASLinearLayoutImpl_LinearLayoutExt;
}

@end

void ASLinearLayoutImpl_LinearLayoutExt_initWithASLinearLayoutImpl_(ASLinearLayoutImpl_LinearLayoutExt *self, ASLinearLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADLinearLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASLinearLayoutImpl_LinearLayoutExt *new_ASLinearLayoutImpl_LinearLayoutExt_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_LinearLayoutExt, initWithASLinearLayoutImpl_, outer$)
}

ASLinearLayoutImpl_LinearLayoutExt *create_ASLinearLayoutImpl_LinearLayoutExt_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_LinearLayoutExt, initWithASLinearLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_LinearLayoutExt)

@implementation ASLinearLayoutImpl_LinearLayoutCommandBuilder

- (instancetype)initWithASLinearLayoutImpl:(ASLinearLayoutImpl *)outer$ {
  ASLinearLayoutImpl_LinearLayoutCommandBuilder_initWithASLinearLayoutImpl_(self, outer$);
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetBaselineAligned {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAligned"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isBaselineAligned {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAligned"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setBaselineAlignedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAligned"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetBaselineAlignedChildIndex {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignedChildIndex"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBaselineAlignedChildIndex {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignedChildIndex"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setBaselineAlignedChildIndexWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignedChildIndex"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetDivider {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"divider"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDivider {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"divider"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setDividerWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"divider"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetMeasureWithLargestChild {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureWithLargestChild"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isMeasureWithLargestChild {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureWithLargestChild"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setMeasureWithLargestChildWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"measureWithLargestChild"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetOrientation {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getOrientation {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setOrientationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetWeightSum {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWeightSum {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setWeightSumWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"weightSum"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetShowDividers {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDividers"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShowDividers {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDividers"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setShowDividersWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showDividers"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)tryGetDividerPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dividerPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDividerPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dividerPadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandBuilder *)setDividerPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"dividerPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandBuilder;", 0x1, 14, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASLinearLayoutImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetBaselineAligned);
  methods[3].selector = @selector(isBaselineAligned);
  methods[4].selector = @selector(setBaselineAlignedWithBoolean:);
  methods[5].selector = @selector(tryGetBaselineAlignedChildIndex);
  methods[6].selector = @selector(getBaselineAlignedChildIndex);
  methods[7].selector = @selector(setBaselineAlignedChildIndexWithInt:);
  methods[8].selector = @selector(tryGetDivider);
  methods[9].selector = @selector(getDivider);
  methods[10].selector = @selector(setDividerWithNSString:);
  methods[11].selector = @selector(tryGetGravity);
  methods[12].selector = @selector(getGravity);
  methods[13].selector = @selector(setGravityWithNSString:);
  methods[14].selector = @selector(tryGetMeasureWithLargestChild);
  methods[15].selector = @selector(isMeasureWithLargestChild);
  methods[16].selector = @selector(setMeasureWithLargestChildWithBoolean:);
  methods[17].selector = @selector(tryGetOrientation);
  methods[18].selector = @selector(getOrientation);
  methods[19].selector = @selector(setOrientationWithNSString:);
  methods[20].selector = @selector(tryGetWeightSum);
  methods[21].selector = @selector(getWeightSum);
  methods[22].selector = @selector(setWeightSumWithFloat:);
  methods[23].selector = @selector(tryGetShowDividers);
  methods[24].selector = @selector(getShowDividers);
  methods[25].selector = @selector(setShowDividersWithNSString:);
  methods[26].selector = @selector(tryGetDividerPadding);
  methods[27].selector = @selector(getDividerPadding);
  methods[28].selector = @selector(setDividerPaddingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASLinearLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASLinearLayoutImpl;", "execute", "Z", "setBaselineAligned", "setBaselineAlignedChildIndex", "I", "setDivider", "LNSString;", "setGravity", "setMeasureWithLargestChild", "setOrientation", "setWeightSum", "F", "setShowDividers", "setDividerPadding", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/layout/LinearLayoutImpl$LinearLayoutCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_LinearLayoutCommandBuilder = { "LinearLayoutCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 29, 1, 0, -1, -1, 15, -1 };
  return &_ASLinearLayoutImpl_LinearLayoutCommandBuilder;
}

@end

void ASLinearLayoutImpl_LinearLayoutCommandBuilder_initWithASLinearLayoutImpl_(ASLinearLayoutImpl_LinearLayoutCommandBuilder *self, ASLinearLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASLinearLayoutImpl_LinearLayoutCommandBuilder *new_ASLinearLayoutImpl_LinearLayoutCommandBuilder_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_LinearLayoutCommandBuilder, initWithASLinearLayoutImpl_, outer$)
}

ASLinearLayoutImpl_LinearLayoutCommandBuilder *create_ASLinearLayoutImpl_LinearLayoutCommandBuilder_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_LinearLayoutCommandBuilder, initWithASLinearLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_LinearLayoutCommandBuilder)

@implementation ASLinearLayoutImpl_LinearLayoutBean

- (instancetype)initWithASLinearLayoutImpl:(ASLinearLayoutImpl *)outer$ {
  ASLinearLayoutImpl_LinearLayoutBean_initWithASLinearLayoutImpl_(self, outer$);
  return self;
}

- (id)isBaselineAligned {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaselineAligned])) executeWithBoolean:false])) isBaselineAligned];
}

- (void)setBaselineAlignedWithBoolean:(jboolean)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineAlignedWithBoolean:value])) executeWithBoolean:true];
}

- (id)getBaselineAlignedChildIndex {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaselineAlignedChildIndex])) executeWithBoolean:false])) getBaselineAlignedChildIndex];
}

- (void)setBaselineAlignedChildIndexWithInt:(jint)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineAlignedChildIndexWithInt:value])) executeWithBoolean:true];
}

- (id)getDivider {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDivider])) executeWithBoolean:false])) getDivider];
}

- (void)setDividerWithNSString:(NSString *)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDividerWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)isMeasureWithLargestChild {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMeasureWithLargestChild])) executeWithBoolean:false])) isMeasureWithLargestChild];
}

- (void)setMeasureWithLargestChildWithBoolean:(jboolean)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMeasureWithLargestChildWithBoolean:value])) executeWithBoolean:true];
}

- (id)getOrientation {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetOrientation])) executeWithBoolean:false])) getOrientation];
}

- (void)setOrientationWithNSString:(NSString *)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOrientationWithNSString:value])) executeWithBoolean:true];
}

- (id)getWeightSum {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWeightSum])) executeWithBoolean:false])) getWeightSum];
}

- (void)setWeightSumWithFloat:(jfloat)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWeightSumWithFloat:value])) executeWithBoolean:true];
}

- (id)getShowDividers {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShowDividers])) executeWithBoolean:false])) getShowDividers];
}

- (void)setShowDividersWithNSString:(NSString *)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShowDividersWithNSString:value])) executeWithBoolean:true];
}

- (id)getDividerPadding {
  return [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDividerPadding])) executeWithBoolean:false])) getDividerPadding];
}

- (void)setDividerPaddingWithNSString:(NSString *)value {
  (void) [((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDividerPaddingWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASLinearLayoutImpl:);
  methods[1].selector = @selector(isBaselineAligned);
  methods[2].selector = @selector(setBaselineAlignedWithBoolean:);
  methods[3].selector = @selector(getBaselineAlignedChildIndex);
  methods[4].selector = @selector(setBaselineAlignedChildIndexWithInt:);
  methods[5].selector = @selector(getDivider);
  methods[6].selector = @selector(setDividerWithNSString:);
  methods[7].selector = @selector(getGravity);
  methods[8].selector = @selector(setGravityWithNSString:);
  methods[9].selector = @selector(isMeasureWithLargestChild);
  methods[10].selector = @selector(setMeasureWithLargestChildWithBoolean:);
  methods[11].selector = @selector(getOrientation);
  methods[12].selector = @selector(setOrientationWithNSString:);
  methods[13].selector = @selector(getWeightSum);
  methods[14].selector = @selector(setWeightSumWithFloat:);
  methods[15].selector = @selector(getShowDividers);
  methods[16].selector = @selector(setShowDividersWithNSString:);
  methods[17].selector = @selector(getDividerPadding);
  methods[18].selector = @selector(setDividerPaddingWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASLinearLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASLinearLayoutImpl;", "setBaselineAligned", "Z", "setBaselineAlignedChildIndex", "I", "setDivider", "LNSString;", "setGravity", "setMeasureWithLargestChild", "setOrientation", "setWeightSum", "F", "setShowDividers", "setDividerPadding" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_LinearLayoutBean = { "LinearLayoutBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 19, 1, 0, -1, -1, -1, -1 };
  return &_ASLinearLayoutImpl_LinearLayoutBean;
}

@end

void ASLinearLayoutImpl_LinearLayoutBean_initWithASLinearLayoutImpl_(ASLinearLayoutImpl_LinearLayoutBean *self, ASLinearLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASLinearLayoutImpl_LinearLayoutBean *new_ASLinearLayoutImpl_LinearLayoutBean_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_LinearLayoutBean, initWithASLinearLayoutImpl_, outer$)
}

ASLinearLayoutImpl_LinearLayoutBean *create_ASLinearLayoutImpl_LinearLayoutBean_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_LinearLayoutBean, initWithASLinearLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_LinearLayoutBean)

@implementation ASLinearLayoutImpl_LinearLayoutParamsBean

- (instancetype)initWithASLinearLayoutImpl:(ASLinearLayoutImpl *)outer$ {
  ASLinearLayoutImpl_LinearLayoutParamsBean_initWithASLinearLayoutImpl_(self, outer$);
  return self;
}

- (id)getLayoutGravityWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutGravity])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutGravity];
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutWeightWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutWeight])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutWeight];
}

- (void)setLayoutWeightWithASIWidget:(id<ASIWidget>)w
                           withFloat:(jfloat)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([((ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutWeightWithFloat:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASLinearLayoutImpl:);
  methods[1].selector = @selector(getLayoutGravityWithASIWidget:);
  methods[2].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  methods[3].selector = @selector(getLayoutWeightWithASIWidget:);
  methods[4].selector = @selector(setLayoutWeightWithASIWidget:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASLinearLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASLinearLayoutImpl;", "getLayoutGravity", "LASIWidget;", "setLayoutGravity", "LASIWidget;LNSString;", "getLayoutWeight", "setLayoutWeight", "LASIWidget;F" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_LinearLayoutParamsBean = { "LinearLayoutParamsBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 5, 1, 0, -1, -1, -1, -1 };
  return &_ASLinearLayoutImpl_LinearLayoutParamsBean;
}

@end

void ASLinearLayoutImpl_LinearLayoutParamsBean_initWithASLinearLayoutImpl_(ASLinearLayoutImpl_LinearLayoutParamsBean *self, ASLinearLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASLinearLayoutImpl_LinearLayoutParamsBean *new_ASLinearLayoutImpl_LinearLayoutParamsBean_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_LinearLayoutParamsBean, initWithASLinearLayoutImpl_, outer$)
}

ASLinearLayoutImpl_LinearLayoutParamsBean *create_ASLinearLayoutImpl_LinearLayoutParamsBean_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_LinearLayoutParamsBean, initWithASLinearLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_LinearLayoutParamsBean)

@implementation ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder

- (instancetype)initWithASLinearLayoutImpl:(ASLinearLayoutImpl *)outer$ {
  ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder_initWithASLinearLayoutImpl_(self, outer$);
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *)tryGetLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *)tryGetLayoutWeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutWeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *)setLayoutWeightWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_weight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASLinearLayoutImpl:);
  methods[1].selector = @selector(tryGetLayoutGravity);
  methods[2].selector = @selector(getLayoutGravity);
  methods[3].selector = @selector(setLayoutGravityWithNSString:);
  methods[4].selector = @selector(tryGetLayoutWeight);
  methods[5].selector = @selector(getLayoutWeight);
  methods[6].selector = @selector(setLayoutWeightWithFloat:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASLinearLayoutImpl;", "setLayoutGravity", "LNSString;", "setLayoutWeight", "F", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/layout/LinearLayoutImpl$LinearLayoutCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder = { "LinearLayoutCommandParamsBuilder", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 7, 0, 0, -1, -1, 5, -1 };
  return &_ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder;
}

@end

void ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder_initWithASLinearLayoutImpl_(ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *self, ASLinearLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *new_ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder, initWithASLinearLayoutImpl_, outer$)
}

ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder *create_ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder_initWithASLinearLayoutImpl_(ASLinearLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder, initWithASLinearLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_LinearLayoutCommandParamsBuilder)

@implementation ASLinearLayoutImpl_LLCanvas

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(self, widget);
  return self;
}

- (void)drawWithADDrawable:(ADDrawable *)mDivider {
  if ([((ADDrawable *) nil_chk(mDivider)) getDrawable] != nil) {
    id imageView = [self nativeCreateImageViewWithId:[mDivider getDrawable]];
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(imageView, [mDivider getLeft], [mDivider getTop], [mDivider getRight], [mDivider getBottom]);
    [((id<JavaUtilList>) nil_chk(imageViews_)) addWithId:imageView];
    ASViewGroupImpl_nativeAddViewWithId_withId_([((id<ASIWidget>) nil_chk(widget_)) asNativeWidget], imageView);
  }
}

- (void)reset {
  for (id __strong imageView in nil_chk(imageViews_)) {
    ASViewGroupImpl_removeViewWithId_(imageView);
  }
  [imageViews_ clear];
}

- (id)nativeCreateImageViewWithId:(id)image {
  ASUIImageView* imageView = [ASUIImageView new];
  if ([image isKindOfClass:[UIImage class]]) {
    imageView.image = image;
    imageView.backgroundColor = nil;
  }else if ([image isKindOfClass:[UIColor class]]) {
    imageView.backgroundColor = image;
    imageView.image = nil;
  }
  return imageView;
}

- (void)translateWithInt:(jint)arg0
                 withInt:(jint)arg1 {
  ADCanvas_translateWithInt_withInt_(self, arg0, arg1);
}

- (void)__javaClone:(ASLinearLayoutImpl_LLCanvas *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(drawWithADDrawable:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(nativeCreateImageViewWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "imageViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 5, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "draw", "LADDrawable;", "nativeCreateImageView", "LNSObject;", "Ljava/util/List<Ljava/lang/Object;>;", "LASLinearLayoutImpl;" };
  static const J2ObjcClassInfo _ASLinearLayoutImpl_LLCanvas = { "LLCanvas", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1a, 4, 2, 6, -1, -1, -1, -1 };
  return &_ASLinearLayoutImpl_LLCanvas;
}

@end

void ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(ASLinearLayoutImpl_LLCanvas *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->imageViews_ = new_JavaUtilArrayList_init();
  self->widget_ = widget;
}

ASLinearLayoutImpl_LLCanvas *new_ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASLinearLayoutImpl_LLCanvas, initWithASIWidget_, widget)
}

ASLinearLayoutImpl_LLCanvas *create_ASLinearLayoutImpl_LLCanvas_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASLinearLayoutImpl_LLCanvas, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLinearLayoutImpl_LLCanvas)
