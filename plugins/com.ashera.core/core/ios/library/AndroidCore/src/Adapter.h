//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\Adapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Adapter")
#ifdef RESTRICT_Adapter
#define INCLUDE_ALL_Adapter 0
#else
#define INCLUDE_ALL_Adapter 1
#endif
#undef RESTRICT_Adapter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADAdapter_) && (INCLUDE_ALL_Adapter || defined(INCLUDE_ADAdapter))
#define ADAdapter_

@class ADDataSetObserver;
@class ADView;
@class ADViewGroup;
@class IOSObjectArray;

/*!
 @brief An Adapter object acts as a bridge between an <code>AdapterView</code> and the
  underlying data for that view.The Adapter provides access to the data items.
 The Adapter is also responsible for making a <code>r.android.view.View</code> for
  each item in the data set.
 - seealso: r.android.widget.ArrayAdapter
 - seealso: r.android.widget.CursorAdapter
 - seealso: r.android.widget.SimpleCursorAdapter
 */
@protocol ADAdapter < JavaObject >

/*!
 @brief Register an observer that is called when changes happen to the data used by this adapter.
 @param observer the object that gets notified when the data set changes.
 */
- (void)registerDataSetObserverWithADDataSetObserver:(ADDataSetObserver *)observer;

/*!
 @brief Unregister an observer that has previously been registered with this
  adapter via <code>registerDataSetObserver</code>.
 @param observer the object to unregister.
 */
- (void)unregisterDataSetObserverWithADDataSetObserver:(ADDataSetObserver *)observer;

/*!
 @brief How many items are in the data set represented by this Adapter.
 @return Count of items.
 */
- (jint)getCount;

/*!
 @brief Get the data item associated with the specified position in the data set.
 @param position Position of the item whose data we want within the adapter's   data set.
 @return The data at the specified position.
 */
- (id)getItemWithInt:(jint)position;

/*!
 @brief Get the row id associated with the specified position in the list.
 @param position The position of the item within the adapter's data set whose row id we want.
 @return The id of the item at the specified position.
 */
- (jlong)getItemIdWithInt:(jint)position;

/*!
 @brief Indicates whether the item ids are stable across changes to the
  underlying data.
 @return True if the same id always refers to the same object.
 */
- (jboolean)hasStableIds;

/*!
 @brief Get a View that displays the data at the specified position in the data set.You can either
  create a View manually or inflate it from an XML layout file.
 When the View is inflated, the
  parent View (GridView, ListView...) will apply default layout parameters unless you use 
 <code>r.android.view.LayoutInflater.inflate(int, r.android.view.ViewGroup, boolean)</code>
  to specify a root view and to prevent attachment to the root.
 @param position The position of the item within the adapter's data set of the item whose view         we want.
 @param convertView The old view to reuse, if possible. Note: You should check that this view         is non-null and of an appropriate type before using. If it is not possible to convert
          this view to display the correct data, this method can create a new view.
          Heterogeneous lists can specify their number of view types, so that this View is
          always of the right type (see 
 <code>getViewTypeCount()</code>  and         <code>getItemViewType(int)</code>
  ).
 @param parent The parent that this view will eventually be attached to
 @return A View corresponding to the data at the specified position.
 */
- (ADView *)getViewWithInt:(jint)position
                withADView:(ADView *)convertView
           withADViewGroup:(ADViewGroup *)parent;

/*!
 @brief Get the type of View that will be created by <code>getView</code> for the specified item.
 @param position The position of the item within the adapter's data set whose view type we         want.
 @return An integer representing the type of View. Two views should share the same type if one
          can be converted to the other in <code>getView</code>. Note: Integers must be in the
          range 0 to <code>getViewTypeCount</code> - 1. <code>IGNORE_ITEM_VIEW_TYPE</code> can
          also be returned.
 - seealso: #IGNORE_ITEM_VIEW_TYPE
 */
- (jint)getItemViewTypeWithInt:(jint)position;

/*!
 @brief <p>
  Returns the number of types of Views that will be created by 
 <code>getView</code>.
 Each type represents a set of views that can be
  converted in <code>getView</code>. If the adapter always returns the same
  type of View for all items, this method should return 1. 
 </p>
  <p>
  This method will only be called when the adapter is set on the <code>AdapterView</code>.
  </p>
 @return The number of types of Views that will be created by this adapter
 */
- (jint)getViewTypeCount;

/*!
 @return true if this adapter doesn't contain any data.  This is used to determine
  whether the empty view should be displayed.  A typical implementation will return
  getCount() == 0 but since getCount() includes the headers and footers, specialized
  adapters might want a different behavior.
 */
- (jboolean)isEmpty;

/*!
 @brief Gets a string representation of the adapter data that can help 
 <code>r.android.service.autofill.AutofillService</code> autofill the view backed by the adapter.
 <p>
  It should only be set (i.e., non-<code>null</code> if the values do not represent PII
  (Personally Identifiable Information - sensitive data such as email addresses,
  credit card numbers, passwords, etc...). For
  example, it's ok to return a list of month names, but not a list of usernames. A good rule of
  thumb is that if the adapter data comes from static resources, such data is not PII - see 
 <code>r.android.view.ViewStructure.setDataIsSensitive(boolean)</code> for more info.
 @return <code>null</code> by default, unless implementations override it.
 */
- (IOSObjectArray *)getAutofillOptions;

@end

J2OBJC_EMPTY_STATIC_INIT(ADAdapter)

/*!
 @brief An item view type that causes the <code>AdapterView</code> to ignore the item
  view.For example, this can be used if the client does not want a
  particular view to be given for conversion in 
 <code>getView(int, View, ViewGroup)</code>.
 - seealso: #getItemViewType(int)
 - seealso: #getViewTypeCount()
 */
inline jint ADAdapter_get_IGNORE_ITEM_VIEW_TYPE(void);
#define ADAdapter_IGNORE_ITEM_VIEW_TYPE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADAdapter, IGNORE_ITEM_VIEW_TYPE, jint)

inline jint ADAdapter_get_NO_SELECTION(void);
#define ADAdapter_NO_SELECTION ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADAdapter, NO_SELECTION, jint)

FOUNDATION_EXPORT IOSObjectArray *ADAdapter_getAutofillOptions(id<ADAdapter> self);

J2OBJC_TYPE_LITERAL_HEADER(ADAdapter)

#define RAndroidWidgetAdapter ADAdapter

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Adapter")
