//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\SplineSet.java
//

#include "CLCustomAttribute.h"
#include "CurveFit.h"
#include "CustomVariable.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFrameArray.h"
#include "MotionWidget.h"
#include "SplineSet.h"
#include "TypedValues.h"
#include "WidgetFrame.h"
#include "java/lang/RuntimeException.h"
#include "java/text/DecimalFormat.h"
#include "java/util/Arrays.h"


@interface ADXSplineSet () {
 @public
  jint count_;
  NSString *mType_;
}

@end

J2OBJC_FIELD_SETTER(ADXSplineSet, mType_, NSString *)

inline NSString *ADXSplineSet_get_TAG(void);
static NSString *ADXSplineSet_TAG = @"SplineSet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXSplineSet, TAG, NSString *)

@interface ADXSplineSet_Sort : NSObject

- (instancetype)init;

+ (void)doubleQuickSortWithIntArray:(IOSIntArray *)key
                     withFloatArray:(IOSFloatArray *)value
                            withInt:(jint)low
                            withInt:(jint)hi;

+ (jint)partitionWithIntArray:(IOSIntArray *)array
               withFloatArray:(IOSFloatArray *)value
                      withInt:(jint)low
                      withInt:(jint)hi;

+ (void)swapWithIntArray:(IOSIntArray *)array
          withFloatArray:(IOSFloatArray *)value
                 withInt:(jint)a
                 withInt:(jint)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSplineSet_Sort)

__attribute__((unused)) static void ADXSplineSet_Sort_init(ADXSplineSet_Sort *self);

__attribute__((unused)) static ADXSplineSet_Sort *new_ADXSplineSet_Sort_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSplineSet_Sort *create_ADXSplineSet_Sort_init(void);

__attribute__((unused)) static void ADXSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *key, IOSFloatArray *value, jint low, jint hi);

__attribute__((unused)) static jint ADXSplineSet_Sort_partitionWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint low, jint hi);

__attribute__((unused)) static void ADXSplineSet_Sort_swapWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint a, jint b);

J2OBJC_TYPE_LITERAL_HEADER(ADXSplineSet_Sort)

@interface ADXSplineSet_CoreSpline : ADXSplineSet {
 @public
  NSString *type_;
  jlong start_;
}

- (instancetype)initWithNSString:(NSString *)str
                        withLong:(jlong)currentTime;

- (void)setPropertyWithADXTypedValues:(id<ADXTypedValues>)widget
                            withFloat:(jfloat)t;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSplineSet_CoreSpline)

J2OBJC_FIELD_SETTER(ADXSplineSet_CoreSpline, type_, NSString *)

__attribute__((unused)) static void ADXSplineSet_CoreSpline_initWithNSString_withLong_(ADXSplineSet_CoreSpline *self, NSString *str, jlong currentTime);

__attribute__((unused)) static ADXSplineSet_CoreSpline *new_ADXSplineSet_CoreSpline_initWithNSString_withLong_(NSString *str, jlong currentTime) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSplineSet_CoreSpline *create_ADXSplineSet_CoreSpline_initWithNSString_withLong_(NSString *str, jlong currentTime);

J2OBJC_TYPE_LITERAL_HEADER(ADXSplineSet_CoreSpline)

@implementation ADXSplineSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXSplineSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setPropertyWithADXTypedValues:(id<ADXTypedValues>)widget
                            withFloat:(jfloat)t {
  [((id<ADXTypedValues>) nil_chk(widget)) setValueWithInt:ADXTypedValues_Attributes_getIdWithNSString_(mType_) withFloat:[self getWithFloat:t]];
}

- (NSString *)description {
  NSString *str = JreRetainedLocalValue(mType_);
  JavaTextDecimalFormat *df = create_JavaTextDecimalFormat_initWithNSString_(@"##.##");
  for (jint i = 0; i < count_; i++) {
    JreStrAppend(&str, "CI$$$", '[', IOSIntArray_Get(nil_chk(mTimePoints_), i), @" , ", [df formatWithDouble:IOSFloatArray_Get(nil_chk(mValues_), i)], @"] ");
  }
  return str;
}

- (void)setTypeWithNSString:(NSString *)type {
  JreStrongAssign(&mType_, type);
}

- (jfloat)getWithFloat:(jfloat)t {
  return (jfloat) [((ADXCurveFit *) nil_chk(mCurveFit_)) getPosWithDouble:t withInt:0];
}

- (jfloat)getSlopeWithFloat:(jfloat)t {
  return (jfloat) [((ADXCurveFit *) nil_chk(mCurveFit_)) getSlopeWithDouble:t withInt:0];
}

- (ADXCurveFit *)getCurveFit {
  return mCurveFit_;
}

- (void)setPointWithInt:(jint)position
              withFloat:(jfloat)value {
  if (((IOSIntArray *) nil_chk(mTimePoints_))->size_ < count_ + 1) {
    JreStrongAssign(&mTimePoints_, JavaUtilArrays_copyOfWithIntArray_withInt_(mTimePoints_, mTimePoints_->size_ * 2));
    JreStrongAssign(&mValues_, JavaUtilArrays_copyOfWithFloatArray_withInt_(mValues_, ((IOSFloatArray *) nil_chk(mValues_))->size_ * 2));
  }
  *IOSIntArray_GetRef(nil_chk(mTimePoints_), count_) = position;
  *IOSFloatArray_GetRef(nil_chk(mValues_), count_) = value;
  count_++;
}

- (void)setupWithInt:(jint)curveType {
  if (count_ == 0) {
    return;
  }
  ADXSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray_withInt_withInt_(mTimePoints_, mValues_, 0, count_ - 1);
  jint unique = 1;
  for (jint i = 1; i < count_; i++) {
    if (IOSIntArray_Get(nil_chk(mTimePoints_), i - 1) != IOSIntArray_Get(mTimePoints_, i)) {
      unique++;
    }
  }
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:unique];
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ unique, 1 }];
  jint k = 0;
  for (jint i = 0; i < count_; i++) {
    if (i > 0 && IOSIntArray_Get(nil_chk(mTimePoints_), i) == IOSIntArray_Get(mTimePoints_, i - 1)) {
      continue;
    }
    *IOSDoubleArray_GetRef(time, k) = IOSIntArray_Get(nil_chk(mTimePoints_), i) * 1E-2;
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, k)), 0) = IOSFloatArray_Get(nil_chk(mValues_), i);
    k++;
  }
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(curveType, time, values));
}

+ (ADXSplineSet *)makeCustomSplineWithNSString:(NSString *)str
              withADXKeyFrameArray_CustomArray:(ADXKeyFrameArray_CustomArray *)attrList {
  return ADXSplineSet_makeCustomSplineWithNSString_withADXKeyFrameArray_CustomArray_(str, attrList);
}

+ (ADXSplineSet *)makeCustomSplineSetWithNSString:(NSString *)str
                   withADXKeyFrameArray_CustomVar:(ADXKeyFrameArray_CustomVar *)attrList {
  return ADXSplineSet_makeCustomSplineSetWithNSString_withADXKeyFrameArray_CustomVar_(str, attrList);
}

+ (ADXSplineSet *)makeSplineWithNSString:(NSString *)str
                                withLong:(jlong)currentTime {
  return ADXSplineSet_makeSplineWithNSString_withLong_(str, currentTime);
}

- (void)dealloc {
  RELEASE_(mCurveFit_);
  RELEASE_(mTimePoints_);
  RELEASE_(mValues_);
  RELEASE_(mType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "LADXCurveFit;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LADXSplineSet;", 0x9, 12, 13, -1, -1, -1, -1 },
    { NULL, "LADXSplineSet;", 0x9, 14, 15, -1, -1, -1, -1 },
    { NULL, "LADXSplineSet;", 0x9, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setPropertyWithADXTypedValues:withFloat:);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(setTypeWithNSString:);
  methods[4].selector = @selector(getWithFloat:);
  methods[5].selector = @selector(getSlopeWithFloat:);
  methods[6].selector = @selector(getCurveFit);
  methods[7].selector = @selector(setPointWithInt:withFloat:);
  methods[8].selector = @selector(setupWithInt:);
  methods[9].selector = @selector(makeCustomSplineWithNSString:withADXKeyFrameArray_CustomArray:);
  methods[10].selector = @selector(makeCustomSplineSetWithNSString:withADXKeyFrameArray_CustomVar:);
  methods[11].selector = @selector(makeSplineWithNSString:withLong:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 18, -1, -1 },
    { "mCurveFit_", "LADXCurveFit;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTimePoints_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mValues_", "[F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mType_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setProperty", "LADXTypedValues;F", "toString", "setType", "LNSString;", "get", "F", "getSlope", "setPoint", "IF", "setup", "I", "makeCustomSpline", "LNSString;LADXKeyFrameArray_CustomArray;", "makeCustomSplineSet", "LNSString;LADXKeyFrameArray_CustomVar;", "makeSpline", "LNSString;J", &ADXSplineSet_TAG, "LADXSplineSet_Sort;LADXSplineSet_CustomSet;LADXSplineSet_CoreSpline;LADXSplineSet_CustomSpline;" };
  static const J2ObjcClassInfo _ADXSplineSet = { "SplineSet", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x401, 12, 6, -1, 19, -1, -1, -1 };
  return &_ADXSplineSet;
}

@end

void ADXSplineSet_init(ADXSplineSet *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mTimePoints_, [IOSIntArray newArrayWithLength:10]);
  JreStrongAssignAndConsume(&self->mValues_, [IOSFloatArray newArrayWithLength:10]);
}

ADXSplineSet *ADXSplineSet_makeCustomSplineWithNSString_withADXKeyFrameArray_CustomArray_(NSString *str, ADXKeyFrameArray_CustomArray *attrList) {
  ADXSplineSet_initialize();
  return create_ADXSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(str, attrList);
}

ADXSplineSet *ADXSplineSet_makeCustomSplineSetWithNSString_withADXKeyFrameArray_CustomVar_(NSString *str, ADXKeyFrameArray_CustomVar *attrList) {
  ADXSplineSet_initialize();
  return create_ADXSplineSet_CustomSpline_initWithNSString_withADXKeyFrameArray_CustomVar_(str, attrList);
}

ADXSplineSet *ADXSplineSet_makeSplineWithNSString_withLong_(NSString *str, jlong currentTime) {
  ADXSplineSet_initialize();
  return create_ADXSplineSet_CoreSpline_initWithNSString_withLong_(str, currentTime);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSplineSet)

@implementation ADXSplineSet_Sort

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXSplineSet_Sort_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)doubleQuickSortWithIntArray:(IOSIntArray *)key
                     withFloatArray:(IOSFloatArray *)value
                            withInt:(jint)low
                            withInt:(jint)hi {
  ADXSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray_withInt_withInt_(key, value, low, hi);
}

+ (jint)partitionWithIntArray:(IOSIntArray *)array
               withFloatArray:(IOSFloatArray *)value
                      withInt:(jint)low
                      withInt:(jint)hi {
  return ADXSplineSet_Sort_partitionWithIntArray_withFloatArray_withInt_withInt_(array, value, low, hi);
}

+ (void)swapWithIntArray:(IOSIntArray *)array
          withFloatArray:(IOSFloatArray *)value
                 withInt:(jint)a
                 withInt:(jint)b {
  ADXSplineSet_Sort_swapWithIntArray_withFloatArray_withInt_withInt_(array, value, a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doubleQuickSortWithIntArray:withFloatArray:withInt:withInt:);
  methods[2].selector = @selector(partitionWithIntArray:withFloatArray:withInt:withInt:);
  methods[3].selector = @selector(swapWithIntArray:withFloatArray:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doubleQuickSort", "[I[FII", "partition", "swap", "LADXSplineSet;" };
  static const J2ObjcClassInfo _ADXSplineSet_Sort = { "Sort", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0xa, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXSplineSet_Sort;
}

@end

void ADXSplineSet_Sort_init(ADXSplineSet_Sort *self) {
  NSObject_init(self);
}

ADXSplineSet_Sort *new_ADXSplineSet_Sort_init() {
  J2OBJC_NEW_IMPL(ADXSplineSet_Sort, init)
}

ADXSplineSet_Sort *create_ADXSplineSet_Sort_init() {
  J2OBJC_CREATE_IMPL(ADXSplineSet_Sort, init)
}

void ADXSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *key, IOSFloatArray *value, jint low, jint hi) {
  ADXSplineSet_Sort_initialize();
  IOSIntArray *stack = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(key))->size_ + 10];
  jint count = 0;
  *IOSIntArray_GetRef(stack, count++) = hi;
  *IOSIntArray_GetRef(stack, count++) = low;
  while (count > 0) {
    low = IOSIntArray_Get(stack, --count);
    hi = IOSIntArray_Get(stack, --count);
    if (low < hi) {
      jint p = ADXSplineSet_Sort_partitionWithIntArray_withFloatArray_withInt_withInt_(key, value, low, hi);
      *IOSIntArray_GetRef(stack, count++) = p - 1;
      *IOSIntArray_GetRef(stack, count++) = low;
      *IOSIntArray_GetRef(stack, count++) = hi;
      *IOSIntArray_GetRef(stack, count++) = p + 1;
    }
  }
}

jint ADXSplineSet_Sort_partitionWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint low, jint hi) {
  ADXSplineSet_Sort_initialize();
  jint pivot = IOSIntArray_Get(nil_chk(array), hi);
  jint i = low;
  for (jint j = low; j < hi; j++) {
    if (IOSIntArray_Get(array, j) <= pivot) {
      ADXSplineSet_Sort_swapWithIntArray_withFloatArray_withInt_withInt_(array, value, i, j);
      i++;
    }
  }
  ADXSplineSet_Sort_swapWithIntArray_withFloatArray_withInt_withInt_(array, value, i, hi);
  return i;
}

void ADXSplineSet_Sort_swapWithIntArray_withFloatArray_withInt_withInt_(IOSIntArray *array, IOSFloatArray *value, jint a, jint b) {
  ADXSplineSet_Sort_initialize();
  jint tmp = IOSIntArray_Get(nil_chk(array), a);
  *IOSIntArray_GetRef(array, a) = IOSIntArray_Get(array, b);
  *IOSIntArray_GetRef(array, b) = tmp;
  jfloat tmpv = IOSFloatArray_Get(nil_chk(value), a);
  *IOSFloatArray_GetRef(value, a) = IOSFloatArray_Get(value, b);
  *IOSFloatArray_GetRef(value, b) = tmpv;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSplineSet_Sort)

@implementation ADXSplineSet_CustomSet

- (instancetype)initWithNSString:(NSString *)attribute
withADXKeyFrameArray_CustomArray:(ADXKeyFrameArray_CustomArray *)attrList {
  ADXSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(self, attribute, attrList);
  return self;
}

- (void)setupWithInt:(jint)curveType {
  jint size = [((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) size];
  jint dimensionality = [((ADXCLCustomAttribute *) nil_chk([((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) numberOfInterpolatedValues];
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:size];
  JreStrongAssignAndConsume(&mTempValues_, [IOSFloatArray newArrayWithLength:dimensionality]);
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ size, dimensionality }];
  for (jint i = 0; i < size; i++) {
    jint key = [((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) keyAtWithInt:i];
    ADXCLCustomAttribute *ca = JreRetainedLocalValue([((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:i]);
    *IOSDoubleArray_GetRef(time, i) = key * 1E-2;
    [((ADXCLCustomAttribute *) nil_chk(ca)) getValuesToInterpolateWithFloatArray:mTempValues_];
    for (jint k = 0; k < ((IOSFloatArray *) nil_chk(mTempValues_))->size_; k++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), k) = IOSFloatArray_Get(mTempValues_, k);
    }
  }
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(curveType, time, values));
}

- (void)setPointWithInt:(jint)position
              withFloat:(jfloat)value {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"don't call for custom attribute call setPoint(pos, ConstraintAttribute)");
}

- (void)setPointWithInt:(jint)position
withADXCLCustomAttribute:(ADXCLCustomAttribute *)value {
  [((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) appendWithInt:position withADXCLCustomAttribute:value];
}

- (void)setPropertyWithADXWidgetFrame:(ADXWidgetFrame *)view
                            withFloat:(jfloat)t {
  [((ADXCurveFit *) nil_chk(mCurveFit_)) getPosWithDouble:t withFloatArray:mTempValues_];
  [((ADXCLCustomAttribute *) nil_chk([((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) setInterpolatedValueWithId:view withFloatArray:mTempValues_];
}

- (void)dealloc {
  RELEASE_(mAttributeName_);
  RELEASE_(mConstraintAttributeList_);
  RELEASE_(mTempValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADXKeyFrameArray_CustomArray:);
  methods[1].selector = @selector(setupWithInt:);
  methods[2].selector = @selector(setPointWithInt:withFloat:);
  methods[3].selector = @selector(setPointWithInt:withADXCLCustomAttribute:);
  methods[4].selector = @selector(setPropertyWithADXWidgetFrame:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAttributeName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mConstraintAttributeList_", "LADXKeyFrameArray_CustomArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempValues_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADXKeyFrameArray_CustomArray;", "setup", "I", "setPoint", "IF", "ILADXCLCustomAttribute;", "setProperty", "LADXWidgetFrame;F", "LADXSplineSet;" };
  static const J2ObjcClassInfo _ADXSplineSet_CustomSet = { "CustomSet", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 5, 3, 8, -1, -1, -1, -1 };
  return &_ADXSplineSet_CustomSet;
}

@end

void ADXSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(ADXSplineSet_CustomSet *self, NSString *attribute, ADXKeyFrameArray_CustomArray *attrList) {
  ADXSplineSet_init(self);
  JreStrongAssign(&self->mAttributeName_, IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(attribute)) java_split:@","]), 1));
  JreStrongAssign(&self->mConstraintAttributeList_, attrList);
}

ADXSplineSet_CustomSet *new_ADXSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(NSString *attribute, ADXKeyFrameArray_CustomArray *attrList) {
  J2OBJC_NEW_IMPL(ADXSplineSet_CustomSet, initWithNSString_withADXKeyFrameArray_CustomArray_, attribute, attrList)
}

ADXSplineSet_CustomSet *create_ADXSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(NSString *attribute, ADXKeyFrameArray_CustomArray *attrList) {
  J2OBJC_CREATE_IMPL(ADXSplineSet_CustomSet, initWithNSString_withADXKeyFrameArray_CustomArray_, attribute, attrList)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSplineSet_CustomSet)

@implementation ADXSplineSet_CoreSpline

- (instancetype)initWithNSString:(NSString *)str
                        withLong:(jlong)currentTime {
  ADXSplineSet_CoreSpline_initWithNSString_withLong_(self, str, currentTime);
  return self;
}

- (void)setPropertyWithADXTypedValues:(id<ADXTypedValues>)widget
                            withFloat:(jfloat)t {
  jint id_ = [((id<ADXTypedValues>) nil_chk(widget)) getIdWithNSString:type_];
  [widget setValueWithInt:id_ withFloat:[self getWithFloat:t]];
}

- (void)dealloc {
  RELEASE_(type_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withLong:);
  methods[1].selector = @selector(setPropertyWithADXTypedValues:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "type_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "start_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;J", "setProperty", "LADXTypedValues;F", "LADXSplineSet;" };
  static const J2ObjcClassInfo _ADXSplineSet_CoreSpline = { "CoreSpline", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0xa, 2, 2, 3, -1, -1, -1, -1 };
  return &_ADXSplineSet_CoreSpline;
}

@end

void ADXSplineSet_CoreSpline_initWithNSString_withLong_(ADXSplineSet_CoreSpline *self, NSString *str, jlong currentTime) {
  ADXSplineSet_init(self);
  JreStrongAssign(&self->type_, str);
  self->start_ = currentTime;
}

ADXSplineSet_CoreSpline *new_ADXSplineSet_CoreSpline_initWithNSString_withLong_(NSString *str, jlong currentTime) {
  J2OBJC_NEW_IMPL(ADXSplineSet_CoreSpline, initWithNSString_withLong_, str, currentTime)
}

ADXSplineSet_CoreSpline *create_ADXSplineSet_CoreSpline_initWithNSString_withLong_(NSString *str, jlong currentTime) {
  J2OBJC_CREATE_IMPL(ADXSplineSet_CoreSpline, initWithNSString_withLong_, str, currentTime)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSplineSet_CoreSpline)

@implementation ADXSplineSet_CustomSpline

- (instancetype)initWithNSString:(NSString *)attribute
  withADXKeyFrameArray_CustomVar:(ADXKeyFrameArray_CustomVar *)attrList {
  ADXSplineSet_CustomSpline_initWithNSString_withADXKeyFrameArray_CustomVar_(self, attribute, attrList);
  return self;
}

- (void)setupWithInt:(jint)curveType {
  jint size = [((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) size];
  jint dimensionality = [((ADXCustomVariable *) nil_chk([((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) numberOfInterpolatedValues];
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:size];
  JreStrongAssignAndConsume(&mTempValues_, [IOSFloatArray newArrayWithLength:dimensionality]);
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ size, dimensionality }];
  for (jint i = 0; i < size; i++) {
    jint key = [((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) keyAtWithInt:i];
    ADXCustomVariable *ca = JreRetainedLocalValue([((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:i]);
    *IOSDoubleArray_GetRef(time, i) = key * 1E-2;
    [((ADXCustomVariable *) nil_chk(ca)) getValuesToInterpolateWithFloatArray:mTempValues_];
    for (jint k = 0; k < ((IOSFloatArray *) nil_chk(mTempValues_))->size_; k++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), k) = IOSFloatArray_Get(mTempValues_, k);
    }
  }
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(curveType, time, values));
}

- (void)setPointWithInt:(jint)position
              withFloat:(jfloat)value {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"don't call for custom attribute call setPoint(pos, ConstraintAttribute)");
}

- (void)setPropertyWithADXTypedValues:(id<ADXTypedValues>)widget
                            withFloat:(jfloat)t {
  [self setPropertyWithADXMotionWidget:(ADXMotionWidget *) cast_chk(widget, [ADXMotionWidget class]) withFloat:t];
}

- (void)setPointWithInt:(jint)position
  withADXCustomVariable:(ADXCustomVariable *)value {
  [((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) appendWithInt:position withADXCustomVariable:value];
}

- (void)setPropertyWithADXMotionWidget:(ADXMotionWidget *)view
                             withFloat:(jfloat)t {
  [((ADXCurveFit *) nil_chk(mCurveFit_)) getPosWithDouble:t withFloatArray:mTempValues_];
  [((ADXCustomVariable *) nil_chk([((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) setInterpolatedValueWithADXMotionWidget:view withFloatArray:mTempValues_];
}

- (void)dealloc {
  RELEASE_(mAttributeName_);
  RELEASE_(mConstraintAttributeList_);
  RELEASE_(mTempValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADXKeyFrameArray_CustomVar:);
  methods[1].selector = @selector(setupWithInt:);
  methods[2].selector = @selector(setPointWithInt:withFloat:);
  methods[3].selector = @selector(setPropertyWithADXTypedValues:withFloat:);
  methods[4].selector = @selector(setPointWithInt:withADXCustomVariable:);
  methods[5].selector = @selector(setPropertyWithADXMotionWidget:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAttributeName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mConstraintAttributeList_", "LADXKeyFrameArray_CustomVar;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempValues_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADXKeyFrameArray_CustomVar;", "setup", "I", "setPoint", "IF", "setProperty", "LADXTypedValues;F", "ILADXCustomVariable;", "LADXMotionWidget;F", "LADXSplineSet;" };
  static const J2ObjcClassInfo _ADXSplineSet_CustomSpline = { "CustomSpline", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 6, 3, 9, -1, -1, -1, -1 };
  return &_ADXSplineSet_CustomSpline;
}

@end

void ADXSplineSet_CustomSpline_initWithNSString_withADXKeyFrameArray_CustomVar_(ADXSplineSet_CustomSpline *self, NSString *attribute, ADXKeyFrameArray_CustomVar *attrList) {
  ADXSplineSet_init(self);
  JreStrongAssign(&self->mAttributeName_, IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(attribute)) java_split:@","]), 1));
  JreStrongAssign(&self->mConstraintAttributeList_, attrList);
}

ADXSplineSet_CustomSpline *new_ADXSplineSet_CustomSpline_initWithNSString_withADXKeyFrameArray_CustomVar_(NSString *attribute, ADXKeyFrameArray_CustomVar *attrList) {
  J2OBJC_NEW_IMPL(ADXSplineSet_CustomSpline, initWithNSString_withADXKeyFrameArray_CustomVar_, attribute, attrList)
}

ADXSplineSet_CustomSpline *create_ADXSplineSet_CustomSpline_initWithNSString_withADXKeyFrameArray_CustomVar_(NSString *attribute, ADXKeyFrameArray_CustomVar *attrList) {
  J2OBJC_CREATE_IMPL(ADXSplineSet_CustomSpline, initWithNSString_withADXKeyFrameArray_CustomVar_, attribute, attrList)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSplineSet_CustomSpline)
