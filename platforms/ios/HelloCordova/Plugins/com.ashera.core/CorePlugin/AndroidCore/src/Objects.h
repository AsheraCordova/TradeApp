//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Objects.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Objects")
#ifdef RESTRICT_Objects
#define INCLUDE_ALL_Objects 0
#else
#define INCLUDE_ALL_Objects 1
#endif
#undef RESTRICT_Objects

#if !defined (ADObjects_) && (INCLUDE_ALL_Objects || defined(INCLUDE_ADObjects))
#define ADObjects_

@class IOSObjectArray;
@protocol JavaUtilComparator;

/*!
 @brief Defines the same class as the java.util.Objects which is added in Java 7.
 This hack makes it possible to run the Android code which uses Java 7 features
  (API 18 and beyond) to run on Java 6. 
 <p>
  Extracted from API level 19, file:
  platform/libcore/luni/src/main/java/java/util/Objects.java
 */
@interface ADObjects : NSObject

#pragma mark Public

/*!
 @brief Returns 0 if <code>a == b</code>, or <code>c.compare(a, b)</code> otherwise.
 That is, this makes <code>c</code> null-safe.
 */
+ (jint)compareWithId:(id)a
               withId:(id)b
withJavaUtilComparator:(id<JavaUtilComparator>)c;

/*!
 @brief Returns true if both arguments are null,
  the result of <code>Arrays.equals</code> if both arguments are primitive arrays,
  the result of <code>Arrays.deepEquals</code> if both arguments are arrays of reference types,
  and the result of <code>equals</code> otherwise.
 */
+ (jboolean)deepEqualsWithId:(id)a
                      withId:(id)b;

/*!
 @brief Returns true if two possibly-null objects are equal.
 */
+ (jboolean)equalWithId:(id)a
                 withId:(id)b;

/*!
 @brief Null-safe equivalent of <code>a.equals(b)</code>.
 */
+ (jboolean)equalsWithId:(id)a
                  withId:(id)b;

/*!
 @brief Convenience wrapper for <code>Arrays.hashCode</code>, adding varargs.
 This can be used to compute a hash code for an object's fields as follows: 
 <code>Objects.hash(a, b, c)</code>.
 */
+ (jint)hash__WithNSObjectArray:(IOSObjectArray *)values;

/*!
 @brief Returns 0 for null or <code>o.hashCode()</code>.
 */
+ (jint)hashCodeWithId:(id)o;

/*!
 @brief Returns <code>o</code> if non-null, or throws <code>NullPointerException</code>.
 */
+ (id)requireNonNullWithId:(id)o;

/*!
 @brief Returns <code>o</code> if non-null, or throws <code>NullPointerException</code>
  with the given detail message.
 */
+ (id)requireNonNullWithId:(id)o
              withNSString:(NSString *)message;

/*!
 @brief Returns "null" for null or <code>o.toString()</code>.
 */
+ (NSString *)toStringWithId:(id)o;

/*!
 @brief Returns <code>nullString</code> for null or <code>o.toString()</code>.
 */
+ (NSString *)toStringWithId:(id)o
                withNSString:(NSString *)nullString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADObjects)

FOUNDATION_EXPORT jint ADObjects_compareWithId_withId_withJavaUtilComparator_(id a, id b, id<JavaUtilComparator> c);

FOUNDATION_EXPORT jboolean ADObjects_deepEqualsWithId_withId_(id a, id b);

FOUNDATION_EXPORT jboolean ADObjects_equalsWithId_withId_(id a, id b);

FOUNDATION_EXPORT jint ADObjects_hash__WithNSObjectArray_(IOSObjectArray *values);

FOUNDATION_EXPORT jint ADObjects_hashCodeWithId_(id o);

FOUNDATION_EXPORT id ADObjects_requireNonNullWithId_(id o);

FOUNDATION_EXPORT id ADObjects_requireNonNullWithId_withNSString_(id o, NSString *message);

FOUNDATION_EXPORT NSString *ADObjects_toStringWithId_(id o);

FOUNDATION_EXPORT NSString *ADObjects_toStringWithId_withNSString_(id o, NSString *nullString);

FOUNDATION_EXPORT jboolean ADObjects_equalWithId_withId_(id a, id b);

J2OBJC_TYPE_LITERAL_HEADER(ADObjects)

@compatibility_alias RAndroidUtilObjects ADObjects;

#endif

#pragma pop_macro("INCLUDE_ALL_Objects")
