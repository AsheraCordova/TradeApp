//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLKey.java
//

#include "CLContainer.h"
#include "CLElement.h"
#include "CLKey.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"

@class JavaUtilArrayList;


inline JavaUtilArrayList *ADXCLKey_get_sections(void);
inline JavaUtilArrayList *ADXCLKey_set_sections(JavaUtilArrayList *value);
static JavaUtilArrayList *ADXCLKey_sections;
J2OBJC_STATIC_FIELD_OBJ(ADXCLKey, sections, JavaUtilArrayList *)

J2OBJC_INITIALIZED_DEFN(ADXCLKey)

@implementation ADXCLKey

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLKey_initWithCharArray_(self, content);
  return self;
}

+ (ADXCLElement *)allocateWithCharArray:(IOSCharArray *)content {
  return ADXCLKey_allocateWithCharArray_(content);
}

+ (ADXCLElement *)allocateWithNSString:(NSString *)name
                      withADXCLElement:(ADXCLElement *)value {
  return ADXCLKey_allocateWithNSString_withADXCLElement_(name, value);
}

- (NSString *)getName {
  return [self content];
}

- (NSString *)toJSON {
  if ([((JavaUtilArrayList *) nil_chk(mElements_)) size] > 0) {
    return JreStrcat("$$$$", [self getDebugName], [self content], @": ", [((ADXCLElement *) nil_chk([((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:0])) toJSON]);
  }
  return JreStrcat("$$$", [self getDebugName], [self content], @": <> ");
}

- (NSString *)toFormattedJSONWithInt:(jint)indent
                             withInt:(jint)forceIndent {
  JavaLangStringBuilder *json = create_JavaLangStringBuilder_initWithNSString_([self getDebugName]);
  [self addIndentWithJavaLangStringBuilder:json withInt:indent];
  NSString *content = JreRetainedLocalValue([self content]);
  if ([((JavaUtilArrayList *) nil_chk(mElements_)) size] > 0) {
    [json appendWithNSString:content];
    [json appendWithNSString:@": "];
    if ([((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) containsWithId:content]) {
      forceIndent = 3;
    }
    if (forceIndent > 0) {
      [json appendWithNSString:[((ADXCLElement *) nil_chk([((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:0])) toFormattedJSONWithInt:indent withInt:forceIndent - 1]];
    }
    else {
      NSString *val = JreRetainedLocalValue([((ADXCLElement *) nil_chk([((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:0])) toJSON]);
      if ([((NSString *) nil_chk(val)) java_length] + indent < JreLoadStatic(ADXCLElement, MAX_LINE)) {
        [json appendWithNSString:val];
      }
      else {
        [json appendWithNSString:[((ADXCLElement *) nil_chk([((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:0])) toFormattedJSONWithInt:indent withInt:forceIndent - 1]];
      }
    }
    return [json description];
  }
  return JreStrcat("$$", content, @": <> ");
}

- (void)setWithADXCLElement:(ADXCLElement *)value {
  if ([((JavaUtilArrayList *) nil_chk(mElements_)) size] > 0) {
    [((JavaUtilArrayList *) nil_chk(mElements_)) setWithInt:0 withId:value];
  }
  else {
    [((JavaUtilArrayList *) nil_chk(mElements_)) addWithId:value];
  }
}

- (ADXCLElement *)getValue {
  if ([((JavaUtilArrayList *) nil_chk(mElements_)) size] > 0) {
    return [((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:0];
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x9, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(allocateWithCharArray:);
  methods[2].selector = @selector(allocateWithNSString:withADXCLElement:);
  methods[3].selector = @selector(getName);
  methods[4].selector = @selector(toJSON);
  methods[5].selector = @selector(toFormattedJSONWithInt:withInt:);
  methods[6].selector = @selector(setWithADXCLElement:);
  methods[7].selector = @selector(getValue);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sections", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0xa, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "[C", "allocate", "LNSString;LADXCLElement;", "toFormattedJSON", "II", "set", "LADXCLElement;", &ADXCLKey_sections, "Ljava/util/ArrayList<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ADXCLKey = { "CLKey", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x1, 8, 1, -1, -1, -1, -1, -1 };
  return &_ADXCLKey;
}

+ (void)initialize {
  if (self == [ADXCLKey class]) {
    JreStrongAssignAndConsume(&ADXCLKey_sections, new_JavaUtilArrayList_init());
    {
      [ADXCLKey_sections addWithId:@"ConstraintSets"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"Variables"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"Generate"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"Transitions"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"KeyFrames"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"KeyAttributes"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"KeyPositions"];
      [((JavaUtilArrayList *) nil_chk(ADXCLKey_sections)) addWithId:@"KeyCycles"];
    }
    J2OBJC_SET_INITIALIZED(ADXCLKey)
  }
}

@end

void ADXCLKey_initWithCharArray_(ADXCLKey *self, IOSCharArray *content) {
  ADXCLContainer_initWithCharArray_(self, content);
}

ADXCLKey *new_ADXCLKey_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLKey, initWithCharArray_, content)
}

ADXCLKey *create_ADXCLKey_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLKey, initWithCharArray_, content)
}

ADXCLElement *ADXCLKey_allocateWithCharArray_(IOSCharArray *content) {
  ADXCLKey_initialize();
  return create_ADXCLKey_initWithCharArray_(content);
}

ADXCLElement *ADXCLKey_allocateWithNSString_withADXCLElement_(NSString *name, ADXCLElement *value) {
  ADXCLKey_initialize();
  ADXCLKey *key = create_ADXCLKey_initWithCharArray_([((NSString *) nil_chk(name)) java_toCharArray]);
  [key setStartWithLong:0];
  [key setEndWithLong:[name java_length] - 1];
  [key setWithADXCLElement:value];
  return key;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLKey)
