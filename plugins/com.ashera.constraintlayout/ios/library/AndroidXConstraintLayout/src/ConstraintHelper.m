//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\widget\ConstraintHelper.java
//

#include "ConstraintHelper.h"
#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "Context.h"
#include "Helper.h"
#include "HelperWidget.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "R.h"
#include "Resources.h"
#include "SparseArray.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"


@interface ADXConstraintHelper ()

- (void)addRscIDWithInt:(jint)id_;

- (void)addIDWithNSString:(NSString *)idString;

- (jint)findIdWithNSString:(NSString *)referenceId;

- (jint)findIdWithADXConstraintLayout:(ADXConstraintLayout *)container
                         withNSString:(NSString *)idString;

- (IOSIntArray *)convertReferenceStringWithADView:(ADView *)view
                                     withNSString:(NSString *)referenceIdString;

@end

__attribute__((unused)) static void ADXConstraintHelper_addRscIDWithInt_(ADXConstraintHelper *self, jint id_);

__attribute__((unused)) static void ADXConstraintHelper_addIDWithNSString_(ADXConstraintHelper *self, NSString *idString);

__attribute__((unused)) static jint ADXConstraintHelper_findIdWithNSString_(ADXConstraintHelper *self, NSString *referenceId);

__attribute__((unused)) static jint ADXConstraintHelper_findIdWithADXConstraintLayout_withNSString_(ADXConstraintHelper *self, ADXConstraintLayout *container, NSString *idString);

__attribute__((unused)) static IOSIntArray *ADXConstraintHelper_convertReferenceStringWithADView_withNSString_(ADXConstraintHelper *self, ADView *view, NSString *referenceIdString);

@implementation ADXConstraintHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addViewWithADView:(ADView *)view {
  if (view == self) {
    return;
  }
  if ([((ADView *) nil_chk(view)) getId] == -1) {
    ADLog_eWithNSString_withNSString_(@"ConstraintHelper", @"Views added to a ConstraintHelper need to have an id");
    return;
  }
  if ([view getParent] == nil) {
    ADLog_eWithNSString_withNSString_(@"ConstraintHelper", @"Views added to a ConstraintHelper need to have a parent");
    return;
  }
  JreStrongAssign(&mReferenceIds_, nil);
  ADXConstraintHelper_addRscIDWithInt_(self, [view getId]);
  [self requestLayout];
}

- (jint)removeViewWithADView:(ADView *)view {
  jint index = -1;
  jint id_ = [((ADView *) nil_chk(view)) getId];
  if (id_ == -1) {
    return index;
  }
  JreStrongAssign(&mReferenceIds_, nil);
  for (jint i = 0; i < mCount_; i++) {
    if (IOSIntArray_Get(nil_chk(mIds_), i) == id_) {
      index = i;
      for (jint j = i; j < mCount_ - 1; j++) {
        *IOSIntArray_GetRef(mIds_, j) = IOSIntArray_Get(mIds_, j + 1);
      }
      *IOSIntArray_GetRef(mIds_, mCount_ - 1) = 0;
      mCount_--;
      break;
    }
  }
  [self requestLayout];
  return index;
}

- (IOSIntArray *)getReferencedIds {
  return JavaUtilArrays_copyOfWithIntArray_withInt_(mIds_, mCount_);
}

- (void)setReferencedIdsWithIntArray:(IOSIntArray *)ids {
  JreStrongAssign(&mReferenceIds_, nil);
  mCount_ = 0;
  for (jint i = 0; i < ((IOSIntArray *) nil_chk(ids))->size_; i++) {
    ADXConstraintHelper_addRscIDWithInt_(self, IOSIntArray_Get(ids, i));
  }
}

- (void)addRscIDWithInt:(jint)id_ {
  ADXConstraintHelper_addRscIDWithInt_(self, id_);
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mUseViewMeasure_) {
    [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  }
  else {
    [self setMeasuredDimensionWithInt:0 withInt:0];
  }
}

- (void)validateParams {
  if (mHelperWidget_ == nil) {
    return;
  }
  ADViewGroup_LayoutParams *params = JreRetainedLocalValue([self getLayoutParams]);
  if ([params isKindOfClass:[ADXConstraintLayout_LayoutParams class]]) {
    ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) params;
    JreStrongAssign(&((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->widget_, (ADXConstraintWidget *) cast_chk(mHelperWidget_, [ADXConstraintWidget class]));
  }
}

- (void)addIDWithNSString:(NSString *)idString {
  ADXConstraintHelper_addIDWithNSString_(self, idString);
}

- (jint)findIdWithNSString:(NSString *)referenceId {
  return ADXConstraintHelper_findIdWithNSString_(self, referenceId);
}

- (jint)findIdWithADXConstraintLayout:(ADXConstraintLayout *)container
                         withNSString:(NSString *)idString {
  return ADXConstraintHelper_findIdWithADXConstraintLayout_withNSString_(self, container, idString);
}

- (void)setIdsWithNSString:(NSString *)idList {
  JreStrongAssign(&mReferenceIds_, idList);
  if (idList == nil) {
    return;
  }
  jint begin = 0;
  mCount_ = 0;
  while (true) {
    jint end = [idList java_indexOf:',' fromIndex:begin];
    if (end == -1) {
      ADXConstraintHelper_addIDWithNSString_(self, [idList java_substring:begin]);
      break;
    }
    ADXConstraintHelper_addIDWithNSString_(self, [idList java_substring:begin endIndex:end]);
    begin = end + 1;
  }
}

- (void)applyLayoutFeaturesWithADXConstraintLayout:(ADXConstraintLayout *)container {
  jint visibility = [self getVisibility];
  jfloat elevation = 0;
  {
    elevation = [self getElevation];
  }
  for (jint i = 0; i < mCount_; i++) {
    jint id_ = IOSIntArray_Get(nil_chk(mIds_), i);
    ADView *view = JreRetainedLocalValue([((ADXConstraintLayout *) nil_chk(container)) getViewByIdWithInt:id_]);
    if (view != nil) {
      [view setVisibilityWithInt:visibility];
      if (elevation > 0) {
        [view setTranslationZWithFloat:[view getTranslationZ] + elevation];
      }
    }
  }
}

- (void)applyLayoutFeatures {
  id<ADViewParent> parent = JreRetainedLocalValue([self getParent]);
  if (parent != nil && [parent isKindOfClass:[ADXConstraintLayout class]]) {
    [self applyLayoutFeaturesWithADXConstraintLayout:(ADXConstraintLayout *) cast_chk(parent, [ADXConstraintLayout class])];
  }
}

- (void)applyLayoutFeaturesInConstraintSetWithADXConstraintLayout:(ADXConstraintLayout *)container {
}

- (void)updatePreLayoutWithADXConstraintLayout:(ADXConstraintLayout *)container {
  if ([self isInEditMode]) {
    [self setIdsWithNSString:mReferenceIds_];
  }
  if (mHelperWidget_ == nil) {
    return;
  }
  [mHelperWidget_ removeAllIds];
  for (jint i = 0; i < mCount_; i++) {
    jint id_ = IOSIntArray_Get(nil_chk(mIds_), i);
    ADView *view = JreRetainedLocalValue([((ADXConstraintLayout *) nil_chk(container)) getViewByIdWithInt:id_]);
    if (view == nil) {
      NSString *candidate = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mMap_)) getWithId:JavaLangInteger_valueOfWithInt_(id_)]);
      jint foundId = ADXConstraintHelper_findIdWithADXConstraintLayout_withNSString_(self, container, candidate);
      if (foundId != 0) {
        *IOSIntArray_GetRef(nil_chk(mIds_), i) = foundId;
        [((JavaUtilHashMap *) nil_chk(mMap_)) putWithId:JavaLangInteger_valueOfWithInt_(foundId) withId:candidate];
        view = [container getViewByIdWithInt:foundId];
      }
    }
    if (view != nil) {
      [((id<ADXHelper>) nil_chk(mHelperWidget_)) addWithADXConstraintWidget:[container getViewWidgetWithADView:view]];
    }
  }
  [((id<ADXHelper>) nil_chk(mHelperWidget_)) updateConstraintsWithADXConstraintWidgetContainer:((ADXConstraintLayout *) nil_chk(container))->mLayoutWidget_];
}

- (void)updatePreLayoutWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                          withADXHelper:(id<ADXHelper>)helper
                                      withADSparseArray:(ADSparseArray *)map {
  [((id<ADXHelper>) nil_chk(helper)) removeAllIds];
  for (jint i = 0; i < mCount_; i++) {
    jint id_ = IOSIntArray_Get(nil_chk(mIds_), i);
    [helper addWithADXConstraintWidget:[((ADSparseArray *) nil_chk(map)) getWithInt:id_]];
  }
}

- (void)updatePostLayoutWithADXConstraintLayout:(ADXConstraintLayout *)container {
}

- (void)updatePostMeasureWithADXConstraintLayout:(ADXConstraintLayout *)container {
}

- (void)loadParametersWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)constraint
                                  withADXHelperWidget:(ADXHelperWidget *)child
                 withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                    withADSparseArray:(ADSparseArray *)mapIdToWidget {
  if (((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->mReferenceIds_ != nil) {
    [self setReferencedIdsWithIntArray:constraint->layout_->mReferenceIds_];
  }
  else if (constraint->layout_->mReferenceIdString_ != nil && [constraint->layout_->mReferenceIdString_ java_length] > 0) {
    JreStrongAssign(&constraint->layout_->mReferenceIds_, ADXConstraintHelper_convertReferenceStringWithADView_withNSString_(self, self, constraint->layout_->mReferenceIdString_));
  }
  [((ADXHelperWidget *) nil_chk(child)) removeAllIds];
  if (constraint->layout_->mReferenceIds_ != nil) {
    for (jint i = 0; i < ((IOSIntArray *) nil_chk(constraint->layout_->mReferenceIds_))->size_; i++) {
      jint id_ = IOSIntArray_Get(constraint->layout_->mReferenceIds_, i);
      ADXConstraintWidget *widget = JreRetainedLocalValue([((ADSparseArray *) nil_chk(mapIdToWidget)) getWithInt:id_]);
      if (widget != nil) {
        [child addWithADXConstraintWidget:widget];
      }
    }
  }
}

- (IOSIntArray *)convertReferenceStringWithADView:(ADView *)view
                                     withNSString:(NSString *)referenceIdString {
  return ADXConstraintHelper_convertReferenceStringWithADView_withNSString_(self, view, referenceIdString);
}

- (void)resolveRtlWithADXConstraintWidget:(ADXConstraintWidget *)widget
                              withBoolean:(jboolean)isRtl {
}

- (void)setTagWithInt:(jint)key
               withId:(id)tag {
  [super setTagWithInt:key withId:tag];
  if (tag == nil && mReferenceIds_ == nil) {
    ADXConstraintHelper_addRscIDWithInt_(self, key);
  }
}

- (jboolean)containsIdWithInt:(jint)id_ {
  jboolean result = false;
  {
    IOSIntArray *a__ = mIds_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      if (i == id_) {
        result = true;
        break;
      }
    }
  }
  return result;
}

- (jint)indexFromIdWithInt:(jint)id_ {
  jint index = -1;
  {
    IOSIntArray *a__ = mIds_;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint i = *b__++;
      index++;
      if (i == id_) {
        return index;
      }
    }
  }
  return index;
}

- (void)dealloc {
  RELEASE_(mIds_);
  RELEASE_(myContext_);
  RELEASE_(mHelperWidget_);
  RELEASE_(mReferenceIds_);
  RELEASE_(mMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 14, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, 19, -1, -1 },
    { NULL, "V", 0x1, 20, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, 24, -1, -1 },
    { NULL, "[I", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 32, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addViewWithADView:);
  methods[2].selector = @selector(removeViewWithADView:);
  methods[3].selector = @selector(getReferencedIds);
  methods[4].selector = @selector(setReferencedIdsWithIntArray:);
  methods[5].selector = @selector(addRscIDWithInt:);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(validateParams);
  methods[8].selector = @selector(addIDWithNSString:);
  methods[9].selector = @selector(findIdWithNSString:);
  methods[10].selector = @selector(findIdWithADXConstraintLayout:withNSString:);
  methods[11].selector = @selector(setIdsWithNSString:);
  methods[12].selector = @selector(applyLayoutFeaturesWithADXConstraintLayout:);
  methods[13].selector = @selector(applyLayoutFeatures);
  methods[14].selector = @selector(applyLayoutFeaturesInConstraintSetWithADXConstraintLayout:);
  methods[15].selector = @selector(updatePreLayoutWithADXConstraintLayout:);
  methods[16].selector = @selector(updatePreLayoutWithADXConstraintWidgetContainer:withADXHelper:withADSparseArray:);
  methods[17].selector = @selector(updatePostLayoutWithADXConstraintLayout:);
  methods[18].selector = @selector(updatePostMeasureWithADXConstraintLayout:);
  methods[19].selector = @selector(loadParametersWithADXConstraintSet_Constraint:withADXHelperWidget:withADXConstraintLayout_LayoutParams:withADSparseArray:);
  methods[20].selector = @selector(convertReferenceStringWithADView:withNSString:);
  methods[21].selector = @selector(resolveRtlWithADXConstraintWidget:withBoolean:);
  methods[22].selector = @selector(setTagWithInt:withId:);
  methods[23].selector = @selector(containsIdWithInt:);
  methods[24].selector = @selector(indexFromIdWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mIds_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCount_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "myContext_", "LADContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mHelperWidget_", "LADXHelper;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUseViewMeasure_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mReferenceIds_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x4, -1, -1, 33, -1 },
  };
  static const void *ptrTable[] = { "addView", "LADView;", "removeView", "setReferencedIds", "[I", "addRscID", "I", "onMeasure", "II", "addID", "LNSString;", "findId", "LADXConstraintLayout;LNSString;", "setIds", "applyLayoutFeatures", "LADXConstraintLayout;", "applyLayoutFeaturesInConstraintSet", "updatePreLayout", "LADXConstraintWidgetContainer;LADXHelper;LADSparseArray;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidgetContainer;Landroidx/constraintlayout/core/widgets/Helper;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "updatePostLayout", "updatePostMeasure", "loadParameters", "LADXConstraintSet_Constraint;LADXHelperWidget;LADXConstraintLayout_LayoutParams;LADSparseArray;", "(Landroidx/constraintlayout/widget/ConstraintSet$Constraint;Landroidx/constraintlayout/core/widgets/HelperWidget;Landroidx/constraintlayout/widget/ConstraintLayout$LayoutParams;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "convertReferenceString", "LADView;LNSString;", "resolveRtl", "LADXConstraintWidget;Z", "setTag", "ILNSObject;", "containsId", "indexFromId", "Ljava/util/HashMap<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ADXConstraintHelper = { "ConstraintHelper", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x401, 25, 7, -1, -1, -1, -1, -1 };
  return &_ADXConstraintHelper;
}

@end

void ADXConstraintHelper_init(ADXConstraintHelper *self) {
  ADView_init(self);
  JreStrongAssignAndConsume(&self->mIds_, [IOSIntArray newArrayWithLength:32]);
  self->mUseViewMeasure_ = false;
  JreStrongAssignAndConsume(&self->mMap_, new_JavaUtilHashMap_init());
}

void ADXConstraintHelper_addRscIDWithInt_(ADXConstraintHelper *self, jint id_) {
  if (id_ == [self getId]) {
    return;
  }
  if (self->mCount_ + 1 > ((IOSIntArray *) nil_chk(self->mIds_))->size_) {
    JreStrongAssign(&self->mIds_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->mIds_, self->mIds_->size_ * 2));
  }
  *IOSIntArray_GetRef(nil_chk(self->mIds_), self->mCount_) = id_;
  self->mCount_++;
}

void ADXConstraintHelper_addIDWithNSString_(ADXConstraintHelper *self, NSString *idString) {
  if (idString == nil || [idString java_length] == 0) {
    return;
  }
  if (self->myContext_ == nil) {
    return;
  }
  idString = [idString java_trim];
  ADXConstraintLayout *parent = nil;
  if ([[self getParent] isKindOfClass:[ADXConstraintLayout class]]) {
    parent = (ADXConstraintLayout *) cast_chk([self getParent], [ADXConstraintLayout class]);
  }
  jint rscId = ADXConstraintHelper_findIdWithNSString_(self, idString);
  if (rscId != 0) {
    [((JavaUtilHashMap *) nil_chk(self->mMap_)) putWithId:JavaLangInteger_valueOfWithInt_(rscId) withId:idString];
    ADXConstraintHelper_addRscIDWithInt_(self, rscId);
  }
  else {
    ADLog_wWithNSString_withNSString_(@"ConstraintHelper", JreStrcat("$$C", @"Could not find id of \"", idString, '"'));
  }
}

jint ADXConstraintHelper_findIdWithNSString_(ADXConstraintHelper *self, NSString *referenceId) {
  ADXConstraintLayout *parent = nil;
  if ([[self getParent] isKindOfClass:[ADXConstraintLayout class]]) {
    parent = (ADXConstraintLayout *) cast_chk([self getParent], [ADXConstraintLayout class]);
  }
  jint rscId = 0;
  if ([self isInEditMode] && parent != nil) {
    id value = JreRetainedLocalValue([parent getDesignInformationWithInt:0 withId:referenceId]);
    if ([value isKindOfClass:[JavaLangInteger class]]) {
      rscId = [((JavaLangInteger *) nil_chk((JavaLangInteger *) value)) intValue];
    }
  }
  if (rscId == 0 && parent != nil) {
    rscId = ADXConstraintHelper_findIdWithADXConstraintLayout_withNSString_(self, parent, referenceId);
  }
  if (rscId == 0) {
    @try {
      IOSClass *res = ADR_id_class_();
    }
    @catch (JavaLangException *e) {
    }
  }
  if (rscId == 0) {
    rscId = [((ADResources *) nil_chk([((ADContext *) nil_chk(self->myContext_)) getResources])) getIdentifierWithNSString:referenceId withNSString:@"id" withNSString:[((ADContext *) nil_chk(self->myContext_)) getPackageName]];
  }
  return rscId;
}

jint ADXConstraintHelper_findIdWithADXConstraintLayout_withNSString_(ADXConstraintHelper *self, ADXConstraintLayout *container, NSString *idString) {
  if (idString == nil || container == nil) {
    return 0;
  }
  ADResources *resources = JreRetainedLocalValue([((ADContext *) nil_chk(self->myContext_)) getResources]);
  if (resources == nil) {
    return 0;
  }
  jint count = [container getChildCount];
  for (jint j = 0; j < count; j++) {
    ADView *child = JreRetainedLocalValue([container getChildAtWithInt:j]);
    if ([((ADView *) nil_chk(child)) getId] != -1) {
      NSString *res = nil;
      @try {
        res = [resources getResourceEntryNameWithInt:[child getId]];
      }
      @catch (ADResources_NotFoundException *e) {
      }
      if ([idString isEqual:res]) {
        return [child getId];
      }
    }
  }
  return 0;
}

IOSIntArray *ADXConstraintHelper_convertReferenceStringWithADView_withNSString_(ADXConstraintHelper *self, ADView *view, NSString *referenceIdString) {
  IOSObjectArray *split = [((NSString *) nil_chk(referenceIdString)) java_split:@","];
  ADContext *context = JreRetainedLocalValue([((ADView *) nil_chk(view)) getContext]);
  IOSIntArray *rscIds = [IOSIntArray arrayWithLength:((IOSObjectArray *) nil_chk(split))->size_];
  jint count = 0;
  for (jint i = 0; i < split->size_; i++) {
    NSString *idString = IOSObjectArray_Get(split, i);
    idString = [((NSString *) nil_chk(idString)) java_trim];
    jint id_ = ADXConstraintHelper_findIdWithNSString_(self, idString);
    if (id_ != 0) {
      *IOSIntArray_GetRef(rscIds, count++) = id_;
    }
  }
  if (count != split->size_) {
    rscIds = JavaUtilArrays_copyOfWithIntArray_withInt_(rscIds, count);
  }
  return rscIds;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintHelper)
