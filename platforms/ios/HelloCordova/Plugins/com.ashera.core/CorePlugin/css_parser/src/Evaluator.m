//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\css_parser\src\com\ashera\css\Evaluator.java
//

#include "CssResult.h"
#include "CssTree.h"
#include "Evaluator.h"
#include "EvaluatorConstants.h"
#include "EvaluatorTokenManager.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "JavaCharStream.h"
#include "ParseException.h"
#include "Token.h"
#include "java/io/InputStream.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringReader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@protocol JavaUtilList;


@interface CSSEvaluator () {
 @public
  jint jj_gen_;
  IOSIntArray *jj_la1_;
  id<JavaUtilList> jj_expentries_;
  IOSIntArray *jj_expentry_;
  jint jj_kind_;
}

+ (void)jj_la1_init_0;

- (CSSToken *)jj_consume_tokenWithInt:(jint)kind;

@end

J2OBJC_FIELD_SETTER(CSSEvaluator, jj_la1_, IOSIntArray *)
J2OBJC_FIELD_SETTER(CSSEvaluator, jj_expentries_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(CSSEvaluator, jj_expentry_, IOSIntArray *)

inline IOSIntArray *CSSEvaluator_get_jj_la1_0(void);
inline IOSIntArray *CSSEvaluator_set_jj_la1_0(IOSIntArray *value);
static IOSIntArray *CSSEvaluator_jj_la1_0;
J2OBJC_STATIC_FIELD_OBJ(CSSEvaluator, jj_la1_0, IOSIntArray *)

__attribute__((unused)) static void CSSEvaluator_SWithCSSCssTree_(CSSEvaluator *self, CSSCssTree *v);

__attribute__((unused)) static void CSSEvaluator_connectionWithCSSCssTree_withNSString_withNSString_(CSSEvaluator *self, CSSCssTree *v, NSString *gaurdKeys, NSString *gaurdValues);

__attribute__((unused)) static void CSSEvaluator_jj_la1_init_0(void);

__attribute__((unused)) static CSSToken *CSSEvaluator_jj_consume_tokenWithInt_(CSSEvaluator *self, jint kind);

@interface CSSEvaluator_1 : NSObject < CSSCssResult >

- (instancetype)init;

- (void)putWithNSString:(NSString *)key
withCSSCssTree_Attribute:(CSSCssTree_Attribute *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(CSSEvaluator_1)

__attribute__((unused)) static void CSSEvaluator_1_init(CSSEvaluator_1 *self);

__attribute__((unused)) static CSSEvaluator_1 *new_CSSEvaluator_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static CSSEvaluator_1 *create_CSSEvaluator_1_init(void);

J2OBJC_INITIALIZED_DEFN(CSSEvaluator)

@implementation CSSEvaluator

+ (void)mainWithNSStringArray:(IOSObjectArray *)args {
  CSSEvaluator_mainWithNSStringArray_(args);
}

- (void)SWithCSSCssTree:(CSSCssTree *)v {
  CSSEvaluator_SWithCSSCssTree_(self, v);
}

- (void)connectionWithCSSCssTree:(CSSCssTree *)v
                    withNSString:(NSString *)gaurdKeys
                    withNSString:(NSString *)gaurdValues {
  CSSEvaluator_connectionWithCSSCssTree_withNSString_withNSString_(self, v, gaurdKeys, gaurdValues);
}

+ (void)jj_la1_init_0 {
  CSSEvaluator_jj_la1_init_0();
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream {
  CSSEvaluator_initWithJavaIoInputStream_(self, stream);
  return self;
}

- (instancetype)initWithJavaIoInputStream:(JavaIoInputStream *)stream
                             withNSString:(NSString *)encoding {
  CSSEvaluator_initWithJavaIoInputStream_withNSString_(self, stream, encoding);
  return self;
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream {
  [self ReInitWithJavaIoInputStream:stream withNSString:nil];
}

- (void)ReInitWithJavaIoInputStream:(JavaIoInputStream *)stream
                       withNSString:(NSString *)encoding {
  @try {
    [((CSSJavaCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoInputStream:stream withNSString:encoding withInt:1 withInt:1];
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) ReInitWithCSSJavaCharStream:jj_input_stream_];
  JreStrongAssignAndConsume(&token_, new_CSSToken_initPackagePrivate());
  JreStrongAssign(&token_->next_, JreStrongAssign(&jj_nt_, [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_gen_ = 0;
  for (jint i = 0; i < 7; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
}

- (instancetype)initWithJavaIoReader:(JavaIoReader *)stream {
  CSSEvaluator_initWithJavaIoReader_(self, stream);
  return self;
}

- (void)ReInitWithJavaIoReader:(JavaIoReader *)stream {
  [((CSSJavaCharStream *) nil_chk(jj_input_stream_)) ReInitWithJavaIoReader:stream withInt:1 withInt:1];
  [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) ReInitWithCSSJavaCharStream:jj_input_stream_];
  JreStrongAssignAndConsume(&token_, new_CSSToken_initPackagePrivate());
  JreStrongAssign(&token_->next_, JreStrongAssign(&jj_nt_, [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_gen_ = 0;
  for (jint i = 0; i < 7; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
}

- (instancetype)initWithCSSEvaluatorTokenManager:(CSSEvaluatorTokenManager *)tm {
  CSSEvaluator_initWithCSSEvaluatorTokenManager_(self, tm);
  return self;
}

- (void)ReInitWithCSSEvaluatorTokenManager:(CSSEvaluatorTokenManager *)tm {
  JreStrongAssign(&token_source_, tm);
  JreStrongAssignAndConsume(&token_, new_CSSToken_initPackagePrivate());
  JreStrongAssign(&token_->next_, JreStrongAssign(&jj_nt_, [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_gen_ = 0;
  for (jint i = 0; i < 7; i++) *IOSIntArray_GetRef(nil_chk(jj_la1_), i) = -1;
}

- (CSSToken *)jj_consume_tokenWithInt:(jint)kind {
  return CSSEvaluator_jj_consume_tokenWithInt_(self, kind);
}

- (CSSToken *)getNextToken {
  if (((CSSToken *) (JreStrongAssign(&token_, jj_nt_)))->next_ != nil) JreStrongAssign(&jj_nt_, ((CSSToken *) nil_chk(jj_nt_))->next_);
  else JreStrongAssign(&jj_nt_, JreStrongAssign(&((CSSToken *) nil_chk(jj_nt_))->next_, [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) getNextToken]));
  jj_gen_++;
  return token_;
}

- (CSSToken *)getTokenWithInt:(jint)index {
  CSSToken *t = JreRetainedLocalValue(token_);
  for (jint i = 0; i < index; i++) {
    if (((CSSToken *) nil_chk(t))->next_ != nil) t = t->next_;
    else t = JreStrongAssign(&t->next_, [((CSSEvaluatorTokenManager *) nil_chk(token_source_)) getNextToken]);
  }
  return t;
}

- (CSSParseException *)generateParseException {
  [((id<JavaUtilList>) nil_chk(jj_expentries_)) clear];
  IOSBooleanArray *la1tokens = [IOSBooleanArray arrayWithLength:19];
  if (jj_kind_ >= 0) {
    *IOSBooleanArray_GetRef(la1tokens, jj_kind_) = true;
    jj_kind_ = -1;
  }
  for (jint i = 0; i < 7; i++) {
    if (IOSIntArray_Get(nil_chk(jj_la1_), i) == jj_gen_) {
      for (jint j = 0; j < 32; j++) {
        if ((IOSIntArray_Get(nil_chk(CSSEvaluator_jj_la1_0), i) & (JreLShift32(1, j))) != 0) {
          *IOSBooleanArray_GetRef(la1tokens, j) = true;
        }
      }
    }
  }
  for (jint i = 0; i < 19; i++) {
    if (IOSBooleanArray_Get(la1tokens, i)) {
      JreStrongAssignAndConsume(&jj_expentry_, [IOSIntArray newArrayWithLength:1]);
      *IOSIntArray_GetRef(jj_expentry_, 0) = i;
      [((id<JavaUtilList>) nil_chk(jj_expentries_)) addWithId:jj_expentry_];
    }
  }
  IOSObjectArray *exptokseq = [IOSObjectArray arrayWithLength:[((id<JavaUtilList>) nil_chk(jj_expentries_)) size] type:IOSClass_intArray(1)];
  for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(jj_expentries_)) size]; i++) {
    IOSObjectArray_Set(exptokseq, i, [((id<JavaUtilList>) nil_chk(jj_expentries_)) getWithInt:i]);
  }
  return create_CSSParseException_initWithCSSToken_withIntArray2_withNSStringArray_(token_, exptokseq, JreLoadStatic(CSSEvaluatorConstants, tokenImage));
}

- (void)enable_tracing {
}

- (void)disable_tracing {
}

- (void)dealloc {
  RELEASE_(token_source_);
  RELEASE_(jj_input_stream_);
  RELEASE_(token_);
  RELEASE_(jj_nt_);
  RELEASE_(jj_la1_);
  RELEASE_(jj_expentries_);
  RELEASE_(jj_expentry_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x9, 0, 1, 2, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0x11, 6, 7, 5, -1, -1, -1 },
    { NULL, "V", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 8, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 12, -1, -1, -1, -1 },
    { NULL, "LCSSToken;", 0x2, 13, 14, 5, -1, -1, -1 },
    { NULL, "LCSSToken;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LCSSToken;", 0x11, 15, 14, -1, -1, -1, -1 },
    { NULL, "LCSSParseException;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(mainWithNSStringArray:);
  methods[1].selector = @selector(SWithCSSCssTree:);
  methods[2].selector = @selector(connectionWithCSSCssTree:withNSString:withNSString:);
  methods[3].selector = @selector(jj_la1_init_0);
  methods[4].selector = @selector(initWithJavaIoInputStream:);
  methods[5].selector = @selector(initWithJavaIoInputStream:withNSString:);
  methods[6].selector = @selector(ReInitWithJavaIoInputStream:);
  methods[7].selector = @selector(ReInitWithJavaIoInputStream:withNSString:);
  methods[8].selector = @selector(initWithJavaIoReader:);
  methods[9].selector = @selector(ReInitWithJavaIoReader:);
  methods[10].selector = @selector(initWithCSSEvaluatorTokenManager:);
  methods[11].selector = @selector(ReInitWithCSSEvaluatorTokenManager:);
  methods[12].selector = @selector(jj_consume_tokenWithInt:);
  methods[13].selector = @selector(getNextToken);
  methods[14].selector = @selector(getTokenWithInt:);
  methods[15].selector = @selector(generateParseException);
  methods[16].selector = @selector(enable_tracing);
  methods[17].selector = @selector(disable_tracing);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "token_source_", "LCSSEvaluatorTokenManager;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "jj_input_stream_", "LCSSJavaCharStream;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "token_", "LCSSToken;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "jj_nt_", "LCSSToken;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "jj_gen_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_la1_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "jj_la1_0", "[I", .constantValue.asLong = 0, 0xa, -1, 16, -1, -1 },
    { "jj_expentries_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 17, -1 },
    { "jj_expentry_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "jj_kind_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "main", "[LNSString;", "LJavaLangException;", "S", "LCSSCssTree;", "LCSSParseException;", "connection", "LCSSCssTree;LNSString;LNSString;", "LJavaIoInputStream;", "LJavaIoInputStream;LNSString;", "ReInit", "LJavaIoReader;", "LCSSEvaluatorTokenManager;", "jj_consume_token", "I", "getToken", &CSSEvaluator_jj_la1_0, "Ljava/util/List<[I>;" };
  static const J2ObjcClassInfo _CSSEvaluator = { "Evaluator", "com.ashera.css", ptrTable, methods, fields, 7, 0x1, 18, 10, -1, -1, -1, -1, -1 };
  return &_CSSEvaluator;
}

+ (void)initialize {
  if (self == [CSSEvaluator class]) {
    {
      CSSEvaluator_jj_la1_init_0();
    }
    J2OBJC_SET_INITIALIZED(CSSEvaluator)
  }
}

@end

void CSSEvaluator_mainWithNSStringArray_(IOSObjectArray *args) {
  CSSEvaluator_initialize();
  CSSCssTree *cssTree = create_CSSCssTree_init();
  CSSEvaluator_SWithCSSCssTree_(create_CSSEvaluator_initWithJavaIoReader_(create_JavaIoStringReader_initWithNSString_(@"@font-face {url: a22; font-weight: normal; } @font-face {url: 222; font-weight: normal; }")), cssTree);
  [cssTree getCssWithNSString:@"div" withNSString:@"test test1" withNSString:@"test2" withCSSCssResult:create_CSSEvaluator_1_init()];
}

void CSSEvaluator_SWithCSSCssTree_(CSSEvaluator *self, CSSCssTree *v) {
  NSString *value;
  while (true) {
    switch (((CSSToken *) nil_chk(self->jj_nt_))->kind_) {
      case CSSEvaluatorConstants_MEDIA:
      case CSSEvaluatorConstants_CSS_VAR:
      {
        
        ;
        break;
      }
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 0) = self->jj_gen_;
      goto break_label_1;
    }
    switch (self->jj_nt_->kind_) {
      case CSSEvaluatorConstants_MEDIA:
      {
        CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_MEDIA);
        NSString *gaurdValues = @"";
        NSString *gaurdKeys = @"";
        while (true) {
          switch (((CSSToken *) nil_chk(self->jj_nt_))->kind_) {
            case 17:
            {
              
              ;
              break;
            }
            default:
            *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 1) = self->jj_gen_;
            goto break_label_2;
          }
          CSSEvaluator_jj_consume_tokenWithInt_(self, 17);
          CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CSS_VAR);
          gaurdKeys = JreStrcat("$C$", gaurdKeys, ',', ((CSSToken *) nil_chk(self->token_))->image_);
          CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_COLON);
          CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CSS_VAR);
          gaurdValues = JreStrcat("$C$", gaurdValues, ',', ((CSSToken *) nil_chk(self->token_))->image_);
          CSSEvaluator_jj_consume_tokenWithInt_(self, 18);
          switch (((CSSToken *) nil_chk(self->jj_nt_))->kind_) {
            case CSSEvaluatorConstants_AND_TOKEN:
            {
              CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_AND_TOKEN);
              break;
            }
            default:
            *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 2) = self->jj_gen_;
            ;
          }
        }
        break_label_2: ;
        CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_OPEN_BRACKET);
        while (true) {
          switch (((CSSToken *) nil_chk(self->jj_nt_))->kind_) {
            case CSSEvaluatorConstants_CSS_VAR:
            {
              
              ;
              break;
            }
            default:
            *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 3) = self->jj_gen_;
            goto break_label_3;
          }
          CSSEvaluator_connectionWithCSSCssTree_withNSString_withNSString_(self, v, gaurdKeys, gaurdValues);
        }
        break_label_3: ;
        CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CLOSE_BRACKET);
        break;
      }
      case CSSEvaluatorConstants_CSS_VAR:
      {
        CSSEvaluator_connectionWithCSSCssTree_withNSString_withNSString_(self, v, @"default", @"default");
        break;
      }
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 4) = self->jj_gen_;
      CSSEvaluator_jj_consume_tokenWithInt_(self, -1);
      @throw create_CSSParseException_init();
    }
  }
  break_label_1: ;
  CSSEvaluator_jj_consume_tokenWithInt_(self, 0);
}

void CSSEvaluator_connectionWithCSSCssTree_withNSString_withNSString_(CSSEvaluator *self, CSSCssTree *v, NSString *gaurdKeys, NSString *gaurdValues) {
  CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CSS_VAR);
  NSString *attributeName = JreRetainedLocalValue(((CSSToken *) nil_chk(self->token_))->image_);
  CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_OPEN_BRACKET);
  while (true) {
    switch (((CSSToken *) nil_chk(self->jj_nt_))->kind_) {
      case CSSEvaluatorConstants_CSS_VAR:
      {
        
        ;
        break;
      }
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 5) = self->jj_gen_;
      goto break_label_4;
    }
    CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CSS_VAR);
    NSString *key = JreRetainedLocalValue(((CSSToken *) nil_chk(self->token_))->image_);
    CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_COLON);
    switch (((CSSToken *) nil_chk(self->jj_nt_))->kind_) {
      case CSSEvaluatorConstants_CSS_VAR_WHITE_SPACE:
      {
        CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CSS_VAR_WHITE_SPACE);
        break;
      }
      case CSSEvaluatorConstants_CSS_VAR:
      {
        CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CSS_VAR);
        break;
      }
      default:
      *IOSIntArray_GetRef(nil_chk(self->jj_la1_), 6) = self->jj_gen_;
      CSSEvaluator_jj_consume_tokenWithInt_(self, -1);
      @throw create_CSSParseException_init();
    }
    [((CSSCssTree *) nil_chk(v)) setAttributeWithNSString:gaurdKeys withNSString:gaurdValues withNSString:attributeName withNSString:key withNSString:((CSSToken *) nil_chk(self->token_))->image_];
    CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_SEMI_COLON);
  }
  break_label_4: ;
  CSSEvaluator_jj_consume_tokenWithInt_(self, CSSEvaluatorConstants_CLOSE_BRACKET);
  [((CSSCssTree *) nil_chk(v)) end];
}

void CSSEvaluator_jj_la1_init_0() {
  CSSEvaluator_initialize();
  JreStrongAssignAndConsume(&CSSEvaluator_jj_la1_0, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x820, (jint) 0x20000, (jint) 0x40, (jint) 0x800, (jint) 0x820, (jint) 0x800, (jint) 0x10800 } count:7]);
}

void CSSEvaluator_initWithJavaIoInputStream_(CSSEvaluator *self, JavaIoInputStream *stream) {
  CSSEvaluator_initWithJavaIoInputStream_withNSString_(self, stream, nil);
}

CSSEvaluator *new_CSSEvaluator_initWithJavaIoInputStream_(JavaIoInputStream *stream) {
  J2OBJC_NEW_IMPL(CSSEvaluator, initWithJavaIoInputStream_, stream)
}

CSSEvaluator *create_CSSEvaluator_initWithJavaIoInputStream_(JavaIoInputStream *stream) {
  J2OBJC_CREATE_IMPL(CSSEvaluator, initWithJavaIoInputStream_, stream)
}

void CSSEvaluator_initWithJavaIoInputStream_withNSString_(CSSEvaluator *self, JavaIoInputStream *stream, NSString *encoding) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->jj_la1_, [IOSIntArray newArrayWithLength:7]);
  JreStrongAssignAndConsume(&self->jj_expentries_, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  @try {
    JreStrongAssignAndConsume(&self->jj_input_stream_, new_CSSJavaCharStream_initPackagePrivateWithJavaIoInputStream_withNSString_withInt_withInt_(stream, encoding, 1, 1));
  }
  @catch (JavaIoUnsupportedEncodingException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
  JreStrongAssignAndConsume(&self->token_source_, new_CSSEvaluatorTokenManager_initPackagePrivateWithCSSJavaCharStream_(self->jj_input_stream_));
  JreStrongAssignAndConsume(&self->token_, new_CSSToken_initPackagePrivate());
  JreStrongAssign(&self->token_->next_, JreStrongAssign(&self->jj_nt_, [((CSSEvaluatorTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  self->jj_gen_ = 0;
  for (jint i = 0; i < 7; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
}

CSSEvaluator *new_CSSEvaluator_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding) {
  J2OBJC_NEW_IMPL(CSSEvaluator, initWithJavaIoInputStream_withNSString_, stream, encoding)
}

CSSEvaluator *create_CSSEvaluator_initWithJavaIoInputStream_withNSString_(JavaIoInputStream *stream, NSString *encoding) {
  J2OBJC_CREATE_IMPL(CSSEvaluator, initWithJavaIoInputStream_withNSString_, stream, encoding)
}

void CSSEvaluator_initWithJavaIoReader_(CSSEvaluator *self, JavaIoReader *stream) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->jj_la1_, [IOSIntArray newArrayWithLength:7]);
  JreStrongAssignAndConsume(&self->jj_expentries_, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  JreStrongAssignAndConsume(&self->jj_input_stream_, new_CSSJavaCharStream_initPackagePrivateWithJavaIoReader_withInt_withInt_(stream, 1, 1));
  JreStrongAssignAndConsume(&self->token_source_, new_CSSEvaluatorTokenManager_initPackagePrivateWithCSSJavaCharStream_(self->jj_input_stream_));
  JreStrongAssignAndConsume(&self->token_, new_CSSToken_initPackagePrivate());
  JreStrongAssign(&self->token_->next_, JreStrongAssign(&self->jj_nt_, [((CSSEvaluatorTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  self->jj_gen_ = 0;
  for (jint i = 0; i < 7; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
}

CSSEvaluator *new_CSSEvaluator_initWithJavaIoReader_(JavaIoReader *stream) {
  J2OBJC_NEW_IMPL(CSSEvaluator, initWithJavaIoReader_, stream)
}

CSSEvaluator *create_CSSEvaluator_initWithJavaIoReader_(JavaIoReader *stream) {
  J2OBJC_CREATE_IMPL(CSSEvaluator, initWithJavaIoReader_, stream)
}

void CSSEvaluator_initWithCSSEvaluatorTokenManager_(CSSEvaluator *self, CSSEvaluatorTokenManager *tm) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->jj_la1_, [IOSIntArray newArrayWithLength:7]);
  JreStrongAssignAndConsume(&self->jj_expentries_, new_JavaUtilArrayList_init());
  self->jj_kind_ = -1;
  JreStrongAssign(&self->token_source_, tm);
  JreStrongAssignAndConsume(&self->token_, new_CSSToken_initPackagePrivate());
  JreStrongAssign(&self->token_->next_, JreStrongAssign(&self->jj_nt_, [((CSSEvaluatorTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  self->jj_gen_ = 0;
  for (jint i = 0; i < 7; i++) *IOSIntArray_GetRef(self->jj_la1_, i) = -1;
}

CSSEvaluator *new_CSSEvaluator_initWithCSSEvaluatorTokenManager_(CSSEvaluatorTokenManager *tm) {
  J2OBJC_NEW_IMPL(CSSEvaluator, initWithCSSEvaluatorTokenManager_, tm)
}

CSSEvaluator *create_CSSEvaluator_initWithCSSEvaluatorTokenManager_(CSSEvaluatorTokenManager *tm) {
  J2OBJC_CREATE_IMPL(CSSEvaluator, initWithCSSEvaluatorTokenManager_, tm)
}

CSSToken *CSSEvaluator_jj_consume_tokenWithInt_(CSSEvaluator *self, jint kind) {
  CSSToken *oldToken = JreRetainedLocalValue(self->token_);
  if (((CSSToken *) (JreStrongAssign(&self->token_, self->jj_nt_)))->next_ != nil) JreStrongAssign(&self->jj_nt_, ((CSSToken *) nil_chk(self->jj_nt_))->next_);
  else JreStrongAssign(&self->jj_nt_, JreStrongAssign(&((CSSToken *) nil_chk(self->jj_nt_))->next_, [((CSSEvaluatorTokenManager *) nil_chk(self->token_source_)) getNextToken]));
  if (((CSSToken *) nil_chk(self->token_))->kind_ == kind) {
    self->jj_gen_++;
    return self->token_;
  }
  JreStrongAssign(&self->jj_nt_, self->token_);
  JreStrongAssign(&self->token_, oldToken);
  self->jj_kind_ = kind;
  @throw nil_chk([self generateParseException]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CSSEvaluator)

@implementation CSSEvaluator_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CSSEvaluator_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)putWithNSString:(NSString *)key
withCSSCssTree_Attribute:(CSSCssTree_Attribute *)value {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"key1", key, ((CSSCssTree_Attribute *) nil_chk(value))->value_)];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(putWithNSString:withCSSCssTree_Attribute:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "put", "LNSString;LCSSCssTree_Attribute;", "LCSSEvaluator;", "mainWithNSStringArray:" };
  static const J2ObjcClassInfo _CSSEvaluator_1 = { "", "com.ashera.css", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, -1, -1 };
  return &_CSSEvaluator_1;
}

@end

void CSSEvaluator_1_init(CSSEvaluator_1 *self) {
  NSObject_init(self);
}

CSSEvaluator_1 *new_CSSEvaluator_1_init() {
  J2OBJC_NEW_IMPL(CSSEvaluator_1, init)
}

CSSEvaluator_1 *create_CSSEvaluator_1_init() {
  J2OBJC_CREATE_IMPL(CSSEvaluator_1, init)
}
