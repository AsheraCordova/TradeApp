//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCSSBorderPlugin\src\main\java\com\ashera\layout\decorator\BorderDecorator.java
//

#include "Border.h"
#include "BorderDecorator.h"
#include "Color.h"
#include "ColorStateList.h"
#include "HasWidgets.h"
#include "ICompositeDecorator.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

#include <UIKit/UIKit.h>
#include "CGRectWrapper.h"
#define degreesToRadians(x) ((x) * M_PI / 180.0)

@protocol JavaUtilList;


@interface ASBorderDecorator () {
 @public
  ASBorder *borderTop_;
  ASBorder *borderLeft_;
  ASBorder *borderRight_;
  ASBorder *borderBottom_;
  __unsafe_unretained id<ASIWidget> widget_;
  jfloat borderTopLeftRadius_;
  jfloat borderTopRightRadius_;
  jfloat borderBottomRightRadius_;
  jfloat borderBottomLeftRadius_;
  __unsafe_unretained id view_;
  jboolean isWrappedWidget_;
}

- (void)initBorderTop OBJC_METHOD_FAMILY_NONE;

- (void)initBorderLeft OBJC_METHOD_FAMILY_NONE;

- (void)initBorderRight OBJC_METHOD_FAMILY_NONE;

- (void)initBorderBottom OBJC_METHOD_FAMILY_NONE;

- (void)createBorderColorLeftInternalWithId:(id)color;

- (void)createBorderColorRightInternalWithId:(id)color;

- (void)createBorderWidthRightInternalWithInt:(jint)borderWith;

- (void)createBorderWidthLeftInternalWithInt:(jint)borderWith;

- (void)createBorderStyleLeftInternalWithNSString:(NSString *)style;

- (void)createBorderDashSpacingLeftInternalWithInt:(jint)dashSpacing;

- (void)createBorderDashWidthLeftInternalWithInt:(jint)dashWidth;

- (void)createBorderStyleRightInternalWithNSString:(NSString *)style;

- (void)createBorderDashSpacingRightInternalWithInt:(jint)dashSpacing;

- (void)createBorderDashWidthRightInternalWithInt:(jint)dashWidth;

- (void)createBorderRadiusTopLeftInternalWithFloat:(jfloat)radius;

- (void)createBorderRadiusTopRightInternalWithFloat:(jfloat)radius;

- (void)createBorderRadiusBottomLeftInternalWithFloat:(jfloat)radius;

- (void)createBorderRadiusBottomRightInternalWithFloat:(jfloat)radius;

- (void)createArcWithFloat:(jfloat)x1
                 withFloat:(jfloat)y1
                 withFloat:(jfloat)x2
                 withFloat:(jfloat)y2
              withASBorder:(ASBorder *)border
                    withId:(id)path
              withNSString:(NSString *)where;

- (void)createArcWithFloat:(jfloat)x1
                 withFloat:(jfloat)y1
                 withFloat:(jfloat)x2
                 withFloat:(jfloat)y2
              withASBorder:(ASBorder *)border
                    withId:(id)path
              withNSString:(NSString *)where
               withBoolean:(jboolean)partial;

- (jboolean)hasRadiusWithASBorder:(ASBorder *)border;

- (jboolean)isBorderNotPresent;

- (void)createBorderBottomWithId:(id)canvas
                          withId:(id)path
                          withId:(id)paint
                         withInt:(jint)width
                         withInt:(jint)height
                         withInt:(jint)topOffset;

- (void)createBorderRightWithId:(id)canvas
                         withId:(id)path
                         withId:(id)paint
                        withInt:(jint)width
                        withInt:(jint)height
                        withInt:(jint)topOffset;

- (void)createBorderLeftWithId:(id)canvas
                        withId:(id)path
                        withId:(id)paint
                       withInt:(jint)width
                       withInt:(jint)height
                       withInt:(jint)topOffset;

- (void)createBorderTopWithId:(id)canvas
                       withId:(id)path
                       withId:(id)paint
                      withInt:(jint)width
                      withInt:(jint)height
                      withInt:(jint)topOffset;

- (jfloat)getOffsetWithASBorder:(ASBorder *)border
                   withNSString:(NSString *)where;

- (jboolean)useCornerRadius;

- (void)createArcFullPathWithId:(id)path
                     withADView:(ADView *)view;

- (jboolean)invalidate;

- (jboolean)isNoClip;

- (void)setMaskLayerWithId:(id)cgRect
                    withId:(id)mypath;

- (void)resetWithId:(id)path
             withId:(id)paint;

- (void)setDefaultColorWithASBorderDecorator:(ASBorderDecorator *)borderDecorator;

- (void)drawPathWithId:(id)canvas
                withId:(id)mypath
                withId:(id)paint;

- (void)setColorAndWidthWithId:(id)mypath
                        withId:(id)paint
                        withId:(id)borderColor
                       withInt:(jint)width;

- (void)nativeSetColorAndWidthWithId:(id)mypath
                              withId:(id)paint
                              withId:(id)borderColor
                             withInt:(jint)width;

- (void)setDottedEffectWithId:(id)mypath
                       withId:(id)paint
                      withInt:(jint)radius
                      withInt:(jint)defaultDashSpacing;

- (void)setDashedEffectWithId:(id)mypath
                       withId:(id)paint
                      withInt:(jint)dashWidth
                      withInt:(jint)dashSpacing;

- (void)nativeInvalidateWithId:(id)view;

- (void)createMaskLayerWithId:(id)mypath
                  withBoolean:(jboolean)isWrappedWidget;

- (void)setCornerRadiusOnSuperViewWithFloat:(jfloat)topLeftRadius;

- (void)setCornerRadiusOnViewWithFloat:(jfloat)topLeftRadius;

- (void)setFrameWithId:(id)object;

- (void)quadToWithId:(id)mypath
           withFloat:(jfloat)x1
           withFloat:(jfloat)y1
           withFloat:(jfloat)x2
           withFloat:(jfloat)y2;

- (void)moveToWithId:(id)mypath
           withFloat:(jfloat)x
           withFloat:(jfloat)y;

- (void)lineToWithId:(id)mypath
           withFloat:(jfloat)x
           withFloat:(jfloat)y;

- (void)arcToWithId:(id)mypath
withASBorderDecorator_Arc:(ASBorderDecorator_Arc *)arc;

- (void)closePathWithId:(id)mypath;

- (void)addCommandIfNeeded;

- (jfloat)adjustOffsetWithNSString:(NSString *)where
                         withFloat:(jfloat)offset;

- (jboolean)isBorderStatefulWithASBorder:(ASBorder *)border;

@end

J2OBJC_FIELD_SETTER(ASBorderDecorator, borderTop_, ASBorder *)
J2OBJC_FIELD_SETTER(ASBorderDecorator, borderLeft_, ASBorder *)
J2OBJC_FIELD_SETTER(ASBorderDecorator, borderRight_, ASBorder *)
J2OBJC_FIELD_SETTER(ASBorderDecorator, borderBottom_, ASBorder *)

inline id<JavaUtilList> ASBorderDecorator_get_METHODS(void);
static id<JavaUtilList> ASBorderDecorator_METHODS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASBorderDecorator, METHODS, id<JavaUtilList>)

__attribute__((unused)) static void ASBorderDecorator_initBorderTop(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_initBorderLeft(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_initBorderRight(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_initBorderBottom(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_createBorderColorLeftInternalWithId_(ASBorderDecorator *self, id color);

__attribute__((unused)) static void ASBorderDecorator_createBorderColorRightInternalWithId_(ASBorderDecorator *self, id color);

__attribute__((unused)) static void ASBorderDecorator_createBorderWidthRightInternalWithInt_(ASBorderDecorator *self, jint borderWith);

__attribute__((unused)) static void ASBorderDecorator_createBorderWidthLeftInternalWithInt_(ASBorderDecorator *self, jint borderWith);

__attribute__((unused)) static void ASBorderDecorator_createBorderStyleLeftInternalWithNSString_(ASBorderDecorator *self, NSString *style);

__attribute__((unused)) static void ASBorderDecorator_createBorderDashSpacingLeftInternalWithInt_(ASBorderDecorator *self, jint dashSpacing);

__attribute__((unused)) static void ASBorderDecorator_createBorderDashWidthLeftInternalWithInt_(ASBorderDecorator *self, jint dashWidth);

__attribute__((unused)) static void ASBorderDecorator_createBorderStyleRightInternalWithNSString_(ASBorderDecorator *self, NSString *style);

__attribute__((unused)) static void ASBorderDecorator_createBorderDashSpacingRightInternalWithInt_(ASBorderDecorator *self, jint dashSpacing);

__attribute__((unused)) static void ASBorderDecorator_createBorderDashWidthRightInternalWithInt_(ASBorderDecorator *self, jint dashWidth);

__attribute__((unused)) static void ASBorderDecorator_createBorderRadiusTopLeftInternalWithFloat_(ASBorderDecorator *self, jfloat radius);

__attribute__((unused)) static void ASBorderDecorator_createBorderRadiusTopRightInternalWithFloat_(ASBorderDecorator *self, jfloat radius);

__attribute__((unused)) static void ASBorderDecorator_createBorderRadiusBottomLeftInternalWithFloat_(ASBorderDecorator *self, jfloat radius);

__attribute__((unused)) static void ASBorderDecorator_createBorderRadiusBottomRightInternalWithFloat_(ASBorderDecorator *self, jfloat radius);

__attribute__((unused)) static void ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_(ASBorderDecorator *self, jfloat x1, jfloat y1, jfloat x2, jfloat y2, ASBorder *border, id path, NSString *where);

__attribute__((unused)) static void ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(ASBorderDecorator *self, jfloat x1, jfloat y1, jfloat x2, jfloat y2, ASBorder *border, id path, NSString *where, jboolean partial);

__attribute__((unused)) static jboolean ASBorderDecorator_hasRadiusWithASBorder_(ASBorderDecorator *self, ASBorder *border);

__attribute__((unused)) static jboolean ASBorderDecorator_isBorderNotPresent(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_createBorderBottomWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset);

__attribute__((unused)) static void ASBorderDecorator_createBorderRightWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset);

__attribute__((unused)) static void ASBorderDecorator_createBorderLeftWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset);

__attribute__((unused)) static void ASBorderDecorator_createBorderTopWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset);

__attribute__((unused)) static jfloat ASBorderDecorator_getOffsetWithASBorder_withNSString_(ASBorderDecorator *self, ASBorder *border, NSString *where);

__attribute__((unused)) static jboolean ASBorderDecorator_useCornerRadius(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_createArcFullPathWithId_withADView_(ASBorderDecorator *self, id path, ADView *view);

__attribute__((unused)) static jboolean ASBorderDecorator_invalidate(ASBorderDecorator *self);

__attribute__((unused)) static jboolean ASBorderDecorator_isNoClip(ASBorderDecorator *self);

__attribute__((unused)) static void ASBorderDecorator_setMaskLayerWithId_withId_(ASBorderDecorator *self, id cgRect, id mypath);

__attribute__((unused)) static void ASBorderDecorator_resetWithId_withId_(ASBorderDecorator *self, id path, id paint);

__attribute__((unused)) static void ASBorderDecorator_setDefaultColorWithASBorderDecorator_(ASBorderDecorator *self, ASBorderDecorator *borderDecorator);

__attribute__((unused)) static void ASBorderDecorator_drawPathWithId_withId_withId_(ASBorderDecorator *self, id canvas, id mypath, id paint);

__attribute__((unused)) static void ASBorderDecorator_setColorAndWidthWithId_withId_withId_withInt_(ASBorderDecorator *self, id mypath, id paint, id borderColor, jint width);

__attribute__((unused)) static void ASBorderDecorator_nativeSetColorAndWidthWithId_withId_withId_withInt_(ASBorderDecorator *self, id mypath, id paint, id borderColor, jint width);

__attribute__((unused)) static void ASBorderDecorator_setDottedEffectWithId_withId_withInt_withInt_(ASBorderDecorator *self, id mypath, id paint, jint radius, jint defaultDashSpacing);

__attribute__((unused)) static void ASBorderDecorator_setDashedEffectWithId_withId_withInt_withInt_(ASBorderDecorator *self, id mypath, id paint, jint dashWidth, jint dashSpacing);

__attribute__((unused)) static void ASBorderDecorator_nativeInvalidateWithId_(ASBorderDecorator *self, id view);

__attribute__((unused)) static void ASBorderDecorator_createMaskLayerWithId_withBoolean_(ASBorderDecorator *self, id mypath, jboolean isWrappedWidget);

__attribute__((unused)) static void ASBorderDecorator_setCornerRadiusOnSuperViewWithFloat_(ASBorderDecorator *self, jfloat topLeftRadius);

__attribute__((unused)) static void ASBorderDecorator_setCornerRadiusOnViewWithFloat_(ASBorderDecorator *self, jfloat topLeftRadius);

__attribute__((unused)) static void ASBorderDecorator_setFrameWithId_(ASBorderDecorator *self, id object);

__attribute__((unused)) static void ASBorderDecorator_quadToWithId_withFloat_withFloat_withFloat_withFloat_(ASBorderDecorator *self, id mypath, jfloat x1, jfloat y1, jfloat x2, jfloat y2);

__attribute__((unused)) static void ASBorderDecorator_moveToWithId_withFloat_withFloat_(ASBorderDecorator *self, id mypath, jfloat x, jfloat y);

__attribute__((unused)) static void ASBorderDecorator_lineToWithId_withFloat_withFloat_(ASBorderDecorator *self, id mypath, jfloat x, jfloat y);

__attribute__((unused)) static void ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(ASBorderDecorator *self, id mypath, ASBorderDecorator_Arc *arc);

__attribute__((unused)) static void ASBorderDecorator_closePathWithId_(ASBorderDecorator *self, id mypath);

__attribute__((unused)) static void ASBorderDecorator_addCommandIfNeeded(ASBorderDecorator *self);

__attribute__((unused)) static jfloat ASBorderDecorator_adjustOffsetWithNSString_withFloat_(ASBorderDecorator *self, NSString *where, jfloat offset);

__attribute__((unused)) static jboolean ASBorderDecorator_isBorderStatefulWithASBorder_(ASBorderDecorator *self, ASBorder *border);

J2OBJC_INITIALIZED_DEFN(ASBorderDecorator)

@implementation ASBorderDecorator

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  ASBorderDecorator *borderDecorator = new_ASBorderDecorator_init();
  borderDecorator->view_ = [((id<ASIWidget>) nil_chk(widget)) asNativeWidget];
  borderDecorator->isWrappedWidget_ = [ASICompositeDecorator_class_() isInstance:[widget getParent]];
  borderDecorator->widget_ = widget;
  ASBorderDecorator_setDefaultColorWithASBorderDecorator_(self, borderDecorator);
  return borderDecorator;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASBorderDecorator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"borderWidth", @"borderColor", @"borderStyle", @"borderDashWidth", @"borderDashSpacing", @"borderRadius", @"borderTopWidth", @"borderTopColor", @"borderTopStyle", @"borderTopDashWidth", @"borderTopDashSpacing", @"borderTopLeftRadius", @"borderTopRightRadius", @"borderBottomWidth", @"borderBottomColor", @"borderBottomStyle", @"borderBottomDashWidth", @"borderBottomDashSpacing", @"borderBottomLeftRadius", @"borderBottomRightRadius", @"borderLeftWidth", @"borderLeftColor", @"borderLeftStyle", @"borderLeftDashWidth", @"borderLeftDashSpacing", @"borderRightWidth", @"borderRightColor", @"borderRightStyle", @"borderRightDashWidth", @"borderRightDashSpacing" }, 30)) {
    case 0:
    {
      [self createBorderWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [self createBorderColorWithId:objValue];
    }
    break;
    case 2:
    {
      [self createBorderStyleWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
    }
    break;
    case 3:
    {
      [self createBorderDashWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      [self createBorderDashSpacingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 5:
    {
      [self createBorderRadiusWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 6:
    {
      [self createBorderWidthTopWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 7:
    {
      [self createBorderColorTopWithId:objValue];
    }
    break;
    case 8:
    {
      [self createBorderStyleTopWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
    }
    break;
    case 9:
    {
      [self createBorderDashWidthTopWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 10:
    {
      [self createBorderDashSpacingTopWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 11:
    {
      [self createBorderRadiusTopLeftWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 12:
    {
      [self createBorderRadiusTopRightWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 13:
    {
      [self createBorderWidthBottomWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 14:
    {
      [self createBorderColorBottomWithId:objValue];
    }
    break;
    case 15:
    {
      [self createBorderStyleBottomWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
    }
    break;
    case 16:
    {
      [self createBorderDashWidthBottomWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 17:
    {
      [self createBorderDashSpacingBottomWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 18:
    {
      [self createBorderRadiusBottomLeftWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 19:
    {
      [self createBorderRadiusBottomRightWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 20:
    {
      [self createBorderWidthLeftWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 21:
    {
      [self createBorderColorLeftWithId:objValue];
    }
    break;
    case 22:
    {
      [self createBorderStyleLeftWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
    }
    break;
    case 23:
    {
      [self createBorderDashWidthLeftWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 24:
    {
      [self createBorderDashSpacingLeftWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 25:
    {
      [self createBorderWidthRightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 26:
    {
      [self createBorderColorRightWithId:objValue];
    }
    break;
    case 27:
    {
      [self createBorderStyleRightWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
    }
    break;
    case 28:
    {
      [self createBorderDashWidthRightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 29:
    {
      [self createBorderDashSpacingRightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
  }
  ASBorderDecorator_addCommandIfNeeded(self);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(widgetAttribute)) getAttributeName], (id[]){ @"borderTopWidth", @"borderTopColor", @"borderTopStyle", @"borderTopDashWidth", @"borderTopDashSpacing", @"borderTopLeftRadius", @"borderTopRightRadius", @"borderBottomWidth", @"borderBottomColor", @"borderBottomStyle", @"borderBottomDashWidth", @"borderBottomDashSpacing", @"borderBottomLeftRadius", @"borderBottomRightRadius", @"borderLeftWidth", @"borderLeftColor", @"borderLeftStyle", @"borderLeftDashWidth", @"borderLeftDashSpacing", @"borderRightWidth", @"borderRightColor", @"borderRightStyle", @"borderRightDashWidth", @"borderRightDashSpacing" }, 24)) {
    case 0:
    {
      if (borderTop_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderTop_ getWidth]);
    }
    case 1:
    {
      if (borderTop_ == nil) {
        return nil;
      }
      return [borderTop_ getColor];
    }
    case 2:
    {
      if (borderTop_ == nil) {
        return nil;
      }
      return [borderTop_ getStyle];
    }
    case 3:
    {
      if (borderTop_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderTop_ getDashWidth]);
    }
    case 4:
    {
      if (borderTop_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderTop_ getDashSpacing]);
    }
    case 5:
    {
      if (borderTop_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangFloat_valueOfWithFloat_([borderTop_ getTopLeftRadius]);
    }
    case 6:
    {
      if (borderTop_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangFloat_valueOfWithFloat_([borderTop_ getTopRightRadius]);
    }
    case 7:
    {
      if (borderBottom_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderBottom_ getWidth]);
    }
    case 8:
    {
      if (borderBottom_ == nil) {
        return nil;
      }
      return [borderBottom_ getColor];
    }
    case 9:
    {
      if (borderBottom_ == nil) {
        return nil;
      }
      return [borderBottom_ getStyle];
    }
    case 10:
    {
      if (borderBottom_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderBottom_ getDashWidth]);
    }
    case 11:
    {
      if (borderBottom_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderBottom_ getDashSpacing]);
    }
    case 12:
    {
      if (borderBottom_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangFloat_valueOfWithFloat_([borderBottom_ getBottomLeftRadius]);
    }
    case 13:
    {
      if (borderBottom_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangFloat_valueOfWithFloat_([borderBottom_ getBottomRightRadius]);
    }
    case 14:
    {
      if (borderLeft_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderLeft_ getWidth]);
    }
    case 15:
    {
      if (borderLeft_ == nil) {
        return nil;
      }
      return [borderLeft_ getColor];
    }
    case 16:
    {
      if (borderLeft_ == nil) {
        return nil;
      }
      return [borderLeft_ getStyle];
    }
    case 17:
    {
      if (borderLeft_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderLeft_ getDashWidth]);
    }
    case 18:
    {
      if (borderLeft_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderLeft_ getDashSpacing]);
    }
    case 19:
    {
      if (borderRight_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderRight_ getWidth]);
    }
    case 20:
    {
      if (borderRight_ == nil) {
        return nil;
      }
      return [borderRight_ getColor];
    }
    case 21:
    {
      if (borderRight_ == nil) {
        return nil;
      }
      return [borderRight_ getStyle];
    }
    case 22:
    {
      if (borderRight_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderRight_ getDashWidth]);
    }
    case 23:
    {
      if (borderRight_ == nil) {
        return JavaLangInteger_valueOfWithInt_(0);
      }
      return JavaLangInteger_valueOfWithInt_([borderRight_ getDashSpacing]);
    }
  }
  return nil;
}

- (id<JavaUtilList>)getMethods {
  return ASBorderDecorator_METHODS;
}

- (void)initBorderTop {
  ASBorderDecorator_initBorderTop(self);
}

- (void)initBorderLeft {
  ASBorderDecorator_initBorderLeft(self);
}

- (void)initBorderRight {
  ASBorderDecorator_initBorderRight(self);
}

- (void)initBorderBottom {
  ASBorderDecorator_initBorderBottom(self);
}

- (void)createBorderStyleWithNSString:(NSString *)style {
  [self createBorderStyleTopWithNSString:style];
  [self createBorderStyleBottomWithNSString:style];
  [self createBorderStyleLeftWithNSString:style];
  [self createBorderStyleRightWithNSString:style];
}

- (void)createBorderDashSpacingWithInt:(jint)dashSpacing {
  [self createBorderDashSpacingTopWithInt:dashSpacing];
  [self createBorderDashSpacingBottomWithInt:dashSpacing];
  [self createBorderDashSpacingLeftWithInt:dashSpacing];
  [self createBorderDashSpacingRightWithInt:dashSpacing];
}

- (void)createBorderDashWidthWithInt:(jint)dashWidth {
  [self createBorderDashWidthTopWithInt:dashWidth];
  [self createBorderDashWidthBottomWithInt:dashWidth];
  [self createBorderDashWidthLeftWithInt:dashWidth];
  [self createBorderDashWidthRightWithInt:dashWidth];
}

- (void)createBorderColorWithId:(id)color {
  [self createBorderColorTopWithId:color];
  [self createBorderColorBottomWithId:color];
  [self createBorderColorLeftWithId:color];
  [self createBorderColorRightWithId:color];
}

- (void)createBorderWidthWithInt:(jint)borderWith {
  [self createBorderWidthTopWithInt:borderWith];
  [self createBorderWidthBottomWithInt:borderWith];
  [self createBorderWidthLeftWithInt:borderWith];
  [self createBorderWidthRightWithInt:borderWith];
}

- (void)createBorderRadiusWithFloat:(jfloat)radius {
  [self createBorderRadiusTopLeftWithFloat:radius];
  [self createBorderRadiusBottomLeftWithFloat:radius];
  [self createBorderRadiusTopRightWithFloat:radius];
  [self createBorderRadiusBottomRightWithFloat:radius];
}

- (void)createBorderColorBottomWithId:(id)color {
  ASBorderDecorator_initBorderBottom(self);
  [((ASBorder *) nil_chk(borderBottom_)) setColorWithId:color];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderColorTopWithId:(id)color {
  ASBorderDecorator_initBorderTop(self);
  [((ASBorder *) nil_chk(borderTop_)) setColorWithId:color];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderColorLeftWithId:(id)color {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderColorRightInternalWithId_(self, color);
  }
  else {
    ASBorderDecorator_createBorderColorLeftInternalWithId_(self, color);
  }
}

- (void)createBorderColorLeftInternalWithId:(id)color {
  ASBorderDecorator_createBorderColorLeftInternalWithId_(self, color);
}

- (void)createBorderColorRightWithId:(id)color {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderColorLeftInternalWithId_(self, color);
  }
  else {
    ASBorderDecorator_createBorderColorRightInternalWithId_(self, color);
  }
}

- (void)createBorderColorRightInternalWithId:(id)color {
  ASBorderDecorator_createBorderColorRightInternalWithId_(self, color);
}

- (void)createBorderWidthRightWithInt:(jint)borderWith {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderWidthLeftInternalWithInt_(self, borderWith);
  }
  else {
    ASBorderDecorator_createBorderWidthRightInternalWithInt_(self, borderWith);
  }
}

- (void)createBorderWidthRightInternalWithInt:(jint)borderWith {
  ASBorderDecorator_createBorderWidthRightInternalWithInt_(self, borderWith);
}

- (void)createBorderWidthTopWithInt:(jint)borderWith {
  ASBorderDecorator_initBorderTop(self);
  [((ASBorder *) nil_chk(borderTop_)) setWidthWithInt:borderWith];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderWidthBottomWithInt:(jint)borderWith {
  ASBorderDecorator_initBorderBottom(self);
  [((ASBorder *) nil_chk(borderBottom_)) setWidthWithInt:borderWith];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderWidthLeftWithInt:(jint)borderWith {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderWidthRightInternalWithInt_(self, borderWith);
  }
  else {
    ASBorderDecorator_createBorderWidthLeftInternalWithInt_(self, borderWith);
  }
}

- (void)createBorderWidthLeftInternalWithInt:(jint)borderWith {
  ASBorderDecorator_createBorderWidthLeftInternalWithInt_(self, borderWith);
}

- (void)createBorderStyleTopWithNSString:(NSString *)style {
  ASBorderDecorator_initBorderTop(self);
  [((ASBorder *) nil_chk(borderTop_)) setStyleWithNSString:style];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderDashSpacingTopWithInt:(jint)dashSpacing {
  ASBorderDecorator_initBorderTop(self);
  [((ASBorder *) nil_chk(borderTop_)) setDashSpacingWithInt:dashSpacing];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderDashWidthTopWithInt:(jint)dashWidth {
  ASBorderDecorator_initBorderTop(self);
  [((ASBorder *) nil_chk(borderTop_)) setDashWidthWithInt:dashWidth];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderStyleBottomWithNSString:(NSString *)style {
  ASBorderDecorator_initBorderBottom(self);
  [((ASBorder *) nil_chk(borderBottom_)) setStyleWithNSString:style];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderDashSpacingBottomWithInt:(jint)dashSpacing {
  ASBorderDecorator_initBorderBottom(self);
  [((ASBorder *) nil_chk(borderBottom_)) setDashSpacingWithInt:dashSpacing];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderDashWidthBottomWithInt:(jint)dashWidth {
  ASBorderDecorator_initBorderBottom(self);
  [((ASBorder *) nil_chk(borderBottom_)) setDashWidthWithInt:dashWidth];
  ASBorderDecorator_invalidate(self);
}

- (void)createBorderStyleLeftWithNSString:(NSString *)style {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderStyleRightInternalWithNSString_(self, style);
  }
  else {
    ASBorderDecorator_createBorderStyleLeftInternalWithNSString_(self, style);
  }
}

- (void)createBorderStyleLeftInternalWithNSString:(NSString *)style {
  ASBorderDecorator_createBorderStyleLeftInternalWithNSString_(self, style);
}

- (void)createBorderDashSpacingLeftWithInt:(jint)dashSpacing {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderDashSpacingRightInternalWithInt_(self, dashSpacing);
  }
  else {
    ASBorderDecorator_createBorderDashSpacingLeftInternalWithInt_(self, dashSpacing);
  }
}

- (void)createBorderDashSpacingLeftInternalWithInt:(jint)dashSpacing {
  ASBorderDecorator_createBorderDashSpacingLeftInternalWithInt_(self, dashSpacing);
}

- (void)createBorderDashWidthLeftWithInt:(jint)dashWidth {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderDashWidthRightInternalWithInt_(self, dashWidth);
  }
  else {
    ASBorderDecorator_createBorderDashWidthLeftInternalWithInt_(self, dashWidth);
  }
}

- (void)createBorderDashWidthLeftInternalWithInt:(jint)dashWidth {
  ASBorderDecorator_createBorderDashWidthLeftInternalWithInt_(self, dashWidth);
}

- (void)createBorderStyleRightWithNSString:(NSString *)style {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderStyleLeftInternalWithNSString_(self, style);
  }
  else {
    ASBorderDecorator_createBorderStyleRightInternalWithNSString_(self, style);
  }
}

- (void)createBorderStyleRightInternalWithNSString:(NSString *)style {
  ASBorderDecorator_createBorderStyleRightInternalWithNSString_(self, style);
}

- (void)createBorderDashSpacingRightWithInt:(jint)dashSpacing {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderDashSpacingLeftInternalWithInt_(self, dashSpacing);
  }
  else {
    ASBorderDecorator_createBorderDashSpacingRightInternalWithInt_(self, dashSpacing);
  }
}

- (void)createBorderDashSpacingRightInternalWithInt:(jint)dashSpacing {
  ASBorderDecorator_createBorderDashSpacingRightInternalWithInt_(self, dashSpacing);
}

- (void)createBorderDashWidthRightWithInt:(jint)dashWidth {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderDashWidthLeftInternalWithInt_(self, dashWidth);
  }
  else {
    ASBorderDecorator_createBorderDashWidthRightInternalWithInt_(self, dashWidth);
  }
}

- (void)createBorderDashWidthRightInternalWithInt:(jint)dashWidth {
  ASBorderDecorator_createBorderDashWidthRightInternalWithInt_(self, dashWidth);
}

- (void)createBorderRadiusTopLeftWithFloat:(jfloat)radius {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderRadiusTopRightInternalWithFloat_(self, radius);
  }
  else {
    ASBorderDecorator_createBorderRadiusTopLeftInternalWithFloat_(self, radius);
  }
}

- (void)createBorderRadiusTopLeftInternalWithFloat:(jfloat)radius {
  ASBorderDecorator_createBorderRadiusTopLeftInternalWithFloat_(self, radius);
}

- (void)createBorderRadiusTopRightWithFloat:(jfloat)radius {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderRadiusTopLeftInternalWithFloat_(self, radius);
  }
  else {
    ASBorderDecorator_createBorderRadiusTopRightInternalWithFloat_(self, radius);
  }
}

- (void)createBorderRadiusTopRightInternalWithFloat:(jfloat)radius {
  ASBorderDecorator_createBorderRadiusTopRightInternalWithFloat_(self, radius);
}

- (void)createBorderRadiusBottomLeftWithFloat:(jfloat)radius {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderRadiusBottomRightInternalWithFloat_(self, radius);
  }
  else {
    ASBorderDecorator_createBorderRadiusBottomLeftInternalWithFloat_(self, radius);
  }
}

- (void)createBorderRadiusBottomLeftInternalWithFloat:(jfloat)radius {
  ASBorderDecorator_createBorderRadiusBottomLeftInternalWithFloat_(self, radius);
}

- (void)createBorderRadiusBottomRightWithFloat:(jfloat)radius {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(widget_)) {
    ASBorderDecorator_createBorderRadiusBottomLeftInternalWithFloat_(self, radius);
  }
  else {
    ASBorderDecorator_createBorderRadiusBottomRightInternalWithFloat_(self, radius);
  }
}

- (void)createBorderRadiusBottomRightInternalWithFloat:(jfloat)radius {
  ASBorderDecorator_createBorderRadiusBottomRightInternalWithFloat_(self, radius);
}

- (void)createBorderWithFloat:(jfloat)x1
                    withFloat:(jfloat)y1
                    withFloat:(jfloat)x2
                    withFloat:(jfloat)y2
                       withId:(id)canvas
                       withId:(id)path
                       withId:(id)paint
                 withASBorder:(ASBorder *)border
                 withNSString:(NSString *)where {
  ASBorderDecorator_resetWithId_withId_(self, path, paint);
  id borderColor = [((ASBorder *) nil_chk(border)) getColor];
  if (borderColor == nil) {
    borderColor = defaultColor_;
  }
  jint width = [border getWidth];
  ASBorderDecorator_setColorAndWidthWithId_withId_withId_withInt_(self, path, paint, borderColor, width);
  switch (JreIndexOfStr([border getStyle], (id[]){ @"dashed", @"dotted" }, 2)) {
    case 0:
    {
      jint defaultDashSpacing = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"1dp"));
      jint defaultDashWidth = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"3dp"));
      jint dashWidth = [border getDashWidth] == -1 ? defaultDashWidth : [border getDashWidth];
      jint dashSpacing = [border getDashSpacing] == -1 ? defaultDashSpacing : [border getDashSpacing];
      ASBorderDecorator_setDashedEffectWithId_withId_withInt_withInt_(self, path, paint, dashWidth, dashSpacing);
      break;
    }
    case 1:
    {
      jint radius = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"1dp"));
      jint defaultDashSpacing = JreFpToInt(ASPluginInvoker_convertDpToPixelWithNSString_(@"1dp"));
      jint dashSpacing = [border getDashSpacing] == -1 ? defaultDashSpacing : [border getDashSpacing];
      ASBorderDecorator_setDottedEffectWithId_withId_withInt_withInt_(self, path, paint, radius, dashSpacing);
      break;
    }
    default:
    break;
  }
  jboolean hasRadius = ASBorderDecorator_hasRadiusWithASBorder_(self, border);
  if (hasRadius) {
    ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_(self, x1, y1, x2, y2, border, path, where);
  }
  else {
    ASBorderDecorator_moveToWithId_withFloat_withFloat_(self, path, x1, y1);
    ASBorderDecorator_quadToWithId_withFloat_withFloat_withFloat_withFloat_(self, path, x1, y1, x2, y2);
  }
  ASBorderDecorator_drawPathWithId_withId_withId_(self, canvas, path, paint);
}

- (void)createArcWithFloat:(jfloat)x1
                 withFloat:(jfloat)y1
                 withFloat:(jfloat)x2
                 withFloat:(jfloat)y2
              withASBorder:(ASBorder *)border
                    withId:(id)path
              withNSString:(NSString *)where {
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_(self, x1, y1, x2, y2, border, path, where);
}

- (void)createArcWithFloat:(jfloat)x1
                 withFloat:(jfloat)y1
                 withFloat:(jfloat)x2
                 withFloat:(jfloat)y2
              withASBorder:(ASBorder *)border
                    withId:(id)path
              withNSString:(NSString *)where
               withBoolean:(jboolean)partial {
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(self, x1, y1, x2, y2, border, path, where, partial);
}

- (jboolean)hasRadiusWithASBorder:(ASBorder *)border {
  return ASBorderDecorator_hasRadiusWithASBorder_(self, border);
}

- (jboolean)isBorderNotPresent {
  return ASBorderDecorator_isBorderNotPresent(self);
}

- (void)createBorderBottomWithId:(id)canvas
                          withId:(id)path
                          withId:(id)paint
                         withInt:(jint)width
                         withInt:(jint)height
                         withInt:(jint)topOffset {
  ASBorderDecorator_createBorderBottomWithId_withId_withId_withInt_withInt_withInt_(self, canvas, path, paint, width, height, topOffset);
}

- (void)createBorderRightWithId:(id)canvas
                         withId:(id)path
                         withId:(id)paint
                        withInt:(jint)width
                        withInt:(jint)height
                        withInt:(jint)topOffset {
  ASBorderDecorator_createBorderRightWithId_withId_withId_withInt_withInt_withInt_(self, canvas, path, paint, width, height, topOffset);
}

- (void)createBorderLeftWithId:(id)canvas
                        withId:(id)path
                        withId:(id)paint
                       withInt:(jint)width
                       withInt:(jint)height
                       withInt:(jint)topOffset {
  ASBorderDecorator_createBorderLeftWithId_withId_withId_withInt_withInt_withInt_(self, canvas, path, paint, width, height, topOffset);
}

- (void)createBorderTopWithId:(id)canvas
                       withId:(id)path
                       withId:(id)paint
                      withInt:(jint)width
                      withInt:(jint)height
                      withInt:(jint)topOffset {
  ASBorderDecorator_createBorderTopWithId_withId_withId_withInt_withInt_withInt_(self, canvas, path, paint, width, height, topOffset);
}

- (jfloat)getOffsetWithASBorder:(ASBorder *)border
                   withNSString:(NSString *)where {
  return ASBorderDecorator_getOffsetWithASBorder_withNSString_(self, border, where);
}

- (jboolean)useCornerRadius {
  return ASBorderDecorator_useCornerRadius(self);
}

- (void)createArcFullPathWithId:(id)path
                     withADView:(ADView *)view {
  ASBorderDecorator_createArcFullPathWithId_withADView_(self, path, view);
}

- (jboolean)invalidate {
  return ASBorderDecorator_invalidate(self);
}

- (jboolean)isNoClip {
  return ASBorderDecorator_isNoClip(self);
}

- (void)initialized {
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)args {
  switch (JreIndexOfStr(method, (id[]){ @"drawRect", @"setFrame" }, 2)) {
    case 0:
    [self drawRectWithId:IOSObjectArray_Get(nil_chk(args), 0)];
    break;
    case 1:
    ASBorderDecorator_setFrameWithId_(self, IOSObjectArray_Get(nil_chk(args), 0));
    break;
  }
}

- (void)createMask {
}

- (void)setMaskLayerWithId:(id)cgRect
                    withId:(id)mypath {
  ASBorderDecorator_setMaskLayerWithId_withId_(self, cgRect, mypath);
}

- (void)drawRectWithId:(id)cgRect {
  if (ASBorderDecorator_isBorderNotPresent(self)) return;
  if (borderLeft_ != nil) {
    [self nativeCreateBorderLeftWithASBorder:borderLeft_ withId:cgRect];
  }
  if (borderRight_ != nil) {
    [self nativeCreateBorderRightWithASBorder:borderRight_ withId:cgRect];
  }
  if (borderBottom_ != nil) {
    [self nativeCreateBorderBottomWithASBorder:borderBottom_ withId:cgRect];
  }
  if (borderTop_ != nil) {
    [self nativeCreateBorderTopWithASBorder:borderTop_ withId:cgRect];
  }
}

- (void)nativeCreateBorderLeftWithASBorder:(ASBorder *)borderLeft
                                    withId:(id)wrapperRect {
  CGRect rect = ((CGRectWrapper*) wrapperRect).rect;
  CGPoint contentOffset = ((CGRectWrapper*) wrapperRect).contentOffset;
  UIBezierPath * path = [UIBezierPath new];
  [self createBorderLeftWithId:nil withId:path withId:nil withInt:rect.size.width withInt:rect.size.height + contentOffset.y withInt:0];
}

- (void)nativeCreateBorderRightWithASBorder:(ASBorder *)borderRight
                                     withId:(id)wrapperRect {
  CGRect rect = ((CGRectWrapper*) wrapperRect).rect;
  CGPoint contentOffset = ((CGRectWrapper*) wrapperRect).contentOffset;
  UIBezierPath * path = [UIBezierPath new];
  [self createBorderRightWithId:nil withId:path withId:nil withInt:rect.size.width withInt:rect.size.height + contentOffset.y withInt:0];
}

- (void)nativeCreateBorderTopWithASBorder:(ASBorder *)borderTop
                                   withId:(id)wrapperRect {
  CGRect rect = ((CGRectWrapper*) wrapperRect).rect;
  CGPoint contentOffset = ((CGRectWrapper*) wrapperRect).contentOffset;
  UIBezierPath * path = [UIBezierPath new];
  [self createBorderTopWithId:nil withId:path withId:nil withInt:rect.size.width withInt:rect.size.height + contentOffset.y withInt:0];
}

- (void)nativeCreateBorderBottomWithASBorder:(ASBorder *)borderBottom
                                      withId:(id)wrapperRect {
  CGRect rect = ((CGRectWrapper*) wrapperRect).rect;
  CGPoint contentOffset = ((CGRectWrapper*) wrapperRect).contentOffset;
  UIBezierPath * path = [UIBezierPath new];
  [self createBorderBottomWithId:nil withId:path withId:nil withInt:rect.size.width withInt:rect.size.height + contentOffset.y withInt:0];
}

- (void)resetWithId:(id)path
             withId:(id)paint {
  ASBorderDecorator_resetWithId_withId_(self, path, paint);
}

- (void)setDefaultColorWithASBorderDecorator:(ASBorderDecorator *)borderDecorator {
  ASBorderDecorator_setDefaultColorWithASBorderDecorator_(self, borderDecorator);
}

- (void)drawPathWithId:(id)canvas
                withId:(id)mypath
                withId:(id)paint {
  ASBorderDecorator_drawPathWithId_withId_withId_(self, canvas, mypath, paint);
}

- (void)setColorAndWidthWithId:(id)mypath
                        withId:(id)paint
                        withId:(id)borderColor
                       withInt:(jint)width {
  ASBorderDecorator_setColorAndWidthWithId_withId_withId_withInt_(self, mypath, paint, borderColor, width);
}

- (void)nativeSetColorAndWidthWithId:(id)mypath
                              withId:(id)paint
                              withId:(id)borderColor
                             withInt:(jint)width {
  ASBorderDecorator_nativeSetColorAndWidthWithId_withId_withId_withInt_(self, mypath, paint, borderColor, width);
}

- (void)setDottedEffectWithId:(id)mypath
                       withId:(id)paint
                      withInt:(jint)radius
                      withInt:(jint)defaultDashSpacing {
  ASBorderDecorator_setDottedEffectWithId_withId_withInt_withInt_(self, mypath, paint, radius, defaultDashSpacing);
}

- (void)setDashedEffectWithId:(id)mypath
                       withId:(id)paint
                      withInt:(jint)dashWidth
                      withInt:(jint)dashSpacing {
  ASBorderDecorator_setDashedEffectWithId_withId_withInt_withInt_(self, mypath, paint, dashWidth, dashSpacing);
}

- (void)nativeInvalidateWithId:(id)view {
  ASBorderDecorator_nativeInvalidateWithId_(self, view);
}

- (void)createMaskLayerWithId:(id)mypath
                  withBoolean:(jboolean)isWrappedWidget {
  ASBorderDecorator_createMaskLayerWithId_withBoolean_(self, mypath, isWrappedWidget);
}

- (void)setCornerRadiusOnSuperViewWithFloat:(jfloat)topLeftRadius {
  ASBorderDecorator_setCornerRadiusOnSuperViewWithFloat_(self, topLeftRadius);
}

- (void)setCornerRadiusOnViewWithFloat:(jfloat)topLeftRadius {
  ASBorderDecorator_setCornerRadiusOnViewWithFloat_(self, topLeftRadius);
}

- (void)setFrameWithId:(id)object {
  ASBorderDecorator_setFrameWithId_(self, object);
}

- (void)quadToWithId:(id)mypath
           withFloat:(jfloat)x1
           withFloat:(jfloat)y1
           withFloat:(jfloat)x2
           withFloat:(jfloat)y2 {
  ASBorderDecorator_quadToWithId_withFloat_withFloat_withFloat_withFloat_(self, mypath, x1, y1, x2, y2);
}

- (void)moveToWithId:(id)mypath
           withFloat:(jfloat)x
           withFloat:(jfloat)y {
  ASBorderDecorator_moveToWithId_withFloat_withFloat_(self, mypath, x, y);
}

- (void)lineToWithId:(id)mypath
           withFloat:(jfloat)x
           withFloat:(jfloat)y {
  ASBorderDecorator_lineToWithId_withFloat_withFloat_(self, mypath, x, y);
}

- (void)arcToWithId:(id)mypath
withASBorderDecorator_Arc:(ASBorderDecorator_Arc *)arc {
  ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, mypath, arc);
}

- (void)closePathWithId:(id)mypath {
  ASBorderDecorator_closePathWithId_(self, mypath);
}

- (void)addCommandIfNeeded {
  ASBorderDecorator_addCommandIfNeeded(self);
}

- (jfloat)adjustOffsetWithNSString:(NSString *)where
                         withFloat:(jfloat)offset {
  return ASBorderDecorator_adjustOffsetWithNSString_withFloat_(self, where, offset);
}

- (void)drawableStateChanged {
  if (ASBorderDecorator_isBorderStatefulWithASBorder_(self, borderBottom_) || ASBorderDecorator_isBorderStatefulWithASBorder_(self, borderTop_) || ASBorderDecorator_isBorderStatefulWithASBorder_(self, borderLeft_) || ASBorderDecorator_isBorderStatefulWithASBorder_(self, borderRight_)) {
    ASBorderDecorator_nativeInvalidateWithId_(self, [((id<ASIWidget>) nil_chk(widget_)) asNativeWidget]);
  }
}

- (jboolean)isBorderStatefulWithASBorder:(ASBorder *)border {
  return ASBorderDecorator_isBorderStatefulWithASBorder_(self, border);
}

- (void)__javaClone:(ASBorderDecorator *)original {
  [super __javaClone:original];
  JreRelease(widget_);
  JreRelease(view_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASILifeCycleDecorator;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 59, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 60, 61, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 63, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 67, 68, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 70, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 74, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 78, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 79, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 80, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 74, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 84, 85, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 87, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 88, 87, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 91, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 92, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 95, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 96, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 97, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 98, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 100, 101, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 102, 101, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 103, 104, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 105, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 106, 107, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 108, 61, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstanceWithASIWidget:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[3].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[4].selector = @selector(getMethods);
  methods[5].selector = @selector(initBorderTop);
  methods[6].selector = @selector(initBorderLeft);
  methods[7].selector = @selector(initBorderRight);
  methods[8].selector = @selector(initBorderBottom);
  methods[9].selector = @selector(createBorderStyleWithNSString:);
  methods[10].selector = @selector(createBorderDashSpacingWithInt:);
  methods[11].selector = @selector(createBorderDashWidthWithInt:);
  methods[12].selector = @selector(createBorderColorWithId:);
  methods[13].selector = @selector(createBorderWidthWithInt:);
  methods[14].selector = @selector(createBorderRadiusWithFloat:);
  methods[15].selector = @selector(createBorderColorBottomWithId:);
  methods[16].selector = @selector(createBorderColorTopWithId:);
  methods[17].selector = @selector(createBorderColorLeftWithId:);
  methods[18].selector = @selector(createBorderColorLeftInternalWithId:);
  methods[19].selector = @selector(createBorderColorRightWithId:);
  methods[20].selector = @selector(createBorderColorRightInternalWithId:);
  methods[21].selector = @selector(createBorderWidthRightWithInt:);
  methods[22].selector = @selector(createBorderWidthRightInternalWithInt:);
  methods[23].selector = @selector(createBorderWidthTopWithInt:);
  methods[24].selector = @selector(createBorderWidthBottomWithInt:);
  methods[25].selector = @selector(createBorderWidthLeftWithInt:);
  methods[26].selector = @selector(createBorderWidthLeftInternalWithInt:);
  methods[27].selector = @selector(createBorderStyleTopWithNSString:);
  methods[28].selector = @selector(createBorderDashSpacingTopWithInt:);
  methods[29].selector = @selector(createBorderDashWidthTopWithInt:);
  methods[30].selector = @selector(createBorderStyleBottomWithNSString:);
  methods[31].selector = @selector(createBorderDashSpacingBottomWithInt:);
  methods[32].selector = @selector(createBorderDashWidthBottomWithInt:);
  methods[33].selector = @selector(createBorderStyleLeftWithNSString:);
  methods[34].selector = @selector(createBorderStyleLeftInternalWithNSString:);
  methods[35].selector = @selector(createBorderDashSpacingLeftWithInt:);
  methods[36].selector = @selector(createBorderDashSpacingLeftInternalWithInt:);
  methods[37].selector = @selector(createBorderDashWidthLeftWithInt:);
  methods[38].selector = @selector(createBorderDashWidthLeftInternalWithInt:);
  methods[39].selector = @selector(createBorderStyleRightWithNSString:);
  methods[40].selector = @selector(createBorderStyleRightInternalWithNSString:);
  methods[41].selector = @selector(createBorderDashSpacingRightWithInt:);
  methods[42].selector = @selector(createBorderDashSpacingRightInternalWithInt:);
  methods[43].selector = @selector(createBorderDashWidthRightWithInt:);
  methods[44].selector = @selector(createBorderDashWidthRightInternalWithInt:);
  methods[45].selector = @selector(createBorderRadiusTopLeftWithFloat:);
  methods[46].selector = @selector(createBorderRadiusTopLeftInternalWithFloat:);
  methods[47].selector = @selector(createBorderRadiusTopRightWithFloat:);
  methods[48].selector = @selector(createBorderRadiusTopRightInternalWithFloat:);
  methods[49].selector = @selector(createBorderRadiusBottomLeftWithFloat:);
  methods[50].selector = @selector(createBorderRadiusBottomLeftInternalWithFloat:);
  methods[51].selector = @selector(createBorderRadiusBottomRightWithFloat:);
  methods[52].selector = @selector(createBorderRadiusBottomRightInternalWithFloat:);
  methods[53].selector = @selector(createBorderWithFloat:withFloat:withFloat:withFloat:withId:withId:withId:withASBorder:withNSString:);
  methods[54].selector = @selector(createArcWithFloat:withFloat:withFloat:withFloat:withASBorder:withId:withNSString:);
  methods[55].selector = @selector(createArcWithFloat:withFloat:withFloat:withFloat:withASBorder:withId:withNSString:withBoolean:);
  methods[56].selector = @selector(hasRadiusWithASBorder:);
  methods[57].selector = @selector(isBorderNotPresent);
  methods[58].selector = @selector(createBorderBottomWithId:withId:withId:withInt:withInt:withInt:);
  methods[59].selector = @selector(createBorderRightWithId:withId:withId:withInt:withInt:withInt:);
  methods[60].selector = @selector(createBorderLeftWithId:withId:withId:withInt:withInt:withInt:);
  methods[61].selector = @selector(createBorderTopWithId:withId:withId:withInt:withInt:withInt:);
  methods[62].selector = @selector(getOffsetWithASBorder:withNSString:);
  methods[63].selector = @selector(useCornerRadius);
  methods[64].selector = @selector(createArcFullPathWithId:withADView:);
  methods[65].selector = @selector(invalidate);
  methods[66].selector = @selector(isNoClip);
  methods[67].selector = @selector(initialized);
  methods[68].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[69].selector = @selector(createMask);
  methods[70].selector = @selector(setMaskLayerWithId:withId:);
  methods[71].selector = @selector(drawRectWithId:);
  methods[72].selector = @selector(nativeCreateBorderLeftWithASBorder:withId:);
  methods[73].selector = @selector(nativeCreateBorderRightWithASBorder:withId:);
  methods[74].selector = @selector(nativeCreateBorderTopWithASBorder:withId:);
  methods[75].selector = @selector(nativeCreateBorderBottomWithASBorder:withId:);
  methods[76].selector = @selector(resetWithId:withId:);
  methods[77].selector = @selector(setDefaultColorWithASBorderDecorator:);
  methods[78].selector = @selector(drawPathWithId:withId:withId:);
  methods[79].selector = @selector(setColorAndWidthWithId:withId:withId:withInt:);
  methods[80].selector = @selector(nativeSetColorAndWidthWithId:withId:withId:withInt:);
  methods[81].selector = @selector(setDottedEffectWithId:withId:withInt:withInt:);
  methods[82].selector = @selector(setDashedEffectWithId:withId:withInt:withInt:);
  methods[83].selector = @selector(nativeInvalidateWithId:);
  methods[84].selector = @selector(createMaskLayerWithId:withBoolean:);
  methods[85].selector = @selector(setCornerRadiusOnSuperViewWithFloat:);
  methods[86].selector = @selector(setCornerRadiusOnViewWithFloat:);
  methods[87].selector = @selector(setFrameWithId:);
  methods[88].selector = @selector(quadToWithId:withFloat:withFloat:withFloat:withFloat:);
  methods[89].selector = @selector(moveToWithId:withFloat:withFloat:);
  methods[90].selector = @selector(lineToWithId:withFloat:withFloat:);
  methods[91].selector = @selector(arcToWithId:withASBorderDecorator_Arc:);
  methods[92].selector = @selector(closePathWithId:);
  methods[93].selector = @selector(addCommandIfNeeded);
  methods[94].selector = @selector(adjustOffsetWithNSString:withFloat:);
  methods[95].selector = @selector(drawableStateChanged);
  methods[96].selector = @selector(isBorderStatefulWithASBorder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "borderTop_", "LASBorder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderLeft_", "LASBorder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderRight_", "LASBorder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderBottom_", "LASBorder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderTopLeftRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderTopRightRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderBottomRightRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "borderBottomLeftRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultColor_", "LNSObject;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "METHODS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 109, 110, -1 },
    { "view_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isWrappedWidget_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "getAttribute", "LASWidgetAttribute;", "()Ljava/util/List<Ljava/lang/String;>;", "createBorderStyle", "LNSString;", "createBorderDashSpacing", "I", "createBorderDashWidth", "createBorderColor", "LNSObject;", "createBorderWidth", "createBorderRadius", "F", "createBorderColorBottom", "createBorderColorTop", "createBorderColorLeft", "createBorderColorLeftInternal", "createBorderColorRight", "createBorderColorRightInternal", "createBorderWidthRight", "createBorderWidthRightInternal", "createBorderWidthTop", "createBorderWidthBottom", "createBorderWidthLeft", "createBorderWidthLeftInternal", "createBorderStyleTop", "createBorderDashSpacingTop", "createBorderDashWidthTop", "createBorderStyleBottom", "createBorderDashSpacingBottom", "createBorderDashWidthBottom", "createBorderStyleLeft", "createBorderStyleLeftInternal", "createBorderDashSpacingLeft", "createBorderDashSpacingLeftInternal", "createBorderDashWidthLeft", "createBorderDashWidthLeftInternal", "createBorderStyleRight", "createBorderStyleRightInternal", "createBorderDashSpacingRight", "createBorderDashSpacingRightInternal", "createBorderDashWidthRight", "createBorderDashWidthRightInternal", "createBorderRadiusTopLeft", "createBorderRadiusTopLeftInternal", "createBorderRadiusTopRight", "createBorderRadiusTopRightInternal", "createBorderRadiusBottomLeft", "createBorderRadiusBottomLeftInternal", "createBorderRadiusBottomRight", "createBorderRadiusBottomRightInternal", "createBorder", "FFFFLNSObject;LNSObject;LNSObject;LASBorder;LNSString;", "createArc", "FFFFLASBorder;LNSObject;LNSString;", "FFFFLASBorder;LNSObject;LNSString;Z", "hasRadius", "LASBorder;", "createBorderBottom", "LNSObject;LNSObject;LNSObject;III", "createBorderRight", "createBorderLeft", "createBorderTop", "getOffset", "LASBorder;LNSString;", "createArcFullPath", "LNSObject;LADView;", "execute", "LNSString;[LNSObject;", "setMaskLayer", "LNSObject;LNSObject;", "drawRect", "nativeCreateBorderLeft", "LASBorder;LNSObject;", "nativeCreateBorderRight", "nativeCreateBorderTop", "nativeCreateBorderBottom", "reset", "setDefaultColor", "LASBorderDecorator;", "drawPath", "LNSObject;LNSObject;LNSObject;", "setColorAndWidth", "LNSObject;LNSObject;LNSObject;I", "nativeSetColorAndWidth", "setDottedEffect", "LNSObject;LNSObject;II", "setDashedEffect", "nativeInvalidate", "createMaskLayer", "LNSObject;Z", "setCornerRadiusOnSuperView", "setCornerRadiusOnView", "setFrame", "quadTo", "LNSObject;FFFF", "moveTo", "LNSObject;FF", "lineTo", "arcTo", "LNSObject;LASBorderDecorator_Arc;", "closePath", "adjustOffset", "LNSString;F", "isBorderStateful", &ASBorderDecorator_METHODS, "Ljava/util/List<Ljava/lang/String;>;", "LASBorderDecorator_Arc;" };
  static const J2ObjcClassInfo _ASBorderDecorator = { "BorderDecorator", "com.ashera.layout.decorator", ptrTable, methods, fields, 7, 0x1, 97, 13, -1, 111, -1, -1, -1 };
  return &_ASBorderDecorator;
}

+ (void)initialize {
  if (self == [ASBorderDecorator class]) {
    ASBorderDecorator_METHODS = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"drawRect", @"setFrame" } count:2 type:NSString_class_()]);
    J2OBJC_SET_INITIALIZED(ASBorderDecorator)
  }
}

@end

void ASBorderDecorator_init(ASBorderDecorator *self) {
  NSObject_init(self);
  self->borderTopLeftRadius_ = 0;
  self->borderTopRightRadius_ = 0;
  self->borderBottomRightRadius_ = 0;
  self->borderBottomLeftRadius_ = 0;
}

ASBorderDecorator *new_ASBorderDecorator_init() {
  J2OBJC_NEW_IMPL(ASBorderDecorator, init)
}

ASBorderDecorator *create_ASBorderDecorator_init() {
  J2OBJC_CREATE_IMPL(ASBorderDecorator, init)
}

void ASBorderDecorator_initBorderTop(ASBorderDecorator *self) {
  if (self->borderTop_ == nil) {
    self->borderTop_ = new_ASBorder_init();
  }
}

void ASBorderDecorator_initBorderLeft(ASBorderDecorator *self) {
  if (self->borderLeft_ == nil) {
    self->borderLeft_ = new_ASBorder_init();
  }
}

void ASBorderDecorator_initBorderRight(ASBorderDecorator *self) {
  if (self->borderRight_ == nil) {
    self->borderRight_ = new_ASBorder_init();
  }
}

void ASBorderDecorator_initBorderBottom(ASBorderDecorator *self) {
  if (self->borderBottom_ == nil) {
    self->borderBottom_ = new_ASBorder_init();
  }
}

void ASBorderDecorator_createBorderColorLeftInternalWithId_(ASBorderDecorator *self, id color) {
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderLeft_)) setColorWithId:color];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderColorRightInternalWithId_(ASBorderDecorator *self, id color) {
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderRight_)) setColorWithId:color];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderWidthRightInternalWithInt_(ASBorderDecorator *self, jint borderWith) {
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderRight_)) setWidthWithInt:borderWith];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderWidthLeftInternalWithInt_(ASBorderDecorator *self, jint borderWith) {
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderLeft_)) setWidthWithInt:borderWith];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderStyleLeftInternalWithNSString_(ASBorderDecorator *self, NSString *style) {
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderLeft_)) setStyleWithNSString:style];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderDashSpacingLeftInternalWithInt_(ASBorderDecorator *self, jint dashSpacing) {
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderLeft_)) setDashSpacingWithInt:dashSpacing];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderDashWidthLeftInternalWithInt_(ASBorderDecorator *self, jint dashWidth) {
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderLeft_)) setDashWidthWithInt:dashWidth];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderStyleRightInternalWithNSString_(ASBorderDecorator *self, NSString *style) {
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderRight_)) setStyleWithNSString:style];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderDashSpacingRightInternalWithInt_(ASBorderDecorator *self, jint dashSpacing) {
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderRight_)) setDashSpacingWithInt:dashSpacing];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderDashWidthRightInternalWithInt_(ASBorderDecorator *self, jint dashWidth) {
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderRight_)) setDashWidthWithInt:dashWidth];
  ASBorderDecorator_invalidate(self);
}

void ASBorderDecorator_createBorderRadiusTopLeftInternalWithFloat_(ASBorderDecorator *self, jfloat radius) {
  self->borderTopLeftRadius_ = radius;
  ASBorderDecorator_initBorderTop(self);
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderTop_)) setTopLeftRadiusWithFloat:radius];
  [((ASBorder *) nil_chk(self->borderLeft_)) setTopLeftRadiusWithFloat:radius];
  if (ASBorderDecorator_invalidate(self)) {
    [self createMask];
  }
}

void ASBorderDecorator_createBorderRadiusTopRightInternalWithFloat_(ASBorderDecorator *self, jfloat radius) {
  self->borderTopRightRadius_ = radius;
  ASBorderDecorator_initBorderTop(self);
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderTop_)) setTopRightRadiusWithFloat:radius];
  [((ASBorder *) nil_chk(self->borderRight_)) setTopRightRadiusWithFloat:radius];
  if (ASBorderDecorator_invalidate(self)) {
    [self createMask];
  }
}

void ASBorderDecorator_createBorderRadiusBottomLeftInternalWithFloat_(ASBorderDecorator *self, jfloat radius) {
  self->borderBottomLeftRadius_ = radius;
  ASBorderDecorator_initBorderBottom(self);
  ASBorderDecorator_initBorderLeft(self);
  [((ASBorder *) nil_chk(self->borderBottom_)) setBottomLeftRadiusWithFloat:radius];
  [((ASBorder *) nil_chk(self->borderLeft_)) setBottomLeftRadiusWithFloat:radius];
  if (ASBorderDecorator_invalidate(self)) {
    [self createMask];
  }
}

void ASBorderDecorator_createBorderRadiusBottomRightInternalWithFloat_(ASBorderDecorator *self, jfloat radius) {
  self->borderBottomRightRadius_ = radius;
  ASBorderDecorator_initBorderBottom(self);
  ASBorderDecorator_initBorderRight(self);
  [((ASBorder *) nil_chk(self->borderBottom_)) setBottomRightRadiusWithFloat:radius];
  [((ASBorder *) nil_chk(self->borderRight_)) setBottomRightRadiusWithFloat:radius];
  if (ASBorderDecorator_invalidate(self)) {
    [self createMask];
  }
}

void ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_(ASBorderDecorator *self, jfloat x1, jfloat y1, jfloat x2, jfloat y2, ASBorder *border, id path, NSString *where) {
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(self, x1, y1, x2, y2, border, path, where, true);
}

void ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(ASBorderDecorator *self, jfloat x1, jfloat y1, jfloat x2, jfloat y2, ASBorder *border, id path, NSString *where, jboolean partial) {
  if (border == nil) {
    border = new_ASBorder_init();
  }
  switch (JreIndexOfStr(where, (id[]){ @"left", @"bottom", @"right", @"top" }, 4)) {
    case 0:
    {
      jfloat topleftRadius = [border getTopLeftRadius];
      jfloat bottomleftRadius = [border getBottomLeftRadius];
      if (partial) {
        ASBorderDecorator_moveToWithId_withFloat_withFloat_(self, path, x2, y2);
      }
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x2, y2 - 2 * bottomleftRadius, x2 + 2 * bottomleftRadius, y2, 90 + 45, 45));
      ASBorderDecorator_lineToWithId_withFloat_withFloat_(self, path, x1, y1 + topleftRadius);
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x1, y1, x1 + 2 * topleftRadius, y1 + 2 * topleftRadius, 180, 45));
      break;
    }
    case 1:
    {
      jfloat leftRadius = [border getBottomLeftRadius];
      jfloat rightRadius = [border getBottomRightRadius];
      if (partial) {
        ASBorderDecorator_moveToWithId_withFloat_withFloat_(self, path, x2, y2);
      }
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x2 - 2 * rightRadius, y2 - 2 * rightRadius, x2, y2, 45, 45));
      ASBorderDecorator_lineToWithId_withFloat_withFloat_(self, path, x1 + leftRadius, y1);
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x1, y1 - 2 * leftRadius, x1 + 2 * leftRadius, y1, 90, 45));
      break;
    }
    case 2:
    {
      jfloat topRightRadius = [border getTopRightRadius];
      jfloat bottomRightRadius = [border getBottomRightRadius];
      if (partial) {
        ASBorderDecorator_moveToWithId_withFloat_withFloat_(self, path, x1, y1);
      }
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x1 - 2 * topRightRadius, y1, x1, y1 + 2 * topRightRadius, 270 + 45, 45));
      ASBorderDecorator_lineToWithId_withFloat_withFloat_(self, path, x2, y2 - bottomRightRadius);
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x2 - 2 * bottomRightRadius, y2 - 2 * bottomRightRadius, x2, y2, 0, 45));
      break;
    }
    case 3:
    {
      jfloat leftRadius = [border getTopLeftRadius];
      jfloat rightRadius = [border getTopRightRadius];
      if (partial) {
        ASBorderDecorator_moveToWithId_withFloat_withFloat_(self, path, x1, y1);
      }
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x1, y1, x1 + 2 * leftRadius, y1 + 2 * leftRadius, 180 + 45, 45));
      ASBorderDecorator_lineToWithId_withFloat_withFloat_(self, path, x2 - rightRadius, y2);
      ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(self, path, new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(x2 - 2 * rightRadius, y2, x2, y2 + 2 * rightRadius, 270, 45));
      break;
    }
    default:
    break;
  }
}

jboolean ASBorderDecorator_hasRadiusWithASBorder_(ASBorderDecorator *self, ASBorder *border) {
  return [((ASBorder *) nil_chk(border)) getTopLeftRadius] > 0 || [border getTopRightRadius] > 0 || [border getBottomLeftRadius] > 0 || [border getBottomRightRadius] > 0;
}

jboolean ASBorderDecorator_isBorderNotPresent(ASBorderDecorator *self) {
  return self->borderTop_ == nil && self->borderLeft_ == nil && self->borderRight_ == nil && self->borderBottom_ == nil;
}

void ASBorderDecorator_createBorderBottomWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset) {
  if (self->borderBottom_ != nil && [self->borderBottom_ getWidth] > 0) {
    jfloat offset = ASBorderDecorator_getOffsetWithASBorder_withNSString_(self, self->borderBottom_, @"bottom");
    [self createBorderWithFloat:0 withFloat:height - offset withFloat:width withFloat:height - offset withId:canvas withId:path withId:paint withASBorder:self->borderBottom_ withNSString:@"bottom"];
  }
}

void ASBorderDecorator_createBorderRightWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset) {
  if (self->borderRight_ != nil && [self->borderRight_ getWidth] > 0) {
    jfloat offset = ASBorderDecorator_getOffsetWithASBorder_withNSString_(self, self->borderRight_, @"right");
    [self createBorderWithFloat:width - offset withFloat:0 withFloat:width - offset withFloat:height withId:canvas withId:path withId:paint withASBorder:self->borderRight_ withNSString:@"right"];
  }
}

void ASBorderDecorator_createBorderLeftWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset) {
  if (self->borderLeft_ != nil && [self->borderLeft_ getWidth] > 0) {
    jfloat offset = ASBorderDecorator_getOffsetWithASBorder_withNSString_(self, self->borderLeft_, @"left");
    [self createBorderWithFloat:offset withFloat:0 withFloat:offset withFloat:height withId:canvas withId:path withId:paint withASBorder:self->borderLeft_ withNSString:@"left"];
  }
}

void ASBorderDecorator_createBorderTopWithId_withId_withId_withInt_withInt_withInt_(ASBorderDecorator *self, id canvas, id path, id paint, jint width, jint height, jint topOffset) {
  if (self->borderTop_ != nil && [self->borderTop_ getWidth] > 0) {
    jfloat offset = ASBorderDecorator_getOffsetWithASBorder_withNSString_(self, self->borderTop_, @"top");
    [self createBorderWithFloat:0 withFloat:topOffset + offset withFloat:width withFloat:topOffset + offset withId:canvas withId:path withId:paint withASBorder:self->borderTop_ withNSString:@"top"];
  }
}

jfloat ASBorderDecorator_getOffsetWithASBorder_withNSString_(ASBorderDecorator *self, ASBorder *border, NSString *where) {
  jfloat offset = (jfloat) [((ASBorder *) nil_chk(border)) getWidth] * 0.5f;
  offset = ASBorderDecorator_adjustOffsetWithNSString_withFloat_(self, where, offset);
  return offset;
}

jboolean ASBorderDecorator_useCornerRadius(ASBorderDecorator *self) {
  jboolean useCornerRadius = self->borderTopLeftRadius_ == self->borderTopRightRadius_ && self->borderBottomRightRadius_ == self->borderBottomLeftRadius_ && self->borderTopLeftRadius_ == self->borderBottomLeftRadius_;
  return useCornerRadius;
}

void ASBorderDecorator_createArcFullPathWithId_withADView_(ASBorderDecorator *self, id path, ADView *view) {
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(self, 0, 0, 0, [((ADView *) nil_chk(view)) getHeight], self->borderLeft_, path, @"left", false);
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(self, 0, 0, [view getWidth], 0, self->borderTop_, path, @"top", false);
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(self, [view getWidth], 0, [view getWidth], [view getHeight], self->borderRight_, path, @"right", false);
  ASBorderDecorator_createArcWithFloat_withFloat_withFloat_withFloat_withASBorder_withId_withNSString_withBoolean_(self, 0, [view getHeight], [view getWidth], [view getHeight], self->borderBottom_, path, @"bottom", false);
}

jboolean ASBorderDecorator_invalidate(ASBorderDecorator *self) {
  jboolean success = false;
  if ([((id<ASIWidget>) nil_chk(self->widget_)) isInitialised]) {
    ASBorderDecorator_nativeInvalidateWithId_(self, [((id<ASIWidget>) nil_chk(self->widget_)) asNativeWidget]);
    success = true;
  }
  return success;
}

jboolean ASBorderDecorator_isNoClip(ASBorderDecorator *self) {
  jboolean noClip = ((self->borderTopLeftRadius_ == self->borderTopRightRadius_ && self->borderBottomRightRadius_ == self->borderBottomLeftRadius_ && self->borderTopLeftRadius_ == self->borderBottomLeftRadius_) && self->borderTopLeftRadius_ == 0);
  return noClip;
}

void ASBorderDecorator_setMaskLayerWithId_withId_(ASBorderDecorator *self, id cgRect, id mypath) {
  if (ASBorderDecorator_isBorderNotPresent(self)) return;
  jboolean useCornerRadius = ASBorderDecorator_useCornerRadius(self);
  jfloat topLeftRadius = 0;
  if (self->borderTop_ != nil) {
    topLeftRadius = [self->borderTop_ getTopLeftRadius];
  }
  if (useCornerRadius) {
    if (self->isWrappedWidget_) {
      ASBorderDecorator_setCornerRadiusOnSuperViewWithFloat_(self, topLeftRadius);
    }
    else {
      ASBorderDecorator_setCornerRadiusOnViewWithFloat_(self, topLeftRadius);
    }
    return;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->widget_)) asWidget], [ADView class]);
  ASBorderDecorator_createArcFullPathWithId_withADView_(self, mypath, view);
  ASBorderDecorator_closePathWithId_(self, mypath);
  ASBorderDecorator_createMaskLayerWithId_withBoolean_(self, mypath, self->isWrappedWidget_);
}

void ASBorderDecorator_resetWithId_withId_(ASBorderDecorator *self, id path, id paint) {
}

void ASBorderDecorator_setDefaultColorWithASBorderDecorator_(ASBorderDecorator *self, ASBorderDecorator *borderDecorator) {
  borderDecorator->defaultColor_ = [UIColor blackColor];
}

void ASBorderDecorator_drawPathWithId_withId_withId_(ASBorderDecorator *self, id canvas, id mypath, id paint) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path stroke];
}

void ASBorderDecorator_setColorAndWidthWithId_withId_withId_withInt_(ASBorderDecorator *self, id mypath, id paint, id borderColor, jint width) {
  if ([borderColor isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) borderColor;
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->widget_)) asWidget], [ADView class]);
    borderColor = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(colorStateList)) getColorForStateWithIntArray:[((ADView *) nil_chk(view)) getDrawableState] withInt:ADColor_RED]);
  }
  ASBorderDecorator_nativeSetColorAndWidthWithId_withId_withId_withInt_(self, mypath, paint, ASViewImpl_getColorWithId_(borderColor), width);
}

void ASBorderDecorator_nativeSetColorAndWidthWithId_withId_withId_withInt_(ASBorderDecorator *self, id mypath, id paint, id borderColor, jint width) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path setLineWidth: width];
  [((UIColor*)borderColor) setStroke];
}

void ASBorderDecorator_setDottedEffectWithId_withId_withInt_withInt_(ASBorderDecorator *self, id mypath, id paint, jint radius, jint defaultDashSpacing) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  //CGFloat dashes[] = { [border getDashWidth], [border getDashSpacing] };
  //[path setLineDash:dashes count:2 phase:0];
}

void ASBorderDecorator_setDashedEffectWithId_withId_withInt_withInt_(ASBorderDecorator *self, id mypath, id paint, jint dashWidth, jint dashSpacing) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  CGFloat dashes[] = { dashWidth, dashSpacing};
  [path setLineDash:dashes count:2 phase:0];
}

void ASBorderDecorator_nativeInvalidateWithId_(ASBorderDecorator *self, id view) {
  [((UIView*)view) setNeedsDisplay];
}

void ASBorderDecorator_createMaskLayerWithId_withBoolean_(ASBorderDecorator *self, id mypath, jboolean isWrappedWidget) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
  maskLayer.path = path.CGPath;
  
  if (isWrappedWidget) {
    ((UIView*) self->view_).superview.layer.mask = maskLayer;
  } else {
    ((UIView*) self->view_).layer.mask = maskLayer;
  }
}

void ASBorderDecorator_setCornerRadiusOnSuperViewWithFloat_(ASBorderDecorator *self, jfloat topLeftRadius) {
  ((UIView*) self->view_).superview.layer.cornerRadius = topLeftRadius;
  ((UIView*) self->view_).superview.clipsToBounds = YES;
}

void ASBorderDecorator_setCornerRadiusOnViewWithFloat_(ASBorderDecorator *self, jfloat topLeftRadius) {
  ((UIView*) self->view_).layer.cornerRadius = topLeftRadius;
  ((UIView*) self->view_).clipsToBounds = YES;
}

void ASBorderDecorator_setFrameWithId_(ASBorderDecorator *self, id object) {
  UIBezierPath * path = [UIBezierPath new];
  [self setMaskLayerWithId:object withId:path];
}

void ASBorderDecorator_quadToWithId_withFloat_withFloat_withFloat_withFloat_(ASBorderDecorator *self, id mypath, jfloat x1, jfloat y1, jfloat x2, jfloat y2) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path addLineToPoint:CGPointMake(x2, y2)];
}

void ASBorderDecorator_moveToWithId_withFloat_withFloat_(ASBorderDecorator *self, id mypath, jfloat x, jfloat y) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path moveToPoint:CGPointMake(x, y)];
}

void ASBorderDecorator_lineToWithId_withFloat_withFloat_(ASBorderDecorator *self, id mypath, jfloat x, jfloat y) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path addLineToPoint:CGPointMake(x, y)];
}

void ASBorderDecorator_arcToWithId_withASBorderDecorator_Arc_(ASBorderDecorator *self, id mypath, ASBorderDecorator_Arc *arc) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path addArcWithCenter:CGPointMake([arc getMidPointX], [arc getMidPointY]) radius:[arc getRadius] startAngle:degreesToRadians([arc getStartAngle]) endAngle:degreesToRadians([arc getEndAngle]) clockwise:YES];
}

void ASBorderDecorator_closePathWithId_(ASBorderDecorator *self, id mypath) {
  UIBezierPath * path = (UIBezierPath*) mypath;
  [path closePath];
}

void ASBorderDecorator_addCommandIfNeeded(ASBorderDecorator *self) {
}

jfloat ASBorderDecorator_adjustOffsetWithNSString_withFloat_(ASBorderDecorator *self, NSString *where, jfloat offset) {
  return offset;
}

jboolean ASBorderDecorator_isBorderStatefulWithASBorder_(ASBorderDecorator *self, ASBorder *border) {
  return border != nil && [border getColor] != nil && [[border getColor] isKindOfClass:[ADColorStateList class]] && [((ADColorStateList *) nil_chk(((ADColorStateList *) cast_chk([border getColor], [ADColorStateList class])))) isStateful];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBorderDecorator)

@implementation ASBorderDecorator_Arc

- (instancetype)initWithFloat:(jfloat)left
                    withFloat:(jfloat)top
                    withFloat:(jfloat)right
                    withFloat:(jfloat)bottom
                      withInt:(jint)startAngle
                      withInt:(jint)sweepAngle {
  ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(self, left, top, right, bottom, startAngle, sweepAngle);
  return self;
}

- (jint)getEndAngle {
  return startAngle_ + sweepAngle_;
}

- (jfloat)getRadius {
  return ((right_ - left_) / 2.0f);
}

- (jfloat)getWidth {
  return right_ - left_;
}

- (jfloat)getHeight {
  return bottom_ - top_;
}

- (jfloat)getMidPointX {
  return left_ + ((right_ - left_) / 2.0f);
}

- (jfloat)getMidPointY {
  return top_ + ((bottom_ - top_) / 2.0f);
}

- (jint)getStartAngle {
  return startAngle_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithFloat:withFloat:withFloat:withFloat:withInt:withInt:);
  methods[1].selector = @selector(getEndAngle);
  methods[2].selector = @selector(getRadius);
  methods[3].selector = @selector(getWidth);
  methods[4].selector = @selector(getHeight);
  methods[5].selector = @selector(getMidPointX);
  methods[6].selector = @selector(getMidPointY);
  methods[7].selector = @selector(getStartAngle);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "left_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "top_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "right_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "bottom_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "startAngle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sweepAngle_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "FFFFII", "LASBorderDecorator;" };
  static const J2ObjcClassInfo _ASBorderDecorator_Arc = { "Arc", "com.ashera.layout.decorator", ptrTable, methods, fields, 7, 0x9, 8, 6, 1, -1, -1, -1, -1 };
  return &_ASBorderDecorator_Arc;
}

@end

void ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(ASBorderDecorator_Arc *self, jfloat left, jfloat top, jfloat right, jfloat bottom, jint startAngle, jint sweepAngle) {
  NSObject_init(self);
  self->left_ = left;
  self->top_ = top;
  self->right_ = right;
  self->bottom_ = bottom;
  self->sweepAngle_ = sweepAngle;
  self->startAngle_ = startAngle;
}

ASBorderDecorator_Arc *new_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(jfloat left, jfloat top, jfloat right, jfloat bottom, jint startAngle, jint sweepAngle) {
  J2OBJC_NEW_IMPL(ASBorderDecorator_Arc, initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_, left, top, right, bottom, startAngle, sweepAngle)
}

ASBorderDecorator_Arc *create_ASBorderDecorator_Arc_initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_(jfloat left, jfloat top, jfloat right, jfloat bottom, jint startAngle, jint sweepAngle) {
  J2OBJC_CREATE_IMPL(ASBorderDecorator_Arc, initWithFloat_withFloat_withFloat_withFloat_withInt_withInt_, left, top, right, bottom, startAngle, sweepAngle)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBorderDecorator_Arc)
