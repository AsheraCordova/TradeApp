//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\ViewBoundsCheck.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ViewBoundsCheck")
#ifdef RESTRICT_ViewBoundsCheck
#define INCLUDE_ALL_ViewBoundsCheck 0
#else
#define INCLUDE_ALL_ViewBoundsCheck 1
#endif
#undef RESTRICT_ViewBoundsCheck

#if !defined (ADXViewBoundsCheck_) && (INCLUDE_ALL_ViewBoundsCheck || defined(INCLUDE_ADXViewBoundsCheck))
#define ADXViewBoundsCheck_

@class ADView;
@class ADXViewBoundsCheck_BoundFlags;
@protocol ADXViewBoundsCheck_Callback;

/*!
 @brief A utility class used to check the boundaries of a given view within its parent view based on
  a set of boundary flags.
 */
@interface ADXViewBoundsCheck : NSObject {
 @public
  id<ADXViewBoundsCheck_Callback> mCallback_;
  ADXViewBoundsCheck_BoundFlags *mBoundFlags_;
}

#pragma mark Package-Private

- (instancetype)initPackagePrivateWithADXViewBoundsCheck_Callback:(id<ADXViewBoundsCheck_Callback>)callback;

/*!
 @brief Returns the first view starting from fromIndex to toIndex in views whose bounds lie within
  its parent bounds based on the provided preferredBoundFlags.If no match is found based on
  the preferred flags, and a nonzero acceptableBoundFlags is specified, the last view whose
  bounds lie within its parent view based on the acceptableBoundFlags is returned.
 If no such
  view is found based on either of these two flags, null is returned.
 @param fromIndex The view position index to start the search from.
 @param toIndex The view position index to end the search at.
 @param preferredBoundFlags The flags indicating the preferred match. Once a match is found                             based on this flag, that view is returned instantly.
 @param acceptableBoundFlags The flags indicating the acceptable match if no preferred match                              is found. If so, and if acceptableBoundFlags is non-zero, the
                               last matching acceptable view is returned. Otherwise, null is
                               returned.
 @return The first view that satisfies acceptableBoundFlags or the last view satisfying
  acceptableBoundFlags boundary conditions.
 */
- (ADView *)findOneViewWithinBoundFlagsWithInt:(jint)fromIndex
                                       withInt:(jint)toIndex
                                       withInt:(jint)preferredBoundFlags
                                       withInt:(jint)acceptableBoundFlags;

/*!
 @brief Returns whether the specified view lies within the boundary condition of its parent view.
 @param child The child view to be checked.
 @param boundsFlags The flag against which the child view and parent view are matched.
 @return True if the view meets the boundsFlag, false otherwise.
 */
- (jboolean)isViewWithinBoundFlagsWithADView:(ADView *)child
                                     withInt:(jint)boundsFlags;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewBoundsCheck)

J2OBJC_FIELD_SETTER(ADXViewBoundsCheck, mCallback_, id<ADXViewBoundsCheck_Callback>)
J2OBJC_FIELD_SETTER(ADXViewBoundsCheck, mBoundFlags_, ADXViewBoundsCheck_BoundFlags *)

inline jint ADXViewBoundsCheck_get_GT(void);
#define ADXViewBoundsCheck_GT 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, GT, jint)

inline jint ADXViewBoundsCheck_get_EQ(void);
#define ADXViewBoundsCheck_EQ 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, EQ, jint)

inline jint ADXViewBoundsCheck_get_LT(void);
#define ADXViewBoundsCheck_LT 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, LT, jint)

inline jint ADXViewBoundsCheck_get_CVS_PVS_POS(void);
#define ADXViewBoundsCheck_CVS_PVS_POS 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, CVS_PVS_POS, jint)

/*!
 @brief The child view's start should be strictly greater than parent view's start.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVS_GT_PVS(void);
#define ADXViewBoundsCheck_FLAG_CVS_GT_PVS 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVS_GT_PVS, jint)

/*!
 @brief The child view's start can be equal to its parent view's start.This flag follows with GT
  or LT indicating greater (less) than or equal relation.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVS_EQ_PVS(void);
#define ADXViewBoundsCheck_FLAG_CVS_EQ_PVS 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVS_EQ_PVS, jint)

/*!
 @brief The child view's start should be strictly less than parent view's start.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVS_LT_PVS(void);
#define ADXViewBoundsCheck_FLAG_CVS_LT_PVS 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVS_LT_PVS, jint)

inline jint ADXViewBoundsCheck_get_CVS_PVE_POS(void);
#define ADXViewBoundsCheck_CVS_PVE_POS 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, CVS_PVE_POS, jint)

/*!
 @brief The child view's start should be strictly greater than parent view's end.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVS_GT_PVE(void);
#define ADXViewBoundsCheck_FLAG_CVS_GT_PVE 16
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVS_GT_PVE, jint)

/*!
 @brief The child view's start can be equal to its parent view's end.This flag follows with GT
  or LT indicating greater (less) than or equal relation.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVS_EQ_PVE(void);
#define ADXViewBoundsCheck_FLAG_CVS_EQ_PVE 32
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVS_EQ_PVE, jint)

/*!
 @brief The child view's start should be strictly less than parent view's end.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVS_LT_PVE(void);
#define ADXViewBoundsCheck_FLAG_CVS_LT_PVE 64
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVS_LT_PVE, jint)

inline jint ADXViewBoundsCheck_get_CVE_PVS_POS(void);
#define ADXViewBoundsCheck_CVE_PVS_POS 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, CVE_PVS_POS, jint)

/*!
 @brief The child view's end should be strictly greater than parent view's start.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVE_GT_PVS(void);
#define ADXViewBoundsCheck_FLAG_CVE_GT_PVS 256
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVE_GT_PVS, jint)

/*!
 @brief The child view's end can be equal to its parent view's start.This flag follows with GT
  or LT indicating greater (less) than or equal relation.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVE_EQ_PVS(void);
#define ADXViewBoundsCheck_FLAG_CVE_EQ_PVS 512
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVE_EQ_PVS, jint)

/*!
 @brief The child view's end should be strictly less than parent view's start.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVE_LT_PVS(void);
#define ADXViewBoundsCheck_FLAG_CVE_LT_PVS 1024
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVE_LT_PVS, jint)

inline jint ADXViewBoundsCheck_get_CVE_PVE_POS(void);
#define ADXViewBoundsCheck_CVE_PVE_POS 12
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, CVE_PVE_POS, jint)

/*!
 @brief The child view's end should be strictly greater than parent view's end.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVE_GT_PVE(void);
#define ADXViewBoundsCheck_FLAG_CVE_GT_PVE 4096
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVE_GT_PVE, jint)

/*!
 @brief The child view's end can be equal to its parent view's end.This flag follows with GT
  or LT indicating greater (less) than or equal relation.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVE_EQ_PVE(void);
#define ADXViewBoundsCheck_FLAG_CVE_EQ_PVE 8192
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVE_EQ_PVE, jint)

/*!
 @brief The child view's end should be strictly less than parent view's end.
 */
inline jint ADXViewBoundsCheck_get_FLAG_CVE_LT_PVE(void);
#define ADXViewBoundsCheck_FLAG_CVE_LT_PVE 16384
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, FLAG_CVE_LT_PVE, jint)

inline jint ADXViewBoundsCheck_get_MASK(void);
#define ADXViewBoundsCheck_MASK 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewBoundsCheck, MASK, jint)

FOUNDATION_EXPORT void ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(ADXViewBoundsCheck *self, id<ADXViewBoundsCheck_Callback> callback);

FOUNDATION_EXPORT ADXViewBoundsCheck *new_ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(id<ADXViewBoundsCheck_Callback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXViewBoundsCheck *create_ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(id<ADXViewBoundsCheck_Callback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ADXViewBoundsCheck)

@compatibility_alias AndroidxRecyclerviewWidgetViewBoundsCheck ADXViewBoundsCheck;

#endif

#if !defined (ADXViewBoundsCheck_ViewBounds_) && (INCLUDE_ALL_ViewBoundsCheck || defined(INCLUDE_ADXViewBoundsCheck_ViewBounds))
#define ADXViewBoundsCheck_ViewBounds_

#define RESTRICT_JavaLangAnnotationAnnotation 1
#define INCLUDE_JavaLangAnnotationAnnotation 1
#include "java/lang/annotation/Annotation.h"

/*!
 @brief The set of flags that can be passed for checking the view boundary conditions.
 CVS in the flag name indicates the child view, and PV indicates the parent view.\
  The following S, E indicate a view's start and end points, respectively.
  GT and LT indicate a strictly greater and less than relationship.
  Greater than or equal (or less than or equal) can be specified by setting both GT and EQ (or
  LT and EQ) flags.
  For instance, setting both <code>FLAG_CVS_GT_PVS</code> and <code>FLAG_CVS_EQ_PVS</code> indicate the
  child view's start should be greater than or equal to its parent start.
 */
@protocol ADXViewBoundsCheck_ViewBounds < JavaLangAnnotationAnnotation >

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewBoundsCheck_ViewBounds)

J2OBJC_TYPE_LITERAL_HEADER(ADXViewBoundsCheck_ViewBounds)

#endif

#if !defined (ADXViewBoundsCheck_BoundFlags_) && (INCLUDE_ALL_ViewBoundsCheck || defined(INCLUDE_ADXViewBoundsCheck_BoundFlags))
#define ADXViewBoundsCheck_BoundFlags_

@interface ADXViewBoundsCheck_BoundFlags : NSObject {
 @public
  jint mBoundFlags_;
  jint mRvStart_;
  jint mRvEnd_;
  jint mChildStart_;
  jint mChildEnd_;
}

#pragma mark Package-Private

- (instancetype)init;

- (void)addFlagsWithInt:(jint)flags;

- (jboolean)boundsMatch;

- (jint)compareWithInt:(jint)x
               withInt:(jint)y;

- (void)resetFlags;

- (void)setBoundsWithInt:(jint)rvStart
                 withInt:(jint)rvEnd
                 withInt:(jint)childStart
                 withInt:(jint)childEnd;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewBoundsCheck_BoundFlags)

FOUNDATION_EXPORT void ADXViewBoundsCheck_BoundFlags_init(ADXViewBoundsCheck_BoundFlags *self);

FOUNDATION_EXPORT ADXViewBoundsCheck_BoundFlags *new_ADXViewBoundsCheck_BoundFlags_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXViewBoundsCheck_BoundFlags *create_ADXViewBoundsCheck_BoundFlags_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXViewBoundsCheck_BoundFlags)

#endif

#if !defined (ADXViewBoundsCheck_Callback_) && (INCLUDE_ALL_ViewBoundsCheck || defined(INCLUDE_ADXViewBoundsCheck_Callback))
#define ADXViewBoundsCheck_Callback_

@class ADView;

/*!
 @brief Callback provided by the user of this class in order to retrieve information about child and
  parent boundaries.
 */
@protocol ADXViewBoundsCheck_Callback < JavaObject >

- (ADView *)getChildAtWithInt:(jint)index;

- (jint)getParentStart;

- (jint)getParentEnd;

- (jint)getChildStartWithADView:(ADView *)view;

- (jint)getChildEndWithADView:(ADView *)view;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewBoundsCheck_Callback)

J2OBJC_TYPE_LITERAL_HEADER(ADXViewBoundsCheck_Callback)

#endif

#pragma pop_macro("INCLUDE_ALL_ViewBoundsCheck")
