//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\ArrayLinkedVariables.java
//

#include "ArrayLinkedVariables.h"
#include "ArrayRow.h"
#include "Cache.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SolverVariable.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"


@interface ADXArrayLinkedVariables () {
 @public
  __unsafe_unretained ADXArrayRow *mRow_;
  jint ROW_SIZE_;
  ADXSolverVariable *candidate_;
  IOSIntArray *mArrayIndices_;
  IOSIntArray *mArrayNextIndices_;
  IOSFloatArray *mArrayValues_;
  jint mHead_;
  jint mLast_;
  jboolean mDidFillOnce_;
}

@end

J2OBJC_FIELD_SETTER(ADXArrayLinkedVariables, candidate_, ADXSolverVariable *)
J2OBJC_FIELD_SETTER(ADXArrayLinkedVariables, mArrayIndices_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXArrayLinkedVariables, mArrayNextIndices_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXArrayLinkedVariables, mArrayValues_, IOSFloatArray *)

inline jboolean ADXArrayLinkedVariables_get_DEBUG(void);
#define ADXArrayLinkedVariables_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXArrayLinkedVariables, DEBUG, jboolean)

inline jboolean ADXArrayLinkedVariables_get_FULL_NEW_CHECK(void);
#define ADXArrayLinkedVariables_FULL_NEW_CHECK false
J2OBJC_STATIC_FIELD_CONSTANT(ADXArrayLinkedVariables, FULL_NEW_CHECK, jboolean)

inline jfloat ADXArrayLinkedVariables_get_epsilon(void);
inline jfloat ADXArrayLinkedVariables_set_epsilon(jfloat value);
inline jfloat *ADXArrayLinkedVariables_getRef_epsilon(void);
static jfloat ADXArrayLinkedVariables_epsilon = 0.001f;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXArrayLinkedVariables, epsilon, jfloat)

__attribute__((unused)) static jfloat ADXArrayLinkedVariables_removeWithADXSolverVariable_withBoolean_(ADXArrayLinkedVariables *self, ADXSolverVariable *variable, jboolean removeFromDefinition);

__attribute__((unused)) static jfloat ADXArrayLinkedVariables_getWithADXSolverVariable_(ADXArrayLinkedVariables *self, ADXSolverVariable *v);

@implementation ADXArrayLinkedVariables

- (instancetype)initWithADXArrayRow:(ADXArrayRow *)arrayRow
                       withADXCache:(ADXCache *)cache {
  ADXArrayLinkedVariables_initWithADXArrayRow_withADXCache_(self, arrayRow, cache);
  return self;
}

- (void)putWithADXSolverVariable:(ADXSolverVariable *)variable
                       withFloat:(jfloat)value {
  if (value == 0) {
    ADXArrayLinkedVariables_removeWithADXSolverVariable_withBoolean_(self, variable, true);
    return;
  }
  if (mHead_ == ADXArrayLinkedVariables_NONE) {
    mHead_ = 0;
    *IOSFloatArray_GetRef(nil_chk(mArrayValues_), mHead_) = value;
    *IOSIntArray_GetRef(nil_chk(mArrayIndices_), mHead_) = ((ADXSolverVariable *) nil_chk(variable))->id__;
    *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), mHead_) = ADXArrayLinkedVariables_NONE;
    variable->usageInRowCount_++;
    [variable addToRowWithADXArrayRow:mRow_];
    currentSize_++;
    if (!mDidFillOnce_) {
      mLast_++;
      if (mLast_ >= ((IOSIntArray *) nil_chk(mArrayIndices_))->size_) {
        mDidFillOnce_ = true;
        mLast_ = mArrayIndices_->size_ - 1;
      }
    }
    return;
  }
  jint current = mHead_;
  jint previous = ADXArrayLinkedVariables_NONE;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    if (IOSIntArray_Get(nil_chk(mArrayIndices_), current) == ((ADXSolverVariable *) nil_chk(variable))->id__) {
      *IOSFloatArray_GetRef(nil_chk(mArrayValues_), current) = value;
      return;
    }
    if (IOSIntArray_Get(mArrayIndices_, current) < variable->id__) {
      previous = current;
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  jint availableIndice = mLast_ + 1;
  if (mDidFillOnce_) {
    if (IOSIntArray_Get(nil_chk(mArrayIndices_), mLast_) == ADXArrayLinkedVariables_NONE) {
      availableIndice = mLast_;
    }
    else {
      availableIndice = mArrayIndices_->size_;
    }
  }
  if (availableIndice >= ((IOSIntArray *) nil_chk(mArrayIndices_))->size_) {
    if (currentSize_ < mArrayIndices_->size_) {
      for (jint i = 0; i < mArrayIndices_->size_; i++) {
        if (IOSIntArray_Get(mArrayIndices_, i) == ADXArrayLinkedVariables_NONE) {
          availableIndice = i;
          break;
        }
      }
    }
  }
  if (availableIndice >= mArrayIndices_->size_) {
    availableIndice = mArrayIndices_->size_;
    ROW_SIZE_ *= 2;
    mDidFillOnce_ = false;
    mLast_ = availableIndice - 1;
    JreStrongAssign(&mArrayValues_, JavaUtilArrays_copyOfWithFloatArray_withInt_(mArrayValues_, ROW_SIZE_));
    JreStrongAssign(&mArrayIndices_, JavaUtilArrays_copyOfWithIntArray_withInt_(mArrayIndices_, ROW_SIZE_));
    JreStrongAssign(&mArrayNextIndices_, JavaUtilArrays_copyOfWithIntArray_withInt_(mArrayNextIndices_, ROW_SIZE_));
  }
  *IOSIntArray_GetRef(nil_chk(mArrayIndices_), availableIndice) = ((ADXSolverVariable *) nil_chk(variable))->id__;
  *IOSFloatArray_GetRef(nil_chk(mArrayValues_), availableIndice) = value;
  if (previous != ADXArrayLinkedVariables_NONE) {
    *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), availableIndice) = IOSIntArray_Get(mArrayNextIndices_, previous);
    *IOSIntArray_GetRef(mArrayNextIndices_, previous) = availableIndice;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), availableIndice) = mHead_;
    mHead_ = availableIndice;
  }
  variable->usageInRowCount_++;
  [variable addToRowWithADXArrayRow:mRow_];
  currentSize_++;
  if (!mDidFillOnce_) {
    mLast_++;
  }
  if (currentSize_ >= ((IOSIntArray *) nil_chk(mArrayIndices_))->size_) {
    mDidFillOnce_ = true;
  }
  if (mLast_ >= mArrayIndices_->size_) {
    mDidFillOnce_ = true;
    mLast_ = mArrayIndices_->size_ - 1;
  }
}

- (void)addWithADXSolverVariable:(ADXSolverVariable *)variable
                       withFloat:(jfloat)value
                     withBoolean:(jboolean)removeFromDefinition {
  if (value > -ADXArrayLinkedVariables_epsilon && value < ADXArrayLinkedVariables_epsilon) {
    return;
  }
  if (mHead_ == ADXArrayLinkedVariables_NONE) {
    mHead_ = 0;
    *IOSFloatArray_GetRef(nil_chk(mArrayValues_), mHead_) = value;
    *IOSIntArray_GetRef(nil_chk(mArrayIndices_), mHead_) = ((ADXSolverVariable *) nil_chk(variable))->id__;
    *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), mHead_) = ADXArrayLinkedVariables_NONE;
    variable->usageInRowCount_++;
    [variable addToRowWithADXArrayRow:mRow_];
    currentSize_++;
    if (!mDidFillOnce_) {
      mLast_++;
      if (mLast_ >= ((IOSIntArray *) nil_chk(mArrayIndices_))->size_) {
        mDidFillOnce_ = true;
        mLast_ = mArrayIndices_->size_ - 1;
      }
    }
    return;
  }
  jint current = mHead_;
  jint previous = ADXArrayLinkedVariables_NONE;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    jint idx = IOSIntArray_Get(nil_chk(mArrayIndices_), current);
    if (idx == ((ADXSolverVariable *) nil_chk(variable))->id__) {
      jfloat v = IOSFloatArray_Get(nil_chk(mArrayValues_), current) + value;
      if (v > -ADXArrayLinkedVariables_epsilon && v < ADXArrayLinkedVariables_epsilon) {
        v = 0;
      }
      *IOSFloatArray_GetRef(mArrayValues_, current) = v;
      if (v == 0) {
        if (current == mHead_) {
          mHead_ = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
        }
        else {
          *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), previous) = IOSIntArray_Get(mArrayNextIndices_, current);
        }
        if (removeFromDefinition) {
          [variable removeFromRowWithADXArrayRow:mRow_];
        }
        if (mDidFillOnce_) {
          mLast_ = current;
        }
        variable->usageInRowCount_--;
        currentSize_--;
      }
      return;
    }
    if (IOSIntArray_Get(mArrayIndices_, current) < variable->id__) {
      previous = current;
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  jint availableIndice = mLast_ + 1;
  if (mDidFillOnce_) {
    if (IOSIntArray_Get(nil_chk(mArrayIndices_), mLast_) == ADXArrayLinkedVariables_NONE) {
      availableIndice = mLast_;
    }
    else {
      availableIndice = mArrayIndices_->size_;
    }
  }
  if (availableIndice >= ((IOSIntArray *) nil_chk(mArrayIndices_))->size_) {
    if (currentSize_ < mArrayIndices_->size_) {
      for (jint i = 0; i < mArrayIndices_->size_; i++) {
        if (IOSIntArray_Get(mArrayIndices_, i) == ADXArrayLinkedVariables_NONE) {
          availableIndice = i;
          break;
        }
      }
    }
  }
  if (availableIndice >= mArrayIndices_->size_) {
    availableIndice = mArrayIndices_->size_;
    ROW_SIZE_ *= 2;
    mDidFillOnce_ = false;
    mLast_ = availableIndice - 1;
    JreStrongAssign(&mArrayValues_, JavaUtilArrays_copyOfWithFloatArray_withInt_(mArrayValues_, ROW_SIZE_));
    JreStrongAssign(&mArrayIndices_, JavaUtilArrays_copyOfWithIntArray_withInt_(mArrayIndices_, ROW_SIZE_));
    JreStrongAssign(&mArrayNextIndices_, JavaUtilArrays_copyOfWithIntArray_withInt_(mArrayNextIndices_, ROW_SIZE_));
  }
  *IOSIntArray_GetRef(nil_chk(mArrayIndices_), availableIndice) = ((ADXSolverVariable *) nil_chk(variable))->id__;
  *IOSFloatArray_GetRef(nil_chk(mArrayValues_), availableIndice) = value;
  if (previous != ADXArrayLinkedVariables_NONE) {
    *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), availableIndice) = IOSIntArray_Get(mArrayNextIndices_, previous);
    *IOSIntArray_GetRef(mArrayNextIndices_, previous) = availableIndice;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(mArrayNextIndices_), availableIndice) = mHead_;
    mHead_ = availableIndice;
  }
  variable->usageInRowCount_++;
  [variable addToRowWithADXArrayRow:mRow_];
  currentSize_++;
  if (!mDidFillOnce_) {
    mLast_++;
  }
  if (mLast_ >= ((IOSIntArray *) nil_chk(mArrayIndices_))->size_) {
    mDidFillOnce_ = true;
    mLast_ = mArrayIndices_->size_ - 1;
  }
}

- (jfloat)useWithADXArrayRow:(ADXArrayRow *)definition
                 withBoolean:(jboolean)removeFromDefinition {
  jfloat value = ADXArrayLinkedVariables_getWithADXSolverVariable_(self, ((ADXArrayRow *) nil_chk(definition))->variable_);
  ADXArrayLinkedVariables_removeWithADXSolverVariable_withBoolean_(self, definition->variable_, removeFromDefinition);
  id<ADXArrayRow_ArrayRowVariables> definitionVariables = JreRetainedLocalValue(definition->variables_);
  jint definitionSize = [((id<ADXArrayRow_ArrayRowVariables>) nil_chk(definitionVariables)) getCurrentSize];
  for (jint i = 0; i < definitionSize; i++) {
    ADXSolverVariable *definitionVariable = JreRetainedLocalValue([definitionVariables getVariableWithInt:i]);
    jfloat definitionValue = [definitionVariables getWithADXSolverVariable:definitionVariable];
    [self addWithADXSolverVariable:definitionVariable withFloat:definitionValue * value withBoolean:removeFromDefinition];
  }
  return value;
}

- (jfloat)removeWithADXSolverVariable:(ADXSolverVariable *)variable
                          withBoolean:(jboolean)removeFromDefinition {
  return ADXArrayLinkedVariables_removeWithADXSolverVariable_withBoolean_(self, variable, removeFromDefinition);
}

- (void)clear {
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    ADXSolverVariable *variable = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(mArrayIndices_), current));
    if (variable != nil) {
      [variable removeFromRowWithADXArrayRow:mRow_];
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  mHead_ = ADXArrayLinkedVariables_NONE;
  mLast_ = ADXArrayLinkedVariables_NONE;
  mDidFillOnce_ = false;
  currentSize_ = 0;
}

- (jboolean)containsWithADXSolverVariable:(ADXSolverVariable *)variable {
  if (mHead_ == ADXArrayLinkedVariables_NONE) {
    return false;
  }
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    if (IOSIntArray_Get(nil_chk(mArrayIndices_), current) == ((ADXSolverVariable *) nil_chk(variable))->id__) {
      return true;
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  return false;
}

- (jint)indexOfWithADXSolverVariable:(ADXSolverVariable *)variable {
  if (mHead_ == ADXArrayLinkedVariables_NONE) {
    return -1;
  }
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    if (IOSIntArray_Get(nil_chk(mArrayIndices_), current) == ((ADXSolverVariable *) nil_chk(variable))->id__) {
      return current;
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  return -1;
}

- (jboolean)hasAtLeastOnePositiveVariable {
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    if (IOSFloatArray_Get(nil_chk(mArrayValues_), current) > 0) {
      return true;
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  return false;
}

- (void)invert {
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    JreTimesAssignFloatF(IOSFloatArray_GetRef(nil_chk(mArrayValues_), current), -1);
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
}

- (void)divideByAmountWithFloat:(jfloat)amount {
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    JreDivideAssignFloatF(IOSFloatArray_GetRef(nil_chk(mArrayValues_), current), amount);
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
}

- (jint)getHead {
  return mHead_;
}

- (jint)getCurrentSize {
  return currentSize_;
}

- (jint)getIdWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(mArrayIndices_), index);
}

- (jfloat)getValueWithInt:(jint)index {
  return IOSFloatArray_Get(nil_chk(mArrayValues_), index);
}

- (jint)getNextIndiceWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(mArrayNextIndices_), index);
}

- (ADXSolverVariable *)getPivotCandidate {
  if (candidate_ == nil) {
    jint current = mHead_;
    jint counter = 0;
    ADXSolverVariable *pivot = nil;
    while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
      if (IOSFloatArray_Get(nil_chk(mArrayValues_), current) < 0) {
        ADXSolverVariable *v = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(mArrayIndices_), current));
        if (pivot == nil || pivot->strength_ < ((ADXSolverVariable *) nil_chk(v))->strength_) {
          pivot = v;
        }
      }
      current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
      counter++;
    }
    return pivot;
  }
  return candidate_;
}

- (ADXSolverVariable *)getVariableWithInt:(jint)index {
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    if (counter == index) {
      return IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(mArrayIndices_), current));
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  return nil;
}

- (jfloat)getVariableValueWithInt:(jint)index {
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    if (counter == index) {
      return IOSFloatArray_Get(nil_chk(mArrayValues_), current);
    }
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  return 0;
}

- (jfloat)getWithADXSolverVariable:(ADXSolverVariable *)v {
  return ADXArrayLinkedVariables_getWithADXSolverVariable_(self, v);
}

- (jint)sizeInBytes {
  jint size = 0;
  size += 3 * (((IOSIntArray *) nil_chk(mArrayIndices_))->size_ * 4);
  size += 9 * 4;
  return size;
}

- (void)display {
  jint count = currentSize_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"{ "];
  for (jint i = 0; i < count; i++) {
    ADXSolverVariable *v = JreRetainedLocalValue([self getVariableWithInt:i]);
    if (v == nil) {
      continue;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("@$FC", v, @" = ", [self getVariableValueWithInt:i], ' ')];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@" }"];
}

- (NSString *)description {
  NSString *result = @"";
  jint current = mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < currentSize_) {
    JreStrAppend(&result, "$", @" -> ");
    JreStrAppend(&result, "F$", IOSFloatArray_Get(nil_chk(mArrayValues_), current), @" : ");
    JreStrAppend(&result, "@", IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(mArrayIndices_), current)));
    current = IOSIntArray_Get(nil_chk(mArrayNextIndices_), current);
    counter++;
  }
  return result;
}

- (void)__javaClone:(ADXArrayLinkedVariables *)original {
  [super __javaClone:original];
  [mRow_ release];
  [mCache_ release];
}

- (void)dealloc {
  RELEASE_(candidate_);
  RELEASE_(mArrayIndices_);
  RELEASE_(mArrayNextIndices_);
  RELEASE_(mArrayValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "F", 0x11, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 14, 15, -1, -1, -1, -1 },
    { NULL, "F", 0x11, 16, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 17, 15, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, 18, 15, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 19, 15, -1, -1, -1, -1 },
    { NULL, "F", 0x11, 20, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXArrayRow:withADXCache:);
  methods[1].selector = @selector(putWithADXSolverVariable:withFloat:);
  methods[2].selector = @selector(addWithADXSolverVariable:withFloat:withBoolean:);
  methods[3].selector = @selector(useWithADXArrayRow:withBoolean:);
  methods[4].selector = @selector(removeWithADXSolverVariable:withBoolean:);
  methods[5].selector = @selector(clear);
  methods[6].selector = @selector(containsWithADXSolverVariable:);
  methods[7].selector = @selector(indexOfWithADXSolverVariable:);
  methods[8].selector = @selector(hasAtLeastOnePositiveVariable);
  methods[9].selector = @selector(invert);
  methods[10].selector = @selector(divideByAmountWithFloat:);
  methods[11].selector = @selector(getHead);
  methods[12].selector = @selector(getCurrentSize);
  methods[13].selector = @selector(getIdWithInt:);
  methods[14].selector = @selector(getValueWithInt:);
  methods[15].selector = @selector(getNextIndiceWithInt:);
  methods[16].selector = @selector(getPivotCandidate);
  methods[17].selector = @selector(getVariableWithInt:);
  methods[18].selector = @selector(getVariableValueWithInt:);
  methods[19].selector = @selector(getWithADXSolverVariable:);
  methods[20].selector = @selector(sizeInBytes);
  methods[21].selector = @selector(display);
  methods[22].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXArrayLinkedVariables_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "NONE", "I", .constantValue.asInt = ADXArrayLinkedVariables_NONE, 0x18, -1, -1, -1, -1 },
    { "FULL_NEW_CHECK", "Z", .constantValue.asBOOL = ADXArrayLinkedVariables_FULL_NEW_CHECK, 0x1a, -1, -1, -1, -1 },
    { "currentSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRow_", "LADXArrayRow;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCache_", "LADXCache;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
    { "ROW_SIZE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "candidate_", "LADXSolverVariable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mArrayIndices_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mArrayNextIndices_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mArrayValues_", "[F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHead_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLast_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDidFillOnce_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "epsilon", "F", .constantValue.asLong = 0, 0xa, -1, 22, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXArrayRow;LADXCache;", "put", "LADXSolverVariable;F", "add", "LADXSolverVariable;FZ", "use", "LADXArrayRow;Z", "remove", "LADXSolverVariable;Z", "contains", "LADXSolverVariable;", "indexOf", "divideByAmount", "F", "getId", "I", "getValue", "getNextIndice", "getVariable", "getVariableValue", "get", "toString", &ADXArrayLinkedVariables_epsilon };
  static const J2ObjcClassInfo _ADXArrayLinkedVariables = { "ArrayLinkedVariables", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x1, 23, 15, -1, -1, -1, -1, -1 };
  return &_ADXArrayLinkedVariables;
}

@end

void ADXArrayLinkedVariables_initWithADXArrayRow_withADXCache_(ADXArrayLinkedVariables *self, ADXArrayRow *arrayRow, ADXCache *cache) {
  NSObject_init(self);
  self->currentSize_ = 0;
  self->ROW_SIZE_ = 8;
  JreStrongAssign(&self->candidate_, nil);
  JreStrongAssignAndConsume(&self->mArrayIndices_, [IOSIntArray newArrayWithLength:self->ROW_SIZE_]);
  JreStrongAssignAndConsume(&self->mArrayNextIndices_, [IOSIntArray newArrayWithLength:self->ROW_SIZE_]);
  JreStrongAssignAndConsume(&self->mArrayValues_, [IOSFloatArray newArrayWithLength:self->ROW_SIZE_]);
  self->mHead_ = ADXArrayLinkedVariables_NONE;
  self->mLast_ = ADXArrayLinkedVariables_NONE;
  self->mDidFillOnce_ = false;
  self->mRow_ = arrayRow;
  self->mCache_ = cache;
}

ADXArrayLinkedVariables *new_ADXArrayLinkedVariables_initWithADXArrayRow_withADXCache_(ADXArrayRow *arrayRow, ADXCache *cache) {
  J2OBJC_NEW_IMPL(ADXArrayLinkedVariables, initWithADXArrayRow_withADXCache_, arrayRow, cache)
}

ADXArrayLinkedVariables *create_ADXArrayLinkedVariables_initWithADXArrayRow_withADXCache_(ADXArrayRow *arrayRow, ADXCache *cache) {
  J2OBJC_CREATE_IMPL(ADXArrayLinkedVariables, initWithADXArrayRow_withADXCache_, arrayRow, cache)
}

jfloat ADXArrayLinkedVariables_removeWithADXSolverVariable_withBoolean_(ADXArrayLinkedVariables *self, ADXSolverVariable *variable, jboolean removeFromDefinition) {
  if (self->candidate_ == variable) {
    JreStrongAssign(&self->candidate_, nil);
  }
  if (self->mHead_ == ADXArrayLinkedVariables_NONE) {
    return 0;
  }
  jint current = self->mHead_;
  jint previous = ADXArrayLinkedVariables_NONE;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < self->currentSize_) {
    jint idx = IOSIntArray_Get(nil_chk(self->mArrayIndices_), current);
    if (idx == ((ADXSolverVariable *) nil_chk(variable))->id__) {
      if (current == self->mHead_) {
        self->mHead_ = IOSIntArray_Get(nil_chk(self->mArrayNextIndices_), current);
      }
      else {
        *IOSIntArray_GetRef(nil_chk(self->mArrayNextIndices_), previous) = IOSIntArray_Get(self->mArrayNextIndices_, current);
      }
      if (removeFromDefinition) {
        [variable removeFromRowWithADXArrayRow:self->mRow_];
      }
      variable->usageInRowCount_--;
      self->currentSize_--;
      *IOSIntArray_GetRef(nil_chk(self->mArrayIndices_), current) = ADXArrayLinkedVariables_NONE;
      if (self->mDidFillOnce_) {
        self->mLast_ = current;
      }
      return IOSFloatArray_Get(nil_chk(self->mArrayValues_), current);
    }
    previous = current;
    current = IOSIntArray_Get(nil_chk(self->mArrayNextIndices_), current);
    counter++;
  }
  return 0;
}

jfloat ADXArrayLinkedVariables_getWithADXSolverVariable_(ADXArrayLinkedVariables *self, ADXSolverVariable *v) {
  jint current = self->mHead_;
  jint counter = 0;
  while (current != ADXArrayLinkedVariables_NONE && counter < self->currentSize_) {
    if (IOSIntArray_Get(nil_chk(self->mArrayIndices_), current) == ((ADXSolverVariable *) nil_chk(v))->id__) {
      return IOSFloatArray_Get(nil_chk(self->mArrayValues_), current);
    }
    current = IOSIntArray_Get(nil_chk(self->mArrayNextIndices_), current);
    counter++;
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXArrayLinkedVariables)
