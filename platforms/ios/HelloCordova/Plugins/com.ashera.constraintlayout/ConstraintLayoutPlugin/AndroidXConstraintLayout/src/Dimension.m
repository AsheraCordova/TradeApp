//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\state\Dimension.java
//

#include "ConstraintWidget.h"
#include "Dimension.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "State.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"


@interface ADXDimension ()

- (instancetype)init;

- (instancetype)initWithId:(id)type;

@end

inline jint ADXDimension_get_WRAP_CONTENT(void);
#define ADXDimension_WRAP_CONTENT -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXDimension, WRAP_CONTENT, jint)

__attribute__((unused)) static void ADXDimension_init(ADXDimension *self);

__attribute__((unused)) static ADXDimension *new_ADXDimension_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXDimension *create_ADXDimension_init(void);

__attribute__((unused)) static void ADXDimension_initWithId_(ADXDimension *self, id type);

__attribute__((unused)) static ADXDimension *new_ADXDimension_initWithId_(id type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXDimension *create_ADXDimension_initWithId_(id type);

__attribute__((unused)) static void ADXDimension_Type_initWithNSString_withInt_(ADXDimension_Type *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(ADXDimension)

id ADXDimension_FIXED_DIMENSION;
id ADXDimension_WRAP_DIMENSION;
id ADXDimension_SPREAD_DIMENSION;
id ADXDimension_PARENT_DIMENSION;
id ADXDimension_PERCENT_DIMENSION;
id ADXDimension_RATIO_DIMENSION;

@implementation ADXDimension

- (jboolean)equalsFixedValueWithInt:(jint)value {
  if (mInitialValue_ == nil && mValue_ == value) {
    return true;
  }
  return false;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDimension_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithId:(id)type {
  ADXDimension_initWithId_(self, type);
  return self;
}

+ (ADXDimension *)SuggestedWithInt:(jint)value {
  return ADXDimension_SuggestedWithInt_(value);
}

+ (ADXDimension *)SuggestedWithId:(id)startValue {
  return ADXDimension_SuggestedWithId_(startValue);
}

+ (ADXDimension *)FixedWithInt:(jint)value {
  return ADXDimension_FixedWithInt_(value);
}

+ (ADXDimension *)FixedWithId:(id)value {
  return ADXDimension_FixedWithId_(value);
}

+ (ADXDimension *)PercentWithId:(id)key
                      withFloat:(jfloat)value {
  return ADXDimension_PercentWithId_withFloat_(key, value);
}

+ (ADXDimension *)Parent {
  return ADXDimension_Parent();
}

+ (ADXDimension *)Wrap {
  return ADXDimension_Wrap();
}

+ (ADXDimension *)Spread {
  return ADXDimension_Spread();
}

+ (ADXDimension *)RatioWithNSString:(NSString *)ratio {
  return ADXDimension_RatioWithNSString_(ratio);
}

- (ADXDimension *)percentWithId:(id)key
                      withFloat:(jfloat)value {
  mPercent_ = value;
  return self;
}

- (ADXDimension *)minWithInt:(jint)value {
  if (value >= 0) {
    mMin_ = value;
  }
  return self;
}

- (ADXDimension *)minWithId:(id)value {
  if (value == ADXDimension_WRAP_DIMENSION) {
    mMin_ = ADXDimension_WRAP_CONTENT;
  }
  return self;
}

- (ADXDimension *)maxWithInt:(jint)value {
  if (mMax_ >= 0) {
    mMax_ = value;
  }
  return self;
}

- (ADXDimension *)maxWithId:(id)value {
  if (value == ADXDimension_WRAP_DIMENSION && mIsSuggested_) {
    JreStrongAssign(&mInitialValue_, ADXDimension_WRAP_DIMENSION);
    mMax_ = JavaLangInteger_MAX_VALUE;
  }
  return self;
}

- (ADXDimension *)suggestedWithInt:(jint)value {
  mIsSuggested_ = true;
  return self;
}

- (ADXDimension *)suggestedWithId:(id)value {
  JreStrongAssign(&mInitialValue_, value);
  mIsSuggested_ = true;
  return self;
}

- (ADXDimension *)fixedWithId:(id)value {
  JreStrongAssign(&mInitialValue_, value);
  if ([value isKindOfClass:[JavaLangInteger class]]) {
    mValue_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) value)) intValue];
    JreStrongAssign(&mInitialValue_, nil);
  }
  return self;
}

- (ADXDimension *)fixedWithInt:(jint)value {
  JreStrongAssign(&mInitialValue_, nil);
  mValue_ = value;
  return self;
}

- (ADXDimension *)ratioWithNSString:(NSString *)ratio {
  JreStrongAssign(&mRatioString_, ratio);
  return self;
}

- (void)setValueWithInt:(jint)value {
  mIsSuggested_ = false;
  JreStrongAssign(&mInitialValue_, nil);
  mValue_ = value;
}

- (jint)getValue {
  return mValue_;
}

- (void)applyWithADXState:(ADXState *)state
  withADXConstraintWidget:(ADXConstraintWidget *)constraintWidget
                  withInt:(jint)orientation {
  if (mRatioString_ != nil) {
    [((ADXConstraintWidget *) nil_chk(constraintWidget)) setDimensionRatioWithNSString:mRatioString_];
  }
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    if (mIsSuggested_) {
      [((ADXConstraintWidget *) nil_chk(constraintWidget)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)];
      jint type = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
      if (mInitialValue_ == ADXDimension_WRAP_DIMENSION) {
        type = ADXConstraintWidget_MATCH_CONSTRAINT_WRAP;
      }
      else if (mInitialValue_ == ADXDimension_PERCENT_DIMENSION) {
        type = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT;
      }
      [constraintWidget setHorizontalMatchStyleWithInt:type withInt:mMin_ withInt:mMax_ withFloat:mPercent_];
    }
    else {
      if (mMin_ > 0) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setMinWidthWithInt:mMin_];
      }
      if (mMax_ < JavaLangInteger_MAX_VALUE) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setMaxWidthWithInt:mMax_];
      }
      if (mInitialValue_ == ADXDimension_WRAP_DIMENSION) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
      }
      else if (mInitialValue_ == ADXDimension_PARENT_DIMENSION) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)];
      }
      else if (mInitialValue_ == nil) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
        [constraintWidget setWidthWithInt:mValue_];
      }
    }
  }
  else {
    if (mIsSuggested_) {
      [((ADXConstraintWidget *) nil_chk(constraintWidget)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)];
      jint type = ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD;
      if (mInitialValue_ == ADXDimension_WRAP_DIMENSION) {
        type = ADXConstraintWidget_MATCH_CONSTRAINT_WRAP;
      }
      else if (mInitialValue_ == ADXDimension_PERCENT_DIMENSION) {
        type = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT;
      }
      [constraintWidget setVerticalMatchStyleWithInt:type withInt:mMin_ withInt:mMax_ withFloat:mPercent_];
    }
    else {
      if (mMin_ > 0) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setMinHeightWithInt:mMin_];
      }
      if (mMax_ < JavaLangInteger_MAX_VALUE) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setMaxHeightWithInt:mMax_];
      }
      if (mInitialValue_ == ADXDimension_WRAP_DIMENSION) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
      }
      else if (mInitialValue_ == ADXDimension_PARENT_DIMENSION) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)];
      }
      else if (mInitialValue_ == nil) {
        [((ADXConstraintWidget *) nil_chk(constraintWidget)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
        [constraintWidget setHeightWithInt:mValue_];
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(mRatioString_);
  RELEASE_(mInitialValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, 3, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, 4, 1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, 4, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 10, 1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 11, 1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 13, 1, -1, -1, -1, -1 },
    { NULL, "LADXDimension;", 0x1, 14, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(equalsFixedValueWithInt:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithId:);
  methods[3].selector = @selector(SuggestedWithInt:);
  methods[4].selector = @selector(SuggestedWithId:);
  methods[5].selector = @selector(FixedWithInt:);
  methods[6].selector = @selector(FixedWithId:);
  methods[7].selector = @selector(PercentWithId:withFloat:);
  methods[8].selector = @selector(Parent);
  methods[9].selector = @selector(Wrap);
  methods[10].selector = @selector(Spread);
  methods[11].selector = @selector(RatioWithNSString:);
  methods[12].selector = @selector(percentWithId:withFloat:);
  methods[13].selector = @selector(minWithInt:);
  methods[14].selector = @selector(minWithId:);
  methods[15].selector = @selector(maxWithInt:);
  methods[16].selector = @selector(maxWithId:);
  methods[17].selector = @selector(suggestedWithInt:);
  methods[18].selector = @selector(suggestedWithId:);
  methods[19].selector = @selector(fixedWithId:);
  methods[20].selector = @selector(fixedWithInt:);
  methods[21].selector = @selector(ratioWithNSString:);
  methods[22].selector = @selector(setValueWithInt:);
  methods[23].selector = @selector(getValue);
  methods[24].selector = @selector(applyWithADXState:withADXConstraintWidget:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIXED_DIMENSION", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 18, -1, -1 },
    { "WRAP_DIMENSION", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "SPREAD_DIMENSION", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "PARENT_DIMENSION", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 21, -1, -1 },
    { "PERCENT_DIMENSION", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 22, -1, -1 },
    { "RATIO_DIMENSION", "LNSObject;", .constantValue.asLong = 0, 0x19, -1, 23, -1, -1 },
    { "WRAP_CONTENT", "I", .constantValue.asInt = ADXDimension_WRAP_CONTENT, 0x12, 24, -1, -1, -1 },
    { "mMin_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMax_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPercent_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValue_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRatioString_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInitialValue_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIsSuggested_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "equalsFixedValue", "I", "LNSObject;", "Suggested", "Fixed", "Percent", "LNSObject;F", "Ratio", "LNSString;", "percent", "min", "max", "suggested", "fixed", "ratio", "setValue", "apply", "LADXState;LADXConstraintWidget;I", &ADXDimension_FIXED_DIMENSION, &ADXDimension_WRAP_DIMENSION, &ADXDimension_SPREAD_DIMENSION, &ADXDimension_PARENT_DIMENSION, &ADXDimension_PERCENT_DIMENSION, &ADXDimension_RATIO_DIMENSION, "WRAP_CONTENT", "LADXDimension_Type;" };
  static const J2ObjcClassInfo _ADXDimension = { "Dimension", "androidx.constraintlayout.core.state", ptrTable, methods, fields, 7, 0x1, 25, 14, -1, 25, -1, -1, -1 };
  return &_ADXDimension;
}

+ (void)initialize {
  if (self == [ADXDimension class]) {
    JreStrongAssignAndConsume(&ADXDimension_FIXED_DIMENSION, new_NSObject_init());
    JreStrongAssignAndConsume(&ADXDimension_WRAP_DIMENSION, new_NSObject_init());
    JreStrongAssignAndConsume(&ADXDimension_SPREAD_DIMENSION, new_NSObject_init());
    JreStrongAssignAndConsume(&ADXDimension_PARENT_DIMENSION, new_NSObject_init());
    JreStrongAssignAndConsume(&ADXDimension_PERCENT_DIMENSION, new_NSObject_init());
    JreStrongAssignAndConsume(&ADXDimension_RATIO_DIMENSION, new_NSObject_init());
    J2OBJC_SET_INITIALIZED(ADXDimension)
  }
}

@end

void ADXDimension_init(ADXDimension *self) {
  NSObject_init(self);
  self->mMin_ = 0;
  self->mMax_ = JavaLangInteger_MAX_VALUE;
  self->mPercent_ = 1.0f;
  self->mValue_ = 0;
  JreStrongAssign(&self->mRatioString_, nil);
  JreStrongAssign(&self->mInitialValue_, ADXDimension_WRAP_DIMENSION);
  self->mIsSuggested_ = false;
}

ADXDimension *new_ADXDimension_init() {
  J2OBJC_NEW_IMPL(ADXDimension, init)
}

ADXDimension *create_ADXDimension_init() {
  J2OBJC_CREATE_IMPL(ADXDimension, init)
}

void ADXDimension_initWithId_(ADXDimension *self, id type) {
  NSObject_init(self);
  self->mMin_ = 0;
  self->mMax_ = JavaLangInteger_MAX_VALUE;
  self->mPercent_ = 1.0f;
  self->mValue_ = 0;
  JreStrongAssign(&self->mRatioString_, nil);
  JreStrongAssign(&self->mInitialValue_, ADXDimension_WRAP_DIMENSION);
  self->mIsSuggested_ = false;
  JreStrongAssign(&self->mInitialValue_, type);
}

ADXDimension *new_ADXDimension_initWithId_(id type) {
  J2OBJC_NEW_IMPL(ADXDimension, initWithId_, type)
}

ADXDimension *create_ADXDimension_initWithId_(id type) {
  J2OBJC_CREATE_IMPL(ADXDimension, initWithId_, type)
}

ADXDimension *ADXDimension_SuggestedWithInt_(jint value) {
  ADXDimension_initialize();
  ADXDimension *dimension = create_ADXDimension_init();
  [dimension suggestedWithInt:value];
  return dimension;
}

ADXDimension *ADXDimension_SuggestedWithId_(id startValue) {
  ADXDimension_initialize();
  ADXDimension *dimension = create_ADXDimension_init();
  [dimension suggestedWithId:startValue];
  return dimension;
}

ADXDimension *ADXDimension_FixedWithInt_(jint value) {
  ADXDimension_initialize();
  ADXDimension *dimension = create_ADXDimension_initWithId_(ADXDimension_FIXED_DIMENSION);
  [dimension fixedWithInt:value];
  return dimension;
}

ADXDimension *ADXDimension_FixedWithId_(id value) {
  ADXDimension_initialize();
  ADXDimension *dimension = create_ADXDimension_initWithId_(ADXDimension_FIXED_DIMENSION);
  [dimension fixedWithId:value];
  return dimension;
}

ADXDimension *ADXDimension_PercentWithId_withFloat_(id key, jfloat value) {
  ADXDimension_initialize();
  ADXDimension *dimension = create_ADXDimension_initWithId_(ADXDimension_PERCENT_DIMENSION);
  [dimension percentWithId:key withFloat:value];
  return dimension;
}

ADXDimension *ADXDimension_Parent() {
  ADXDimension_initialize();
  return create_ADXDimension_initWithId_(ADXDimension_PARENT_DIMENSION);
}

ADXDimension *ADXDimension_Wrap() {
  ADXDimension_initialize();
  return create_ADXDimension_initWithId_(ADXDimension_WRAP_DIMENSION);
}

ADXDimension *ADXDimension_Spread() {
  ADXDimension_initialize();
  return create_ADXDimension_initWithId_(ADXDimension_SPREAD_DIMENSION);
}

ADXDimension *ADXDimension_RatioWithNSString_(NSString *ratio) {
  ADXDimension_initialize();
  ADXDimension *dimension = create_ADXDimension_initWithId_(ADXDimension_RATIO_DIMENSION);
  [dimension ratioWithNSString:ratio];
  return dimension;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDimension)

J2OBJC_INITIALIZED_DEFN(ADXDimension_Type)

ADXDimension_Type *ADXDimension_Type_values_[4];

@implementation ADXDimension_Type

+ (IOSObjectArray *)values {
  return ADXDimension_Type_values();
}

+ (ADXDimension_Type *)valueOfWithNSString:(NSString *)name {
  return ADXDimension_Type_valueOfWithNSString_(name);
}

- (ADXDimension_Type_Enum)toNSEnum {
  return (ADXDimension_Type_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXDimension_Type;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDimension_Type;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FIXED", "LADXDimension_Type;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "WRAP", "LADXDimension_Type;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "MATCH_PARENT", "LADXDimension_Type;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "MATCH_CONSTRAINT", "LADXDimension_Type;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXDimension_Type, FIXED), &JreEnum(ADXDimension_Type, WRAP), &JreEnum(ADXDimension_Type, MATCH_PARENT), &JreEnum(ADXDimension_Type, MATCH_CONSTRAINT), "LADXDimension;", "Ljava/lang/Enum<Landroidx/constraintlayout/core/state/Dimension$Type;>;" };
  static const J2ObjcClassInfo _ADXDimension_Type = { "Type", "androidx.constraintlayout.core.state", ptrTable, methods, fields, 7, 0x4019, 2, 4, 6, -1, -1, 7, -1 };
  return &_ADXDimension_Type;
}

+ (void)initialize {
  if (self == [ADXDimension_Type class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 4 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 4; i++) {
      ((void)(ADXDimension_Type_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXDimension_Type_initWithNSString_withInt_(e, JreEnumConstantName(ADXDimension_Type_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXDimension_Type)
  }
}

@end

void ADXDimension_Type_initWithNSString_withInt_(ADXDimension_Type *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXDimension_Type_values() {
  ADXDimension_Type_initialize();
  return [IOSObjectArray arrayWithObjects:ADXDimension_Type_values_ count:4 type:ADXDimension_Type_class_()];
}

ADXDimension_Type *ADXDimension_Type_valueOfWithNSString_(NSString *name) {
  ADXDimension_Type_initialize();
  for (int i = 0; i < 4; i++) {
    ADXDimension_Type *e = ADXDimension_Type_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXDimension_Type *ADXDimension_Type_fromOrdinal(NSUInteger ordinal) {
  ADXDimension_Type_initialize();
  if (ordinal >= 4) {
    return nil;
  }
  return ADXDimension_Type_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDimension_Type)
