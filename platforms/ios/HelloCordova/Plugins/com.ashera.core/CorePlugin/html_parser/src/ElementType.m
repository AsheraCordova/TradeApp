//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\ElementType.java
//

#include "AttributesImpl.h"
#include "ElementType.h"
#include "J2ObjC_source.h"
#include "Schema.h"
#include "java/lang/StringBuffer.h"


@interface TSElementType () {
 @public
  NSString *theName_;
  NSString *theNamespace_;
  NSString *theLocalName_;
  jint theModel_;
  jint theMemberOf_;
  jint theFlags_;
  TSAttributesImpl *theAtts_;
  TSElementType *theParent_;
  __unsafe_unretained TSSchema *theSchema_;
}

@end

J2OBJC_FIELD_SETTER(TSElementType, theName_, NSString *)
J2OBJC_FIELD_SETTER(TSElementType, theNamespace_, NSString *)
J2OBJC_FIELD_SETTER(TSElementType, theLocalName_, NSString *)
J2OBJC_FIELD_SETTER(TSElementType, theAtts_, TSAttributesImpl *)
J2OBJC_FIELD_SETTER(TSElementType, theParent_, TSElementType *)

@implementation TSElementType

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)model
                         withInt:(jint)memberOf
                         withInt:(jint)flags
                    withTSSchema:(TSSchema *)schema {
  TSElementType_initWithNSString_withInt_withInt_withInt_withTSSchema_(self, name, model, memberOf, flags, schema);
  return self;
}

- (NSString *)namespace__WithNSString:(NSString *)name
                          withBoolean:(jboolean)attribute {
  jint colon = [((NSString *) nil_chk(name)) java_indexOf:':'];
  if (colon == -1) {
    return attribute ? @"" : [((TSSchema *) nil_chk(theSchema_)) getURI];
  }
  NSString *prefix = [name java_substring:0 endIndex:colon];
  if ([((NSString *) nil_chk(prefix)) isEqual:@"xml"]) {
    return @"http://www.w3.org/XML/1998/namespace";
  }
  else {
    return [(JreStrcat("$$", @"urn:x-prefix:", prefix)) java_intern];
  }
}

- (NSString *)localNameWithNSString:(NSString *)name {
  jint colon = [((NSString *) nil_chk(name)) java_indexOf:':'];
  if (colon == -1) {
    return name;
  }
  else {
    return [((NSString *) nil_chk([name java_substring:colon + 1])) java_intern];
  }
}

- (NSString *)name {
  return theName_;
}

- (NSString *)namespace__ {
  return theNamespace_;
}

- (NSString *)localName {
  return theLocalName_;
}

- (jint)model {
  return theModel_;
}

- (jint)memberOf {
  return theMemberOf_;
}

- (jint)flags {
  return theFlags_;
}

- (TSAttributesImpl *)atts {
  return theAtts_;
}

- (TSElementType *)parent {
  return theParent_;
}

- (TSSchema *)schema {
  return theSchema_;
}

- (jboolean)canContainWithTSElementType:(TSElementType *)other {
  return (theModel_ & ((TSElementType *) nil_chk(other))->theMemberOf_) != 0;
}

- (void)setAttributeWithTSAttributesImpl:(TSAttributesImpl *)atts
                            withNSString:(NSString *)name
                            withNSString:(NSString *)type
                            withNSString:(NSString *)value {
  if ([((NSString *) nil_chk(name)) isEqual:@"xmlns"] || [name java_hasPrefix:@"xmlns:"]) {
    return;
  }
  
  ;
  NSString *namespace_ = JreRetainedLocalValue([self namespace__WithNSString:name withBoolean:true]);
  NSString *localName = JreRetainedLocalValue([self localNameWithNSString:name]);
  jint i = [((TSAttributesImpl *) nil_chk(atts)) getIndexWithNSString:name];
  if (i == -1) {
    name = [name java_intern];
    if (type == nil) type = @"CDATA";
    if (![type isEqual:@"CDATA"]) value = TSElementType_normalizeWithNSString_(value);
    [atts addAttributeWithNSString:namespace_ withNSString:localName withNSString:name withNSString:type withNSString:value];
  }
  else {
    if (type == nil) type = [atts getTypeWithInt:i];
    if (![((NSString *) nil_chk(type)) isEqual:@"CDATA"]) value = TSElementType_normalizeWithNSString_(value);
    [atts setAttributeWithInt:i withNSString:namespace_ withNSString:localName withNSString:name withNSString:type withNSString:value];
  }
}

+ (NSString *)normalizeWithNSString:(NSString *)value {
  return TSElementType_normalizeWithNSString_(value);
}

- (void)setAttributeWithNSString:(NSString *)name
                    withNSString:(NSString *)type
                    withNSString:(NSString *)value {
  [self setAttributeWithTSAttributesImpl:theAtts_ withNSString:name withNSString:type withNSString:value];
}

- (void)setModelWithInt:(jint)model {
  theModel_ = model;
}

- (void)setMemberOfWithInt:(jint)memberOf {
  theMemberOf_ = memberOf;
}

- (void)setFlagsWithInt:(jint)flags {
  theFlags_ = flags;
}

- (void)setParentWithTSElementType:(TSElementType *)parent {
  JreStrongAssign(&theParent_, parent);
}

- (void)__javaClone:(TSElementType *)original {
  [super __javaClone:original];
  [theSchema_ release];
}

- (void)dealloc {
  RELEASE_(theName_);
  RELEASE_(theNamespace_);
  RELEASE_(theLocalName_);
  RELEASE_(theAtts_);
  RELEASE_(theParent_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LTSAttributesImpl;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LTSElementType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LTSSchema;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withInt:withInt:withInt:withTSSchema:);
  methods[1].selector = @selector(namespace__WithNSString:withBoolean:);
  methods[2].selector = @selector(localNameWithNSString:);
  methods[3].selector = @selector(name);
  methods[4].selector = @selector(namespace__);
  methods[5].selector = @selector(localName);
  methods[6].selector = @selector(model);
  methods[7].selector = @selector(memberOf);
  methods[8].selector = @selector(flags);
  methods[9].selector = @selector(atts);
  methods[10].selector = @selector(parent);
  methods[11].selector = @selector(schema);
  methods[12].selector = @selector(canContainWithTSElementType:);
  methods[13].selector = @selector(setAttributeWithTSAttributesImpl:withNSString:withNSString:withNSString:);
  methods[14].selector = @selector(normalizeWithNSString:);
  methods[15].selector = @selector(setAttributeWithNSString:withNSString:withNSString:);
  methods[16].selector = @selector(setModelWithInt:);
  methods[17].selector = @selector(setMemberOfWithInt:);
  methods[18].selector = @selector(setFlagsWithInt:);
  methods[19].selector = @selector(setParentWithTSElementType:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "theName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theNamespace_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theLocalName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theModel_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theMemberOf_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theFlags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theAtts_", "LTSAttributesImpl;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theParent_", "LTSElementType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theSchema_", "LTSSchema;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;IIILTSSchema;", "namespace", "LNSString;Z", "localName", "LNSString;", "canContain", "LTSElementType;", "setAttribute", "LTSAttributesImpl;LNSString;LNSString;LNSString;", "normalize", "LNSString;LNSString;LNSString;", "setModel", "I", "setMemberOf", "setFlags", "setParent" };
  static const J2ObjcClassInfo _TSElementType = { "ElementType", "repackaged.org.ccil.cowan.tagsoup", ptrTable, methods, fields, 7, 0x1, 20, 9, -1, -1, -1, -1, -1 };
  return &_TSElementType;
}

@end

void TSElementType_initWithNSString_withInt_withInt_withInt_withTSSchema_(TSElementType *self, NSString *name, jint model, jint memberOf, jint flags, TSSchema *schema) {
  NSObject_init(self);
  JreStrongAssign(&self->theName_, name);
  self->theModel_ = model;
  self->theMemberOf_ = memberOf;
  self->theFlags_ = flags;
  JreStrongAssignAndConsume(&self->theAtts_, new_TSAttributesImpl_init());
  self->theSchema_ = schema;
  JreStrongAssign(&self->theNamespace_, [self namespace__WithNSString:name withBoolean:false]);
  JreStrongAssign(&self->theLocalName_, [self localNameWithNSString:name]);
}

TSElementType *new_TSElementType_initWithNSString_withInt_withInt_withInt_withTSSchema_(NSString *name, jint model, jint memberOf, jint flags, TSSchema *schema) {
  J2OBJC_NEW_IMPL(TSElementType, initWithNSString_withInt_withInt_withInt_withTSSchema_, name, model, memberOf, flags, schema)
}

TSElementType *create_TSElementType_initWithNSString_withInt_withInt_withInt_withTSSchema_(NSString *name, jint model, jint memberOf, jint flags, TSSchema *schema) {
  J2OBJC_CREATE_IMPL(TSElementType, initWithNSString_withInt_withInt_withInt_withTSSchema_, name, model, memberOf, flags, schema)
}

NSString *TSElementType_normalizeWithNSString_(NSString *value) {
  TSElementType_initialize();
  if (value == nil) return value;
  value = [value java_trim];
  if ([((NSString *) nil_chk(value)) java_indexOfString:@"  "] == -1) return value;
  jboolean space = false;
  jint len = [value java_length];
  JavaLangStringBuffer *b = create_JavaLangStringBuffer_initWithInt_(len);
  for (jint i = 0; i < len; i++) {
    jchar v = [value charAtWithInt:i];
    if (v == ' ') {
      if (!space) [b appendWithChar:v];
      space = true;
    }
    else {
      [b appendWithChar:v];
      space = false;
    }
  }
  return [b description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TSElementType)
