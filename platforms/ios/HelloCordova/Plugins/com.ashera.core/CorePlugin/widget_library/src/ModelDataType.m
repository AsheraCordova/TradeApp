//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\model\ModelDataType.java
//

#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "ModelDataType.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"


__attribute__((unused)) static void ASModelDataType_initWithNSString_withInt_(ASModelDataType *self, NSString *__name, jint __ordinal);

J2OBJC_INITIALIZED_DEFN(ASModelDataType)

ASModelDataType *ASModelDataType_values_[7];

@implementation ASModelDataType

+ (IOSObjectArray *)values {
  return ASModelDataType_values();
}

+ (ASModelDataType *)valueOfWithNSString:(NSString *)name {
  return ASModelDataType_valueOfWithNSString_(name);
}

- (ASModelDataType_Enum)toNSEnum {
  return (ASModelDataType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LASModelDataType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASModelDataType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "map", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "pathmap", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "string", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "list", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "integer", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "number", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "bool", "LASModelDataType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ASModelDataType, map), &JreEnum(ASModelDataType, pathmap), &JreEnum(ASModelDataType, string), &JreEnum(ASModelDataType, list), &JreEnum(ASModelDataType, integer), &JreEnum(ASModelDataType, number), &JreEnum(ASModelDataType, bool), "Ljava/lang/Enum<Lcom/ashera/model/ModelDataType;>;" };
  static const J2ObjcClassInfo _ASModelDataType = { "ModelDataType", "com.ashera.model", ptrTable, methods, fields, 7, 0x4011, 2, 7, -1, -1, -1, 9, -1 };
  return &_ASModelDataType;
}

+ (void)initialize {
  if (self == [ASModelDataType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 7 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 7; i++) {
      ((void)(ASModelDataType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ASModelDataType_initWithNSString_withInt_(e, JreEnumConstantName(ASModelDataType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ASModelDataType)
  }
}

@end

void ASModelDataType_initWithNSString_withInt_(ASModelDataType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ASModelDataType_values() {
  ASModelDataType_initialize();
  return [IOSObjectArray arrayWithObjects:ASModelDataType_values_ count:7 type:ASModelDataType_class_()];
}

ASModelDataType *ASModelDataType_valueOfWithNSString_(NSString *name) {
  ASModelDataType_initialize();
  for (int i = 0; i < 7; i++) {
    ASModelDataType *e = ASModelDataType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ASModelDataType *ASModelDataType_fromOrdinal(NSUInteger ordinal) {
  ASModelDataType_initialize();
  if (ordinal >= 7) {
    return nil;
  }
  return ASModelDataType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASModelDataType)
