//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\webkit\WebView.java
//

#include "AttributeSet.h"
#include "Context.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "ValueCallback.h"
#include "View.h"
#include "WebChromeClient.h"
#include "WebSettings.h"
#include "WebView.h"
#include "WebViewClient.h"


@implementation ADWebView

- (instancetype)initWithADContext:(ADContext *)context
               withADAttributeSet:(ADAttributeSet *)attrs {
  ADWebView_initWithADContext_withADAttributeSet_(self, context, attrs);
  return self;
}

- (void)setWebViewClientWithADWebViewClient:(ADWebViewClient *)client {
}

- (void)setWebChromeClientWithADWebChromeClient:(ADWebChromeClient *)client {
}

- (jboolean)dispatchKeyEventWithADKeyEvent:(ADKeyEvent *)event {
  return false;
}

- (void)setNetworkAvailableWithBoolean:(jboolean)value {
}

- (void)setInitialScaleWithInt:(jint)i {
}

- (void)setVerticalScrollBarEnabledWithBoolean:(jboolean)b {
}

+ (void)setWebContentsDebuggingEnabledWithBoolean:(jboolean)b {
  ADWebView_setWebContentsDebuggingEnabledWithBoolean_(b);
}

- (ADWebSettings *)getSettings {
  return create_ADWebSettings_init();
}

- (void)loadUrlWithNSString:(NSString *)url {
}

- (NSString *)getUrl {
  return nil;
}

- (void)clearCacheWithBoolean:(jboolean)b {
}

- (void)stopLoading {
}

- (void)clearHistory {
}

- (jboolean)canGoBack {
  return false;
}

- (void)goBack {
}

- (void)onPause {
}

- (void)pauseTimers {
}

- (void)onResume {
}

- (void)resumeTimers {
}

- (void)destroy {
}

- (void)evaluateJavascriptWithNSString:(NSString *)js
                   withADValueCallback:(ADValueCallback *)callback {
}

- (void)addJavascriptInterfaceWithId:(id)exposedJsApi
                        withNSString:(NSString *)string {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 8, -1, -1, -1, -1 },
    { NULL, "LADWebSettings;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADContext:withADAttributeSet:);
  methods[1].selector = @selector(setWebViewClientWithADWebViewClient:);
  methods[2].selector = @selector(setWebChromeClientWithADWebChromeClient:);
  methods[3].selector = @selector(dispatchKeyEventWithADKeyEvent:);
  methods[4].selector = @selector(setNetworkAvailableWithBoolean:);
  methods[5].selector = @selector(setInitialScaleWithInt:);
  methods[6].selector = @selector(setVerticalScrollBarEnabledWithBoolean:);
  methods[7].selector = @selector(setWebContentsDebuggingEnabledWithBoolean:);
  methods[8].selector = @selector(getSettings);
  methods[9].selector = @selector(loadUrlWithNSString:);
  methods[10].selector = @selector(getUrl);
  methods[11].selector = @selector(clearCacheWithBoolean:);
  methods[12].selector = @selector(stopLoading);
  methods[13].selector = @selector(clearHistory);
  methods[14].selector = @selector(canGoBack);
  methods[15].selector = @selector(goBack);
  methods[16].selector = @selector(onPause);
  methods[17].selector = @selector(pauseTimers);
  methods[18].selector = @selector(onResume);
  methods[19].selector = @selector(resumeTimers);
  methods[20].selector = @selector(destroy);
  methods[21].selector = @selector(evaluateJavascriptWithNSString:withADValueCallback:);
  methods[22].selector = @selector(addJavascriptInterfaceWithId:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADContext;LADAttributeSet;", "setWebViewClient", "LADWebViewClient;", "setWebChromeClient", "LADWebChromeClient;", "dispatchKeyEvent", "LADKeyEvent;", "setNetworkAvailable", "Z", "setInitialScale", "I", "setVerticalScrollBarEnabled", "setWebContentsDebuggingEnabled", "loadUrl", "LNSString;", "clearCache", "evaluateJavascript", "LNSString;LADValueCallback;", "(Ljava/lang/String;Lr/android/webkit/ValueCallback<Ljava/lang/String;>;)V", "addJavascriptInterface", "LNSObject;LNSString;" };
  static const J2ObjcClassInfo _ADWebView = { "WebView", "r.android.webkit", ptrTable, methods, NULL, 7, 0x1, 23, 0, -1, -1, -1, -1, -1 };
  return &_ADWebView;
}

@end

void ADWebView_initWithADContext_withADAttributeSet_(ADWebView *self, ADContext *context, ADAttributeSet *attrs) {
  ADView_init(self);
}

ADWebView *new_ADWebView_initWithADContext_withADAttributeSet_(ADContext *context, ADAttributeSet *attrs) {
  J2OBJC_NEW_IMPL(ADWebView, initWithADContext_withADAttributeSet_, context, attrs)
}

ADWebView *create_ADWebView_initWithADContext_withADAttributeSet_(ADContext *context, ADAttributeSet *attrs) {
  J2OBJC_CREATE_IMPL(ADWebView, initWithADContext_withADAttributeSet_, context, attrs)
}

void ADWebView_setWebContentsDebuggingEnabledWithBoolean_(jboolean b) {
  ADWebView_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADWebView)
