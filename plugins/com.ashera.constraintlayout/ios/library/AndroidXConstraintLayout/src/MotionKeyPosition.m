//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\key\MotionKeyPosition.java
//

#include "FloatRect.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MotionKey.h"
#include "MotionKeyPosition.h"
#include "MotionWidget.h"
#include "TypedValues.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"


@interface ADXMotionKeyPosition () {
 @public
  jfloat mCalculatedPositionX_;
  jfloat mCalculatedPositionY_;
}

- (void)calcScreenPositionWithInt:(jint)layoutWidth
                          withInt:(jint)layoutHeight;

- (void)calcPathPositionWithFloat:(jfloat)start_x
                        withFloat:(jfloat)start_y
                        withFloat:(jfloat)end_x
                        withFloat:(jfloat)end_y;

- (void)calcCartesianPositionWithFloat:(jfloat)start_x
                             withFloat:(jfloat)start_y
                             withFloat:(jfloat)end_x
                             withFloat:(jfloat)end_y;

@end

__attribute__((unused)) static void ADXMotionKeyPosition_calcScreenPositionWithInt_withInt_(ADXMotionKeyPosition *self, jint layoutWidth, jint layoutHeight);

__attribute__((unused)) static void ADXMotionKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(ADXMotionKeyPosition *self, jfloat start_x, jfloat start_y, jfloat end_x, jfloat end_y);

__attribute__((unused)) static void ADXMotionKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(ADXMotionKeyPosition *self, jfloat start_x, jfloat start_y, jfloat end_x, jfloat end_y);

NSString *ADXMotionKeyPosition_NAME = @"KeyPosition";

@implementation ADXMotionKeyPosition

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionKeyPosition_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)calcScreenPositionWithInt:(jint)layoutWidth
                          withInt:(jint)layoutHeight {
  ADXMotionKeyPosition_calcScreenPositionWithInt_withInt_(self, layoutWidth, layoutHeight);
}

- (void)calcPathPositionWithFloat:(jfloat)start_x
                        withFloat:(jfloat)start_y
                        withFloat:(jfloat)end_x
                        withFloat:(jfloat)end_y {
  ADXMotionKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
}

- (void)calcCartesianPositionWithFloat:(jfloat)start_x
                             withFloat:(jfloat)start_y
                             withFloat:(jfloat)end_x
                             withFloat:(jfloat)end_y {
  ADXMotionKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
}

- (jfloat)getPositionX {
  return mCalculatedPositionX_;
}

- (jfloat)getPositionY {
  return mCalculatedPositionY_;
}

- (void)positionAttributesWithADXMotionWidget:(ADXMotionWidget *)view
                             withADXFloatRect:(ADXFloatRect *)start
                             withADXFloatRect:(ADXFloatRect *)end
                                    withFloat:(jfloat)x
                                    withFloat:(jfloat)y
                            withNSStringArray:(IOSObjectArray *)attribute
                               withFloatArray:(IOSFloatArray *)value {
  switch (mPositionType_) {
    case ADXMotionKeyPosition_TYPE_PATH:
    [self positionPathAttributesWithADXFloatRect:start withADXFloatRect:end withFloat:x withFloat:y withNSStringArray:attribute withFloatArray:value];
    return;
    case ADXMotionKeyPosition_TYPE_SCREEN:
    [self positionScreenAttributesWithADXMotionWidget:view withADXFloatRect:start withADXFloatRect:end withFloat:x withFloat:y withNSStringArray:attribute withFloatArray:value];
    return;
    case ADXMotionKeyPosition_TYPE_CARTESIAN:
    default:
    [self positionCartAttributesWithADXFloatRect:start withADXFloatRect:end withFloat:x withFloat:y withNSStringArray:attribute withFloatArray:value];
    return;
  }
}

- (void)positionPathAttributesWithADXFloatRect:(ADXFloatRect *)start
                              withADXFloatRect:(ADXFloatRect *)end
                                     withFloat:(jfloat)x
                                     withFloat:(jfloat)y
                             withNSStringArray:(IOSObjectArray *)attribute
                                withFloatArray:(IOSFloatArray *)value {
  jfloat startCenterX = [((ADXFloatRect *) nil_chk(start)) centerX];
  jfloat startCenterY = [start centerY];
  jfloat endCenterX = [((ADXFloatRect *) nil_chk(end)) centerX];
  jfloat endCenterY = [end centerY];
  jfloat pathVectorX = endCenterX - startCenterX;
  jfloat pathVectorY = endCenterY - startCenterY;
  jfloat distance = (jfloat) JavaLangMath_hypotWithDouble_withDouble_(pathVectorX, pathVectorY);
  if (distance < 0.0001) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"distance ~ 0"];
    *IOSFloatArray_GetRef(nil_chk(value), 0) = 0;
    *IOSFloatArray_GetRef(value, 1) = 0;
    return;
  }
  jfloat dx = pathVectorX / distance;
  jfloat dy = pathVectorY / distance;
  jfloat perpendicular = (dx * (y - startCenterY) - (x - startCenterX) * dy) / distance;
  jfloat dist = (dx * (x - startCenterX) + dy * (y - startCenterY)) / distance;
  if (IOSObjectArray_Get(nil_chk(attribute), 0) != nil) {
    if ([((NSString *) nil_chk(ADXTypedValues_Position_S_PERCENT_X)) isEqual:IOSObjectArray_Get(attribute, 0)]) {
      *IOSFloatArray_GetRef(nil_chk(value), 0) = dist;
      *IOSFloatArray_GetRef(value, 1) = perpendicular;
    }
  }
  else {
    IOSObjectArray_Set(attribute, 0, ADXTypedValues_Position_S_PERCENT_X);
    IOSObjectArray_Set(attribute, 1, ADXTypedValues_Position_S_PERCENT_Y);
    *IOSFloatArray_GetRef(nil_chk(value), 0) = dist;
    *IOSFloatArray_GetRef(value, 1) = perpendicular;
  }
}

- (void)positionScreenAttributesWithADXMotionWidget:(ADXMotionWidget *)view
                                   withADXFloatRect:(ADXFloatRect *)start
                                   withADXFloatRect:(ADXFloatRect *)end
                                          withFloat:(jfloat)x
                                          withFloat:(jfloat)y
                                  withNSStringArray:(IOSObjectArray *)attribute
                                     withFloatArray:(IOSFloatArray *)value {
  jfloat startCenterX = [((ADXFloatRect *) nil_chk(start)) centerX];
  jfloat startCenterY = [start centerY];
  jfloat endCenterX = [((ADXFloatRect *) nil_chk(end)) centerX];
  jfloat endCenterY = [end centerY];
  jfloat pathVectorX = endCenterX - startCenterX;
  jfloat pathVectorY = endCenterY - startCenterY;
  ADXMotionWidget *viewGroup = ([((ADXMotionWidget *) nil_chk(view)) getParent]);
  jint width = [((ADXMotionWidget *) nil_chk(viewGroup)) getWidth];
  jint height = [viewGroup getHeight];
  if (IOSObjectArray_Get(nil_chk(attribute), 0) != nil) {
    if ([((NSString *) nil_chk(ADXTypedValues_Position_S_PERCENT_X)) isEqual:IOSObjectArray_Get(attribute, 0)]) {
      *IOSFloatArray_GetRef(nil_chk(value), 0) = x / width;
      *IOSFloatArray_GetRef(value, 1) = y / height;
    }
    else {
      *IOSFloatArray_GetRef(nil_chk(value), 1) = x / width;
      *IOSFloatArray_GetRef(value, 0) = y / height;
    }
  }
  else {
    IOSObjectArray_Set(attribute, 0, ADXTypedValues_Position_S_PERCENT_X);
    *IOSFloatArray_GetRef(nil_chk(value), 0) = x / width;
    IOSObjectArray_Set(attribute, 1, ADXTypedValues_Position_S_PERCENT_Y);
    *IOSFloatArray_GetRef(value, 1) = y / height;
  }
}

- (void)positionCartAttributesWithADXFloatRect:(ADXFloatRect *)start
                              withADXFloatRect:(ADXFloatRect *)end
                                     withFloat:(jfloat)x
                                     withFloat:(jfloat)y
                             withNSStringArray:(IOSObjectArray *)attribute
                                withFloatArray:(IOSFloatArray *)value {
  jfloat startCenterX = [((ADXFloatRect *) nil_chk(start)) centerX];
  jfloat startCenterY = [start centerY];
  jfloat endCenterX = [((ADXFloatRect *) nil_chk(end)) centerX];
  jfloat endCenterY = [end centerY];
  jfloat pathVectorX = endCenterX - startCenterX;
  jfloat pathVectorY = endCenterY - startCenterY;
  if (IOSObjectArray_Get(nil_chk(attribute), 0) != nil) {
    if ([((NSString *) nil_chk(ADXTypedValues_Position_S_PERCENT_X)) isEqual:IOSObjectArray_Get(attribute, 0)]) {
      *IOSFloatArray_GetRef(nil_chk(value), 0) = (x - startCenterX) / pathVectorX;
      *IOSFloatArray_GetRef(value, 1) = (y - startCenterY) / pathVectorY;
    }
    else {
      *IOSFloatArray_GetRef(nil_chk(value), 1) = (x - startCenterX) / pathVectorX;
      *IOSFloatArray_GetRef(value, 0) = (y - startCenterY) / pathVectorY;
    }
  }
  else {
    IOSObjectArray_Set(attribute, 0, ADXTypedValues_Position_S_PERCENT_X);
    *IOSFloatArray_GetRef(nil_chk(value), 0) = (x - startCenterX) / pathVectorX;
    IOSObjectArray_Set(attribute, 1, ADXTypedValues_Position_S_PERCENT_Y);
    *IOSFloatArray_GetRef(value, 1) = (y - startCenterY) / pathVectorY;
  }
}

- (jboolean)intersectsWithInt:(jint)layoutWidth
                      withInt:(jint)layoutHeight
             withADXFloatRect:(ADXFloatRect *)start
             withADXFloatRect:(ADXFloatRect *)end
                    withFloat:(jfloat)x
                    withFloat:(jfloat)y {
  [self calcPositionWithInt:layoutWidth withInt:layoutHeight withFloat:[((ADXFloatRect *) nil_chk(start)) centerX] withFloat:[start centerY] withFloat:[((ADXFloatRect *) nil_chk(end)) centerX] withFloat:[end centerY]];
  if ((JavaLangMath_absWithFloat_(x - mCalculatedPositionX_) < ADXMotionKeyPosition_SELECTION_SLOPE) && (JavaLangMath_absWithFloat_(y - mCalculatedPositionY_) < ADXMotionKeyPosition_SELECTION_SLOPE)) {
    return true;
  }
  return false;
}

- (ADXMotionKey *)copy__WithADXMotionKey:(ADXMotionKey *)src {
  [super copy__WithADXMotionKey:src];
  ADXMotionKeyPosition *k = (ADXMotionKeyPosition *) cast_chk(src, [ADXMotionKeyPosition class]);
  JreStrongAssign(&mTransitionEasing_, ((ADXMotionKeyPosition *) nil_chk(k))->mTransitionEasing_);
  mPathMotionArc_ = k->mPathMotionArc_;
  mDrawPath_ = k->mDrawPath_;
  mPercentWidth_ = k->mPercentWidth_;
  mPercentHeight_ = JavaLangFloat_NaN;
  mPercentX_ = k->mPercentX_;
  mPercentY_ = k->mPercentY_;
  mAltPercentX_ = k->mAltPercentX_;
  mAltPercentY_ = k->mAltPercentY_;
  mCalculatedPositionX_ = k->mCalculatedPositionX_;
  mCalculatedPositionY_ = k->mCalculatedPositionY_;
  return self;
}

- (ADXMotionKey *)java_clone {
  return [create_ADXMotionKeyPosition_init() copy__WithADXMotionKey:self];
}

- (void)calcPositionWithInt:(jint)layoutWidth
                    withInt:(jint)layoutHeight
                  withFloat:(jfloat)start_x
                  withFloat:(jfloat)start_y
                  withFloat:(jfloat)end_x
                  withFloat:(jfloat)end_y {
  switch (mPositionType_) {
    case ADXMotionKeyPosition_TYPE_SCREEN:
    ADXMotionKeyPosition_calcScreenPositionWithInt_withInt_(self, layoutWidth, layoutHeight);
    return;
    case ADXMotionKeyPosition_TYPE_PATH:
    ADXMotionKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
    return;
    case ADXMotionKeyPosition_TYPE_CARTESIAN:
    default:
    ADXMotionKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(self, start_x, start_y, end_x, end_y);
    return;
  }
}

- (void)getAttributeNamesWithJavaUtilHashSet:(JavaUtilHashSet *)attributes {
}

- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines {
}

- (jboolean)setValueWithInt:(jint)type
                    withInt:(jint)value {
  switch (type) {
    case ADXTypedValues_Position_TYPE_POSITION_TYPE:
    mPositionType_ = value;
    break;
    case ADXTypedValues_TYPE_FRAME_POSITION:
    mFramePosition_ = value;
    break;
    case ADXTypedValues_Position_TYPE_CURVE_FIT:
    mCurveFit_ = value;
    break;
    default:
    return [super setValueWithInt:type withInt:value];
  }
  return true;
}

- (jboolean)setValueWithInt:(jint)type
                  withFloat:(jfloat)value {
  switch (type) {
    case ADXTypedValues_Position_TYPE_PERCENT_WIDTH:
    mPercentWidth_ = value;
    break;
    case ADXTypedValues_Position_TYPE_PERCENT_HEIGHT:
    mPercentHeight_ = value;
    break;
    case ADXTypedValues_Position_TYPE_SIZE_PERCENT:
    mPercentHeight_ = mPercentWidth_ = value;
    break;
    case ADXTypedValues_Position_TYPE_PERCENT_X:
    mPercentX_ = value;
    break;
    case ADXTypedValues_Position_TYPE_PERCENT_Y:
    mPercentY_ = value;
    break;
    default:
    return [super setValueWithInt:type withFloat:value];
  }
  return true;
}

- (jboolean)setValueWithInt:(jint)type
               withNSString:(NSString *)value {
  switch (type) {
    case ADXTypedValues_Position_TYPE_TRANSITION_EASING:
    JreStrongAssign(&mTransitionEasing_, [((NSString *) nil_chk(value)) description]);
    break;
    default:
    return [super setValueWithInt:type withNSString:value];
  }
  return true;
}

- (jint)getIdWithNSString:(NSString *)name {
  return ADXTypedValues_Position_getIdWithNSString_(name);
}

- (void)dealloc {
  RELEASE_(mTransitionEasing_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXMotionKey;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LADXMotionKey;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "Z", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 26, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 28, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(calcScreenPositionWithInt:withInt:);
  methods[2].selector = @selector(calcPathPositionWithFloat:withFloat:withFloat:withFloat:);
  methods[3].selector = @selector(calcCartesianPositionWithFloat:withFloat:withFloat:withFloat:);
  methods[4].selector = @selector(getPositionX);
  methods[5].selector = @selector(getPositionY);
  methods[6].selector = @selector(positionAttributesWithADXMotionWidget:withADXFloatRect:withADXFloatRect:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[7].selector = @selector(positionPathAttributesWithADXFloatRect:withADXFloatRect:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[8].selector = @selector(positionScreenAttributesWithADXMotionWidget:withADXFloatRect:withADXFloatRect:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[9].selector = @selector(positionCartAttributesWithADXFloatRect:withADXFloatRect:withFloat:withFloat:withNSStringArray:withFloatArray:);
  methods[10].selector = @selector(intersectsWithInt:withInt:withADXFloatRect:withADXFloatRect:withFloat:withFloat:);
  methods[11].selector = @selector(copy__WithADXMotionKey:);
  methods[12].selector = @selector(java_clone);
  methods[13].selector = @selector(calcPositionWithInt:withInt:withFloat:withFloat:withFloat:withFloat:);
  methods[14].selector = @selector(getAttributeNamesWithJavaUtilHashSet:);
  methods[15].selector = @selector(addValuesWithJavaUtilHashMap:);
  methods[16].selector = @selector(setValueWithInt:withInt:);
  methods[17].selector = @selector(setValueWithInt:withFloat:);
  methods[18].selector = @selector(setValueWithInt:withNSString:);
  methods[19].selector = @selector(getIdWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "SELECTION_SLOPE", "F", .constantValue.asFloat = ADXMotionKeyPosition_SELECTION_SLOPE, 0x1c, -1, -1, -1, -1 },
    { "mCurveFit_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTransitionEasing_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPathMotionArc_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mDrawPath_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentWidth_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentHeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPercentY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAltPercentX_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mAltPercentY_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "TYPE_SCREEN", "I", .constantValue.asInt = ADXMotionKeyPosition_TYPE_SCREEN, 0x19, -1, -1, -1, -1 },
    { "TYPE_PATH", "I", .constantValue.asInt = ADXMotionKeyPosition_TYPE_PATH, 0x19, -1, -1, -1, -1 },
    { "TYPE_CARTESIAN", "I", .constantValue.asInt = ADXMotionKeyPosition_TYPE_CARTESIAN, 0x19, -1, -1, -1, -1 },
    { "mPositionType_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mCalculatedPositionX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCalculatedPositionY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KEY_TYPE", "I", .constantValue.asInt = ADXMotionKeyPosition_KEY_TYPE, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "calcScreenPosition", "II", "calcPathPosition", "FFFF", "calcCartesianPosition", "positionAttributes", "LADXMotionWidget;LADXFloatRect;LADXFloatRect;FF[LNSString;[F", "positionPathAttributes", "LADXFloatRect;LADXFloatRect;FF[LNSString;[F", "positionScreenAttributes", "positionCartAttributes", "intersects", "IILADXFloatRect;LADXFloatRect;FF", "copy", "LADXMotionKey;", "clone", "calcPosition", "IIFFFF", "getAttributeNames", "LJavaUtilHashSet;", "(Ljava/util/HashSet<Ljava/lang/String;>;)V", "addValues", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/utils/SplineSet;>;)V", "setValue", "IF", "ILNSString;", "getId", "LNSString;", &ADXMotionKeyPosition_NAME };
  static const J2ObjcClassInfo _ADXMotionKeyPosition = { "MotionKeyPosition", "androidx.constraintlayout.core.motion.key", ptrTable, methods, fields, 7, 0x1, 20, 19, -1, -1, -1, -1, -1 };
  return &_ADXMotionKeyPosition;
}

@end

void ADXMotionKeyPosition_init(ADXMotionKeyPosition *self) {
  ADXMotionKey_init(self);
  self->mCurveFit_ = JreLoadStatic(ADXMotionKey, UNSET);
  JreStrongAssign(&self->mTransitionEasing_, nil);
  self->mPathMotionArc_ = JreLoadStatic(ADXMotionKey, UNSET);
  self->mDrawPath_ = 0;
  self->mPercentWidth_ = JavaLangFloat_NaN;
  self->mPercentHeight_ = JavaLangFloat_NaN;
  self->mPercentX_ = JavaLangFloat_NaN;
  self->mPercentY_ = JavaLangFloat_NaN;
  self->mAltPercentX_ = JavaLangFloat_NaN;
  self->mAltPercentY_ = JavaLangFloat_NaN;
  self->mPositionType_ = ADXMotionKeyPosition_TYPE_CARTESIAN;
  self->mCalculatedPositionX_ = JavaLangFloat_NaN;
  self->mCalculatedPositionY_ = JavaLangFloat_NaN;
  {
    self->mType_ = ADXMotionKeyPosition_KEY_TYPE;
  }
}

ADXMotionKeyPosition *new_ADXMotionKeyPosition_init() {
  J2OBJC_NEW_IMPL(ADXMotionKeyPosition, init)
}

ADXMotionKeyPosition *create_ADXMotionKeyPosition_init() {
  J2OBJC_CREATE_IMPL(ADXMotionKeyPosition, init)
}

void ADXMotionKeyPosition_calcScreenPositionWithInt_withInt_(ADXMotionKeyPosition *self, jint layoutWidth, jint layoutHeight) {
  jint viewWidth = 0;
  jint viewHeight = 0;
  self->mCalculatedPositionX_ = (layoutWidth - viewWidth) * self->mPercentX_ + JreIntDiv(viewWidth, 2);
  self->mCalculatedPositionY_ = (layoutHeight - viewHeight) * self->mPercentX_ + JreIntDiv(viewHeight, 2);
}

void ADXMotionKeyPosition_calcPathPositionWithFloat_withFloat_withFloat_withFloat_(ADXMotionKeyPosition *self, jfloat start_x, jfloat start_y, jfloat end_x, jfloat end_y) {
  jfloat pathVectorX = end_x - start_x;
  jfloat pathVectorY = end_y - start_y;
  jfloat perpendicularX = -pathVectorY;
  jfloat perpendicularY = pathVectorX;
  self->mCalculatedPositionX_ = start_x + pathVectorX * self->mPercentX_ + perpendicularX * self->mPercentY_;
  self->mCalculatedPositionY_ = start_y + pathVectorY * self->mPercentX_ + perpendicularY * self->mPercentY_;
}

void ADXMotionKeyPosition_calcCartesianPositionWithFloat_withFloat_withFloat_withFloat_(ADXMotionKeyPosition *self, jfloat start_x, jfloat start_y, jfloat end_x, jfloat end_y) {
  jfloat pathVectorX = end_x - start_x;
  jfloat pathVectorY = end_y - start_y;
  jfloat dxdx = (JavaLangFloat_isNaNWithFloat_(self->mPercentX_)) ? 0 : self->mPercentX_;
  jfloat dydx = (JavaLangFloat_isNaNWithFloat_(self->mAltPercentY_)) ? 0 : self->mAltPercentY_;
  jfloat dydy = (JavaLangFloat_isNaNWithFloat_(self->mPercentY_)) ? 0 : self->mPercentY_;
  jfloat dxdy = (JavaLangFloat_isNaNWithFloat_(self->mAltPercentX_)) ? 0 : self->mAltPercentX_;
  self->mCalculatedPositionX_ = JreFpToInt((start_x + pathVectorX * dxdx + pathVectorY * dxdy));
  self->mCalculatedPositionY_ = JreFpToInt((start_y + pathVectorX * dydx + pathVectorY * dydy));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionKeyPosition)
