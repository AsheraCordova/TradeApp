//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\CLCustomAttribute.java
//

#include "CLCustomAttribute.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Utils.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Enum.h"
#include "java/lang/Float.h"
#include "java/lang/IllegalAccessException.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NoSuchMethodException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/reflect/InvocationTargetException.h"
#include "java/lang/reflect/Method.h"
#include "java/util/HashMap.h"
#include "java/util/Set.h"


@interface ADXCLCustomAttribute () {
 @public
  jboolean mMethod_;
  ADXCLCustomAttribute_AttributeType *mType_;
  jint mIntegerValue_;
  jfloat mFloatValue_;
  NSString *mStringValue_;
  jint mColorValue_;
}

+ (jint)clampWithInt:(jint)c;

@end

J2OBJC_FIELD_SETTER(ADXCLCustomAttribute, mType_, ADXCLCustomAttribute_AttributeType *)
J2OBJC_FIELD_SETTER(ADXCLCustomAttribute, mStringValue_, NSString *)

inline NSString *ADXCLCustomAttribute_get_TAG(void);
static NSString *ADXCLCustomAttribute_TAG = @"TransitionLayout";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXCLCustomAttribute, TAG, NSString *)

__attribute__((unused)) static jint ADXCLCustomAttribute_clampWithInt_(jint c);

__attribute__((unused)) static void ADXCLCustomAttribute_AttributeType_initWithNSString_withInt_(ADXCLCustomAttribute_AttributeType *self, NSString *__name, jint __ordinal);

@implementation ADXCLCustomAttribute

- (ADXCLCustomAttribute_AttributeType *)getType {
  return mType_;
}

- (jboolean)isContinuous {
  switch ([mType_ ordinal]) {
    case ADXCLCustomAttribute_AttributeType_Enum_REFERENCE_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
    return false;
    default:
    return true;
  }
}

- (void)setFloatValueWithFloat:(jfloat)value {
  mFloatValue_ = value;
}

- (void)setColorValueWithInt:(jint)value {
  mColorValue_ = value;
}

- (void)setIntValueWithInt:(jint)value {
  mIntegerValue_ = value;
}

- (void)setStringValueWithNSString:(NSString *)value {
  JreStrongAssign(&mStringValue_, value);
}

- (jint)numberOfInterpolatedValues {
  switch ([mType_ ordinal]) {
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_DRAWABLE_TYPE:
    return 4;
    default:
    return 1;
  }
}

- (jfloat)getValueToInterpolate {
  switch ([mType_ ordinal]) {
    case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
    return mIntegerValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
    return mFloatValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_DRAWABLE_TYPE:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Color does not have a single color to interpolate");
    case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Cannot interpolate String");
    case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
    return mBooleanValue_ ? 1 : 0;
    case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
    return mFloatValue_;
    default:
    return JavaLangFloat_NaN;
  }
}

- (void)getValuesToInterpolateWithFloatArray:(IOSFloatArray *)ret {
  {
    jint a;
    jint r;
    jint g;
    jint b;
    jfloat f_r;
    jfloat f_g;
    jfloat f_b;
    switch ([mType_ ordinal]) {
      case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mIntegerValue_;
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mFloatValue_;
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_COLOR_DRAWABLE_TYPE:
      case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
      a = (jint) 0xFF & (JreRShift32(mColorValue_, 24));
      r = (jint) 0xFF & (JreRShift32(mColorValue_, 16));
      g = (jint) 0xFF & (JreRShift32(mColorValue_, 8));
      b = (jint) 0xFF & (mColorValue_);
      f_r = (jfloat) JavaLangMath_powWithDouble_withDouble_(r / 255.0f, 2.2);
      f_g = (jfloat) JavaLangMath_powWithDouble_withDouble_(g / 255.0f, 2.2);
      f_b = (jfloat) JavaLangMath_powWithDouble_withDouble_(b / 255.0f, 2.2);
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = f_r;
      *IOSFloatArray_GetRef(ret, 1) = f_g;
      *IOSFloatArray_GetRef(ret, 2) = f_b;
      *IOSFloatArray_GetRef(ret, 3) = a / 255.0f;
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
      @throw create_JavaLangRuntimeException_initWithNSString_(@"Color does not have a single color to interpolate");
      case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mBooleanValue_ ? 1 : 0;
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mFloatValue_;
      break;
      default:
      break;
    }
  }
}

- (void)setValueWithFloatArray:(IOSFloatArray *)value {
  switch ([mType_ ordinal]) {
    case ADXCLCustomAttribute_AttributeType_Enum_REFERENCE_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
    mIntegerValue_ = JreFpToInt(IOSFloatArray_Get(nil_chk(value), 0));
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
    mFloatValue_ = IOSFloatArray_Get(nil_chk(value), 0);
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_DRAWABLE_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
    mColorValue_ = ADXCLCustomAttribute_hsvToRgbWithFloat_withFloat_withFloat_(IOSFloatArray_Get(nil_chk(value), 0), IOSFloatArray_Get(value, 1), IOSFloatArray_Get(value, 2));
    mColorValue_ = (mColorValue_ & (jint) 0xFFFFFF) | (JreLShift32(ADXCLCustomAttribute_clampWithInt_(JreFpToInt(((jint) 0xFF * IOSFloatArray_Get(value, 3)))), 24));
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Color does not have a single color to interpolate");
    case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
    mBooleanValue_ = (IOSFloatArray_Get(nil_chk(value), 0) > 0.5);
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
    mFloatValue_ = IOSFloatArray_Get(nil_chk(value), 0);
    break;
    default:
    break;
  }
}

+ (jint)hsvToRgbWithFloat:(jfloat)hue
                withFloat:(jfloat)saturation
                withFloat:(jfloat)value {
  return ADXCLCustomAttribute_hsvToRgbWithFloat_withFloat_withFloat_(hue, saturation, value);
}

- (jboolean)diffWithADXCLCustomAttribute:(ADXCLCustomAttribute *)CustomAttribute {
  if (CustomAttribute == nil || mType_ != CustomAttribute->mType_) {
    return false;
  }
  switch ([mType_ ordinal]) {
    case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_REFERENCE_TYPE:
    return mIntegerValue_ == CustomAttribute->mIntegerValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
    return mFloatValue_ == CustomAttribute->mFloatValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_DRAWABLE_TYPE:
    return mColorValue_ == CustomAttribute->mColorValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
    return mIntegerValue_ == CustomAttribute->mIntegerValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
    return mBooleanValue_ == CustomAttribute->mBooleanValue_;
    case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
    return mFloatValue_ == CustomAttribute->mFloatValue_;
    default:
    return false;
  }
}

- (instancetype)initWithNSString:(NSString *)name
withADXCLCustomAttribute_AttributeType:(ADXCLCustomAttribute_AttributeType *)attributeType {
  ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_(self, name, attributeType);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
withADXCLCustomAttribute_AttributeType:(ADXCLCustomAttribute_AttributeType *)attributeType
                          withId:(id)value
                     withBoolean:(jboolean)method {
  ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_withId_withBoolean_(self, name, attributeType, value, method);
  return self;
}

- (instancetype)initWithADXCLCustomAttribute:(ADXCLCustomAttribute *)source
                                      withId:(id)value {
  ADXCLCustomAttribute_initWithADXCLCustomAttribute_withId_(self, source, value);
  return self;
}

- (void)setValueWithId:(id)value {
  switch ([mType_ ordinal]) {
    case ADXCLCustomAttribute_AttributeType_Enum_REFERENCE_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
    mIntegerValue_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
    mFloatValue_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(value, [JavaLangFloat class]))) floatValue];
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
    case ADXCLCustomAttribute_AttributeType_Enum_COLOR_DRAWABLE_TYPE:
    mColorValue_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
    JreStrongAssign(&mStringValue_, (NSString *) cast_chk(value, [NSString class]));
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
    mBooleanValue_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]))) booleanValue];
    break;
    case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
    mFloatValue_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(value, [JavaLangFloat class]))) floatValue];
    break;
    default:
    break;
  }
}

+ (JavaUtilHashMap *)extractAttributesWithJavaUtilHashMap:(JavaUtilHashMap *)base
                                                   withId:(id)view {
  return ADXCLCustomAttribute_extractAttributesWithJavaUtilHashMap_withId_(base, view);
}

+ (void)setAttributesWithId:(id)view
        withJavaUtilHashMap:(JavaUtilHashMap *)map {
  ADXCLCustomAttribute_setAttributesWithId_withJavaUtilHashMap_(view, map);
}

- (void)applyCustomWithId:(id)view {
  IOSClass *viewClass = [nil_chk(view) java_getClass];
  NSString *name = JreRetainedLocalValue(self->mName_);
  NSString *methodName = JreRetainedLocalValue(name);
  if (!mMethod_) {
    methodName = JreStrcat("$$", @"set", methodName);
  }
  @try {
    JavaLangReflectMethod *method;
    switch ([self->mType_ ordinal]) {
      case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
      case ADXCLCustomAttribute_AttributeType_Enum_REFERENCE_TYPE:
      method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(self->mIntegerValue_) } count:1 type:NSObject_class_()]];
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
      method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangFloat, TYPE) } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(self->mFloatValue_) } count:1 type:NSObject_class_()]];
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
      method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(self->mColorValue_) } count:1 type:NSObject_class_()]];
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
      method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ self->mStringValue_ } count:1 type:NSObject_class_()]];
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
      method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangBoolean, TYPE) } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(self->mBooleanValue_) } count:1 type:NSObject_class_()]];
      break;
      case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
      method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangFloat, TYPE) } count:1 type:IOSClass_class_()]];
      [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(self->mFloatValue_) } count:1 type:NSObject_class_()]];
      break;
      default:
      break;
    }
  }
  @catch (JavaLangNoSuchMethodException *e) {
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, [e getMessage]);
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$", @" Custom Attribute \"", name, @"\" not found on ", [viewClass getName]));
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$", [viewClass getName], @" must have a method ", methodName));
  }
  @catch (JavaLangIllegalAccessException *e) {
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$", @" Custom Attribute \"", name, @"\" not found on ", [viewClass getName]));
    [e printStackTrace];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$", @" Custom Attribute \"", name, @"\" not found on ", [viewClass getName]));
    [e printStackTrace];
  }
}

+ (jint)clampWithInt:(jint)c {
  return ADXCLCustomAttribute_clampWithInt_(c);
}

- (void)setInterpolatedValueWithId:(id)view
                    withFloatArray:(IOSFloatArray *)value {
  IOSClass *viewClass = [nil_chk(view) java_getClass];
  NSString *methodName = JreStrcat("$$", @"set", mName_);
  @try {
    JavaLangReflectMethod *method;
    {
      jint r;
      jint g;
      jint b;
      jint a;
      jint color;
      switch ([mType_ ordinal]) {
        case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(JreFpToInt(IOSFloatArray_Get(nil_chk(value), 0))) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangFloat, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(value), 0)) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
        r = ADXCLCustomAttribute_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(nil_chk(value), 0), 1.0 / 2.2) * 255.0f)));
        g = ADXCLCustomAttribute_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 1), 1.0 / 2.2) * 255.0f)));
        b = ADXCLCustomAttribute_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 2), 1.0 / 2.2) * 255.0f)));
        a = ADXCLCustomAttribute_clampWithInt_(JreFpToInt((IOSFloatArray_Get(value, 3) * 255.0f)));
        color = (JreLShift32(a, 24)) | (JreLShift32(r, 16)) | (JreLShift32(g, 8)) | b;
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(color) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"unable to interpolate strings ", mName_));
        case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangBoolean, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(IOSFloatArray_Get(nil_chk(value), 0) > 0.5f) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangFloat, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(IOSFloatArray_Get(nil_chk(value), 0)) } count:1 type:NSObject_class_()]];
        break;
        default:
        break;
      }
    }
  }
  @catch (JavaLangNoSuchMethodException *e) {
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$C", @"no method ", methodName, @" on View \"", [[view java_getClass] getName], '"'));
    [e printStackTrace];
  }
  @catch (JavaLangIllegalAccessException *e) {
    ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$C", @"cannot access method ", methodName, @" on View \"", [[view java_getClass] getName], '"'));
    [e printStackTrace];
  }
  @catch (JavaLangReflectInvocationTargetException *e) {
    [e printStackTrace];
  }
}

- (void)dealloc {
  RELEASE_(mName_);
  RELEASE_(mType_);
  RELEASE_(mStringValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXCLCustomAttribute_AttributeType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 14, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 15, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 17, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x9, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x9, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0x1, 24, 17, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 25, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getType);
  methods[1].selector = @selector(isContinuous);
  methods[2].selector = @selector(setFloatValueWithFloat:);
  methods[3].selector = @selector(setColorValueWithInt:);
  methods[4].selector = @selector(setIntValueWithInt:);
  methods[5].selector = @selector(setStringValueWithNSString:);
  methods[6].selector = @selector(numberOfInterpolatedValues);
  methods[7].selector = @selector(getValueToInterpolate);
  methods[8].selector = @selector(getValuesToInterpolateWithFloatArray:);
  methods[9].selector = @selector(setValueWithFloatArray:);
  methods[10].selector = @selector(hsvToRgbWithFloat:withFloat:withFloat:);
  methods[11].selector = @selector(diffWithADXCLCustomAttribute:);
  methods[12].selector = @selector(initWithNSString:withADXCLCustomAttribute_AttributeType:);
  methods[13].selector = @selector(initWithNSString:withADXCLCustomAttribute_AttributeType:withId:withBoolean:);
  methods[14].selector = @selector(initWithADXCLCustomAttribute:withId:);
  methods[15].selector = @selector(setValueWithId:);
  methods[16].selector = @selector(extractAttributesWithJavaUtilHashMap:withId:);
  methods[17].selector = @selector(setAttributesWithId:withJavaUtilHashMap:);
  methods[18].selector = @selector(applyCustomWithId:);
  methods[19].selector = @selector(clampWithInt:);
  methods[20].selector = @selector(setInterpolatedValueWithId:withFloatArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "mMethod_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mType_", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIntegerValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFloatValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStringValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBooleanValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mColorValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFloatValue", "F", "setColorValue", "I", "setIntValue", "setStringValue", "LNSString;", "getValuesToInterpolate", "[F", "setValue", "hsvToRgb", "FFF", "diff", "LADXCLCustomAttribute;", "LNSString;LADXCLCustomAttribute_AttributeType;", "LNSString;LADXCLCustomAttribute_AttributeType;LNSObject;Z", "LADXCLCustomAttribute;LNSObject;", "LNSObject;", "extractAttributes", "LJavaUtilHashMap;LNSObject;", "(Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/CLCustomAttribute;>;Ljava/lang/Object;)Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/CLCustomAttribute;>;", "setAttributes", "LNSObject;LJavaUtilHashMap;", "(Ljava/lang/Object;Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/CLCustomAttribute;>;)V", "applyCustom", "clamp", "setInterpolatedValue", "LNSObject;[F", &ADXCLCustomAttribute_TAG, "LADXCLCustomAttribute_AttributeType;" };
  static const J2ObjcClassInfo _ADXCLCustomAttribute = { "CLCustomAttribute", "androidx.constraintlayout.core.motion", ptrTable, methods, fields, 7, 0x1, 21, 9, -1, 29, -1, -1, -1 };
  return &_ADXCLCustomAttribute;
}

@end

jint ADXCLCustomAttribute_hsvToRgbWithFloat_withFloat_withFloat_(jfloat hue, jfloat saturation, jfloat value) {
  ADXCLCustomAttribute_initialize();
  jint h = JreFpToInt((hue * 6));
  jfloat f = hue * 6 - h;
  jint p = JreFpToInt((0.5f + 255 * value * (1 - saturation)));
  jint q = JreFpToInt((0.5f + 255 * value * (1 - f * saturation)));
  jint t = JreFpToInt((0.5f + 255 * value * (1 - (1 - f) * saturation)));
  jint v = JreFpToInt((0.5f + 255 * value));
  switch (h) {
    case 0:
    return 0XFF000000 | ((JreLShift32(v, 16)) + (JreLShift32(t, 8)) + p);
    case 1:
    return 0XFF000000 | ((JreLShift32(q, 16)) + (JreLShift32(v, 8)) + p);
    case 2:
    return 0XFF000000 | ((JreLShift32(p, 16)) + (JreLShift32(v, 8)) + t);
    case 3:
    return 0XFF000000 | ((JreLShift32(p, 16)) + (JreLShift32(q, 8)) + v);
    case 4:
    return 0XFF000000 | ((JreLShift32(t, 16)) + (JreLShift32(p, 8)) + v);
    case 5:
    return 0XFF000000 | ((JreLShift32(v, 16)) + (JreLShift32(p, 8)) + q);
    default:
    return 0;
  }
}

void ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_(ADXCLCustomAttribute *self, NSString *name, ADXCLCustomAttribute_AttributeType *attributeType) {
  NSObject_init(self);
  self->mMethod_ = false;
  JreStrongAssign(&self->mName_, name);
  JreStrongAssign(&self->mType_, attributeType);
}

ADXCLCustomAttribute *new_ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_(NSString *name, ADXCLCustomAttribute_AttributeType *attributeType) {
  J2OBJC_NEW_IMPL(ADXCLCustomAttribute, initWithNSString_withADXCLCustomAttribute_AttributeType_, name, attributeType)
}

ADXCLCustomAttribute *create_ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_(NSString *name, ADXCLCustomAttribute_AttributeType *attributeType) {
  J2OBJC_CREATE_IMPL(ADXCLCustomAttribute, initWithNSString_withADXCLCustomAttribute_AttributeType_, name, attributeType)
}

void ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_withId_withBoolean_(ADXCLCustomAttribute *self, NSString *name, ADXCLCustomAttribute_AttributeType *attributeType, id value, jboolean method) {
  NSObject_init(self);
  self->mMethod_ = false;
  JreStrongAssign(&self->mName_, name);
  JreStrongAssign(&self->mType_, attributeType);
  self->mMethod_ = method;
  [self setValueWithId:value];
}

ADXCLCustomAttribute *new_ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_withId_withBoolean_(NSString *name, ADXCLCustomAttribute_AttributeType *attributeType, id value, jboolean method) {
  J2OBJC_NEW_IMPL(ADXCLCustomAttribute, initWithNSString_withADXCLCustomAttribute_AttributeType_withId_withBoolean_, name, attributeType, value, method)
}

ADXCLCustomAttribute *create_ADXCLCustomAttribute_initWithNSString_withADXCLCustomAttribute_AttributeType_withId_withBoolean_(NSString *name, ADXCLCustomAttribute_AttributeType *attributeType, id value, jboolean method) {
  J2OBJC_CREATE_IMPL(ADXCLCustomAttribute, initWithNSString_withADXCLCustomAttribute_AttributeType_withId_withBoolean_, name, attributeType, value, method)
}

void ADXCLCustomAttribute_initWithADXCLCustomAttribute_withId_(ADXCLCustomAttribute *self, ADXCLCustomAttribute *source, id value) {
  NSObject_init(self);
  self->mMethod_ = false;
  JreStrongAssign(&self->mName_, ((ADXCLCustomAttribute *) nil_chk(source))->mName_);
  JreStrongAssign(&self->mType_, source->mType_);
  [self setValueWithId:value];
}

ADXCLCustomAttribute *new_ADXCLCustomAttribute_initWithADXCLCustomAttribute_withId_(ADXCLCustomAttribute *source, id value) {
  J2OBJC_NEW_IMPL(ADXCLCustomAttribute, initWithADXCLCustomAttribute_withId_, source, value)
}

ADXCLCustomAttribute *create_ADXCLCustomAttribute_initWithADXCLCustomAttribute_withId_(ADXCLCustomAttribute *source, id value) {
  J2OBJC_CREATE_IMPL(ADXCLCustomAttribute, initWithADXCLCustomAttribute_withId_, source, value)
}

JavaUtilHashMap *ADXCLCustomAttribute_extractAttributesWithJavaUtilHashMap_withId_(JavaUtilHashMap *base, id view) {
  ADXCLCustomAttribute_initialize();
  JavaUtilHashMap *ret = create_JavaUtilHashMap_init();
  IOSClass *viewClass = [nil_chk(view) java_getClass];
  for (NSString * __strong name in nil_chk([((JavaUtilHashMap *) nil_chk(base)) keySet])) {
    ADXCLCustomAttribute *CustomAttribute = JreRetainedLocalValue([base getWithId:name]);
    @try {
      JavaLangReflectMethod *method = [viewClass getMethod:JreStrcat("$$", @"getMap", name) parameterTypes:[IOSObjectArray arrayWithLength:0 type:IOSClass_class_()]];
      id val = JreRetainedLocalValue([((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSObject_class_()]]);
      [ret putWithId:name withId:create_ADXCLCustomAttribute_initWithADXCLCustomAttribute_withId_(CustomAttribute, val)];
    }
    @catch (JavaLangNoSuchMethodException *e) {
      [e printStackTrace];
    }
    @catch (JavaLangIllegalAccessException *e) {
      [e printStackTrace];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      [e printStackTrace];
    }
  }
  return ret;
}

void ADXCLCustomAttribute_setAttributesWithId_withJavaUtilHashMap_(id view, JavaUtilHashMap *map) {
  ADXCLCustomAttribute_initialize();
  IOSClass *viewClass = [nil_chk(view) java_getClass];
  for (NSString * __strong name in nil_chk([((JavaUtilHashMap *) nil_chk(map)) keySet])) {
    ADXCLCustomAttribute *CustomAttribute = JreRetainedLocalValue([map getWithId:name]);
    NSString *methodName = JreRetainedLocalValue(name);
    if (!((ADXCLCustomAttribute *) nil_chk(CustomAttribute))->mMethod_) {
      methodName = JreStrcat("$$", @"set", methodName);
    }
    @try {
      JavaLangReflectMethod *method;
      switch ([CustomAttribute->mType_ ordinal]) {
        case ADXCLCustomAttribute_AttributeType_Enum_INT_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(CustomAttribute->mIntegerValue_) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_FLOAT_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangFloat, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(CustomAttribute->mFloatValue_) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_COLOR_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(CustomAttribute->mColorValue_) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_STRING_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangCharSequence_class_() } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ CustomAttribute->mStringValue_ } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_BOOLEAN_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangBoolean, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangBoolean_valueOfWithBoolean_(CustomAttribute->mBooleanValue_) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_DIMENSION_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangFloat, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangFloat_valueOfWithFloat_(CustomAttribute->mFloatValue_) } count:1 type:NSObject_class_()]];
        break;
        case ADXCLCustomAttribute_AttributeType_Enum_REFERENCE_TYPE:
        method = [viewClass getMethod:methodName parameterTypes:[IOSObjectArray arrayWithObjects:(id[]){ JreLoadStatic(JavaLangInteger, TYPE) } count:1 type:IOSClass_class_()]];
        [((JavaLangReflectMethod *) nil_chk(method)) invokeWithId:view withNSObjectArray:[IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(CustomAttribute->mIntegerValue_) } count:1 type:NSObject_class_()]];
        break;
        default:
        break;
      }
    }
    @catch (JavaLangNoSuchMethodException *e) {
      ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, [e getMessage]);
      ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$", @" Custom Attribute \"", name, @"\" not found on ", [viewClass getName]));
      ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$", [viewClass getName], @" must have a method ", methodName));
    }
    @catch (JavaLangIllegalAccessException *e) {
      ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$", @" Custom Attribute \"", name, @"\" not found on ", [viewClass getName]));
      [e printStackTrace];
    }
    @catch (JavaLangReflectInvocationTargetException *e) {
      ADXUtils_logeWithNSString_withNSString_(ADXCLCustomAttribute_TAG, JreStrcat("$$$$", @" Custom Attribute \"", name, @"\" not found on ", [viewClass getName]));
      [e printStackTrace];
    }
  }
}

jint ADXCLCustomAttribute_clampWithInt_(jint c) {
  ADXCLCustomAttribute_initialize();
  jint N = 255;
  c &= ~(JreRShift32(c, 31));
  c -= N;
  c &= (JreRShift32(c, 31));
  c += N;
  return c;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLCustomAttribute)

J2OBJC_INITIALIZED_DEFN(ADXCLCustomAttribute_AttributeType)

ADXCLCustomAttribute_AttributeType *ADXCLCustomAttribute_AttributeType_values_[8];

@implementation ADXCLCustomAttribute_AttributeType

+ (IOSObjectArray *)values {
  return ADXCLCustomAttribute_AttributeType_values();
}

+ (ADXCLCustomAttribute_AttributeType *)valueOfWithNSString:(NSString *)name {
  return ADXCLCustomAttribute_AttributeType_valueOfWithNSString_(name);
}

- (ADXCLCustomAttribute_AttributeType_Enum)toNSEnum {
  return (ADXCLCustomAttribute_AttributeType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXCLCustomAttribute_AttributeType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXCLCustomAttribute_AttributeType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INT_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "FLOAT_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "COLOR_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "COLOR_DRAWABLE_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "STRING_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 6, -1, -1 },
    { "BOOLEAN_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "DIMENSION_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
    { "REFERENCE_TYPE", "LADXCLCustomAttribute_AttributeType;", .constantValue.asLong = 0, 0x4019, -1, 9, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXCLCustomAttribute_AttributeType, INT_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, FLOAT_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, COLOR_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, COLOR_DRAWABLE_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, STRING_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, BOOLEAN_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, DIMENSION_TYPE), &JreEnum(ADXCLCustomAttribute_AttributeType, REFERENCE_TYPE), "LADXCLCustomAttribute;", "Ljava/lang/Enum<Landroidx/constraintlayout/core/motion/CLCustomAttribute$AttributeType;>;" };
  static const J2ObjcClassInfo _ADXCLCustomAttribute_AttributeType = { "AttributeType", "androidx.constraintlayout.core.motion", ptrTable, methods, fields, 7, 0x4019, 2, 8, 10, -1, -1, 11, -1 };
  return &_ADXCLCustomAttribute_AttributeType;
}

+ (void)initialize {
  if (self == [ADXCLCustomAttribute_AttributeType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 8 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 8; i++) {
      ((void)(ADXCLCustomAttribute_AttributeType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXCLCustomAttribute_AttributeType_initWithNSString_withInt_(e, JreEnumConstantName(ADXCLCustomAttribute_AttributeType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXCLCustomAttribute_AttributeType)
  }
}

@end

void ADXCLCustomAttribute_AttributeType_initWithNSString_withInt_(ADXCLCustomAttribute_AttributeType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXCLCustomAttribute_AttributeType_values() {
  ADXCLCustomAttribute_AttributeType_initialize();
  return [IOSObjectArray arrayWithObjects:ADXCLCustomAttribute_AttributeType_values_ count:8 type:ADXCLCustomAttribute_AttributeType_class_()];
}

ADXCLCustomAttribute_AttributeType *ADXCLCustomAttribute_AttributeType_valueOfWithNSString_(NSString *name) {
  ADXCLCustomAttribute_AttributeType_initialize();
  for (int i = 0; i < 8; i++) {
    ADXCLCustomAttribute_AttributeType *e = ADXCLCustomAttribute_AttributeType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXCLCustomAttribute_AttributeType *ADXCLCustomAttribute_AttributeType_fromOrdinal(NSUInteger ordinal) {
  ADXCLCustomAttribute_AttributeType_initialize();
  if (ordinal >= 8) {
    return nil;
  }
  return ADXCLCustomAttribute_AttributeType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLCustomAttribute_AttributeType)
