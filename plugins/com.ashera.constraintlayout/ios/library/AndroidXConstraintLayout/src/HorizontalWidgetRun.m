//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\HorizontalWidgetRun.java
//

#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "Dependency.h"
#include "DependencyNode.h"
#include "DimensionDependency.h"
#include "Helper.h"
#include "HorizontalWidgetRun.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RunGroup.h"
#include "VerticalWidgetRun.h"
#include "WidgetRun.h"
#include "java/lang/Math.h"
#include "java/util/List.h"


@interface ADXHorizontalWidgetRun ()

- (void)computeInsetRatioWithIntArray:(IOSIntArray *)dimensions
                              withInt:(jint)x1
                              withInt:(jint)x2
                              withInt:(jint)y1
                              withInt:(jint)y2
                            withFloat:(jfloat)ratio
                              withInt:(jint)side;

@end

inline IOSIntArray *ADXHorizontalWidgetRun_get_tempDimensions(void);
inline IOSIntArray *ADXHorizontalWidgetRun_set_tempDimensions(IOSIntArray *value);
static IOSIntArray *ADXHorizontalWidgetRun_tempDimensions;
J2OBJC_STATIC_FIELD_OBJ(ADXHorizontalWidgetRun, tempDimensions, IOSIntArray *)

__attribute__((unused)) static void ADXHorizontalWidgetRun_computeInsetRatioWithIntArray_withInt_withInt_withInt_withInt_withFloat_withInt_(ADXHorizontalWidgetRun *self, IOSIntArray *dimensions, jint x1, jint x2, jint y1, jint y2, jfloat ratio, jint side);

J2OBJC_INITIALIZED_DEFN(ADXHorizontalWidgetRun)

@implementation ADXHorizontalWidgetRun

- (instancetype)initWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  ADXHorizontalWidgetRun_initWithADXConstraintWidget_(self, widget);
  return self;
}

- (NSString *)description {
  return JreStrcat("$$", @"HorizontalRun ", [((ADXConstraintWidget *) nil_chk(widget_)) getDebugName]);
}

- (void)clear {
  JreStrongAssign(&runGroup_, nil);
  [((ADXDependencyNode *) nil_chk(start_)) clear];
  [((ADXDependencyNode *) nil_chk(end_)) clear];
  [((ADXDimensionDependency *) nil_chk(dimension_)) clear];
  resolved_ = false;
}

- (void)reset {
  resolved_ = false;
  [((ADXDependencyNode *) nil_chk(start_)) clear];
  ((ADXDependencyNode *) nil_chk(start_))->resolved_ = false;
  [((ADXDependencyNode *) nil_chk(end_)) clear];
  ((ADXDependencyNode *) nil_chk(end_))->resolved_ = false;
  ((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ = false;
}

- (jboolean)supportsWrapComputation {
  if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    if (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      return true;
    }
    return false;
  }
  return true;
}

- (void)apply {
  if (((ADXConstraintWidget *) nil_chk(widget_))->measured_) {
    [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:[widget_ getWidth]];
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    JreStrongAssign(&dimensionBehavior_, [((ADXConstraintWidget *) nil_chk(widget_)) getHorizontalDimensionBehaviour]);
    if (dimensionBehavior_ != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
        ADXConstraintWidget *parent = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(widget_)) getParent]);
        if (parent != nil && ([parent getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || [parent getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT))) {
          jint resolvedDimension = [parent getWidth] - [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mLeft_)) getMargin] - [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mRight_)) getMargin];
          [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:((ADXHorizontalWidgetRun *) nil_chk(parent->horizontalRun_))->start_ withInt:[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mLeft_)) getMargin]];
          [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:((ADXHorizontalWidgetRun *) nil_chk(parent->horizontalRun_))->end_ withInt:-[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mRight_)) getMargin]];
          [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:resolvedDimension];
          return;
        }
      }
      if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
        [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:[((ADXConstraintWidget *) nil_chk(widget_)) getWidth]];
      }
    }
  }
  else {
    if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
      ADXConstraintWidget *parent = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(widget_)) getParent]);
      if (parent != nil && ([parent getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || [parent getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT))) {
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:((ADXHorizontalWidgetRun *) nil_chk(parent->horizontalRun_))->start_ withInt:[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mLeft_)) getMargin]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:((ADXHorizontalWidgetRun *) nil_chk(parent->horizontalRun_))->end_ withInt:-[((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mRight_)) getMargin]];
        return;
      }
    }
  }
  if (((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ && ((ADXConstraintWidget *) nil_chk(widget_))->measured_) {
    if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT)))->mTarget_ != nil && ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)))->mTarget_ != nil) {
      if ([widget_ isInHorizontalChain]) {
        ((ADXDependencyNode *) nil_chk(start_))->margin_ = [((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT))) getMargin];
        ((ADXDependencyNode *) nil_chk(end_))->margin_ = -[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT))) getMargin];
      }
      else {
        ADXDependencyNode *startTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT)]);
        if (startTarget != nil) {
          [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:startTarget withInt:[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT))) getMargin]];
        }
        ADXDependencyNode *endTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT)]);
        if (endTarget != nil) {
          [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:endTarget withInt:-[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT))) getMargin]];
        }
        ((ADXDependencyNode *) nil_chk(start_))->delegateToWidgetRun_ = true;
        ((ADXDependencyNode *) nil_chk(end_))->delegateToWidgetRun_ = true;
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_LEFT)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_LEFT)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:target withInt:[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT))) getMargin]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:((ADXDimensionDependency *) nil_chk(dimension_))->value_];
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:target withInt:-[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT))) getMargin]];
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:end_ withInt:-((ADXDimensionDependency *) nil_chk(dimension_))->value_];
      }
    }
    else {
      if (!([ADXHelper_class_() isInstance:widget_]) && [widget_ getParent] != nil && ((ADXConstraintAnchor *) nil_chk([((ADXConstraintWidget *) nil_chk(widget_)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]))->mTarget_ == nil) {
        ADXDependencyNode *left = JreRetainedLocalValue(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk([((ADXConstraintWidget *) nil_chk(widget_)) getParent]))->horizontalRun_))->start_);
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:left withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getX]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:((ADXDimensionDependency *) nil_chk(dimension_))->value_];
      }
    }
  }
  else {
    if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      switch (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultWidth_) {
        case ADXConstraintWidget_MATCH_CONSTRAINT_RATIO:
        {
          if (widget_->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
            JreStrongAssign(&((ADXDependencyNode *) nil_chk(start_))->updateDelegate_, self);
            JreStrongAssign(&((ADXDependencyNode *) nil_chk(end_))->updateDelegate_, self);
            JreStrongAssign(&((ADXVerticalWidgetRun *) nil_chk(widget_->verticalRun_))->start_->updateDelegate_, self);
            JreStrongAssign(&widget_->verticalRun_->end_->updateDelegate_, self);
            JreStrongAssign(&dimension_->updateDelegate_, self);
            if ([widget_ isInVerticalChain]) {
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_];
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->dependencies_)) addWithId:dimension_];
              JreStrongAssign(&((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->updateDelegate_, self);
              [((id<JavaUtilList>) nil_chk(dimension_->targets_)) addWithId:widget_->verticalRun_->start_];
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->end_];
              [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->start_))->dependencies_)) addWithId:dimension_];
              [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->end_))->dependencies_)) addWithId:dimension_];
            }
            else if ([((ADXConstraintWidget *) nil_chk(widget_)) isInHorizontalChain]) {
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->targets_)) addWithId:dimension_];
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->dependencies_)) addWithId:((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_];
            }
            else {
              [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->targets_)) addWithId:dimension_];
            }
            break;
          }
          ADXDependencyNode *targetDimension = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(widget_->verticalRun_))->dimension_);
          [((id<JavaUtilList>) nil_chk(dimension_->targets_)) addWithId:targetDimension];
          [((id<JavaUtilList>) nil_chk(targetDimension->dependencies_)) addWithId:dimension_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->start_))->dependencies_)) addWithId:dimension_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->end_))->dependencies_)) addWithId:dimension_];
          ((ADXDimensionDependency *) nil_chk(dimension_))->delegateToWidgetRun_ = true;
          [((id<JavaUtilList>) nil_chk(dimension_->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->dependencies_)) addWithId:end_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) addWithId:dimension_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) addWithId:dimension_];
        }
        break;
        case ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT:
        {
          ADXConstraintWidget *parent = JreRetainedLocalValue([widget_ getParent]);
          if (parent == nil) {
            break;
          }
          ADXDependencyNode *targetDimension = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(parent->verticalRun_))->dimension_);
          [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->targets_)) addWithId:targetDimension];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(targetDimension))->dependencies_)) addWithId:dimension_];
          ((ADXDimensionDependency *) nil_chk(dimension_))->delegateToWidgetRun_ = true;
          [((id<JavaUtilList>) nil_chk(dimension_->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDimensionDependency *) nil_chk(dimension_))->dependencies_)) addWithId:end_];
        }
        break;
        case ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD:
        {
        }
        break;
        default:
        break;
      }
    }
    if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT)))->mTarget_ != nil && ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)))->mTarget_ != nil) {
      if ([widget_ isInHorizontalChain]) {
        ((ADXDependencyNode *) nil_chk(start_))->margin_ = [((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT))) getMargin];
        ((ADXDependencyNode *) nil_chk(end_))->margin_ = -[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT))) getMargin];
      }
      else {
        ADXDependencyNode *startTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT)]);
        ADXDependencyNode *endTarget = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT)]);
        {
          if (startTarget != nil) {
            [startTarget addDependencyWithADXDependency:self];
          }
          if (endTarget != nil) {
            [endTarget addDependencyWithADXDependency:self];
          }
        }
        JreStrongAssign(&mRunType_, JreLoadEnum(ADXWidgetRun_RunType, CENTER));
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_LEFT)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_LEFT)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:target withInt:[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT))) getMargin]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:dimension_];
      }
    }
    else if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)))->mTarget_ != nil) {
      ADXDependencyNode *target = JreRetainedLocalValue([self getTargetWithADXConstraintAnchor:IOSObjectArray_Get(widget_->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)]);
      if (target != nil) {
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:target withInt:-[((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->mListAnchors_), ADXConstraintWidget_ANCHOR_RIGHT))) getMargin]];
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:end_ withInt:-1 withADXDimensionDependency:dimension_];
      }
    }
    else {
      if (!([ADXHelper_class_() isInstance:widget_]) && [widget_ getParent] != nil) {
        ADXDependencyNode *left = JreRetainedLocalValue(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk([((ADXConstraintWidget *) nil_chk(widget_)) getParent]))->horizontalRun_))->start_);
        [self addTargetWithADXDependencyNode:start_ withADXDependencyNode:left withInt:[((ADXConstraintWidget *) nil_chk(widget_)) getX]];
        [self addTargetWithADXDependencyNode:end_ withADXDependencyNode:start_ withInt:1 withADXDimensionDependency:dimension_];
      }
    }
  }
}

- (void)computeInsetRatioWithIntArray:(IOSIntArray *)dimensions
                              withInt:(jint)x1
                              withInt:(jint)x2
                              withInt:(jint)y1
                              withInt:(jint)y2
                            withFloat:(jfloat)ratio
                              withInt:(jint)side {
  ADXHorizontalWidgetRun_computeInsetRatioWithIntArray_withInt_withInt_withInt_withInt_withFloat_withInt_(self, dimensions, x1, x2, y1, y2, ratio, side);
}

- (void)updateWithADXDependency:(id<ADXDependency>)dependency {
  switch ([mRunType_ ordinal]) {
    case ADXWidgetRun_RunType_Enum_START:
    {
      [self updateRunStartWithADXDependency:dependency];
    }
    break;
    case ADXWidgetRun_RunType_Enum_END:
    {
      [self updateRunEndWithADXDependency:dependency];
    }
    break;
    case ADXWidgetRun_RunType_Enum_CENTER:
    {
      [self updateRunCenterWithADXDependency:dependency withADXConstraintAnchor:((ADXConstraintWidget *) nil_chk(widget_))->mLeft_ withADXConstraintAnchor:widget_->mRight_ withInt:ADXConstraintWidget_HORIZONTAL];
      return;
    }
    default:
    break;
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    if (dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      switch (((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultWidth_) {
        case ADXConstraintWidget_MATCH_CONSTRAINT_RATIO:
        {
          if (widget_->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD || widget_->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
            ADXDependencyNode *secondStart = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(widget_->verticalRun_))->start_);
            ADXDependencyNode *secondEnd = JreRetainedLocalValue(widget_->verticalRun_->end_);
            jboolean s1 = ((ADXConstraintAnchor *) nil_chk(widget_->mLeft_))->mTarget_ != nil;
            jboolean s2 = ((ADXConstraintAnchor *) nil_chk(widget_->mTop_))->mTarget_ != nil;
            jboolean e1 = ((ADXConstraintAnchor *) nil_chk(widget_->mRight_))->mTarget_ != nil;
            jboolean e2 = ((ADXConstraintAnchor *) nil_chk(widget_->mBottom_))->mTarget_ != nil;
            jint definedSide = [widget_ getDimensionRatioSide];
            if (s1 && s2 && e1 && e2) {
              jfloat ratio = [((ADXConstraintWidget *) nil_chk(widget_)) getDimensionRatio];
              if (((ADXDependencyNode *) nil_chk(secondStart))->resolved_ && ((ADXDependencyNode *) nil_chk(secondEnd))->resolved_) {
                if (!(((ADXDependencyNode *) nil_chk(start_))->readyToSolve_ && ((ADXDependencyNode *) nil_chk(end_))->readyToSolve_)) {
                  return;
                }
                jint x1 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(start_->targets_)) getWithInt:0]))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
                jint x2 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]))->value_ - ((ADXDependencyNode *) nil_chk(end_))->margin_;
                jint y1 = secondStart->value_ + secondStart->margin_;
                jint y2 = ((ADXDependencyNode *) nil_chk(secondEnd))->value_ - secondEnd->margin_;
                ADXHorizontalWidgetRun_computeInsetRatioWithIntArray_withInt_withInt_withInt_withInt_withFloat_withInt_(self, ADXHorizontalWidgetRun_tempDimensions, x1, x2, y1, y2, ratio, definedSide);
                [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:IOSIntArray_Get(nil_chk(ADXHorizontalWidgetRun_tempDimensions), ADXConstraintWidget_HORIZONTAL)];
                [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:IOSIntArray_Get(nil_chk(ADXHorizontalWidgetRun_tempDimensions), ADXConstraintWidget_VERTICAL)];
                return;
              }
              if (((ADXDependencyNode *) nil_chk(start_))->resolved_ && ((ADXDependencyNode *) nil_chk(end_))->resolved_) {
                if (!(secondStart->readyToSolve_ && ((ADXDependencyNode *) nil_chk(secondEnd))->readyToSolve_)) {
                  return;
                }
                jint x1 = start_->value_ + start_->margin_;
                jint x2 = ((ADXDependencyNode *) nil_chk(end_))->value_ - end_->margin_;
                jint y1 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(secondStart->targets_)) getWithInt:0]))->value_ + secondStart->margin_;
                jint y2 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(secondEnd))->targets_)) getWithInt:0]))->value_ - secondEnd->margin_;
                ADXHorizontalWidgetRun_computeInsetRatioWithIntArray_withInt_withInt_withInt_withInt_withFloat_withInt_(self, ADXHorizontalWidgetRun_tempDimensions, x1, x2, y1, y2, ratio, definedSide);
                [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:IOSIntArray_Get(nil_chk(ADXHorizontalWidgetRun_tempDimensions), ADXConstraintWidget_HORIZONTAL)];
                [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:IOSIntArray_Get(nil_chk(ADXHorizontalWidgetRun_tempDimensions), ADXConstraintWidget_VERTICAL)];
              }
              if (!(((ADXDependencyNode *) nil_chk(start_))->readyToSolve_ && ((ADXDependencyNode *) nil_chk(end_))->readyToSolve_ && secondStart->readyToSolve_ && ((ADXDependencyNode *) nil_chk(secondEnd))->readyToSolve_)) {
                return;
              }
              jint x1 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(start_->targets_)) getWithInt:0]))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
              jint x2 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]))->value_ - ((ADXDependencyNode *) nil_chk(end_))->margin_;
              jint y1 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(secondStart->targets_)) getWithInt:0]))->value_ + secondStart->margin_;
              jint y2 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(secondEnd))->targets_)) getWithInt:0]))->value_ - secondEnd->margin_;
              ADXHorizontalWidgetRun_computeInsetRatioWithIntArray_withInt_withInt_withInt_withInt_withFloat_withInt_(self, ADXHorizontalWidgetRun_tempDimensions, x1, x2, y1, y2, ratio, definedSide);
              [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:IOSIntArray_Get(nil_chk(ADXHorizontalWidgetRun_tempDimensions), ADXConstraintWidget_HORIZONTAL)];
              [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:IOSIntArray_Get(nil_chk(ADXHorizontalWidgetRun_tempDimensions), ADXConstraintWidget_VERTICAL)];
            }
            else if (s1 && e1) {
              if (!(((ADXDependencyNode *) nil_chk(start_))->readyToSolve_ && ((ADXDependencyNode *) nil_chk(end_))->readyToSolve_)) {
                return;
              }
              jfloat ratio = [((ADXConstraintWidget *) nil_chk(widget_)) getDimensionRatio];
              jint x1 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
              jint x2 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]))->value_ - ((ADXDependencyNode *) nil_chk(end_))->margin_;
              switch (definedSide) {
                case ADXConstraintWidget_UNKNOWN:
                case ADXConstraintWidget_HORIZONTAL:
                {
                  jint dx = x2 - x1;
                  jint ldx = [self getLimitedDimensionWithInt:dx withInt:ADXConstraintWidget_HORIZONTAL];
                  jint dy = JreFpToInt((0.5f + ldx * ratio));
                  jint ldy = [self getLimitedDimensionWithInt:dy withInt:ADXConstraintWidget_VERTICAL];
                  if (dy != ldy) {
                    ldx = JreFpToInt((0.5f + ldy / ratio));
                  }
                  [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:ldx];
                  [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:ldy];
                }
                break;
                case ADXConstraintWidget_VERTICAL:
                {
                  jint dx = x2 - x1;
                  jint ldx = [self getLimitedDimensionWithInt:dx withInt:ADXConstraintWidget_HORIZONTAL];
                  jint dy = JreFpToInt((0.5f + ldx / ratio));
                  jint ldy = [self getLimitedDimensionWithInt:dy withInt:ADXConstraintWidget_VERTICAL];
                  if (dy != ldy) {
                    ldx = JreFpToInt((0.5f + ldy * ratio));
                  }
                  [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:ldx];
                  [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:ldy];
                }
                break;
                default:
                break;
              }
            }
            else if (s2 && e2) {
              if (!(((ADXDependencyNode *) nil_chk(secondStart))->readyToSolve_ && ((ADXDependencyNode *) nil_chk(secondEnd))->readyToSolve_)) {
                return;
              }
              jfloat ratio = [((ADXConstraintWidget *) nil_chk(widget_)) getDimensionRatio];
              jint y1 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(secondStart->targets_)) getWithInt:0]))->value_ + secondStart->margin_;
              jint y2 = ((ADXDependencyNode *) nil_chk([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(secondEnd))->targets_)) getWithInt:0]))->value_ - secondEnd->margin_;
              switch (definedSide) {
                case ADXConstraintWidget_UNKNOWN:
                case ADXConstraintWidget_VERTICAL:
                {
                  jint dy = y2 - y1;
                  jint ldy = [self getLimitedDimensionWithInt:dy withInt:ADXConstraintWidget_VERTICAL];
                  jint dx = JreFpToInt((0.5f + ldy / ratio));
                  jint ldx = [self getLimitedDimensionWithInt:dx withInt:ADXConstraintWidget_HORIZONTAL];
                  if (dx != ldx) {
                    ldy = JreFpToInt((0.5f + ldx * ratio));
                  }
                  [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:ldx];
                  [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:ldy];
                }
                break;
                case ADXConstraintWidget_HORIZONTAL:
                {
                  jint dy = y2 - y1;
                  jint ldy = [self getLimitedDimensionWithInt:dy withInt:ADXConstraintWidget_VERTICAL];
                  jint dx = JreFpToInt((0.5f + ldy * ratio));
                  jint ldx = [self getLimitedDimensionWithInt:dx withInt:ADXConstraintWidget_HORIZONTAL];
                  if (dx != ldx) {
                    ldy = JreFpToInt((0.5f + ldx / ratio));
                  }
                  [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:ldx];
                  [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_)) resolveWithInt:ldy];
                }
                break;
                default:
                break;
              }
            }
          }
          else {
            jint size = 0;
            jint ratioSide = [widget_ getDimensionRatioSide];
            switch (ratioSide) {
              case ADXConstraintWidget_HORIZONTAL:
              {
                size = JreFpToInt((0.5f + ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->value_ / [widget_ getDimensionRatio]));
              }
              break;
              case ADXConstraintWidget_VERTICAL:
              {
                size = JreFpToInt((0.5f + ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->value_ * [widget_ getDimensionRatio]));
              }
              break;
              case ADXConstraintWidget_UNKNOWN:
              {
                size = JreFpToInt((0.5f + ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->dimension_))->value_ * [widget_ getDimensionRatio]));
              }
              break;
              default:
              break;
            }
            [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:size];
          }
        }
        break;
        case ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT:
        {
          ADXConstraintWidget *parent = JreRetainedLocalValue([widget_ getParent]);
          if (parent != nil) {
            if (((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(parent->horizontalRun_))->dimension_))->resolved_) {
              jfloat percent = ((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintPercentWidth_;
              jint targetDimensionValue = parent->horizontalRun_->dimension_->value_;
              jint size = JreFpToInt((0.5f + targetDimensionValue * percent));
              [dimension_ resolveWithInt:size];
            }
          }
        }
        break;
        default:
        break;
      }
    }
  }
  if (!(((ADXDependencyNode *) nil_chk(start_))->readyToSolve_ && ((ADXDependencyNode *) nil_chk(end_))->readyToSolve_)) {
    return;
  }
  if (start_->resolved_ && ((ADXDependencyNode *) nil_chk(end_))->resolved_ && ((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    return;
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ && dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && ((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD && ![widget_ isInHorizontalChain]) {
    ADXDependencyNode *startTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]);
    ADXDependencyNode *endTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]);
    jint startPos = ((ADXDependencyNode *) nil_chk(startTarget))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
    jint endPos = ((ADXDependencyNode *) nil_chk(endTarget))->value_ + ((ADXDependencyNode *) nil_chk(end_))->margin_;
    jint distance = endPos - startPos;
    [start_ resolveWithInt:startPos];
    [((ADXDependencyNode *) nil_chk(end_)) resolveWithInt:endPos];
    [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:distance];
    return;
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_ && dimensionBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && matchConstraintsType_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
    if ([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) size] > 0 && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) size] > 0) {
      ADXDependencyNode *startTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]);
      ADXDependencyNode *endTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]);
      jint startPos = ((ADXDependencyNode *) nil_chk(startTarget))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
      jint endPos = ((ADXDependencyNode *) nil_chk(endTarget))->value_ + ((ADXDependencyNode *) nil_chk(end_))->margin_;
      jint availableSpace = endPos - startPos;
      jint value = JavaLangMath_minWithInt_withInt_(availableSpace, ((ADXDimensionDependency *) nil_chk(dimension_))->wrapValue_);
      jint max = ((ADXConstraintWidget *) nil_chk(widget_))->mMatchConstraintMaxWidth_;
      jint min = widget_->mMatchConstraintMinWidth_;
      value = JavaLangMath_maxWithInt_withInt_(min, value);
      if (max > 0) {
        value = JavaLangMath_minWithInt_withInt_(max, value);
      }
      [((ADXDimensionDependency *) nil_chk(dimension_)) resolveWithInt:value];
    }
  }
  if (!((ADXDimensionDependency *) nil_chk(dimension_))->resolved_) {
    return;
  }
  ADXDependencyNode *startTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) getWithInt:0]);
  ADXDependencyNode *endTarget = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end_))->targets_)) getWithInt:0]);
  jint startPos = ((ADXDependencyNode *) nil_chk(startTarget))->value_ + ((ADXDependencyNode *) nil_chk(start_))->margin_;
  jint endPos = ((ADXDependencyNode *) nil_chk(endTarget))->value_ + ((ADXDependencyNode *) nil_chk(end_))->margin_;
  jfloat bias = [((ADXConstraintWidget *) nil_chk(widget_)) getHorizontalBiasPercent];
  if (startTarget == endTarget) {
    startPos = startTarget->value_;
    endPos = endTarget->value_;
    bias = 0.5f;
  }
  jint distance = (endPos - startPos - ((ADXDimensionDependency *) nil_chk(dimension_))->value_);
  [((ADXDependencyNode *) nil_chk(start_)) resolveWithInt:JreFpToInt((0.5f + startPos + distance * bias))];
  [((ADXDependencyNode *) nil_chk(end_)) resolveWithInt:((ADXDependencyNode *) nil_chk(start_))->value_ + ((ADXDimensionDependency *) nil_chk(dimension_))->value_];
}

- (void)applyToWidget {
  if (((ADXDependencyNode *) nil_chk(start_))->resolved_) {
    [((ADXConstraintWidget *) nil_chk(widget_)) setXWithInt:start_->value_];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXConstraintWidget:);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(clear);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(supportsWrapComputation);
  methods[5].selector = @selector(apply);
  methods[6].selector = @selector(computeInsetRatioWithIntArray:withInt:withInt:withInt:withInt:withFloat:withInt:);
  methods[7].selector = @selector(updateWithADXDependency:);
  methods[8].selector = @selector(applyToWidget);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "tempDimensions", "[I", .constantValue.asLong = 0, 0xa, -1, 6, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXConstraintWidget;", "toString", "computeInsetRatio", "[IIIIIFI", "update", "LADXDependency;", &ADXHorizontalWidgetRun_tempDimensions };
  static const J2ObjcClassInfo _ADXHorizontalWidgetRun = { "HorizontalWidgetRun", "androidx.constraintlayout.core.widgets.analyzer", ptrTable, methods, fields, 7, 0x1, 9, 1, -1, -1, -1, -1, -1 };
  return &_ADXHorizontalWidgetRun;
}

+ (void)initialize {
  if (self == [ADXHorizontalWidgetRun class]) {
    JreStrongAssignAndConsume(&ADXHorizontalWidgetRun_tempDimensions, [IOSIntArray newArrayWithLength:2]);
    J2OBJC_SET_INITIALIZED(ADXHorizontalWidgetRun)
  }
}

@end

void ADXHorizontalWidgetRun_initWithADXConstraintWidget_(ADXHorizontalWidgetRun *self, ADXConstraintWidget *widget) {
  ADXWidgetRun_initWithADXConstraintWidget_(self, widget);
  JreStrongAssign(&((ADXDependencyNode *) nil_chk(self->start_))->type_, JreLoadEnum(ADXDependencyNode_Type, LEFT));
  JreStrongAssign(&((ADXDependencyNode *) nil_chk(self->end_))->type_, JreLoadEnum(ADXDependencyNode_Type, RIGHT));
  self->orientation_ = ADXConstraintWidget_HORIZONTAL;
}

ADXHorizontalWidgetRun *new_ADXHorizontalWidgetRun_initWithADXConstraintWidget_(ADXConstraintWidget *widget) {
  J2OBJC_NEW_IMPL(ADXHorizontalWidgetRun, initWithADXConstraintWidget_, widget)
}

ADXHorizontalWidgetRun *create_ADXHorizontalWidgetRun_initWithADXConstraintWidget_(ADXConstraintWidget *widget) {
  J2OBJC_CREATE_IMPL(ADXHorizontalWidgetRun, initWithADXConstraintWidget_, widget)
}

void ADXHorizontalWidgetRun_computeInsetRatioWithIntArray_withInt_withInt_withInt_withInt_withFloat_withInt_(ADXHorizontalWidgetRun *self, IOSIntArray *dimensions, jint x1, jint x2, jint y1, jint y2, jfloat ratio, jint side) {
  jint dx = x2 - x1;
  jint dy = y2 - y1;
  switch (side) {
    case ADXConstraintWidget_UNKNOWN:
    {
      jint candidateX1 = JreFpToInt((0.5f + dy * ratio));
      jint candidateY1 = dy;
      jint candidateX2 = dx;
      jint candidateY2 = JreFpToInt((0.5f + dx / ratio));
      if (candidateX1 <= dx && candidateY1 <= dy) {
        *IOSIntArray_GetRef(nil_chk(dimensions), ADXConstraintWidget_HORIZONTAL) = candidateX1;
        *IOSIntArray_GetRef(dimensions, ADXConstraintWidget_VERTICAL) = candidateY1;
      }
      else if (candidateX2 <= dx && candidateY2 <= dy) {
        *IOSIntArray_GetRef(nil_chk(dimensions), ADXConstraintWidget_HORIZONTAL) = candidateX2;
        *IOSIntArray_GetRef(dimensions, ADXConstraintWidget_VERTICAL) = candidateY2;
      }
    }
    break;
    case ADXConstraintWidget_HORIZONTAL:
    {
      jint horizontalSide = JreFpToInt((0.5f + dy * ratio));
      *IOSIntArray_GetRef(nil_chk(dimensions), ADXConstraintWidget_HORIZONTAL) = horizontalSide;
      *IOSIntArray_GetRef(dimensions, ADXConstraintWidget_VERTICAL) = dy;
    }
    break;
    case ADXConstraintWidget_VERTICAL:
    {
      jint verticalSide = JreFpToInt((0.5f + dx * ratio));
      *IOSIntArray_GetRef(nil_chk(dimensions), ADXConstraintWidget_HORIZONTAL) = dx;
      *IOSIntArray_GetRef(dimensions, ADXConstraintWidget_VERTICAL) = verticalSide;
    }
    break;
    default:
    break;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXHorizontalWidgetRun)
