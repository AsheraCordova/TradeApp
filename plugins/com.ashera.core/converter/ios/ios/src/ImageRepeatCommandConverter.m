//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\ImageRepeatCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "Drawable.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "ImageRepeatCommandConverter.h"
#include "J2ObjC_source.h"


@interface ASImageRepeatCommandConverter () {
 @public
  NSString *backgroundRepeat_;
}

- (id)colorWithPatternImageWithId:(id)image;

@end

J2OBJC_FIELD_SETTER(ASImageRepeatCommandConverter, backgroundRepeat_, NSString *)

__attribute__((unused)) static id ASImageRepeatCommandConverter_colorWithPatternImageWithId_(ASImageRepeatCommandConverter *self, id image);

@implementation ASImageRepeatCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASImageRepeatCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (backgroundRepeat_ != nil && [backgroundRepeat_ isEqual:@"repeat"]) {
    jint minWidth = 0;
    jint minHeight = 0;
    if ([value isKindOfClass:[ADDrawable class]]) {
      ADDrawable *drawable = (ADDrawable *) value;
      minWidth = [((ADDrawable *) nil_chk(drawable)) getMinimumWidth];
      minHeight = [drawable getMinimumHeight];
      value = [drawable getDrawable];
    }
    id colorWithPatternImage = ASImageRepeatCommandConverter_colorWithPatternImageWithId_(self, value);
    if (colorWithPatternImage != nil) {
      ADDrawable *drawable = new_ADDrawable_init();
      [drawable setMinimumWidthWithInt:minWidth];
      [drawable setMinimumHeightWithInt:minHeight];
      [drawable setDrawableWithId:colorWithPatternImage];
      return drawable;
    }
  }
  return value;
}

- (id)colorWithPatternImageWithId:(id)image {
  return ASImageRepeatCommandConverter_colorWithPatternImageWithId_(self, image);
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASImageRepeatCommandConverter *backgroundRepeatCommandConverter = new_ASImageRepeatCommandConverter_initWithNSString_(self->id__);
  backgroundRepeatCommandConverter->priority_ = 10;
  [backgroundRepeatCommandConverter updateArgsWithNSObjectArray:args];
  return backgroundRepeatCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  self->backgroundRepeat_ = (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(colorWithPatternImageWithId:);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "backgroundRepeat_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "colorWithPatternImage", "LNSObject;", "newInstance", "[LNSObject;", "updateArgs" };
  static const J2ObjcClassInfo _ASImageRepeatCommandConverter = { "ImageRepeatCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ASImageRepeatCommandConverter;
}

@end

void ASImageRepeatCommandConverter_initWithNSString_(ASImageRepeatCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASImageRepeatCommandConverter *new_ASImageRepeatCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASImageRepeatCommandConverter, initWithNSString_, id_)
}

ASImageRepeatCommandConverter *create_ASImageRepeatCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASImageRepeatCommandConverter, initWithNSString_, id_)
}

id ASImageRepeatCommandConverter_colorWithPatternImageWithId_(ASImageRepeatCommandConverter *self, id image) {
  if ([image isKindOfClass:[UIImage class]]) {
    return [UIColor colorWithPatternImage:(UIImage*) image];
  } else {
    return nil;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageRepeatCommandConverter)
