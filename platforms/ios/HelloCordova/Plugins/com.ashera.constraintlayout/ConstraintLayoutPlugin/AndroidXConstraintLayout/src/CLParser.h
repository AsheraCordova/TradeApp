//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CLParser")
#ifdef RESTRICT_CLParser
#define INCLUDE_ALL_CLParser 0
#else
#define INCLUDE_ALL_CLParser 1
#endif
#undef RESTRICT_CLParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXCLParser_) && (INCLUDE_ALL_CLParser || defined(INCLUDE_ADXCLParser))
#define ADXCLParser_

@class ADXCLObject;

@interface ADXCLParser : NSObject

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)content;

- (ADXCLObject *)parse;

+ (ADXCLObject *)parseWithNSString:(NSString *)string;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCLParser)

inline jboolean ADXCLParser_get_DEBUG(void);
inline jboolean ADXCLParser_set_DEBUG(jboolean value);
inline jboolean *ADXCLParser_getRef_DEBUG(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jboolean ADXCLParser_DEBUG;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXCLParser, DEBUG, jboolean)

FOUNDATION_EXPORT ADXCLObject *ADXCLParser_parseWithNSString_(NSString *string);

FOUNDATION_EXPORT void ADXCLParser_initWithNSString_(ADXCLParser *self, NSString *content);

FOUNDATION_EXPORT ADXCLParser *new_ADXCLParser_initWithNSString_(NSString *content) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXCLParser *create_ADXCLParser_initWithNSString_(NSString *content);

J2OBJC_TYPE_LITERAL_HEADER(ADXCLParser)

@compatibility_alias AndroidxConstraintlayoutCoreParserCLParser ADXCLParser;

#endif

#if !defined (ADXCLParser_TYPE_) && (INCLUDE_ALL_CLParser || defined(INCLUDE_ADXCLParser_TYPE))
#define ADXCLParser_TYPE_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ADXCLParser_TYPE_Enum) {
  ADXCLParser_TYPE_Enum_UNKNOWN = 0,
  ADXCLParser_TYPE_Enum_OBJECT = 1,
  ADXCLParser_TYPE_Enum_ARRAY = 2,
  ADXCLParser_TYPE_Enum_NUMBER = 3,
  ADXCLParser_TYPE_Enum_STRING = 4,
  ADXCLParser_TYPE_Enum_KEY = 5,
  ADXCLParser_TYPE_Enum_TOKEN = 6,
};

@interface ADXCLParser_TYPE : JavaLangEnum

#pragma mark Public

+ (ADXCLParser_TYPE *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXCLParser_TYPE_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ADXCLParser_TYPE)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXCLParser_TYPE *ADXCLParser_TYPE_values_[];

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, UNKNOWN)

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_OBJECT(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, OBJECT)

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_ARRAY(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, ARRAY)

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_NUMBER(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, NUMBER)

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_STRING(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, STRING)

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_KEY(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, KEY)

inline ADXCLParser_TYPE *ADXCLParser_TYPE_get_TOKEN(void);
J2OBJC_ENUM_CONSTANT(ADXCLParser_TYPE, TOKEN)

FOUNDATION_EXPORT IOSObjectArray *ADXCLParser_TYPE_values(void);

FOUNDATION_EXPORT ADXCLParser_TYPE *ADXCLParser_TYPE_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXCLParser_TYPE *ADXCLParser_TYPE_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXCLParser_TYPE)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CLParser")
