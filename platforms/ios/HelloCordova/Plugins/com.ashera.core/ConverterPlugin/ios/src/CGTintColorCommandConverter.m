//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\CGTintColorCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "CGTintColorCommandConverter.h"
#include "Color.h"
#include "ColorStateList.h"
#include "Drawable.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "View.h"
#include "java/lang/Integer.h"


@interface ASCGTintColorCommandConverter () {
 @public
  id drawableTint_;
  jint drawableTintMode_;
}

- (void)nativeSetDefaultTintMode;

- (id)colorImageWithId:(id)objImage
                withId:(id)drawableTintObj
               withInt:(jint)drawableTintMode;

@end

J2OBJC_FIELD_SETTER(ASCGTintColorCommandConverter, drawableTint_, id)

__attribute__((unused)) static void ASCGTintColorCommandConverter_nativeSetDefaultTintMode(ASCGTintColorCommandConverter *self);

__attribute__((unused)) static id ASCGTintColorCommandConverter_colorImageWithId_withId_withInt_(ASCGTintColorCommandConverter *self, id objImage, id drawableTintObj, jint drawableTintMode);

@implementation ASCGTintColorCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASCGTintColorCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (void)nativeSetDefaultTintMode {
  ASCGTintColorCommandConverter_nativeSetDefaultTintMode(self);
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (drawableTint_ == nil && drawableTintMode_ == 0) {
    return value;
  }
  id myTint = drawableTint_;
  if ([myTint isKindOfClass:[ADColorStateList class]]) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
    jint color = [((ADColorStateList *) nil_chk(((ADColorStateList *) myTint))) getColorForStateWithIntArray:[((ADView *) nil_chk(view)) getDrawableState] withInt:ADColor_RED];
    myTint = [self getColorWithInt:color];
  }
  if ([value isKindOfClass:[ADDrawable class]]) {
    value = [((ADDrawable *) nil_chk(((ADDrawable *) value))) getDrawable];
  }
  return ASCGTintColorCommandConverter_colorImageWithId_withId_withInt_(self, value, myTint, drawableTintMode_);
}

- (id)getColorWithInt:(jint)color {
  return ASPluginInvoker_getColorWithNSString_(ADColor_formatColorWithInt_(color));
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASCGTintColorCommandConverter *drawableTintCommandConverter = new_ASCGTintColorCommandConverter_initWithNSString_(self->id__);
  [drawableTintCommandConverter updateArgsWithNSObjectArray:args];
  return drawableTintCommandConverter;
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  if (((IOSObjectArray *) nil_chk(args))->size_ > 0) {
    if ([nil_chk(IOSObjectArray_Get(args, 0)) isEqual:@"drawableTint"]) {
      drawableTint_ = IOSObjectArray_Get(args, 1);
    }
    if ([nil_chk(IOSObjectArray_Get(args, 0)) isEqual:@"drawableTintMode"]) {
      drawableTintMode_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangInteger class]))) intValue];
    }
  }
}

- (id)getValueWithNSString:(NSString *)attributeName {
  switch (JreIndexOfStr(attributeName, (id[]){ @"drawableTint", @"drawableTintMode" }, 2)) {
    case 0:
    return drawableTint_;
    case 1:
    return JavaLangInteger_valueOfWithInt_(drawableTintMode_);
    default:
    break;
  }
  return nil;
}

- (id)colorImageWithId:(id)objImage
                withId:(id)drawableTintObj
               withInt:(jint)drawableTintMode {
  return ASCGTintColorCommandConverter_colorImageWithId_withId_withInt_(self, objImage, drawableTintObj, drawableTintMode);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 7, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(nativeSetDefaultTintMode);
  methods[2].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[3].selector = @selector(getColorWithInt:);
  methods[4].selector = @selector(newInstanceWithNSObjectArray:);
  methods[5].selector = @selector(executeAfterPostMeasure);
  methods[6].selector = @selector(updateArgsWithNSObjectArray:);
  methods[7].selector = @selector(getValueWithNSString:);
  methods[8].selector = @selector(colorImageWithId:withId:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "drawableTint_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawableTintMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "getColor", "I", "newInstance", "[LNSObject;", "updateArgs", "getValue", "colorImage", "LNSObject;LNSObject;I" };
  static const J2ObjcClassInfo _ASCGTintColorCommandConverter = { "CGTintColorCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 9, 2, -1, -1, -1, -1, -1 };
  return &_ASCGTintColorCommandConverter;
}

@end

void ASCGTintColorCommandConverter_initWithNSString_(ASCGTintColorCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
  ASCGTintColorCommandConverter_nativeSetDefaultTintMode(self);
}

ASCGTintColorCommandConverter *new_ASCGTintColorCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASCGTintColorCommandConverter, initWithNSString_, id_)
}

ASCGTintColorCommandConverter *create_ASCGTintColorCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASCGTintColorCommandConverter, initWithNSString_, id_)
}

void ASCGTintColorCommandConverter_nativeSetDefaultTintMode(ASCGTintColorCommandConverter *self) {
  self->drawableTintMode_ =  (jint) kCGBlendModeSourceAtop;
}

id ASCGTintColorCommandConverter_colorImageWithId_withId_withInt_(ASCGTintColorCommandConverter *self, id objImage, id drawableTintObj, jint drawableTintMode) {
  if ([objImage isKindOfClass:[UIImage class]]) {
    UIImage* image = (UIImage*) objImage;
    UIColor* drawableTint = (UIColor*) drawableTintObj;
    UIGraphicsBeginImageContextWithOptions(image.size, NO, [UIScreen mainScreen].scale);
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    CGContextTranslateCTM(context, 0, image.size.height);
    CGContextScaleCTM(context, 1.0, -1.0);
    CGRect rect = CGRectMake(0, 0, image.size.width, image.size.height);
    CGContextSetBlendMode(context, kCGBlendModeNormal);
    CGContextDrawImage(context, rect, image.CGImage);
    CGContextSetBlendMode(context, drawableTintMode);
    [drawableTint setFill];
    CGContextFillRect(context, rect);
    
    UIImage *coloredImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return coloredImage;
  } else {
    return objImage;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCGTintColorCommandConverter)
