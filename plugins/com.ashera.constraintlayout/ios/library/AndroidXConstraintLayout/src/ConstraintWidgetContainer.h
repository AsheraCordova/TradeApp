//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\ConstraintWidgetContainer.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ConstraintWidgetContainer")
#ifdef RESTRICT_ConstraintWidgetContainer
#define INCLUDE_ALL_ConstraintWidgetContainer 0
#else
#define INCLUDE_ALL_ConstraintWidgetContainer 1
#endif
#undef RESTRICT_ConstraintWidgetContainer

#if !defined (ADXConstraintWidgetContainer_) && (INCLUDE_ALL_ConstraintWidgetContainer || defined(INCLUDE_ADXConstraintWidgetContainer))
#define ADXConstraintWidgetContainer_

#define RESTRICT_WidgetContainer 1
#define INCLUDE_ADXWidgetContainer 1
#include "WidgetContainer.h"

@class ADXBasicMeasure;
@class ADXBasicMeasure_Measure;
@class ADXConstraintAnchor;
@class ADXConstraintWidget;
@class ADXDependencyGraph;
@class ADXLinearSystem;
@class ADXMetrics;
@class IOSBooleanArray;
@class IOSObjectArray;
@class JavaUtilArrayList;
@class JavaUtilHashSet;
@protocol ADXBasicMeasure_Measurer;

/*!
 @brief A container of ConstraintWidget that can layout its children
 */
@interface ADXConstraintWidgetContainer : ADXWidgetContainer {
 @public
  ADXBasicMeasure *mBasicMeasureSolver_;
  ADXDependencyGraph *mDependencyGraph_;
  id<ADXBasicMeasure_Measurer> mMeasurer_;
  ADXMetrics *mMetrics_;
  ADXLinearSystem *mSystem_;
  jint mPaddingLeft_;
  jint mPaddingTop_;
  jint mPaddingRight_;
  jint mPaddingBottom_;
  jint mHorizontalChainsSize_;
  jint mVerticalChainsSize_;
  IOSObjectArray *mVerticalChainsArray_;
  IOSObjectArray *mHorizontalChainsArray_;
  jboolean mGroupsWrapOptimized_;
  jboolean mHorizontalWrapOptimized_;
  jboolean mVerticalWrapOptimized_;
  jint mWrapFixedWidth_;
  jint mWrapFixedHeight_;
  jboolean mSkipSolver_;
  jint mDebugSolverPassCount_;
  JavaUtilHashSet *widgetsToAdd_;
  ADXBasicMeasure_Measure *mMeasure_;
}

#pragma mark Public

/*!
 @brief Default constructor
 */
- (instancetype)init;

/*!
 @brief Constructor
 @param width width of the layout
 @param height height of the layout
 */
- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height;

/*!
 @brief Constructor
 @param x x position
 @param y y position
 @param width width of the layout
 @param height height of the layout
 */
- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)width
                    withInt:(jint)height;

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(jint)width
                         withInt:(jint)height;

/*!
 @brief Add this widget to the solver
 @param system the solver we want to add the widget to
 */
- (jboolean)addChildrenToSolverWithADXLinearSystem:(ADXLinearSystem *)system;

- (void)addHorizontalWrapMaxVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)right;

- (void)addHorizontalWrapMinVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)left;

- (void)defineTerminalWidgets;

- (jboolean)directMeasureWithBoolean:(jboolean)optimizeWrap;

- (jboolean)directMeasureSetupWithBoolean:(jboolean)optimizeWrap;

- (jboolean)directMeasureWithOrientationWithBoolean:(jboolean)optimizeWrap
                                            withInt:(jint)orientation;

- (void)fillMetricsWithADXMetrics:(ADXMetrics *)metrics;

/*!
 @brief Accessor to the horizontal guidelines contained in the table.
 @return array of guidelines
 */
- (JavaUtilArrayList *)getHorizontalGuidelines;

- (id<ADXBasicMeasure_Measurer>)getMeasurer;

/*!
 @brief Returns the current optimization level
 */
- (jint)getOptimizationLevel;

- (ADXLinearSystem *)getSystem;

/*!
 @brief Specify the xml type for the container
 */
- (NSString *)getType;

/*!
 @brief Accessor to the vertical guidelines contained in the table.
 @return array of guidelines
 */
- (JavaUtilArrayList *)getVerticalGuidelines;

/*!
 @brief Indicates if the container knows how to layout its content on its own
 @return true if the container does the layout, false otherwise
 */
- (jboolean)handlesInternalConstraints;

/*!
 @brief Invalidate the graph of constraints
 */
- (void)invalidateGraph;

/*!
 @brief Invalidate the widgets measures
 */
- (void)invalidateMeasures;

/*!
 @brief Return true if the height given is too small for the content laid out
 */
- (jboolean)isHeightMeasuredTooSmall;

/*!
 @brief Returns the rtl status.
 @return true if in RTL, false otherwise.
 */
- (jboolean)isRtl;

/*!
 @brief Return true if the width given is too small for the content laid out
 */
- (jboolean)isWidthMeasuredTooSmall;

/*!
 @brief Layout the tree of widgets
 */
- (void)layout;

+ (jboolean)measureWithInt:(jint)level
   withADXConstraintWidget:(ADXConstraintWidget *)widget
withADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer
withADXBasicMeasure_Measure:(ADXBasicMeasure_Measure *)measure
                   withInt:(jint)measureStrategy;

/*!
 @brief Measure the layout
 @param optimizationLevel
 @param widthMode
 @param widthSize
 @param heightMode
 @param heightSize
 @param paddingX
 @param paddingY
 */
- (jlong)measureWithInt:(jint)optimizationLevel
                withInt:(jint)widthMode
                withInt:(jint)widthSize
                withInt:(jint)heightMode
                withInt:(jint)heightSize
                withInt:(jint)lastMeasureWidth
                withInt:(jint)lastMeasureHeight
                withInt:(jint)paddingX
                withInt:(jint)paddingY;

/*!
 @brief Returns true if the given feature should be optimized
 @param feature
 */
- (jboolean)optimizeForWithInt:(jint)feature;

- (void)release__;

- (void)reset;

- (void)setMeasurerWithADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer;

/*!
 @brief Resolves the system directly when possible
 @param value optimization level
 */
- (void)setOptimizationLevelWithInt:(jint)value;

/*!
 @brief Set the padding on this container.It will apply to the position of the children.
 @param left left padding
 @param top top padding
 @param right right padding
 @param bottom bottom padding
 */
- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom;

/*!
 @brief Keep track of the # of passes
 @param pass
 */
- (void)setPassWithInt:(jint)pass;

/*!
 @brief Set the rtl status.This has implications for Chains.
 @param isRtl true if we are in RTL.
 */
- (void)setRtlWithBoolean:(jboolean)isRtl;

/*!
 @brief Update the frame of the layout and its children from the solver
 @param system the solver we get the values from.
 */
- (jboolean)updateChildrenFromSolverWithADXLinearSystem:(ADXLinearSystem *)system
                                       withBooleanArray:(IOSBooleanArray *)flags;

- (void)updateFromRunsWithBoolean:(jboolean)updateHorizontal
                      withBoolean:(jboolean)updateVertical;

- (void)updateHierarchy;

#pragma mark Package-Private

/*!
 @brief Add the chain which constraintWidget is part of.Called by ConstraintWidget::addToSolver()
 @param constraintWidget
 @param type HORIZONTAL or VERTICAL chain
 */
- (void)addChainWithADXConstraintWidget:(ADXConstraintWidget *)constraintWidget
                                withInt:(jint)type;

- (void)addVerticalWrapMaxVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)bottom;

- (void)addVerticalWrapMinVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)top;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXConstraintWidgetContainer)

J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mBasicMeasureSolver_, ADXBasicMeasure *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mDependencyGraph_, ADXDependencyGraph *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mMeasurer_, id<ADXBasicMeasure_Measurer>)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mMetrics_, ADXMetrics *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mSystem_, ADXLinearSystem *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mVerticalChainsArray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mHorizontalChainsArray_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, widgetsToAdd_, JavaUtilHashSet *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, mMeasure_, ADXBasicMeasure_Measure *)

inline jboolean ADXConstraintWidgetContainer_get_DEBUG_GRAPH(void);
#define ADXConstraintWidgetContainer_DEBUG_GRAPH false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidgetContainer, DEBUG_GRAPH, jboolean)

inline jint ADXConstraintWidgetContainer_get_myCounter(void);
inline jint ADXConstraintWidgetContainer_set_myCounter(jint value);
inline jint *ADXConstraintWidgetContainer_getRef_myCounter(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ADXConstraintWidgetContainer_myCounter;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXConstraintWidgetContainer, myCounter, jint)

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_init(ADXConstraintWidgetContainer *self);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_init(void);

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(ADXConstraintWidgetContainer *self, jint x, jint y, jint width, jint height);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height);

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_initWithInt_withInt_(ADXConstraintWidgetContainer *self, jint width, jint height);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithInt_withInt_(jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithInt_withInt_(jint width, jint height);

FOUNDATION_EXPORT void ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(ADXConstraintWidgetContainer *self, NSString *debugName, jint width, jint height);

FOUNDATION_EXPORT ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(NSString *debugName, jint width, jint height) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(NSString *debugName, jint width, jint height);

FOUNDATION_EXPORT jboolean ADXConstraintWidgetContainer_measureWithInt_withADXConstraintWidget_withADXBasicMeasure_Measurer_withADXBasicMeasure_Measure_withInt_(jint level, ADXConstraintWidget *widget, id<ADXBasicMeasure_Measurer> measurer, ADXBasicMeasure_Measure *measure, jint measureStrategy);

J2OBJC_TYPE_LITERAL_HEADER(ADXConstraintWidgetContainer)

@compatibility_alias AndroidxConstraintlayoutCoreWidgetsConstraintWidgetContainer ADXConstraintWidgetContainer;

#endif

#pragma pop_macro("INCLUDE_ALL_ConstraintWidgetContainer")
