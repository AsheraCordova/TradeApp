//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\GroupImpl.java
//

#include "BaseWidget.h"
#include "ConstraintReferencedIdsConverter.h"
#include "ConverterFactory.h"
#include "Group.h"
#include "GroupImpl.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "View.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIView.h"


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASGroupImpl () {
 @public
  ASGroupImpl_GroupCommandBuilder *builder_;
  ASGroupImpl_GroupBean *bean_;
}

- (void)setWidgetOnNativeClass;

- (void)setConstraintReferenced_idsWithId:(id)objValue;

- (id)getConstraintReferencedIds;

@end

J2OBJC_FIELD_SETTER(ASGroupImpl, builder_, ASGroupImpl_GroupCommandBuilder *)
J2OBJC_FIELD_SETTER(ASGroupImpl, bean_, ASGroupImpl_GroupBean *)

__attribute__((unused)) static void ASGroupImpl_setWidgetOnNativeClass(ASGroupImpl *self);

__attribute__((unused)) static void ASGroupImpl_setConstraintReferenced_idsWithId_(ASGroupImpl *self, id objValue);

__attribute__((unused)) static id ASGroupImpl_getConstraintReferencedIds(ASGroupImpl *self);

@interface ASGroupImpl_GroupExt () {
 @public
  __unsafe_unretained ASGroupImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASGroupImpl_GroupExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASGroupImpl_GroupExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASGroupImpl_GroupCommandBuilder () {
 @public
  ASGroupImpl *this$0_;
}

@end

@interface ASGroupImpl_GroupBean () {
 @public
  ASGroupImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASGroupImpl)

NSString *ASGroupImpl_LOCAL_NAME = @"androidx.constraintlayout.widget.Group";
NSString *ASGroupImpl_GROUP_NAME = @"androidx.constraintlayout.widget.Group";

@implementation ASGroupImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"constraint_referenced_ids"])) withTypeWithNSString:@"GroupImpl.constraintReferencedIds"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASGroupImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASGroupImpl_GroupExt *) nil_chk(((ASGroupImpl_GroupExt *) cast_chk(group_, [ASGroupImpl_GroupExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASGroupImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  group_ = new_ASGroupImpl_GroupExt_initWithASGroupImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASGroupImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASGroupImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"constraint_referenced_ids" }, 1)) {
    case 0:
    {
      ASGroupImpl_setConstraintReferenced_idsWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"constraint_referenced_ids" }, 1)) {
    case 0:
    {
      return ASGroupImpl_getConstraintReferencedIds(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return group_;
}

- (void)setConstraintReferenced_idsWithId:(id)objValue {
  ASGroupImpl_setConstraintReferenced_idsWithId_(self, objValue);
}

- (id)getConstraintReferencedIds {
  return ASGroupImpl_getConstraintReferencedIds(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXGroup *) nil_chk(group_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
    [self nativeRequestLayout];
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASGroupImpl_GroupBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASGroupImpl_GroupBean_initWithASGroupImpl_(self);
  }
  return bean_;
}

- (ASGroupImpl_GroupCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASGroupImpl_GroupCommandBuilder_initWithASGroupImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)nativeRequestLayout {
  [((id<ADViewParent>) nil_chk([((ADXGroup *) nil_chk(group_)) getParent])) requestLayout];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LASGroupImpl_GroupBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGroupImpl_GroupCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(setConstraintReferenced_idsWithId:);
  methods[10].selector = @selector(getConstraintReferencedIds);
  methods[11].selector = @selector(asNativeWidget);
  methods[12].selector = @selector(checkIosVersionWithNSString:);
  methods[13].selector = @selector(setIdWithNSString:);
  methods[14].selector = @selector(requestLayout);
  methods[15].selector = @selector(invalidate);
  methods[16].selector = @selector(getPluginWithNSString:);
  methods[17].selector = @selector(getBean);
  methods[18].selector = @selector(getBuilder);
  methods[19].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[20].selector = @selector(nativeRequestLayout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "group_", "LADXGroup;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "builder_", "LASGroupImpl_GroupCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASGroupImpl_GroupBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setConstraintReferenced_ids", "LNSObject;", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", &ASGroupImpl_LOCAL_NAME, &ASGroupImpl_GROUP_NAME, "LASGroupImpl_GroupExt;LASGroupImpl_GroupCommandBuilder;LASGroupImpl_GroupBean;" };
  static const J2ObjcClassInfo _ASGroupImpl = { "GroupImpl", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 21, 6, -1, 21, -1, -1, -1 };
  return &_ASGroupImpl;
}

+ (void)initialize {
  if (self == [ASGroupImpl class]) {
    {
      ASConverterFactory_register__WithNSString_withASIConverter_(@"GroupImpl.constraintReferencedIds", new_ASConstraintReferencedIdsConverter_init());
    }
    J2OBJC_SET_INITIALIZED(ASGroupImpl)
  }
}

@end

void ASGroupImpl_init(ASGroupImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASGroupImpl_GROUP_NAME, ASGroupImpl_LOCAL_NAME);
}

ASGroupImpl *new_ASGroupImpl_init() {
  J2OBJC_NEW_IMPL(ASGroupImpl, init)
}

ASGroupImpl *create_ASGroupImpl_init() {
  J2OBJC_CREATE_IMPL(ASGroupImpl, init)
}

void ASGroupImpl_setWidgetOnNativeClass(ASGroupImpl *self) {
  ((ASUIView*) self.uiView).widget = self;
}

void ASGroupImpl_setConstraintReferenced_idsWithId_(ASGroupImpl *self, id objValue) {
  [((ADXGroup *) nil_chk(self->group_)) setReferencedIdsWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class])];
}

id ASGroupImpl_getConstraintReferencedIds(ASGroupImpl *self) {
  return [((ADXGroup *) nil_chk(self->group_)) getReferencedIds];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGroupImpl)

@implementation ASGroupImpl_GroupExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASGroupImpl:(ASGroupImpl *)outer$ {
  ASGroupImpl_GroupExt_initWithASGroupImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASGroupImpl_GroupExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASGroupImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGroupImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASGroupImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASGroupImpl_GroupExt = { "GroupExt", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASGroupImpl_GroupExt;
}

@end

void ASGroupImpl_GroupExt_initWithASGroupImpl_(ASGroupImpl_GroupExt *self, ASGroupImpl *outer$) {
  self->this$0_ = outer$;
  ADXGroup_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASGroupImpl_GroupExt *new_ASGroupImpl_GroupExt_initWithASGroupImpl_(ASGroupImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGroupImpl_GroupExt, initWithASGroupImpl_, outer$)
}

ASGroupImpl_GroupExt *create_ASGroupImpl_GroupExt_initWithASGroupImpl_(ASGroupImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGroupImpl_GroupExt, initWithASGroupImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGroupImpl_GroupExt)

@implementation ASGroupImpl_GroupCommandBuilder

- (instancetype)initWithASGroupImpl:(ASGroupImpl *)outer$ {
  ASGroupImpl_GroupCommandBuilder_initWithASGroupImpl_(self, outer$);
  return self;
}

- (ASGroupImpl_GroupCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASGroupImpl_GroupCommandBuilder *)tryGetConstraint_referenced_ids {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getConstraint_referenced_ids {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGroupImpl_GroupCommandBuilder *)setConstraint_referenced_idsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASGroupImpl_GroupCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASGroupImpl_GroupCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGroupImpl_GroupCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASGroupImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetConstraint_referenced_ids);
  methods[3].selector = @selector(getConstraint_referenced_ids);
  methods[4].selector = @selector(setConstraint_referenced_idsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGroupImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASGroupImpl;", "execute", "Z", "setConstraint_referenced_ids", "LNSString;", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/constraintlayout/GroupImpl$GroupCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASGroupImpl_GroupCommandBuilder = { "GroupCommandBuilder", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 5, 1, 0, -1, -1, 5, -1 };
  return &_ASGroupImpl_GroupCommandBuilder;
}

@end

void ASGroupImpl_GroupCommandBuilder_initWithASGroupImpl_(ASGroupImpl_GroupCommandBuilder *self, ASGroupImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASGroupImpl_GroupCommandBuilder *new_ASGroupImpl_GroupCommandBuilder_initWithASGroupImpl_(ASGroupImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGroupImpl_GroupCommandBuilder, initWithASGroupImpl_, outer$)
}

ASGroupImpl_GroupCommandBuilder *create_ASGroupImpl_GroupCommandBuilder_initWithASGroupImpl_(ASGroupImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGroupImpl_GroupCommandBuilder, initWithASGroupImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGroupImpl_GroupCommandBuilder)

@implementation ASGroupImpl_GroupBean

- (instancetype)initWithASGroupImpl:(ASGroupImpl *)outer$ {
  ASGroupImpl_GroupBean_initWithASGroupImpl_(self, outer$);
  return self;
}

- (id)getConstraint_referenced_ids {
  return [((ASGroupImpl_GroupCommandBuilder *) nil_chk([((ASGroupImpl_GroupCommandBuilder *) nil_chk([((ASGroupImpl_GroupCommandBuilder *) nil_chk([((ASGroupImpl_GroupCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetConstraint_referenced_ids])) executeWithBoolean:false])) getConstraint_referenced_ids];
}

- (void)setConstraint_referenced_idsWithNSString:(NSString *)value {
  (void) [((ASGroupImpl_GroupCommandBuilder *) nil_chk([((ASGroupImpl_GroupCommandBuilder *) nil_chk([((ASGroupImpl_GroupCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setConstraint_referenced_idsWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASGroupImpl:);
  methods[1].selector = @selector(getConstraint_referenced_ids);
  methods[2].selector = @selector(setConstraint_referenced_idsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGroupImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASGroupImpl;", "setConstraint_referenced_ids", "LNSString;" };
  static const J2ObjcClassInfo _ASGroupImpl_GroupBean = { "GroupBean", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASGroupImpl_GroupBean;
}

@end

void ASGroupImpl_GroupBean_initWithASGroupImpl_(ASGroupImpl_GroupBean *self, ASGroupImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASGroupImpl_GroupBean *new_ASGroupImpl_GroupBean_initWithASGroupImpl_(ASGroupImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGroupImpl_GroupBean, initWithASGroupImpl_, outer$)
}

ASGroupImpl_GroupBean *create_ASGroupImpl_GroupBean_initWithASGroupImpl_(ASGroupImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGroupImpl_GroupBean, initWithASGroupImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGroupImpl_GroupBean)
