//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\key\MotionKeyTimeCycle.java
//

#include "CustomVariable.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "MotionKey.h"
#include "MotionKeyTimeCycle.h"
#include "Oscillator.h"
#include "TimeCycleSplineSet.h"
#include "TypedValues.h"
#include "Utils.h"
#include "java/lang/Float.h"
#include "java/util/HashMap.h"
#include "java/util/HashSet.h"
#include "java/util/Set.h"


@interface ADXMotionKeyTimeCycle () {
 @public
  NSString *mTransitionEasing_;
  jint mCurveFit_;
  jfloat mAlpha_;
  jfloat mElevation_;
  jfloat mRotation_;
  jfloat mRotationX_;
  jfloat mRotationY_;
  jfloat mTransitionPathRotate_;
  jfloat mScaleX_;
  jfloat mScaleY_;
  jfloat mTranslationX_;
  jfloat mTranslationY_;
  jfloat mTranslationZ_;
  jfloat mProgress_;
  jint mWaveShape_;
  NSString *mCustomWaveShape_;
  jfloat mWavePeriod_;
  jfloat mWaveOffset_;
}

@end

J2OBJC_FIELD_SETTER(ADXMotionKeyTimeCycle, mTransitionEasing_, NSString *)
J2OBJC_FIELD_SETTER(ADXMotionKeyTimeCycle, mCustomWaveShape_, NSString *)

inline NSString *ADXMotionKeyTimeCycle_get_TAG(void);
static NSString *ADXMotionKeyTimeCycle_TAG = @"KeyTimeCycle";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXMotionKeyTimeCycle, TAG, NSString *)

NSString *ADXMotionKeyTimeCycle_NAME = @"KeyTimeCycle";

@implementation ADXMotionKeyTimeCycle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMotionKeyTimeCycle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)addTimeValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines {
  for (NSString * __strong s in nil_chk([((JavaUtilHashMap *) nil_chk(splines)) keySet])) {
    ADXTimeCycleSplineSet *splineSet = JreRetainedLocalValue([splines getWithId:s]);
    if (splineSet == nil) {
      continue;
    }
    if ([((NSString *) nil_chk(s)) java_hasPrefix:ADXMotionKey_CUSTOM]) {
      NSString *cKey = [s java_substring:[((NSString *) nil_chk(ADXMotionKey_CUSTOM)) java_length] + 1];
      ADXCustomVariable *cValue = JreRetainedLocalValue([((JavaUtilHashMap *) nil_chk(mCustom_)) getWithId:cKey]);
      if (cValue != nil) {
        [((ADXTimeCycleSplineSet_CustomVarSet *) cast_chk(splineSet, [ADXTimeCycleSplineSet_CustomVarSet class])) setPointWithInt:mFramePosition_ withADXCustomVariable:cValue withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      continue;
    }
    switch (JreIndexOfStr(s, (id[]){ ADXTypedValues_Attributes_S_ALPHA, ADXTypedValues_Attributes_S_ROTATION_X, ADXTypedValues_Attributes_S_ROTATION_Y, ADXTypedValues_Attributes_S_ROTATION_Z, ADXTypedValues_Attributes_S_PATH_ROTATE, ADXTypedValues_Attributes_S_SCALE_X, ADXTypedValues_Attributes_S_SCALE_Y, ADXTypedValues_Attributes_S_TRANSLATION_X, ADXTypedValues_Attributes_S_TRANSLATION_Y, ADXTypedValues_Attributes_S_TRANSLATION_Z, ADXTypedValues_Attributes_S_ELEVATION, ADXTypedValues_Attributes_S_PROGRESS }, 12)) {
      case 0:
      if (!JavaLangFloat_isNaNWithFloat_(mAlpha_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mAlpha_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 1:
      if (!JavaLangFloat_isNaNWithFloat_(mRotationX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mRotationX_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 2:
      if (!JavaLangFloat_isNaNWithFloat_(mRotationY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mRotationY_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 3:
      if (!JavaLangFloat_isNaNWithFloat_(mRotation_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mRotation_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 4:
      if (!JavaLangFloat_isNaNWithFloat_(mTransitionPathRotate_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTransitionPathRotate_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 5:
      if (!JavaLangFloat_isNaNWithFloat_(mScaleX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mScaleX_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 6:
      if (!JavaLangFloat_isNaNWithFloat_(mScaleY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mScaleY_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 7:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationX_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationX_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 8:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationY_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationY_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 9:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationZ_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationZ_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 10:
      if (!JavaLangFloat_isNaNWithFloat_(mTranslationZ_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mTranslationZ_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      case 11:
      if (!JavaLangFloat_isNaNWithFloat_(mProgress_)) {
        [splineSet setPointWithInt:mFramePosition_ withFloat:mProgress_ withFloat:mWavePeriod_ withInt:mWaveShape_ withFloat:mWaveOffset_];
      }
      break;
      default:
      ADXUtils_logeWithNSString_withNSString_(@"KeyTimeCycles", JreStrcat("$$C", @"UNKNOWN addValues \"", s, '"'));
    }
  }
}

- (void)addValuesWithJavaUtilHashMap:(JavaUtilHashMap *)splines {
}

- (jboolean)setValueWithInt:(jint)type
                    withInt:(jint)value {
  switch (type) {
    case ADXTypedValues_TYPE_FRAME_POSITION:
    mFramePosition_ = value;
    break;
    case ADXTypedValues_Cycle_TYPE_WAVE_SHAPE:
    mWaveShape_ = value;
    break;
    default:
    return [super setValueWithInt:type withInt:value];
  }
  return true;
}

- (jboolean)setValueWithInt:(jint)type
                  withFloat:(jfloat)value {
  switch (type) {
    case ADXTypedValues_Cycle_TYPE_ALPHA:
    mAlpha_ = value;
    break;
    case ADXTypedValues_Cycle_TYPE_CURVE_FIT:
    mCurveFit_ = [self toIntWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_ELEVATION:
    mElevation_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_PROGRESS:
    mProgress_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_ROTATION_Z:
    mRotation_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_ROTATION_X:
    mRotationX_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_ROTATION_Y:
    mRotationY_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_SCALE_X:
    mScaleX_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_SCALE_Y:
    mScaleY_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_PATH_ROTATE:
    mTransitionPathRotate_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_TRANSLATION_X:
    mTranslationX_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_TRANSLATION_Y:
    mTranslationY_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_TRANSLATION_Z:
    mTranslationZ_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_WAVE_PERIOD:
    mWavePeriod_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    case ADXTypedValues_Cycle_TYPE_WAVE_OFFSET:
    mWaveOffset_ = [self toFloatWithId:JavaLangFloat_valueOfWithFloat_(value)];
    break;
    default:
    return [super setValueWithInt:type withFloat:value];
  }
  return true;
}

- (jboolean)setValueWithInt:(jint)type
               withNSString:(NSString *)value {
  switch (type) {
    case ADXTypedValues_Cycle_TYPE_WAVE_SHAPE:
    mWaveShape_ = ADXOscillator_CUSTOM;
    JreStrongAssign(&mCustomWaveShape_, value);
    break;
    case ADXTypedValues_Cycle_TYPE_EASING:
    JreStrongAssign(&mTransitionEasing_, value);
    break;
    default:
    return [super setValueWithInt:type withNSString:value];
  }
  return true;
}

- (jboolean)setValueWithInt:(jint)type
                withBoolean:(jboolean)value {
  return [super setValueWithInt:type withBoolean:value];
}

- (ADXMotionKeyTimeCycle *)copy__WithADXMotionKey:(ADXMotionKey *)src {
  [super copy__WithADXMotionKey:src];
  ADXMotionKeyTimeCycle *k = (ADXMotionKeyTimeCycle *) cast_chk(src, [ADXMotionKeyTimeCycle class]);
  JreStrongAssign(&mTransitionEasing_, ((ADXMotionKeyTimeCycle *) nil_chk(k))->mTransitionEasing_);
  mCurveFit_ = k->mCurveFit_;
  mWaveShape_ = k->mWaveShape_;
  mWavePeriod_ = k->mWavePeriod_;
  mWaveOffset_ = k->mWaveOffset_;
  mProgress_ = k->mProgress_;
  mAlpha_ = k->mAlpha_;
  mElevation_ = k->mElevation_;
  mRotation_ = k->mRotation_;
  mTransitionPathRotate_ = k->mTransitionPathRotate_;
  mRotationX_ = k->mRotationX_;
  mRotationY_ = k->mRotationY_;
  mScaleX_ = k->mScaleX_;
  mScaleY_ = k->mScaleY_;
  mTranslationX_ = k->mTranslationX_;
  mTranslationY_ = k->mTranslationY_;
  mTranslationZ_ = k->mTranslationZ_;
  return self;
}

- (void)getAttributeNamesWithJavaUtilHashSet:(JavaUtilHashSet *)attributes {
  if (!JavaLangFloat_isNaNWithFloat_(mAlpha_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_ALPHA];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mElevation_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_ELEVATION];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotation_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_ROTATION_Z];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotationX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_ROTATION_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mRotationY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_ROTATION_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mScaleX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_SCALE_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mScaleY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_SCALE_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTransitionPathRotate_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_PATH_ROTATE];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationX_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_TRANSLATION_X];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationY_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_TRANSLATION_Y];
  }
  if (!JavaLangFloat_isNaNWithFloat_(mTranslationZ_)) {
    [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:ADXTypedValues_Cycle_S_TRANSLATION_Z];
  }
  if ([((JavaUtilHashMap *) nil_chk(mCustom_)) size] > 0) {
    for (NSString * __strong s in nil_chk([((JavaUtilHashMap *) nil_chk(mCustom_)) keySet])) {
      [((JavaUtilHashSet *) nil_chk(attributes)) addWithId:JreStrcat("$C$", ADXTypedValues_S_CUSTOM, ',', s)];
    }
  }
}

- (ADXMotionKey *)java_clone {
  return [create_ADXMotionKeyTimeCycle_init() copy__WithADXMotionKey:self];
}

- (jint)getIdWithNSString:(NSString *)name {
  return ADXTypedValues_Cycle_getIdWithNSString_(name);
}

- (void)dealloc {
  RELEASE_(mTransitionEasing_);
  RELEASE_(mCustomWaveShape_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 4, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 9, -1, -1, -1, -1 },
    { NULL, "LADXMotionKeyTimeCycle;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, 14, -1, -1 },
    { NULL, "LADXMotionKey;", 0x1, 15, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addTimeValuesWithJavaUtilHashMap:);
  methods[2].selector = @selector(addValuesWithJavaUtilHashMap:);
  methods[3].selector = @selector(setValueWithInt:withInt:);
  methods[4].selector = @selector(setValueWithInt:withFloat:);
  methods[5].selector = @selector(setValueWithInt:withNSString:);
  methods[6].selector = @selector(setValueWithInt:withBoolean:);
  methods[7].selector = @selector(copy__WithADXMotionKey:);
  methods[8].selector = @selector(getAttributeNamesWithJavaUtilHashSet:);
  methods[9].selector = @selector(java_clone);
  methods[10].selector = @selector(getIdWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NAME", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 18, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 19, -1, -1 },
    { "mTransitionEasing_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurveFit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAlpha_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mElevation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotationX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRotationY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTransitionPathRotate_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScaleX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScaleY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranslationX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranslationY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranslationZ_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mProgress_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWaveShape_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCustomWaveShape_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWavePeriod_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWaveOffset_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "KEY_TYPE", "I", .constantValue.asInt = ADXMotionKeyTimeCycle_KEY_TYPE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "addTimeValues", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/utils/TimeCycleSplineSet;>;)V", "addValues", "(Ljava/util/HashMap<Ljava/lang/String;Landroidx/constraintlayout/core/motion/utils/SplineSet;>;)V", "setValue", "II", "IF", "ILNSString;", "IZ", "copy", "LADXMotionKey;", "getAttributeNames", "LJavaUtilHashSet;", "(Ljava/util/HashSet<Ljava/lang/String;>;)V", "clone", "getId", "LNSString;", &ADXMotionKeyTimeCycle_NAME, &ADXMotionKeyTimeCycle_TAG };
  static const J2ObjcClassInfo _ADXMotionKeyTimeCycle = { "MotionKeyTimeCycle", "androidx.constraintlayout.core.motion.key", ptrTable, methods, fields, 7, 0x1, 11, 21, -1, -1, -1, -1, -1 };
  return &_ADXMotionKeyTimeCycle;
}

@end

void ADXMotionKeyTimeCycle_init(ADXMotionKeyTimeCycle *self) {
  ADXMotionKey_init(self);
  self->mCurveFit_ = -1;
  self->mAlpha_ = JavaLangFloat_NaN;
  self->mElevation_ = JavaLangFloat_NaN;
  self->mRotation_ = JavaLangFloat_NaN;
  self->mRotationX_ = JavaLangFloat_NaN;
  self->mRotationY_ = JavaLangFloat_NaN;
  self->mTransitionPathRotate_ = JavaLangFloat_NaN;
  self->mScaleX_ = JavaLangFloat_NaN;
  self->mScaleY_ = JavaLangFloat_NaN;
  self->mTranslationX_ = JavaLangFloat_NaN;
  self->mTranslationY_ = JavaLangFloat_NaN;
  self->mTranslationZ_ = JavaLangFloat_NaN;
  self->mProgress_ = JavaLangFloat_NaN;
  self->mWaveShape_ = 0;
  JreStrongAssign(&self->mCustomWaveShape_, nil);
  self->mWavePeriod_ = JavaLangFloat_NaN;
  self->mWaveOffset_ = 0;
  {
    self->mType_ = ADXMotionKeyTimeCycle_KEY_TYPE;
    JreStrongAssignAndConsume(&self->mCustom_, new_JavaUtilHashMap_init());
  }
}

ADXMotionKeyTimeCycle *new_ADXMotionKeyTimeCycle_init() {
  J2OBJC_NEW_IMPL(ADXMotionKeyTimeCycle, init)
}

ADXMotionKeyTimeCycle *create_ADXMotionKeyTimeCycle_init() {
  J2OBJC_CREATE_IMPL(ADXMotionKeyTimeCycle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMotionKeyTimeCycle)
