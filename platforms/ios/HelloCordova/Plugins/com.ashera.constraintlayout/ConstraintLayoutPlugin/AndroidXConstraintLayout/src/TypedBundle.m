//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\TypedBundle.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TypedBundle.h"
#include "TypedValues.h"
#include "java/util/Arrays.h"


inline jint ADXTypedBundle_get_INITIAL_BOOLEAN(void);
#define ADXTypedBundle_INITIAL_BOOLEAN 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedBundle, INITIAL_BOOLEAN, jint)

inline jint ADXTypedBundle_get_INITIAL_INT(void);
#define ADXTypedBundle_INITIAL_INT 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedBundle, INITIAL_INT, jint)

inline jint ADXTypedBundle_get_INITIAL_FLOAT(void);
#define ADXTypedBundle_INITIAL_FLOAT 10
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedBundle, INITIAL_FLOAT, jint)

inline jint ADXTypedBundle_get_INITIAL_STRING(void);
#define ADXTypedBundle_INITIAL_STRING 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXTypedBundle, INITIAL_STRING, jint)

@implementation ADXTypedBundle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXTypedBundle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getIntegerWithInt:(jint)type {
  for (jint i = 0; i < mCountInt_; i++) {
    if (IOSIntArray_Get(nil_chk(mTypeInt_), i) == type) {
      return IOSIntArray_Get(nil_chk(mValueInt_), i);
    }
  }
  return -1;
}

- (void)addWithInt:(jint)type
           withInt:(jint)value {
  if (mCountInt_ >= ((IOSIntArray *) nil_chk(mTypeInt_))->size_) {
    JreStrongAssign(&mTypeInt_, JavaUtilArrays_copyOfWithIntArray_withInt_(mTypeInt_, mTypeInt_->size_ * 2));
    JreStrongAssign(&mValueInt_, JavaUtilArrays_copyOfWithIntArray_withInt_(mValueInt_, ((IOSIntArray *) nil_chk(mValueInt_))->size_ * 2));
  }
  *IOSIntArray_GetRef(nil_chk(mTypeInt_), mCountInt_) = type;
  *IOSIntArray_GetRef(nil_chk(mValueInt_), mCountInt_++) = value;
}

- (void)addWithInt:(jint)type
         withFloat:(jfloat)value {
  if (mCountFloat_ >= ((IOSIntArray *) nil_chk(mTypeFloat_))->size_) {
    JreStrongAssign(&mTypeFloat_, JavaUtilArrays_copyOfWithIntArray_withInt_(mTypeFloat_, mTypeFloat_->size_ * 2));
    JreStrongAssign(&mValueFloat_, JavaUtilArrays_copyOfWithFloatArray_withInt_(mValueFloat_, ((IOSFloatArray *) nil_chk(mValueFloat_))->size_ * 2));
  }
  *IOSIntArray_GetRef(nil_chk(mTypeFloat_), mCountFloat_) = type;
  *IOSFloatArray_GetRef(nil_chk(mValueFloat_), mCountFloat_++) = value;
}

- (void)addIfNotNullWithInt:(jint)type
               withNSString:(NSString *)value {
  if (value != nil) {
    [self addWithInt:type withNSString:value];
  }
}

- (void)addWithInt:(jint)type
      withNSString:(NSString *)value {
  if (mCountString_ >= ((IOSIntArray *) nil_chk(mTypeString_))->size_) {
    JreStrongAssign(&mTypeString_, JavaUtilArrays_copyOfWithIntArray_withInt_(mTypeString_, mTypeString_->size_ * 2));
    JreStrongAssign(&mValueString_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(mValueString_, ((IOSObjectArray *) nil_chk(mValueString_))->size_ * 2));
  }
  *IOSIntArray_GetRef(nil_chk(mTypeString_), mCountString_) = type;
  IOSObjectArray_Set(nil_chk(mValueString_), mCountString_++, value);
}

- (void)addWithInt:(jint)type
       withBoolean:(jboolean)value {
  if (mCountBoolean_ >= ((IOSIntArray *) nil_chk(mTypeBoolean_))->size_) {
    JreStrongAssign(&mTypeBoolean_, JavaUtilArrays_copyOfWithIntArray_withInt_(mTypeBoolean_, mTypeBoolean_->size_ * 2));
    JreStrongAssign(&mValueBoolean_, JavaUtilArrays_copyOfWithBooleanArray_withInt_(mValueBoolean_, ((IOSBooleanArray *) nil_chk(mValueBoolean_))->size_ * 2));
  }
  *IOSIntArray_GetRef(nil_chk(mTypeBoolean_), mCountBoolean_) = type;
  *IOSBooleanArray_GetRef(nil_chk(mValueBoolean_), mCountBoolean_++) = value;
}

- (void)applyDeltaWithADXTypedValues:(id<ADXTypedValues>)values {
  for (jint i = 0; i < mCountInt_; i++) {
    [((id<ADXTypedValues>) nil_chk(values)) setValueWithInt:IOSIntArray_Get(nil_chk(mTypeInt_), i) withInt:IOSIntArray_Get(nil_chk(mValueInt_), i)];
  }
  for (jint i = 0; i < mCountFloat_; i++) {
    [((id<ADXTypedValues>) nil_chk(values)) setValueWithInt:IOSIntArray_Get(nil_chk(mTypeFloat_), i) withFloat:IOSFloatArray_Get(nil_chk(mValueFloat_), i)];
  }
  for (jint i = 0; i < mCountString_; i++) {
    [((id<ADXTypedValues>) nil_chk(values)) setValueWithInt:IOSIntArray_Get(nil_chk(mTypeString_), i) withNSString:IOSObjectArray_Get(nil_chk(mValueString_), i)];
  }
  for (jint i = 0; i < mCountBoolean_; i++) {
    [((id<ADXTypedValues>) nil_chk(values)) setValueWithInt:IOSIntArray_Get(nil_chk(mTypeBoolean_), i) withBoolean:IOSBooleanArray_Get(nil_chk(mValueBoolean_), i)];
  }
}

- (void)clear {
  mCountBoolean_ = 0;
  mCountString_ = 0;
  mCountFloat_ = 0;
  mCountInt_ = 0;
}

- (void)dealloc {
  RELEASE_(mTypeInt_);
  RELEASE_(mValueInt_);
  RELEASE_(mTypeFloat_);
  RELEASE_(mValueFloat_);
  RELEASE_(mTypeString_);
  RELEASE_(mValueString_);
  RELEASE_(mTypeBoolean_);
  RELEASE_(mValueBoolean_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getIntegerWithInt:);
  methods[2].selector = @selector(addWithInt:withInt:);
  methods[3].selector = @selector(addWithInt:withFloat:);
  methods[4].selector = @selector(addIfNotNullWithInt:withNSString:);
  methods[5].selector = @selector(addWithInt:withNSString:);
  methods[6].selector = @selector(addWithInt:withBoolean:);
  methods[7].selector = @selector(applyDeltaWithADXTypedValues:);
  methods[8].selector = @selector(clear);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INITIAL_BOOLEAN", "I", .constantValue.asInt = ADXTypedBundle_INITIAL_BOOLEAN, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_INT", "I", .constantValue.asInt = ADXTypedBundle_INITIAL_INT, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_FLOAT", "I", .constantValue.asInt = ADXTypedBundle_INITIAL_FLOAT, 0x1a, -1, -1, -1, -1 },
    { "INITIAL_STRING", "I", .constantValue.asInt = ADXTypedBundle_INITIAL_STRING, 0x1a, -1, -1, -1, -1 },
    { "mTypeInt_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueInt_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountInt_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTypeFloat_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueFloat_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountFloat_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTypeString_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueString_", "[LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountString_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTypeBoolean_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValueBoolean_", "[Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCountBoolean_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getInteger", "I", "add", "II", "IF", "addIfNotNull", "ILNSString;", "IZ", "applyDelta", "LADXTypedValues;" };
  static const J2ObjcClassInfo _ADXTypedBundle = { "TypedBundle", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 9, 16, -1, -1, -1, -1, -1 };
  return &_ADXTypedBundle;
}

@end

void ADXTypedBundle_init(ADXTypedBundle *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mTypeInt_, [IOSIntArray newArrayWithLength:ADXTypedBundle_INITIAL_INT]);
  JreStrongAssignAndConsume(&self->mValueInt_, [IOSIntArray newArrayWithLength:ADXTypedBundle_INITIAL_INT]);
  self->mCountInt_ = 0;
  JreStrongAssignAndConsume(&self->mTypeFloat_, [IOSIntArray newArrayWithLength:ADXTypedBundle_INITIAL_FLOAT]);
  JreStrongAssignAndConsume(&self->mValueFloat_, [IOSFloatArray newArrayWithLength:ADXTypedBundle_INITIAL_FLOAT]);
  self->mCountFloat_ = 0;
  JreStrongAssignAndConsume(&self->mTypeString_, [IOSIntArray newArrayWithLength:ADXTypedBundle_INITIAL_STRING]);
  JreStrongAssignAndConsume(&self->mValueString_, [IOSObjectArray newArrayWithLength:ADXTypedBundle_INITIAL_STRING type:NSString_class_()]);
  self->mCountString_ = 0;
  JreStrongAssignAndConsume(&self->mTypeBoolean_, [IOSIntArray newArrayWithLength:ADXTypedBundle_INITIAL_BOOLEAN]);
  JreStrongAssignAndConsume(&self->mValueBoolean_, [IOSBooleanArray newArrayWithLength:ADXTypedBundle_INITIAL_BOOLEAN]);
  self->mCountBoolean_ = 0;
}

ADXTypedBundle *new_ADXTypedBundle_init() {
  J2OBJC_NEW_IMPL(ADXTypedBundle, init)
}

ADXTypedBundle *create_ADXTypedBundle_init() {
  J2OBJC_CREATE_IMPL(ADXTypedBundle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXTypedBundle)
