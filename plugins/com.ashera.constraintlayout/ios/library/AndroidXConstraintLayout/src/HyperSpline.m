//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\HyperSpline.java
//

#include "HyperSpline.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Math.h"


@implementation ADXHyperSpline

- (instancetype)initWithDoubleArray2:(IOSObjectArray *)points {
  ADXHyperSpline_initWithDoubleArray2_(self, points);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXHyperSpline_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setupWithDoubleArray2:(IOSObjectArray *)points {
  mDimensionality_ = ((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(points), 0)))->size_;
  mPoints_ = points->size_;
  JreStrongAssignAndConsume(&mCtl_, [IOSDoubleArray newArrayWithDimensions:2 lengths:(jint[]){ mDimensionality_, mPoints_ }]);
  JreStrongAssignAndConsume(&mCurve_, [IOSObjectArray newArrayWithLength:mDimensionality_ type:IOSClass_arrayType(ADXHyperSpline_Cubic_class_(), 1)]);
  for (jint d = 0; d < mDimensionality_; d++) {
    for (jint p = 0; p < mPoints_; p++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(mCtl_, d)), p) = IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(points, p)), d);
    }
  }
  for (jint d = 0; d < mDimensionality_; d++) {
    IOSObjectArray_Set(nil_chk(mCurve_), d, ADXHyperSpline_calcNaturalCubicWithInt_withDoubleArray_(((IOSDoubleArray *) nil_chk(IOSObjectArray_Get(nil_chk(mCtl_), d)))->size_, IOSObjectArray_Get(mCtl_, d)));
  }
  JreStrongAssignAndConsume(&mCurveLength_, [IOSDoubleArray newArrayWithLength:mPoints_ - 1]);
  mTotalLength_ = 0;
  IOSObjectArray *temp = [IOSObjectArray arrayWithLength:mDimensionality_ type:ADXHyperSpline_Cubic_class_()];
  for (jint p = 0; p < ((IOSDoubleArray *) nil_chk(mCurveLength_))->size_; p++) {
    for (jint d = 0; d < mDimensionality_; d++) {
      IOSObjectArray_Set(temp, d, IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mCurve_), d)), p));
    }
    JrePlusAssignDoubleD(&mTotalLength_, *IOSDoubleArray_GetRef(mCurveLength_, p) = [self approxLengthWithADXHyperSpline_CubicArray:temp]);
  }
}

- (void)getVelocityWithDouble:(jdouble)p
              withDoubleArray:(IOSDoubleArray *)v {
  jdouble pos = p * mTotalLength_;
  jdouble sum = 0;
  jint k = 0;
  for (; k < ((IOSDoubleArray *) nil_chk(mCurveLength_))->size_ - 1 && IOSDoubleArray_Get(mCurveLength_, k) < pos; k++) {
    JreMinusAssignDoubleD(&pos, IOSDoubleArray_Get(mCurveLength_, k));
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(v))->size_; i++) {
    *IOSDoubleArray_GetRef(v, i) = [((ADXHyperSpline_Cubic *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mCurve_), i)), k))) velWithDouble:pos / IOSDoubleArray_Get(nil_chk(mCurveLength_), k)];
  }
}

- (void)getPosWithDouble:(jdouble)p
         withDoubleArray:(IOSDoubleArray *)x {
  jdouble pos = p * mTotalLength_;
  jdouble sum = 0;
  jint k = 0;
  for (; k < ((IOSDoubleArray *) nil_chk(mCurveLength_))->size_ - 1 && IOSDoubleArray_Get(mCurveLength_, k) < pos; k++) {
    JreMinusAssignDoubleD(&pos, IOSDoubleArray_Get(mCurveLength_, k));
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(x))->size_; i++) {
    *IOSDoubleArray_GetRef(x, i) = [((ADXHyperSpline_Cubic *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mCurve_), i)), k))) evalWithDouble:pos / IOSDoubleArray_Get(nil_chk(mCurveLength_), k)];
  }
}

- (void)getPosWithDouble:(jdouble)p
          withFloatArray:(IOSFloatArray *)x {
  jdouble pos = p * mTotalLength_;
  jdouble sum = 0;
  jint k = 0;
  for (; k < ((IOSDoubleArray *) nil_chk(mCurveLength_))->size_ - 1 && IOSDoubleArray_Get(mCurveLength_, k) < pos; k++) {
    JreMinusAssignDoubleD(&pos, IOSDoubleArray_Get(mCurveLength_, k));
  }
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(x))->size_; i++) {
    *IOSFloatArray_GetRef(x, i) = (jfloat) [((ADXHyperSpline_Cubic *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mCurve_), i)), k))) evalWithDouble:pos / IOSDoubleArray_Get(nil_chk(mCurveLength_), k)];
  }
}

- (jdouble)getPosWithDouble:(jdouble)p
                    withInt:(jint)splineNumber {
  jdouble pos = p * mTotalLength_;
  jdouble sum = 0;
  jint k = 0;
  for (; k < ((IOSDoubleArray *) nil_chk(mCurveLength_))->size_ - 1 && IOSDoubleArray_Get(mCurveLength_, k) < pos; k++) {
    JreMinusAssignDoubleD(&pos, IOSDoubleArray_Get(mCurveLength_, k));
  }
  return [((ADXHyperSpline_Cubic *) nil_chk(IOSObjectArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mCurve_), splineNumber)), k))) evalWithDouble:pos / IOSDoubleArray_Get(mCurveLength_, k)];
}

- (jdouble)approxLengthWithADXHyperSpline_CubicArray:(IOSObjectArray *)curve {
  jdouble sum = 0;
  jint N = ((IOSObjectArray *) nil_chk(curve))->size_;
  IOSDoubleArray *old = [IOSDoubleArray arrayWithLength:curve->size_];
  for (jdouble i = 0; i < 1; JrePlusAssignDoubleD(&i, .1)) {
    jdouble s = 0;
    for (jint j = 0; j < curve->size_; j++) {
      jdouble tmp = IOSDoubleArray_Get(old, j);
      JreMinusAssignDoubleD(&tmp, *IOSDoubleArray_GetRef(old, j) = [((ADXHyperSpline_Cubic *) nil_chk(IOSObjectArray_Get(curve, j))) evalWithDouble:i]);
      JrePlusAssignDoubleD(&s, tmp * tmp);
    }
    if (i > 0) {
      JrePlusAssignDoubleD(&sum, JavaLangMath_sqrtWithDouble_(s));
    }
  }
  jdouble s = 0;
  for (jint j = 0; j < curve->size_; j++) {
    jdouble tmp = IOSDoubleArray_Get(old, j);
    JreMinusAssignDoubleD(&tmp, *IOSDoubleArray_GetRef(old, j) = [((ADXHyperSpline_Cubic *) nil_chk(IOSObjectArray_Get(curve, j))) evalWithDouble:1]);
    JrePlusAssignDoubleD(&s, tmp * tmp);
  }
  JrePlusAssignDoubleD(&sum, JavaLangMath_sqrtWithDouble_(s));
  return sum;
}

+ (IOSObjectArray *)calcNaturalCubicWithInt:(jint)n
                            withDoubleArray:(IOSDoubleArray *)x {
  return ADXHyperSpline_calcNaturalCubicWithInt_withDoubleArray_(n, x);
}

- (void)dealloc {
  RELEASE_(mCurve_);
  RELEASE_(mCurveLength_);
  RELEASE_(mCtl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 4, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "[LADXHyperSpline_Cubic;", 0x8, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDoubleArray2:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(setupWithDoubleArray2:);
  methods[3].selector = @selector(getVelocityWithDouble:withDoubleArray:);
  methods[4].selector = @selector(getPosWithDouble:withDoubleArray:);
  methods[5].selector = @selector(getPosWithDouble:withFloatArray:);
  methods[6].selector = @selector(getPosWithDouble:withInt:);
  methods[7].selector = @selector(approxLengthWithADXHyperSpline_CubicArray:);
  methods[8].selector = @selector(calcNaturalCubicWithInt:withDoubleArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPoints_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurve_", "[[LADXHyperSpline_Cubic;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDimensionality_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCurveLength_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTotalLength_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCtl_", "[[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "[[D", "setup", "getVelocity", "D[D", "getPos", "D[F", "DI", "approxLength", "[LADXHyperSpline_Cubic;", "calcNaturalCubic", "I[D", "LADXHyperSpline_Cubic;" };
  static const J2ObjcClassInfo _ADXHyperSpline = { "HyperSpline", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 9, 6, -1, 11, -1, -1, -1 };
  return &_ADXHyperSpline;
}

@end

void ADXHyperSpline_initWithDoubleArray2_(ADXHyperSpline *self, IOSObjectArray *points) {
  NSObject_init(self);
  [self setupWithDoubleArray2:points];
}

ADXHyperSpline *new_ADXHyperSpline_initWithDoubleArray2_(IOSObjectArray *points) {
  J2OBJC_NEW_IMPL(ADXHyperSpline, initWithDoubleArray2_, points)
}

ADXHyperSpline *create_ADXHyperSpline_initWithDoubleArray2_(IOSObjectArray *points) {
  J2OBJC_CREATE_IMPL(ADXHyperSpline, initWithDoubleArray2_, points)
}

void ADXHyperSpline_init(ADXHyperSpline *self) {
  NSObject_init(self);
}

ADXHyperSpline *new_ADXHyperSpline_init() {
  J2OBJC_NEW_IMPL(ADXHyperSpline, init)
}

ADXHyperSpline *create_ADXHyperSpline_init() {
  J2OBJC_CREATE_IMPL(ADXHyperSpline, init)
}

IOSObjectArray *ADXHyperSpline_calcNaturalCubicWithInt_withDoubleArray_(jint n, IOSDoubleArray *x) {
  ADXHyperSpline_initialize();
  IOSDoubleArray *gamma = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *delta = [IOSDoubleArray arrayWithLength:n];
  IOSDoubleArray *D = [IOSDoubleArray arrayWithLength:n];
  n -= 1;
  *IOSDoubleArray_GetRef(gamma, 0) = 1.0f / 2.0f;
  for (jint i = 1; i < n; i++) {
    *IOSDoubleArray_GetRef(gamma, i) = 1 / (4 - IOSDoubleArray_Get(gamma, i - 1));
  }
  *IOSDoubleArray_GetRef(gamma, n) = 1 / (2 - IOSDoubleArray_Get(gamma, n - 1));
  *IOSDoubleArray_GetRef(delta, 0) = 3 * (IOSDoubleArray_Get(nil_chk(x), 1) - IOSDoubleArray_Get(x, 0)) * IOSDoubleArray_Get(gamma, 0);
  for (jint i = 1; i < n; i++) {
    *IOSDoubleArray_GetRef(delta, i) = (3 * (IOSDoubleArray_Get(x, i + 1) - IOSDoubleArray_Get(x, i - 1)) - IOSDoubleArray_Get(delta, i - 1)) * IOSDoubleArray_Get(gamma, i);
  }
  *IOSDoubleArray_GetRef(delta, n) = (3 * (IOSDoubleArray_Get(x, n) - IOSDoubleArray_Get(x, n - 1)) - IOSDoubleArray_Get(delta, n - 1)) * IOSDoubleArray_Get(gamma, n);
  *IOSDoubleArray_GetRef(D, n) = IOSDoubleArray_Get(delta, n);
  for (jint i = n - 1; i >= 0; i--) {
    *IOSDoubleArray_GetRef(D, i) = IOSDoubleArray_Get(delta, i) - IOSDoubleArray_Get(gamma, i) * IOSDoubleArray_Get(D, i + 1);
  }
  IOSObjectArray *C = [IOSObjectArray arrayWithLength:n type:ADXHyperSpline_Cubic_class_()];
  for (jint i = 0; i < n; i++) {
    IOSObjectArray_SetAndConsume(C, i, new_ADXHyperSpline_Cubic_initWithDouble_withDouble_withDouble_withDouble_((jfloat) IOSDoubleArray_Get(x, i), IOSDoubleArray_Get(D, i), 3 * (IOSDoubleArray_Get(x, i + 1) - IOSDoubleArray_Get(x, i)) - 2 * IOSDoubleArray_Get(D, i) - IOSDoubleArray_Get(D, i + 1), 2 * (IOSDoubleArray_Get(x, i) - IOSDoubleArray_Get(x, i + 1)) + IOSDoubleArray_Get(D, i) + IOSDoubleArray_Get(D, i + 1)));
  }
  return C;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXHyperSpline)

@implementation ADXHyperSpline_Cubic

- (instancetype)initWithDouble:(jdouble)a
                    withDouble:(jdouble)b
                    withDouble:(jdouble)c
                    withDouble:(jdouble)d {
  ADXHyperSpline_Cubic_initWithDouble_withDouble_withDouble_withDouble_(self, a, b, c, d);
  return self;
}

- (jdouble)evalWithDouble:(jdouble)u {
  return (((mD_ * u) + mC_) * u + mB_) * u + mA_;
}

- (jdouble)velWithDouble:(jdouble)v {
  return (mD_ * ADXHyperSpline_Cubic_THIRD * v + mC_ * ADXHyperSpline_Cubic_HALF) * v + mB_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDouble:withDouble:withDouble:withDouble:);
  methods[1].selector = @selector(evalWithDouble:);
  methods[2].selector = @selector(velWithDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mA_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mB_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mC_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mD_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "THIRD", "D", .constantValue.asDouble = ADXHyperSpline_Cubic_THIRD, 0x19, -1, -1, -1, -1 },
    { "HALF", "D", .constantValue.asDouble = ADXHyperSpline_Cubic_HALF, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "DDDD", "eval", "D", "vel", "LADXHyperSpline;" };
  static const J2ObjcClassInfo _ADXHyperSpline_Cubic = { "Cubic", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 3, 6, 4, -1, -1, -1, -1 };
  return &_ADXHyperSpline_Cubic;
}

@end

void ADXHyperSpline_Cubic_initWithDouble_withDouble_withDouble_withDouble_(ADXHyperSpline_Cubic *self, jdouble a, jdouble b, jdouble c, jdouble d) {
  NSObject_init(self);
  self->mA_ = a;
  self->mB_ = b;
  self->mC_ = c;
  self->mD_ = d;
}

ADXHyperSpline_Cubic *new_ADXHyperSpline_Cubic_initWithDouble_withDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c, jdouble d) {
  J2OBJC_NEW_IMPL(ADXHyperSpline_Cubic, initWithDouble_withDouble_withDouble_withDouble_, a, b, c, d)
}

ADXHyperSpline_Cubic *create_ADXHyperSpline_Cubic_initWithDouble_withDouble_withDouble_withDouble_(jdouble a, jdouble b, jdouble c, jdouble d) {
  J2OBJC_CREATE_IMPL(ADXHyperSpline_Cubic, initWithDouble_withDouble_withDouble_withDouble_, a, b, c, d)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXHyperSpline_Cubic)
