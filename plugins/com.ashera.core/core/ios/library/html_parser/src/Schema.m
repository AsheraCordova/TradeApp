//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\Schema.java
//

#include "ElementType.h"
#include "J2ObjC_source.h"
#include "Schema.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/util/HashMap.h"

@class JavaUtilHashMap;


@interface TSSchema () {
 @public
  JavaUtilHashMap *theEntities_;
  JavaUtilHashMap *theElementTypes_;
  NSString *theURI_;
  NSString *thePrefix_;
  __unsafe_unretained TSElementType *theRoot_;
}

@end

J2OBJC_FIELD_SETTER(TSSchema, theEntities_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(TSSchema, theElementTypes_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(TSSchema, theURI_, NSString *)
J2OBJC_FIELD_SETTER(TSSchema, thePrefix_, NSString *)

@implementation TSSchema

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TSSchema_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)elementTypeWithNSString:(NSString *)name
                        withInt:(jint)model
                        withInt:(jint)memberOf
                        withInt:(jint)flags {
  TSElementType *e = create_TSElementType_initWithNSString_withInt_withInt_withInt_withTSSchema_(name, model, memberOf, flags, self);
  [((JavaUtilHashMap *) nil_chk(theElementTypes_)) putWithId:name withId:e];
  if (memberOf == TSSchema_M_ROOT) theRoot_ = e;
}

- (TSElementType *)rootElementType {
  return theRoot_;
}

- (void)attributeWithNSString:(NSString *)elemName
                 withNSString:(NSString *)attrName
                 withNSString:(NSString *)type
                 withNSString:(NSString *)value {
  TSElementType *e = JreRetainedLocalValue([self getElementTypeWithNSString:elemName]);
  if (e == nil) {
    @throw create_JavaLangError_initWithNSString_(JreStrcat("$$$$", @"Attribute ", attrName, @" specified for unknown element type ", elemName));
  }
  [e setAttributeWithNSString:attrName withNSString:type withNSString:value];
}

- (void)parentWithNSString:(NSString *)name
              withNSString:(NSString *)parentName {
  TSElementType *child = JreRetainedLocalValue([self getElementTypeWithNSString:name]);
  TSElementType *parent = JreRetainedLocalValue([self getElementTypeWithNSString:parentName]);
  if (child == nil) {
    @throw create_JavaLangError_initWithNSString_(JreStrcat("$$$$", @"No child ", name, @" for parent ", parentName));
  }
  if (parent == nil) {
    @throw create_JavaLangError_initWithNSString_(JreStrcat("$$$$", @"No parent ", parentName, @" for child ", name));
  }
  [child setParentWithTSElementType:parent];
}

- (void)entityWithNSString:(NSString *)name
                   withInt:(jint)value {
  [((JavaUtilHashMap *) nil_chk(theEntities_)) putWithId:name withId:create_JavaLangInteger_initWithInt_(value)];
}

- (TSElementType *)getElementTypeWithNSString:(NSString *)name {
  return (TSElementType *) cast_chk(([((JavaUtilHashMap *) nil_chk(theElementTypes_)) getWithId:name]), [TSElementType class]);
}

- (jint)getEntityWithNSString:(NSString *)name {
  JavaLangInteger *ch = (JavaLangInteger *) cast_chk([((JavaUtilHashMap *) nil_chk(theEntities_)) getWithId:name], [JavaLangInteger class]);
  if (ch == nil) return 0;
  return [ch intValue];
}

- (NSString *)getURI {
  return theURI_;
}

- (NSString *)getPrefix {
  return thePrefix_;
}

- (void)setURIWithNSString:(NSString *)uri {
  JreStrongAssign(&theURI_, uri);
}

- (void)setPrefixWithNSString:(NSString *)prefix {
  JreStrongAssign(&thePrefix_, prefix);
}

- (void)__javaClone:(TSSchema *)original {
  [super __javaClone:original];
  [theRoot_ release];
}

- (void)dealloc {
  RELEASE_(theEntities_);
  RELEASE_(theElementTypes_);
  RELEASE_(theURI_);
  RELEASE_(thePrefix_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LTSElementType;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LTSElementType;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(elementTypeWithNSString:withInt:withInt:withInt:);
  methods[2].selector = @selector(rootElementType);
  methods[3].selector = @selector(attributeWithNSString:withNSString:withNSString:withNSString:);
  methods[4].selector = @selector(parentWithNSString:withNSString:);
  methods[5].selector = @selector(entityWithNSString:withInt:);
  methods[6].selector = @selector(getElementTypeWithNSString:);
  methods[7].selector = @selector(getEntityWithNSString:);
  methods[8].selector = @selector(getURI);
  methods[9].selector = @selector(getPrefix);
  methods[10].selector = @selector(setURIWithNSString:);
  methods[11].selector = @selector(setPrefixWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "M_ANY", "I", .constantValue.asInt = TSSchema_M_ANY, 0x19, -1, -1, -1, -1 },
    { "M_EMPTY", "I", .constantValue.asInt = TSSchema_M_EMPTY, 0x19, -1, -1, -1, -1 },
    { "M_PCDATA", "I", .constantValue.asInt = TSSchema_M_PCDATA, 0x19, -1, -1, -1, -1 },
    { "M_ROOT", "I", .constantValue.asInt = TSSchema_M_ROOT, 0x19, -1, -1, -1, -1 },
    { "F_RESTART", "I", .constantValue.asInt = TSSchema_F_RESTART, 0x19, -1, -1, -1, -1 },
    { "F_CDATA", "I", .constantValue.asInt = TSSchema_F_CDATA, 0x19, -1, -1, -1, -1 },
    { "F_NOFORCE", "I", .constantValue.asInt = TSSchema_F_NOFORCE, 0x19, -1, -1, -1, -1 },
    { "theEntities_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theElementTypes_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theURI_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thePrefix_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theRoot_", "LTSElementType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "elementType", "LNSString;III", "attribute", "LNSString;LNSString;LNSString;LNSString;", "parent", "LNSString;LNSString;", "entity", "LNSString;I", "getElementType", "LNSString;", "getEntity", "setURI", "setPrefix" };
  static const J2ObjcClassInfo _TSSchema = { "Schema", "repackaged.org.ccil.cowan.tagsoup", ptrTable, methods, fields, 7, 0x401, 12, 12, -1, -1, -1, -1, -1 };
  return &_TSSchema;
}

@end

void TSSchema_init(TSSchema *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->theEntities_, new_JavaUtilHashMap_init());
  JreStrongAssignAndConsume(&self->theElementTypes_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->theURI_, @"");
  JreStrongAssign(&self->thePrefix_, @"");
  self->theRoot_ = nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TSSchema)
