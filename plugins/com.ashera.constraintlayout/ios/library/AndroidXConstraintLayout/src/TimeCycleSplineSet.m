//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\TimeCycleSplineSet.java
//

#include "CLCustomAttribute.h"
#include "CurveFit.h"
#include "CustomVariable.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyCache.h"
#include "KeyFrameArray.h"
#include "MotionWidget.h"
#include "Oscillator.h"
#include "TimeCycleSplineSet.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/text/DecimalFormat.h"


inline NSString *ADXTimeCycleSplineSet_get_TAG(void);
static NSString *ADXTimeCycleSplineSet_TAG = @"SplineSet";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXTimeCycleSplineSet, TAG, NSString *)

@interface ADXTimeCycleSplineSet_Sort ()

+ (jint)partitionWithIntArray:(IOSIntArray *)array
              withFloatArray2:(IOSObjectArray *)value
                      withInt:(jint)low
                      withInt:(jint)hi;

+ (void)swapWithIntArray:(IOSIntArray *)array
         withFloatArray2:(IOSObjectArray *)value
                 withInt:(jint)a
                 withInt:(jint)b;

@end

__attribute__((unused)) static jint ADXTimeCycleSplineSet_Sort_partitionWithIntArray_withFloatArray2_withInt_withInt_(IOSIntArray *array, IOSObjectArray *value, jint low, jint hi);

__attribute__((unused)) static void ADXTimeCycleSplineSet_Sort_swapWithIntArray_withFloatArray2_withInt_withInt_(IOSIntArray *array, IOSObjectArray *value, jint a, jint b);

jfloat ADXTimeCycleSplineSet_VAL_2PI = 6.2831855f;

@implementation ADXTimeCycleSplineSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXTimeCycleSplineSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  NSString *str = JreRetainedLocalValue(mType_);
  JavaTextDecimalFormat *df = create_JavaTextDecimalFormat_initWithNSString_(@"##.##");
  for (jint i = 0; i < count_; i++) {
    JreStrAppend(&str, "CI$$$", '[', IOSIntArray_Get(nil_chk(mTimePoints_), i), @" , ", [df formatWithId:IOSObjectArray_Get(nil_chk(mValues_), i)], @"] ");
  }
  return str;
}

- (void)setTypeWithNSString:(NSString *)type {
  JreStrongAssign(&mType_, type);
}

- (jfloat)calcWaveWithFloat:(jfloat)period {
  jfloat p = period;
  {
    jfloat x;
    switch (mWaveShape_) {
      default:
      case ADXOscillator_SIN_WAVE:
      return (jfloat) JavaLangMath_sinWithDouble_(p * ADXTimeCycleSplineSet_VAL_2PI);
      case ADXOscillator_SQUARE_WAVE:
      return (jfloat) JavaLangMath_signumWithFloat_(p * ADXTimeCycleSplineSet_VAL_2PI);
      case ADXOscillator_TRIANGLE_WAVE:
      return 1 - JavaLangMath_absWithFloat_(p);
      case ADXOscillator_SAW_WAVE:
      return (fmodf((p * 2 + 1), 2)) - 1;
      case ADXOscillator_REVERSE_SAW_WAVE:
      return (1 - (fmodf((p * 2 + 1), 2)));
      case ADXOscillator_COS_WAVE:
      return (jfloat) JavaLangMath_cosWithDouble_(p * ADXTimeCycleSplineSet_VAL_2PI);
      case ADXOscillator_BOUNCE:
      x = 1 - JavaLangMath_absWithFloat_(fmodf((p * 4), 4) - 2);
      return 1 - x * x;
    }
  }
}

- (ADXCurveFit *)getCurveFit {
  return mCurveFit_;
}

- (void)setStartTimeWithLong:(jlong)currentTime {
  last_time_ = currentTime;
}

- (void)setPointWithInt:(jint)position
              withFloat:(jfloat)value
              withFloat:(jfloat)period
                withInt:(jint)shape
              withFloat:(jfloat)offset {
  *IOSIntArray_GetRef(nil_chk(mTimePoints_), count_) = position;
  *IOSFloatArray_GetRef(nil_chk(IOSObjectArray_Get(nil_chk(mValues_), count_)), ADXTimeCycleSplineSet_CURVE_VALUE) = value;
  *IOSFloatArray_GetRef(nil_chk(IOSObjectArray_Get(mValues_, count_)), ADXTimeCycleSplineSet_CURVE_PERIOD) = period;
  *IOSFloatArray_GetRef(nil_chk(IOSObjectArray_Get(mValues_, count_)), ADXTimeCycleSplineSet_CURVE_OFFSET) = offset;
  mWaveShape_ = JavaLangMath_maxWithInt_withInt_(mWaveShape_, shape);
  count_++;
}

- (void)setupWithInt:(jint)curveType {
  if (count_ == 0) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, err))) printlnWithNSString:JreStrcat("$$", @"Error no points added to ", mType_)];
    return;
  }
  ADXTimeCycleSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray2_withInt_withInt_(mTimePoints_, mValues_, 0, count_ - 1);
  jint unique = 0;
  for (jint i = 1; i < ((IOSIntArray *) nil_chk(mTimePoints_))->size_; i++) {
    if (IOSIntArray_Get(mTimePoints_, i) != IOSIntArray_Get(mTimePoints_, i - 1)) {
      unique++;
    }
  }
  if (unique == 0) {
    unique = 1;
  }
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:unique];
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ unique, 3 }];
  jint k = 0;
  for (jint i = 0; i < count_; i++) {
    if (i > 0 && IOSIntArray_Get(mTimePoints_, i) == IOSIntArray_Get(mTimePoints_, i - 1)) {
      continue;
    }
    *IOSDoubleArray_GetRef(time, k) = IOSIntArray_Get(mTimePoints_, i) * 1E-2;
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, k)), 0) = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(mValues_), i)), 0);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, k)), 1) = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(mValues_, i)), 1);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, k)), 2) = IOSFloatArray_Get(nil_chk(IOSObjectArray_Get(mValues_, i)), 2);
    k++;
  }
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(curveType, time, values));
}

- (void)dealloc {
  RELEASE_(mCurveFit_);
  RELEASE_(mTimePoints_);
  RELEASE_(mValues_);
  RELEASE_(mType_);
  RELEASE_(mCache_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXCurveFit;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(setTypeWithNSString:);
  methods[3].selector = @selector(calcWaveWithFloat:);
  methods[4].selector = @selector(getCurveFit);
  methods[5].selector = @selector(setStartTimeWithLong:);
  methods[6].selector = @selector(setPointWithInt:withFloat:withFloat:withInt:withFloat:);
  methods[7].selector = @selector(setupWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 11, -1, -1 },
    { "mCurveFit_", "LADXCurveFit;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mWaveShape_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTimePoints_", "[I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mValues_", "[[F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mType_", "LNSString;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mCache_", "[F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "CURVE_VALUE", "I", .constantValue.asInt = ADXTimeCycleSplineSet_CURVE_VALUE, 0x1c, -1, -1, -1, -1 },
    { "CURVE_PERIOD", "I", .constantValue.asInt = ADXTimeCycleSplineSet_CURVE_PERIOD, 0x1c, -1, -1, -1, -1 },
    { "CURVE_OFFSET", "I", .constantValue.asInt = ADXTimeCycleSplineSet_CURVE_OFFSET, 0x1c, -1, -1, -1, -1 },
    { "VAL_2PI", "F", .constantValue.asLong = 0, 0xc, -1, 12, -1, -1 },
    { "mContinue_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "last_time_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "last_cycle_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "setType", "LNSString;", "calcWave", "F", "setStartTime", "J", "setPoint", "IFFIF", "setup", "I", &ADXTimeCycleSplineSet_TAG, &ADXTimeCycleSplineSet_VAL_2PI, "LADXTimeCycleSplineSet_CustomSet;LADXTimeCycleSplineSet_Sort;LADXTimeCycleSplineSet_CustomVarSet;" };
  static const J2ObjcClassInfo _ADXTimeCycleSplineSet = { "TimeCycleSplineSet", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x401, 8, 15, -1, 13, -1, -1, -1 };
  return &_ADXTimeCycleSplineSet;
}

@end

void ADXTimeCycleSplineSet_init(ADXTimeCycleSplineSet *self) {
  NSObject_init(self);
  self->mWaveShape_ = 0;
  JreStrongAssignAndConsume(&self->mTimePoints_, [IOSIntArray newArrayWithLength:10]);
  JreStrongAssignAndConsume(&self->mValues_, [IOSFloatArray newArrayWithDimensions:2 lengths:(jint[]){ 10, 3 }]);
  JreStrongAssignAndConsume(&self->mCache_, [IOSFloatArray newArrayWithLength:3]);
  self->mContinue_ = false;
  self->last_cycle_ = JavaLangFloat_NaN;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXTimeCycleSplineSet)

@implementation ADXTimeCycleSplineSet_CustomSet

- (instancetype)initWithNSString:(NSString *)attribute
withADXKeyFrameArray_CustomArray:(ADXKeyFrameArray_CustomArray *)attrList {
  ADXTimeCycleSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(self, attribute, attrList);
  return self;
}

- (void)setupWithInt:(jint)curveType {
  jint size = [((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) size];
  jint dimensionality = [((ADXCLCustomAttribute *) nil_chk([((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) numberOfInterpolatedValues];
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:size];
  JreStrongAssignAndConsume(&mTempValues_, [IOSFloatArray newArrayWithLength:dimensionality + 2]);
  JreStrongAssignAndConsume(&mCache_CustomSet_, [IOSFloatArray newArrayWithLength:dimensionality]);
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ size, dimensionality + 2 }];
  for (jint i = 0; i < size; i++) {
    jint key = [((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) keyAtWithInt:i];
    ADXCLCustomAttribute *ca = JreRetainedLocalValue([((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:i]);
    IOSFloatArray *waveProp = [((ADXKeyFrameArray_FloatArray *) nil_chk(mWaveProperties_)) valueAtWithInt:i];
    *IOSDoubleArray_GetRef(time, i) = key * 1E-2;
    [((ADXCLCustomAttribute *) nil_chk(ca)) getValuesToInterpolateWithFloatArray:mTempValues_];
    for (jint k = 0; k < ((IOSFloatArray *) nil_chk(mTempValues_))->size_; k++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), k) = IOSFloatArray_Get(mTempValues_, k);
    }
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), dimensionality) = IOSFloatArray_Get(nil_chk(waveProp), 0);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), dimensionality + 1) = IOSFloatArray_Get(waveProp, 1);
  }
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(curveType, time, values));
}

- (void)setPointWithInt:(jint)position
              withFloat:(jfloat)value
              withFloat:(jfloat)period
                withInt:(jint)shape
              withFloat:(jfloat)offset {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"don't call for custom attribute call setPoint(pos, ConstraintAttribute,...)");
}

- (void)setPointWithInt:(jint)position
withADXCLCustomAttribute:(ADXCLCustomAttribute *)value
              withFloat:(jfloat)period
                withInt:(jint)shape
              withFloat:(jfloat)offset {
  [((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) appendWithInt:position withADXCLCustomAttribute:value];
  [((ADXKeyFrameArray_FloatArray *) nil_chk(mWaveProperties_)) appendWithInt:position withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ period, offset } count:2]];
  mWaveShape_ = JavaLangMath_maxWithInt_withInt_(mWaveShape_, shape);
}

- (jboolean)setPropertyWithADXMotionWidget:(ADXMotionWidget *)view
                                 withFloat:(jfloat)t
                                  withLong:(jlong)time
                           withADXKeyCache:(ADXKeyCache *)cache {
  [((ADXCurveFit *) nil_chk(mCurveFit_)) getPosWithDouble:t withFloatArray:mTempValues_];
  jfloat period = IOSFloatArray_Get(mTempValues_, ((IOSFloatArray *) nil_chk(mTempValues_))->size_ - 2);
  jfloat offset = IOSFloatArray_Get(mTempValues_, mTempValues_->size_ - 1);
  jlong delta_time = time - last_time_;
  if (JavaLangFloat_isNaNWithFloat_(last_cycle_)) {
    last_cycle_ = [((ADXKeyCache *) nil_chk(cache)) getFloatValueWithId:view withNSString:mAttributeName_ withInt:0];
    if (JavaLangFloat_isNaNWithFloat_(last_cycle_)) {
      last_cycle_ = 0;
    }
  }
  last_cycle_ = (jfloat) (fmod((last_cycle_ + delta_time * 1E-9 * period), 1.0));
  last_time_ = time;
  jfloat wave = [self calcWaveWithFloat:last_cycle_];
  mContinue_ = false;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(mCache_CustomSet_))->size_; i++) {
    mContinue_ |= (IOSFloatArray_Get(nil_chk(mTempValues_), i) != 0.0);
    *IOSFloatArray_GetRef(mCache_CustomSet_, i) = IOSFloatArray_Get(mTempValues_, i) * wave + offset;
  }
  [((ADXCLCustomAttribute *) nil_chk([((ADXKeyFrameArray_CustomArray *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) setInterpolatedValueWithId:view withFloatArray:mCache_CustomSet_];
  if (period != 0.0f) {
    mContinue_ = true;
  }
  return mContinue_;
}

- (void)dealloc {
  RELEASE_(mAttributeName_);
  RELEASE_(mConstraintAttributeList_);
  RELEASE_(mWaveProperties_);
  RELEASE_(mTempValues_);
  RELEASE_(mCache_CustomSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADXKeyFrameArray_CustomArray:);
  methods[1].selector = @selector(setupWithInt:);
  methods[2].selector = @selector(setPointWithInt:withFloat:withFloat:withInt:withFloat:);
  methods[3].selector = @selector(setPointWithInt:withADXCLCustomAttribute:withFloat:withInt:withFloat:);
  methods[4].selector = @selector(setPropertyWithADXMotionWidget:withFloat:withLong:withADXKeyCache:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAttributeName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mConstraintAttributeList_", "LADXKeyFrameArray_CustomArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWaveProperties_", "LADXKeyFrameArray_FloatArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempValues_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCache_CustomSet_", "[F", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADXKeyFrameArray_CustomArray;", "setup", "I", "setPoint", "IFFIF", "ILADXCLCustomAttribute;FIF", "setProperty", "LADXMotionWidget;FJLADXKeyCache;", "mCache", "LADXTimeCycleSplineSet;" };
  static const J2ObjcClassInfo _ADXTimeCycleSplineSet_CustomSet = { "CustomSet", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 5, 5, 9, -1, -1, -1, -1 };
  return &_ADXTimeCycleSplineSet_CustomSet;
}

@end

void ADXTimeCycleSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(ADXTimeCycleSplineSet_CustomSet *self, NSString *attribute, ADXKeyFrameArray_CustomArray *attrList) {
  ADXTimeCycleSplineSet_init(self);
  JreStrongAssignAndConsume(&self->mWaveProperties_, new_ADXKeyFrameArray_FloatArray_init());
  JreStrongAssign(&self->mAttributeName_, IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(attribute)) java_split:@","]), 1));
  JreStrongAssign(&self->mConstraintAttributeList_, attrList);
}

ADXTimeCycleSplineSet_CustomSet *new_ADXTimeCycleSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(NSString *attribute, ADXKeyFrameArray_CustomArray *attrList) {
  J2OBJC_NEW_IMPL(ADXTimeCycleSplineSet_CustomSet, initWithNSString_withADXKeyFrameArray_CustomArray_, attribute, attrList)
}

ADXTimeCycleSplineSet_CustomSet *create_ADXTimeCycleSplineSet_CustomSet_initWithNSString_withADXKeyFrameArray_CustomArray_(NSString *attribute, ADXKeyFrameArray_CustomArray *attrList) {
  J2OBJC_CREATE_IMPL(ADXTimeCycleSplineSet_CustomSet, initWithNSString_withADXKeyFrameArray_CustomArray_, attribute, attrList)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXTimeCycleSplineSet_CustomSet)

@implementation ADXTimeCycleSplineSet_Sort

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXTimeCycleSplineSet_Sort_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)doubleQuickSortWithIntArray:(IOSIntArray *)key
                    withFloatArray2:(IOSObjectArray *)value
                            withInt:(jint)low
                            withInt:(jint)hi {
  ADXTimeCycleSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray2_withInt_withInt_(key, value, low, hi);
}

+ (jint)partitionWithIntArray:(IOSIntArray *)array
              withFloatArray2:(IOSObjectArray *)value
                      withInt:(jint)low
                      withInt:(jint)hi {
  return ADXTimeCycleSplineSet_Sort_partitionWithIntArray_withFloatArray2_withInt_withInt_(array, value, low, hi);
}

+ (void)swapWithIntArray:(IOSIntArray *)array
         withFloatArray2:(IOSObjectArray *)value
                 withInt:(jint)a
                 withInt:(jint)b {
  ADXTimeCycleSplineSet_Sort_swapWithIntArray_withFloatArray2_withInt_withInt_(array, value, a, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(doubleQuickSortWithIntArray:withFloatArray2:withInt:withInt:);
  methods[2].selector = @selector(partitionWithIntArray:withFloatArray2:withInt:withInt:);
  methods[3].selector = @selector(swapWithIntArray:withFloatArray2:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "doubleQuickSort", "[I[[FII", "partition", "swap", "LADXTimeCycleSplineSet;" };
  static const J2ObjcClassInfo _ADXTimeCycleSplineSet_Sort = { "Sort", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0xc, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXTimeCycleSplineSet_Sort;
}

@end

void ADXTimeCycleSplineSet_Sort_init(ADXTimeCycleSplineSet_Sort *self) {
  NSObject_init(self);
}

ADXTimeCycleSplineSet_Sort *new_ADXTimeCycleSplineSet_Sort_init() {
  J2OBJC_NEW_IMPL(ADXTimeCycleSplineSet_Sort, init)
}

ADXTimeCycleSplineSet_Sort *create_ADXTimeCycleSplineSet_Sort_init() {
  J2OBJC_CREATE_IMPL(ADXTimeCycleSplineSet_Sort, init)
}

void ADXTimeCycleSplineSet_Sort_doubleQuickSortWithIntArray_withFloatArray2_withInt_withInt_(IOSIntArray *key, IOSObjectArray *value, jint low, jint hi) {
  ADXTimeCycleSplineSet_Sort_initialize();
  IOSIntArray *stack = [IOSIntArray arrayWithLength:((IOSIntArray *) nil_chk(key))->size_ + 10];
  jint count = 0;
  *IOSIntArray_GetRef(stack, count++) = hi;
  *IOSIntArray_GetRef(stack, count++) = low;
  while (count > 0) {
    low = IOSIntArray_Get(stack, --count);
    hi = IOSIntArray_Get(stack, --count);
    if (low < hi) {
      jint p = ADXTimeCycleSplineSet_Sort_partitionWithIntArray_withFloatArray2_withInt_withInt_(key, value, low, hi);
      *IOSIntArray_GetRef(stack, count++) = p - 1;
      *IOSIntArray_GetRef(stack, count++) = low;
      *IOSIntArray_GetRef(stack, count++) = hi;
      *IOSIntArray_GetRef(stack, count++) = p + 1;
    }
  }
}

jint ADXTimeCycleSplineSet_Sort_partitionWithIntArray_withFloatArray2_withInt_withInt_(IOSIntArray *array, IOSObjectArray *value, jint low, jint hi) {
  ADXTimeCycleSplineSet_Sort_initialize();
  jint pivot = IOSIntArray_Get(nil_chk(array), hi);
  jint i = low;
  for (jint j = low; j < hi; j++) {
    if (IOSIntArray_Get(array, j) <= pivot) {
      ADXTimeCycleSplineSet_Sort_swapWithIntArray_withFloatArray2_withInt_withInt_(array, value, i, j);
      i++;
    }
  }
  ADXTimeCycleSplineSet_Sort_swapWithIntArray_withFloatArray2_withInt_withInt_(array, value, i, hi);
  return i;
}

void ADXTimeCycleSplineSet_Sort_swapWithIntArray_withFloatArray2_withInt_withInt_(IOSIntArray *array, IOSObjectArray *value, jint a, jint b) {
  ADXTimeCycleSplineSet_Sort_initialize();
  jint tmp = IOSIntArray_Get(nil_chk(array), a);
  *IOSIntArray_GetRef(array, a) = IOSIntArray_Get(array, b);
  *IOSIntArray_GetRef(array, b) = tmp;
  IOSFloatArray *tmpv = IOSObjectArray_Get(nil_chk(value), a);
  IOSObjectArray_Set(value, a, IOSObjectArray_Get(value, b));
  IOSObjectArray_Set(value, b, tmpv);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXTimeCycleSplineSet_Sort)

@implementation ADXTimeCycleSplineSet_CustomVarSet

- (instancetype)initWithNSString:(NSString *)attribute
  withADXKeyFrameArray_CustomVar:(ADXKeyFrameArray_CustomVar *)attrList {
  ADXTimeCycleSplineSet_CustomVarSet_initWithNSString_withADXKeyFrameArray_CustomVar_(self, attribute, attrList);
  return self;
}

- (void)setupWithInt:(jint)curveType {
  jint size = [((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) size];
  jint dimensionality = [((ADXCustomVariable *) nil_chk([((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) numberOfInterpolatedValues];
  IOSDoubleArray *time = [IOSDoubleArray arrayWithLength:size];
  JreStrongAssignAndConsume(&mTempValues_, [IOSFloatArray newArrayWithLength:dimensionality + 2]);
  JreStrongAssignAndConsume(&mCache_CustomVarSet_, [IOSFloatArray newArrayWithLength:dimensionality]);
  IOSObjectArray *values = [IOSDoubleArray arrayWithDimensions:2 lengths:(jint[]){ size, dimensionality + 2 }];
  for (jint i = 0; i < size; i++) {
    jint key = [((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) keyAtWithInt:i];
    ADXCustomVariable *ca = JreRetainedLocalValue([((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:i]);
    IOSFloatArray *waveProp = [((ADXKeyFrameArray_FloatArray *) nil_chk(mWaveProperties_)) valueAtWithInt:i];
    *IOSDoubleArray_GetRef(time, i) = key * 1E-2;
    [((ADXCustomVariable *) nil_chk(ca)) getValuesToInterpolateWithFloatArray:mTempValues_];
    for (jint k = 0; k < ((IOSFloatArray *) nil_chk(mTempValues_))->size_; k++) {
      *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), k) = IOSFloatArray_Get(mTempValues_, k);
    }
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), dimensionality) = IOSFloatArray_Get(nil_chk(waveProp), 0);
    *IOSDoubleArray_GetRef(nil_chk(IOSObjectArray_Get(values, i)), dimensionality + 1) = IOSFloatArray_Get(waveProp, 1);
  }
  JreStrongAssign(&mCurveFit_, ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(curveType, time, values));
}

- (void)setPointWithInt:(jint)position
              withFloat:(jfloat)value
              withFloat:(jfloat)period
                withInt:(jint)shape
              withFloat:(jfloat)offset {
  @throw create_JavaLangRuntimeException_initWithNSString_(@"don't call for custom attribute call setPoint(pos, ConstraintAttribute,...)");
}

- (void)setPointWithInt:(jint)position
  withADXCustomVariable:(ADXCustomVariable *)value
              withFloat:(jfloat)period
                withInt:(jint)shape
              withFloat:(jfloat)offset {
  [((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) appendWithInt:position withADXCustomVariable:value];
  [((ADXKeyFrameArray_FloatArray *) nil_chk(mWaveProperties_)) appendWithInt:position withFloatArray:[IOSFloatArray arrayWithFloats:(jfloat[]){ period, offset } count:2]];
  mWaveShape_ = JavaLangMath_maxWithInt_withInt_(mWaveShape_, shape);
}

- (jboolean)setPropertyWithADXMotionWidget:(ADXMotionWidget *)view
                                 withFloat:(jfloat)t
                                  withLong:(jlong)time
                           withADXKeyCache:(ADXKeyCache *)cache {
  [((ADXCurveFit *) nil_chk(mCurveFit_)) getPosWithDouble:t withFloatArray:mTempValues_];
  jfloat period = IOSFloatArray_Get(mTempValues_, ((IOSFloatArray *) nil_chk(mTempValues_))->size_ - 2);
  jfloat offset = IOSFloatArray_Get(mTempValues_, mTempValues_->size_ - 1);
  jlong delta_time = time - last_time_;
  if (JavaLangFloat_isNaNWithFloat_(last_cycle_)) {
    last_cycle_ = [((ADXKeyCache *) nil_chk(cache)) getFloatValueWithId:view withNSString:mAttributeName_ withInt:0];
    if (JavaLangFloat_isNaNWithFloat_(last_cycle_)) {
      last_cycle_ = 0;
    }
  }
  last_cycle_ = (jfloat) (fmod((last_cycle_ + delta_time * 1E-9 * period), 1.0));
  last_time_ = time;
  jfloat wave = [self calcWaveWithFloat:last_cycle_];
  mContinue_ = false;
  for (jint i = 0; i < ((IOSFloatArray *) nil_chk(mCache_CustomVarSet_))->size_; i++) {
    mContinue_ |= (IOSFloatArray_Get(nil_chk(mTempValues_), i) != 0.0);
    *IOSFloatArray_GetRef(mCache_CustomVarSet_, i) = IOSFloatArray_Get(mTempValues_, i) * wave + offset;
  }
  [((ADXCustomVariable *) nil_chk([((ADXKeyFrameArray_CustomVar *) nil_chk(mConstraintAttributeList_)) valueAtWithInt:0])) setInterpolatedValueWithADXMotionWidget:view withFloatArray:mCache_CustomVarSet_];
  if (period != 0.0f) {
    mContinue_ = true;
  }
  return mContinue_;
}

- (void)dealloc {
  RELEASE_(mAttributeName_);
  RELEASE_(mConstraintAttributeList_);
  RELEASE_(mWaveProperties_);
  RELEASE_(mTempValues_);
  RELEASE_(mCache_CustomVarSet_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withADXKeyFrameArray_CustomVar:);
  methods[1].selector = @selector(setupWithInt:);
  methods[2].selector = @selector(setPointWithInt:withFloat:withFloat:withInt:withFloat:);
  methods[3].selector = @selector(setPointWithInt:withADXCustomVariable:withFloat:withInt:withFloat:);
  methods[4].selector = @selector(setPropertyWithADXMotionWidget:withFloat:withLong:withADXKeyCache:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAttributeName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mConstraintAttributeList_", "LADXKeyFrameArray_CustomVar;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWaveProperties_", "LADXKeyFrameArray_FloatArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempValues_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCache_CustomVarSet_", "[F", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;LADXKeyFrameArray_CustomVar;", "setup", "I", "setPoint", "IFFIF", "ILADXCustomVariable;FIF", "setProperty", "LADXMotionWidget;FJLADXKeyCache;", "mCache", "LADXTimeCycleSplineSet;" };
  static const J2ObjcClassInfo _ADXTimeCycleSplineSet_CustomVarSet = { "CustomVarSet", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 5, 5, 9, -1, -1, -1, -1 };
  return &_ADXTimeCycleSplineSet_CustomVarSet;
}

@end

void ADXTimeCycleSplineSet_CustomVarSet_initWithNSString_withADXKeyFrameArray_CustomVar_(ADXTimeCycleSplineSet_CustomVarSet *self, NSString *attribute, ADXKeyFrameArray_CustomVar *attrList) {
  ADXTimeCycleSplineSet_init(self);
  JreStrongAssignAndConsume(&self->mWaveProperties_, new_ADXKeyFrameArray_FloatArray_init());
  JreStrongAssign(&self->mAttributeName_, IOSObjectArray_Get(nil_chk([((NSString *) nil_chk(attribute)) java_split:@","]), 1));
  JreStrongAssign(&self->mConstraintAttributeList_, attrList);
}

ADXTimeCycleSplineSet_CustomVarSet *new_ADXTimeCycleSplineSet_CustomVarSet_initWithNSString_withADXKeyFrameArray_CustomVar_(NSString *attribute, ADXKeyFrameArray_CustomVar *attrList) {
  J2OBJC_NEW_IMPL(ADXTimeCycleSplineSet_CustomVarSet, initWithNSString_withADXKeyFrameArray_CustomVar_, attribute, attrList)
}

ADXTimeCycleSplineSet_CustomVarSet *create_ADXTimeCycleSplineSet_CustomVarSet_initWithNSString_withADXKeyFrameArray_CustomVar_(NSString *attribute, ADXKeyFrameArray_CustomVar *attrList) {
  J2OBJC_CREATE_IMPL(ADXTimeCycleSplineSet_CustomVarSet, initWithNSString_withADXKeyFrameArray_CustomVar_, attribute, attrList)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXTimeCycleSplineSet_CustomVarSet)
