//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\ScrollView.java
//

#include "ApplicationInfo.h"
#include "Build.h"
#include "Context.h"
#include "FrameLayout.h"
#include "J2ObjC_source.h"
#include "ScrollView.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/Math.h"


@interface ADScrollView () {
 @public
  jint mLastMotionY_;
  jboolean mIsLayoutDirty_;
  jboolean mIsBeingDragged_;
  jboolean mFillViewport_;
  jboolean mSmoothScrollingEnabled_;
  jint mTouchSlop_ScrollView_;
  jint mMinimumVelocity_;
  jint mMaximumVelocity_;
  jint mOverscrollDistance_;
  jint mOverflingDistance_;
  jint mActivePointerId_;
  jint mNestedYOffset_;
  jint originalRightPadding_;
}

@end

inline jint ADScrollView_get_INVALID_POINTER(void);
#define ADScrollView_INVALID_POINTER -1
J2OBJC_STATIC_FIELD_CONSTANT(ADScrollView, INVALID_POINTER, jint)

@implementation ADScrollView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADScrollView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)isFillViewport {
  return mFillViewport_;
}

- (void)setFillViewportWithBoolean:(jboolean)fillViewport {
  if (fillViewport != mFillViewport_) {
    mFillViewport_ = fillViewport;
    [self requestLayout];
  }
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  if (!mFillViewport_) {
    return;
  }
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  if (heightMode == ADView_MeasureSpec_UNSPECIFIED) {
    return;
  }
  if ([self getChildCount] > 0) {
    ADView *child = [self getChildAtWithInt:0];
    jint widthPadding;
    jint heightPadding;
    jint targetSdkVersion = ((ADApplicationInfo *) nil_chk([((ADContext *) nil_chk([self getContext])) getApplicationInfo]))->targetSdkVersion_;
    ADFrameLayout_LayoutParams *lp = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
    if (targetSdkVersion >= ADBuild_VERSION_CODES_M) {
      widthPadding = mPaddingLeft_ + mPaddingRight_ + ((ADFrameLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_;
      heightPadding = mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_;
    }
    else {
      widthPadding = mPaddingLeft_ + mPaddingRight_;
      heightPadding = mPaddingTop_ + mPaddingBottom_;
    }
    jint desiredHeight = [self getMeasuredHeight] - heightPadding;
    if ([child getMeasuredHeight] < desiredHeight) {
      jint childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, widthPadding, ((ADFrameLayout_LayoutParams *) nil_chk(lp))->width_);
      jint childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(desiredHeight, ADView_MeasureSpec_EXACTLY);
      [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
    }
  }
}

- (jint)computeVerticalScrollRange {
  jint count = [self getChildCount];
  jint contentHeight = [self getHeight] - mPaddingBottom_ - mPaddingTop_;
  if (count == 0) {
    return contentHeight;
  }
  jint scrollRange = [((ADView *) nil_chk([self getChildAtWithInt:0])) getBottom];
  jint scrollY = mScrollY_;
  jint overscrollBottom = JavaLangMath_maxWithInt_withInt_(0, scrollRange - contentHeight);
  if (scrollY < 0) {
    scrollRange -= scrollY;
  }
  else if (scrollY > overscrollBottom) {
    scrollRange += scrollY - overscrollBottom;
  }
  return scrollRange;
}

- (void)measureChildWithADView:(ADView *)child
                       withInt:(jint)parentWidthMeasureSpec
                       withInt:(jint)parentHeightMeasureSpec {
  ADViewGroup_LayoutParams *lp = JreRetainedLocalValue([((ADView *) nil_chk(child)) getLayoutParams]);
  jint childWidthMeasureSpec;
  jint childHeightMeasureSpec;
  childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthMeasureSpec, mPaddingLeft_ + mPaddingRight_, ((ADViewGroup_LayoutParams *) nil_chk(lp))->width_);
  jint verticalPadding = mPaddingTop_ + mPaddingBottom_;
  childHeightMeasureSpec = ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(0, ADView_MeasureSpec_getSizeWithInt_(parentHeightMeasureSpec) - verticalPadding), ADView_MeasureSpec_UNSPECIFIED);
  [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
}

- (void)measureChildWithMarginsWithADView:(ADView *)child
                                  withInt:(jint)parentWidthMeasureSpec
                                  withInt:(jint)widthUsed
                                  withInt:(jint)parentHeightMeasureSpec
                                  withInt:(jint)heightUsed {
  ADViewGroup_MarginLayoutParams *lp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
  jint childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthMeasureSpec, mPaddingLeft_ + mPaddingRight_ + ((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ + widthUsed, lp->width_);
  jint usedTotal = mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_ + heightUsed;
  jint childHeightMeasureSpec = ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(0, ADView_MeasureSpec_getSizeWithInt_(parentHeightMeasureSpec) - usedTotal), ADView_MeasureSpec_UNSPECIFIED);
  [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
}

- (void)requestLayout {
  mIsLayoutDirty_ = true;
  [super requestLayout];
}

- (void)adjustPaddingIfScrollBarPresentWithInt:(jint)widthMeasureSpec
                                       withInt:(jint)heightMeasureSpec
                                       withInt:(jint)thumbWidth {
  if ([self getChildCount] > 0) {
    ADView *child = [self getChildAtWithInt:0];
    jint widthPadding;
    jint heightPadding;
    jint targetSdkVersion = ((ADApplicationInfo *) nil_chk([((ADContext *) nil_chk([self getContext])) getApplicationInfo]))->targetSdkVersion_;
    ADFrameLayout_LayoutParams *lp = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
    if (targetSdkVersion >= ADBuild_VERSION_CODES_M) {
      widthPadding = mPaddingLeft_ + mPaddingRight_ + ((ADFrameLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_;
      heightPadding = mPaddingTop_ + mPaddingBottom_ + lp->topMargin_ + lp->bottomMargin_;
    }
    else {
      widthPadding = mPaddingLeft_ + mPaddingRight_;
      heightPadding = mPaddingTop_ + mPaddingBottom_;
    }
    jint desiredHeight = [self getMeasuredHeight] - heightPadding;
    if (desiredHeight >= [child getMeasuredHeight]) {
      if (mPaddingRight_ == thumbWidth && originalRightPadding_ != thumbWidth) {
        mPaddingRight_ = originalRightPadding_;
        [self measureChildWithADView:child withInt:widthMeasureSpec withInt:heightMeasureSpec];
      }
    }
    else {
      if (mPaddingRight_ < thumbWidth) {
        originalRightPadding_ = mPaddingRight_;
        mPaddingRight_ = thumbWidth;
        [self measureChildWithADView:child withInt:widthMeasureSpec withInt:heightMeasureSpec];
      }
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isFillViewport);
  methods[2].selector = @selector(setFillViewportWithBoolean:);
  methods[3].selector = @selector(onMeasureWithInt:withInt:);
  methods[4].selector = @selector(computeVerticalScrollRange);
  methods[5].selector = @selector(measureChildWithADView:withInt:withInt:);
  methods[6].selector = @selector(measureChildWithMarginsWithADView:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(requestLayout);
  methods[8].selector = @selector(adjustPaddingIfScrollBarPresentWithInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ANIMATED_SCROLL_GAP", "I", .constantValue.asInt = ADScrollView_ANIMATED_SCROLL_GAP, 0x18, -1, -1, -1, -1 },
    { "mLastMotionY_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsLayoutDirty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsBeingDragged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFillViewport_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSmoothScrollingEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_ScrollView_", "I", .constantValue.asLong = 0, 0x2, 10, -1, -1, -1 },
    { "mMinimumVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaximumVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOverscrollDistance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOverflingDistance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActivePointerId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNestedYOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "INVALID_POINTER", "I", .constantValue.asInt = ADScrollView_INVALID_POINTER, 0x1a, -1, -1, -1, -1 },
    { "originalRightPadding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFillViewport", "Z", "onMeasure", "II", "measureChild", "LADView;II", "measureChildWithMargins", "LADView;IIII", "adjustPaddingIfScrollBarPresent", "III", "mTouchSlop" };
  static const J2ObjcClassInfo _ADScrollView = { "ScrollView", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 9, 15, -1, -1, -1, -1, -1 };
  return &_ADScrollView;
}

@end

void ADScrollView_init(ADScrollView *self) {
  ADFrameLayout_init(self);
  self->mIsLayoutDirty_ = true;
  self->mIsBeingDragged_ = false;
  self->mSmoothScrollingEnabled_ = true;
  self->mActivePointerId_ = ADScrollView_INVALID_POINTER;
  self->originalRightPadding_ = 0;
}

ADScrollView *new_ADScrollView_init() {
  J2OBJC_NEW_IMPL(ADScrollView, init)
}

ADScrollView *create_ADScrollView_init() {
  J2OBJC_CREATE_IMPL(ADScrollView, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADScrollView)
