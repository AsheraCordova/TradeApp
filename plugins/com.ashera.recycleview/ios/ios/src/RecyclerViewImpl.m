//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSRecycleViewPlugin\src\main\java\com\ashera\recycleview\RecyclerViewImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "CommonConverters.h"
#include "Context.h"
#include "ConverterFactory.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "ExpandableGroup.h"
#include "GridLayoutManager.h"
#include "GroupAdapter.h"
#include "GroupieViewHolder.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "InsetItemDecoration.h"
#include "Item.h"
#include "J2ObjC_source.h"
#include "LinearLayoutManager.h"
#include "LoopParam.h"
#include "MeasureEvent.h"
#include "ModelDataType.h"
#include "ModelExpressionParser.h"
#include "ModelScope.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "RecyclerView.h"
#include "RecyclerViewImpl.h"
#include "ResourceBundleUtils.h"
#include "Section.h"
#include "StaggeredGridLayoutManager.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "WidgetViewHolder.h"
#include "java/lang/Boolean.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/UUID.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

#include "ASUIScrollView.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASRecyclerViewImpl () {
 @public
  id uiView_;
  ADXRecyclerView *recyclerView_;
  jboolean disableUpdate_;
  id scrollProvider_;
  jint scrollBarIncrement_;
  jint oldScrollPos_;
  jint prevRange_;
  ASRecyclerViewImpl_ScrollProviderType *scrollProviderType_;
  ADXRecyclerView_Adapter *adapter_;
  id<ASIWidget> headerTemplate_;
  id<ASIWidget> footerTemplate_;
  id<JavaUtilList> viewHolderIds_;
  id<JavaUtilList> headerViewHolderIds_;
  id<JavaUtilList> footerViewHolderIds_;
  jint spanCount_;
  jint orientation_;
  id<JavaUtilMap> sectionMap_;
  id<JavaUtilMap> itemConfigMap_;
  jboolean headerDisabled_;
  jboolean footerDisabled_;
  ASRecyclerViewImpl_RecyclerViewCommandBuilder *builder_;
  ASRecyclerViewImpl_RecyclerViewBean *bean_;
  ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder *paramsBuilder_;
  ASRecyclerViewImpl_RecyclerViewParamsBean *paramsBean_;
  id recyclerWrapperView_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXRecyclerView_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)initScrollBars OBJC_METHOD_FAMILY_NONE;

- (void)setScrollBarIncrementWithId:(id)objValue;

- (void)handleScroll;

- (jfloat)getScrollBarDimenWithInt:(jint)range
                           withInt:(jint)extent;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (jint)getExtent;

- (jint)getOffset;

- (jint)getRange;

- (void)setOnScrollWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setOnScrollStateChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                       withNSString:(NSString *)strValue
                                             withId:(id)objValue
                          withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)nativeCreateRecycleViewWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setLayoutManagerWithId:(id)objValue;

- (void)reloadTable;

- (void)setViewHolderIdsWithId:(id)objValue;

- (void)setSpanCountWithId:(id)objValue;

- (void)setOrientationWithId:(id)objValue;

- (jint)getOrientation;

- (void)setLayoutWithId:(id)objValue;

- (void)createSectionsWithASRecyclerViewImpl_GroupieAdapter:(ASRecyclerViewImpl_GroupieAdapter *)groupieAdapter;

- (void)createSectionsWithId:(id)group
                      withId:(id)sectionObj
             withASLoopParam:(ASLoopParam *)pLoopParam;

- (void)createExpandableWithJavaUtilMap:(id<JavaUtilMap>)sectionMap
                         withADXSection:(ADXSection *)section
                        withASLoopParam:(ASLoopParam *)pLoopParam;

- (void)addSectionWithId:(id)group
                  withId:(id)sectionObj
         withASLoopParam:(ASLoopParam *)loopParam;

- (void)createItemsWithJavaUtilMap:(id<JavaUtilMap>)sectionMap
                    withADXSection:(ADXSection *)section
                   withASLoopParam:(ASLoopParam *)pLoopParam;

- (void)createItemWithADXSection:(ADXSection *)section
                 withJavaUtilMap:(id<JavaUtilMap>)itemMap
                 withASLoopParam:(ASLoopParam *)pLoopParam
                          withId:(id)myitem;

- (void)createFooterWithASLoopParam:(ASLoopParam *)loopParam
                     withADXSection:(ADXSection *)section
                    withJavaUtilMap:(id<JavaUtilMap>)sectionMap;

- (void)createHeaderWithASLoopParam:(ASLoopParam *)loopParam
                     withADXSection:(ADXSection *)section
                    withJavaUtilMap:(id<JavaUtilMap>)sectionMap;

- (void)addSectionItemWithNSString:(NSString *)sectionId
                      withNSString:(NSString *)itemConfigId
                            withId:(id)item;

- (void)notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder:(ASRecyclerViewImpl_SectionHolder *)sectionHolder;

- (void)removeSectionItemWithNSString:(NSString *)sectionId
                         withNSString:(NSString *)itemConfigId
                         withNSString:(NSString *)itemId;

- (void)removeAllItemsWithNSString:(NSString *)sectionId;

- (void)updateSectionItemWithNSString:(NSString *)sectionId
                         withNSString:(NSString *)itemConfigId
                         withNSString:(NSString *)itemId
                               withId:(id)newData;

- (void)scrollToPositionWithId:(id)objValue;

- (void)scrollToTopWithId:(id)objValue;

- (void)scrollToEndWithId:(id)objValue;

- (void)setStackFromBottomWithId:(id)objValue;

- (void)setReverseLayoutWithId:(id)objValue;

- (jboolean)isReverseLayout;

- (void)setFooterDisabledWithId:(id)objValue;

- (void)setHeaderDisabledWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)stopScrollEndWithId:(id)scrollView;

- (void)stopScrollStartWithId:(id)scrollView;

- (void)updateContentSizeWithInt:(jint)range
                          withId:(id)uiView;

- (void)applyTransformWithId:(id)uiView
                      withId:(id)view;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)showVerticalScrollBar;

- (void)showHorizontalScrollBar;

- (void)setCustomHandleScrollWithInt:(jint)dpos
                             withInt:(jint)range
                             withInt:(jint)offset
                             withInt:(jint)extent;

- (jint)setSelectionWithInt:(jint)percoffset
                    withInt:(jint)offset
                     withId:(id)view;

- (void)setContentSizeWidthWithInt:(jint)range
                            withId:(id)uiView;

- (void)setContentSizeHeightWithInt:(jint)range
                             withId:(id)uiView;

- (void)setMaximumWithInt:(jint)maxiumum;

- (jint)getMaximum;

- (jint)getSelection;

- (void)flashScrollIndicatorsWithId:(id)uiView;

- (void)setContentOffsetXWithInt:(jint)range
                          withId:(id)uiView;

- (void)setContentOffsetYWithInt:(jint)range
                          withId:(id)uiView;

- (jint)getContentOffsetXWithId:(id)uiView;

- (jint)getContentOffsetYWithId:(id)uiView;

- (jint)getContentHeightWithId:(id)uiView;

- (jint)getContentWidthWithId:(id)uiView;

- (jint)getThumbWidth;

- (void)setMinimumWithInt:(jint)i;

- (void)setCustomMakeFrameForChildWidgetWithInt:(jint)range
                                        withInt:(jint)rangeDiff
                                        withInt:(jint)l
                                        withInt:(jint)t
                                        withInt:(jint)r
                                        withInt:(jint)b;

- (void)updateContentSizeWithInt:(jint)rangeDiff;

- (jint)getScrollBarMaxWithId:(id)view
                    withFloat:(jfloat)scrollBarDimen;

@end

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, recyclerView_, ADXRecyclerView *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, scrollProvider_, id)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, scrollProviderType_, ASRecyclerViewImpl_ScrollProviderType *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, adapter_, ADXRecyclerView_Adapter *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, headerTemplate_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, footerTemplate_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, viewHolderIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, headerViewHolderIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, footerViewHolderIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, sectionMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, itemConfigMap_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, builder_, ASRecyclerViewImpl_RecyclerViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, bean_, ASRecyclerViewImpl_RecyclerViewBean *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, paramsBuilder_, ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, paramsBean_, ASRecyclerViewImpl_RecyclerViewParamsBean *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl, recyclerWrapperView_, id)

__attribute__((unused)) static void ASRecyclerViewImpl_setWidgetOnNativeClass(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_createLayoutParamsWithADView_(ASRecyclerViewImpl *self, ADView *view);

__attribute__((unused)) static ADXRecyclerView_LayoutParams *ASRecyclerViewImpl_getLayoutParamsWithADView_(ASRecyclerViewImpl *self, ADView *view);

__attribute__((unused)) static void ASRecyclerViewImpl_initScrollBars(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setScrollBarIncrementWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_handleScroll(ASRecyclerViewImpl *self);

__attribute__((unused)) static jfloat ASRecyclerViewImpl_getScrollBarDimenWithInt_withInt_(ASRecyclerViewImpl *self, jint range, jint extent);

__attribute__((unused)) static void ASRecyclerViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASRecyclerViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static jint ASRecyclerViewImpl_getExtent(ASRecyclerViewImpl *self);

__attribute__((unused)) static jint ASRecyclerViewImpl_getOffset(ASRecyclerViewImpl *self);

__attribute__((unused)) static jint ASRecyclerViewImpl_getRange(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRecyclerViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASRecyclerViewImpl_setOnScrollStateChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRecyclerViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASRecyclerViewImpl_nativeCreateRecycleViewWithJavaUtilMap_(ASRecyclerViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRecyclerViewImpl_setLayoutManagerWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_reloadTable(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setViewHolderIdsWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_setSpanCountWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_setOrientationWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static jint ASRecyclerViewImpl_getOrientation(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setLayoutWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_createSectionsWithASRecyclerViewImpl_GroupieAdapter_(ASRecyclerViewImpl *self, ASRecyclerViewImpl_GroupieAdapter *groupieAdapter);

__attribute__((unused)) static void ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(ASRecyclerViewImpl *self, id group, id sectionObj, ASLoopParam *pLoopParam);

__attribute__((unused)) static void ASRecyclerViewImpl_createExpandableWithJavaUtilMap_withADXSection_withASLoopParam_(ASRecyclerViewImpl *self, id<JavaUtilMap> sectionMap, ADXSection *section, ASLoopParam *pLoopParam);

__attribute__((unused)) static void ASRecyclerViewImpl_addSectionWithId_withId_withASLoopParam_(ASRecyclerViewImpl *self, id group, id sectionObj, ASLoopParam *loopParam);

__attribute__((unused)) static void ASRecyclerViewImpl_createItemsWithJavaUtilMap_withADXSection_withASLoopParam_(ASRecyclerViewImpl *self, id<JavaUtilMap> sectionMap, ADXSection *section, ASLoopParam *pLoopParam);

__attribute__((unused)) static void ASRecyclerViewImpl_createItemWithADXSection_withJavaUtilMap_withASLoopParam_withId_(ASRecyclerViewImpl *self, ADXSection *section, id<JavaUtilMap> itemMap, ASLoopParam *pLoopParam, id myitem);

__attribute__((unused)) static void ASRecyclerViewImpl_createFooterWithASLoopParam_withADXSection_withJavaUtilMap_(ASRecyclerViewImpl *self, ASLoopParam *loopParam, ADXSection *section, id<JavaUtilMap> sectionMap);

__attribute__((unused)) static void ASRecyclerViewImpl_createHeaderWithASLoopParam_withADXSection_withJavaUtilMap_(ASRecyclerViewImpl *self, ASLoopParam *loopParam, ADXSection *section, id<JavaUtilMap> sectionMap);

__attribute__((unused)) static void ASRecyclerViewImpl_addSectionItemWithNSString_withNSString_withId_(ASRecyclerViewImpl *self, NSString *sectionId, NSString *itemConfigId, id item);

__attribute__((unused)) static void ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(ASRecyclerViewImpl *self, ASRecyclerViewImpl_SectionHolder *sectionHolder);

__attribute__((unused)) static void ASRecyclerViewImpl_removeSectionItemWithNSString_withNSString_withNSString_(ASRecyclerViewImpl *self, NSString *sectionId, NSString *itemConfigId, NSString *itemId);

__attribute__((unused)) static void ASRecyclerViewImpl_removeAllItemsWithNSString_(ASRecyclerViewImpl *self, NSString *sectionId);

__attribute__((unused)) static void ASRecyclerViewImpl_updateSectionItemWithNSString_withNSString_withNSString_withId_(ASRecyclerViewImpl *self, NSString *sectionId, NSString *itemConfigId, NSString *itemId, id newData);

__attribute__((unused)) static void ASRecyclerViewImpl_scrollToPositionWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_scrollToTopWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_scrollToEndWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_setStackFromBottomWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_setReverseLayoutWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static jboolean ASRecyclerViewImpl_isReverseLayout(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setFooterDisabledWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_setHeaderDisabledWithId_(ASRecyclerViewImpl *self, id objValue);

__attribute__((unused)) static void ASRecyclerViewImpl_nativeCreateWithJavaUtilMap_(ASRecyclerViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRecyclerViewImpl_stopScrollEndWithId_(ASRecyclerViewImpl *self, id scrollView);

__attribute__((unused)) static void ASRecyclerViewImpl_stopScrollStartWithId_(ASRecyclerViewImpl *self, id scrollView);

__attribute__((unused)) static void ASRecyclerViewImpl_updateContentSizeWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView);

__attribute__((unused)) static void ASRecyclerViewImpl_applyTransformWithId_withId_(ASRecyclerViewImpl *self, id uiView, id view);

__attribute__((unused)) static void ASRecyclerViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRecyclerViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASRecyclerViewImpl_showVerticalScrollBar(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_showHorizontalScrollBar(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setCustomHandleScrollWithInt_withInt_withInt_withInt_(ASRecyclerViewImpl *self, jint dpos, jint range, jint offset, jint extent);

__attribute__((unused)) static jint ASRecyclerViewImpl_setSelectionWithInt_withInt_withId_(ASRecyclerViewImpl *self, jint percoffset, jint offset, id view);

__attribute__((unused)) static void ASRecyclerViewImpl_setContentSizeWidthWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView);

__attribute__((unused)) static void ASRecyclerViewImpl_setContentSizeHeightWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView);

__attribute__((unused)) static void ASRecyclerViewImpl_setMaximumWithInt_(ASRecyclerViewImpl *self, jint maxiumum);

__attribute__((unused)) static jint ASRecyclerViewImpl_getMaximum(ASRecyclerViewImpl *self);

__attribute__((unused)) static jint ASRecyclerViewImpl_getSelection(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_flashScrollIndicatorsWithId_(ASRecyclerViewImpl *self, id uiView);

__attribute__((unused)) static void ASRecyclerViewImpl_setContentOffsetXWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView);

__attribute__((unused)) static void ASRecyclerViewImpl_setContentOffsetYWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView);

__attribute__((unused)) static jint ASRecyclerViewImpl_getContentOffsetXWithId_(ASRecyclerViewImpl *self, id uiView);

__attribute__((unused)) static jint ASRecyclerViewImpl_getContentOffsetYWithId_(ASRecyclerViewImpl *self, id uiView);

__attribute__((unused)) static jint ASRecyclerViewImpl_getContentHeightWithId_(ASRecyclerViewImpl *self, id uiView);

__attribute__((unused)) static jint ASRecyclerViewImpl_getContentWidthWithId_(ASRecyclerViewImpl *self, id uiView);

__attribute__((unused)) static jint ASRecyclerViewImpl_getThumbWidth(ASRecyclerViewImpl *self);

__attribute__((unused)) static void ASRecyclerViewImpl_setMinimumWithInt_(ASRecyclerViewImpl *self, jint i);

__attribute__((unused)) static void ASRecyclerViewImpl_setCustomMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_withInt_withInt_(ASRecyclerViewImpl *self, jint range, jint rangeDiff, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASRecyclerViewImpl_updateContentSizeWithInt_(ASRecyclerViewImpl *self, jint rangeDiff);

__attribute__((unused)) static jint ASRecyclerViewImpl_getScrollBarMaxWithId_withFloat_(ASRecyclerViewImpl *self, id view, jfloat scrollBarDimen);

@interface ASRecyclerViewImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASRecyclerViewImpl_RecyclerViewExt () {
 @public
  __unsafe_unretained ASRecyclerViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_RecyclerViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_RecyclerViewExt, onLayoutEvent_, ASOnLayoutEvent *)

__attribute__((unused)) static void ASRecyclerViewImpl_ScrollProviderType_initWithNSString_withInt_(ASRecyclerViewImpl_ScrollProviderType *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static ASRecyclerViewImpl_ScrollProviderType *new_ASRecyclerViewImpl_ScrollProviderType_initWithNSString_withInt_(NSString *__name, jint __ordinal) NS_RETURNS_RETAINED;

@interface ASRecyclerViewImpl_ListAdapter () {
 @public
  ASRecyclerViewImpl *this$0_;
}

- (jboolean)isFooterWithInt:(jint)position;

- (jboolean)isHeaderWithInt:(jint)position;

@end

__attribute__((unused)) static jboolean ASRecyclerViewImpl_ListAdapter_isFooterWithInt_(ASRecyclerViewImpl_ListAdapter *self, jint position);

__attribute__((unused)) static jboolean ASRecyclerViewImpl_ListAdapter_isHeaderWithInt_(ASRecyclerViewImpl_ListAdapter *self, jint position);

@interface ASRecyclerViewImpl_1 : ADXGridLayoutManager_SpanSizeLookup {
 @public
  ASRecyclerViewImpl *this$0_;
}

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$;

- (jint)getSpanSizeWithInt:(jint)position;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRecyclerViewImpl_1)

__attribute__((unused)) static void ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_1 *self, ASRecyclerViewImpl *outer$);

__attribute__((unused)) static ASRecyclerViewImpl_1 *new_ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRecyclerViewImpl_1 *create_ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$);

@interface ASRecyclerViewImpl_2 : ADXGridLayoutManager_SpanSizeLookup {
 @public
  ASRecyclerViewImpl *this$0_;
}

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$;

- (jint)getSpanSizeWithInt:(jint)position;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRecyclerViewImpl_2)

__attribute__((unused)) static void ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_2 *self, ASRecyclerViewImpl *outer$);

__attribute__((unused)) static ASRecyclerViewImpl_2 *new_ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRecyclerViewImpl_2 *create_ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$);

@interface ASRecyclerViewImpl_GenericItem () {
 @public
  ASRecyclerViewImpl *this$0_;
  id<ASIWidget> template__;
  ASLoopParam *loopParam_;
  id<JavaUtilList> viewHolderIds_;
  NSString *layout_;
  jint margin_;
  jboolean modified_;
}

@end

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericItem, template__, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericItem, loopParam_, ASLoopParam *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericItem, viewHolderIds_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericItem, layout_, NSString *)

__attribute__((unused)) static void ASRecyclerViewImpl_GenericItem_bindWithASRecyclerViewImpl_GroupieViewHolder_withInt_(ASRecyclerViewImpl_GenericItem *self, ASRecyclerViewImpl_GroupieViewHolder *viewHolder, jint position);

@interface ASRecyclerViewImpl_GenericExpandableItem () {
 @public
  __unsafe_unretained ASRecyclerViewImpl *this$1_;
  ADXExpandableGroup *expandableGroup_;
  id<JavaUtilList> onClickIds_;
}

@end

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericExpandableItem, expandableGroup_, ADXExpandableGroup *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericExpandableItem, onClickIds_, id<JavaUtilList>)

@interface ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener : NSObject < ADView_OnClickListener > {
 @public
  __unsafe_unretained ASRecyclerViewImpl_GenericExpandableItem *this$0_;
  jint position_;
  id<ASIWidget> widget_;
}

- (instancetype)initWithASRecyclerViewImpl_GenericExpandableItem:(ASRecyclerViewImpl_GenericExpandableItem *)outer$
                                                         withInt:(jint)position
                                                   withASIWidget:(id<ASIWidget>)widget;

- (void)onClickWithADView:(ADView *)arg0;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener)

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener, widget_, id<ASIWidget>)

__attribute__((unused)) static void ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *self, ASRecyclerViewImpl_GenericExpandableItem *outer$, jint position, id<ASIWidget> widget);

__attribute__((unused)) static ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *new_ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(ASRecyclerViewImpl_GenericExpandableItem *outer$, jint position, id<ASIWidget> widget) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *create_ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(ASRecyclerViewImpl_GenericExpandableItem *outer$, jint position, id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener)

@interface ASRecyclerViewImpl_GroupieAdapter () {
 @public
  ASRecyclerViewImpl *this$0_;
}

@end

@interface ASRecyclerViewImpl_OnScrollListener : ADXRecyclerView_OnScrollListener < ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onScrollStateChangedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                        withInt:(jint)newState;

- (void)onScrolledWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                              withInt:(jint)dx
                              withInt:(jint)dy;

- (id<JavaUtilMap>)getOnScrolledEventObjWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                                    withInt:(jint)dx
                                                    withInt:(jint)dy;

- (id<JavaUtilMap>)getOnScrollStateChangeEventObjWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                                             withInt:(jint)newState;

@end

J2OBJC_EMPTY_STATIC_INIT(ASRecyclerViewImpl_OnScrollListener)

J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_OnScrollListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_OnScrollListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_OnScrollListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASRecyclerViewImpl_OnScrollListener, action_, NSString *)

__attribute__((unused)) static void ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(ASRecyclerViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASRecyclerViewImpl_OnScrollListener *new_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRecyclerViewImpl_OnScrollListener *create_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(ASRecyclerViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASRecyclerViewImpl_OnScrollListener *new_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASRecyclerViewImpl_OnScrollListener *create_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASRecyclerViewImpl_OnScrollListener)

@interface ASRecyclerViewImpl_RecyclerViewCommandBuilder () {
 @public
  ASRecyclerViewImpl *this$0_;
}

@end

@interface ASRecyclerViewImpl_RecyclerViewBean () {
 @public
  ASRecyclerViewImpl *this$0_;
}

@end

@interface ASRecyclerViewImpl_UIScrollViewDelegate () {
 @public
  __unsafe_unretained ASRecyclerViewImpl *this$0_;
}

@end

NSString *ASRecyclerViewImpl_LOCAL_NAME = @"androidx.recyclerview.widget.RecyclerView";
NSString *ASRecyclerViewImpl_GROUP_NAME = @"androidx.recyclerview.widget.RecyclerView";

@implementation ASRecyclerViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.recyclerview.widget.RecyclerView.orientation", new_ASRecyclerViewImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"orientation"])) withTypeWithNSString:@"androidx.recyclerview.widget.RecyclerView.orientation"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onScrollStateChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onScrolled"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"headerDisabled"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"footerDisabled"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutManager"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"viewHolderIds"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"spanCount"])) withTypeWithNSString:@"int"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout"])) withTypeWithNSString:@"string"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"addSectionItem"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"removeSectionItem"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"removeAllItems"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateSectionItem"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"stackFromEnd"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:101]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"reverseLayout"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:101]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollToEnd"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollToTop"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollToPosition"])) withTypeWithNSString:@"int"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRecyclerViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASRecyclerViewImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASRecyclerViewImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASRecyclerViewImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  recyclerView_ = new_ASRecyclerViewImpl_RecyclerViewExt_initWithASRecyclerViewImpl_(self);
  ASRecyclerViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASRecyclerViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASRecyclerViewImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return recyclerView_;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASRecyclerViewImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXRecyclerView *) nil_chk(recyclerView_)) addViewWithADView:view];
    }
    else {
      [((ADXRecyclerView *) nil_chk(recyclerView_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_(recyclerWrapperView_, [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASRecyclerViewImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXRecyclerView_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASRecyclerViewImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXRecyclerView_LayoutParams *layoutParams = ASRecyclerViewImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADXRecyclerView_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXRecyclerView_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXRecyclerView_LayoutParams *layoutParams = ASRecyclerViewImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXRecyclerView_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXRecyclerView_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASRecyclerViewImpl_RecyclerViewExt *) nil_chk(((ASRecyclerViewImpl_RecyclerViewExt *) cast_chk(recyclerView_, [ASRecyclerViewImpl_RecyclerViewExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"orientation", @"onScrollStateChange", @"onScrolled", @"headerDisabled", @"footerDisabled", @"layoutManager", @"viewHolderIds", @"spanCount", @"layout", @"addSectionItem", @"removeSectionItem", @"removeAllItems", @"updateSectionItem", @"stackFromEnd", @"reverseLayout", @"scrollToEnd", @"scrollToTop", @"scrollToPosition" }, 18)) {
    case 0:
    {
      ASRecyclerViewImpl_setOrientationWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASRecyclerViewImpl_setOnScrollStateChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 2:
    {
      ASRecyclerViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 3:
    {
      ASRecyclerViewImpl_setHeaderDisabledWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASRecyclerViewImpl_setFooterDisabledWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASRecyclerViewImpl_setLayoutManagerWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASRecyclerViewImpl_setViewHolderIdsWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASRecyclerViewImpl_setSpanCountWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASRecyclerViewImpl_setLayoutWithId_(self, objValue);
    }
    break;
    case 9:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
        id itemConfigId = [self quickConvertWithId:[data getWithId:@"itemConfigId"] withNSString:@"string"];
        id item = [self quickConvertWithId:[data getWithId:@"item"] withNSString:@"object"];
        ASRecyclerViewImpl_addSectionItemWithNSString_withNSString_withId_(self, (NSString *) cast_chk(sectionId, [NSString class]), (NSString *) cast_chk(itemConfigId, [NSString class]), item);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
          id itemConfigId = [self quickConvertWithId:[data getWithId:@"itemConfigId"] withNSString:@"string"];
          id item = [self quickConvertWithId:[data getWithId:@"item"] withNSString:@"object"];
          ASRecyclerViewImpl_addSectionItemWithNSString_withNSString_withId_(self, (NSString *) cast_chk(sectionId, [NSString class]), (NSString *) cast_chk(itemConfigId, [NSString class]), item);
        }
      }
    }
    break;
    case 10:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
        id itemConfigId = [self quickConvertWithId:[data getWithId:@"itemConfigId"] withNSString:@"string"];
        id itemId = [self quickConvertWithId:[data getWithId:@"itemId"] withNSString:@"string"];
        ASRecyclerViewImpl_removeSectionItemWithNSString_withNSString_withNSString_(self, (NSString *) cast_chk(sectionId, [NSString class]), (NSString *) cast_chk(itemConfigId, [NSString class]), (NSString *) cast_chk(itemId, [NSString class]));
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
          id itemConfigId = [self quickConvertWithId:[data getWithId:@"itemConfigId"] withNSString:@"string"];
          id itemId = [self quickConvertWithId:[data getWithId:@"itemId"] withNSString:@"string"];
          ASRecyclerViewImpl_removeSectionItemWithNSString_withNSString_withNSString_(self, (NSString *) cast_chk(sectionId, [NSString class]), (NSString *) cast_chk(itemConfigId, [NSString class]), (NSString *) cast_chk(itemId, [NSString class]));
        }
      }
    }
    break;
    case 11:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
        ASRecyclerViewImpl_removeAllItemsWithNSString_(self, (NSString *) cast_chk(sectionId, [NSString class]));
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
          ASRecyclerViewImpl_removeAllItemsWithNSString_(self, (NSString *) cast_chk(sectionId, [NSString class]));
        }
      }
    }
    break;
    case 12:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
        id itemConfigId = [self quickConvertWithId:[data getWithId:@"itemConfigId"] withNSString:@"string"];
        id itemId = [self quickConvertWithId:[data getWithId:@"itemId"] withNSString:@"string"];
        id item = [self quickConvertWithId:[data getWithId:@"item"] withNSString:@"object"];
        ASRecyclerViewImpl_updateSectionItemWithNSString_withNSString_withNSString_withId_(self, (NSString *) cast_chk(sectionId, [NSString class]), (NSString *) cast_chk(itemConfigId, [NSString class]), (NSString *) cast_chk(itemId, [NSString class]), item);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id sectionId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"sectionId"] withNSString:@"string"];
          id itemConfigId = [self quickConvertWithId:[data getWithId:@"itemConfigId"] withNSString:@"string"];
          id itemId = [self quickConvertWithId:[data getWithId:@"itemId"] withNSString:@"string"];
          id item = [self quickConvertWithId:[data getWithId:@"item"] withNSString:@"object"];
          ASRecyclerViewImpl_updateSectionItemWithNSString_withNSString_withNSString_withId_(self, (NSString *) cast_chk(sectionId, [NSString class]), (NSString *) cast_chk(itemConfigId, [NSString class]), (NSString *) cast_chk(itemId, [NSString class]), item);
        }
      }
    }
    break;
    case 13:
    {
      ASRecyclerViewImpl_setStackFromBottomWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASRecyclerViewImpl_setReverseLayoutWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASRecyclerViewImpl_scrollToEndWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASRecyclerViewImpl_scrollToTopWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASRecyclerViewImpl_scrollToPositionWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASRecyclerViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"reverseLayout" }, 1)) {
    case 0:
    {
      return JavaLangBoolean_valueOfWithBoolean_(ASRecyclerViewImpl_isReverseLayout(self));
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)addObjectWithASLoopParam:(ASLoopParam *)childModel
                    withNSString:(NSString *)modelIdPath
                         withInt:(jint)index
                    withNSString:(NSString *)currentLoopVar {
  NSString *id_ = nil;
  if (modelIdPath != nil) {
    id_ = ASPluginInvoker_getStringWithId_([self getModelByPathWithNSString:modelIdPath withId:[((ASLoopParam *) nil_chk(childModel)) getWithId:currentLoopVar]]);
  }
  else {
    id_ = [((JavaUtilUUID *) nil_chk(JavaUtilUUID_randomUUID())) description];
  }
  if (![((id<JavaUtilList>) nil_chk(ids_)) containsWithId:id_]) {
    if (index == -1) {
      [((id<JavaUtilList>) nil_chk(ids_)) addWithId:id_];
      [((id<JavaUtilList>) nil_chk(dataList_)) addWithId:childModel];
    }
    else {
      [((id<JavaUtilList>) nil_chk(ids_)) addWithInt:index withId:id_];
      [((id<JavaUtilList>) nil_chk(dataList_)) addWithInt:index withId:childModel];
    }
  }
  else {
    (void) [((id<JavaUtilList>) nil_chk(dataList_)) setWithInt:[((id<JavaUtilList>) nil_chk(ids_)) indexOfWithId:id_] withId:childModel];
  }
  ASRecyclerViewImpl_reloadTable(self);
}

- (void)addAllModelWithId:(id)objValue {
  disableUpdate_ = true;
  [super addAllModelWithId:objValue];
  disableUpdate_ = false;
  ASRecyclerViewImpl_reloadTable(self);
}

- (jboolean)removeWithInt:(jint)index {
  if (index + 1 <= [((id<JavaUtilList>) nil_chk(ids_)) size]) {
    (void) [((id<JavaUtilList>) nil_chk(ids_)) removeWithInt:index];
  }
  if (index + 1 <= [((id<JavaUtilList>) nil_chk(dataList_)) size]) {
    (void) [((id<JavaUtilList>) nil_chk(dataList_)) removeWithInt:index];
  }
  ASRecyclerViewImpl_reloadTable(self);
  return true;
}

- (jboolean)areWidgetItemsRecycled {
  return true;
}

- (void)clear {
  [((id<JavaUtilList>) nil_chk(ids_)) clear];
  [((id<JavaUtilList>) nil_chk(dataList_)) clear];
  ASRecyclerViewImpl_reloadTable(self);
}

- (void)clearModel {
  [((id<JavaUtilList>) nil_chk(ids_)) clear];
  [((id<JavaUtilList>) nil_chk(dataList_)) clear];
}

- (void)notifyDataSetChanged {
  disableUpdate_ = true;
  [super notifyDataSetChanged];
  disableUpdate_ = false;
  ASRecyclerViewImpl_reloadTable(self);
}

- (void)initScrollBars {
  ASRecyclerViewImpl_initScrollBars(self);
}

- (void)setScrollBarIncrementWithId:(id)objValue {
  ASRecyclerViewImpl_setScrollBarIncrementWithId_(self, objValue);
}

- (void)handleScroll {
  ASRecyclerViewImpl_handleScroll(self);
}

- (jfloat)getScrollBarDimenWithInt:(jint)range
                           withInt:(jint)extent {
  return ASRecyclerViewImpl_getScrollBarDimenWithInt_withInt_(self, range, extent);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASRecyclerViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (jint)getExtent {
  return ASRecyclerViewImpl_getExtent(self);
}

- (jint)getOffset {
  return ASRecyclerViewImpl_getOffset(self);
}

- (jint)getRange {
  return ASRecyclerViewImpl_getRange(self);
}

- (void)setOnScrollWithASWidgetAttribute:(ASWidgetAttribute *)key
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
               withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASRecyclerViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setOnScrollStateChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                       withNSString:(NSString *)strValue
                                             withId:(id)objValue
                          withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASRecyclerViewImpl_setOnScrollStateChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)nativeCreateRecycleViewWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRecyclerViewImpl_nativeCreateRecycleViewWithJavaUtilMap_(self, params);
}

- (void)setLayoutManagerWithId:(id)objValue {
  ASRecyclerViewImpl_setLayoutManagerWithId_(self, objValue);
}

- (void)reloadTable {
  ASRecyclerViewImpl_reloadTable(self);
}

- (void)setViewHolderIdsWithId:(id)objValue {
  ASRecyclerViewImpl_setViewHolderIdsWithId_(self, objValue);
}

- (void)setSpanCountWithId:(id)objValue {
  ASRecyclerViewImpl_setSpanCountWithId_(self, objValue);
}

- (void)setOrientationWithId:(id)objValue {
  ASRecyclerViewImpl_setOrientationWithId_(self, objValue);
}

- (jint)getOrientation {
  return ASRecyclerViewImpl_getOrientation(self);
}

- (jboolean)isHorizontal {
  return ASRecyclerViewImpl_getOrientation(self) == ADXRecyclerView_HORIZONTAL;
}

- (void)setLayoutWithId:(id)objValue {
  ASRecyclerViewImpl_setLayoutWithId_(self, objValue);
}

- (void)createSectionsWithASRecyclerViewImpl_GroupieAdapter:(ASRecyclerViewImpl_GroupieAdapter *)groupieAdapter {
  ASRecyclerViewImpl_createSectionsWithASRecyclerViewImpl_GroupieAdapter_(self, groupieAdapter);
}

- (void)createSectionsWithId:(id)group
                      withId:(id)sectionObj
             withASLoopParam:(ASLoopParam *)pLoopParam {
  ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(self, group, sectionObj, pLoopParam);
}

- (void)createExpandableWithJavaUtilMap:(id<JavaUtilMap>)sectionMap
                         withADXSection:(ADXSection *)section
                        withASLoopParam:(ASLoopParam *)pLoopParam {
  ASRecyclerViewImpl_createExpandableWithJavaUtilMap_withADXSection_withASLoopParam_(self, sectionMap, section, pLoopParam);
}

- (void)addSectionWithId:(id)group
                  withId:(id)sectionObj
         withASLoopParam:(ASLoopParam *)loopParam {
  ASRecyclerViewImpl_addSectionWithId_withId_withASLoopParam_(self, group, sectionObj, loopParam);
}

- (void)createItemsWithJavaUtilMap:(id<JavaUtilMap>)sectionMap
                    withADXSection:(ADXSection *)section
                   withASLoopParam:(ASLoopParam *)pLoopParam {
  ASRecyclerViewImpl_createItemsWithJavaUtilMap_withADXSection_withASLoopParam_(self, sectionMap, section, pLoopParam);
}

- (void)createItemWithADXSection:(ADXSection *)section
                 withJavaUtilMap:(id<JavaUtilMap>)itemMap
                 withASLoopParam:(ASLoopParam *)pLoopParam
                          withId:(id)myitem {
  ASRecyclerViewImpl_createItemWithADXSection_withJavaUtilMap_withASLoopParam_withId_(self, section, itemMap, pLoopParam, myitem);
}

- (void)createFooterWithASLoopParam:(ASLoopParam *)loopParam
                     withADXSection:(ADXSection *)section
                    withJavaUtilMap:(id<JavaUtilMap>)sectionMap {
  ASRecyclerViewImpl_createFooterWithASLoopParam_withADXSection_withJavaUtilMap_(self, loopParam, section, sectionMap);
}

- (void)createHeaderWithASLoopParam:(ASLoopParam *)loopParam
                     withADXSection:(ADXSection *)section
                    withJavaUtilMap:(id<JavaUtilMap>)sectionMap {
  ASRecyclerViewImpl_createHeaderWithASLoopParam_withADXSection_withJavaUtilMap_(self, loopParam, section, sectionMap);
}

- (void)setItemViewParamsWithASIWidget:(id<ASIWidget>)widget
                            withADView:(ADView *)itemView {
  jint itemViewWidth = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[((id<ASIWidget>) nil_chk(widget)) getAttributeValueWithNSString:@"layout_width"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  jint itemViewHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[widget getAttributeValueWithNSString:@"layout_height"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  ADViewGroup_LayoutParams *lp = new_ADXGridLayoutManager_LayoutParams_initWithInt_withInt_(itemViewWidth, itemViewHeight);
  jint itemMargin = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[widget getAttributeValueWithNSString:@"layout_margin"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  if (itemMargin != -2) {
    ASViewGroupImpl_setMarginWithId_withId_withASIWidget_(JavaLangInteger_valueOfWithInt_(itemMargin), lp, widget);
  }
  jint itemMarginTop = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[widget getAttributeValueWithNSString:@"layout_marginTop"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  jint itemMarginBottom = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[widget getAttributeValueWithNSString:@"layout_marginBottom"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  jint itemMarginLeft = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[widget getAttributeValueWithNSString:@"layout_marginStart"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  jint itemMarginRight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_dimension))) convertFromWithId:[widget getAttributeValueWithNSString:@"layout_marginEnd"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  if (itemMarginTop != -2) {
    ASViewGroupImpl_setTopMarginWithId_withId_(JavaLangInteger_valueOfWithInt_(itemMarginTop), lp);
  }
  if (itemMarginBottom != -2) {
    ASViewGroupImpl_setBottomMarginWithId_withId_(JavaLangInteger_valueOfWithInt_(itemMarginBottom), lp);
  }
  if (itemMarginLeft != -2) {
    ASViewGroupImpl_setStartMarginWithId_withId_withASIWidget_(JavaLangInteger_valueOfWithInt_(itemMarginLeft), lp, widget);
  }
  if (itemMarginRight != -2) {
    ASViewGroupImpl_setEndMarginWithId_withId_withASIWidget_(JavaLangInteger_valueOfWithInt_(itemMarginRight), lp, widget);
  }
  [((ADView *) nil_chk(itemView)) setLayoutParamsWithADViewGroup_LayoutParams:lp];
}

- (void)addSectionItemWithNSString:(NSString *)sectionId
                      withNSString:(NSString *)itemConfigId
                            withId:(id)item {
  ASRecyclerViewImpl_addSectionItemWithNSString_withNSString_withId_(self, sectionId, itemConfigId, item);
}

- (void)notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder:(ASRecyclerViewImpl_SectionHolder *)sectionHolder {
  ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(self, sectionHolder);
}

- (id<JavaUtilList>)getChildItemsWithASRecyclerViewImpl_SectionHolder:(ASRecyclerViewImpl_SectionHolder *)sectionHolder
                                                      withJavaUtilMap:(id<JavaUtilMap>)itemConfig {
  NSString *path = ASPluginInvoker_getStringWithId_([((id<JavaUtilMap>) nil_chk(itemConfig)) getWithId:@"@itemsPath"]);
  ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
  id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varName_ withASModelScope:modelFromScopeHolder->varScope_ withASLoopParam:((ASRecyclerViewImpl_SectionHolder *) nil_chk(sectionHolder))->loopParam_];
  obj = [self getModelByPathWithNSString:modelFromScopeHolder->varPath_ withId:obj];
  id<JavaUtilList> list = ASPluginInvoker_getListWithId_(obj);
  return list;
}

- (void)removeSectionItemWithNSString:(NSString *)sectionId
                         withNSString:(NSString *)itemConfigId
                         withNSString:(NSString *)itemId {
  ASRecyclerViewImpl_removeSectionItemWithNSString_withNSString_withNSString_(self, sectionId, itemConfigId, itemId);
}

- (void)removeAllItemsWithNSString:(NSString *)sectionId {
  ASRecyclerViewImpl_removeAllItemsWithNSString_(self, sectionId);
}

- (void)updateSectionItemWithNSString:(NSString *)sectionId
                         withNSString:(NSString *)itemConfigId
                         withNSString:(NSString *)itemId
                               withId:(id)newData {
  ASRecyclerViewImpl_updateSectionItemWithNSString_withNSString_withNSString_withId_(self, sectionId, itemConfigId, itemId, newData);
}

- (void)scrollToPositionWithId:(id)objValue {
  ASRecyclerViewImpl_scrollToPositionWithId_(self, objValue);
}

- (void)scrollToTopWithId:(id)objValue {
  ASRecyclerViewImpl_scrollToTopWithId_(self, objValue);
}

- (void)scrollToEndWithId:(id)objValue {
  ASRecyclerViewImpl_scrollToEndWithId_(self, objValue);
}

- (void)setStackFromBottomWithId:(id)objValue {
  ASRecyclerViewImpl_setStackFromBottomWithId_(self, objValue);
}

- (void)setReverseLayoutWithId:(id)objValue {
  ASRecyclerViewImpl_setReverseLayoutWithId_(self, objValue);
}

- (jboolean)isReverseLayout {
  return ASRecyclerViewImpl_isReverseLayout(self);
}

- (void)invalidateChildIfRequiredWithASIWidget:(id<ASIWidget>)childWidget {
  if ([childWidget isKindOfClass:[ASRecyclerViewImpl class]]) {
    [((ASRecyclerViewImpl *) nil_chk(((ASRecyclerViewImpl *) childWidget))) notifyDataSetChanged];
  }
}

- (void)setFooterDisabledWithId:(id)objValue {
  ASRecyclerViewImpl_setFooterDisabledWithId_(self, objValue);
}

- (void)setHeaderDisabledWithId:(id)objValue {
  ASRecyclerViewImpl_setHeaderDisabledWithId_(self, objValue);
}

- (void)applyModelToWidget {
  [super applyModelToWidget];
  if ([adapter_ isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
    [((ASRecyclerViewImpl_GroupieAdapter *) nil_chk(((ASRecyclerViewImpl_GroupieAdapter *) adapter_))) clear];
    ASRecyclerViewImpl_createSectionsWithASRecyclerViewImpl_GroupieAdapter_(self, (ASRecyclerViewImpl_GroupieAdapter *) adapter_);
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXRecyclerView *) nil_chk(recyclerView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASRecyclerViewImpl_RecyclerViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASRecyclerViewImpl_RecyclerViewBean_initWithASRecyclerViewImpl_(self);
  }
  return bean_;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASRecyclerViewImpl_RecyclerViewCommandBuilder_initWithASRecyclerViewImpl_(self);
  }
  return builder_;
}

- (ASRecyclerViewImpl_RecyclerViewParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASRecyclerViewImpl_RecyclerViewParamsBean_initWithASRecyclerViewImpl_(self);
  }
  return paramsBean_;
}

- (ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder_initWithASRecyclerViewImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRecyclerViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)createView {
  ASUIView* uiView = [ASUIView new];
  uiView.userInteractionEnabled=YES;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)nativescrollViewCreateWithBoolean:(jboolean)scrollIndicator
                            withBoolean:(jboolean)userInteractionEnabled
                            withBoolean:(jboolean)infiniteScroll {
  ASUIScrollView* uiView = [ASUIScrollView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView.showsVerticalScrollIndicator=scrollIndicator;
  uiView.showsHorizontalScrollIndicator=NO;
  uiView.scrollEnabled=YES;
  uiView.delaysContentTouches=YES;
  uiView.infiniteScroll=infiniteScroll;
  uiView.userInteractionEnabled=userInteractionEnabled;
  uiView.bounces = NO;
  return uiView;
}

- (void)stopScrollEndWithId:(id)scrollView {
  ASRecyclerViewImpl_stopScrollEndWithId_(self, scrollView);
}

- (void)stopScrollStartWithId:(id)scrollView {
  ASRecyclerViewImpl_stopScrollStartWithId_(self, scrollView);
}

- (void)updateContentSizeWithInt:(jint)range
                          withId:(id)uiView {
  ASRecyclerViewImpl_updateContentSizeWithInt_withId_(self, range, uiView);
}

- (void)applyTransformWithId:(id)uiView
                      withId:(id)view {
  ASRecyclerViewImpl_applyTransformWithId_withId_(self, uiView, view);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASRecyclerViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)showVerticalScrollBar {
  ASRecyclerViewImpl_showVerticalScrollBar(self);
}

- (void)showHorizontalScrollBar {
  ASRecyclerViewImpl_showHorizontalScrollBar(self);
}

- (void)setCustomHandleScrollWithInt:(jint)dpos
                             withInt:(jint)range
                             withInt:(jint)offset
                             withInt:(jint)extent {
  ASRecyclerViewImpl_setCustomHandleScrollWithInt_withInt_withInt_withInt_(self, dpos, range, offset, extent);
}

- (jint)setSelectionWithInt:(jint)percoffset
                    withInt:(jint)offset
                     withId:(id)view {
  return ASRecyclerViewImpl_setSelectionWithInt_withInt_withId_(self, percoffset, offset, view);
}

- (void)setContentSizeWidthWithInt:(jint)range
                            withId:(id)uiView {
  ASRecyclerViewImpl_setContentSizeWidthWithInt_withId_(self, range, uiView);
}

- (void)setContentSizeHeightWithInt:(jint)range
                             withId:(id)uiView {
  ASRecyclerViewImpl_setContentSizeHeightWithInt_withId_(self, range, uiView);
}

- (void)setMaximumWithInt:(jint)maxiumum {
  ASRecyclerViewImpl_setMaximumWithInt_(self, maxiumum);
}

- (jint)getMaximum {
  return ASRecyclerViewImpl_getMaximum(self);
}

- (jint)getSelection {
  return ASRecyclerViewImpl_getSelection(self);
}

- (void)flashScrollIndicatorsWithId:(id)uiView {
  ASRecyclerViewImpl_flashScrollIndicatorsWithId_(self, uiView);
}

- (void)setContentOffsetXWithInt:(jint)range
                          withId:(id)uiView {
  ASRecyclerViewImpl_setContentOffsetXWithInt_withId_(self, range, uiView);
}

- (void)setContentOffsetYWithInt:(jint)range
                          withId:(id)uiView {
  ASRecyclerViewImpl_setContentOffsetYWithInt_withId_(self, range, uiView);
}

- (jint)getContentOffsetXWithId:(id)uiView {
  return ASRecyclerViewImpl_getContentOffsetXWithId_(self, uiView);
}

- (jint)getContentOffsetYWithId:(id)uiView {
  return ASRecyclerViewImpl_getContentOffsetYWithId_(self, uiView);
}

- (jint)getContentHeightWithId:(id)uiView {
  return ASRecyclerViewImpl_getContentHeightWithId_(self, uiView);
}

- (jint)getContentWidthWithId:(id)uiView {
  return ASRecyclerViewImpl_getContentWidthWithId_(self, uiView);
}

- (jint)getThumbWidth {
  return ASRecyclerViewImpl_getThumbWidth(self);
}

- (void)setMinimumWithInt:(jint)i {
  ASRecyclerViewImpl_setMinimumWithInt_(self, i);
}

- (void)setCustomMakeFrameForChildWidgetWithInt:(jint)range
                                        withInt:(jint)rangeDiff
                                        withInt:(jint)l
                                        withInt:(jint)t
                                        withInt:(jint)r
                                        withInt:(jint)b {
  ASRecyclerViewImpl_setCustomMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_withInt_withInt_(self, range, rangeDiff, l, t, r, b);
}

- (void)updateContentSizeOfScrolledProviderWithInt:(jint)range {
  if ([self isHorizontal]) {
    ASRecyclerViewImpl_setContentSizeWidthWithInt_withId_(self, range, scrollProvider_);
  }
  else {
    ASRecyclerViewImpl_setContentSizeHeightWithInt_withId_(self, range, scrollProvider_);
  }
}

- (void)updateContentSizeWithInt:(jint)rangeDiff {
  ASRecyclerViewImpl_updateContentSizeWithInt_(self, rangeDiff);
}

- (jint)getScrollBarMaxWithId:(id)view
                    withFloat:(jfloat)scrollBarDimen {
  return ASRecyclerViewImpl_getScrollBarMaxWithId_withFloat_(self, view, scrollBarDimen);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_LayoutParams;", 0x2, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 21, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x2, 29, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 35, -1, 36, -1, -1 },
    { NULL, "V", 0x2, 37, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, 47, -1, -1 },
    { NULL, "V", 0x2, 48, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 46, -1, 47, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, 52, -1, -1 },
    { NULL, "V", 0x2, 53, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x2, 56, 54, -1, 55, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 63, 64, -1, 65, -1, -1 },
    { NULL, "V", 0x2, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 70, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 76, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 81, 1, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 35, -1, 36, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 83, 84, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 85, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 86, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 89, 90, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 31, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 95, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 96, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 97, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 98, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 99, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 100, 88, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 101, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 102, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 103, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 104, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 107, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 108, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 27, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 109, 110, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(addWithASIWidget:withInt:);
  methods[9].selector = @selector(createLayoutParamsWithADView:);
  methods[10].selector = @selector(getLayoutParamsWithADView:);
  methods[11].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[12].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[13].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[14].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[15].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[16].selector = @selector(asNativeWidget);
  methods[17].selector = @selector(checkIosVersionWithNSString:);
  methods[18].selector = @selector(requestLayout);
  methods[19].selector = @selector(invalidate);
  methods[20].selector = @selector(addObjectWithASLoopParam:withNSString:withInt:withNSString:);
  methods[21].selector = @selector(addAllModelWithId:);
  methods[22].selector = @selector(removeWithInt:);
  methods[23].selector = @selector(areWidgetItemsRecycled);
  methods[24].selector = @selector(clear);
  methods[25].selector = @selector(clearModel);
  methods[26].selector = @selector(notifyDataSetChanged);
  methods[27].selector = @selector(initScrollBars);
  methods[28].selector = @selector(setScrollBarIncrementWithId:);
  methods[29].selector = @selector(handleScroll);
  methods[30].selector = @selector(getScrollBarDimenWithInt:withInt:);
  methods[31].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[32].selector = @selector(getExtent);
  methods[33].selector = @selector(getOffset);
  methods[34].selector = @selector(getRange);
  methods[35].selector = @selector(setOnScrollWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[36].selector = @selector(setOnScrollStateChangeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[37].selector = @selector(nativeCreateRecycleViewWithJavaUtilMap:);
  methods[38].selector = @selector(setLayoutManagerWithId:);
  methods[39].selector = @selector(reloadTable);
  methods[40].selector = @selector(setViewHolderIdsWithId:);
  methods[41].selector = @selector(setSpanCountWithId:);
  methods[42].selector = @selector(setOrientationWithId:);
  methods[43].selector = @selector(getOrientation);
  methods[44].selector = @selector(isHorizontal);
  methods[45].selector = @selector(setLayoutWithId:);
  methods[46].selector = @selector(createSectionsWithASRecyclerViewImpl_GroupieAdapter:);
  methods[47].selector = @selector(createSectionsWithId:withId:withASLoopParam:);
  methods[48].selector = @selector(createExpandableWithJavaUtilMap:withADXSection:withASLoopParam:);
  methods[49].selector = @selector(addSectionWithId:withId:withASLoopParam:);
  methods[50].selector = @selector(createItemsWithJavaUtilMap:withADXSection:withASLoopParam:);
  methods[51].selector = @selector(createItemWithADXSection:withJavaUtilMap:withASLoopParam:withId:);
  methods[52].selector = @selector(createFooterWithASLoopParam:withADXSection:withJavaUtilMap:);
  methods[53].selector = @selector(createHeaderWithASLoopParam:withADXSection:withJavaUtilMap:);
  methods[54].selector = @selector(setItemViewParamsWithASIWidget:withADView:);
  methods[55].selector = @selector(addSectionItemWithNSString:withNSString:withId:);
  methods[56].selector = @selector(notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder:);
  methods[57].selector = @selector(getChildItemsWithASRecyclerViewImpl_SectionHolder:withJavaUtilMap:);
  methods[58].selector = @selector(removeSectionItemWithNSString:withNSString:withNSString:);
  methods[59].selector = @selector(removeAllItemsWithNSString:);
  methods[60].selector = @selector(updateSectionItemWithNSString:withNSString:withNSString:withId:);
  methods[61].selector = @selector(scrollToPositionWithId:);
  methods[62].selector = @selector(scrollToTopWithId:);
  methods[63].selector = @selector(scrollToEndWithId:);
  methods[64].selector = @selector(setStackFromBottomWithId:);
  methods[65].selector = @selector(setReverseLayoutWithId:);
  methods[66].selector = @selector(isReverseLayout);
  methods[67].selector = @selector(invalidateChildIfRequiredWithASIWidget:);
  methods[68].selector = @selector(setFooterDisabledWithId:);
  methods[69].selector = @selector(setHeaderDisabledWithId:);
  methods[70].selector = @selector(applyModelToWidget);
  methods[71].selector = @selector(setIdWithNSString:);
  methods[72].selector = @selector(getPluginWithNSString:);
  methods[73].selector = @selector(getBean);
  methods[74].selector = @selector(getBuilder);
  methods[75].selector = @selector(getParamsBean);
  methods[76].selector = @selector(getParamsBuilder);
  methods[77].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[78].selector = @selector(createView);
  methods[79].selector = @selector(nativescrollViewCreateWithBoolean:withBoolean:withBoolean:);
  methods[80].selector = @selector(stopScrollEndWithId:);
  methods[81].selector = @selector(stopScrollStartWithId:);
  methods[82].selector = @selector(updateContentSizeWithInt:withId:);
  methods[83].selector = @selector(applyTransformWithId:withId:);
  methods[84].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[85].selector = @selector(showVerticalScrollBar);
  methods[86].selector = @selector(showHorizontalScrollBar);
  methods[87].selector = @selector(setCustomHandleScrollWithInt:withInt:withInt:withInt:);
  methods[88].selector = @selector(setSelectionWithInt:withInt:withId:);
  methods[89].selector = @selector(setContentSizeWidthWithInt:withId:);
  methods[90].selector = @selector(setContentSizeHeightWithInt:withId:);
  methods[91].selector = @selector(setMaximumWithInt:);
  methods[92].selector = @selector(getMaximum);
  methods[93].selector = @selector(getSelection);
  methods[94].selector = @selector(flashScrollIndicatorsWithId:);
  methods[95].selector = @selector(setContentOffsetXWithInt:withId:);
  methods[96].selector = @selector(setContentOffsetYWithInt:withId:);
  methods[97].selector = @selector(getContentOffsetXWithId:);
  methods[98].selector = @selector(getContentOffsetYWithId:);
  methods[99].selector = @selector(getContentHeightWithId:);
  methods[100].selector = @selector(getContentWidthWithId:);
  methods[101].selector = @selector(getThumbWidth);
  methods[102].selector = @selector(setMinimumWithInt:);
  methods[103].selector = @selector(setCustomMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:withInt:withInt:);
  methods[104].selector = @selector(updateContentSizeOfScrolledProviderWithInt:);
  methods[105].selector = @selector(updateContentSizeWithInt:);
  methods[106].selector = @selector(getScrollBarMaxWithId:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 111, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 112, -1, -1 },
    { "recyclerView_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "disableUpdate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollProvider_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollBarIncrement_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oldScrollPos_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "prevRange_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollProviderType_", "LASRecyclerViewImpl_ScrollProviderType;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "adapter_", "LADXRecyclerView_Adapter;", .constantValue.asLong = 0, 0x2, -1, -1, 113, -1 },
    { "headerTemplate_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footerTemplate_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewHolderIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 114, -1 },
    { "headerViewHolderIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 114, -1 },
    { "footerViewHolderIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 114, -1 },
    { "layout_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 115, -1 },
    { "spanCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "orientation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sectionMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 116, -1 },
    { "itemConfigMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 117, -1 },
    { "headerDisabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footerDisabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASRecyclerViewImpl_RecyclerViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASRecyclerViewImpl_RecyclerViewCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASRecyclerViewImpl_RecyclerViewParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "recyclerWrapperView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "oldScrollY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldScrollX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "addObject", "LASLoopParam;LNSString;ILNSString;", "addAllModel", "LNSObject;", "remove", "I", "setScrollBarIncrement", "getScrollBarDimen", "nativeMakeFrameForChildWidget", "IIII", "setOnScroll", "setOnScrollStateChange", "nativeCreateRecycleView", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setLayoutManager", "setViewHolderIds", "setSpanCount", "setOrientation", "setLayout", "createSections", "LASRecyclerViewImpl_GroupieAdapter;", "LNSObject;LNSObject;LASLoopParam;", "createExpandable", "LJavaUtilMap;LADXSection;LASLoopParam;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/xwray/groupie/Section;Lcom/ashera/model/LoopParam;)V", "addSection", "createItems", "createItem", "LADXSection;LJavaUtilMap;LASLoopParam;LNSObject;", "(Lcom/xwray/groupie/Section;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/model/LoopParam;Ljava/lang/Object;)V", "createFooter", "LASLoopParam;LADXSection;LJavaUtilMap;", "(Lcom/ashera/model/LoopParam;Lcom/xwray/groupie/Section;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "createHeader", "setItemViewParams", "LASIWidget;LADView;", "addSectionItem", "LNSString;LNSString;LNSObject;", "notifyDataSetChanged", "LASRecyclerViewImpl_SectionHolder;", "getChildItems", "LASRecyclerViewImpl_SectionHolder;LJavaUtilMap;", "(Lcom/ashera/recycleview/RecyclerViewImpl$SectionHolder;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/util/List<Ljava/lang/Object;>;", "removeSectionItem", "LNSString;LNSString;LNSString;", "removeAllItems", "updateSectionItem", "LNSString;LNSString;LNSString;LNSObject;", "scrollToPosition", "scrollToTop", "scrollToEnd", "setStackFromBottom", "setReverseLayout", "invalidateChildIfRequired", "LASIWidget;", "setFooterDisabled", "setHeaderDisabled", "setId", "getPlugin", "nativeCreate", "nativescrollViewCreate", "ZZZ", "stopScrollEnd", "stopScrollStart", "updateContentSize", "ILNSObject;", "applyTransform", "LNSObject;LNSObject;", "postSetAttribute", "setCustomHandleScroll", "setSelection", "IILNSObject;", "setContentSizeWidth", "setContentSizeHeight", "setMaximum", "flashScrollIndicators", "setContentOffsetX", "setContentOffsetY", "getContentOffsetX", "getContentOffsetY", "getContentHeight", "getContentWidth", "setMinimum", "setCustomMakeFrameForChildWidget", "IIIIII", "updateContentSizeOfScrolledProvider", "getScrollBarMax", "LNSObject;F", &ASRecyclerViewImpl_LOCAL_NAME, &ASRecyclerViewImpl_GROUP_NAME, "Landroidx/recyclerview/widget/RecyclerView$Adapter<+Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;", "Ljava/util/List<Ljava/lang/String;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/recycleview/RecyclerViewImpl$SectionHolder;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;", "LASRecyclerViewImpl_Orientation;LASRecyclerViewImpl_RecyclerViewExt;LASRecyclerViewImpl_ScrollProviderType;LASRecyclerViewImpl_ListAdapter;LASRecyclerViewImpl_ViewHolder;LASRecyclerViewImpl_SectionHolder;LASRecyclerViewImpl_GenericExpandableItem;LASRecyclerViewImpl_GenericItem;LASRecyclerViewImpl_GroupieAdapter;LASRecyclerViewImpl_GroupieViewHolder;LASRecyclerViewImpl_OnScrollListener;LASRecyclerViewImpl_RecyclerViewCommandBuilder;LASRecyclerViewImpl_RecyclerViewBean;LASRecyclerViewImpl_RecyclerViewParamsBean;LASRecyclerViewImpl_RecyclerViewCommandParamsBuilder;LASRecyclerViewImpl_UIScrollViewDelegate;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl = { "RecyclerViewImpl", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 107, 30, -1, 118, -1, -1, -1 };
  return &_ASRecyclerViewImpl;
}

@end

void ASRecyclerViewImpl_init(ASRecyclerViewImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRecyclerViewImpl_GROUP_NAME, ASRecyclerViewImpl_LOCAL_NAME);
  self->disableUpdate_ = false;
  self->scrollBarIncrement_ = 20;
  self->oldScrollPos_ = 0;
  self->prevRange_ = -1;
  self->scrollProviderType_ = JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE);
  self->spanCount_ = 0;
  self->orientation_ = ADXRecyclerView_VERTICAL;
  self->sectionMap_ = new_JavaUtilHashMap_init();
  self->itemConfigMap_ = new_JavaUtilHashMap_init();
  self->oldScrollY_ = 0;
  self->oldScrollX_ = 0;
}

ASRecyclerViewImpl *new_ASRecyclerViewImpl_init() {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl, init)
}

ASRecyclerViewImpl *create_ASRecyclerViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl, init)
}

void ASRecyclerViewImpl_initWithNSString_(ASRecyclerViewImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRecyclerViewImpl_GROUP_NAME, localname);
  self->disableUpdate_ = false;
  self->scrollBarIncrement_ = 20;
  self->oldScrollPos_ = 0;
  self->prevRange_ = -1;
  self->scrollProviderType_ = JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE);
  self->spanCount_ = 0;
  self->orientation_ = ADXRecyclerView_VERTICAL;
  self->sectionMap_ = new_JavaUtilHashMap_init();
  self->itemConfigMap_ = new_JavaUtilHashMap_init();
  self->oldScrollY_ = 0;
  self->oldScrollX_ = 0;
}

ASRecyclerViewImpl *new_ASRecyclerViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl, initWithNSString_, localname)
}

ASRecyclerViewImpl *create_ASRecyclerViewImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl, initWithNSString_, localname)
}

void ASRecyclerViewImpl_initWithNSString_withNSString_(ASRecyclerViewImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->disableUpdate_ = false;
  self->scrollBarIncrement_ = 20;
  self->oldScrollPos_ = 0;
  self->prevRange_ = -1;
  self->scrollProviderType_ = JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE);
  self->spanCount_ = 0;
  self->orientation_ = ADXRecyclerView_VERTICAL;
  self->sectionMap_ = new_JavaUtilHashMap_init();
  self->itemConfigMap_ = new_JavaUtilHashMap_init();
  self->oldScrollY_ = 0;
  self->oldScrollX_ = 0;
}

ASRecyclerViewImpl *new_ASRecyclerViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl, initWithNSString_withNSString_, groupName, localname)
}

ASRecyclerViewImpl *create_ASRecyclerViewImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASRecyclerViewImpl_setWidgetOnNativeClass(ASRecyclerViewImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASRecyclerViewImpl_createLayoutParamsWithADView_(ASRecyclerViewImpl *self, ADView *view) {
  ADXRecyclerView_LayoutParams *layoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  layoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([view getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = [((ADXRecyclerView_LayoutManager *) nil_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager])) generateDefaultLayoutParams];
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXRecyclerView_LayoutParams *ASRecyclerViewImpl_getLayoutParamsWithADView_(ASRecyclerViewImpl *self, ADView *view) {
  return (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
}

void ASRecyclerViewImpl_initScrollBars(ASRecyclerViewImpl *self) {
}

void ASRecyclerViewImpl_setScrollBarIncrementWithId_(ASRecyclerViewImpl *self, id objValue) {
  self->scrollBarIncrement_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASRecyclerViewImpl_handleScroll(ASRecyclerViewImpl *self) {
  @try {
    [((id<ASIFragment>) nil_chk(self->fragment_)) disableRemeasure];
    jint range = ASRecyclerViewImpl_getRange(self);
    jint offset = ASRecyclerViewImpl_getOffset(self);
    jint extent = ASRecyclerViewImpl_getExtent(self);
    jfloat scrollBarDimen = ASRecyclerViewImpl_getScrollBarDimenWithInt_withInt_(self, range, extent);
    jint rangeDiff = range - self->prevRange_;
    self->prevRange_ = range;
    jint selection = ASRecyclerViewImpl_getSelection(self);
    jint dpos = selection - self->oldScrollPos_;
    if (self->scrollProviderType_ == JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE)) {
      if (selection >= ASRecyclerViewImpl_getScrollBarMaxWithId_withFloat_(self, self->scrollProvider_, scrollBarDimen) - 20) {
        dpos = self->scrollBarIncrement_ * 1000;
      }
      if (selection == 0) {
        dpos = -(self->scrollBarIncrement_ * 1000);
      }
    }
    if ([self isHorizontal]) {
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) scrollByWithInt:JreFpToInt(JavaLangMath_ceilWithDouble_(dpos)) withInt:0];
    }
    else {
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) scrollByWithInt:0 withInt:JreFpToInt(JavaLangMath_ceilWithDouble_(dpos))];
    }
    self->oldScrollPos_ = selection;
    if (self->scrollProviderType_ == JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE)) {
      if (ASRecyclerViewImpl_getMaximum(self) < range) {
        ASRecyclerViewImpl_setMaximumWithInt_(self, range);
      }
      else if (rangeDiff > 0) {
        ASRecyclerViewImpl_setMaximumWithInt_(self, ASRecyclerViewImpl_getMaximum(self) + rangeDiff);
      }
    }
    ASRecyclerViewImpl_setCustomHandleScrollWithInt_withInt_withInt_withInt_(self, dpos, range, offset, extent);
  }
  @finally {
    [((id<ASIFragment>) nil_chk(self->fragment_)) enableRemeasure];
  }
}

jfloat ASRecyclerViewImpl_getScrollBarDimenWithInt_withInt_(ASRecyclerViewImpl *self, jint range, jint extent) {
  return (extent / (jfloat) range) * extent;
}

void ASRecyclerViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASRecyclerViewImpl *self, jint l, jint t, jint r, jint b) {
  ASRecyclerViewImpl_setMinimumWithInt_(self, 0);
  jint range = ASRecyclerViewImpl_getRange(self);
  jint offset = ASRecyclerViewImpl_getOffset(self);
  jint extent = ASRecyclerViewImpl_getExtent(self);
  jint rangeDiff = range - self->prevRange_;
  self->prevRange_ = range;
  if (self->scrollProviderType_ == JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE)) {
    if (ASRecyclerViewImpl_getMaximum(self) < range) {
      ASRecyclerViewImpl_setMaximumWithInt_(self, range);
    }
    else if (rangeDiff != 0) {
      ASRecyclerViewImpl_setMaximumWithInt_(self, ASRecyclerViewImpl_getMaximum(self) + rangeDiff);
    }
  }
  if ([self isHorizontal]) {
    if (range > (r - l)) {
      ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_(self->scrollProvider_, 0, b - t - ASRecyclerViewImpl_getThumbWidth(self), r - l, b - t, range);
    }
    else {
      ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_(self->scrollProvider_, 0, 0, 0, 0, range);
    }
  }
  else {
    if (range > (b - t)) {
      ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_(self->scrollProvider_, r - l - ASRecyclerViewImpl_getThumbWidth(self), 0, r - l, b - t, range);
    }
    else {
      ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_(self->scrollProvider_, 0, 0, 0, 0, range);
    }
  }
  ASRecyclerViewImpl_setCustomMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_withInt_withInt_(self, range, rangeDiff, l, t, r, b);
  if ((range - extent) > 0) {
    jfloat percentage = (offset / (jfloat) (range - extent));
    jfloat scrollBarDimen = ASRecyclerViewImpl_getScrollBarDimenWithInt_withInt_(self, range, extent);
    jint selection = ASRecyclerViewImpl_setSelectionWithInt_withInt_withId_(self, JreFpToInt((ASRecyclerViewImpl_getScrollBarMaxWithId_withFloat_(self, self->scrollProvider_, scrollBarDimen) * percentage)), offset, self->scrollProvider_);
    if (selection >= 0) {
      self->oldScrollPos_ = selection;
    }
    if (self->scrollProviderType_ == JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, READ_ONLY)) {
      if (percentage == 1) {
        selection = ASRecyclerViewImpl_setSelectionWithInt_withInt_withId_(self, JreFpToInt((ASRecyclerViewImpl_getScrollBarMaxWithId_withFloat_(self, self->uiView_, scrollBarDimen) * percentage)), offset, self->uiView_);
        if (selection >= 0) {
          self->oldScrollPos_ = selection;
        }
      }
      else {
        jint currentSelection = ASRecyclerViewImpl_getSelection(self);
        if (currentSelection >= 0) {
          self->oldScrollPos_ = currentSelection;
        }
      }
    }
  }
  else {
    self->oldScrollPos_ = 0;
  }
}

jint ASRecyclerViewImpl_getExtent(ASRecyclerViewImpl *self) {
  return [self isHorizontal] ? [((ADXRecyclerView *) nil_chk(self->recyclerView_)) computeHorizontalScrollExtent] : [((ADXRecyclerView *) nil_chk(self->recyclerView_)) computeVerticalScrollExtent];
}

jint ASRecyclerViewImpl_getOffset(ASRecyclerViewImpl *self) {
  return [self isHorizontal] ? [((ADXRecyclerView *) nil_chk(self->recyclerView_)) computeHorizontalScrollOffset] : [((ADXRecyclerView *) nil_chk(self->recyclerView_)) computeVerticalScrollOffset];
}

jint ASRecyclerViewImpl_getRange(ASRecyclerViewImpl *self) {
  return [self isHorizontal] ? [((ADXRecyclerView *) nil_chk(self->recyclerView_)) computeHorizontalScrollRange] : [((ADXRecyclerView *) nil_chk(self->recyclerView_)) computeVerticalScrollRange];
}

void ASRecyclerViewImpl_setOnScrollWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRecyclerViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if ([objValue isKindOfClass:[NSString class]]) {
    [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setOnScrollListenerWithADXRecyclerView_OnScrollListener:new_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(self, strValue)];
  }
  else {
    [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setOnScrollListenerWithADXRecyclerView_OnScrollListener:(ASRecyclerViewImpl_OnScrollListener *) cast_chk(objValue, [ASRecyclerViewImpl_OnScrollListener class])];
  }
}

void ASRecyclerViewImpl_setOnScrollStateChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRecyclerViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  if ([objValue isKindOfClass:[NSString class]]) {
    [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setOnScrollListenerWithADXRecyclerView_OnScrollListener:new_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(self, strValue)];
  }
  else {
    [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setOnScrollListenerWithADXRecyclerView_OnScrollListener:(ASRecyclerViewImpl_OnScrollListener *) cast_chk(objValue, [ASRecyclerViewImpl_OnScrollListener class])];
  }
}

void ASRecyclerViewImpl_nativeCreateRecycleViewWithJavaUtilMap_(ASRecyclerViewImpl *self, id<JavaUtilMap> params) {
  self->adapter_ = new_ASRecyclerViewImpl_ListAdapter_initWithASRecyclerViewImpl_(self);
  [self->adapter_ setHasStableIdsWithBoolean:true];
  [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setAdapterWithADXRecyclerView_Adapter:self->adapter_];
  [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setLayoutManagerWithADXRecyclerView_LayoutManager:new_ADXLinearLayoutManager_initWithADContext_([self->recyclerView_ getContext])];
  ASRecyclerViewImpl_initScrollBars(self);
}

void ASRecyclerViewImpl_setLayoutManagerWithId_(ASRecyclerViewImpl *self, id objValue) {
  NSString *layoutManager = (NSString *) cast_chk(objValue, [NSString class]);
  switch (JreIndexOfStr(layoutManager, (id[]){ @"androidx.recyclerview.widget.GridLayoutManager", @"androidx.recyclerview.widget.LinearLayoutManager", @"androidx.recyclerview.widget.StaggeredGridLayoutManager" }, 3)) {
    case 0:
    {
      ADXGridLayoutManager *gridLayoutManager = new_ADXGridLayoutManager_initWithADContext_withInt_([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getContext], self->spanCount_);
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setLayoutManagerWithADXRecyclerView_LayoutManager:gridLayoutManager];
      [gridLayoutManager setOrientationWithInt:self->orientation_];
      [((ADXGridLayoutManager *) nil_chk(((ADXGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXGridLayoutManager class])))) setSpanSizeLookupWithADXGridLayoutManager_SpanSizeLookup:new_ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(self)];
    }
    break;
    case 1:
    {
      ADXLinearLayoutManager *linearLayoutManager = new_ADXLinearLayoutManager_initWithADContext_([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getContext]);
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setLayoutManagerWithADXRecyclerView_LayoutManager:linearLayoutManager];
      [linearLayoutManager setOrientationWithInt:self->orientation_];
    }
    break;
    case 2:
    {
      ADXStaggeredGridLayoutManager *gridLayoutManager = new_ADXStaggeredGridLayoutManager_initWithInt_withInt_(self->orientation_, self->spanCount_);
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setLayoutManagerWithADXRecyclerView_LayoutManager:gridLayoutManager];
      [gridLayoutManager setOrientationWithInt:self->orientation_];
    }
    break;
    default:
    break;
  }
}

void ASRecyclerViewImpl_reloadTable(ASRecyclerViewImpl *self) {
  if (!self->disableUpdate_ && self->adapter_ != nil) {
    [self->adapter_ notifyDataSetChanged];
  }
}

void ASRecyclerViewImpl_setViewHolderIdsWithId_(ASRecyclerViewImpl *self, id objValue) {
  self->viewHolderIds_ = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
}

void ASRecyclerViewImpl_setSpanCountWithId_(ASRecyclerViewImpl *self, id objValue) {
  self->spanCount_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXGridLayoutManager class]]) {
      if ([self->adapter_ isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
        [((ASRecyclerViewImpl_GroupieAdapter *) nil_chk(((ASRecyclerViewImpl_GroupieAdapter *) self->adapter_))) setSpanCountWithInt:self->spanCount_];
      }
      else {
        [((ADXGridLayoutManager *) nil_chk(((ADXGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXGridLayoutManager class])))) setSpanCountWithInt:self->spanCount_];
      }
    }
    if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXStaggeredGridLayoutManager class]]) {
      [((ADXStaggeredGridLayoutManager *) nil_chk(((ADXStaggeredGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXStaggeredGridLayoutManager class])))) setSpanCountWithInt:self->spanCount_];
    }
  }
}

void ASRecyclerViewImpl_setOrientationWithId_(ASRecyclerViewImpl *self, id objValue) {
  self->orientation_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXGridLayoutManager class]]) {
      [((ADXGridLayoutManager *) nil_chk(((ADXGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXGridLayoutManager class])))) setOrientationWithInt:self->orientation_];
    }
    if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXLinearLayoutManager class]]) {
      [((ADXLinearLayoutManager *) nil_chk(((ADXLinearLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXLinearLayoutManager class])))) setOrientationWithInt:self->orientation_];
    }
    if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXStaggeredGridLayoutManager class]]) {
      [((ADXStaggeredGridLayoutManager *) nil_chk(((ADXStaggeredGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXStaggeredGridLayoutManager class])))) setOrientationWithInt:self->orientation_];
    }
  }
}

jint ASRecyclerViewImpl_getOrientation(ASRecyclerViewImpl *self) {
  return self->orientation_;
}

void ASRecyclerViewImpl_setLayoutWithId_(ASRecyclerViewImpl *self, id objValue) {
  NSString *json = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"xml/recycler", [((NSString *) nil_chk(((NSString *) cast_chk(objValue, [NSString class])))) java_replace:@"@xml/" withSequence:@""], self->fragment_);
  id<JavaUtilMap> configMap = ASPluginInvoker_unmarshalWithNSString_withIOSClass_(json, JavaUtilMap_class_());
  self->layout_ = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(configMap)) getWithId:@"layout"]);
  if ([nil_chk([((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"@adapter"]) isEqual:@"simple"]) {
    if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXGridLayoutManager class]]) {
      [((ADXGridLayoutManager *) nil_chk(((ADXGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXGridLayoutManager class])))) setSpanSizeLookupWithADXGridLayoutManager_SpanSizeLookup:new_ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(self)];
    }
    id<JavaUtilMap> headerMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"header"]);
    if (headerMap != nil) {
      self->headerTemplate_ = (id<ASIWidget>) cast_check([self quickConvertWithId:[headerMap getWithId:@"@layout"] withNSString:ASCommonConverters_template], ASIWidget_class_());
      id viewHolderIds = [headerMap getWithId:@"@viewHolderIds"];
      if (viewHolderIds != nil) {
        self->headerViewHolderIds_ = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderIds withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
      }
    }
    id<JavaUtilMap> footerMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"footer"]);
    if (footerMap != nil) {
      self->footerTemplate_ = (id<ASIWidget>) cast_check([self quickConvertWithId:[footerMap getWithId:@"@layout"] withNSString:ASCommonConverters_template], ASIWidget_class_());
      id viewHolderIds = [footerMap getWithId:@"@viewHolderIds"];
      if (viewHolderIds != nil) {
        self->footerViewHolderIds_ = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderIds withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
      }
    }
    id<JavaUtilMap> itemMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"item"]);
    if (itemMap != nil) {
      id viewHolderIds = [itemMap getWithId:@"@viewHolderIds"];
      if (viewHolderIds != nil) {
        self->viewHolderIds_ = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderIds withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
      }
      id layoutItem = [itemMap getWithId:@"@layout"];
      if (layoutItem != nil) {
        self->listItem_ = (id<ASIWidget>) cast_check([self quickConvertWithId:layoutItem withNSString:ASCommonConverters_template], ASIWidget_class_());
      }
    }
  }
  if ([nil_chk([((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"@adapter"]) isEqual:@"groupie"]) {
    if ([((id<JavaUtilMap>) nil_chk(self->layout_)) containsKeyWithId:@"section"]) {
      ASRecyclerViewImpl_GroupieAdapter *groupieAdapter = new_ASRecyclerViewImpl_GroupieAdapter_initWithASRecyclerViewImpl_(self);
      self->adapter_ = groupieAdapter;
      [self->adapter_ setHasStableIdsWithBoolean:true];
      [groupieAdapter setSpanCountWithInt:self->spanCount_];
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) setAdapterWithADXRecyclerView_Adapter:self->adapter_];
      if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXGridLayoutManager class]]) {
        [((ADXGridLayoutManager *) nil_chk(((ADXGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXGridLayoutManager class])))) setSpanSizeLookupWithADXGridLayoutManager_SpanSizeLookup:[groupieAdapter getSpanSizeLookup]];
      }
      [((ADXRecyclerView *) nil_chk(self->recyclerView_)) addItemDecorationWithADXRecyclerView_ItemDecoration:new_ASInsetItemDecoration_init()];
      ASRecyclerViewImpl_createSectionsWithASRecyclerViewImpl_GroupieAdapter_(self, groupieAdapter);
    }
  }
}

void ASRecyclerViewImpl_createSectionsWithASRecyclerViewImpl_GroupieAdapter_(ASRecyclerViewImpl *self, ASRecyclerViewImpl_GroupieAdapter *groupieAdapter) {
  id<JavaUtilList> sections = ASPluginInvoker_getListWithId_([((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"section"]);
  if (sections == nil) {
    ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(self, groupieAdapter, [((id<JavaUtilMap>) nil_chk(self->layout_)) getWithId:@"section"], nil);
  }
  else {
    for (id __strong section in sections) {
      ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(self, groupieAdapter, section, nil);
    }
  }
}

void ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(ASRecyclerViewImpl *self, id group, id sectionObj, ASLoopParam *pLoopParam) {
  id<JavaUtilMap> sectionMap = ASPluginInvoker_getMapWithId_(sectionObj);
  if (sectionMap != nil) {
    if ([sectionMap containsKeyWithId:@"@modelFor"]) {
      NSString *modelFor = ASPluginInvoker_getStringWithId_([sectionMap getWithId:@"@modelFor"]);
      if (modelFor != nil) {
        ASModelExpressionParser_ModelLoopHolder *modelLoopHolder = ASModelExpressionParser_parseModelLoopExpressionWithNSString_(modelFor);
        id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelLoopHolder *) nil_chk(modelLoopHolder))->key_ withASModelScope:modelLoopHolder->varSource_];
        obj = [self getModelByPathWithNSString:modelLoopHolder->varPath_ withId:obj];
        if (obj != nil) {
          for (id __strong model in nil_chk(ASPluginInvoker_getListWithId_(obj))) {
            model = [self changeModelDataTypeWithASModelDataType:modelLoopHolder->dataType_ withId:model];
            ASLoopParam *loopParam = new_ASLoopParam_init();
            [self storeModelToScopeWithNSString:modelLoopHolder->varName_ withASModelScope:modelLoopHolder->varScope_ withId:model withASLoopParam:loopParam];
            ASRecyclerViewImpl_addSectionWithId_withId_withASLoopParam_(self, group, sectionMap, loopParam);
          }
        }
      }
    }
    else if ([sectionMap containsKeyWithId:@"@modelVar"]) {
      NSString *modelVar = ASPluginInvoker_getStringWithId_([sectionMap getWithId:@"@modelVar"]);
      if (modelVar != nil) {
        id<JavaUtilList> modelVarHolders = ASModelExpressionParser_parseModelVarExpressionWithNSString_(modelVar);
        ASLoopParam *loopParam = new_ASLoopParam_init();
        for (ASModelExpressionParser_ModelVarHolder * __strong modelVarHolder in nil_chk(modelVarHolders)) {
          id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelVarHolder *) nil_chk(modelVarHolder))->key_ withASModelScope:modelVarHolder->varSource_];
          obj = [self getModelByPathWithNSString:modelVarHolder->varPath_ withId:obj];
          obj = [self changeModelDataTypeWithASModelDataType:modelVarHolder->dataType_ withId:obj];
          [self storeModelToScopeWithNSString:modelVarHolder->varName_ withASModelScope:modelVarHolder->varScope_ withId:obj withASLoopParam:loopParam];
        }
        ASRecyclerViewImpl_addSectionWithId_withId_withASLoopParam_(self, group, sectionMap, loopParam);
      }
    }
    else {
      ASRecyclerViewImpl_addSectionWithId_withId_withASLoopParam_(self, group, sectionMap, pLoopParam);
    }
  }
}

void ASRecyclerViewImpl_createExpandableWithJavaUtilMap_withADXSection_withASLoopParam_(ASRecyclerViewImpl *self, id<JavaUtilMap> sectionMap, ADXSection *section, ASLoopParam *pLoopParam) {
  id<JavaUtilMap> itemMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(sectionMap)) getWithId:@"expandable"]);
  if (itemMap != nil) {
    id layout = [itemMap getWithId:@"@layout"];
    id<ASIWidget> template_ = (id<ASIWidget>) cast_check([self quickConvertWithId:layout withNSString:ASCommonConverters_template], ASIWidget_class_());
    id viewHolderId = [itemMap getWithId:@"@viewHolderIds"];
    id<JavaUtilList> viewHolderIds = nil;
    id<JavaUtilList> onClickIds = nil;
    if (viewHolderId != nil) {
      viewHolderIds = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderId withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
    }
    jint margin = 0;
    if ([itemMap containsKeyWithId:@"@gridInsets"]) {
      margin = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:[itemMap getWithId:@"@gridInsets"] withNSString:ASCommonConverters_dimension], [JavaLangInteger class]))) intValue];
    }
    if ([itemMap containsKeyWithId:@"@onclick"]) {
      onClickIds = (id<JavaUtilList>) cast_check([self quickConvertWithId:[itemMap getWithId:@"@onclick"] withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
    }
    ASRecyclerViewImpl_GenericExpandableItem *item = new_ASRecyclerViewImpl_GenericExpandableItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_(self, [nil_chk(layout) description], template_, pLoopParam, viewHolderIds, onClickIds);
    [item setMarginWithInt:margin];
    ADXExpandableGroup *expandableGroup = new_ADXExpandableGroup_initWithADXRVGroup_(item);
    [expandableGroup setExpandedWithBoolean:[itemMap containsKeyWithId:@"@expand"] && [((JavaLangBoolean *) nil_chk(ASPluginInvoker_getBooleanWithId_([itemMap getWithId:@"@expand"]))) booleanValue]];
    [((ADXSection *) nil_chk(section)) addWithADXRVGroup:expandableGroup];
    if ([itemMap containsKeyWithId:@"section"]) {
      ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(self, expandableGroup, [itemMap getWithId:@"section"], pLoopParam);
    }
  }
}

void ASRecyclerViewImpl_addSectionWithId_withId_withASLoopParam_(ASRecyclerViewImpl *self, id group, id sectionObj, ASLoopParam *loopParam) {
  id<JavaUtilMap> sectionMap = ASPluginInvoker_getMapWithId_(sectionObj);
  ADXSection *section = new_ADXSection_init();
  ASRecyclerViewImpl_SectionHolder *sectionHolder = new_ASRecyclerViewImpl_SectionHolder_initWithASRecyclerViewImpl_(self);
  sectionHolder->section_ = section;
  sectionHolder->loopParam_ = loopParam;
  if ([((id<JavaUtilMap>) nil_chk(sectionMap)) containsKeyWithId:@"@idPath"]) {
    NSString *path = ASPluginInvoker_getStringWithId_([sectionMap getWithId:@"@idPath"]);
    ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
    id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varName_ withASModelScope:modelFromScopeHolder->varScope_ withASLoopParam:loopParam];
    obj = [self getModelByPathWithNSString:modelFromScopeHolder->varPath_ withId:obj];
    (void) [((id<JavaUtilMap>) nil_chk(self->sectionMap_)) putWithId:ASPluginInvoker_getStringWithId_(obj) withId:sectionHolder];
  }
  else if ([sectionMap containsKeyWithId:@"@id"]) {
    (void) [((id<JavaUtilMap>) nil_chk(self->sectionMap_)) putWithId:ASPluginInvoker_getStringWithId_([sectionMap getWithId:@"@id"]) withId:sectionHolder];
  }
  sectionHolder->sectionConfigAttrs_ = sectionMap;
  ASRecyclerViewImpl_createHeaderWithASLoopParam_withADXSection_withJavaUtilMap_(self, loopParam, section, sectionMap);
  ASRecyclerViewImpl_createFooterWithASLoopParam_withADXSection_withJavaUtilMap_(self, loopParam, section, sectionMap);
  ASRecyclerViewImpl_createItemsWithJavaUtilMap_withADXSection_withASLoopParam_(self, sectionMap, section, loopParam);
  ASRecyclerViewImpl_createExpandableWithJavaUtilMap_withADXSection_withASLoopParam_(self, sectionMap, section, loopParam);
  if ([sectionMap containsKeyWithId:@"section"]) {
    ASRecyclerViewImpl_createSectionsWithId_withId_withASLoopParam_(self, section, [sectionMap getWithId:@"section"], loopParam);
  }
  if ([group isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
    [((ASRecyclerViewImpl_GroupieAdapter *) nil_chk(((ASRecyclerViewImpl_GroupieAdapter *) group))) addWithADXRVGroup:section];
  }
  else if ([group isKindOfClass:[ADXExpandableGroup class]]) {
    [((ADXExpandableGroup *) nil_chk(((ADXExpandableGroup *) group))) addWithADXRVGroup:section];
  }
  else if ([group isKindOfClass:[ADXSection class]]) {
    [((ADXSection *) nil_chk(((ADXSection *) group))) addWithADXRVGroup:section];
  }
}

void ASRecyclerViewImpl_createItemsWithJavaUtilMap_withADXSection_withASLoopParam_(ASRecyclerViewImpl *self, id<JavaUtilMap> sectionMap, ADXSection *section, ASLoopParam *pLoopParam) {
  id<JavaUtilMap> itemMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(sectionMap)) getWithId:@"item"]);
  if (itemMap != nil) {
    if ([itemMap containsKeyWithId:@"@id"]) {
      (void) [((id<JavaUtilMap>) nil_chk(self->itemConfigMap_)) putWithId:ASPluginInvoker_getStringWithId_([itemMap getWithId:@"@id"]) withId:itemMap];
    }
    ASRecyclerViewImpl_createItemWithADXSection_withJavaUtilMap_withASLoopParam_withId_(self, section, itemMap, pLoopParam, nil);
  }
}

void ASRecyclerViewImpl_createItemWithADXSection_withJavaUtilMap_withASLoopParam_withId_(ASRecyclerViewImpl *self, ADXSection *section, id<JavaUtilMap> itemMap, ASLoopParam *pLoopParam, id myitem) {
  jint numberOfColumns = 1;
  if ([((id<JavaUtilMap>) nil_chk(itemMap)) containsKeyWithId:@"@numberOfColumns"]) {
    numberOfColumns = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:[itemMap getWithId:@"@numberOfColumns"] withNSString:ASCommonConverters_intconverter], [JavaLangInteger class]))) intValue];
  }
  id layout = [itemMap getWithId:@"@layout"];
  id<ASIWidget> template_ = (id<ASIWidget>) cast_check([self quickConvertWithId:layout withNSString:ASCommonConverters_template], ASIWidget_class_());
  id viewHolderId = [itemMap getWithId:@"@viewHolderIds"];
  id<JavaUtilList> viewHolderIds = nil;
  if (viewHolderId != nil) {
    viewHolderIds = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderId withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
  }
  jint margin = 0;
  if ([itemMap containsKeyWithId:@"@gridInsets"]) {
    margin = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self quickConvertWithId:[itemMap getWithId:@"@gridInsets"] withNSString:ASCommonConverters_dimension], [JavaLangInteger class]))) intValue];
  }
  if ([itemMap containsKeyWithId:@"@modelFor"]) {
    NSString *modelFor = ASPluginInvoker_getStringWithId_([itemMap getWithId:@"@modelFor"]);
    ASModelExpressionParser_ModelLoopHolder *modelLoopHolder = ASModelExpressionParser_parseModelLoopExpressionWithNSString_(modelFor);
    id obj = nil;
    if (myitem == nil) {
      obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelLoopHolder *) nil_chk(modelLoopHolder))->key_ withASModelScope:modelLoopHolder->varSource_ withASLoopParam:pLoopParam];
      obj = [self getModelByPathWithNSString:modelLoopHolder->varPath_ withId:obj];
    }
    else {
      obj = myitem;
    }
    if (obj != nil) {
      id<JavaUtilList> list = ASPluginInvoker_getListWithId_(obj);
      if (list != nil) {
        for (id __strong model in list) {
          model = [self changeModelDataTypeWithASModelDataType:((ASModelExpressionParser_ModelLoopHolder *) nil_chk(modelLoopHolder))->dataType_ withId:model];
          ASLoopParam *loopParam = new_ASLoopParam_init();
          [self storeModelToScopeWithNSString:modelLoopHolder->varName_ withASModelScope:modelLoopHolder->varScope_ withId:model withASLoopParam:loopParam];
          ASRecyclerViewImpl_GenericItem *item = new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, [nil_chk(layout) description], template_, loopParam, viewHolderIds);
          [item setNumberOfColumsWithInt:numberOfColumns];
          [item setMarginWithInt:margin];
          [((ADXSection *) nil_chk(section)) addWithADXRVGroup:item];
        }
      }
      else {
        id<JavaUtilMap> map = ASPluginInvoker_getMapWithId_(obj);
        if (map != nil) {
          obj = [self changeModelDataTypeWithASModelDataType:((ASModelExpressionParser_ModelLoopHolder *) nil_chk(modelLoopHolder))->dataType_ withId:obj];
          ASLoopParam *loopParam = new_ASLoopParam_init();
          [self storeModelToScopeWithNSString:modelLoopHolder->varName_ withASModelScope:modelLoopHolder->varScope_ withId:obj withASLoopParam:loopParam];
          ASRecyclerViewImpl_GenericItem *item = new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, [nil_chk(layout) description], template_, loopParam, viewHolderIds);
          [item setNumberOfColumsWithInt:numberOfColumns];
          [item setMarginWithInt:margin];
          [((ADXSection *) nil_chk(section)) addWithADXRVGroup:item];
        }
      }
    }
  }
  else if ([itemMap containsKeyWithId:@"@modelVar"]) {
    NSString *modelVar = ASPluginInvoker_getStringWithId_([itemMap getWithId:@"@modelVar"]);
    if (modelVar != nil) {
      id<JavaUtilList> modelVarHolders = ASModelExpressionParser_parseModelVarExpressionWithNSString_(modelVar);
      ASLoopParam *loopParam = new_ASLoopParam_init();
      for (ASModelExpressionParser_ModelVarHolder * __strong modelVarHolder in nil_chk(modelVarHolders)) {
        id obj = nil;
        if (myitem == nil) {
          obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelVarHolder *) nil_chk(modelVarHolder))->key_ withASModelScope:modelVarHolder->varSource_];
          obj = [self getModelByPathWithNSString:modelVarHolder->varPath_ withId:obj];
        }
        else {
          obj = myitem;
        }
        obj = [self changeModelDataTypeWithASModelDataType:((ASModelExpressionParser_ModelVarHolder *) nil_chk(modelVarHolder))->dataType_ withId:obj];
        [self storeModelToScopeWithNSString:modelVarHolder->varName_ withASModelScope:modelVarHolder->varScope_ withId:obj withASLoopParam:loopParam];
      }
      ASRecyclerViewImpl_GenericItem *item = new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, [nil_chk(layout) description], template_, loopParam, viewHolderIds);
      [item setNumberOfColumsWithInt:numberOfColumns];
      [item setMarginWithInt:margin];
      [((ADXSection *) nil_chk(section)) addWithADXRVGroup:item];
    }
  }
  else {
    ASRecyclerViewImpl_GenericItem *item = new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, [nil_chk(layout) description], template_, pLoopParam, viewHolderIds);
    [item setNumberOfColumsWithInt:numberOfColumns];
    [item setMarginWithInt:margin];
    [((ADXSection *) nil_chk(section)) addWithADXRVGroup:item];
  }
}

void ASRecyclerViewImpl_createFooterWithASLoopParam_withADXSection_withJavaUtilMap_(ASRecyclerViewImpl *self, ASLoopParam *loopParam, ADXSection *section, id<JavaUtilMap> sectionMap) {
  id<JavaUtilMap> footerMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(sectionMap)) getWithId:@"footer"]);
  if (footerMap != nil) {
    id layout = [footerMap getWithId:@"@layout"];
    id<ASIWidget> template_ = (id<ASIWidget>) cast_check([self quickConvertWithId:layout withNSString:ASCommonConverters_template], ASIWidget_class_());
    id viewHolderId = [footerMap getWithId:@"@viewHolderIds"];
    id<JavaUtilList> viewHolderIds = nil;
    if (viewHolderId != nil) {
      viewHolderIds = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderId withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
    }
    [((ADXSection *) nil_chk(section)) setFooterWithADXRVGroup:new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, [nil_chk(layout) description], template_, loopParam, viewHolderIds)];
  }
}

void ASRecyclerViewImpl_createHeaderWithASLoopParam_withADXSection_withJavaUtilMap_(ASRecyclerViewImpl *self, ASLoopParam *loopParam, ADXSection *section, id<JavaUtilMap> sectionMap) {
  id<JavaUtilMap> headerMap = ASPluginInvoker_getMapWithId_([((id<JavaUtilMap>) nil_chk(sectionMap)) getWithId:@"header"]);
  if (headerMap != nil) {
    id layout = [headerMap getWithId:@"@layout"];
    id<ASIWidget> template_ = (id<ASIWidget>) cast_check([self quickConvertWithId:layout withNSString:ASCommonConverters_template], ASIWidget_class_());
    id viewHolderId = [headerMap getWithId:@"@viewHolderIds"];
    id<JavaUtilList> viewHolderIds = nil;
    if (viewHolderId != nil) {
      viewHolderIds = (id<JavaUtilList>) cast_check([self quickConvertWithId:viewHolderId withNSString:ASCommonConverters_array withNSString:@"list" withNSString:nil], JavaUtilList_class_());
    }
    [((ADXSection *) nil_chk(section)) setHeaderWithADXRVGroup:new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, [nil_chk(layout) description], template_, loopParam, viewHolderIds)];
  }
}

void ASRecyclerViewImpl_addSectionItemWithNSString_withNSString_withId_(ASRecyclerViewImpl *self, NSString *sectionId, NSString *itemConfigId, id item) {
  if ([self->adapter_ isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
    if (self->sectionMap_ != nil) {
      ASRecyclerViewImpl_SectionHolder *sectionHolder = [self->sectionMap_ getWithId:sectionId];
      id<JavaUtilMap> itemConfig = [((id<JavaUtilMap>) nil_chk(self->itemConfigMap_)) getWithId:itemConfigId];
      if ([((id<JavaUtilMap>) nil_chk(itemConfig)) containsKeyWithId:@"@itemsPath"]) {
        id<JavaUtilList> list = [self getChildItemsWithASRecyclerViewImpl_SectionHolder:sectionHolder withJavaUtilMap:itemConfig];
        if (list != nil) {
          [list addWithId:item];
        }
        ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(self, sectionHolder);
      }
      else {
        ASRecyclerViewImpl_createItemWithADXSection_withJavaUtilMap_withASLoopParam_withId_(self, ((ASRecyclerViewImpl_SectionHolder *) nil_chk(sectionHolder))->section_, itemConfig, sectionHolder->loopParam_, item);
      }
    }
  }
}

void ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(ASRecyclerViewImpl *self, ASRecyclerViewImpl_SectionHolder *sectionHolder) {
  for (id __strong g in nil_chk([((ADXSection *) nil_chk(((ASRecyclerViewImpl_SectionHolder *) nil_chk(sectionHolder))->section_)) getGroups])) {
    if ([g isKindOfClass:[ASRecyclerViewImpl_GenericItem class]]) {
      [((ASRecyclerViewImpl_GenericItem *) nil_chk(((ASRecyclerViewImpl_GenericItem *) g))) setModifiedWithBoolean:true];
    }
  }
  [((ADXRecyclerView_Adapter *) nil_chk(self->adapter_)) notifyDataSetChanged];
}

void ASRecyclerViewImpl_removeSectionItemWithNSString_withNSString_withNSString_(ASRecyclerViewImpl *self, NSString *sectionId, NSString *itemConfigId, NSString *itemId) {
  if ([self->adapter_ isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
    if (self->sectionMap_ != nil) {
      ASRecyclerViewImpl_SectionHolder *sectionHolder = [self->sectionMap_ getWithId:sectionId];
      id<JavaUtilMap> itemConfig = [((id<JavaUtilMap>) nil_chk(self->itemConfigMap_)) getWithId:itemConfigId];
      if ([((id<JavaUtilMap>) nil_chk(itemConfig)) containsKeyWithId:@"@itemsPath"]) {
        id<JavaUtilList> list = [self getChildItemsWithASRecyclerViewImpl_SectionHolder:sectionHolder withJavaUtilMap:itemConfig];
        if ([itemConfig containsKeyWithId:@"@idPath"]) {
          NSString *path = ASPluginInvoker_getStringWithId_([itemConfig getWithId:@"@idPath"]);
          ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
          for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(list)) size]; i++) {
            id obj = [self getModelByPathWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varPath_ withId:[list getWithInt:i]];
            if ([((NSString *) nil_chk(itemId)) isEqual:obj]) {
              (void) [list removeWithInt:i];
              break;
            }
          }
        }
        ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(self, sectionHolder);
      }
      else {
        jint itemCount = [((ADXSection *) nil_chk(((ASRecyclerViewImpl_SectionHolder *) nil_chk(sectionHolder))->section_)) getItemCount];
        if ([itemConfig containsKeyWithId:@"@idPath"]) {
          NSString *path = ASPluginInvoker_getStringWithId_([itemConfig getWithId:@"@idPath"]);
          ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
          for (jint i = itemCount - 1; i >= 0; i--) {
            ADXItem *item = [((ADXSection *) nil_chk(sectionHolder->section_)) getItemWithInt:i];
            if ([item isKindOfClass:[ASRecyclerViewImpl_GenericItem class]]) {
              id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varName_ withASModelScope:modelFromScopeHolder->varScope_ withASLoopParam:[((ASRecyclerViewImpl_GenericItem *) nil_chk(((ASRecyclerViewImpl_GenericItem *) item))) getLoopParam]];
              obj = [self getModelByPathWithNSString:modelFromScopeHolder->varPath_ withId:obj];
              if ([((NSString *) nil_chk(itemId)) isEqual:obj]) {
                [((ADXSection *) nil_chk(sectionHolder->section_)) removeWithADXRVGroup:item];
              }
            }
          }
        }
      }
    }
  }
}

void ASRecyclerViewImpl_removeAllItemsWithNSString_(ASRecyclerViewImpl *self, NSString *sectionId) {
  if ([self->adapter_ isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
    if (self->sectionMap_ != nil) {
      ASRecyclerViewImpl_SectionHolder *sectionHolder = [self->sectionMap_ getWithId:sectionId];
      if ([((id<JavaUtilMap>) nil_chk(((ASRecyclerViewImpl_SectionHolder *) nil_chk(sectionHolder))->sectionConfigAttrs_)) containsKeyWithId:@"@removeAllItemIdHint"]) {
        IOSObjectArray *itemConfigIds = [((NSString *) nil_chk(ASPluginInvoker_getStringWithId_([((id<JavaUtilMap>) nil_chk(sectionHolder->sectionConfigAttrs_)) getWithId:@"@removeAllItemIdHint"]))) java_split:@","];
        {
          IOSObjectArray *a__ = itemConfigIds;
          NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
          NSString * const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            NSString *itemConfigId = *b__++;
            id<JavaUtilMap> itemConfig = [((id<JavaUtilMap>) nil_chk(self->itemConfigMap_)) getWithId:itemConfigId];
            if ([((id<JavaUtilMap>) nil_chk(itemConfig)) containsKeyWithId:@"@itemsPath"]) {
              id<JavaUtilList> list = [self getChildItemsWithASRecyclerViewImpl_SectionHolder:sectionHolder withJavaUtilMap:itemConfig];
              if (list != nil) {
                [list clear];
              }
              ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(self, sectionHolder);
            }
            else {
              [((ADXSection *) nil_chk(sectionHolder->section_)) clear];
            }
          }
        }
      }
      else {
        [((ADXSection *) nil_chk(sectionHolder->section_)) clear];
      }
    }
  }
}

void ASRecyclerViewImpl_updateSectionItemWithNSString_withNSString_withNSString_withId_(ASRecyclerViewImpl *self, NSString *sectionId, NSString *itemConfigId, NSString *itemId, id newData) {
  if ([self->adapter_ isKindOfClass:[ASRecyclerViewImpl_GroupieAdapter class]]) {
    if (self->sectionMap_ != nil) {
      ASRecyclerViewImpl_SectionHolder *sectionHolder = [self->sectionMap_ getWithId:sectionId];
      id<JavaUtilMap> itemConfig = [((id<JavaUtilMap>) nil_chk(self->itemConfigMap_)) getWithId:itemConfigId];
      if ([((id<JavaUtilMap>) nil_chk(itemConfig)) containsKeyWithId:@"@itemsPath"]) {
        id<JavaUtilList> list = [self getChildItemsWithASRecyclerViewImpl_SectionHolder:sectionHolder withJavaUtilMap:itemConfig];
        if ([itemConfig containsKeyWithId:@"@idPath"]) {
          NSString *path = ASPluginInvoker_getStringWithId_([itemConfig getWithId:@"@idPath"]);
          ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
          for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(list)) size]; i++) {
            id obj = [self getModelByPathWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varPath_ withId:[list getWithInt:i]];
            if ([((NSString *) nil_chk(itemId)) isEqual:obj]) {
              (void) [list setWithInt:i withId:newData];
              break;
            }
          }
        }
        ASRecyclerViewImpl_notifyDataSetChangedWithASRecyclerViewImpl_SectionHolder_(self, sectionHolder);
      }
      else {
        if ([itemConfig containsKeyWithId:@"@idPath"]) {
          NSString *path = ASPluginInvoker_getStringWithId_([itemConfig getWithId:@"@idPath"]);
          ASModelExpressionParser_ModelFromScopeHolder *modelFromScopeHolder = ASModelExpressionParser_parseModelFromScopeWithNSString_(path);
          jint itemCount = [((ADXSection *) nil_chk(((ASRecyclerViewImpl_SectionHolder *) nil_chk(sectionHolder))->section_)) getItemCount];
          jint layoutId = ASIdGenerator_getIdWithNSString_(ASPluginInvoker_getStringWithId_([itemConfig getWithId:@"@layout"]));
          JavaUtilArrayList *items = new_JavaUtilArrayList_init();
          for (jint i = itemCount - 1; i >= 0; i--) {
            ADXItem *item = [((ADXSection *) nil_chk(sectionHolder->section_)) getItemWithInt:i];
            if ([item isKindOfClass:[ASRecyclerViewImpl_GenericItem class]]) {
              if ([((ASRecyclerViewImpl_GenericItem *) nil_chk(((ASRecyclerViewImpl_GenericItem *) item))) getLayout] == layoutId) {
                id obj = [self getModelFromScopeWithNSString:((ASModelExpressionParser_ModelFromScopeHolder *) nil_chk(modelFromScopeHolder))->varName_ withASModelScope:modelFromScopeHolder->varScope_ withASLoopParam:[((ASRecyclerViewImpl_GenericItem *) nil_chk(((ASRecyclerViewImpl_GenericItem *) item))) getLoopParam]];
                obj = [self getModelByPathWithNSString:modelFromScopeHolder->varPath_ withId:obj];
                if ([((NSString *) nil_chk(itemId)) isEqual:obj]) {
                  ADXSection *tmpSection = new_ADXSection_init();
                  ASRecyclerViewImpl_createItemWithADXSection_withJavaUtilMap_withASLoopParam_withId_(self, tmpSection, itemConfig, sectionHolder->loopParam_, newData);
                  item = [tmpSection getItemWithInt:0];
                }
                [items addWithInt:0 withId:item];
              }
            }
          }
          [((ADXSection *) nil_chk(sectionHolder->section_)) updateWithJavaUtilCollection:items];
        }
      }
    }
  }
}

void ASRecyclerViewImpl_scrollToPositionWithId_(ASRecyclerViewImpl *self, id objValue) {
  [((ADXRecyclerView *) nil_chk(self->recyclerView_)) scrollToPositionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASRecyclerViewImpl_scrollToTopWithId_(ASRecyclerViewImpl *self, id objValue) {
  [((ADXRecyclerView *) nil_chk(self->recyclerView_)) scrollToPositionWithInt:0];
}

void ASRecyclerViewImpl_scrollToEndWithId_(ASRecyclerViewImpl *self, id objValue) {
  [((ADXRecyclerView *) nil_chk(self->recyclerView_)) scrollToPositionWithInt:[((ADXRecyclerView_Adapter *) nil_chk(self->adapter_)) getItemCount] - 1];
}

void ASRecyclerViewImpl_setStackFromBottomWithId_(ASRecyclerViewImpl *self, id objValue) {
  if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXLinearLayoutManager class]]) {
    [((ADXLinearLayoutManager *) nil_chk(((ADXLinearLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXLinearLayoutManager class])))) setStackFromEndWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  }
}

void ASRecyclerViewImpl_setReverseLayoutWithId_(ASRecyclerViewImpl *self, id objValue) {
  if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXLinearLayoutManager class]]) {
    [((ADXLinearLayoutManager *) nil_chk(((ADXLinearLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXLinearLayoutManager class])))) setReverseLayoutWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  }
  if ([[((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager] isKindOfClass:[ADXStaggeredGridLayoutManager class]]) {
    [((ADXStaggeredGridLayoutManager *) nil_chk(((ADXStaggeredGridLayoutManager *) cast_chk([((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager], [ADXStaggeredGridLayoutManager class])))) setReverseLayoutWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  }
}

jboolean ASRecyclerViewImpl_isReverseLayout(ASRecyclerViewImpl *self) {
  ADXRecyclerView_LayoutManager *layoutManager = [((ADXRecyclerView *) nil_chk(self->recyclerView_)) getLayoutManager];
  if ([layoutManager isKindOfClass:[ADXLinearLayoutManager class]]) {
    return [((ADXLinearLayoutManager *) nil_chk(((ADXLinearLayoutManager *) layoutManager))) getReverseLayout];
  }
  if ([layoutManager isKindOfClass:[ADXStaggeredGridLayoutManager class]]) {
    return [((ADXStaggeredGridLayoutManager *) nil_chk(((ADXStaggeredGridLayoutManager *) layoutManager))) getReverseLayout];
  }
  return false;
}

void ASRecyclerViewImpl_setFooterDisabledWithId_(ASRecyclerViewImpl *self, id objValue) {
  self->footerDisabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  ASRecyclerViewImpl_reloadTable(self);
}

void ASRecyclerViewImpl_setHeaderDisabledWithId_(ASRecyclerViewImpl *self, id objValue) {
  self->headerDisabled_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  ASRecyclerViewImpl_reloadTable(self);
}

void ASRecyclerViewImpl_nativeCreateWithJavaUtilMap_(ASRecyclerViewImpl *self, id<JavaUtilMap> params) {
  self->scrollProviderType_ = JreLoadEnum(ASRecyclerViewImpl_ScrollProviderType, READ_ONLY);
  ASRecyclerViewImpl_nativeCreateRecycleViewWithJavaUtilMap_(self, params);
  self->uiView_ = [self nativescrollViewCreateWithBoolean:false withBoolean:true withBoolean:false];
  ASRecyclerViewImpl_UIScrollViewDelegate *mainUIScrollViewDelegate = new_ASRecyclerViewImpl_UIScrollViewDelegate_initWithASRecyclerViewImpl_(self);
  [mainUIScrollViewDelegate nativeScrollChangeListenerWithId:self->uiView_];
  self->recyclerWrapperView_ = [self createView];
  ASViewGroupImpl_nativeAddViewWithId_withId_(self->uiView_, self->recyclerWrapperView_);
  self->scrollProvider_ = [self nativescrollViewCreateWithBoolean:true withBoolean:false withBoolean:false];
  ASViewGroupImpl_nativeAddViewWithId_withId_(self->recyclerWrapperView_, self->scrollProvider_);
}

void ASRecyclerViewImpl_stopScrollEndWithId_(ASRecyclerViewImpl *self, id scrollView) {
  [((UIScrollView*) scrollView) setContentOffset:((UIScrollView*) scrollView).contentOffset animated:NO];
}

void ASRecyclerViewImpl_stopScrollStartWithId_(ASRecyclerViewImpl *self, id scrollView) {
  [((UIScrollView*) scrollView) setContentOffset:CGPointZero animated:NO];
}

void ASRecyclerViewImpl_updateContentSizeWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  
  if ([self isHorizontal]) {
    if (scrollView.contentSize.width < range) {
      scrollView.contentSize = CGSizeMake(range, scrollView.contentSize.height);
    }
  } else {
    if (scrollView.contentSize.height < range) {
      scrollView.contentSize = CGSizeMake(scrollView.contentSize.width, range);
    }
  }
}

void ASRecyclerViewImpl_applyTransformWithId_withId_(ASRecyclerViewImpl *self, id uiView, id view) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  [(UIView*)view setTransform:CGAffineTransformIdentity];
  
  [(UIView*)view setFrame:CGRectMake(0, 0, ((UIView*)view).frame.size.width, ((UIView*)view).frame.size.height)];
  
  if ([self isHorizontal]) {
    CGAffineTransform transform = CGAffineTransformTranslate(CGAffineTransformIdentity, scrollView.contentOffset.x, 0);
    [(UIView*)view setTransform:transform];
  } else {
    CGAffineTransform transform = CGAffineTransformTranslate(CGAffineTransformIdentity, 0, scrollView.contentOffset.y);
    [(UIView*)view setTransform:transform];
  }
}

void ASRecyclerViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASRecyclerViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"orientation" }, 1)) {
    case 0:
    if ([self isHorizontal]) {
      ASRecyclerViewImpl_showHorizontalScrollBar(self);
    }
    else {
      ASRecyclerViewImpl_showVerticalScrollBar(self);
    }
    break;
    default:
    break;
  }
}

void ASRecyclerViewImpl_showVerticalScrollBar(ASRecyclerViewImpl *self) {
  UIScrollView* scrollView = ((UIScrollView*) self->scrollProvider_);
  scrollView.showsVerticalScrollIndicator=YES;
  scrollView.showsHorizontalScrollIndicator=NO;
}

void ASRecyclerViewImpl_showHorizontalScrollBar(ASRecyclerViewImpl *self) {
  UIScrollView* scrollView = ((UIScrollView*) self->scrollProvider_);
  scrollView.showsVerticalScrollIndicator=NO;
  scrollView.showsHorizontalScrollIndicator=YES;
}

void ASRecyclerViewImpl_setCustomHandleScrollWithInt_withInt_withInt_withInt_(ASRecyclerViewImpl *self, jint dpos, jint range, jint offset, jint extent) {
  [self updateContentSizeOfScrolledProviderWithInt:range];
  ASRecyclerViewImpl_setSelectionWithInt_withInt_withId_(self, offset, offset, self->scrollProvider_);
}

jint ASRecyclerViewImpl_setSelectionWithInt_withInt_withId_(ASRecyclerViewImpl *self, jint percoffset, jint offset, id view) {
  jint selection = percoffset;
  jint oldScrollCorrect = percoffset;
  if (view == self->scrollProvider_) {
    selection = offset;
    oldScrollCorrect = -1;
  }
  if (selection >= 0) {
    if ([self isHorizontal]) {
      ASRecyclerViewImpl_setContentOffsetXWithInt_withId_(self, selection, view);
    }
    else {
      ASRecyclerViewImpl_setContentOffsetYWithInt_withId_(self, selection, view);
    }
    if (ASRecyclerViewImpl_getSelection(self) > 0 && view == self->scrollProvider_) {
      ASViewImpl_nativeBringToFrontWithId_(view);
      ASRecyclerViewImpl_flashScrollIndicatorsWithId_(self, view);
    }
  }
  return oldScrollCorrect;
}

void ASRecyclerViewImpl_setContentSizeWidthWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  scrollView.contentSize = CGSizeMake(range, scrollView.contentSize.height);
}

void ASRecyclerViewImpl_setContentSizeHeightWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  scrollView.contentSize = CGSizeMake(scrollView.contentSize.width, range);
}

void ASRecyclerViewImpl_setMaximumWithInt_(ASRecyclerViewImpl *self, jint maxiumum) {
}

jint ASRecyclerViewImpl_getMaximum(ASRecyclerViewImpl *self) {
  return 0;
}

jint ASRecyclerViewImpl_getSelection(ASRecyclerViewImpl *self) {
  return [self isHorizontal] ? ASRecyclerViewImpl_getContentOffsetXWithId_(self, self->uiView_) : ASRecyclerViewImpl_getContentOffsetYWithId_(self, self->uiView_);
}

void ASRecyclerViewImpl_flashScrollIndicatorsWithId_(ASRecyclerViewImpl *self, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  [UIView animateWithDuration:0.01 animations:^ {
    [scrollView flashScrollIndicators];
  }];
}

void ASRecyclerViewImpl_setContentOffsetXWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  [scrollView setContentOffset:CGPointMake(range, scrollView.contentOffset.y) animated:NO];
}

void ASRecyclerViewImpl_setContentOffsetYWithInt_withId_(ASRecyclerViewImpl *self, jint range, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  [scrollView setContentOffset:CGPointMake(scrollView.contentOffset.x, range) animated:NO];
}

jint ASRecyclerViewImpl_getContentOffsetXWithId_(ASRecyclerViewImpl *self, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  return scrollView.contentOffset.x;
}

jint ASRecyclerViewImpl_getContentOffsetYWithId_(ASRecyclerViewImpl *self, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  return scrollView.contentOffset.y;
}

jint ASRecyclerViewImpl_getContentHeightWithId_(ASRecyclerViewImpl *self, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  return scrollView.contentSize.height;
}

jint ASRecyclerViewImpl_getContentWidthWithId_(ASRecyclerViewImpl *self, id uiView) {
  UIScrollView* scrollView = ((UIScrollView*) uiView);
  return scrollView.contentSize.width;
}

jint ASRecyclerViewImpl_getThumbWidth(ASRecyclerViewImpl *self) {
  return 10;
}

void ASRecyclerViewImpl_setMinimumWithInt_(ASRecyclerViewImpl *self, jint i) {
}

void ASRecyclerViewImpl_setCustomMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_withInt_withInt_(ASRecyclerViewImpl *self, jint range, jint rangeDiff, jint l, jint t, jint r, jint b) {
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(self->recyclerWrapperView_, l, t, r, b);
  ASRecyclerViewImpl_updateContentSizeWithInt_(self, rangeDiff);
  [self updateContentSizeOfScrolledProviderWithInt:range];
  ASRecyclerViewImpl_applyTransformWithId_withId_(self, self->uiView_, self->recyclerWrapperView_);
}

void ASRecyclerViewImpl_updateContentSizeWithInt_(ASRecyclerViewImpl *self, jint rangeDiff) {
  if ([self isHorizontal]) {
    jint screenWidth = ASPluginInvoker_getScreenWidth();
    jint contentWidth = ASRecyclerViewImpl_getContentWidthWithId_(self, self->uiView_);
    if (ASRecyclerViewImpl_getContentOffsetXWithId_(self, self->uiView_) + screenWidth + 200 > contentWidth) {
      ASRecyclerViewImpl_setContentSizeWidthWithInt_withId_(self, contentWidth + screenWidth * 2, self->uiView_);
    }
    jboolean isReverseLayout = ASRecyclerViewImpl_isReverseLayout(self);
    if (isReverseLayout) {
      if (rangeDiff > 0) {
        ASRecyclerViewImpl_setContentSizeWidthWithInt_withId_(self, ASRecyclerViewImpl_getContentWidthWithId_(self, self->uiView_) + rangeDiff, self->uiView_);
        self->oldScrollPos_ = ASRecyclerViewImpl_getContentOffsetXWithId_(self, self->uiView_) + rangeDiff;
        ASRecyclerViewImpl_setContentOffsetXWithInt_withId_(self, self->oldScrollPos_, self->uiView_);
      }
    }
  }
  else {
    jint screenHeight = ASPluginInvoker_getScreenHeight();
    jint contentHeight = ASRecyclerViewImpl_getContentHeightWithId_(self, self->uiView_);
    if (ASRecyclerViewImpl_getContentOffsetYWithId_(self, self->uiView_) + screenHeight + 200 > contentHeight) {
      ASRecyclerViewImpl_setContentSizeHeightWithInt_withId_(self, contentHeight + screenHeight * 2, self->uiView_);
    }
    jboolean isReverseLayout = ASRecyclerViewImpl_isReverseLayout(self);
    if (isReverseLayout) {
      if (rangeDiff > 0) {
        ASRecyclerViewImpl_setContentSizeHeightWithInt_withId_(self, ASRecyclerViewImpl_getContentHeightWithId_(self, self->uiView_) + rangeDiff, self->uiView_);
        self->oldScrollPos_ = ASRecyclerViewImpl_getContentOffsetYWithId_(self, self->uiView_) + rangeDiff;
        ASRecyclerViewImpl_setContentOffsetYWithInt_withId_(self, self->oldScrollPos_, self->uiView_);
      }
    }
  }
}

jint ASRecyclerViewImpl_getScrollBarMaxWithId_withFloat_(ASRecyclerViewImpl *self, id view, jfloat scrollBarDimen) {
  jint contentDimen = [self isHorizontal] ? ASRecyclerViewImpl_getContentWidthWithId_(self, view) : ASRecyclerViewImpl_getContentHeightWithId_(self, view);
  jfloat maxVal = contentDimen - scrollBarDimen;
  if (maxVal < 0) {
    return 0;
  }
  return JreFpToInt(maxVal);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl)

@implementation ASRecyclerViewImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRecyclerViewImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRecyclerViewImpl;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_Orientation = { "Orientation", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_Orientation;
}

@end

void ASRecyclerViewImpl_Orientation_init(ASRecyclerViewImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASRecyclerViewImpl_Orientation *new_ASRecyclerViewImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_Orientation, init)
}

ASRecyclerViewImpl_Orientation *create_ASRecyclerViewImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_Orientation)

@implementation ASRecyclerViewImpl_RecyclerViewExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_RecyclerViewExt_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASRecyclerViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASRecyclerViewImpl_RecyclerViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASRecyclerViewImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASRecyclerViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_RecyclerViewExt = { "RecyclerViewExt", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_RecyclerViewExt;
}

@end

void ASRecyclerViewImpl_RecyclerViewExt_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_RecyclerViewExt *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXRecyclerView_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASRecyclerViewImpl_RecyclerViewExt *new_ASRecyclerViewImpl_RecyclerViewExt_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_RecyclerViewExt, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_RecyclerViewExt *create_ASRecyclerViewImpl_RecyclerViewExt_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_RecyclerViewExt, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_RecyclerViewExt)

J2OBJC_INITIALIZED_DEFN(ASRecyclerViewImpl_ScrollProviderType)

ASRecyclerViewImpl_ScrollProviderType *ASRecyclerViewImpl_ScrollProviderType_values_[2];

@implementation ASRecyclerViewImpl_ScrollProviderType

+ (IOSObjectArray *)values {
  return ASRecyclerViewImpl_ScrollProviderType_values();
}

+ (ASRecyclerViewImpl_ScrollProviderType *)valueOfWithNSString:(NSString *)name {
  return ASRecyclerViewImpl_ScrollProviderType_valueOfWithNSString_(name);
}

- (ASRecyclerViewImpl_ScrollProviderType_Enum)toNSEnum {
  return (ASRecyclerViewImpl_ScrollProviderType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LASRecyclerViewImpl_ScrollProviderType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_ScrollProviderType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "READ_ONLY", "LASRecyclerViewImpl_ScrollProviderType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "DRAGABBLE", "LASRecyclerViewImpl_ScrollProviderType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ASRecyclerViewImpl_ScrollProviderType, READ_ONLY), &JreEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE), "LASRecyclerViewImpl;", "Ljava/lang/Enum<Lcom/ashera/recycleview/RecyclerViewImpl$ScrollProviderType;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_ScrollProviderType = { "ScrollProviderType", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x4018, 2, 2, 4, -1, -1, 5, -1 };
  return &_ASRecyclerViewImpl_ScrollProviderType;
}

+ (void)initialize {
  if (self == [ASRecyclerViewImpl_ScrollProviderType class]) {
    JreEnum(ASRecyclerViewImpl_ScrollProviderType, READ_ONLY) = new_ASRecyclerViewImpl_ScrollProviderType_initWithNSString_withInt_(JreEnumConstantName(ASRecyclerViewImpl_ScrollProviderType_class_(), 0), 0);
    JreEnum(ASRecyclerViewImpl_ScrollProviderType, DRAGABBLE) = new_ASRecyclerViewImpl_ScrollProviderType_initWithNSString_withInt_(JreEnumConstantName(ASRecyclerViewImpl_ScrollProviderType_class_(), 1), 1);
    J2OBJC_SET_INITIALIZED(ASRecyclerViewImpl_ScrollProviderType)
  }
}

@end

void ASRecyclerViewImpl_ScrollProviderType_initWithNSString_withInt_(ASRecyclerViewImpl_ScrollProviderType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

ASRecyclerViewImpl_ScrollProviderType *new_ASRecyclerViewImpl_ScrollProviderType_initWithNSString_withInt_(NSString *__name, jint __ordinal) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_ScrollProviderType, initWithNSString_withInt_, __name, __ordinal)
}

IOSObjectArray *ASRecyclerViewImpl_ScrollProviderType_values() {
  ASRecyclerViewImpl_ScrollProviderType_initialize();
  return [IOSObjectArray arrayWithObjects:ASRecyclerViewImpl_ScrollProviderType_values_ count:2 type:ASRecyclerViewImpl_ScrollProviderType_class_()];
}

ASRecyclerViewImpl_ScrollProviderType *ASRecyclerViewImpl_ScrollProviderType_valueOfWithNSString_(NSString *name) {
  ASRecyclerViewImpl_ScrollProviderType_initialize();
  for (int i = 0; i < 2; i++) {
    ASRecyclerViewImpl_ScrollProviderType *e = ASRecyclerViewImpl_ScrollProviderType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ASRecyclerViewImpl_ScrollProviderType *ASRecyclerViewImpl_ScrollProviderType_fromOrdinal(NSUInteger ordinal) {
  ASRecyclerViewImpl_ScrollProviderType_initialize();
  if (ordinal >= 2) {
    return nil;
  }
  return ASRecyclerViewImpl_ScrollProviderType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_ScrollProviderType)

@implementation ASRecyclerViewImpl_ListAdapter

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_ListAdapter_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (jlong)getItemIdWithInt:(jint)position {
  if (ASRecyclerViewImpl_ListAdapter_isHeaderWithInt_(self, position) || ASRecyclerViewImpl_ListAdapter_isFooterWithInt_(self, position)) {
    return [super getItemIdWithInt:position];
  }
  if (this$0_->headerTemplate_ != nil && !this$0_->headerDisabled_) {
    position = position - 1;
  }
  return ASIdGenerator_getIdWithNSString_([((id<JavaUtilList>) nil_chk(this$0_->ids_)) getWithInt:position]);
}

- (void)onViewAttachedToWindowWithADXRecyclerView_ViewHolder:(ASRecyclerViewImpl_ViewHolder *)holder {
  [super onViewAttachedToWindowWithADXRecyclerView_ViewHolder:holder];
  [((ADView *) nil_chk(((ASRecyclerViewImpl_ViewHolder *) nil_chk(holder))->itemView_)) setVisibilityWithInt:ADView_VISIBLE];
}

- (void)onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:(ASRecyclerViewImpl_ViewHolder *)holder {
  [super onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:holder];
  [((ADView *) nil_chk(((ASRecyclerViewImpl_ViewHolder *) nil_chk(holder))->itemView_)) setVisibilityWithInt:ADView_GONE];
}

- (jint)getItemViewTypeWithInt:(jint)position {
  if (ASRecyclerViewImpl_ListAdapter_isHeaderWithInt_(self, position)) {
    return 1;
  }
  if (ASRecyclerViewImpl_ListAdapter_isFooterWithInt_(self, position)) {
    return 2;
  }
  return 0;
}

- (jboolean)isFooterWithInt:(jint)position {
  return ASRecyclerViewImpl_ListAdapter_isFooterWithInt_(self, position);
}

- (jboolean)isHeaderWithInt:(jint)position {
  return ASRecyclerViewImpl_ListAdapter_isHeaderWithInt_(self, position);
}

- (ASRecyclerViewImpl_ViewHolder *)onCreateViewHolderWithADViewGroup:(ADViewGroup *)parent
                                                             withInt:(jint)viewType {
  id<ASIWidget> listItem = nil;
  id<JavaUtilList> viewHolderIds;
  if (viewType == 1) {
    listItem = this$0_->headerTemplate_;
    viewHolderIds = this$0_->headerViewHolderIds_;
  }
  else if (viewType == 2) {
    listItem = this$0_->footerTemplate_;
    viewHolderIds = this$0_->footerViewHolderIds_;
  }
  else {
    listItem = [this$0_ getListItem];
    viewHolderIds = this$0_->viewHolderIds_;
  }
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk(listItem)) loadLazyWidgetsWithASHasWidgets:this$0_];
  if ([((id<JavaUtilList>) nil_chk(this$0_->widgets_)) indexOfWithId:widget] == -1) {
    [((id<JavaUtilList>) nil_chk(this$0_->widgets_)) addWithId:widget];
  }
  ADView *itemView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  [this$0_ setItemViewParamsWithASIWidget:widget withADView:itemView];
  ASRecyclerViewImpl_ViewHolder *viewHolder = new_ASRecyclerViewImpl_ViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(this$0_, widget, itemView, viewHolderIds);
  return viewHolder;
}

- (void)onBindViewHolderWithADXRecyclerView_ViewHolder:(ASRecyclerViewImpl_ViewHolder *)viewHolder
                                               withInt:(jint)position {
  if (ASRecyclerViewImpl_ListAdapter_isHeaderWithInt_(self, position) || ASRecyclerViewImpl_ListAdapter_isFooterWithInt_(self, position)) {
    [this$0_ setAttributeOnViewHolderWithASWidgetViewHolder:((ASRecyclerViewImpl_ViewHolder *) nil_chk(viewHolder))->widgetViewHolder_ withASLoopParam:nil];
    return;
  }
  if (this$0_->headerTemplate_ != nil && !this$0_->headerDisabled_) {
    position = position - 1;
  }
  [this$0_ setAttributeOnViewHolderWithASWidgetViewHolder:((ASRecyclerViewImpl_ViewHolder *) nil_chk(viewHolder))->widgetViewHolder_ withInt:position];
}

- (jint)getItemCount {
  jint size = [((id<JavaUtilList>) nil_chk(this$0_->dataList_)) size];
  if (this$0_->headerTemplate_ != nil && !this$0_->headerDisabled_) {
    size++;
  }
  if (this$0_->footerTemplate_ != nil && !this$0_->footerDisabled_) {
    size++;
  }
  return size;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_ViewHolder;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(getItemIdWithInt:);
  methods[2].selector = @selector(onViewAttachedToWindowWithADXRecyclerView_ViewHolder:);
  methods[3].selector = @selector(onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:);
  methods[4].selector = @selector(getItemViewTypeWithInt:);
  methods[5].selector = @selector(isFooterWithInt:);
  methods[6].selector = @selector(isHeaderWithInt:);
  methods[7].selector = @selector(onCreateViewHolderWithADViewGroup:withInt:);
  methods[8].selector = @selector(onBindViewHolderWithADXRecyclerView_ViewHolder:withInt:);
  methods[9].selector = @selector(getItemCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "getItemId", "I", "onViewAttachedToWindow", "LASRecyclerViewImpl_ViewHolder;", "onViewDetachedFromWindow", "getItemViewType", "isFooter", "isHeader", "onCreateViewHolder", "LADViewGroup;I", "onBindViewHolder", "LASRecyclerViewImpl_ViewHolder;I", "Landroidx/recyclerview/widget/RecyclerView$Adapter<Lcom/ashera/recycleview/RecyclerViewImpl$ViewHolder;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_ListAdapter = { "ListAdapter", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 10, 1, 0, -1, -1, 13, -1 };
  return &_ASRecyclerViewImpl_ListAdapter;
}

@end

void ASRecyclerViewImpl_ListAdapter_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_ListAdapter *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXRecyclerView_Adapter_init(self);
}

ASRecyclerViewImpl_ListAdapter *new_ASRecyclerViewImpl_ListAdapter_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_ListAdapter, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_ListAdapter *create_ASRecyclerViewImpl_ListAdapter_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_ListAdapter, initWithASRecyclerViewImpl_, outer$)
}

jboolean ASRecyclerViewImpl_ListAdapter_isFooterWithInt_(ASRecyclerViewImpl_ListAdapter *self, jint position) {
  return !self->this$0_->footerDisabled_ && self->this$0_->footerTemplate_ != nil && position == [self getItemCount] - 1;
}

jboolean ASRecyclerViewImpl_ListAdapter_isHeaderWithInt_(ASRecyclerViewImpl_ListAdapter *self, jint position) {
  return !self->this$0_->headerDisabled_ && self->this$0_->headerTemplate_ != nil && position == 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_ListAdapter)

@implementation ASRecyclerViewImpl_ViewHolder

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$
                             withASIWidget:(id<ASIWidget>)widget
                                withADView:(ADView *)itemView
                          withJavaUtilList:(id<JavaUtilList>)viewHolderIds {
  ASRecyclerViewImpl_ViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(self, outer$, widget, itemView, viewHolderIds);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:withASIWidget:withADView:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widgetViewHolder_", "LASWidgetViewHolder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;LASIWidget;LADView;LJavaUtilList;", "(Lcom/ashera/widget/IWidget;Lr/android/view/View;Ljava/util/List<Ljava/lang/String;>;)V", "LASRecyclerViewImpl;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_ViewHolder = { "ViewHolder", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 1, 1, 2, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_ViewHolder;
}

@end

void ASRecyclerViewImpl_ViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(ASRecyclerViewImpl_ViewHolder *self, ASRecyclerViewImpl *outer$, id<ASIWidget> widget, ADView *itemView, id<JavaUtilList> viewHolderIds) {
  ADXRecyclerView_ViewHolder_initWithADView_(self, itemView);
  if (viewHolderIds != nil) {
    self->widgetViewHolder_ = [outer$ createWidgetViewHolderWithJavaUtilList:viewHolderIds withASIWidget:widget];
  }
}

ASRecyclerViewImpl_ViewHolder *new_ASRecyclerViewImpl_ViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(ASRecyclerViewImpl *outer$, id<ASIWidget> widget, ADView *itemView, id<JavaUtilList> viewHolderIds) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_ViewHolder, initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_, outer$, widget, itemView, viewHolderIds)
}

ASRecyclerViewImpl_ViewHolder *create_ASRecyclerViewImpl_ViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(ASRecyclerViewImpl *outer$, id<ASIWidget> widget, ADView *itemView, id<JavaUtilList> viewHolderIds) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_ViewHolder, initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_, outer$, widget, itemView, viewHolderIds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_ViewHolder)

@implementation ASRecyclerViewImpl_1

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (jint)getSpanSizeWithInt:(jint)position {
  if (this$0_->headerTemplate_ != nil && position == 0) {
    return this$0_->spanCount_;
  }
  return 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(getSpanSizeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "getSpanSize", "I", "setLayoutManagerWithId:" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_1 = { "", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASRecyclerViewImpl_1;
}

@end

void ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_1 *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXGridLayoutManager_SpanSizeLookup_init(self);
}

ASRecyclerViewImpl_1 *new_ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_1, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_1 *create_ASRecyclerViewImpl_1_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_1, initWithASRecyclerViewImpl_, outer$)
}

@implementation ASRecyclerViewImpl_2

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (jint)getSpanSizeWithInt:(jint)position {
  if (this$0_->headerTemplate_ != nil && position == 0) {
    return this$0_->spanCount_;
  }
  if (this$0_->footerTemplate_ != nil && !this$0_->footerDisabled_ && position == [((ADXRecyclerView_Adapter *) nil_chk(this$0_->adapter_)) getItemCount] - 1) {
    return this$0_->spanCount_;
  }
  return 1;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(getSpanSizeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "getSpanSize", "I", "setLayoutWithId:" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_2 = { "", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASRecyclerViewImpl_2;
}

@end

void ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_2 *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXGridLayoutManager_SpanSizeLookup_init(self);
}

ASRecyclerViewImpl_2 *new_ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_2, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_2 *create_ASRecyclerViewImpl_2_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_2, initWithASRecyclerViewImpl_, outer$)
}

@implementation ASRecyclerViewImpl_SectionHolder

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_SectionHolder_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "sectionConfigAttrs_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x0, -1, -1, 1, -1 },
    { "section_", "LADXSection;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "loopParam_", "LASLoopParam;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_SectionHolder = { "SectionHolder", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x0, 1, 3, 0, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_SectionHolder;
}

@end

void ASRecyclerViewImpl_SectionHolder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_SectionHolder *self, ASRecyclerViewImpl *outer$) {
  NSObject_init(self);
}

ASRecyclerViewImpl_SectionHolder *new_ASRecyclerViewImpl_SectionHolder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_SectionHolder, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_SectionHolder *create_ASRecyclerViewImpl_SectionHolder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_SectionHolder, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_SectionHolder)

@implementation ASRecyclerViewImpl_GenericItem

- (jboolean)isModified {
  return modified_;
}

- (void)setModifiedWithBoolean:(jboolean)modified {
  self->modified_ = modified;
}

- (void)setNumberOfColumsWithInt:(jint)numberOfColums {
  self->numberOfColums_ = numberOfColums;
}

- (jint)getSpanSizeWithInt:(jint)spanCount
                   withInt:(jint)position {
  return JreIntDiv(spanCount, numberOfColums_);
}

- (jint)getMargin {
  return margin_;
}

- (void)setMarginWithInt:(jint)margin {
  self->margin_ = margin;
}

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$
                              withNSString:(NSString *)layout
                             withASIWidget:(id<ASIWidget>)template_
                           withASLoopParam:(ASLoopParam *)loopParam
                          withJavaUtilList:(id<JavaUtilList>)viewHolderIds {
  ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, outer$, layout, template_, loopParam, viewHolderIds);
  return self;
}

- (id<JavaUtilList>)getViewHolderIds {
  return viewHolderIds_;
}

- (ASLoopParam *)getLoopParam {
  return loopParam_;
}

- (void)bindWithADXGroupieViewHolder:(ASRecyclerViewImpl_GroupieViewHolder *)viewHolder
                             withInt:(jint)position {
  ASRecyclerViewImpl_GenericItem_bindWithASRecyclerViewImpl_GroupieViewHolder_withInt_(self, viewHolder, position);
}

- (jint)getLayout {
  return ASIdGenerator_getIdWithNSString_(layout_);
}

- (id<ASIWidget>)getTemplate {
  return template__;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 7, -1, 8, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 9, -1, -1 },
    { NULL, "LASLoopParam;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(isModified);
  methods[1].selector = @selector(setModifiedWithBoolean:);
  methods[2].selector = @selector(setNumberOfColumsWithInt:);
  methods[3].selector = @selector(getSpanSizeWithInt:withInt:);
  methods[4].selector = @selector(getMargin);
  methods[5].selector = @selector(setMarginWithInt:);
  methods[6].selector = @selector(initWithASRecyclerViewImpl:withNSString:withASIWidget:withASLoopParam:withJavaUtilList:);
  methods[7].selector = @selector(getViewHolderIds);
  methods[8].selector = @selector(getLoopParam);
  methods[9].selector = @selector(bindWithADXGroupieViewHolder:withInt:);
  methods[10].selector = @selector(getLayout);
  methods[11].selector = @selector(getTemplate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "template__", "LASIWidget;", .constantValue.asLong = 0, 0x2, 12, -1, -1, -1 },
    { "loopParam_", "LASLoopParam;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewHolderIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
    { "layout_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "margin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "modified_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numberOfColums_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setModified", "Z", "setNumberOfColums", "I", "getSpanSize", "II", "setMargin", "LASRecyclerViewImpl;LNSString;LASIWidget;LASLoopParam;LJavaUtilList;", "(Ljava/lang/String;Lcom/ashera/widget/IWidget;Lcom/ashera/model/LoopParam;Ljava/util/List<Ljava/lang/String;>;)V", "()Ljava/util/List<Ljava/lang/String;>;", "bind", "LASRecyclerViewImpl_GroupieViewHolder;I", "template", "Ljava/util/List<Ljava/lang/String;>;", "LASRecyclerViewImpl;", "Lcom/xwray/groupie/Item<Lcom/ashera/recycleview/RecyclerViewImpl$GroupieViewHolder;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_GenericItem = { "GenericItem", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 12, 8, 14, -1, -1, 15, -1 };
  return &_ASRecyclerViewImpl_GenericItem;
}

@end

void ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(ASRecyclerViewImpl_GenericItem *self, ASRecyclerViewImpl *outer$, NSString *layout, id<ASIWidget> template_, ASLoopParam *loopParam, id<JavaUtilList> viewHolderIds) {
  self->this$0_ = outer$;
  ADXItem_init(self);
  self->numberOfColums_ = 1;
  self->template__ = template_;
  self->loopParam_ = loopParam;
  self->layout_ = layout;
  self->viewHolderIds_ = viewHolderIds;
}

ASRecyclerViewImpl_GenericItem *new_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(ASRecyclerViewImpl *outer$, NSString *layout, id<ASIWidget> template_, ASLoopParam *loopParam, id<JavaUtilList> viewHolderIds) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_GenericItem, initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_, outer$, layout, template_, loopParam, viewHolderIds)
}

ASRecyclerViewImpl_GenericItem *create_ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(ASRecyclerViewImpl *outer$, NSString *layout, id<ASIWidget> template_, ASLoopParam *loopParam, id<JavaUtilList> viewHolderIds) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_GenericItem, initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_, outer$, layout, template_, loopParam, viewHolderIds)
}

void ASRecyclerViewImpl_GenericItem_bindWithASRecyclerViewImpl_GroupieViewHolder_withInt_(ASRecyclerViewImpl_GenericItem *self, ASRecyclerViewImpl_GroupieViewHolder *viewHolder, jint position) {
  [self->this$0_ setAttributeOnViewHolderWithASWidgetViewHolder:((ASRecyclerViewImpl_GroupieViewHolder *) nil_chk(viewHolder))->widgetViewHolder_ withASLoopParam:self->loopParam_ withBoolean:self->modified_];
  self->modified_ = false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_GenericItem)

@implementation ASRecyclerViewImpl_GenericExpandableItem

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$
                              withNSString:(NSString *)layout
                             withASIWidget:(id<ASIWidget>)template_
                           withASLoopParam:(ASLoopParam *)loopParam
                          withJavaUtilList:(id<JavaUtilList>)viewHolderIds
                          withJavaUtilList:(id<JavaUtilList>)onClickIds {
  ASRecyclerViewImpl_GenericExpandableItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_(self, outer$, layout, template_, loopParam, viewHolderIds, onClickIds);
  return self;
}

- (void)setExpandableGroupWithADXExpandableGroup:(ADXExpandableGroup *)expandableGroup {
  self->expandableGroup_ = expandableGroup;
}

- (void)bindWithADXGroupieViewHolder:(ASRecyclerViewImpl_GroupieViewHolder *)viewHolder
                             withInt:(jint)position {
  ASRecyclerViewImpl_GenericItem_bindWithASRecyclerViewImpl_GroupieViewHolder_withInt_(self, viewHolder, position);
  if (onClickIds_ != nil) {
    id<ASIWidget> widget = ((ASWidgetViewHolder *) nil_chk(((ASRecyclerViewImpl_GroupieViewHolder *) nil_chk(viewHolder))->widgetViewHolder_))->widget_;
    for (NSString * __strong onClickId in onClickIds_) {
      if (![((NSString *) nil_chk(onClickId)) java_hasPrefix:@"@+id/"]) {
        onClickId = JreStrcat("$$", @"@+id/", onClickId);
      }
      id<ASIWidget> onClickWidget = widget;
      if (![onClickId isEqual:[((id<ASIWidget>) nil_chk(widget)) getId]]) {
        onClickWidget = [widget findWidgetByIdWithNSString:onClickId];
      }
      [((id<ASIWidget>) nil_chk(onClickWidget)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([widget getLocalName], @"onClick") withId:new_ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(self, position, onClickWidget) withBoolean:true];
      [onClickWidget setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([widget getLocalName], @"selected") withId:JavaLangBoolean_valueOfWithBoolean_([((ADXExpandableGroup *) nil_chk(self->expandableGroup_)) isExpanded]) withBoolean:true];
    }
  }
}

- (void)__javaClone:(ASRecyclerViewImpl_GenericExpandableItem *)original {
  [super __javaClone:original];
  JreRelease(this$1_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:withNSString:withASIWidget:withASLoopParam:withJavaUtilList:withJavaUtilList:);
  methods[1].selector = @selector(setExpandableGroupWithADXExpandableGroup:);
  methods[2].selector = @selector(bindWithADXGroupieViewHolder:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$1_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "expandableGroup_", "LADXExpandableGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onClickIds_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;LNSString;LASIWidget;LASLoopParam;LJavaUtilList;LJavaUtilList;", "(Ljava/lang/String;Lcom/ashera/widget/IWidget;Lcom/ashera/model/LoopParam;Ljava/util/List<Ljava/lang/String;>;Ljava/util/List<Ljava/lang/String;>;)V", "setExpandableGroup", "LADXExpandableGroup;", "bind", "LASRecyclerViewImpl_GroupieViewHolder;I", "Ljava/util/List<Ljava/lang/String;>;", "LASRecyclerViewImpl;", "LASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_GenericExpandableItem = { "GenericExpandableItem", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 3, 3, 7, 8, -1, -1, -1 };
  return &_ASRecyclerViewImpl_GenericExpandableItem;
}

@end

void ASRecyclerViewImpl_GenericExpandableItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_(ASRecyclerViewImpl_GenericExpandableItem *self, ASRecyclerViewImpl *outer$, NSString *layout, id<ASIWidget> template_, ASLoopParam *loopParam, id<JavaUtilList> viewHolderIds, id<JavaUtilList> onClickIds) {
  self->this$1_ = outer$;
  ASRecyclerViewImpl_GenericItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_(self, outer$, layout, template_, loopParam, viewHolderIds);
  self->onClickIds_ = onClickIds;
}

ASRecyclerViewImpl_GenericExpandableItem *new_ASRecyclerViewImpl_GenericExpandableItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_(ASRecyclerViewImpl *outer$, NSString *layout, id<ASIWidget> template_, ASLoopParam *loopParam, id<JavaUtilList> viewHolderIds, id<JavaUtilList> onClickIds) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_GenericExpandableItem, initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_, outer$, layout, template_, loopParam, viewHolderIds, onClickIds)
}

ASRecyclerViewImpl_GenericExpandableItem *create_ASRecyclerViewImpl_GenericExpandableItem_initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_(ASRecyclerViewImpl *outer$, NSString *layout, id<ASIWidget> template_, ASLoopParam *loopParam, id<JavaUtilList> viewHolderIds, id<JavaUtilList> onClickIds) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_GenericExpandableItem, initWithASRecyclerViewImpl_withNSString_withASIWidget_withASLoopParam_withJavaUtilList_withJavaUtilList_, outer$, layout, template_, loopParam, viewHolderIds, onClickIds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_GenericExpandableItem)

@implementation ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener

- (instancetype)initWithASRecyclerViewImpl_GenericExpandableItem:(ASRecyclerViewImpl_GenericExpandableItem *)outer$
                                                         withInt:(jint)position
                                                   withASIWidget:(id<ASIWidget>)widget {
  ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(self, outer$, position, widget);
  return self;
}

- (void)onClickWithADView:(ADView *)arg0 {
  [((ADXRecyclerView *) nil_chk(this$0_->this$1_->recyclerView_)) requestLayout];
  [((ADXExpandableGroup *) nil_chk(this$0_->expandableGroup_)) setExpandedWithBoolean:![this$0_->expandableGroup_ isExpanded]];
  [((id<ASIWidget>) nil_chk(widget_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([widget_ getLocalName], @"selected") withId:JavaLangBoolean_valueOfWithBoolean_([((ADXExpandableGroup *) nil_chk(this$0_->expandableGroup_)) isExpanded]) withBoolean:true];
  [((id<ASIFragment>) nil_chk(this$0_->this$1_->fragment_)) remeasure];
}

- (void)__javaClone:(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl_GenericExpandableItem:withInt:withASIWidget:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl_GenericExpandableItem;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl_GenericExpandableItem;ILASIWidget;", "onClick", "LADView;", "LASRecyclerViewImpl_GenericExpandableItem;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener = { "ExpandableClickListener", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x12, 2, 3, 3, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener;
}

@end

void ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *self, ASRecyclerViewImpl_GenericExpandableItem *outer$, jint position, id<ASIWidget> widget) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->position_ = position;
  self->widget_ = widget;
}

ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *new_ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(ASRecyclerViewImpl_GenericExpandableItem *outer$, jint position, id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener, initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_, outer$, position, widget)
}

ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener *create_ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener_initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_(ASRecyclerViewImpl_GenericExpandableItem *outer$, jint position, id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener, initWithASRecyclerViewImpl_GenericExpandableItem_withInt_withASIWidget_, outer$, position, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_GenericExpandableItem_ExpandableClickListener)

@implementation ASRecyclerViewImpl_GroupieAdapter

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_GroupieAdapter_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (void)onViewAttachedToWindowWithADXRecyclerView_ViewHolder:(ASRecyclerViewImpl_GroupieViewHolder *)holder {
  [super onViewAttachedToWindowWithADXRecyclerView_ViewHolder:holder];
  [((ADView *) nil_chk(((ASRecyclerViewImpl_GroupieViewHolder *) nil_chk(holder))->itemView_)) setVisibilityWithInt:ADView_VISIBLE];
}

- (void)onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:(ASRecyclerViewImpl_GroupieViewHolder *)holder {
  [super onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:holder];
  [((ADView *) nil_chk(((ASRecyclerViewImpl_GroupieViewHolder *) nil_chk(holder))->itemView_)) setVisibilityWithInt:ADView_GONE];
}

- (ASRecyclerViewImpl_GroupieViewHolder *)onCreateViewHolderWithADViewGroup:(ADViewGroup *)parent
                                                                    withInt:(jint)viewType {
  ASRecyclerViewImpl_GenericItem *item = (ASRecyclerViewImpl_GenericItem *) cast_chk([self getItemForViewTypeWithInt:viewType], [ASRecyclerViewImpl_GenericItem class]);
  id<ASIWidget> widget = [((id<ASIWidget>) nil_chk([((ASRecyclerViewImpl_GenericItem *) nil_chk(item)) getTemplate])) loadLazyWidgetsWithASHasWidgets:this$0_ withInt:-1 withNSString:nil withASLoopParam:[item getLoopParam]];
  if ([((id<JavaUtilList>) nil_chk(this$0_->widgets_)) indexOfWithId:widget] == -1) {
    [((id<JavaUtilList>) nil_chk(this$0_->widgets_)) addWithId:widget];
  }
  ADView *itemView = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  [this$0_ setItemViewParamsWithASIWidget:widget withADView:itemView];
  ASRecyclerViewImpl_GroupieViewHolder *viewHolder = new_ASRecyclerViewImpl_GroupieViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(this$0_, widget, itemView, [item getViewHolderIds]);
  [widget storeInTempCacheWithNSString:@"insets" withId:JavaLangInteger_valueOfWithInt_([item getMargin])];
  return viewHolder;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_GroupieViewHolder;", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(onViewAttachedToWindowWithADXRecyclerView_ViewHolder:);
  methods[2].selector = @selector(onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:);
  methods[3].selector = @selector(onCreateViewHolderWithADViewGroup:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "onViewAttachedToWindow", "LASRecyclerViewImpl_GroupieViewHolder;", "onViewDetachedFromWindow", "onCreateViewHolder", "LADViewGroup;I", "Lcom/xwray/groupie/GroupAdapter<Lcom/ashera/recycleview/RecyclerViewImpl$GroupieViewHolder;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_GroupieAdapter = { "GroupieAdapter", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 4, 1, 0, -1, -1, 6, -1 };
  return &_ASRecyclerViewImpl_GroupieAdapter;
}

@end

void ASRecyclerViewImpl_GroupieAdapter_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_GroupieAdapter *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ADXGroupAdapter_init(self);
}

ASRecyclerViewImpl_GroupieAdapter *new_ASRecyclerViewImpl_GroupieAdapter_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_GroupieAdapter, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_GroupieAdapter *create_ASRecyclerViewImpl_GroupieAdapter_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_GroupieAdapter, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_GroupieAdapter)

@implementation ASRecyclerViewImpl_GroupieViewHolder

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$
                             withASIWidget:(id<ASIWidget>)widget
                                withADView:(ADView *)itemView
                          withJavaUtilList:(id<JavaUtilList>)viewHolderIds {
  ASRecyclerViewImpl_GroupieViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(self, outer$, widget, itemView, viewHolderIds);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:withASIWidget:withADView:withJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widgetViewHolder_", "LASWidgetViewHolder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;LASIWidget;LADView;LJavaUtilList;", "(Lcom/ashera/widget/IWidget;Lr/android/view/View;Ljava/util/List<Ljava/lang/String;>;)V", "LASRecyclerViewImpl;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_GroupieViewHolder = { "GroupieViewHolder", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 1, 1, 2, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_GroupieViewHolder;
}

@end

void ASRecyclerViewImpl_GroupieViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(ASRecyclerViewImpl_GroupieViewHolder *self, ASRecyclerViewImpl *outer$, id<ASIWidget> widget, ADView *itemView, id<JavaUtilList> viewHolderIds) {
  ADXGroupieViewHolder_initWithADView_(self, itemView);
  if (viewHolderIds != nil) {
    self->widgetViewHolder_ = [outer$ createWidgetViewHolderWithJavaUtilList:viewHolderIds withASIWidget:widget];
  }
}

ASRecyclerViewImpl_GroupieViewHolder *new_ASRecyclerViewImpl_GroupieViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(ASRecyclerViewImpl *outer$, id<ASIWidget> widget, ADView *itemView, id<JavaUtilList> viewHolderIds) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_GroupieViewHolder, initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_, outer$, widget, itemView, viewHolderIds)
}

ASRecyclerViewImpl_GroupieViewHolder *create_ASRecyclerViewImpl_GroupieViewHolder_initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_(ASRecyclerViewImpl *outer$, id<ASIWidget> widget, ADView *itemView, id<JavaUtilList> viewHolderIds) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_GroupieViewHolder, initWithASRecyclerViewImpl_withASIWidget_withADView_withJavaUtilList_, outer$, widget, itemView, viewHolderIds)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_GroupieViewHolder)

@implementation ASRecyclerViewImpl_OnScrollListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onScrollStateChangedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                        withInt:(jint)newState {
  if (action_ == nil || [action_ isEqual:@"onScrollStateChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrollStateChange"];
    id<JavaUtilMap> obj = [self getOnScrollStateChangeEventObjWithADXRecyclerView:recyclerView withInt:newState];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ recyclerView, JavaLangInteger_valueOfWithInt_(newState) } count:2 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)onScrolledWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                              withInt:(jint)dx
                              withInt:(jint)dy {
  if (action_ == nil || [action_ isEqual:@"onScrolled"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onScrolled"];
    id<JavaUtilMap> obj = [self getOnScrolledEventObjWithADXRecyclerView:recyclerView withInt:dx withInt:dy];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ recyclerView, JavaLangInteger_valueOfWithInt_(dx), JavaLangInteger_valueOfWithInt_(dy) } count:3 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnScrolledEventObjWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                                    withInt:(jint)dx
                                                    withInt:(jint)dy {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrolled"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"dx", JavaLangInteger_valueOfWithInt_(dx));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"dy", JavaLangInteger_valueOfWithInt_(dy));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrolled" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnScrollStateChangeEventObjWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                                             withInt:(jint)newState {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"scrollstatechange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"newState", JavaLangInteger_valueOfWithInt_(newState));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onScrollStateChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 6, 5, -1, 7, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 8, 3, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onScrollStateChangedWithADXRecyclerView:withInt:);
  methods[4].selector = @selector(onScrolledWithADXRecyclerView:withInt:withInt:);
  methods[5].selector = @selector(getOnScrolledEventObjWithADXRecyclerView:withInt:withInt:);
  methods[6].selector = @selector(getOnScrollStateChangeEventObjWithADXRecyclerView:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onScrollStateChanged", "LADXRecyclerView;I", "onScrolled", "LADXRecyclerView;II", "getOnScrolledEventObj", "(Landroidx/recyclerview/widget/RecyclerView;II)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnScrollStateChangeEventObj", "(Landroidx/recyclerview/widget/RecyclerView;I)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASRecyclerViewImpl;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_OnScrollListener = { "OnScrollListener", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0xa, 7, 4, 10, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_OnScrollListener;
}

@end

void ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(ASRecyclerViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue) {
  ADXRecyclerView_OnScrollListener_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASRecyclerViewImpl_OnScrollListener *new_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_OnScrollListener, initWithASIWidget_withNSString_, w, strValue)
}

ASRecyclerViewImpl_OnScrollListener *create_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_OnScrollListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(ASRecyclerViewImpl_OnScrollListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  ADXRecyclerView_OnScrollListener_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASRecyclerViewImpl_OnScrollListener *new_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_OnScrollListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASRecyclerViewImpl_OnScrollListener *create_ASRecyclerViewImpl_OnScrollListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_OnScrollListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_OnScrollListener)

@implementation ASRecyclerViewImpl_RecyclerViewCommandBuilder

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_RecyclerViewCommandBuilder_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setOrientationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setOnScrollStateChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onScrollStateChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setOnScrolledWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onScrolled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setHeaderDisabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"headerDisabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setFooterDisabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"footerDisabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setLayoutManagerWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutManager"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setViewHolderIdsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"viewHolderIds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setSpanCountWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"spanCount"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setLayoutWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)addSectionItemWithNSString:(NSString *)sectionId
                                                                 withNSString:(NSString *)itemConfigId
                                                                       withId:(id)item {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"addSectionItem"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"sectionId" withId:sectionId];
  (void) [wrapper putWithId:@"itemConfigId" withId:itemConfigId];
  (void) [wrapper putWithId:@"item" withId:item];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)removeSectionItemWithNSString:(NSString *)sectionId
                                                                    withNSString:(NSString *)itemConfigId
                                                                    withNSString:(NSString *)itemId {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"removeSectionItem"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"sectionId" withId:sectionId];
  (void) [wrapper putWithId:@"itemConfigId" withId:itemConfigId];
  (void) [wrapper putWithId:@"itemId" withId:itemId];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)removeAllItemsWithNSString:(NSString *)sectionId {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"removeAllItems"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"sectionId" withId:sectionId];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)updateSectionItemWithNSString:(NSString *)sectionId
                                                                    withNSString:(NSString *)itemConfigId
                                                                    withNSString:(NSString *)itemId
                                                                          withId:(id)item {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"updateSectionItem"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"sectionId" withId:sectionId];
  (void) [wrapper putWithId:@"itemConfigId" withId:itemConfigId];
  (void) [wrapper putWithId:@"itemId" withId:itemId];
  (void) [wrapper putWithId:@"item" withId:item];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setStackFromEndWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"stackFromEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)tryGetReverseLayout {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"reverseLayout"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isReverseLayout {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"reverseLayout"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)setReverseLayoutWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"reverseLayout"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)scrollToEndWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollToEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)scrollToTopWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollToTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRecyclerViewImpl_RecyclerViewCommandBuilder *)scrollToPositionWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollToPosition"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LASRecyclerViewImpl_RecyclerViewCommandBuilder;", 0x1, 25, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setOrientationWithNSString:);
  methods[3].selector = @selector(setOnScrollStateChangeWithNSString:);
  methods[4].selector = @selector(setOnScrolledWithNSString:);
  methods[5].selector = @selector(setHeaderDisabledWithBoolean:);
  methods[6].selector = @selector(setFooterDisabledWithBoolean:);
  methods[7].selector = @selector(setLayoutManagerWithNSString:);
  methods[8].selector = @selector(setViewHolderIdsWithNSString:);
  methods[9].selector = @selector(setSpanCountWithInt:);
  methods[10].selector = @selector(setLayoutWithNSString:);
  methods[11].selector = @selector(addSectionItemWithNSString:withNSString:withId:);
  methods[12].selector = @selector(removeSectionItemWithNSString:withNSString:withNSString:);
  methods[13].selector = @selector(removeAllItemsWithNSString:);
  methods[14].selector = @selector(updateSectionItemWithNSString:withNSString:withNSString:withId:);
  methods[15].selector = @selector(setStackFromEndWithBoolean:);
  methods[16].selector = @selector(tryGetReverseLayout);
  methods[17].selector = @selector(isReverseLayout);
  methods[18].selector = @selector(setReverseLayoutWithBoolean:);
  methods[19].selector = @selector(scrollToEndWithBoolean:);
  methods[20].selector = @selector(scrollToTopWithBoolean:);
  methods[21].selector = @selector(scrollToPositionWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "execute", "Z", "setOrientation", "LNSString;", "setOnScrollStateChange", "setOnScrolled", "setHeaderDisabled", "setFooterDisabled", "setLayoutManager", "setViewHolderIds", "setSpanCount", "I", "setLayout", "addSectionItem", "LNSString;LNSString;LNSObject;", "removeSectionItem", "LNSString;LNSString;LNSString;", "removeAllItems", "updateSectionItem", "LNSString;LNSString;LNSString;LNSObject;", "setStackFromEnd", "setReverseLayout", "scrollToEnd", "scrollToTop", "scrollToPosition", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/recycleview/RecyclerViewImpl$RecyclerViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_RecyclerViewCommandBuilder = { "RecyclerViewCommandBuilder", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 22, 1, 0, -1, -1, 26, -1 };
  return &_ASRecyclerViewImpl_RecyclerViewCommandBuilder;
}

@end

void ASRecyclerViewImpl_RecyclerViewCommandBuilder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_RecyclerViewCommandBuilder *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASRecyclerViewImpl_RecyclerViewCommandBuilder *new_ASRecyclerViewImpl_RecyclerViewCommandBuilder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_RecyclerViewCommandBuilder, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_RecyclerViewCommandBuilder *create_ASRecyclerViewImpl_RecyclerViewCommandBuilder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_RecyclerViewCommandBuilder, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_RecyclerViewCommandBuilder)

@implementation ASRecyclerViewImpl_RecyclerViewBean

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_RecyclerViewBean_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (void)setOrientationWithNSString:(NSString *)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOrientationWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnScrollStateChangeWithNSString:(NSString *)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnScrollStateChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnScrolledWithNSString:(NSString *)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnScrolledWithNSString:value])) executeWithBoolean:true];
}

- (void)setHeaderDisabledWithBoolean:(jboolean)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHeaderDisabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setFooterDisabledWithBoolean:(jboolean)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFooterDisabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setLayoutManagerWithNSString:(NSString *)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLayoutManagerWithNSString:value])) executeWithBoolean:true];
}

- (void)setViewHolderIdsWithNSString:(NSString *)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setViewHolderIdsWithNSString:value])) executeWithBoolean:true];
}

- (void)setSpanCountWithInt:(jint)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSpanCountWithInt:value])) executeWithBoolean:true];
}

- (void)setLayoutWithNSString:(NSString *)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLayoutWithNSString:value])) executeWithBoolean:true];
}

- (void)addSectionItemWithNSString:(NSString *)sectionId
                      withNSString:(NSString *)itemConfigId
                            withId:(id)item {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) addSectionItemWithNSString:sectionId withNSString:itemConfigId withId:item])) executeWithBoolean:true];
}

- (void)removeSectionItemWithNSString:(NSString *)sectionId
                         withNSString:(NSString *)itemConfigId
                         withNSString:(NSString *)itemId {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) removeSectionItemWithNSString:sectionId withNSString:itemConfigId withNSString:itemId])) executeWithBoolean:true];
}

- (void)removeAllItemsWithNSString:(NSString *)sectionId {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) removeAllItemsWithNSString:sectionId])) executeWithBoolean:true];
}

- (void)updateSectionItemWithNSString:(NSString *)sectionId
                         withNSString:(NSString *)itemConfigId
                         withNSString:(NSString *)itemId
                               withId:(id)item {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) updateSectionItemWithNSString:sectionId withNSString:itemConfigId withNSString:itemId withId:item])) executeWithBoolean:true];
}

- (void)setStackFromEndWithBoolean:(jboolean)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setStackFromEndWithBoolean:value])) executeWithBoolean:true];
}

- (id)isReverseLayout {
  return [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetReverseLayout])) executeWithBoolean:false])) isReverseLayout];
}

- (void)setReverseLayoutWithBoolean:(jboolean)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setReverseLayoutWithBoolean:value])) executeWithBoolean:true];
}

- (void)scrollToEndWithBoolean:(jboolean)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) scrollToEndWithBoolean:value])) executeWithBoolean:true];
}

- (void)scrollToTopWithBoolean:(jboolean)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) scrollToTopWithBoolean:value])) executeWithBoolean:true];
}

- (void)scrollToPositionWithInt:(jint)value {
  (void) [((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([((ASRecyclerViewImpl_RecyclerViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) scrollToPositionWithInt:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(setOrientationWithNSString:);
  methods[2].selector = @selector(setOnScrollStateChangeWithNSString:);
  methods[3].selector = @selector(setOnScrolledWithNSString:);
  methods[4].selector = @selector(setHeaderDisabledWithBoolean:);
  methods[5].selector = @selector(setFooterDisabledWithBoolean:);
  methods[6].selector = @selector(setLayoutManagerWithNSString:);
  methods[7].selector = @selector(setViewHolderIdsWithNSString:);
  methods[8].selector = @selector(setSpanCountWithInt:);
  methods[9].selector = @selector(setLayoutWithNSString:);
  methods[10].selector = @selector(addSectionItemWithNSString:withNSString:withId:);
  methods[11].selector = @selector(removeSectionItemWithNSString:withNSString:withNSString:);
  methods[12].selector = @selector(removeAllItemsWithNSString:);
  methods[13].selector = @selector(updateSectionItemWithNSString:withNSString:withNSString:withId:);
  methods[14].selector = @selector(setStackFromEndWithBoolean:);
  methods[15].selector = @selector(isReverseLayout);
  methods[16].selector = @selector(setReverseLayoutWithBoolean:);
  methods[17].selector = @selector(scrollToEndWithBoolean:);
  methods[18].selector = @selector(scrollToTopWithBoolean:);
  methods[19].selector = @selector(scrollToPositionWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "setOrientation", "LNSString;", "setOnScrollStateChange", "setOnScrolled", "setHeaderDisabled", "Z", "setFooterDisabled", "setLayoutManager", "setViewHolderIds", "setSpanCount", "I", "setLayout", "addSectionItem", "LNSString;LNSString;LNSObject;", "removeSectionItem", "LNSString;LNSString;LNSString;", "removeAllItems", "updateSectionItem", "LNSString;LNSString;LNSString;LNSObject;", "setStackFromEnd", "setReverseLayout", "scrollToEnd", "scrollToTop", "scrollToPosition" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_RecyclerViewBean = { "RecyclerViewBean", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x1, 20, 1, 0, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_RecyclerViewBean;
}

@end

void ASRecyclerViewImpl_RecyclerViewBean_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_RecyclerViewBean *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASRecyclerViewImpl_RecyclerViewBean *new_ASRecyclerViewImpl_RecyclerViewBean_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_RecyclerViewBean, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_RecyclerViewBean *create_ASRecyclerViewImpl_RecyclerViewBean_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_RecyclerViewBean, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_RecyclerViewBean)

@implementation ASRecyclerViewImpl_RecyclerViewParamsBean

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_RecyclerViewParamsBean_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASRecyclerViewImpl;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_RecyclerViewParamsBean = { "RecyclerViewParamsBean", "com.ashera.recycleview", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_RecyclerViewParamsBean;
}

@end

void ASRecyclerViewImpl_RecyclerViewParamsBean_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_RecyclerViewParamsBean *self, ASRecyclerViewImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASRecyclerViewImpl_RecyclerViewParamsBean *new_ASRecyclerViewImpl_RecyclerViewParamsBean_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_RecyclerViewParamsBean, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_RecyclerViewParamsBean *create_ASRecyclerViewImpl_RecyclerViewParamsBean_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_RecyclerViewParamsBean, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_RecyclerViewParamsBean)

@implementation ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/recycleview/RecyclerViewImpl$RecyclerViewCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder = { "RecyclerViewCommandParamsBuilder", "com.ashera.recycleview", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder;
}

@end

void ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder *self, ASRecyclerViewImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder *new_ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder *create_ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_RecyclerViewCommandParamsBuilder)

@implementation ASRecyclerViewImpl_UIScrollViewDelegate

- (instancetype)initWithASRecyclerViewImpl:(ASRecyclerViewImpl *)outer$ {
  ASRecyclerViewImpl_UIScrollViewDelegate_initWithASRecyclerViewImpl_(self, outer$);
  return self;
}

- (void)nativeScrollChangeListenerWithId:(id)nativeWidget {
  UIScrollView* scrollview = ((UIScrollView*)nativeWidget);
  scrollview.delegate = self;
}

- (void)onscrollWithInt:(jint)scrollX
                withInt:(jint)scrollY {
  if (scrollY < 0 || scrollX < 0) {
    return;
  }
  ASRecyclerViewImpl_updateContentSizeWithInt_(this$0_, 0);
  ASRecyclerViewImpl_applyTransformWithId_withId_(this$0_, this$0_->uiView_, this$0_->recyclerWrapperView_);
  ASRecyclerViewImpl_handleScroll(this$0_);
}

- (void)__javaClone:(ASRecyclerViewImpl_UIScrollViewDelegate *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

- (void)scrollViewDidScroll:(UIScrollView *)scrollView {
  [self onscrollWithInt:scrollView.contentOffset.x withInt:scrollView.contentOffset.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRecyclerViewImpl:);
  methods[1].selector = @selector(nativeScrollChangeListenerWithId:);
  methods[2].selector = @selector(onscrollWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRecyclerViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRecyclerViewImpl;", "nativeScrollChangeListener", "LNSObject;", "onscroll", "II" };
  static const J2ObjcClassInfo _ASRecyclerViewImpl_UIScrollViewDelegate = { "UIScrollViewDelegate", "com.ashera.recycleview", ptrTable, methods, fields, 7, 0x0, 3, 1, 0, -1, -1, -1, -1 };
  return &_ASRecyclerViewImpl_UIScrollViewDelegate;
}

@end

void ASRecyclerViewImpl_UIScrollViewDelegate_initWithASRecyclerViewImpl_(ASRecyclerViewImpl_UIScrollViewDelegate *self, ASRecyclerViewImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([outer$ getFragment])) addListenerWithASIWidget:outer$ withId:self];
}

ASRecyclerViewImpl_UIScrollViewDelegate *new_ASRecyclerViewImpl_UIScrollViewDelegate_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRecyclerViewImpl_UIScrollViewDelegate, initWithASRecyclerViewImpl_, outer$)
}

ASRecyclerViewImpl_UIScrollViewDelegate *create_ASRecyclerViewImpl_UIScrollViewDelegate_initWithASRecyclerViewImpl_(ASRecyclerViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRecyclerViewImpl_UIScrollViewDelegate, initWithASRecyclerViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRecyclerViewImpl_UIScrollViewDelegate)
