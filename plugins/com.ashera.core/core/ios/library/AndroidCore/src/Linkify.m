//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\text\util\Linkify.java
//

#include "Context.h"
#include "EmptyArray.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "Linkify.h"
#include "Log.h"
#include "Patterns.h"
#include "SpannableImpl.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Locale.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

@class JavaUtilArrayList;
@class JavaUtilRegexMatcher;
@class JavaUtilRegexPattern;
@protocol JavaLangCharSequence;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADLinkify ()

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                                    withInt:(jint)mask
                              withADContext:(ADContext *)context
               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory;

+ (NSString *)makeUrlWithNSString:(NSString *)url
                withNSStringArray:(IOSObjectArray *)prefixes
         withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher
    withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)filter;

+ (void)gatherLinksWithJavaUtilArrayList:(JavaUtilArrayList *)links
                 withADLinkify_Spannable:(id<ADLinkify_Spannable>)s
                withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                       withNSStringArray:(IOSObjectArray *)schemes
               withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
           withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter;

+ (void)pruneOverlapsWithJavaUtilArrayList:(JavaUtilArrayList *)links;

+ (void)gatherMapLinksWithJavaUtilArrayList:(JavaUtilArrayList *)links
                    withADLinkify_Spannable:(id<ADLinkify_Spannable>)text;

+ (void)gatherTelLinksWithJavaUtilArrayList:(JavaUtilArrayList *)links
                    withADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                              withADContext:(ADContext *)context;

+ (void)applyLinkWithNSString:(NSString *)url
                      withInt:(jint)start
                      withInt:(jint)end
      withADLinkify_Spannable:(id<ADLinkify_Spannable>)text
 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory;

@end

inline NSString *ADLinkify_get_LOG_TAG(void);
static NSString *ADLinkify_LOG_TAG = @"Linkify";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADLinkify, LOG_TAG, NSString *)

inline jint ADLinkify_get_PHONE_NUMBER_MINIMUM_DIGITS(void);
#define ADLinkify_PHONE_NUMBER_MINIMUM_DIGITS 5
J2OBJC_STATIC_FIELD_CONSTANT(ADLinkify, PHONE_NUMBER_MINIMUM_DIGITS, jint)

__attribute__((unused)) static jboolean ADLinkify_addLinksWithADLinkify_Spannable_withInt_withADContext_withJavaUtilFunctionFunction_(id<ADLinkify_Spannable> text, jint mask, ADContext *context, id<JavaUtilFunctionFunction> urlSpanFactory);

__attribute__((unused)) static NSString *ADLinkify_makeUrlWithNSString_withNSStringArray_withJavaUtilRegexMatcher_withADLinkify_TransformFilter_(NSString *url, IOSObjectArray *prefixes, JavaUtilRegexMatcher *matcher, id<ADLinkify_TransformFilter> filter);

__attribute__((unused)) static void ADLinkify_gatherLinksWithJavaUtilArrayList_withADLinkify_Spannable_withJavaUtilRegexPattern_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(JavaUtilArrayList *links, id<ADLinkify_Spannable> s, JavaUtilRegexPattern *pattern, IOSObjectArray *schemes, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter);

__attribute__((unused)) static void ADLinkify_pruneOverlapsWithJavaUtilArrayList_(JavaUtilArrayList *links);

__attribute__((unused)) static void ADLinkify_gatherMapLinksWithJavaUtilArrayList_withADLinkify_Spannable_(JavaUtilArrayList *links, id<ADLinkify_Spannable> text);

__attribute__((unused)) static void ADLinkify_gatherTelLinksWithJavaUtilArrayList_withADLinkify_Spannable_withADContext_(JavaUtilArrayList *links, id<ADLinkify_Spannable> text, ADContext *context);

__attribute__((unused)) static void ADLinkify_applyLinkWithNSString_withInt_withInt_withADLinkify_Spannable_withJavaUtilFunctionFunction_(NSString *url, jint start, jint end, id<ADLinkify_Spannable> text, id<JavaUtilFunctionFunction> urlSpanFactory);

@interface ADLinkify_MatchFilter : NSObject

@end

@interface ADLinkify_1 : NSObject < ADLinkify_MatchFilter >

- (instancetype)init;

- (jboolean)acceptMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                        withInt:(jint)start
                                        withInt:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_1)

__attribute__((unused)) static void ADLinkify_1_init(ADLinkify_1 *self);

__attribute__((unused)) static ADLinkify_1 *new_ADLinkify_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLinkify_1 *create_ADLinkify_1_init(void);

@interface ADLinkify_2 : NSObject < ADLinkify_MatchFilter >

- (instancetype)init;

- (jboolean)acceptMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                        withInt:(jint)start
                                        withInt:(jint)end;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_2)

__attribute__((unused)) static void ADLinkify_2_init(ADLinkify_2 *self);

__attribute__((unused)) static ADLinkify_2 *new_ADLinkify_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLinkify_2 *create_ADLinkify_2_init(void);

@interface ADLinkify_TransformFilter : NSObject

@end

@interface ADLinkify_3 : NSObject < ADLinkify_TransformFilter >

- (instancetype)init;

- (NSString *)transformUrlWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)match
                                      withNSString:(NSString *)url;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_3)

__attribute__((unused)) static void ADLinkify_3_init(ADLinkify_3 *self);

__attribute__((unused)) static ADLinkify_3 *new_ADLinkify_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLinkify_3 *create_ADLinkify_3_init(void);

@interface ADLinkify_4 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(ADLinkSpec *)a
               withId:(ADLinkSpec *)b;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_4)

__attribute__((unused)) static void ADLinkify_4_init(ADLinkify_4 *self);

__attribute__((unused)) static ADLinkify_4 *new_ADLinkify_4_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLinkify_4 *create_ADLinkify_4_init(void);

@interface ADLinkify_Spannable : NSObject

@end

@interface ADLinkify_5 : NSObject < JavaUtilFunctionFunction > {
 @public
  JavaUtilArrayList *val$urlspans_;
}

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0;

- (ADLinkify_URLSpan *)applyWithId:(NSString *)t;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLinkify_5)

__attribute__((unused)) static void ADLinkify_5_initWithJavaUtilArrayList_(ADLinkify_5 *self, JavaUtilArrayList *capture$0);

__attribute__((unused)) static ADLinkify_5 *new_ADLinkify_5_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADLinkify_5 *create_ADLinkify_5_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0);

J2OBJC_INITIALIZED_DEFN(ADLinkify)

id<ADLinkify_MatchFilter> ADLinkify_sUrlMatchFilter;
id<ADLinkify_MatchFilter> ADLinkify_sPhoneNumberMatchFilter;
id<ADLinkify_TransformFilter> ADLinkify_sPhoneNumberTransformFilter;

@implementation ADLinkify

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinkify_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                                    withInt:(jint)mask {
  return ADLinkify_addLinksWithADLinkify_Spannable_withInt_(text, mask);
}

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                                    withInt:(jint)mask
               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory {
  return ADLinkify_addLinksWithADLinkify_Spannable_withInt_withJavaUtilFunctionFunction_(text, mask, urlSpanFactory);
}

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                                    withInt:(jint)mask
                              withADContext:(ADContext *)context
               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory {
  return ADLinkify_addLinksWithADLinkify_Spannable_withInt_withADContext_withJavaUtilFunctionFunction_(text, mask, context, urlSpanFactory);
}

+ (jboolean)containsUnsupportedCharactersWithNSString:(NSString *)text {
  return ADLinkify_containsUnsupportedCharactersWithNSString_(text);
}

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)scheme {
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_(text, pattern, scheme);
}

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)spannable
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)scheme
                  withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
              withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter {
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(spannable, pattern, scheme, matchFilter, transformFilter);
}

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)spannable
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)defaultScheme
                          withNSStringArray:(IOSObjectArray *)schemes
                  withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
              withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter {
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(spannable, pattern, defaultScheme, schemes, matchFilter, transformFilter);
}

+ (jboolean)addLinksWithADLinkify_Spannable:(id<ADLinkify_Spannable>)spannable
                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                               withNSString:(NSString *)defaultScheme
                          withNSStringArray:(IOSObjectArray *)schemes
                  withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
              withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter
               withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory {
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_withJavaUtilFunctionFunction_(spannable, pattern, defaultScheme, schemes, matchFilter, transformFilter, urlSpanFactory);
}

+ (NSString *)makeUrlWithNSString:(NSString *)url
                withNSStringArray:(IOSObjectArray *)prefixes
         withJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)matcher
    withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)filter {
  return ADLinkify_makeUrlWithNSString_withNSStringArray_withJavaUtilRegexMatcher_withADLinkify_TransformFilter_(url, prefixes, matcher, filter);
}

+ (void)gatherLinksWithJavaUtilArrayList:(JavaUtilArrayList *)links
                 withADLinkify_Spannable:(id<ADLinkify_Spannable>)s
                withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern
                       withNSStringArray:(IOSObjectArray *)schemes
               withADLinkify_MatchFilter:(id<ADLinkify_MatchFilter>)matchFilter
           withADLinkify_TransformFilter:(id<ADLinkify_TransformFilter>)transformFilter {
  ADLinkify_gatherLinksWithJavaUtilArrayList_withADLinkify_Spannable_withJavaUtilRegexPattern_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(links, s, pattern, schemes, matchFilter, transformFilter);
}

+ (void)pruneOverlapsWithJavaUtilArrayList:(JavaUtilArrayList *)links {
  ADLinkify_pruneOverlapsWithJavaUtilArrayList_(links);
}

+ (void)gatherMapLinksWithJavaUtilArrayList:(JavaUtilArrayList *)links
                    withADLinkify_Spannable:(id<ADLinkify_Spannable>)text {
  ADLinkify_gatherMapLinksWithJavaUtilArrayList_withADLinkify_Spannable_(links, text);
}

+ (void)gatherTelLinksWithJavaUtilArrayList:(JavaUtilArrayList *)links
                    withADLinkify_Spannable:(id<ADLinkify_Spannable>)text
                              withADContext:(ADContext *)context {
  ADLinkify_gatherTelLinksWithJavaUtilArrayList_withADLinkify_Spannable_withADContext_(links, text, context);
}

+ (void)applyLinkWithNSString:(NSString *)url
                      withInt:(jint)start
                      withInt:(jint)end
      withADLinkify_Spannable:(id<ADLinkify_Spannable>)text
 withJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)urlSpanFactory {
  ADLinkify_applyLinkWithNSString_withInt_withInt_withADLinkify_Spannable_withJavaUtilFunctionFunction_(url, start, end, text, urlSpanFactory);
}

+ (NSString *)linkifyWithNSString:(NSString *)url
                          withInt:(jint)mask
                      withBoolean:(jboolean)clickable {
  return ADLinkify_linkifyWithNSString_withInt_withBoolean_(url, mask, clickable);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 2, -1, 3, -1, -1 },
    { NULL, "Z", 0xa, 0, 4, -1, 5, -1, -1 },
    { NULL, "Z", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x19, 0, 11, -1, 12, -1, -1 },
    { NULL, "LNSString;", 0x1a, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1a, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x1a, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0xa, 21, 22, -1, 23, -1, -1 },
    { NULL, "V", 0xa, 24, 25, -1, 26, -1, -1 },
    { NULL, "V", 0xa, 27, 28, -1, 29, -1, -1 },
    { NULL, "LNSString;", 0x9, 30, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(addLinksWithADLinkify_Spannable:withInt:);
  methods[2].selector = @selector(addLinksWithADLinkify_Spannable:withInt:withJavaUtilFunctionFunction:);
  methods[3].selector = @selector(addLinksWithADLinkify_Spannable:withInt:withADContext:withJavaUtilFunctionFunction:);
  methods[4].selector = @selector(containsUnsupportedCharactersWithNSString:);
  methods[5].selector = @selector(addLinksWithADLinkify_Spannable:withJavaUtilRegexPattern:withNSString:);
  methods[6].selector = @selector(addLinksWithADLinkify_Spannable:withJavaUtilRegexPattern:withNSString:withADLinkify_MatchFilter:withADLinkify_TransformFilter:);
  methods[7].selector = @selector(addLinksWithADLinkify_Spannable:withJavaUtilRegexPattern:withNSString:withNSStringArray:withADLinkify_MatchFilter:withADLinkify_TransformFilter:);
  methods[8].selector = @selector(addLinksWithADLinkify_Spannable:withJavaUtilRegexPattern:withNSString:withNSStringArray:withADLinkify_MatchFilter:withADLinkify_TransformFilter:withJavaUtilFunctionFunction:);
  methods[9].selector = @selector(makeUrlWithNSString:withNSStringArray:withJavaUtilRegexMatcher:withADLinkify_TransformFilter:);
  methods[10].selector = @selector(gatherLinksWithJavaUtilArrayList:withADLinkify_Spannable:withJavaUtilRegexPattern:withNSStringArray:withADLinkify_MatchFilter:withADLinkify_TransformFilter:);
  methods[11].selector = @selector(pruneOverlapsWithJavaUtilArrayList:);
  methods[12].selector = @selector(gatherMapLinksWithJavaUtilArrayList:withADLinkify_Spannable:);
  methods[13].selector = @selector(gatherTelLinksWithJavaUtilArrayList:withADLinkify_Spannable:withADContext:);
  methods[14].selector = @selector(applyLinkWithNSString:withInt:withInt:withADLinkify_Spannable:withJavaUtilFunctionFunction:);
  methods[15].selector = @selector(linkifyWithNSString:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "WEB_URLS", "I", .constantValue.asInt = ADLinkify_WEB_URLS, 0x19, -1, -1, -1, -1 },
    { "EMAIL_ADDRESSES", "I", .constantValue.asInt = ADLinkify_EMAIL_ADDRESSES, 0x19, -1, -1, -1, -1 },
    { "PHONE_NUMBERS", "I", .constantValue.asInt = ADLinkify_PHONE_NUMBERS, 0x19, -1, -1, -1, -1 },
    { "MAP_ADDRESSES", "I", .constantValue.asInt = ADLinkify_MAP_ADDRESSES, 0x19, -1, -1, -1, -1 },
    { "ALL", "I", .constantValue.asInt = ADLinkify_ALL, 0x19, -1, -1, -1, -1 },
    { "PHONE_NUMBER_MINIMUM_DIGITS", "I", .constantValue.asInt = ADLinkify_PHONE_NUMBER_MINIMUM_DIGITS, 0x1a, -1, -1, -1, -1 },
    { "sUrlMatchFilter", "LADLinkify_MatchFilter;", .constantValue.asLong = 0, 0x19, -1, 33, -1, -1 },
    { "sPhoneNumberMatchFilter", "LADLinkify_MatchFilter;", .constantValue.asLong = 0, 0x19, -1, 34, -1, -1 },
    { "sPhoneNumberTransformFilter", "LADLinkify_TransformFilter;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
  };
  static const void *ptrTable[] = { "addLinks", "LADLinkify_Spannable;I", "LADLinkify_Spannable;ILJavaUtilFunctionFunction;", "(Lr/android/text/util/Linkify$Spannable;ILjava/util/function/Function<Ljava/lang/String;Lr/android/text/util/Linkify$URLSpan;>;)Z", "LADLinkify_Spannable;ILADContext;LJavaUtilFunctionFunction;", "(Lr/android/text/util/Linkify$Spannable;ILr/android/content/Context;Ljava/util/function/Function<Ljava/lang/String;Lr/android/text/util/Linkify$URLSpan;>;)Z", "containsUnsupportedCharacters", "LNSString;", "LADLinkify_Spannable;LJavaUtilRegexPattern;LNSString;", "LADLinkify_Spannable;LJavaUtilRegexPattern;LNSString;LADLinkify_MatchFilter;LADLinkify_TransformFilter;", "LADLinkify_Spannable;LJavaUtilRegexPattern;LNSString;[LNSString;LADLinkify_MatchFilter;LADLinkify_TransformFilter;", "LADLinkify_Spannable;LJavaUtilRegexPattern;LNSString;[LNSString;LADLinkify_MatchFilter;LADLinkify_TransformFilter;LJavaUtilFunctionFunction;", "(Lr/android/text/util/Linkify$Spannable;Ljava/util/regex/Pattern;Ljava/lang/String;[Ljava/lang/String;Lr/android/text/util/Linkify$MatchFilter;Lr/android/text/util/Linkify$TransformFilter;Ljava/util/function/Function<Ljava/lang/String;Lr/android/text/util/Linkify$URLSpan;>;)Z", "makeUrl", "LNSString;[LNSString;LJavaUtilRegexMatcher;LADLinkify_TransformFilter;", "gatherLinks", "LJavaUtilArrayList;LADLinkify_Spannable;LJavaUtilRegexPattern;[LNSString;LADLinkify_MatchFilter;LADLinkify_TransformFilter;", "(Ljava/util/ArrayList<Lr/android/text/util/LinkSpec;>;Lr/android/text/util/Linkify$Spannable;Ljava/util/regex/Pattern;[Ljava/lang/String;Lr/android/text/util/Linkify$MatchFilter;Lr/android/text/util/Linkify$TransformFilter;)V", "pruneOverlaps", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Lr/android/text/util/LinkSpec;>;)V", "gatherMapLinks", "LJavaUtilArrayList;LADLinkify_Spannable;", "(Ljava/util/ArrayList<Lr/android/text/util/LinkSpec;>;Lr/android/text/util/Linkify$Spannable;)V", "gatherTelLinks", "LJavaUtilArrayList;LADLinkify_Spannable;LADContext;", "(Ljava/util/ArrayList<Lr/android/text/util/LinkSpec;>;Lr/android/text/util/Linkify$Spannable;Lr/android/content/Context;)V", "applyLink", "LNSString;IILADLinkify_Spannable;LJavaUtilFunctionFunction;", "(Ljava/lang/String;IILr/android/text/util/Linkify$Spannable;Ljava/util/function/Function<Ljava/lang/String;Lr/android/text/util/Linkify$URLSpan;>;)V", "linkify", "LNSString;IZ", &ADLinkify_LOG_TAG, &ADLinkify_sUrlMatchFilter, &ADLinkify_sPhoneNumberMatchFilter, &ADLinkify_sPhoneNumberTransformFilter, "LADLinkify_MatchFilter;LADLinkify_TransformFilter;LADLinkify_Spannable;LADLinkify_URLSpan;" };
  static const J2ObjcClassInfo _ADLinkify = { "Linkify", "r.android.text.util", ptrTable, methods, fields, 7, 0x1, 16, 10, -1, 36, -1, -1, -1 };
  return &_ADLinkify;
}

+ (void)initialize {
  if (self == [ADLinkify class]) {
    JreStrongAssignAndConsume(&ADLinkify_sUrlMatchFilter, new_ADLinkify_1_init());
    JreStrongAssignAndConsume(&ADLinkify_sPhoneNumberMatchFilter, new_ADLinkify_2_init());
    JreStrongAssignAndConsume(&ADLinkify_sPhoneNumberTransformFilter, new_ADLinkify_3_init());
    J2OBJC_SET_INITIALIZED(ADLinkify)
  }
}

@end

void ADLinkify_init(ADLinkify *self) {
  NSObject_init(self);
}

ADLinkify *new_ADLinkify_init() {
  J2OBJC_NEW_IMPL(ADLinkify, init)
}

ADLinkify *create_ADLinkify_init() {
  J2OBJC_CREATE_IMPL(ADLinkify, init)
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withInt_(id<ADLinkify_Spannable> text, jint mask) {
  ADLinkify_initialize();
  return ADLinkify_addLinksWithADLinkify_Spannable_withInt_withADContext_withJavaUtilFunctionFunction_(text, mask, nil, nil);
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withInt_withJavaUtilFunctionFunction_(id<ADLinkify_Spannable> text, jint mask, id<JavaUtilFunctionFunction> urlSpanFactory) {
  ADLinkify_initialize();
  return ADLinkify_addLinksWithADLinkify_Spannable_withInt_withADContext_withJavaUtilFunctionFunction_(text, mask, nil, urlSpanFactory);
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withInt_withADContext_withJavaUtilFunctionFunction_(id<ADLinkify_Spannable> text, jint mask, ADContext *context, id<JavaUtilFunctionFunction> urlSpanFactory) {
  ADLinkify_initialize();
  if (text != nil && ADLinkify_containsUnsupportedCharactersWithNSString_([text description])) {
    return false;
  }
  if (mask == 0) {
    return false;
  }
  IOSObjectArray *old = [((id<ADLinkify_Spannable>) nil_chk(text)) getSpansWithInt:0 withInt:[text java_length] withIOSClass:ADLinkify_URLSpan_class_()];
  for (jint i = ((IOSObjectArray *) nil_chk(old))->size_ - 1; i >= 0; i--) {
    [text removeSpanWithADLinkify_URLSpan:IOSObjectArray_Get(old, i)];
  }
  JavaUtilArrayList *links = create_JavaUtilArrayList_init();
  if ((mask & ADLinkify_WEB_URLS) != 0) {
    ADLinkify_gatherLinksWithJavaUtilArrayList_withADLinkify_Spannable_withJavaUtilRegexPattern_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(links, text, JreLoadStatic(ADPatterns, AUTOLINK_WEB_URL), [IOSObjectArray arrayWithObjects:(id[]){ @"http://", @"https://", @"rtsp://", @"ftp://" } count:4 type:NSString_class_()], ADLinkify_sUrlMatchFilter, nil);
  }
  if ((mask & ADLinkify_EMAIL_ADDRESSES) != 0) {
    ADLinkify_gatherLinksWithJavaUtilArrayList_withADLinkify_Spannable_withJavaUtilRegexPattern_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(links, text, JreLoadStatic(ADPatterns, AUTOLINK_EMAIL_ADDRESS), [IOSObjectArray arrayWithObjects:(id[]){ @"mailto:" } count:1 type:NSString_class_()], nil, nil);
  }
  if ((mask & ADLinkify_PHONE_NUMBERS) != 0) {
    ADLinkify_gatherTelLinksWithJavaUtilArrayList_withADLinkify_Spannable_withADContext_(links, text, context);
  }
  if ((mask & ADLinkify_MAP_ADDRESSES) != 0) {
    ADLinkify_gatherMapLinksWithJavaUtilArrayList_withADLinkify_Spannable_(links, text);
  }
  ADLinkify_pruneOverlapsWithJavaUtilArrayList_(links);
  if ([links size] == 0) {
    return false;
  }
  for (ADLinkSpec * __strong link in links) {
    ADLinkify_applyLinkWithNSString_withInt_withInt_withADLinkify_Spannable_withJavaUtilFunctionFunction_(((ADLinkSpec *) nil_chk(link))->url_, link->start_, link->end_, text, urlSpanFactory);
  }
  return true;
}

jboolean ADLinkify_containsUnsupportedCharactersWithNSString_(NSString *text) {
  ADLinkify_initialize();
  if ([((NSString *) nil_chk(text)) java_contains:@"\u202c"]) {
    ADLog_eWithNSString_withNSString_(ADLinkify_LOG_TAG, @"Unsupported character for applying links: u202C");
    return true;
  }
  if ([text java_contains:@"\u202d"]) {
    ADLog_eWithNSString_withNSString_(ADLinkify_LOG_TAG, @"Unsupported character for applying links: u202D");
    return true;
  }
  if ([text java_contains:@"\u202e"]) {
    ADLog_eWithNSString_withNSString_(ADLinkify_LOG_TAG, @"Unsupported character for applying links: u202E");
    return true;
  }
  return false;
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_(id<ADLinkify_Spannable> text, JavaUtilRegexPattern *pattern, NSString *scheme) {
  ADLinkify_initialize();
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(text, pattern, scheme, nil, nil, nil);
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(id<ADLinkify_Spannable> spannable, JavaUtilRegexPattern *pattern, NSString *scheme, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter) {
  ADLinkify_initialize();
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(spannable, pattern, scheme, nil, matchFilter, transformFilter);
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(id<ADLinkify_Spannable> spannable, JavaUtilRegexPattern *pattern, NSString *defaultScheme, IOSObjectArray *schemes, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter) {
  ADLinkify_initialize();
  return ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_withJavaUtilFunctionFunction_(spannable, pattern, defaultScheme, schemes, matchFilter, transformFilter, nil);
}

jboolean ADLinkify_addLinksWithADLinkify_Spannable_withJavaUtilRegexPattern_withNSString_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_withJavaUtilFunctionFunction_(id<ADLinkify_Spannable> spannable, JavaUtilRegexPattern *pattern, NSString *defaultScheme, IOSObjectArray *schemes, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter, id<JavaUtilFunctionFunction> urlSpanFactory) {
  ADLinkify_initialize();
  if (spannable != nil && ADLinkify_containsUnsupportedCharactersWithNSString_([spannable description])) {
    return false;
  }
  IOSObjectArray *schemesCopy;
  if (defaultScheme == nil) defaultScheme = @"";
  if (schemes == nil || schemes->size_ < 1) {
    schemes = JreLoadStatic(ADEmptyArray, STRING);
  }
  schemesCopy = [IOSObjectArray arrayWithLength:((IOSObjectArray *) nil_chk(schemes))->size_ + 1 type:NSString_class_()];
  IOSObjectArray_Set(schemesCopy, 0, [defaultScheme java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]);
  for (jint index = 0; index < schemes->size_; index++) {
    NSString *scheme = IOSObjectArray_Get(schemes, index);
    IOSObjectArray_Set(schemesCopy, index + 1, (scheme == nil) ? @"" : [((NSString *) nil_chk(scheme)) java_lowercaseStringWithJRELocale:JreLoadStatic(JavaUtilLocale, ROOT)]);
  }
  jboolean hasMatches = false;
  JavaUtilRegexMatcher *m = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:spannable]);
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    jint start = [m start];
    jint end = [m end];
    jboolean allowed = true;
    if (matchFilter != nil) {
      allowed = [matchFilter acceptMatchWithJavaLangCharSequence:spannable withInt:start withInt:end];
    }
    if (allowed) {
      NSString *url = ADLinkify_makeUrlWithNSString_withNSStringArray_withJavaUtilRegexMatcher_withADLinkify_TransformFilter_([m groupWithInt:0], schemesCopy, m, transformFilter);
      ADLinkify_applyLinkWithNSString_withInt_withInt_withADLinkify_Spannable_withJavaUtilFunctionFunction_(url, start, end, spannable, urlSpanFactory);
      hasMatches = true;
    }
  }
  return hasMatches;
}

NSString *ADLinkify_makeUrlWithNSString_withNSStringArray_withJavaUtilRegexMatcher_withADLinkify_TransformFilter_(NSString *url, IOSObjectArray *prefixes, JavaUtilRegexMatcher *matcher, id<ADLinkify_TransformFilter> filter) {
  ADLinkify_initialize();
  if (filter != nil) {
    url = [filter transformUrlWithJavaUtilRegexMatcher:matcher withNSString:url];
  }
  jboolean hasPrefix = false;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(prefixes))->size_; i++) {
    if ([((NSString *) nil_chk(url)) java_regionMatches:true thisOffset:0 aString:IOSObjectArray_Get(prefixes, i) otherOffset:0 count:[((NSString *) nil_chk(IOSObjectArray_Get(prefixes, i))) java_length]]) {
      hasPrefix = true;
      if (![url java_regionMatches:false thisOffset:0 aString:IOSObjectArray_Get(prefixes, i) otherOffset:0 count:[((NSString *) nil_chk(IOSObjectArray_Get(prefixes, i))) java_length]]) {
        url = JreStrcat("$$", IOSObjectArray_Get(prefixes, i), [url java_substring:[((NSString *) nil_chk(IOSObjectArray_Get(prefixes, i))) java_length]]);
      }
      break;
    }
  }
  if (!hasPrefix && prefixes->size_ > 0) {
    url = JreStrcat("$$", IOSObjectArray_Get(prefixes, 0), url);
  }
  return url;
}

void ADLinkify_gatherLinksWithJavaUtilArrayList_withADLinkify_Spannable_withJavaUtilRegexPattern_withNSStringArray_withADLinkify_MatchFilter_withADLinkify_TransformFilter_(JavaUtilArrayList *links, id<ADLinkify_Spannable> s, JavaUtilRegexPattern *pattern, IOSObjectArray *schemes, id<ADLinkify_MatchFilter> matchFilter, id<ADLinkify_TransformFilter> transformFilter) {
  ADLinkify_initialize();
  JavaUtilRegexMatcher *m = JreRetainedLocalValue([((JavaUtilRegexPattern *) nil_chk(pattern)) matcherWithJavaLangCharSequence:s]);
  while ([((JavaUtilRegexMatcher *) nil_chk(m)) find]) {
    jint start = [m start];
    jint end = [m end];
    if (matchFilter == nil || [matchFilter acceptMatchWithJavaLangCharSequence:s withInt:start withInt:end]) {
      ADLinkSpec *spec = create_ADLinkSpec_initPackagePrivate();
      NSString *url = ADLinkify_makeUrlWithNSString_withNSStringArray_withJavaUtilRegexMatcher_withADLinkify_TransformFilter_([m groupWithInt:0], schemes, m, transformFilter);
      JreStrongAssign(&spec->url_, url);
      spec->start_ = start;
      spec->end_ = end;
      [((JavaUtilArrayList *) nil_chk(links)) addWithId:spec];
    }
  }
}

void ADLinkify_pruneOverlapsWithJavaUtilArrayList_(JavaUtilArrayList *links) {
  ADLinkify_initialize();
  id<JavaUtilComparator> c = create_ADLinkify_4_init();
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(links, c);
  jint len = [((JavaUtilArrayList *) nil_chk(links)) size];
  jint i = 0;
  while (i < len - 1) {
    ADLinkSpec *a = JreRetainedLocalValue([links getWithInt:i]);
    ADLinkSpec *b = JreRetainedLocalValue([links getWithInt:i + 1]);
    jint remove = -1;
    if ((((ADLinkSpec *) nil_chk(a))->start_ <= ((ADLinkSpec *) nil_chk(b))->start_) && (a->end_ > b->start_)) {
      if (b->end_ <= a->end_) {
        remove = i + 1;
      }
      else if ((a->end_ - a->start_) > (b->end_ - b->start_)) {
        remove = i + 1;
      }
      else if ((a->end_ - a->start_) < (b->end_ - b->start_)) {
        remove = i;
      }
      if (remove != -1) {
        [links removeWithInt:remove];
        len--;
        continue;
      }
    }
    i++;
  }
}

void ADLinkify_gatherMapLinksWithJavaUtilArrayList_withADLinkify_Spannable_(JavaUtilArrayList *links, id<ADLinkify_Spannable> text) {
  ADLinkify_initialize();
}

void ADLinkify_gatherTelLinksWithJavaUtilArrayList_withADLinkify_Spannable_withADContext_(JavaUtilArrayList *links, id<ADLinkify_Spannable> text, ADContext *context) {
  ADLinkify_initialize();
}

void ADLinkify_applyLinkWithNSString_withInt_withInt_withADLinkify_Spannable_withJavaUtilFunctionFunction_(NSString *url, jint start, jint end, id<ADLinkify_Spannable> text, id<JavaUtilFunctionFunction> urlSpanFactory) {
  ADLinkify_initialize();
  ADLinkify_URLSpan *urlSpan = JreRetainedLocalValue([((id<JavaUtilFunctionFunction>) nil_chk(urlSpanFactory)) applyWithId:url]);
  JreStrongAssign(&((ADLinkify_URLSpan *) nil_chk(urlSpan))->url_, url);
  urlSpan->start_ = start;
  urlSpan->end_ = end;
}

NSString *ADLinkify_linkifyWithNSString_withInt_withBoolean_(NSString *url, jint mask, jboolean clickable) {
  ADLinkify_initialize();
  JavaUtilArrayList *urlspans = create_JavaUtilArrayList_init();
  ADLinkify_addLinksWithADLinkify_Spannable_withInt_withJavaUtilFunctionFunction_(create_ADSpannableImpl_initWithNSString_(url), mask, create_ADLinkify_5_initWithJavaUtilArrayList_(urlspans));
  for (jint i = [urlspans size] - 1; i >= 0; i--) {
    ADLinkify_URLSpan *urlSpan = JreRetainedLocalValue([urlspans getWithInt:i]);
    NSString *href = NSString_java_formatWithNSString_withNSObjectArray_(@"<a href='%s'>%s</a>", [IOSObjectArray arrayWithObjects:(id[]){ clickable ? @"#" : ((ADLinkify_URLSpan *) nil_chk(urlSpan))->url_, ((ADLinkify_URLSpan *) nil_chk(urlSpan))->url_ } count:2 type:NSObject_class_()]);
    url = JreStrcat("$$$", [((NSString *) nil_chk(url)) java_substring:0 endIndex:urlSpan->start_], href, [url java_substring:urlSpan->end_]);
  }
  return url;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLinkify)

@implementation ADLinkSpec

- (instancetype)initPackagePrivate {
  ADLinkSpec_initPackagePrivate(self);
  return self;
}

- (void)dealloc {
  RELEASE_(url_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivate);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "start_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const J2ObjcClassInfo _ADLinkSpec = { "LinkSpec", "r.android.text.util", NULL, methods, fields, 7, 0x0, 1, 3, -1, -1, -1, -1, -1 };
  return &_ADLinkSpec;
}

@end

void ADLinkSpec_initPackagePrivate(ADLinkSpec *self) {
  NSObject_init(self);
}

ADLinkSpec *new_ADLinkSpec_initPackagePrivate() {
  J2OBJC_NEW_IMPL(ADLinkSpec, initPackagePrivate)
}

ADLinkSpec *create_ADLinkSpec_initPackagePrivate() {
  J2OBJC_CREATE_IMPL(ADLinkSpec, initPackagePrivate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLinkSpec)

@implementation ADLinkify_MatchFilter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(acceptMatchWithJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "acceptMatch", "LJavaLangCharSequence;II", "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_MatchFilter = { "MatchFilter", "r.android.text.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADLinkify_MatchFilter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADLinkify_MatchFilter)

@implementation ADLinkify_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinkify_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                        withInt:(jint)start
                                        withInt:(jint)end {
  if (start == 0) {
    return true;
  }
  if ([((id<JavaLangCharSequence>) nil_chk(s)) charAtWithInt:start - 1] == '@') {
    return false;
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptMatchWithJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "acceptMatch", "LJavaLangCharSequence;II", "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_1 = { "", "r.android.text.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADLinkify_1;
}

@end

void ADLinkify_1_init(ADLinkify_1 *self) {
  NSObject_init(self);
}

ADLinkify_1 *new_ADLinkify_1_init() {
  J2OBJC_NEW_IMPL(ADLinkify_1, init)
}

ADLinkify_1 *create_ADLinkify_1_init() {
  J2OBJC_CREATE_IMPL(ADLinkify_1, init)
}

@implementation ADLinkify_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinkify_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)acceptMatchWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                        withInt:(jint)start
                                        withInt:(jint)end {
  jint digitCount = 0;
  for (jint i = start; i < end; i++) {
    if (JavaLangCharacter_isDigitWithChar_([((id<JavaLangCharSequence>) nil_chk(s)) charAtWithInt:i])) {
      digitCount++;
      if (digitCount >= ADLinkify_PHONE_NUMBER_MINIMUM_DIGITS) {
        return true;
      }
    }
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acceptMatchWithJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "acceptMatch", "LJavaLangCharSequence;II", "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_2 = { "", "r.android.text.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADLinkify_2;
}

@end

void ADLinkify_2_init(ADLinkify_2 *self) {
  NSObject_init(self);
}

ADLinkify_2 *new_ADLinkify_2_init() {
  J2OBJC_NEW_IMPL(ADLinkify_2, init)
}

ADLinkify_2 *create_ADLinkify_2_init() {
  J2OBJC_CREATE_IMPL(ADLinkify_2, init)
}

@implementation ADLinkify_TransformFilter

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(transformUrlWithJavaUtilRegexMatcher:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transformUrl", "LJavaUtilRegexMatcher;LNSString;", "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_TransformFilter = { "TransformFilter", "r.android.text.util", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADLinkify_TransformFilter;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADLinkify_TransformFilter)

@implementation ADLinkify_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinkify_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)transformUrlWithJavaUtilRegexMatcher:(JavaUtilRegexMatcher *)match
                                      withNSString:(NSString *)url {
  return ADPatterns_digitsAndPlusOnlyWithJavaUtilRegexMatcher_(match);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x11, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(transformUrlWithJavaUtilRegexMatcher:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "transformUrl", "LJavaUtilRegexMatcher;LNSString;", "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_3 = { "", "r.android.text.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADLinkify_3;
}

@end

void ADLinkify_3_init(ADLinkify_3 *self) {
  NSObject_init(self);
}

ADLinkify_3 *new_ADLinkify_3_init() {
  J2OBJC_NEW_IMPL(ADLinkify_3, init)
}

ADLinkify_3 *create_ADLinkify_3_init() {
  J2OBJC_CREATE_IMPL(ADLinkify_3, init)
}

@implementation ADLinkify_4

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinkify_4_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(ADLinkSpec *)a
               withId:(ADLinkSpec *)b {
  if (((ADLinkSpec *) nil_chk(a))->start_ < ((ADLinkSpec *) nil_chk(b))->start_) {
    return -1;
  }
  if (a->start_ > b->start_) {
    return 1;
  }
  if (a->end_ < b->end_) {
    return 1;
  }
  if (a->end_ > b->end_) {
    return -1;
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LADLinkSpec;LADLinkSpec;", "LADLinkify;", "pruneOverlapsWithJavaUtilArrayList:", "Ljava/lang/Object;Ljava/util/Comparator<Lr/android/text/util/LinkSpec;>;" };
  static const J2ObjcClassInfo _ADLinkify_4 = { "", "r.android.text.util", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_ADLinkify_4;
}

@end

void ADLinkify_4_init(ADLinkify_4 *self) {
  NSObject_init(self);
}

ADLinkify_4 *new_ADLinkify_4_init() {
  J2OBJC_NEW_IMPL(ADLinkify_4, init)
}

ADLinkify_4 *create_ADLinkify_4_init() {
  J2OBJC_CREATE_IMPL(ADLinkify_4, init)
}

@implementation ADLinkify_Spannable

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADLinkify_URLSpan;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getSpansWithInt:withInt:withIOSClass:);
  methods[1].selector = @selector(removeSpanWithADLinkify_URLSpan:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getSpans", "IILIOSClass;", "(IILjava/lang/Class<Lr/android/text/util/Linkify$URLSpan;>;)[Lr/android/text/util/Linkify$URLSpan;", "removeSpan", "LADLinkify_URLSpan;", "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_Spannable = { "Spannable", "r.android.text.util", ptrTable, methods, NULL, 7, 0x608, 2, 0, 5, -1, -1, -1, -1 };
  return &_ADLinkify_Spannable;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADLinkify_Spannable)

@implementation ADLinkify_URLSpan

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLinkify_URLSpan_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(url_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "url_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "start_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADLinkify;" };
  static const J2ObjcClassInfo _ADLinkify_URLSpan = { "URLSpan", "r.android.text.util", ptrTable, methods, fields, 7, 0x8, 1, 3, 0, -1, -1, -1, -1 };
  return &_ADLinkify_URLSpan;
}

@end

void ADLinkify_URLSpan_init(ADLinkify_URLSpan *self) {
  NSObject_init(self);
}

ADLinkify_URLSpan *new_ADLinkify_URLSpan_init() {
  J2OBJC_NEW_IMPL(ADLinkify_URLSpan, init)
}

ADLinkify_URLSpan *create_ADLinkify_URLSpan_init() {
  J2OBJC_CREATE_IMPL(ADLinkify_URLSpan, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLinkify_URLSpan)

@implementation ADLinkify_5

- (instancetype)initWithJavaUtilArrayList:(JavaUtilArrayList *)capture$0 {
  ADLinkify_5_initWithJavaUtilArrayList_(self, capture$0);
  return self;
}

- (ADLinkify_URLSpan *)applyWithId:(NSString *)t {
  ADLinkify_URLSpan *urlspan = create_ADLinkify_URLSpan_init();
  [((JavaUtilArrayList *) nil_chk(val$urlspans_)) addWithId:urlspan];
  return urlspan;
}

- (id<JavaUtilFunctionFunction>)composeWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_composeWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilFunctionFunction>)andThenWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilFunctionFunction_andThenWithJavaUtilFunctionFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(val$urlspans_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADLinkify_URLSpan;", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilArrayList:);
  methods[1].selector = @selector(applyWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$urlspans_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilArrayList;", "apply", "LNSString;", "Ljava/util/ArrayList<Lr/android/text/util/Linkify$URLSpan;>;", "LADLinkify;", "linkifyWithNSString:withInt:withBoolean:", "Ljava/lang/Object;Ljava/util/function/Function<Ljava/lang/String;Lr/android/text/util/Linkify$URLSpan;>;" };
  static const J2ObjcClassInfo _ADLinkify_5 = { "", "r.android.text.util", ptrTable, methods, fields, 7, 0x8018, 2, 1, 4, -1, 5, 6, -1 };
  return &_ADLinkify_5;
}

@end

void ADLinkify_5_initWithJavaUtilArrayList_(ADLinkify_5 *self, JavaUtilArrayList *capture$0) {
  JreStrongAssign(&self->val$urlspans_, capture$0);
  NSObject_init(self);
}

ADLinkify_5 *new_ADLinkify_5_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_NEW_IMPL(ADLinkify_5, initWithJavaUtilArrayList_, capture$0)
}

ADLinkify_5 *create_ADLinkify_5_initWithJavaUtilArrayList_(JavaUtilArrayList *capture$0) {
  J2OBJC_CREATE_IMPL(ADLinkify_5, initWithJavaUtilArrayList_, capture$0)
}
