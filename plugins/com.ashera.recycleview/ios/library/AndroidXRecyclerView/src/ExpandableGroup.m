//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\com\xwray\groupie\ExpandableGroup.java
//

#include "ExpandableGroup.h"
#include "ExpandableItem.h"
#include "GroupUtils.h"
#include "J2ObjC_source.h"
#include "NestedGroup.h"
#include "RVGroup.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@protocol JavaUtilList;


@interface ADXExpandableGroup () {
 @public
  jboolean isExpanded_;
  id<ADXRVGroup> parent_;
  id<JavaUtilList> children_;
}

- (jboolean)dispatchChildChangesWithADXRVGroup:(id<ADXRVGroup>)group;

@end

J2OBJC_FIELD_SETTER(ADXExpandableGroup, parent_, id<ADXRVGroup>)
J2OBJC_FIELD_SETTER(ADXExpandableGroup, children_, id<JavaUtilList>)

__attribute__((unused)) static jboolean ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(ADXExpandableGroup *self, id<ADXRVGroup> group);

@implementation ADXExpandableGroup

- (instancetype)initWithADXRVGroup:(id<ADXRVGroup, ADXExpandableItem>)expandableItem {
  ADXExpandableGroup_initWithADXRVGroup_(self, expandableItem);
  return self;
}

- (instancetype)initWithADXRVGroup:(id<ADXRVGroup, ADXExpandableItem>)expandableItem
                       withBoolean:(jboolean)isExpanded {
  ADXExpandableGroup_initWithADXRVGroup_withBoolean_(self, expandableItem, isExpanded);
  return self;
}

- (void)addWithInt:(jint)position
    withADXRVGroup:(id<ADXRVGroup>)group {
  [super addWithInt:position withADXRVGroup:group];
  [((id<JavaUtilList>) nil_chk(children_)) addWithInt:position withId:group];
  if (isExpanded_) {
    jint notifyPosition = 1 + ADXGroupUtils_getItemCountWithJavaUtilCollection_([children_ subListWithInt:0 withInt:position]);
    [self notifyItemRangeInsertedWithInt:notifyPosition withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  }
}

- (void)addWithADXRVGroup:(id<ADXRVGroup>)group {
  [super addWithADXRVGroup:group];
  if (isExpanded_) {
    jint itemCount = [self getItemCount];
    [((id<JavaUtilList>) nil_chk(children_)) addWithId:group];
    [self notifyItemRangeInsertedWithInt:itemCount withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  }
  else {
    [((id<JavaUtilList>) nil_chk(children_)) addWithId:group];
  }
}

- (void)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty]) {
    return;
  }
  [super addAllWithJavaUtilCollection:groups];
  if (isExpanded_) {
    jint itemCount = [self getItemCount];
    [((id<JavaUtilList>) nil_chk(self->children_)) addAllWithJavaUtilCollection:groups];
    [self notifyItemRangeInsertedWithInt:itemCount withInt:ADXGroupUtils_getItemCountWithJavaUtilCollection_(groups)];
  }
  else {
    [((id<JavaUtilList>) nil_chk(self->children_)) addAllWithJavaUtilCollection:groups];
  }
}

- (void)addAllWithInt:(jint)position
withJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty]) {
    return;
  }
  [super addAllWithInt:position withJavaUtilCollection:groups];
  [((id<JavaUtilList>) nil_chk(self->children_)) addAllWithInt:position withJavaUtilCollection:groups];
  if (isExpanded_) {
    jint notifyPosition = 1 + ADXGroupUtils_getItemCountWithJavaUtilCollection_([children_ subListWithInt:0 withInt:position]);
    [self notifyItemRangeInsertedWithInt:notifyPosition withInt:ADXGroupUtils_getItemCountWithJavaUtilCollection_(groups)];
  }
}

- (void)removeWithADXRVGroup:(id<ADXRVGroup>)group {
  if (![((id<JavaUtilList>) nil_chk(self->children_)) containsWithId:group]) return;
  [super removeWithADXRVGroup:group];
  if (isExpanded_) {
    jint position = [self getItemCountBeforeGroupWithADXRVGroup:group];
    [children_ removeWithId:group];
    [self notifyItemRangeRemovedWithInt:position withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  }
  else {
    [children_ removeWithId:group];
  }
}

- (void)replaceAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if (isExpanded_) {
    [super replaceAllWithJavaUtilCollection:groups];
    [((id<JavaUtilList>) nil_chk(children_)) clear];
    [children_ addAllWithJavaUtilCollection:groups];
    [self notifyDataSetInvalidated];
  }
  else {
    [((id<JavaUtilList>) nil_chk(children_)) clear];
    [children_ addAllWithJavaUtilCollection:groups];
  }
}

- (void)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty] || ![((id<JavaUtilList>) nil_chk(self->children_)) containsAllWithJavaUtilCollection:groups]) return;
  [super removeAllWithJavaUtilCollection:groups];
  if (isExpanded_) {
    [((id<JavaUtilList>) nil_chk(self->children_)) removeAllWithJavaUtilCollection:groups];
    for (id<ADXRVGroup> __strong group in groups) {
      jint position = [self getItemCountBeforeGroupWithADXRVGroup:group];
      [children_ removeWithId:group];
      [self notifyItemRangeRemovedWithInt:position withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
    }
  }
  else {
    [((id<JavaUtilList>) nil_chk(self->children_)) removeAllWithJavaUtilCollection:groups];
  }
}

- (jboolean)isExpanded {
  return isExpanded_;
}

- (id<ADXRVGroup>)getGroupWithInt:(jint)position {
  if (position == 0) {
    return parent_;
  }
  else {
    return [((id<JavaUtilList>) nil_chk(children_)) getWithInt:position - 1];
  }
}

- (jint)getPositionWithADXRVGroup:(id<ADXRVGroup>)group {
  if (group == parent_) {
    return 0;
  }
  jint index = [((id<JavaUtilList>) nil_chk(children_)) indexOfWithId:group];
  if (index >= 0) {
    return index + 1;
  }
  return -1;
}

- (jint)getGroupCount {
  return 1 + (isExpanded_ ? [((id<JavaUtilList>) nil_chk(children_)) size] : 0);
}

- (jint)getChildCount {
  return [((id<JavaUtilList>) nil_chk(children_)) size];
}

- (void)onToggleExpanded {
  jint oldSize = [self getItemCount];
  isExpanded_ = !isExpanded_;
  jint newSize = [self getItemCount];
  if (oldSize > newSize) {
    [self notifyItemRangeRemovedWithInt:newSize withInt:oldSize - newSize];
  }
  else {
    [self notifyItemRangeInsertedWithInt:oldSize withInt:newSize - oldSize];
  }
}

- (void)setExpandedWithBoolean:(jboolean)isExpanded {
  if (self->isExpanded_ != isExpanded) {
    [self onToggleExpanded];
  }
}

- (jboolean)dispatchChildChangesWithADXRVGroup:(id<ADXRVGroup>)group {
  return ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group);
}

- (void)onChangedWithADXRVGroup:(id<ADXRVGroup>)group {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onChangedWithADXRVGroup:group];
  }
}

- (void)onItemInsertedWithADXRVGroup:(id<ADXRVGroup>)group
                             withInt:(jint)position {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemInsertedWithADXRVGroup:group withInt:position];
  }
}

- (void)onItemChangedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemChangedWithADXRVGroup:group withInt:position];
  }
}

- (void)onItemChangedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position
                             withId:(id)payload {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemChangedWithADXRVGroup:group withInt:position withId:payload];
  }
}

- (void)onItemRemovedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemRemovedWithADXRVGroup:group withInt:position];
  }
}

- (void)onItemRangeChangedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemRangeChangedWithADXRVGroup:group withInt:positionStart withInt:itemCount];
  }
}

- (void)onItemRangeChangedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount
                                  withId:(id)payload {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemRangeChangedWithADXRVGroup:group withInt:positionStart withInt:itemCount withId:payload];
  }
}

- (void)onItemRangeInsertedWithADXRVGroup:(id<ADXRVGroup>)group
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemRangeInsertedWithADXRVGroup:group withInt:positionStart withInt:itemCount];
  }
}

- (void)onItemRangeRemovedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemRangeRemovedWithADXRVGroup:group withInt:positionStart withInt:itemCount];
  }
}

- (void)onItemMovedWithADXRVGroup:(id<ADXRVGroup>)group
                          withInt:(jint)fromPosition
                          withInt:(jint)toPosition {
  if (ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(self, group)) {
    [super onItemMovedWithADXRVGroup:group withInt:fromPosition withInt:toPosition];
  }
}

- (void)onDataSetInvalidated {
  if (isExpanded_) {
    [super onDataSetInvalidated];
  }
}

- (void)dealloc {
  RELEASE_(parent_);
  RELEASE_(children_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, 10, -1, -1 },
    { NULL, "V", 0x1, 11, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 13, 7, -1, 8, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRVGroup;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 16, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 19, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRVGroup:);
  methods[1].selector = @selector(initWithADXRVGroup:withBoolean:);
  methods[2].selector = @selector(addWithInt:withADXRVGroup:);
  methods[3].selector = @selector(addWithADXRVGroup:);
  methods[4].selector = @selector(addAllWithJavaUtilCollection:);
  methods[5].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[6].selector = @selector(removeWithADXRVGroup:);
  methods[7].selector = @selector(replaceAllWithJavaUtilCollection:);
  methods[8].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[9].selector = @selector(isExpanded);
  methods[10].selector = @selector(getGroupWithInt:);
  methods[11].selector = @selector(getPositionWithADXRVGroup:);
  methods[12].selector = @selector(getGroupCount);
  methods[13].selector = @selector(getChildCount);
  methods[14].selector = @selector(onToggleExpanded);
  methods[15].selector = @selector(setExpandedWithBoolean:);
  methods[16].selector = @selector(dispatchChildChangesWithADXRVGroup:);
  methods[17].selector = @selector(onChangedWithADXRVGroup:);
  methods[18].selector = @selector(onItemInsertedWithADXRVGroup:withInt:);
  methods[19].selector = @selector(onItemChangedWithADXRVGroup:withInt:);
  methods[20].selector = @selector(onItemChangedWithADXRVGroup:withInt:withId:);
  methods[21].selector = @selector(onItemRemovedWithADXRVGroup:withInt:);
  methods[22].selector = @selector(onItemRangeChangedWithADXRVGroup:withInt:withInt:);
  methods[23].selector = @selector(onItemRangeChangedWithADXRVGroup:withInt:withInt:withId:);
  methods[24].selector = @selector(onItemRangeInsertedWithADXRVGroup:withInt:withInt:);
  methods[25].selector = @selector(onItemRangeRemovedWithADXRVGroup:withInt:withInt:);
  methods[26].selector = @selector(onItemMovedWithADXRVGroup:withInt:withInt:);
  methods[27].selector = @selector(onDataSetInvalidated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "isExpanded_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parent_", "LADXRVGroup;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "children_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 32, -1 },
  };
  static const void *ptrTable[] = { "LADXRVGroup;", "<T::Lcom/xwray/groupie/RVGroup;:Lcom/xwray/groupie/ExpandableItem;>(TT;)V", "LADXRVGroup;Z", "<T::Lcom/xwray/groupie/RVGroup;:Lcom/xwray/groupie/ExpandableItem;>(TT;Z)V", "add", "ILADXRVGroup;", "addAll", "LJavaUtilCollection;", "(Ljava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;)V", "ILJavaUtilCollection;", "(ILjava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;)V", "remove", "replaceAll", "removeAll", "getGroup", "I", "getPosition", "setExpanded", "Z", "dispatchChildChanges", "onChanged", "onItemInserted", "LADXRVGroup;I", "onItemChanged", "LADXRVGroup;ILNSObject;", "onItemRemoved", "onItemRangeChanged", "LADXRVGroup;II", "LADXRVGroup;IILNSObject;", "onItemRangeInserted", "onItemRangeRemoved", "onItemMoved", "Ljava/util/List<Lcom/xwray/groupie/RVGroup;>;" };
  static const J2ObjcClassInfo _ADXExpandableGroup = { "ExpandableGroup", "com.xwray.groupie", ptrTable, methods, fields, 7, 0x1, 28, 3, -1, -1, -1, -1, -1 };
  return &_ADXExpandableGroup;
}

@end

void ADXExpandableGroup_initWithADXRVGroup_(ADXExpandableGroup *self, id<ADXRVGroup, ADXExpandableItem> expandableItem) {
  ADXNestedGroup_init(self);
  self->isExpanded_ = false;
  JreStrongAssignAndConsume(&self->children_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->parent_, expandableItem);
  [((id<ADXRVGroup, ADXExpandableItem>) nil_chk(expandableItem)) setExpandableGroupWithADXExpandableGroup:self];
}

ADXExpandableGroup *new_ADXExpandableGroup_initWithADXRVGroup_(id<ADXRVGroup, ADXExpandableItem> expandableItem) {
  J2OBJC_NEW_IMPL(ADXExpandableGroup, initWithADXRVGroup_, expandableItem)
}

ADXExpandableGroup *create_ADXExpandableGroup_initWithADXRVGroup_(id<ADXRVGroup, ADXExpandableItem> expandableItem) {
  J2OBJC_CREATE_IMPL(ADXExpandableGroup, initWithADXRVGroup_, expandableItem)
}

void ADXExpandableGroup_initWithADXRVGroup_withBoolean_(ADXExpandableGroup *self, id<ADXRVGroup, ADXExpandableItem> expandableItem, jboolean isExpanded) {
  ADXNestedGroup_init(self);
  self->isExpanded_ = false;
  JreStrongAssignAndConsume(&self->children_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->parent_, expandableItem);
  [((id<ADXRVGroup, ADXExpandableItem>) nil_chk(expandableItem)) setExpandableGroupWithADXExpandableGroup:self];
  self->isExpanded_ = isExpanded;
}

ADXExpandableGroup *new_ADXExpandableGroup_initWithADXRVGroup_withBoolean_(id<ADXRVGroup, ADXExpandableItem> expandableItem, jboolean isExpanded) {
  J2OBJC_NEW_IMPL(ADXExpandableGroup, initWithADXRVGroup_withBoolean_, expandableItem, isExpanded)
}

ADXExpandableGroup *create_ADXExpandableGroup_initWithADXRVGroup_withBoolean_(id<ADXRVGroup, ADXExpandableItem> expandableItem, jboolean isExpanded) {
  J2OBJC_CREATE_IMPL(ADXExpandableGroup, initWithADXRVGroup_withBoolean_, expandableItem, isExpanded)
}

jboolean ADXExpandableGroup_dispatchChildChangesWithADXRVGroup_(ADXExpandableGroup *self, id<ADXRVGroup> group) {
  return self->isExpanded_ || group == self->parent_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXExpandableGroup)
