//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\IsValidPIN.java
//

#include "BaseValidator.h"
#include "IFragment.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IsValidPIN.h"
#include "J2ObjC_source.h"
#include "ResourceBundleUtils.h"
#include "Validation.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"


@implementation ASIsValidPIN

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  return create_ASIsValidPIN_init();
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASIsValidPIN_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/pincode_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
  return res;
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil || [text java_isEmpty]) {
    return true;
  }
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(JavaUtilRegexPattern_compileWithNSString_(@"\\d{6}"))) matcherWithJavaLangCharSequence:text])) matches];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(newInstanceWithNSStringArray:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[3].selector = @selector(isValidWithNSString:withASIWidget:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;" };
  static const J2ObjcClassInfo _ASIsValidPIN = { "IsValidPIN", "com.ashera.validations", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_ASIsValidPIN;
}

@end

void ASIsValidPIN_init(ASIsValidPIN *self) {
  ASBaseValidator_init(self);
}

ASIsValidPIN *new_ASIsValidPIN_init() {
  J2OBJC_NEW_IMPL(ASIsValidPIN, init)
}

ASIsValidPIN *create_ASIsValidPIN_init() {
  J2OBJC_CREATE_IMPL(ASIsValidPIN, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASIsValidPIN)
