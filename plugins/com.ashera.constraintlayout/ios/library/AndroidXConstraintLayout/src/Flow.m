//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\helper\widget\Flow.java
//

#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "ConstraintWidget.h"
#include "CoreFlow.h"
#include "CoreVirtualLayout.h"
#include "Flow.h"
#include "Helper.h"
#include "HelperWidget.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "View.h"
#include "VirtualLayout.h"


@interface ADXFlow () {
 @public
  ADXCoreFlow *mFlow_;
}

@end

J2OBJC_FIELD_SETTER(ADXFlow, mFlow_, ADXCoreFlow *)

inline NSString *ADXFlow_get_TAG(void);
static NSString *ADXFlow_TAG = @"Flow";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXFlow, TAG, NSString *)

@implementation ADXFlow

- (void)resolveRtlWithADXConstraintWidget:(ADXConstraintWidget *)widget
                              withBoolean:(jboolean)isRtl {
  [((ADXCoreFlow *) nil_chk(mFlow_)) applyRtlWithBoolean:isRtl];
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [self onMeasureWithADXCoreVirtualLayout:mFlow_ withInt:widthMeasureSpec withInt:heightMeasureSpec];
}

- (void)onMeasureWithADXCoreVirtualLayout:(ADXCoreVirtualLayout *)layout
                                  withInt:(jint)widthMeasureSpec
                                  withInt:(jint)heightMeasureSpec {
  jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jint heightSize = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  if (layout != nil) {
    [layout measureWithInt:widthMode withInt:widthSize withInt:heightMode withInt:heightSize];
    [self setMeasuredDimensionWithInt:[layout getMeasuredWidth] withInt:[layout getMeasuredHeight]];
  }
  else {
    [self setMeasuredDimensionWithInt:0 withInt:0];
  }
}

- (void)loadParametersWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)constraint
                                  withADXHelperWidget:(ADXHelperWidget *)child
                 withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                    withADSparseArray:(ADSparseArray *)mapIdToWidget {
  [super loadParametersWithADXConstraintSet_Constraint:constraint withADXHelperWidget:child withADXConstraintLayout_LayoutParams:layoutParams withADSparseArray:mapIdToWidget];
  if ([child isKindOfClass:[ADXCoreFlow class]]) {
    ADXCoreFlow *flow = (ADXCoreFlow *) child;
    if (((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->orientation_ != -1) {
      [((ADXCoreFlow *) nil_chk(flow)) setOrientationWithInt:layoutParams->orientation_];
    }
  }
}

- (void)setOrientationWithInt:(jint)orientation {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setOrientationWithInt:orientation];
  [self requestLayout];
}

- (void)setPaddingWithInt:(jint)padding {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setPaddingWithInt:padding];
  [self requestLayout];
}

- (void)setPaddingLeftWithInt:(jint)paddingLeft {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setPaddingLeftWithInt:paddingLeft];
  [self requestLayout];
}

- (void)setPaddingTopWithInt:(jint)paddingTop {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setPaddingTopWithInt:paddingTop];
  [self requestLayout];
}

- (void)setPaddingRightWithInt:(jint)paddingRight {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setPaddingRightWithInt:paddingRight];
  [self requestLayout];
}

- (void)setPaddingBottomWithInt:(jint)paddingBottom {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setPaddingBottomWithInt:paddingBottom];
  [self requestLayout];
}

- (void)setWrapModeWithInt:(jint)mode {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setWrapModeWithInt:mode];
  [self requestLayout];
}

- (void)setHorizontalStyleWithInt:(jint)style {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setHorizontalStyleWithInt:style];
  [self requestLayout];
}

- (void)setVerticalStyleWithInt:(jint)style {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setVerticalStyleWithInt:style];
  [self requestLayout];
}

- (void)setHorizontalBiasWithFloat:(jfloat)bias {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setHorizontalBiasWithFloat:bias];
  [self requestLayout];
}

- (void)setVerticalBiasWithFloat:(jfloat)bias {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setVerticalBiasWithFloat:bias];
  [self requestLayout];
}

- (void)setFirstHorizontalStyleWithInt:(jint)style {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setFirstHorizontalStyleWithInt:style];
  [self requestLayout];
}

- (void)setFirstVerticalStyleWithInt:(jint)style {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setFirstVerticalStyleWithInt:style];
  [self requestLayout];
}

- (void)setFirstHorizontalBiasWithFloat:(jfloat)bias {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setFirstHorizontalBiasWithFloat:bias];
  [self requestLayout];
}

- (void)setFirstVerticalBiasWithFloat:(jfloat)bias {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setFirstVerticalBiasWithFloat:bias];
  [self requestLayout];
}

- (void)setHorizontalAlignWithInt:(jint)align {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setHorizontalAlignWithInt:align];
  [self requestLayout];
}

- (void)setVerticalAlignWithInt:(jint)align {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setVerticalAlignWithInt:align];
  [self requestLayout];
}

- (void)setHorizontalGapWithInt:(jint)gap {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setHorizontalGapWithInt:gap];
  [self requestLayout];
}

- (void)setVerticalGapWithInt:(jint)gap {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setVerticalGapWithInt:gap];
  [self requestLayout];
}

- (void)setMaxElementsWrapWithInt:(jint)max {
  [((ADXCoreFlow *) nil_chk(mFlow_)) setMaxElementsWrapWithInt:max];
  [self requestLayout];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXFlow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mFlow_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 9, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(resolveRtlWithADXConstraintWidget:withBoolean:);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onMeasureWithADXCoreVirtualLayout:withInt:withInt:);
  methods[3].selector = @selector(loadParametersWithADXConstraintSet_Constraint:withADXHelperWidget:withADXConstraintLayout_LayoutParams:withADSparseArray:);
  methods[4].selector = @selector(setOrientationWithInt:);
  methods[5].selector = @selector(setPaddingWithInt:);
  methods[6].selector = @selector(setPaddingLeftWithInt:);
  methods[7].selector = @selector(setPaddingTopWithInt:);
  methods[8].selector = @selector(setPaddingRightWithInt:);
  methods[9].selector = @selector(setPaddingBottomWithInt:);
  methods[10].selector = @selector(setWrapModeWithInt:);
  methods[11].selector = @selector(setHorizontalStyleWithInt:);
  methods[12].selector = @selector(setVerticalStyleWithInt:);
  methods[13].selector = @selector(setHorizontalBiasWithFloat:);
  methods[14].selector = @selector(setVerticalBiasWithFloat:);
  methods[15].selector = @selector(setFirstHorizontalStyleWithInt:);
  methods[16].selector = @selector(setFirstVerticalStyleWithInt:);
  methods[17].selector = @selector(setFirstHorizontalBiasWithFloat:);
  methods[18].selector = @selector(setFirstVerticalBiasWithFloat:);
  methods[19].selector = @selector(setHorizontalAlignWithInt:);
  methods[20].selector = @selector(setVerticalAlignWithInt:);
  methods[21].selector = @selector(setHorizontalGapWithInt:);
  methods[22].selector = @selector(setVerticalGapWithInt:);
  methods[23].selector = @selector(setMaxElementsWrapWithInt:);
  methods[24].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "mFlow_", "LADXCoreFlow;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "HORIZONTAL", "I", .constantValue.asInt = ADXFlow_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXFlow_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "WRAP_NONE", "I", .constantValue.asInt = ADXFlow_WRAP_NONE, 0x19, -1, -1, -1, -1 },
    { "WRAP_CHAIN", "I", .constantValue.asInt = ADXFlow_WRAP_CHAIN, 0x19, -1, -1, -1, -1 },
    { "WRAP_ALIGNED", "I", .constantValue.asInt = ADXFlow_WRAP_ALIGNED, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD", "I", .constantValue.asInt = ADXFlow_CHAIN_SPREAD, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD_INSIDE", "I", .constantValue.asInt = ADXFlow_CHAIN_SPREAD_INSIDE, 0x19, -1, -1, -1, -1 },
    { "CHAIN_PACKED", "I", .constantValue.asInt = ADXFlow_CHAIN_PACKED, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_ALIGN_START", "I", .constantValue.asInt = ADXFlow_HORIZONTAL_ALIGN_START, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_ALIGN_END", "I", .constantValue.asInt = ADXFlow_HORIZONTAL_ALIGN_END, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_ALIGN_CENTER", "I", .constantValue.asInt = ADXFlow_HORIZONTAL_ALIGN_CENTER, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_TOP", "I", .constantValue.asInt = ADXFlow_VERTICAL_ALIGN_TOP, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_BOTTOM", "I", .constantValue.asInt = ADXFlow_VERTICAL_ALIGN_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_CENTER", "I", .constantValue.asInt = ADXFlow_VERTICAL_ALIGN_CENTER, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_BASELINE", "I", .constantValue.asInt = ADXFlow_VERTICAL_ALIGN_BASELINE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "resolveRtl", "LADXConstraintWidget;Z", "onMeasure", "II", "LADXCoreVirtualLayout;II", "loadParameters", "LADXConstraintSet_Constraint;LADXHelperWidget;LADXConstraintLayout_LayoutParams;LADSparseArray;", "(Landroidx/constraintlayout/widget/ConstraintSet$Constraint;Landroidx/constraintlayout/core/widgets/HelperWidget;Landroidx/constraintlayout/widget/ConstraintLayout$LayoutParams;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "setOrientation", "I", "setPadding", "setPaddingLeft", "setPaddingTop", "setPaddingRight", "setPaddingBottom", "setWrapMode", "setHorizontalStyle", "setVerticalStyle", "setHorizontalBias", "F", "setVerticalBias", "setFirstHorizontalStyle", "setFirstVerticalStyle", "setFirstHorizontalBias", "setFirstVerticalBias", "setHorizontalAlign", "setVerticalAlign", "setHorizontalGap", "setVerticalGap", "setMaxElementsWrap", &ADXFlow_TAG };
  static const J2ObjcClassInfo _ADXFlow = { "Flow", "androidx.constraintlayout.helper.widget", ptrTable, methods, fields, 7, 0x1, 25, 17, -1, -1, -1, -1, -1 };
  return &_ADXFlow;
}

@end

void ADXFlow_init(ADXFlow *self) {
  ADXVirtualLayout_init(self);
  JreStrongAssignAndConsume(&self->mFlow_, new_ADXCoreFlow_init());
  JreStrongAssign(&self->mHelperWidget_, self->mFlow_);
  [self validateParams];
}

ADXFlow *new_ADXFlow_init() {
  J2OBJC_NEW_IMPL(ADXFlow, init)
}

ADXFlow *create_ADXFlow_init() {
  J2OBJC_CREATE_IMPL(ADXFlow, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXFlow)
