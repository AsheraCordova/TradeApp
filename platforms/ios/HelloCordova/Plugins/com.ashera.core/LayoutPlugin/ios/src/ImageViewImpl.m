//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ImageViewImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BaseWidget.h"
#include "Bitmap.h"
#include "Context.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "IImageDownloader.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "ImageDownloaderFactory.h"
#include "ImageViewImpl.h"
#include "J2ObjC_source.h"
#include "LayoutNativeVars.h"
#include "MeasurableImageView.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "RectM.h"
#include "SimpleWrapableView.h"
#include "View.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"
#include "ASUIView.h"

#include "ASUIImageView.h"

@class JavaLangInteger;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASImageViewImpl () {
 @public
  ASImageViewImpl_ImageViewCommandBuilder *builder_;
  ASImageViewImpl_ImageViewBean *bean_;
  ASSimpleWrapableView *simpleWrapableView_;
  ADDrawable *imageFromUrlPlaceHolder_;
  jboolean measureCalled_;
  ADDrawable *imageFromUrlError_;
}

- (void)setWidgetOnNativeClass;

- (id)getBaselineAlignBottom;

- (void)setBaseLineWithId:(id)objValue;

- (void)setBaselineAlignBottomWithId:(id)objValue;

- (void)setCropToPaddingWithId:(id)objValue;

- (id)getCropToPadding;

- (id)getMaxWidth;

- (id)getMaxHeight;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (id)getAdjustViewBounds;

- (void)setAdjustViewBoundsWithId:(id)objValue;

- (id)getPaddingBottom;

- (id)getPaddingTop;

- (id)getPaddingRight;

- (id)getPaddingLeft;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)createSimpleWrapableView;

- (jboolean)hasScrollView;

- (jboolean)isViewWrapped;

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (id)getScaleType;

- (void)setScaleTypeWithNSString:(NSString *)strValue
                          withId:(id)objValue;

- (id)getSrc;

- (jint)getImageHeightWithId:(id)image;

- (jint)getImageWidthWithId:(id)image;

- (void)setImageFromUrlErrorWithId:(id)objValue;

- (void)setImageFromUrlPlaceHolderWithId:(id)objValue;

- (void)setImageFromUrlWithId:(id)objValue;

- (void)postOnMeasureWithInt:(jint)widthMeasureSpec
                     withInt:(jint)heightMeasureSpec;

- (JavaLangInteger *)nativeGetContentMode;

- (void)nativeSetContentModeWithInt:(jint)contentMode;

- (void)setTintColorWithId:(id)objValue;

- (void)nativeSetTintColorWithId:(id)objValue;

- (id)getTintColor;

- (void)registerCommandAttributes;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)nativeRequestLayout;

- (void)nativeInvalidate;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

@end

J2OBJC_FIELD_SETTER(ASImageViewImpl, builder_, ASImageViewImpl_ImageViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASImageViewImpl, bean_, ASImageViewImpl_ImageViewBean *)
J2OBJC_FIELD_SETTER(ASImageViewImpl, simpleWrapableView_, ASSimpleWrapableView *)
J2OBJC_FIELD_SETTER(ASImageViewImpl, imageFromUrlPlaceHolder_, ADDrawable *)
J2OBJC_FIELD_SETTER(ASImageViewImpl, imageFromUrlError_, ADDrawable *)

inline NSString *ASImageViewImpl_get_FOREGROUND_REGEX(void);
static NSString *ASImageViewImpl_FOREGROUND_REGEX = @"drawForeground";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASImageViewImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASImageViewImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASImageViewImpl_VIEW_HOLDER_REGEX = @"(?!(?:drawForeground)$).*";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASImageViewImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASImageViewImpl_get_WIDGET_REGEX(void);
static NSString *ASImageViewImpl_WIDGET_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASImageViewImpl, WIDGET_REGEX, NSString *)

inline id<JavaUtilMap> ASImageViewImpl_get_scaleTypeToContentModeMapping(void);
inline id<JavaUtilMap> ASImageViewImpl_set_scaleTypeToContentModeMapping(id<JavaUtilMap> value);
static id<JavaUtilMap> ASImageViewImpl_scaleTypeToContentModeMapping;
J2OBJC_STATIC_FIELD_OBJ(ASImageViewImpl, scaleTypeToContentModeMapping, id<JavaUtilMap>)

__attribute__((unused)) static void ASImageViewImpl_setWidgetOnNativeClass(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getBaselineAlignBottom(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_setBaseLineWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setBaselineAlignBottomWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setCropToPaddingWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static id ASImageViewImpl_getCropToPadding(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getMaxWidth(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getMaxHeight(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_setMaxWidthWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setMaxHeightWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static id ASImageViewImpl_getAdjustViewBounds(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_setAdjustViewBoundsWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static id ASImageViewImpl_getPaddingBottom(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getPaddingTop(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getPaddingRight(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getPaddingLeft(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getPaddingEnd(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getPaddingStart(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_setPaddingVerticalWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingHorizontalWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingTopWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingEndWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingStartWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingLeftWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingRightWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingBottomWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setPaddingWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_createSimpleWrapableView(ASImageViewImpl *self);

__attribute__((unused)) static jboolean ASImageViewImpl_hasScrollView(ASImageViewImpl *self);

__attribute__((unused)) static jboolean ASImageViewImpl_isViewWrapped(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASImageViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASImageViewImpl_invalidateWrapViewHolder(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getScrollView(ASImageViewImpl *self);

__attribute__((unused)) static id ASImageViewImpl_getScaleType(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_setScaleTypeWithNSString_withId_(ASImageViewImpl *self, NSString *strValue, id objValue);

__attribute__((unused)) static id ASImageViewImpl_getSrc(ASImageViewImpl *self);

__attribute__((unused)) static jint ASImageViewImpl_getImageHeightWithId_(ASImageViewImpl *self, id image);

__attribute__((unused)) static jint ASImageViewImpl_getImageWidthWithId_(ASImageViewImpl *self, id image);

__attribute__((unused)) static void ASImageViewImpl_setImageFromUrlErrorWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setImageFromUrlPlaceHolderWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_setImageFromUrlWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_postOnMeasureWithInt_withInt_(ASImageViewImpl *self, jint widthMeasureSpec, jint heightMeasureSpec);

__attribute__((unused)) static JavaLangInteger *ASImageViewImpl_nativeGetContentMode(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_nativeSetContentModeWithInt_(ASImageViewImpl *self, jint contentMode);

__attribute__((unused)) static void ASImageViewImpl_setTintColorWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static void ASImageViewImpl_nativeSetTintColorWithId_(ASImageViewImpl *self, id objValue);

__attribute__((unused)) static id ASImageViewImpl_getTintColor(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_registerCommandAttributes(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_nativeCreateWithJavaUtilMap_(ASImageViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASImageViewImpl_nativeRequestLayout(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_nativeInvalidate(ASImageViewImpl *self);

__attribute__((unused)) static void ASImageViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASImageViewImpl *self, jint l, jint t, jint r, jint b);

@interface ASImageViewImpl_ScaleType () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASImageViewImpl_ScaleType, mapping_, id<JavaUtilMap>)

@interface ASImageViewImpl_ImageViewExt () {
 @public
  __unsafe_unretained ASImageViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
}

@end

J2OBJC_FIELD_SETTER(ASImageViewImpl_ImageViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASImageViewImpl_ImageViewExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASImageViewImpl_ImageViewCommandBuilder () {
 @public
  ASImageViewImpl *this$0_;
}

@end

@interface ASImageViewImpl_ImageViewBean () {
 @public
  ASImageViewImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASImageViewImpl)

NSString *ASImageViewImpl_LOCAL_NAME = @"ImageView";
NSString *ASImageViewImpl_GROUP_NAME = @"ImageView";

@implementation ASImageViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"src"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ImageView.scaleType", new_ASImageViewImpl_ScaleType_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scaleType"])) withTypeWithNSString:@"ImageView.scaleType"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"adjustViewBounds"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imageFromUrl"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imageFromUrlPlaceHolder"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imageFromUrlError"])) withTypeWithNSString:@"drawable"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baseline"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"baselineAlignBottom"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"tint"])) withTypeWithNSString:@"color"])) withOrderWithInt:-10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cropToPadding"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASImageViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASImageViewImpl_ImageViewExt *) nil_chk(((ASImageViewImpl_ImageViewExt *) cast_chk(measurableImageView_, [ASImageViewImpl_ImageViewExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASImageViewImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableImageView_ = new_ASImageViewImpl_ImageViewExt_initWithASImageViewImpl_(self);
  ASImageViewImpl_createSimpleWrapableView(self);
  ASImageViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASImageViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASImageViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"src", @"scaleType", @"adjustViewBounds", @"maxHeight", @"maxWidth", @"imageFromUrl", @"imageFromUrlPlaceHolder", @"imageFromUrlError", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"baseline", @"baselineAlignBottom", @"tint", @"cropToPadding" }, 21)) {
    case 0:
    {
      [self setImageWithId:objValue];
    }
    break;
    case 1:
    {
      ASImageViewImpl_setScaleTypeWithNSString_withId_(self, strValue, objValue);
    }
    break;
    case 2:
    {
      ASImageViewImpl_setAdjustViewBoundsWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASImageViewImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASImageViewImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASImageViewImpl_setImageFromUrlWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASImageViewImpl_setImageFromUrlPlaceHolderWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASImageViewImpl_setImageFromUrlErrorWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASImageViewImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASImageViewImpl_setPaddingBottomWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASImageViewImpl_setPaddingRightWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASImageViewImpl_setPaddingLeftWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASImageViewImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASImageViewImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASImageViewImpl_setPaddingTopWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASImageViewImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASImageViewImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASImageViewImpl_setBaseLineWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASImageViewImpl_setBaselineAlignBottomWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASImageViewImpl_setTintColorWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASImageViewImpl_setCropToPaddingWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"src", @"scaleType", @"adjustViewBounds", @"maxHeight", @"maxWidth", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"baseline", @"baselineAlignBottom", @"tint", @"cropToPadding" }, 15)) {
    case 0:
    {
      return ASImageViewImpl_getSrc(self);
    }
    case 1:
    {
      return ASImageViewImpl_getScaleType(self);
    }
    case 2:
    {
      return ASImageViewImpl_getAdjustViewBounds(self);
    }
    case 3:
    {
      return ASImageViewImpl_getMaxHeight(self);
    }
    case 4:
    {
      return ASImageViewImpl_getMaxWidth(self);
    }
    case 5:
    {
      return ASImageViewImpl_getPaddingBottom(self);
    }
    case 6:
    {
      return ASImageViewImpl_getPaddingRight(self);
    }
    case 7:
    {
      return ASImageViewImpl_getPaddingLeft(self);
    }
    case 8:
    {
      return ASImageViewImpl_getPaddingStart(self);
    }
    case 9:
    {
      return ASImageViewImpl_getPaddingEnd(self);
    }
    case 10:
    {
      return ASImageViewImpl_getPaddingTop(self);
    }
    case 11:
    {
      return JavaLangInteger_valueOfWithInt_([self getBaseLine]);
    }
    case 12:
    {
      return ASImageViewImpl_getBaselineAlignBottom(self);
    }
    case 13:
    {
      return ASImageViewImpl_getTintColor(self);
    }
    case 14:
    {
      return ASImageViewImpl_getCropToPadding(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableImageView_;
}

- (id)getBaselineAlignBottom {
  return ASImageViewImpl_getBaselineAlignBottom(self);
}

- (jint)getBaseLine {
  return [((ASMeasurableImageView *) nil_chk(measurableImageView_)) getBaseline];
}

- (void)setBaseLineWithId:(id)objValue {
  ASImageViewImpl_setBaseLineWithId_(self, objValue);
}

- (void)setBaselineAlignBottomWithId:(id)objValue {
  ASImageViewImpl_setBaselineAlignBottomWithId_(self, objValue);
}

- (void)setCropToPaddingWithId:(id)objValue {
  ASImageViewImpl_setCropToPaddingWithId_(self, objValue);
}

- (id)getCropToPadding {
  return ASImageViewImpl_getCropToPadding(self);
}

- (id)getMaxWidth {
  return ASImageViewImpl_getMaxWidth(self);
}

- (id)getMaxHeight {
  return ASImageViewImpl_getMaxHeight(self);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASImageViewImpl_setMaxWidthWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASImageViewImpl_setMaxHeightWithId_(self, objValue);
}

- (id)getAdjustViewBounds {
  return ASImageViewImpl_getAdjustViewBounds(self);
}

- (void)setAdjustViewBoundsWithId:(id)objValue {
  ASImageViewImpl_setAdjustViewBoundsWithId_(self, objValue);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ADDrawable *imageDrawable = [((ASMeasurableImageView *) nil_chk(measurableImageView_)) getImageDrawable];
  if (imageDrawable != nil && [imageDrawable isStateful] && [imageDrawable setStateWithIntArray:[((ASMeasurableImageView *) nil_chk(measurableImageView_)) getDrawableState]]) {
    [self setImageWithId:imageDrawable];
  }
}

- (id)getPaddingBottom {
  return ASImageViewImpl_getPaddingBottom(self);
}

- (id)getPaddingTop {
  return ASImageViewImpl_getPaddingTop(self);
}

- (id)getPaddingRight {
  return ASImageViewImpl_getPaddingRight(self);
}

- (id)getPaddingLeft {
  return ASImageViewImpl_getPaddingLeft(self);
}

- (id)getPaddingEnd {
  return ASImageViewImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASImageViewImpl_getPaddingStart(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASImageViewImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASImageViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingTopWithId:(id)objValue {
  ASImageViewImpl_setPaddingTopWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASImageViewImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASImageViewImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingLeftWithId:(id)objValue {
  ASImageViewImpl_setPaddingLeftWithId_(self, objValue);
}

- (void)setPaddingRightWithId:(id)objValue {
  ASImageViewImpl_setPaddingRightWithId_(self, objValue);
}

- (void)setPaddingBottomWithId:(id)objValue {
  ASImageViewImpl_setPaddingBottomWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASImageViewImpl_setPaddingWithId_(self, objValue);
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableImageView *) nil_chk(measurableImageView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
    ASImageViewImpl_nativeRequestLayout(self);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
    if (ASImageViewImpl_isViewWrapped(self)) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
      if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
        ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
      }
    }
    ASImageViewImpl_nativeInvalidate(self);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASImageViewImpl_ImageViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASImageViewImpl_ImageViewBean_initWithASImageViewImpl_(self);
  }
  return bean_;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASImageViewImpl_ImageViewCommandBuilder_initWithASImageViewImpl_(self);
  }
  return builder_;
}

- (void)createSimpleWrapableView {
  ASImageViewImpl_createSimpleWrapableView(self);
}

- (jboolean)hasScrollView {
  return ASImageViewImpl_hasScrollView(self);
}

- (jboolean)isViewWrapped {
  return ASImageViewImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASImageViewImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b {
  ASImageViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASImageViewImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  uiView_ = [self nativeCreateViewWithInt:viewtype];
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASImageViewImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(jint)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASImageViewImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASImageViewImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASImageViewImpl_getScrollView(self);
}

- (id)getImage {
  return [self getImageNative];
}

- (IOSIntArray *)getImageDimension {
  id image = [self getImage];
  if (image != nil) {
    return [IOSIntArray newArrayWithInts:(jint[]){ ASImageViewImpl_getImageWidthWithId_(self, image), ASImageViewImpl_getImageHeightWithId_(self, image) } count:2];
  }
  return [IOSIntArray newArrayWithInts:(jint[]){ 0, 0 } count:2];
}

- (id)getScaleType {
  return ASImageViewImpl_getScaleType(self);
}

- (void)setScaleTypeWithNSString:(NSString *)strValue
                          withId:(id)objValue {
  ASImageViewImpl_setScaleTypeWithNSString_withId_(self, strValue, objValue);
}

- (void)setImageWithId:(id)value {
  [((ASMeasurableImageView *) nil_chk(measurableImageView_)) setImageDrawableWithADDrawable:(ADDrawable *) cast_chk(value, [ADDrawable class])];
  [self setImageNativeWithId:[((ADDrawable *) nil_chk(((ADDrawable *) cast_chk(value, [ADDrawable class])))) getDrawable]];
}

- (id)getSrc {
  return ASImageViewImpl_getSrc(self);
}

- (jint)getImageHeightWithId:(id)image {
  return ASImageViewImpl_getImageHeightWithId_(self, image);
}

- (jint)getImageWidthWithId:(id)image {
  return ASImageViewImpl_getImageWidthWithId_(self, image);
}

- (void)setImageFromUrlErrorWithId:(id)objValue {
  ASImageViewImpl_setImageFromUrlErrorWithId_(self, objValue);
}

- (void)setImageFromUrlPlaceHolderWithId:(id)objValue {
  ASImageViewImpl_setImageFromUrlPlaceHolderWithId_(self, objValue);
}

- (void)setImageFromUrlWithId:(id)objValue {
  ASImageViewImpl_setImageFromUrlWithId_(self, objValue);
}

- (void)onBitmapFailedWithId:(id)errorDrawable {
  if (imageFromUrlError_ != nil) {
    [self setImageWithId:imageFromUrlError_];
    if (measureCalled_) {
      [self requestLayout];
      [((id<ASIFragment>) nil_chk(fragment_)) remeasure];
    }
  }
}

- (void)onPrepareLoadWithId:(id)placeHolderDrawable {
  if (placeHolderDrawable == nil) {
    [self setImageWithId:new_ADDrawable_init()];
  }
  else {
    [self setImageWithId:placeHolderDrawable];
  }
}

- (void)onBitmapLoadedWithId:(id)bitmap {
  id image = [((id<ADBitmap>) nil_chk(((id<ADBitmap>) cast_check(bitmap, ADBitmap_class_())))) getImage];
  ADDrawable *drawable = new_ADDrawable_init();
  [drawable setDrawableWithId:image];
  [drawable setMinimumHeightWithInt:ASImageViewImpl_getImageHeightWithId_(self, image)];
  [drawable setMinimumWidthWithInt:ASImageViewImpl_getImageWidthWithId_(self, image)];
  [self setImageWithId:drawable];
  if (measureCalled_) {
    [self requestLayout];
    [((id<ASIFragment>) nil_chk(fragment_)) remeasure];
  }
}

- (void)postOnMeasureWithInt:(jint)widthMeasureSpec
                     withInt:(jint)heightMeasureSpec {
  ASImageViewImpl_postOnMeasureWithInt_withInt_(self, widthMeasureSpec, heightMeasureSpec);
}

- (id)getImageNative {
  return ((ASUIImageView*) self->uiView_).image;
}

- (void)setImageNativeWithId:(id)value {
  if ([value isKindOfClass:[UIImage class]]) {
    ((ASUIImageView*) self->uiView_).image = (UIImage*) value;
    [((ASUIImageView*) self->uiView_) setBackgroundColor:[UIColor clearColor]];
  } else if ([value isKindOfClass:[UIColor class]]) {
    [((ASUIImageView*) self->uiView_) setBackgroundColor:((UIColor*) value)];
    ((ASUIImageView*) self->uiView_).image = nil;
  }
}

- (JavaLangInteger *)nativeGetContentMode {
  return ASImageViewImpl_nativeGetContentMode(self);
}

- (void)nativeSetContentModeWithInt:(jint)contentMode {
  ASImageViewImpl_nativeSetContentModeWithInt_(self, contentMode);
}

- (void)setTintColorWithId:(id)objValue {
  ASImageViewImpl_setTintColorWithId_(self, objValue);
}

- (void)nativeSetTintColorWithId:(id)objValue {
  ASImageViewImpl_nativeSetTintColorWithId_(self, objValue);
}

- (id)getTintColor {
  return ASImageViewImpl_getTintColor(self);
}

- (void)registerCommandAttributes {
  ASImageViewImpl_registerCommandAttributes(self);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASImageViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)nativeRequestLayout {
  ASImageViewImpl_nativeRequestLayout(self);
}

- (void)createMaskWithId:(id)viewToMask
                 withInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)width
                 withInt:(jint)height {
  // Create a mask layer and the frame to determine what will be visible in the view.
  CAShapeLayer *maskLayer = [[CAShapeLayer alloc] init];
  CGRect maskRect = CGRectMake(x, y, width, height);
  
  // Create a path with the rectangle in it.
  CGPathRef path = CGPathCreateWithRect(maskRect, NULL);
  
  // Set the path to the mask layer.
  maskLayer.path = path;
  
  // Release the path since it's not covered by ARC.
  CGPathRelease(path);
  
  // Set the mask of the view.
  ((UIView*)viewToMask).layer.mask = maskLayer;
}

- (void)removeMaskWithId:(id)viewToMask {
  ((UIView*)viewToMask).layer.mask = nil;
}

- (void)nativeInvalidate {
  ASImageViewImpl_nativeInvalidate(self);
}

- (id)nativeCreateViewWithInt:(jint)viewType {
  ASUIImageView* imageView = [ASUIImageView new];
  imageView.commandRegex = ASImageViewImpl_WIDGET_REGEX;
  [imageView setContentMode:UIViewContentModeScaleAspectFit];
  return imageView;
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASImageViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 27, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 29, 1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 36, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 38, 35, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 42, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 43, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 3, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 51, 12, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 52, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 54, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, 57, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 60, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 61, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 31, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(getBaselineAlignBottom);
  methods[10].selector = @selector(getBaseLine);
  methods[11].selector = @selector(setBaseLineWithId:);
  methods[12].selector = @selector(setBaselineAlignBottomWithId:);
  methods[13].selector = @selector(setCropToPaddingWithId:);
  methods[14].selector = @selector(getCropToPadding);
  methods[15].selector = @selector(getMaxWidth);
  methods[16].selector = @selector(getMaxHeight);
  methods[17].selector = @selector(setMaxWidthWithId:);
  methods[18].selector = @selector(setMaxHeightWithId:);
  methods[19].selector = @selector(getAdjustViewBounds);
  methods[20].selector = @selector(setAdjustViewBoundsWithId:);
  methods[21].selector = @selector(drawableStateChanged);
  methods[22].selector = @selector(getPaddingBottom);
  methods[23].selector = @selector(getPaddingTop);
  methods[24].selector = @selector(getPaddingRight);
  methods[25].selector = @selector(getPaddingLeft);
  methods[26].selector = @selector(getPaddingEnd);
  methods[27].selector = @selector(getPaddingStart);
  methods[28].selector = @selector(setPaddingVerticalWithId:);
  methods[29].selector = @selector(setPaddingHorizontalWithId:);
  methods[30].selector = @selector(setPaddingTopWithId:);
  methods[31].selector = @selector(setPaddingEndWithId:);
  methods[32].selector = @selector(setPaddingStartWithId:);
  methods[33].selector = @selector(setPaddingLeftWithId:);
  methods[34].selector = @selector(setPaddingRightWithId:);
  methods[35].selector = @selector(setPaddingBottomWithId:);
  methods[36].selector = @selector(setPaddingWithId:);
  methods[37].selector = @selector(checkIosVersionWithNSString:);
  methods[38].selector = @selector(setIdWithNSString:);
  methods[39].selector = @selector(requestLayout);
  methods[40].selector = @selector(invalidate);
  methods[41].selector = @selector(getPluginWithNSString:);
  methods[42].selector = @selector(getBean);
  methods[43].selector = @selector(getBuilder);
  methods[44].selector = @selector(createSimpleWrapableView);
  methods[45].selector = @selector(hasScrollView);
  methods[46].selector = @selector(isViewWrapped);
  methods[47].selector = @selector(addForegroundIfNeeded);
  methods[48].selector = @selector(getForeground);
  methods[49].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[50].selector = @selector(asNativeWidget);
  methods[51].selector = @selector(invalidateWrapViewHolder);
  methods[52].selector = @selector(createWrapperViewWithId:withInt:);
  methods[53].selector = @selector(createWrapperViewHolderWithInt:);
  methods[54].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[55].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[56].selector = @selector(getScrollView);
  methods[57].selector = @selector(getImage);
  methods[58].selector = @selector(getImageDimension);
  methods[59].selector = @selector(getScaleType);
  methods[60].selector = @selector(setScaleTypeWithNSString:withId:);
  methods[61].selector = @selector(setImageWithId:);
  methods[62].selector = @selector(getSrc);
  methods[63].selector = @selector(getImageHeightWithId:);
  methods[64].selector = @selector(getImageWidthWithId:);
  methods[65].selector = @selector(setImageFromUrlErrorWithId:);
  methods[66].selector = @selector(setImageFromUrlPlaceHolderWithId:);
  methods[67].selector = @selector(setImageFromUrlWithId:);
  methods[68].selector = @selector(onBitmapFailedWithId:);
  methods[69].selector = @selector(onPrepareLoadWithId:);
  methods[70].selector = @selector(onBitmapLoadedWithId:);
  methods[71].selector = @selector(postOnMeasureWithInt:withInt:);
  methods[72].selector = @selector(getImageNative);
  methods[73].selector = @selector(setImageNativeWithId:);
  methods[74].selector = @selector(nativeGetContentMode);
  methods[75].selector = @selector(nativeSetContentModeWithInt:);
  methods[76].selector = @selector(setTintColorWithId:);
  methods[77].selector = @selector(nativeSetTintColorWithId:);
  methods[78].selector = @selector(getTintColor);
  methods[79].selector = @selector(registerCommandAttributes);
  methods[80].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[81].selector = @selector(nativeRequestLayout);
  methods[82].selector = @selector(createMaskWithId:withInt:withInt:withInt:withInt:);
  methods[83].selector = @selector(removeMaskWithId:);
  methods[84].selector = @selector(nativeInvalidate);
  methods[85].selector = @selector(nativeCreateViewWithInt:);
  methods[86].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 63, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 64, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 65, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableImageView_", "LASMeasurableImageView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "builder_", "LASImageViewImpl_ImageViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASImageViewImpl_ImageViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleTypeToContentModeMapping", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 68, 69, -1 },
    { "imageFromUrlPlaceHolder_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "measureCalled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "imageFromUrlError_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setBaseLine", "LNSObject;", "setBaselineAlignBottom", "setCropToPadding", "setMaxWidth", "setMaxHeight", "setAdjustViewBounds", "setPaddingVertical", "setPaddingHorizontal", "setPaddingTop", "setPaddingEnd", "setPaddingStart", "setPaddingLeft", "setPaddingRight", "setPaddingBottom", "setPadding", "checkIosVersion", "setId", "getPlugin", "setForegroundFrame", "IIII", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "I", "nativeAddForeGround", "LASIWidget;", "createWrapperViewHolderNative", "setScaleType", "LNSString;LNSObject;", "setImage", "getImageHeight", "getImageWidth", "setImageFromUrlError", "setImageFromUrlPlaceHolder", "setImageFromUrl", "onBitmapFailed", "onPrepareLoad", "onBitmapLoaded", "postOnMeasure", "setImageNative", "nativeSetContentMode", "setTintColor", "nativeSetTintColor", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "createMask", "LNSObject;IIII", "removeMask", "nativeCreateView", "nativeMakeFrameForChildWidget", &ASImageViewImpl_FOREGROUND_REGEX, &ASImageViewImpl_VIEW_HOLDER_REGEX, &ASImageViewImpl_WIDGET_REGEX, &ASImageViewImpl_LOCAL_NAME, &ASImageViewImpl_GROUP_NAME, &ASImageViewImpl_scaleTypeToContentModeMapping, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASImageViewImpl_ScaleType;LASImageViewImpl_ImageViewExt;LASImageViewImpl_ImageViewCommandBuilder;LASImageViewImpl_ImageViewBean;" };
  static const J2ObjcClassInfo _ASImageViewImpl = { "ImageViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 87, 14, -1, 70, -1, -1, -1 };
  return &_ASImageViewImpl;
}

+ (void)initialize {
  if (self == [ASImageViewImpl class]) {
    ASImageViewImpl_scaleTypeToContentModeMapping = new_JavaUtilHashMap_init();
    {
      (void) [ASImageViewImpl_scaleTypeToContentModeMapping putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeCenter))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) putWithId:@"centerCrop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeScaleAspectFill))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) putWithId:@"centerInside" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeScaleAspectFit))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) putWithId:@"fitXY" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIViewContentModeScaleToFill))];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) putWithId:@"fitCenter" withId:JavaLangInteger_valueOfWithInt_(-1)];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) putWithId:@"fitStart" withId:JavaLangInteger_valueOfWithInt_(-2)];
      (void) [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) putWithId:@"fitEnd" withId:JavaLangInteger_valueOfWithInt_(-3)];
    }
    J2OBJC_SET_INITIALIZED(ASImageViewImpl)
  }
}

@end

void ASImageViewImpl_init(ASImageViewImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASImageViewImpl_GROUP_NAME, ASImageViewImpl_LOCAL_NAME);
  self->measureCalled_ = false;
}

ASImageViewImpl *new_ASImageViewImpl_init() {
  J2OBJC_NEW_IMPL(ASImageViewImpl, init)
}

ASImageViewImpl *create_ASImageViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASImageViewImpl, init)
}

void ASImageViewImpl_setWidgetOnNativeClass(ASImageViewImpl *self) {
  ((ASUIImageView*) self.uiView).widget = self;
}

id ASImageViewImpl_getBaselineAlignBottom(ASImageViewImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getBaselineAlignBottom]);
}

void ASImageViewImpl_setBaseLineWithId_(ASImageViewImpl *self, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setBaselineWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASImageViewImpl_setBaselineAlignBottomWithId_(ASImageViewImpl *self, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setBaselineAlignBottomWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASImageViewImpl_setCropToPaddingWithId_(ASImageViewImpl *self, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setCropToPaddingWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASImageViewImpl_getCropToPadding(ASImageViewImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getCropToPadding]);
}

id ASImageViewImpl_getMaxWidth(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getMaxWidth]);
}

id ASImageViewImpl_getMaxHeight(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getMaxHeight]);
}

void ASImageViewImpl_setMaxWidthWithId_(ASImageViewImpl *self, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue]];
}

void ASImageViewImpl_setMaxHeightWithId_(ASImageViewImpl *self, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])))) intValue]];
}

id ASImageViewImpl_getAdjustViewBounds(ASImageViewImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getAdjustViewBounds]);
}

void ASImageViewImpl_setAdjustViewBoundsWithId_(ASImageViewImpl *self, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setAdjustViewBoundsWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASImageViewImpl_getPaddingBottom(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingBottom]);
}

id ASImageViewImpl_getPaddingTop(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingTop]);
}

id ASImageViewImpl_getPaddingRight(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingRight]);
}

id ASImageViewImpl_getPaddingLeft(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingLeft]);
}

id ASImageViewImpl_getPaddingEnd(ASImageViewImpl *self) {
  return ASImageViewImpl_getPaddingRight(self);
}

id ASImageViewImpl_getPaddingStart(ASImageViewImpl *self) {
  return ASImageViewImpl_getPaddingLeft(self);
}

void ASImageViewImpl_setPaddingVerticalWithId_(ASImageViewImpl *self, id objValue) {
  ASImageViewImpl_setPaddingBottomWithId_(self, objValue);
  ASImageViewImpl_setPaddingTopWithId_(self, objValue);
}

void ASImageViewImpl_setPaddingHorizontalWithId_(ASImageViewImpl *self, id objValue) {
  ASImageViewImpl_setPaddingRightWithId_(self, objValue);
  ASImageViewImpl_setPaddingLeftWithId_(self, objValue);
}

void ASImageViewImpl_setPaddingTopWithId_(ASImageViewImpl *self, id objValue) {
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, self->measurableImageView_);
}

void ASImageViewImpl_setPaddingEndWithId_(ASImageViewImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableImageView_);
}

void ASImageViewImpl_setPaddingStartWithId_(ASImageViewImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableImageView_);
}

void ASImageViewImpl_setPaddingLeftWithId_(ASImageViewImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableImageView_);
}

void ASImageViewImpl_setPaddingRightWithId_(ASImageViewImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableImageView_);
}

void ASImageViewImpl_setPaddingBottomWithId_(ASImageViewImpl *self, id objValue) {
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, self->measurableImageView_);
}

void ASImageViewImpl_setPaddingWithId_(ASImageViewImpl *self, id objValue) {
  ASImageViewImpl_setPaddingBottomWithId_(self, objValue);
  ASImageViewImpl_setPaddingTopWithId_(self, objValue);
  ASImageViewImpl_setPaddingRightWithId_(self, objValue);
  ASImageViewImpl_setPaddingLeftWithId_(self, objValue);
}

void ASImageViewImpl_createSimpleWrapableView(ASImageViewImpl *self) {
  jboolean wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  jint viewType = -1;
  if (wrapViewFeature) {
    jboolean hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    jboolean vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

jboolean ASImageViewImpl_hasScrollView(ASImageViewImpl *self) {
  return ASImageViewImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

jboolean ASImageViewImpl_isViewWrapped(ASImageViewImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASImageViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASImageViewImpl *self, jint l, jint t, jint r, jint b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASImageViewImpl_invalidateWrapViewHolder(ASImageViewImpl *self) {
  if (ASImageViewImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASImageViewImpl_getScrollView(ASImageViewImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

id ASImageViewImpl_getScaleType(ASImageViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getScaleTypeInt]);
}

void ASImageViewImpl_setScaleTypeWithNSString_withId_(ASImageViewImpl *self, NSString *strValue, id objValue) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setScaleTypeWithNSString:strValue withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  if (ASImageViewImpl_isViewWrapped(self)) {
    if ([@"fitXY" isEqual:strValue]) {
      ASImageViewImpl_nativeSetContentModeWithInt_(self, [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) getWithId:strValue])) intValue]);
    }
    else {
      ASImageViewImpl_nativeSetContentModeWithInt_(self, [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) getWithId:@"centerInside"])) intValue]);
    }
  }
  else {
    JavaLangInteger *contentMode = [((id<JavaUtilMap>) nil_chk(ASImageViewImpl_scaleTypeToContentModeMapping)) getWithId:strValue];
    if (contentMode != nil) {
      ASImageViewImpl_nativeSetContentModeWithInt_(self, [contentMode intValue]);
    }
  }
}

id ASImageViewImpl_getSrc(ASImageViewImpl *self) {
  return [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getImageDrawable];
}

jint ASImageViewImpl_getImageHeightWithId_(ASImageViewImpl *self, id image) {
  return ((UIImage*) image).size.height;
}

jint ASImageViewImpl_getImageWidthWithId_(ASImageViewImpl *self, id image) {
  return ((UIImage*) image).size.width;
}

void ASImageViewImpl_setImageFromUrlErrorWithId_(ASImageViewImpl *self, id objValue) {
  self->imageFromUrlError_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
}

void ASImageViewImpl_setImageFromUrlPlaceHolderWithId_(ASImageViewImpl *self, id objValue) {
  self->imageFromUrlPlaceHolder_ = (ADDrawable *) cast_chk(objValue, [ADDrawable class]);
}

void ASImageViewImpl_setImageFromUrlWithId_(ASImageViewImpl *self, id objValue) {
  self->measureCalled_ = false;
  [((id<ASIImageDownloader>) nil_chk(ASImageDownloaderFactory_get())) downloadWithId:new_ADContext_init() withNSString:(NSString *) cast_chk(objValue, [NSString class]) withId:self->imageFromUrlPlaceHolder_ withId:self->imageFromUrlError_ withASITarget:self];
}

void ASImageViewImpl_postOnMeasureWithInt_withInt_(ASImageViewImpl *self, jint widthMeasureSpec, jint heightMeasureSpec) {
  self->measureCalled_ = true;
}

JavaLangInteger *ASImageViewImpl_nativeGetContentMode(ASImageViewImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint) ((ASUIImageView*)self->uiView_).contentMode];
}

void ASImageViewImpl_nativeSetContentModeWithInt_(ASImageViewImpl *self, jint contentMode) {
  [((ASUIImageView*)self->uiView_) setContentMode:contentMode];
}

void ASImageViewImpl_setTintColorWithId_(ASImageViewImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"src" withNSString:@"tintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"tint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  ASImageViewImpl_nativeSetTintColorWithId_(self, objValue);
}

void ASImageViewImpl_nativeSetTintColorWithId_(ASImageViewImpl *self, id objValue) {
  [((ASUIImageView*)self->uiView_) setTintColor:(UIColor*)objValue];
}

id ASImageViewImpl_getTintColor(ASImageViewImpl *self) {
  return ((ASUIImageView*)self->uiView_).tintColor;
}

void ASImageViewImpl_registerCommandAttributes(ASImageViewImpl *self) {
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"src" } count:1 type:NSString_class_()]];
}

void ASImageViewImpl_nativeCreateWithJavaUtilMap_(ASImageViewImpl *self, id<JavaUtilMap> params) {
  [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) setUsePaddingForBoundsWithBoolean:true];
  ASImageViewImpl_registerCommandAttributes(self);
}

void ASImageViewImpl_nativeRequestLayout(ASImageViewImpl *self) {
}

void ASImageViewImpl_nativeInvalidate(ASImageViewImpl *self) {
  ASImageViewImpl_invalidateWrapViewHolder(self);
}

void ASImageViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASImageViewImpl *self, jint l, jint t, jint r, jint b) {
  if (ASImageViewImpl_isViewWrapped(self)) {
    ASRectM *bounds = [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getImageBoundsWithInt:r - l withInt:b - t];
    id imageView = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrappedView];
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(imageView, ((ASRectM *) nil_chk(bounds))->x_, bounds->y_, bounds->width_ + bounds->x_, bounds->y_ + bounds->height_);
    if ([((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getCropToPadding]) {
      [self createMaskWithId:[((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder] withInt:[((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingLeft] withInt:[((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingTop] withInt:r - l - [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingRight] - [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingLeft] withInt:b - t - [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingBottom] - [((ASMeasurableImageView *) nil_chk(self->measurableImageView_)) getPaddingTop]];
    }
    else {
      [self removeMaskWithId:[((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]];
    }
  }
  ASImageViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageViewImpl)

@implementation ASImageViewImpl_ScaleType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASImageViewImpl_ScaleType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASImageViewImpl;" };
  static const J2ObjcClassInfo _ASImageViewImpl_ScaleType = { "ScaleType", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASImageViewImpl_ScaleType;
}

@end

void ASImageViewImpl_ScaleType_init(ASImageViewImpl_ScaleType *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"centerCrop" withId:JavaLangInteger_valueOfWithInt_((jint) 0x6)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"centerInside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x7)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitCenter" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitEnd" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitStart" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"fitXY" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"matrix" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASImageViewImpl_ScaleType *new_ASImageViewImpl_ScaleType_init() {
  J2OBJC_NEW_IMPL(ASImageViewImpl_ScaleType, init)
}

ASImageViewImpl_ScaleType *create_ASImageViewImpl_ScaleType_init() {
  J2OBJC_CREATE_IMPL(ASImageViewImpl_ScaleType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageViewImpl_ScaleType)

@implementation ASImageViewImpl_ImageViewExt

- (instancetype)initWithASImageViewImpl:(ASImageViewImpl *)outer$ {
  ASImageViewImpl_ImageViewExt_initWithASImageViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
  ASImageViewImpl_postOnMeasureWithInt_withInt_(this$0_, widthMeasureSpec, heightMeasureSpec);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASImageViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASImageViewImpl_ImageViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASImageViewImpl:);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[5].selector = @selector(newInstanceWithASIWidget:);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[7].selector = @selector(getMethods);
  methods[8].selector = @selector(initialized);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[10].selector = @selector(drawableStateChanged);
  methods[11].selector = @selector(offsetTopAndBottomWithInt:);
  methods[12].selector = @selector(offsetLeftAndRightWithInt:);
  methods[13].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASImageViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASImageViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASImageViewImpl_ImageViewExt = { "ImageViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 14, 3, 0, -1, -1, -1, -1 };
  return &_ASImageViewImpl_ImageViewExt;
}

@end

void ASImageViewImpl_ImageViewExt_initWithASImageViewImpl_(ASImageViewImpl_ImageViewExt *self, ASImageViewImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableImageView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASImageViewImpl_ImageViewExt *new_ASImageViewImpl_ImageViewExt_initWithASImageViewImpl_(ASImageViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASImageViewImpl_ImageViewExt, initWithASImageViewImpl_, outer$)
}

ASImageViewImpl_ImageViewExt *create_ASImageViewImpl_ImageViewExt_initWithASImageViewImpl_(ASImageViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASImageViewImpl_ImageViewExt, initWithASImageViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageViewImpl_ImageViewExt)

@implementation ASImageViewImpl_ImageViewCommandBuilder

- (instancetype)initWithASImageViewImpl:(ASImageViewImpl *)outer$ {
  ASImageViewImpl_ImageViewCommandBuilder_initWithASImageViewImpl_(self, outer$);
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetSrc {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"src"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getSrc {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"src"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setSrcWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"src"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetScaleType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getScaleType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleType"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setScaleTypeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetAdjustViewBounds {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"adjustViewBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isAdjustViewBounds {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"adjustViewBounds"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setAdjustViewBoundsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"adjustViewBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setImageFromUrlWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imageFromUrl"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setImageFromUrlPlaceHolderWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imageFromUrlPlaceHolder"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setImageFromUrlErrorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imageFromUrlError"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetBaseline {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baseline"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBaseline {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baseline"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setBaselineWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baseline"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetBaselineAlignBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isBaselineAlignBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setBaselineAlignBottomWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"baselineAlignBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"tint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASImageViewImpl_ImageViewCommandBuilder *)tryGetCropToPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cropToPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isCropToPadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cropToPadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASImageViewImpl_ImageViewCommandBuilder *)setCropToPaddingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cropToPadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASImageViewImpl_ImageViewCommandBuilder;", 0x1, 24, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASImageViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetSrc);
  methods[3].selector = @selector(getSrc);
  methods[4].selector = @selector(setSrcWithNSString:);
  methods[5].selector = @selector(tryGetScaleType);
  methods[6].selector = @selector(getScaleType);
  methods[7].selector = @selector(setScaleTypeWithNSString:);
  methods[8].selector = @selector(tryGetAdjustViewBounds);
  methods[9].selector = @selector(isAdjustViewBounds);
  methods[10].selector = @selector(setAdjustViewBoundsWithBoolean:);
  methods[11].selector = @selector(tryGetMaxHeight);
  methods[12].selector = @selector(getMaxHeight);
  methods[13].selector = @selector(setMaxHeightWithNSString:);
  methods[14].selector = @selector(tryGetMaxWidth);
  methods[15].selector = @selector(getMaxWidth);
  methods[16].selector = @selector(setMaxWidthWithNSString:);
  methods[17].selector = @selector(setImageFromUrlWithNSString:);
  methods[18].selector = @selector(setImageFromUrlPlaceHolderWithNSString:);
  methods[19].selector = @selector(setImageFromUrlErrorWithNSString:);
  methods[20].selector = @selector(setPaddingWithNSString:);
  methods[21].selector = @selector(tryGetPaddingBottom);
  methods[22].selector = @selector(getPaddingBottom);
  methods[23].selector = @selector(setPaddingBottomWithNSString:);
  methods[24].selector = @selector(tryGetPaddingRight);
  methods[25].selector = @selector(getPaddingRight);
  methods[26].selector = @selector(setPaddingRightWithNSString:);
  methods[27].selector = @selector(tryGetPaddingLeft);
  methods[28].selector = @selector(getPaddingLeft);
  methods[29].selector = @selector(setPaddingLeftWithNSString:);
  methods[30].selector = @selector(tryGetPaddingStart);
  methods[31].selector = @selector(getPaddingStart);
  methods[32].selector = @selector(setPaddingStartWithNSString:);
  methods[33].selector = @selector(tryGetPaddingEnd);
  methods[34].selector = @selector(getPaddingEnd);
  methods[35].selector = @selector(setPaddingEndWithNSString:);
  methods[36].selector = @selector(tryGetPaddingTop);
  methods[37].selector = @selector(getPaddingTop);
  methods[38].selector = @selector(setPaddingTopWithNSString:);
  methods[39].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[40].selector = @selector(setPaddingVerticalWithNSString:);
  methods[41].selector = @selector(tryGetBaseline);
  methods[42].selector = @selector(getBaseline);
  methods[43].selector = @selector(setBaselineWithNSString:);
  methods[44].selector = @selector(tryGetBaselineAlignBottom);
  methods[45].selector = @selector(isBaselineAlignBottom);
  methods[46].selector = @selector(setBaselineAlignBottomWithBoolean:);
  methods[47].selector = @selector(tryGetTint);
  methods[48].selector = @selector(getTint);
  methods[49].selector = @selector(setTintWithNSString:);
  methods[50].selector = @selector(tryGetCropToPadding);
  methods[51].selector = @selector(isCropToPadding);
  methods[52].selector = @selector(setCropToPaddingWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASImageViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASImageViewImpl;", "execute", "Z", "setSrc", "LNSString;", "setScaleType", "setAdjustViewBounds", "setMaxHeight", "setMaxWidth", "setImageFromUrl", "setImageFromUrlPlaceHolder", "setImageFromUrlError", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setBaseline", "setBaselineAlignBottom", "setTint", "setCropToPadding", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/ImageViewImpl$ImageViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASImageViewImpl_ImageViewCommandBuilder = { "ImageViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 53, 1, 0, -1, -1, 25, -1 };
  return &_ASImageViewImpl_ImageViewCommandBuilder;
}

@end

void ASImageViewImpl_ImageViewCommandBuilder_initWithASImageViewImpl_(ASImageViewImpl_ImageViewCommandBuilder *self, ASImageViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASImageViewImpl_ImageViewCommandBuilder *new_ASImageViewImpl_ImageViewCommandBuilder_initWithASImageViewImpl_(ASImageViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASImageViewImpl_ImageViewCommandBuilder, initWithASImageViewImpl_, outer$)
}

ASImageViewImpl_ImageViewCommandBuilder *create_ASImageViewImpl_ImageViewCommandBuilder_initWithASImageViewImpl_(ASImageViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASImageViewImpl_ImageViewCommandBuilder, initWithASImageViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageViewImpl_ImageViewCommandBuilder)

@implementation ASImageViewImpl_ImageViewBean

- (instancetype)initWithASImageViewImpl:(ASImageViewImpl *)outer$ {
  ASImageViewImpl_ImageViewBean_initWithASImageViewImpl_(self, outer$);
  return self;
}

- (id)getSrc {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetSrc])) executeWithBoolean:false])) getSrc];
}

- (void)setSrcWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSrcWithNSString:value])) executeWithBoolean:true];
}

- (id)getScaleType {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetScaleType])) executeWithBoolean:false])) getScaleType];
}

- (void)setScaleTypeWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScaleTypeWithNSString:value])) executeWithBoolean:true];
}

- (id)isAdjustViewBounds {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAdjustViewBounds])) executeWithBoolean:false])) isAdjustViewBounds];
}

- (void)setAdjustViewBoundsWithBoolean:(jboolean)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAdjustViewBoundsWithBoolean:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setImageFromUrlWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImageFromUrlWithNSString:value])) executeWithBoolean:true];
}

- (void)setImageFromUrlPlaceHolderWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImageFromUrlPlaceHolderWithNSString:value])) executeWithBoolean:true];
}

- (void)setImageFromUrlErrorWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImageFromUrlErrorWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (id)getBaseline {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaseline])) executeWithBoolean:false])) getBaseline];
}

- (void)setBaselineWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineWithNSString:value])) executeWithBoolean:true];
}

- (id)isBaselineAlignBottom {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetBaselineAlignBottom])) executeWithBoolean:false])) isBaselineAlignBottom];
}

- (void)setBaselineAlignBottomWithBoolean:(jboolean)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setBaselineAlignBottomWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTint {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTint])) executeWithBoolean:false])) getTint];
}

- (void)setTintWithNSString:(NSString *)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTintWithNSString:value])) executeWithBoolean:true];
}

- (id)isCropToPadding {
  return [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCropToPadding])) executeWithBoolean:false])) isCropToPadding];
}

- (void)setCropToPaddingWithBoolean:(jboolean)value {
  (void) [((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([((ASImageViewImpl_ImageViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCropToPaddingWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASImageViewImpl:);
  methods[1].selector = @selector(getSrc);
  methods[2].selector = @selector(setSrcWithNSString:);
  methods[3].selector = @selector(getScaleType);
  methods[4].selector = @selector(setScaleTypeWithNSString:);
  methods[5].selector = @selector(isAdjustViewBounds);
  methods[6].selector = @selector(setAdjustViewBoundsWithBoolean:);
  methods[7].selector = @selector(getMaxHeight);
  methods[8].selector = @selector(setMaxHeightWithNSString:);
  methods[9].selector = @selector(getMaxWidth);
  methods[10].selector = @selector(setMaxWidthWithNSString:);
  methods[11].selector = @selector(setImageFromUrlWithNSString:);
  methods[12].selector = @selector(setImageFromUrlPlaceHolderWithNSString:);
  methods[13].selector = @selector(setImageFromUrlErrorWithNSString:);
  methods[14].selector = @selector(setPaddingWithNSString:);
  methods[15].selector = @selector(getPaddingBottom);
  methods[16].selector = @selector(setPaddingBottomWithNSString:);
  methods[17].selector = @selector(getPaddingRight);
  methods[18].selector = @selector(setPaddingRightWithNSString:);
  methods[19].selector = @selector(getPaddingLeft);
  methods[20].selector = @selector(setPaddingLeftWithNSString:);
  methods[21].selector = @selector(getPaddingStart);
  methods[22].selector = @selector(setPaddingStartWithNSString:);
  methods[23].selector = @selector(getPaddingEnd);
  methods[24].selector = @selector(setPaddingEndWithNSString:);
  methods[25].selector = @selector(getPaddingTop);
  methods[26].selector = @selector(setPaddingTopWithNSString:);
  methods[27].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[28].selector = @selector(setPaddingVerticalWithNSString:);
  methods[29].selector = @selector(getBaseline);
  methods[30].selector = @selector(setBaselineWithNSString:);
  methods[31].selector = @selector(isBaselineAlignBottom);
  methods[32].selector = @selector(setBaselineAlignBottomWithBoolean:);
  methods[33].selector = @selector(getTint);
  methods[34].selector = @selector(setTintWithNSString:);
  methods[35].selector = @selector(isCropToPadding);
  methods[36].selector = @selector(setCropToPaddingWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASImageViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASImageViewImpl;", "setSrc", "LNSString;", "setScaleType", "setAdjustViewBounds", "Z", "setMaxHeight", "setMaxWidth", "setImageFromUrl", "setImageFromUrlPlaceHolder", "setImageFromUrlError", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setBaseline", "setBaselineAlignBottom", "setTint", "setCropToPadding" };
  static const J2ObjcClassInfo _ASImageViewImpl_ImageViewBean = { "ImageViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 37, 1, 0, -1, -1, -1, -1 };
  return &_ASImageViewImpl_ImageViewBean;
}

@end

void ASImageViewImpl_ImageViewBean_initWithASImageViewImpl_(ASImageViewImpl_ImageViewBean *self, ASImageViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASImageViewImpl_ImageViewBean *new_ASImageViewImpl_ImageViewBean_initWithASImageViewImpl_(ASImageViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASImageViewImpl_ImageViewBean, initWithASImageViewImpl_, outer$)
}

ASImageViewImpl_ImageViewBean *create_ASImageViewImpl_ImageViewBean_initWithASImageViewImpl_(ASImageViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASImageViewImpl_ImageViewBean, initWithASImageViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageViewImpl_ImageViewBean)
