//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\RelativeLayout.java
//

#include "ApplicationInfo.h"
#include "ArrayMap.h"
#include "Build.h"
#include "Context.h"
#include "Gravity.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pools.h"
#include "Rect.h"
#include "RelativeLayout.h"
#include "SparseArray.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"

@class ADRelativeLayout_DependencyGraph;
@class JavaUtilArrayDeque;
@class JavaUtilArrayList;


@interface ADRelativeLayout () {
 @public
  ADView *mBaselineView_;
  jint mGravity_;
  ADRect *mContentBounds_;
  ADRect *mSelfBounds_;
  jint mIgnoreGravity_;
  jboolean mDirtyHierarchy_;
  IOSObjectArray *mSortedHorizontalChildren_;
  IOSObjectArray *mSortedVerticalChildren_;
  ADRelativeLayout_DependencyGraph *mGraph_;
  jboolean mAllowBrokenMeasureSpecs_;
  jboolean mMeasureVerticalWithPaddingMargin_;
}

- (void)sortChildren;

- (jint)compareLayoutPositionWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p1
                             withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p2;

- (void)measureChildWithADView:(ADView *)child
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                       withInt:(jint)myWidth
                       withInt:(jint)myHeight;

- (void)measureChildHorizontalWithADView:(ADView *)child
       withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                                 withInt:(jint)myWidth
                                 withInt:(jint)myHeight;

- (jint)getChildMeasureSpecWithInt:(jint)childStart
                           withInt:(jint)childEnd
                           withInt:(jint)childSize
                           withInt:(jint)startMargin
                           withInt:(jint)endMargin
                           withInt:(jint)startPadding
                           withInt:(jint)endPadding
                           withInt:(jint)mySize;

- (jboolean)positionChildHorizontalWithADView:(ADView *)child
            withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                                      withInt:(jint)myWidth
                                  withBoolean:(jboolean)wrapContent;

- (void)positionAtEdgeWithADView:(ADView *)child
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                         withInt:(jint)myWidth;

- (jboolean)positionChildVerticalWithADView:(ADView *)child
          withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                                    withInt:(jint)myHeight
                                withBoolean:(jboolean)wrapContent;

- (void)applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)childParams
                                                          withInt:(jint)myWidth
                                                     withIntArray:(IOSIntArray *)rules;

- (void)applyVerticalSizeRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)childParams
                                                        withInt:(jint)myHeight
                                                        withInt:(jint)myBaseline;

- (ADView *)getRelatedViewWithIntArray:(IOSIntArray *)rules
                               withInt:(jint)relation;

- (ADRelativeLayout_LayoutParams *)getRelatedViewParamsWithIntArray:(IOSIntArray *)rules
                                                            withInt:(jint)relation;

- (jint)getRelatedViewBaselineOffsetWithIntArray:(IOSIntArray *)rules;

+ (void)centerHorizontalWithADView:(ADView *)child
 withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                           withInt:(jint)myWidth;

+ (void)centerVerticalWithADView:(ADView *)child
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                         withInt:(jint)myHeight;

@end

J2OBJC_FIELD_SETTER(ADRelativeLayout, mBaselineView_, ADView *)
J2OBJC_FIELD_SETTER(ADRelativeLayout, mContentBounds_, ADRect *)
J2OBJC_FIELD_SETTER(ADRelativeLayout, mSelfBounds_, ADRect *)
J2OBJC_FIELD_SETTER(ADRelativeLayout, mSortedHorizontalChildren_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADRelativeLayout, mSortedVerticalChildren_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADRelativeLayout, mGraph_, ADRelativeLayout_DependencyGraph *)

inline jint ADRelativeLayout_get_VERB_COUNT(void);
#define ADRelativeLayout_VERB_COUNT 22
J2OBJC_STATIC_FIELD_CONSTANT(ADRelativeLayout, VERB_COUNT, jint)

inline IOSIntArray *ADRelativeLayout_get_RULES_VERTICAL(void);
static IOSIntArray *ADRelativeLayout_RULES_VERTICAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADRelativeLayout, RULES_VERTICAL, IOSIntArray *)

inline IOSIntArray *ADRelativeLayout_get_RULES_HORIZONTAL(void);
static IOSIntArray *ADRelativeLayout_RULES_HORIZONTAL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADRelativeLayout, RULES_HORIZONTAL, IOSIntArray *)

inline jint ADRelativeLayout_get_VALUE_NOT_SET(void);
#define ADRelativeLayout_VALUE_NOT_SET ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADRelativeLayout, VALUE_NOT_SET, jint)

inline jint ADRelativeLayout_get_DEFAULT_WIDTH(void);
#define ADRelativeLayout_DEFAULT_WIDTH 65536
J2OBJC_STATIC_FIELD_CONSTANT(ADRelativeLayout, DEFAULT_WIDTH, jint)

__attribute__((unused)) static void ADRelativeLayout_sortChildren(ADRelativeLayout *self);

__attribute__((unused)) static jint ADRelativeLayout_compareLayoutPositionWithADRelativeLayout_LayoutParams_withADRelativeLayout_LayoutParams_(ADRelativeLayout *self, ADRelativeLayout_LayoutParams *p1, ADRelativeLayout_LayoutParams *p2);

__attribute__((unused)) static void ADRelativeLayout_measureChildWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth, jint myHeight);

__attribute__((unused)) static void ADRelativeLayout_measureChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth, jint myHeight);

__attribute__((unused)) static jint ADRelativeLayout_getChildMeasureSpecWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(ADRelativeLayout *self, jint childStart, jint childEnd, jint childSize, jint startMargin, jint endMargin, jint startPadding, jint endPadding, jint mySize);

__attribute__((unused)) static jboolean ADRelativeLayout_positionChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth, jboolean wrapContent);

__attribute__((unused)) static void ADRelativeLayout_positionAtEdgeWithADView_withADRelativeLayout_LayoutParams_withInt_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth);

__attribute__((unused)) static jboolean ADRelativeLayout_positionChildVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myHeight, jboolean wrapContent);

__attribute__((unused)) static void ADRelativeLayout_applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withIntArray_(ADRelativeLayout *self, ADRelativeLayout_LayoutParams *childParams, jint myWidth, IOSIntArray *rules);

__attribute__((unused)) static void ADRelativeLayout_applyVerticalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withInt_(ADRelativeLayout *self, ADRelativeLayout_LayoutParams *childParams, jint myHeight, jint myBaseline);

__attribute__((unused)) static ADView *ADRelativeLayout_getRelatedViewWithIntArray_withInt_(ADRelativeLayout *self, IOSIntArray *rules, jint relation);

__attribute__((unused)) static ADRelativeLayout_LayoutParams *ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(ADRelativeLayout *self, IOSIntArray *rules, jint relation);

__attribute__((unused)) static jint ADRelativeLayout_getRelatedViewBaselineOffsetWithIntArray_(ADRelativeLayout *self, IOSIntArray *rules);

__attribute__((unused)) static void ADRelativeLayout_centerHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_(ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth);

__attribute__((unused)) static void ADRelativeLayout_centerVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_(ADView *child, ADRelativeLayout_LayoutParams *params, jint myHeight);

@interface ADRelativeLayout_LayoutParams () {
 @public
  IOSIntArray *mRules_;
  IOSIntArray *mInitialRules_;
  jint mLeft_;
  jint mTop_;
  jint mRight_;
  jint mBottom_;
  jboolean mNeedsLayoutResolution_;
  jboolean mRulesChanged_;
  jboolean mIsRtlCompatibilityMode_;
}

- (jboolean)hasRelativeRules;

- (jboolean)isRelativeRuleWithInt:(jint)rule;

- (void)resolveRulesWithInt:(jint)layoutDirection;

- (jboolean)shouldResolveLayoutDirectionWithInt:(jint)layoutDirection;

@end

J2OBJC_FIELD_SETTER(ADRelativeLayout_LayoutParams, mRules_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADRelativeLayout_LayoutParams, mInitialRules_, IOSIntArray *)

__attribute__((unused)) static jboolean ADRelativeLayout_LayoutParams_hasRelativeRules(ADRelativeLayout_LayoutParams *self);

__attribute__((unused)) static jboolean ADRelativeLayout_LayoutParams_isRelativeRuleWithInt_(ADRelativeLayout_LayoutParams *self, jint rule);

__attribute__((unused)) static void ADRelativeLayout_LayoutParams_resolveRulesWithInt_(ADRelativeLayout_LayoutParams *self, jint layoutDirection);

__attribute__((unused)) static jboolean ADRelativeLayout_LayoutParams_shouldResolveLayoutDirectionWithInt_(ADRelativeLayout_LayoutParams *self, jint layoutDirection);

@interface ADRelativeLayout_DependencyGraph : NSObject {
 @public
  JavaUtilArrayList *mNodes_;
  ADSparseArray *mKeyNodes_;
  JavaUtilArrayDeque *mRoots_;
}

- (instancetype)init;

- (void)clear;

- (void)addWithADView:(ADView *)view;

- (void)getSortedViewsWithADViewArray:(IOSObjectArray *)sorted
                         withIntArray:(IOSIntArray *)rules;

- (JavaUtilArrayDeque *)findRootsWithIntArray:(IOSIntArray *)rulesFilter;

@end

J2OBJC_EMPTY_STATIC_INIT(ADRelativeLayout_DependencyGraph)

J2OBJC_FIELD_SETTER(ADRelativeLayout_DependencyGraph, mNodes_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADRelativeLayout_DependencyGraph, mKeyNodes_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADRelativeLayout_DependencyGraph, mRoots_, JavaUtilArrayDeque *)

__attribute__((unused)) static void ADRelativeLayout_DependencyGraph_init(ADRelativeLayout_DependencyGraph *self);

__attribute__((unused)) static ADRelativeLayout_DependencyGraph *new_ADRelativeLayout_DependencyGraph_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADRelativeLayout_DependencyGraph *create_ADRelativeLayout_DependencyGraph_init(void);

__attribute__((unused)) static JavaUtilArrayDeque *ADRelativeLayout_DependencyGraph_findRootsWithIntArray_(ADRelativeLayout_DependencyGraph *self, IOSIntArray *rulesFilter);

J2OBJC_TYPE_LITERAL_HEADER(ADRelativeLayout_DependencyGraph)

@interface ADRelativeLayout_DependencyGraph_Node : NSObject {
 @public
  __unsafe_unretained ADView *view_;
  ADArrayMap *dependents_;
  ADSparseArray *dependencies_;
}

- (instancetype)init;

+ (ADRelativeLayout_DependencyGraph_Node *)acquireWithADView:(ADView *)view;

- (void)release__;

@end

J2OBJC_STATIC_INIT(ADRelativeLayout_DependencyGraph_Node)

J2OBJC_FIELD_SETTER(ADRelativeLayout_DependencyGraph_Node, dependents_, ADArrayMap *)
J2OBJC_FIELD_SETTER(ADRelativeLayout_DependencyGraph_Node, dependencies_, ADSparseArray *)

inline jint ADRelativeLayout_DependencyGraph_Node_get_POOL_LIMIT(void);
#define ADRelativeLayout_DependencyGraph_Node_POOL_LIMIT 100
J2OBJC_STATIC_FIELD_CONSTANT(ADRelativeLayout_DependencyGraph_Node, POOL_LIMIT, jint)

inline ADPools_SynchronizedPool *ADRelativeLayout_DependencyGraph_Node_get_sPool(void);
static ADPools_SynchronizedPool *ADRelativeLayout_DependencyGraph_Node_sPool;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADRelativeLayout_DependencyGraph_Node, sPool, ADPools_SynchronizedPool *)

__attribute__((unused)) static void ADRelativeLayout_DependencyGraph_Node_init(ADRelativeLayout_DependencyGraph_Node *self);

__attribute__((unused)) static ADRelativeLayout_DependencyGraph_Node *new_ADRelativeLayout_DependencyGraph_Node_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADRelativeLayout_DependencyGraph_Node *create_ADRelativeLayout_DependencyGraph_Node_init(void);

__attribute__((unused)) static ADRelativeLayout_DependencyGraph_Node *ADRelativeLayout_DependencyGraph_Node_acquireWithADView_(ADView *view);

J2OBJC_TYPE_LITERAL_HEADER(ADRelativeLayout_DependencyGraph_Node)

J2OBJC_INITIALIZED_DEFN(ADRelativeLayout)

@implementation ADRelativeLayout

- (void)setIgnoreGravityWithInt:(jint)viewId {
  mIgnoreGravity_ = viewId;
}

- (jint)getGravity {
  return mGravity_;
}

- (void)setGravityWithInt:(jint)gravity {
  if (mGravity_ != gravity) {
    if ((gravity & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
      gravity |= ADGravity_START;
    }
    if ((gravity & ADGravity_VERTICAL_GRAVITY_MASK) == 0) {
      gravity |= ADGravity_TOP;
    }
    mGravity_ = gravity;
    [self requestLayout];
  }
}

- (jint)getBaseline {
  return mBaselineView_ != nil ? [mBaselineView_ getBaseline] : [super getBaseline];
}

- (void)requestLayout {
  [super requestLayout];
  mDirtyHierarchy_ = true;
}

- (void)sortChildren {
  ADRelativeLayout_sortChildren(self);
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mDirtyHierarchy_) {
    mDirtyHierarchy_ = false;
    ADRelativeLayout_sortChildren(self);
  }
  jint myWidth = -1;
  jint myHeight = -1;
  jint width = 0;
  jint height = 0;
  jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jint widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  jint heightSize = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  if (widthMode != ADView_MeasureSpec_UNSPECIFIED) {
    myWidth = widthSize;
  }
  if (heightMode != ADView_MeasureSpec_UNSPECIFIED) {
    myHeight = heightSize;
  }
  if (widthMode == ADView_MeasureSpec_EXACTLY) {
    width = myWidth;
  }
  if (heightMode == ADView_MeasureSpec_EXACTLY) {
    height = myHeight;
  }
  ADView *ignore = nil;
  jint gravity = mGravity_ & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK;
  jboolean horizontalGravity = gravity != ADGravity_START && gravity != 0;
  gravity = mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
  jboolean verticalGravity = gravity != ADGravity_TOP && gravity != 0;
  jint left = JavaLangInteger_MAX_VALUE;
  jint top = JavaLangInteger_MAX_VALUE;
  jint right = JavaLangInteger_MIN_VALUE;
  jint bottom = JavaLangInteger_MIN_VALUE;
  jboolean offsetHorizontalAxis = false;
  jboolean offsetVerticalAxis = false;
  if ((horizontalGravity || verticalGravity) && mIgnoreGravity_ != ADView_NO_ID) {
    ignore = [self findViewByIdWithInt:mIgnoreGravity_];
  }
  jboolean isWrapContentWidth = widthMode != ADView_MeasureSpec_EXACTLY;
  jboolean isWrapContentHeight = heightMode != ADView_MeasureSpec_EXACTLY;
  jint layoutDirection = [self getLayoutDirection];
  if ([self isLayoutRtl] && myWidth == -1) {
    myWidth = ADRelativeLayout_DEFAULT_WIDTH;
  }
  IOSObjectArray *views = mSortedHorizontalChildren_;
  jint count = ((IOSObjectArray *) nil_chk(views))->size_;
  for (jint i = 0; i < count; i++) {
    ADView *child = IOSObjectArray_Get(views, i);
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ADRelativeLayout_LayoutParams *params = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
      IOSIntArray *rules = [((ADRelativeLayout_LayoutParams *) nil_chk(params)) getRulesWithInt:layoutDirection];
      ADRelativeLayout_applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withIntArray_(self, params, myWidth, rules);
      ADRelativeLayout_measureChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(self, child, params, myWidth, myHeight);
      if (ADRelativeLayout_positionChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(self, child, params, myWidth, isWrapContentWidth)) {
        offsetHorizontalAxis = true;
      }
    }
  }
  views = mSortedVerticalChildren_;
  count = ((IOSObjectArray *) nil_chk(views))->size_;
  jint targetSdkVersion = ((ADApplicationInfo *) nil_chk([((ADContext *) nil_chk([self getContext])) getApplicationInfo]))->targetSdkVersion_;
  for (jint i = 0; i < count; i++) {
    ADView *child = IOSObjectArray_Get(views, i);
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ADRelativeLayout_LayoutParams *params = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
      ADRelativeLayout_applyVerticalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withInt_(self, params, myHeight, [child getBaseline]);
      ADRelativeLayout_measureChildWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(self, child, params, myWidth, myHeight);
      if (ADRelativeLayout_positionChildVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(self, child, params, myHeight, isWrapContentHeight)) {
        offsetVerticalAxis = true;
      }
      if (isWrapContentWidth) {
        if ([self isLayoutRtl]) {
          if (targetSdkVersion < ADBuild_VERSION_CODES_KITKAT) {
            width = JavaLangMath_maxWithInt_withInt_(width, myWidth - ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_);
          }
          else {
            width = JavaLangMath_maxWithInt_withInt_(width, myWidth - ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_ + params->leftMargin_);
          }
        }
        else {
          if (targetSdkVersion < ADBuild_VERSION_CODES_KITKAT) {
            width = JavaLangMath_maxWithInt_withInt_(width, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mRight_);
          }
          else {
            width = JavaLangMath_maxWithInt_withInt_(width, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mRight_ + params->rightMargin_);
          }
        }
      }
      if (isWrapContentHeight) {
        if (targetSdkVersion < ADBuild_VERSION_CODES_KITKAT) {
          height = JavaLangMath_maxWithInt_withInt_(height, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mBottom_);
        }
        else {
          height = JavaLangMath_maxWithInt_withInt_(height, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mBottom_ + params->bottomMargin_);
        }
      }
      if (child != ignore || verticalGravity) {
        left = JavaLangMath_minWithInt_withInt_(left, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_ - params->leftMargin_);
        top = JavaLangMath_minWithInt_withInt_(top, params->mTop_ - params->topMargin_);
      }
      if (child != ignore || horizontalGravity) {
        right = JavaLangMath_maxWithInt_withInt_(right, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mRight_ + params->rightMargin_);
        bottom = JavaLangMath_maxWithInt_withInt_(bottom, params->mBottom_ + params->bottomMargin_);
      }
    }
  }
  ADView *baselineView = nil;
  ADRelativeLayout_LayoutParams *baselineParams = nil;
  for (jint i = 0; i < count; i++) {
    ADView *child = IOSObjectArray_Get(views, i);
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ADRelativeLayout_LayoutParams *childParams = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
      if (baselineView == nil || baselineParams == nil || ADRelativeLayout_compareLayoutPositionWithADRelativeLayout_LayoutParams_withADRelativeLayout_LayoutParams_(self, childParams, baselineParams) < 0) {
        baselineView = child;
        baselineParams = childParams;
      }
    }
  }
  JreStrongAssign(&mBaselineView_, baselineView);
  if (isWrapContentWidth) {
    width += mPaddingRight_;
    if (mLayoutParams_ != nil && mLayoutParams_->width_ >= 0) {
      width = JavaLangMath_maxWithInt_withInt_(width, mLayoutParams_->width_);
    }
    width = JavaLangMath_maxWithInt_withInt_(width, [self getSuggestedMinimumWidth]);
    width = ADView_resolveSizeWithInt_withInt_(width, widthMeasureSpec);
    if (offsetHorizontalAxis) {
      for (jint i = 0; i < count; i++) {
        ADView *child = IOSObjectArray_Get(views, i);
        if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
          ADRelativeLayout_LayoutParams *params = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
          IOSIntArray *rules = [((ADRelativeLayout_LayoutParams *) nil_chk(params)) getRulesWithInt:layoutDirection];
          if (IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_CENTER_IN_PARENT) != 0 || IOSIntArray_Get(rules, ADRelativeLayout_CENTER_HORIZONTAL) != 0) {
            ADRelativeLayout_centerHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_(child, params, width);
          }
          else if (IOSIntArray_Get(rules, ADRelativeLayout_ALIGN_PARENT_RIGHT) != 0) {
            jint childWidth = [child getMeasuredWidth];
            params->mLeft_ = width - mPaddingRight_ - childWidth;
            params->mRight_ = params->mLeft_ + childWidth;
          }
        }
      }
    }
  }
  if (isWrapContentHeight) {
    height += mPaddingBottom_;
    if (mLayoutParams_ != nil && mLayoutParams_->height_ >= 0) {
      height = JavaLangMath_maxWithInt_withInt_(height, mLayoutParams_->height_);
    }
    height = JavaLangMath_maxWithInt_withInt_(height, [self getSuggestedMinimumHeight]);
    height = ADView_resolveSizeWithInt_withInt_(height, heightMeasureSpec);
    if (offsetVerticalAxis) {
      for (jint i = 0; i < count; i++) {
        ADView *child = IOSObjectArray_Get(views, i);
        if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
          ADRelativeLayout_LayoutParams *params = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
          IOSIntArray *rules = [((ADRelativeLayout_LayoutParams *) nil_chk(params)) getRulesWithInt:layoutDirection];
          if (IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_CENTER_IN_PARENT) != 0 || IOSIntArray_Get(rules, ADRelativeLayout_CENTER_VERTICAL) != 0) {
            ADRelativeLayout_centerVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_(child, params, height);
          }
          else if (IOSIntArray_Get(rules, ADRelativeLayout_ALIGN_PARENT_BOTTOM) != 0) {
            jint childHeight = [child getMeasuredHeight];
            params->mTop_ = height - mPaddingBottom_ - childHeight;
            params->mBottom_ = params->mTop_ + childHeight;
          }
        }
      }
    }
  }
  if (horizontalGravity || verticalGravity) {
    ADRect *selfBounds = mSelfBounds_;
    [((ADRect *) nil_chk(selfBounds)) setWithInt:mPaddingLeft_ withInt:mPaddingTop_ withInt:width - mPaddingRight_ withInt:height - mPaddingBottom_];
    ADRect *contentBounds = mContentBounds_;
    ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(mGravity_, right - left, bottom - top, selfBounds, contentBounds, layoutDirection);
    jint horizontalOffset = ((ADRect *) nil_chk(contentBounds))->left_ - left;
    jint verticalOffset = contentBounds->top_ - top;
    if (horizontalOffset != 0 || verticalOffset != 0) {
      for (jint i = 0; i < count; i++) {
        ADView *child = IOSObjectArray_Get(views, i);
        if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE && child != ignore) {
          ADRelativeLayout_LayoutParams *params = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
          if (horizontalGravity) {
            ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_ += horizontalOffset;
            params->mRight_ += horizontalOffset;
          }
          if (verticalGravity) {
            ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mTop_ += verticalOffset;
            params->mBottom_ += verticalOffset;
          }
        }
      }
    }
  }
  if ([self isLayoutRtl]) {
    jint offsetWidth = myWidth - width;
    for (jint i = 0; i < count; i++) {
      ADView *child = IOSObjectArray_Get(views, i);
      if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
        ADRelativeLayout_LayoutParams *params = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
        ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_ -= offsetWidth;
        params->mRight_ -= offsetWidth;
      }
    }
  }
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (jint)compareLayoutPositionWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p1
                             withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)p2 {
  return ADRelativeLayout_compareLayoutPositionWithADRelativeLayout_LayoutParams_withADRelativeLayout_LayoutParams_(self, p1, p2);
}

- (void)measureChildWithADView:(ADView *)child
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                       withInt:(jint)myWidth
                       withInt:(jint)myHeight {
  ADRelativeLayout_measureChildWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(self, child, params, myWidth, myHeight);
}

- (void)measureChildHorizontalWithADView:(ADView *)child
       withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                                 withInt:(jint)myWidth
                                 withInt:(jint)myHeight {
  ADRelativeLayout_measureChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(self, child, params, myWidth, myHeight);
}

- (jint)getChildMeasureSpecWithInt:(jint)childStart
                           withInt:(jint)childEnd
                           withInt:(jint)childSize
                           withInt:(jint)startMargin
                           withInt:(jint)endMargin
                           withInt:(jint)startPadding
                           withInt:(jint)endPadding
                           withInt:(jint)mySize {
  return ADRelativeLayout_getChildMeasureSpecWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, childStart, childEnd, childSize, startMargin, endMargin, startPadding, endPadding, mySize);
}

- (jboolean)positionChildHorizontalWithADView:(ADView *)child
            withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                                      withInt:(jint)myWidth
                                  withBoolean:(jboolean)wrapContent {
  return ADRelativeLayout_positionChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(self, child, params, myWidth, wrapContent);
}

- (void)positionAtEdgeWithADView:(ADView *)child
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                         withInt:(jint)myWidth {
  ADRelativeLayout_positionAtEdgeWithADView_withADRelativeLayout_LayoutParams_withInt_(self, child, params, myWidth);
}

- (jboolean)positionChildVerticalWithADView:(ADView *)child
          withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                                    withInt:(jint)myHeight
                                withBoolean:(jboolean)wrapContent {
  return ADRelativeLayout_positionChildVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(self, child, params, myHeight, wrapContent);
}

- (void)applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)childParams
                                                          withInt:(jint)myWidth
                                                     withIntArray:(IOSIntArray *)rules {
  ADRelativeLayout_applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withIntArray_(self, childParams, myWidth, rules);
}

- (void)applyVerticalSizeRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)childParams
                                                        withInt:(jint)myHeight
                                                        withInt:(jint)myBaseline {
  ADRelativeLayout_applyVerticalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withInt_(self, childParams, myHeight, myBaseline);
}

- (ADView *)getRelatedViewWithIntArray:(IOSIntArray *)rules
                               withInt:(jint)relation {
  return ADRelativeLayout_getRelatedViewWithIntArray_withInt_(self, rules, relation);
}

- (ADRelativeLayout_LayoutParams *)getRelatedViewParamsWithIntArray:(IOSIntArray *)rules
                                                            withInt:(jint)relation {
  return ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, relation);
}

- (jint)getRelatedViewBaselineOffsetWithIntArray:(IOSIntArray *)rules {
  return ADRelativeLayout_getRelatedViewBaselineOffsetWithIntArray_(self, rules);
}

+ (void)centerHorizontalWithADView:(ADView *)child
 withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                           withInt:(jint)myWidth {
  ADRelativeLayout_centerHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_(child, params, myWidth);
}

+ (void)centerVerticalWithADView:(ADView *)child
withADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)params
                         withInt:(jint)myHeight {
  ADRelativeLayout_centerVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_(child, params, myHeight);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  jint count = [self getChildCount];
  for (jint i = 0; i < count; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ADRelativeLayout_LayoutParams *st = (ADRelativeLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADRelativeLayout_LayoutParams class]);
      [child layoutWithInt:((ADRelativeLayout_LayoutParams *) nil_chk(st))->mLeft_ withInt:st->mTop_ withInt:st->mRight_ withInt:st->mBottom_];
    }
  }
}

- (ADViewGroup_LayoutParams *)generateDefaultLayoutParams {
  return create_ADRelativeLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[ADRelativeLayout_LayoutParams class]];
}

- (ADViewGroup_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)lp {
  if (JreLoadStatic(ADView, sPreserveMarginParamsInLayoutParamConversion)) {
    if ([lp isKindOfClass:[ADRelativeLayout_LayoutParams class]]) {
      return create_ADRelativeLayout_LayoutParams_initWithADRelativeLayout_LayoutParams_((ADRelativeLayout_LayoutParams *) lp);
    }
    else if ([lp isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
      return create_ADRelativeLayout_LayoutParams_initWithADViewGroup_LayoutParams_((ADViewGroup_MarginLayoutParams *) lp);
    }
  }
  return create_ADRelativeLayout_LayoutParams_initWithADViewGroup_LayoutParams_(lp);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADRelativeLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)release__ {
  [((ADRelativeLayout_DependencyGraph *) nil_chk(mGraph_)) clear];
}

- (void)dealloc {
  RELEASE_(mBaselineView_);
  RELEASE_(mContentBounds_);
  RELEASE_(mSelfBounds_);
  RELEASE_(mSortedHorizontalChildren_);
  RELEASE_(mSortedVerticalChildren_);
  RELEASE_(mGraph_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 16, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "LADRelativeLayout_LayoutParams;", 0x2, 23, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 26, 15, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 29, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 30, 31, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, 32, 31, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setIgnoreGravityWithInt:);
  methods[1].selector = @selector(getGravity);
  methods[2].selector = @selector(setGravityWithInt:);
  methods[3].selector = @selector(getBaseline);
  methods[4].selector = @selector(requestLayout);
  methods[5].selector = @selector(sortChildren);
  methods[6].selector = @selector(onMeasureWithInt:withInt:);
  methods[7].selector = @selector(compareLayoutPositionWithADRelativeLayout_LayoutParams:withADRelativeLayout_LayoutParams:);
  methods[8].selector = @selector(measureChildWithADView:withADRelativeLayout_LayoutParams:withInt:withInt:);
  methods[9].selector = @selector(measureChildHorizontalWithADView:withADRelativeLayout_LayoutParams:withInt:withInt:);
  methods[10].selector = @selector(getChildMeasureSpecWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[11].selector = @selector(positionChildHorizontalWithADView:withADRelativeLayout_LayoutParams:withInt:withBoolean:);
  methods[12].selector = @selector(positionAtEdgeWithADView:withADRelativeLayout_LayoutParams:withInt:);
  methods[13].selector = @selector(positionChildVerticalWithADView:withADRelativeLayout_LayoutParams:withInt:withBoolean:);
  methods[14].selector = @selector(applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams:withInt:withIntArray:);
  methods[15].selector = @selector(applyVerticalSizeRulesWithADRelativeLayout_LayoutParams:withInt:withInt:);
  methods[16].selector = @selector(getRelatedViewWithIntArray:withInt:);
  methods[17].selector = @selector(getRelatedViewParamsWithIntArray:withInt:);
  methods[18].selector = @selector(getRelatedViewBaselineOffsetWithIntArray:);
  methods[19].selector = @selector(centerHorizontalWithADView:withADRelativeLayout_LayoutParams:withInt:);
  methods[20].selector = @selector(centerVerticalWithADView:withADRelativeLayout_LayoutParams:withInt:);
  methods[21].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[22].selector = @selector(generateDefaultLayoutParams);
  methods[23].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[24].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[25].selector = @selector(init);
  methods[26].selector = @selector(release__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRUE", "I", .constantValue.asInt = ADRelativeLayout_TRUE, 0x19, -1, -1, -1, -1 },
    { "LEFT_OF", "I", .constantValue.asInt = ADRelativeLayout_LEFT_OF, 0x19, -1, -1, -1, -1 },
    { "RIGHT_OF", "I", .constantValue.asInt = ADRelativeLayout_RIGHT_OF, 0x19, -1, -1, -1, -1 },
    { "ABOVE", "I", .constantValue.asInt = ADRelativeLayout_ABOVE, 0x19, -1, -1, -1, -1 },
    { "BELOW", "I", .constantValue.asInt = ADRelativeLayout_BELOW, 0x19, -1, -1, -1, -1 },
    { "ALIGN_BASELINE", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_BASELINE, 0x19, -1, -1, -1, -1 },
    { "ALIGN_LEFT", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_LEFT, 0x19, -1, -1, -1, -1 },
    { "ALIGN_TOP", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_TOP, 0x19, -1, -1, -1, -1 },
    { "ALIGN_RIGHT", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_RIGHT, 0x19, -1, -1, -1, -1 },
    { "ALIGN_BOTTOM", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "ALIGN_PARENT_LEFT", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_PARENT_LEFT, 0x19, -1, -1, -1, -1 },
    { "ALIGN_PARENT_TOP", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_PARENT_TOP, 0x19, -1, -1, -1, -1 },
    { "ALIGN_PARENT_RIGHT", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_PARENT_RIGHT, 0x19, -1, -1, -1, -1 },
    { "ALIGN_PARENT_BOTTOM", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_PARENT_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "CENTER_IN_PARENT", "I", .constantValue.asInt = ADRelativeLayout_CENTER_IN_PARENT, 0x19, -1, -1, -1, -1 },
    { "CENTER_HORIZONTAL", "I", .constantValue.asInt = ADRelativeLayout_CENTER_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "CENTER_VERTICAL", "I", .constantValue.asInt = ADRelativeLayout_CENTER_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "START_OF", "I", .constantValue.asInt = ADRelativeLayout_START_OF, 0x19, -1, -1, -1, -1 },
    { "END_OF", "I", .constantValue.asInt = ADRelativeLayout_END_OF, 0x19, -1, -1, -1, -1 },
    { "ALIGN_START", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_START, 0x19, -1, -1, -1, -1 },
    { "ALIGN_END", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_END, 0x19, -1, -1, -1, -1 },
    { "ALIGN_PARENT_START", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_PARENT_START, 0x19, -1, -1, -1, -1 },
    { "ALIGN_PARENT_END", "I", .constantValue.asInt = ADRelativeLayout_ALIGN_PARENT_END, 0x19, -1, -1, -1, -1 },
    { "VERB_COUNT", "I", .constantValue.asInt = ADRelativeLayout_VERB_COUNT, 0x1a, -1, -1, -1, -1 },
    { "RULES_VERTICAL", "[I", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "RULES_HORIZONTAL", "[I", .constantValue.asLong = 0, 0x1a, -1, 35, -1, -1 },
    { "VALUE_NOT_SET", "I", .constantValue.asInt = ADRelativeLayout_VALUE_NOT_SET, 0x1a, -1, -1, -1, -1 },
    { "mBaselineView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContentBounds_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mSelfBounds_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mIgnoreGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDirtyHierarchy_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSortedHorizontalChildren_", "[LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSortedVerticalChildren_", "[LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGraph_", "LADRelativeLayout_DependencyGraph;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mAllowBrokenMeasureSpecs_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMeasureVerticalWithPaddingMargin_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_WIDTH", "I", .constantValue.asInt = ADRelativeLayout_DEFAULT_WIDTH, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setIgnoreGravity", "I", "setGravity", "onMeasure", "II", "compareLayoutPosition", "LADRelativeLayout_LayoutParams;LADRelativeLayout_LayoutParams;", "measureChild", "LADView;LADRelativeLayout_LayoutParams;II", "measureChildHorizontal", "getChildMeasureSpec", "IIIIIIII", "positionChildHorizontal", "LADView;LADRelativeLayout_LayoutParams;IZ", "positionAtEdge", "LADView;LADRelativeLayout_LayoutParams;I", "positionChildVertical", "applyHorizontalSizeRules", "LADRelativeLayout_LayoutParams;I[I", "applyVerticalSizeRules", "LADRelativeLayout_LayoutParams;II", "getRelatedView", "[II", "getRelatedViewParams", "getRelatedViewBaselineOffset", "[I", "centerHorizontal", "centerVertical", "onLayout", "ZIIII", "checkLayoutParams", "LADViewGroup_LayoutParams;", "generateLayoutParams", "release", &ADRelativeLayout_RULES_VERTICAL, &ADRelativeLayout_RULES_HORIZONTAL, "LADRelativeLayout_LayoutParams;LADRelativeLayout_DependencyGraph;" };
  static const J2ObjcClassInfo _ADRelativeLayout = { "RelativeLayout", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 27, 39, -1, 36, -1, -1, -1 };
  return &_ADRelativeLayout;
}

+ (void)initialize {
  if (self == [ADRelativeLayout class]) {
    JreStrongAssignAndConsume(&ADRelativeLayout_RULES_VERTICAL, [IOSIntArray newArrayWithInts:(jint[]){ ADRelativeLayout_ABOVE, ADRelativeLayout_BELOW, ADRelativeLayout_ALIGN_BASELINE, ADRelativeLayout_ALIGN_TOP, ADRelativeLayout_ALIGN_BOTTOM } count:5]);
    JreStrongAssignAndConsume(&ADRelativeLayout_RULES_HORIZONTAL, [IOSIntArray newArrayWithInts:(jint[]){ ADRelativeLayout_LEFT_OF, ADRelativeLayout_RIGHT_OF, ADRelativeLayout_ALIGN_LEFT, ADRelativeLayout_ALIGN_RIGHT, ADRelativeLayout_START_OF, ADRelativeLayout_END_OF, ADRelativeLayout_ALIGN_START, ADRelativeLayout_ALIGN_END } count:8]);
    J2OBJC_SET_INITIALIZED(ADRelativeLayout)
  }
}

@end

void ADRelativeLayout_sortChildren(ADRelativeLayout *self) {
  jint count = [self getChildCount];
  if (self->mSortedVerticalChildren_ == nil || self->mSortedVerticalChildren_->size_ != count) {
    JreStrongAssignAndConsume(&self->mSortedVerticalChildren_, [IOSObjectArray newArrayWithLength:count type:ADView_class_()]);
  }
  if (self->mSortedHorizontalChildren_ == nil || self->mSortedHorizontalChildren_->size_ != count) {
    JreStrongAssignAndConsume(&self->mSortedHorizontalChildren_, [IOSObjectArray newArrayWithLength:count type:ADView_class_()]);
  }
  ADRelativeLayout_DependencyGraph *graph = self->mGraph_;
  [((ADRelativeLayout_DependencyGraph *) nil_chk(graph)) clear];
  for (jint i = 0; i < count; i++) {
    [graph addWithADView:[self getChildAtWithInt:i]];
  }
  [graph getSortedViewsWithADViewArray:self->mSortedVerticalChildren_ withIntArray:ADRelativeLayout_RULES_VERTICAL];
  [graph getSortedViewsWithADViewArray:self->mSortedHorizontalChildren_ withIntArray:ADRelativeLayout_RULES_HORIZONTAL];
}

jint ADRelativeLayout_compareLayoutPositionWithADRelativeLayout_LayoutParams_withADRelativeLayout_LayoutParams_(ADRelativeLayout *self, ADRelativeLayout_LayoutParams *p1, ADRelativeLayout_LayoutParams *p2) {
  jint topDiff = ((ADRelativeLayout_LayoutParams *) nil_chk(p1))->mTop_ - ((ADRelativeLayout_LayoutParams *) nil_chk(p2))->mTop_;
  if (topDiff != 0) {
    return topDiff;
  }
  return p1->mLeft_ - p2->mLeft_;
}

void ADRelativeLayout_measureChildWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth, jint myHeight) {
  jint childWidthMeasureSpec = ADRelativeLayout_getChildMeasureSpecWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_, params->mRight_, params->width_, params->leftMargin_, params->rightMargin_, self->mPaddingLeft_, self->mPaddingRight_, myWidth);
  jint childHeightMeasureSpec = ADRelativeLayout_getChildMeasureSpecWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, params->mTop_, params->mBottom_, params->height_, params->topMargin_, params->bottomMargin_, self->mPaddingTop_, self->mPaddingBottom_, myHeight);
  [((ADView *) nil_chk(child)) measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
}

void ADRelativeLayout_measureChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withInt_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth, jint myHeight) {
  jint childWidthMeasureSpec = ADRelativeLayout_getChildMeasureSpecWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(self, ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_, params->mRight_, params->width_, params->leftMargin_, params->rightMargin_, self->mPaddingLeft_, self->mPaddingRight_, myWidth);
  jint childHeightMeasureSpec;
  if (myHeight < 0 && !self->mAllowBrokenMeasureSpecs_) {
    if (params->height_ >= 0) {
      childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(params->height_, ADView_MeasureSpec_EXACTLY);
    }
    else {
      childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(0, ADView_MeasureSpec_UNSPECIFIED);
    }
  }
  else {
    jint maxHeight;
    if (self->mMeasureVerticalWithPaddingMargin_) {
      maxHeight = JavaLangMath_maxWithInt_withInt_(0, myHeight - self->mPaddingTop_ - self->mPaddingBottom_ - params->topMargin_ - params->bottomMargin_);
    }
    else {
      maxHeight = JavaLangMath_maxWithInt_withInt_(0, myHeight);
    }
    jint heightMode;
    if (params->height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
      heightMode = ADView_MeasureSpec_EXACTLY;
    }
    else {
      heightMode = ADView_MeasureSpec_AT_MOST;
    }
    childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(maxHeight, heightMode);
  }
  [((ADView *) nil_chk(child)) measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
}

jint ADRelativeLayout_getChildMeasureSpecWithInt_withInt_withInt_withInt_withInt_withInt_withInt_withInt_(ADRelativeLayout *self, jint childStart, jint childEnd, jint childSize, jint startMargin, jint endMargin, jint startPadding, jint endPadding, jint mySize) {
  jint childSpecMode = 0;
  jint childSpecSize = 0;
  jboolean isUnspecified = mySize < 0;
  if (isUnspecified && !self->mAllowBrokenMeasureSpecs_) {
    if (childStart != ADRelativeLayout_VALUE_NOT_SET && childEnd != ADRelativeLayout_VALUE_NOT_SET) {
      childSpecSize = JavaLangMath_maxWithInt_withInt_(0, childEnd - childStart);
      childSpecMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childSize >= 0) {
      childSpecSize = childSize;
      childSpecMode = ADView_MeasureSpec_EXACTLY;
    }
    else {
      childSpecSize = 0;
      childSpecMode = ADView_MeasureSpec_UNSPECIFIED;
    }
    return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(childSpecSize, childSpecMode);
  }
  jint tempStart = childStart;
  jint tempEnd = childEnd;
  if (tempStart == ADRelativeLayout_VALUE_NOT_SET) {
    tempStart = startPadding + startMargin;
  }
  if (tempEnd == ADRelativeLayout_VALUE_NOT_SET) {
    tempEnd = mySize - endPadding - endMargin;
  }
  jint maxAvailable = tempEnd - tempStart;
  if (childStart != ADRelativeLayout_VALUE_NOT_SET && childEnd != ADRelativeLayout_VALUE_NOT_SET) {
    childSpecMode = isUnspecified ? ADView_MeasureSpec_UNSPECIFIED : ADView_MeasureSpec_EXACTLY;
    childSpecSize = JavaLangMath_maxWithInt_withInt_(0, maxAvailable);
  }
  else {
    if (childSize >= 0) {
      childSpecMode = ADView_MeasureSpec_EXACTLY;
      if (maxAvailable >= 0) {
        childSpecSize = JavaLangMath_minWithInt_withInt_(maxAvailable, childSize);
      }
      else {
        childSpecSize = childSize;
      }
    }
    else if (childSize == ADViewGroup_LayoutParams_MATCH_PARENT) {
      childSpecMode = isUnspecified ? ADView_MeasureSpec_UNSPECIFIED : ADView_MeasureSpec_EXACTLY;
      childSpecSize = JavaLangMath_maxWithInt_withInt_(0, maxAvailable);
    }
    else if (childSize == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      if (maxAvailable >= 0) {
        childSpecMode = ADView_MeasureSpec_AT_MOST;
        childSpecSize = maxAvailable;
      }
      else {
        childSpecMode = ADView_MeasureSpec_UNSPECIFIED;
        childSpecSize = 0;
      }
    }
  }
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(childSpecSize, childSpecMode);
}

jboolean ADRelativeLayout_positionChildHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth, jboolean wrapContent) {
  jint layoutDirection = [self getLayoutDirection];
  IOSIntArray *rules = [((ADRelativeLayout_LayoutParams *) nil_chk(params)) getRulesWithInt:layoutDirection];
  if (params->mLeft_ == ADRelativeLayout_VALUE_NOT_SET && params->mRight_ != ADRelativeLayout_VALUE_NOT_SET) {
    params->mLeft_ = params->mRight_ - [((ADView *) nil_chk(child)) getMeasuredWidth];
  }
  else if (params->mLeft_ != ADRelativeLayout_VALUE_NOT_SET && params->mRight_ == ADRelativeLayout_VALUE_NOT_SET) {
    params->mRight_ = params->mLeft_ + [((ADView *) nil_chk(child)) getMeasuredWidth];
  }
  else if (params->mLeft_ == ADRelativeLayout_VALUE_NOT_SET && params->mRight_ == ADRelativeLayout_VALUE_NOT_SET) {
    if (IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_CENTER_IN_PARENT) != 0 || IOSIntArray_Get(rules, ADRelativeLayout_CENTER_HORIZONTAL) != 0) {
      if (!wrapContent) {
        ADRelativeLayout_centerHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_(child, params, myWidth);
      }
      else {
        ADRelativeLayout_positionAtEdgeWithADView_withADRelativeLayout_LayoutParams_withInt_(self, child, params, myWidth);
      }
      return true;
    }
    else {
      ADRelativeLayout_positionAtEdgeWithADView_withADRelativeLayout_LayoutParams_withInt_(self, child, params, myWidth);
    }
  }
  return IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_PARENT_END) != 0;
}

void ADRelativeLayout_positionAtEdgeWithADView_withADRelativeLayout_LayoutParams_withInt_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth) {
  if ([self isLayoutRtl]) {
    ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mRight_ = myWidth - self->mPaddingRight_ - params->rightMargin_;
    params->mLeft_ = params->mRight_ - [((ADView *) nil_chk(child)) getMeasuredWidth];
  }
  else {
    ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_ = self->mPaddingLeft_ + params->leftMargin_;
    params->mRight_ = params->mLeft_ + [((ADView *) nil_chk(child)) getMeasuredWidth];
  }
}

jboolean ADRelativeLayout_positionChildVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_withBoolean_(ADRelativeLayout *self, ADView *child, ADRelativeLayout_LayoutParams *params, jint myHeight, jboolean wrapContent) {
  IOSIntArray *rules = [((ADRelativeLayout_LayoutParams *) nil_chk(params)) getRules];
  if (params->mTop_ == ADRelativeLayout_VALUE_NOT_SET && params->mBottom_ != ADRelativeLayout_VALUE_NOT_SET) {
    params->mTop_ = params->mBottom_ - [((ADView *) nil_chk(child)) getMeasuredHeight];
  }
  else if (params->mTop_ != ADRelativeLayout_VALUE_NOT_SET && params->mBottom_ == ADRelativeLayout_VALUE_NOT_SET) {
    params->mBottom_ = params->mTop_ + [((ADView *) nil_chk(child)) getMeasuredHeight];
  }
  else if (params->mTop_ == ADRelativeLayout_VALUE_NOT_SET && params->mBottom_ == ADRelativeLayout_VALUE_NOT_SET) {
    if (IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_CENTER_IN_PARENT) != 0 || IOSIntArray_Get(rules, ADRelativeLayout_CENTER_VERTICAL) != 0) {
      if (!wrapContent) {
        ADRelativeLayout_centerVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_(child, params, myHeight);
      }
      else {
        params->mTop_ = self->mPaddingTop_ + params->topMargin_;
        params->mBottom_ = params->mTop_ + [((ADView *) nil_chk(child)) getMeasuredHeight];
      }
      return true;
    }
    else {
      params->mTop_ = self->mPaddingTop_ + params->topMargin_;
      params->mBottom_ = params->mTop_ + [((ADView *) nil_chk(child)) getMeasuredHeight];
    }
  }
  return IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_PARENT_BOTTOM) != 0;
}

void ADRelativeLayout_applyHorizontalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withIntArray_(ADRelativeLayout *self, ADRelativeLayout_LayoutParams *childParams, jint myWidth, IOSIntArray *rules) {
  ADRelativeLayout_LayoutParams *anchorParams;
  ((ADRelativeLayout_LayoutParams *) nil_chk(childParams))->mLeft_ = ADRelativeLayout_VALUE_NOT_SET;
  childParams->mRight_ = ADRelativeLayout_VALUE_NOT_SET;
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_LEFT_OF);
  if (anchorParams != nil) {
    childParams->mRight_ = anchorParams->mLeft_ - (anchorParams->leftMargin_ + childParams->rightMargin_);
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_LEFT_OF) != 0) {
    if (myWidth >= 0) {
      childParams->mRight_ = myWidth - self->mPaddingRight_ - childParams->rightMargin_;
    }
  }
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_RIGHT_OF);
  if (anchorParams != nil) {
    childParams->mLeft_ = anchorParams->mRight_ + (anchorParams->rightMargin_ + childParams->leftMargin_);
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_RIGHT_OF) != 0) {
    childParams->mLeft_ = self->mPaddingLeft_ + childParams->leftMargin_;
  }
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_ALIGN_LEFT);
  if (anchorParams != nil) {
    childParams->mLeft_ = anchorParams->mLeft_ + childParams->leftMargin_;
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_LEFT) != 0) {
    childParams->mLeft_ = self->mPaddingLeft_ + childParams->leftMargin_;
  }
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_ALIGN_RIGHT);
  if (anchorParams != nil) {
    childParams->mRight_ = anchorParams->mRight_ - childParams->rightMargin_;
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_RIGHT) != 0) {
    if (myWidth >= 0) {
      childParams->mRight_ = myWidth - self->mPaddingRight_ - childParams->rightMargin_;
    }
  }
  if (0 != IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_PARENT_LEFT)) {
    childParams->mLeft_ = self->mPaddingLeft_ + childParams->leftMargin_;
  }
  if (0 != IOSIntArray_Get(rules, ADRelativeLayout_ALIGN_PARENT_RIGHT)) {
    if (myWidth >= 0) {
      childParams->mRight_ = myWidth - self->mPaddingRight_ - childParams->rightMargin_;
    }
  }
}

void ADRelativeLayout_applyVerticalSizeRulesWithADRelativeLayout_LayoutParams_withInt_withInt_(ADRelativeLayout *self, ADRelativeLayout_LayoutParams *childParams, jint myHeight, jint myBaseline) {
  IOSIntArray *rules = [((ADRelativeLayout_LayoutParams *) nil_chk(childParams)) getRules];
  jint baselineOffset = ADRelativeLayout_getRelatedViewBaselineOffsetWithIntArray_(self, rules);
  if (baselineOffset != -1) {
    if (myBaseline != -1) {
      baselineOffset -= myBaseline;
    }
    childParams->mTop_ = baselineOffset;
    childParams->mBottom_ = ADRelativeLayout_VALUE_NOT_SET;
    return;
  }
  ADRelativeLayout_LayoutParams *anchorParams;
  childParams->mTop_ = ADRelativeLayout_VALUE_NOT_SET;
  childParams->mBottom_ = ADRelativeLayout_VALUE_NOT_SET;
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_ABOVE);
  if (anchorParams != nil) {
    childParams->mBottom_ = anchorParams->mTop_ - (anchorParams->topMargin_ + childParams->bottomMargin_);
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ABOVE) != 0) {
    if (myHeight >= 0) {
      childParams->mBottom_ = myHeight - self->mPaddingBottom_ - childParams->bottomMargin_;
    }
  }
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_BELOW);
  if (anchorParams != nil) {
    childParams->mTop_ = anchorParams->mBottom_ + (anchorParams->bottomMargin_ + childParams->topMargin_);
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_BELOW) != 0) {
    childParams->mTop_ = self->mPaddingTop_ + childParams->topMargin_;
  }
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_ALIGN_TOP);
  if (anchorParams != nil) {
    childParams->mTop_ = anchorParams->mTop_ + childParams->topMargin_;
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_TOP) != 0) {
    childParams->mTop_ = self->mPaddingTop_ + childParams->topMargin_;
  }
  anchorParams = ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(self, rules, ADRelativeLayout_ALIGN_BOTTOM);
  if (anchorParams != nil) {
    childParams->mBottom_ = anchorParams->mBottom_ - childParams->bottomMargin_;
  }
  else if (childParams->alignWithParent_ && IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_BOTTOM) != 0) {
    if (myHeight >= 0) {
      childParams->mBottom_ = myHeight - self->mPaddingBottom_ - childParams->bottomMargin_;
    }
  }
  if (0 != IOSIntArray_Get(nil_chk(rules), ADRelativeLayout_ALIGN_PARENT_TOP)) {
    childParams->mTop_ = self->mPaddingTop_ + childParams->topMargin_;
  }
  if (0 != IOSIntArray_Get(rules, ADRelativeLayout_ALIGN_PARENT_BOTTOM)) {
    if (myHeight >= 0) {
      childParams->mBottom_ = myHeight - self->mPaddingBottom_ - childParams->bottomMargin_;
    }
  }
}

ADView *ADRelativeLayout_getRelatedViewWithIntArray_withInt_(ADRelativeLayout *self, IOSIntArray *rules, jint relation) {
  jint id_ = IOSIntArray_Get(nil_chk(rules), relation);
  if (id_ != 0) {
    ADRelativeLayout_DependencyGraph_Node *node = JreRetainedLocalValue([((ADSparseArray *) nil_chk(((ADRelativeLayout_DependencyGraph *) nil_chk(self->mGraph_))->mKeyNodes_)) getWithInt:id_]);
    if (node == nil) return nil;
    ADView *v = JreRetainedLocalValue(node->view_);
    while ([((ADView *) nil_chk(v)) getVisibility] == ADView_GONE) {
      rules = [((ADRelativeLayout_LayoutParams *) nil_chk(((ADRelativeLayout_LayoutParams *) cast_chk([v getLayoutParams], [ADRelativeLayout_LayoutParams class])))) getRulesWithInt:[v getLayoutDirection]];
      node = [((ADSparseArray *) nil_chk(self->mGraph_->mKeyNodes_)) getWithInt:(IOSIntArray_Get(nil_chk(rules), relation))];
      if (node == nil || v == node->view_) return nil;
      v = node->view_;
    }
    return v;
  }
  return nil;
}

ADRelativeLayout_LayoutParams *ADRelativeLayout_getRelatedViewParamsWithIntArray_withInt_(ADRelativeLayout *self, IOSIntArray *rules, jint relation) {
  ADView *v = ADRelativeLayout_getRelatedViewWithIntArray_withInt_(self, rules, relation);
  if (v != nil) {
    ADViewGroup_LayoutParams *params = JreRetainedLocalValue([v getLayoutParams]);
    if ([params isKindOfClass:[ADRelativeLayout_LayoutParams class]]) {
      return (ADRelativeLayout_LayoutParams *) cast_chk([v getLayoutParams], [ADRelativeLayout_LayoutParams class]);
    }
  }
  return nil;
}

jint ADRelativeLayout_getRelatedViewBaselineOffsetWithIntArray_(ADRelativeLayout *self, IOSIntArray *rules) {
  ADView *v = ADRelativeLayout_getRelatedViewWithIntArray_withInt_(self, rules, ADRelativeLayout_ALIGN_BASELINE);
  if (v != nil) {
    jint baseline = [v getBaseline];
    if (baseline != -1) {
      ADViewGroup_LayoutParams *params = [v getLayoutParams];
      if ([params isKindOfClass:[ADRelativeLayout_LayoutParams class]]) {
        ADRelativeLayout_LayoutParams *anchorParams = (ADRelativeLayout_LayoutParams *) cast_chk([v getLayoutParams], [ADRelativeLayout_LayoutParams class]);
        return ((ADRelativeLayout_LayoutParams *) nil_chk(anchorParams))->mTop_ + baseline;
      }
    }
  }
  return -1;
}

void ADRelativeLayout_centerHorizontalWithADView_withADRelativeLayout_LayoutParams_withInt_(ADView *child, ADRelativeLayout_LayoutParams *params, jint myWidth) {
  ADRelativeLayout_initialize();
  jint childWidth = [((ADView *) nil_chk(child)) getMeasuredWidth];
  jint left = JreIntDiv((myWidth - childWidth), 2);
  ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mLeft_ = left;
  params->mRight_ = left + childWidth;
}

void ADRelativeLayout_centerVerticalWithADView_withADRelativeLayout_LayoutParams_withInt_(ADView *child, ADRelativeLayout_LayoutParams *params, jint myHeight) {
  ADRelativeLayout_initialize();
  jint childHeight = [((ADView *) nil_chk(child)) getMeasuredHeight];
  jint top = JreIntDiv((myHeight - childHeight), 2);
  ((ADRelativeLayout_LayoutParams *) nil_chk(params))->mTop_ = top;
  params->mBottom_ = top + childHeight;
}

void ADRelativeLayout_init(ADRelativeLayout *self) {
  ADViewGroup_init(self);
  JreStrongAssign(&self->mBaselineView_, nil);
  self->mGravity_ = ADGravity_START | ADGravity_TOP;
  JreStrongAssignAndConsume(&self->mContentBounds_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mSelfBounds_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mGraph_, new_ADRelativeLayout_DependencyGraph_init());
  self->mAllowBrokenMeasureSpecs_ = false;
  self->mMeasureVerticalWithPaddingMargin_ = false;
  self->mDirtyHierarchy_ = true;
}

ADRelativeLayout *new_ADRelativeLayout_init() {
  J2OBJC_NEW_IMPL(ADRelativeLayout, init)
}

ADRelativeLayout *create_ADRelativeLayout_init() {
  J2OBJC_CREATE_IMPL(ADRelativeLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADRelativeLayout)

@implementation ADRelativeLayout_LayoutParams

- (instancetype)initWithInt:(jint)w
                    withInt:(jint)h {
  ADRelativeLayout_LayoutParams_initWithInt_withInt_(self, w, h);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADRelativeLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)source {
  ADRelativeLayout_LayoutParams_initWithADRelativeLayout_LayoutParams_(self, source);
  return self;
}

- (void)addRuleWithInt:(jint)verb {
  [self addRuleWithInt:verb withInt:ADRelativeLayout_TRUE];
}

- (void)addRuleWithInt:(jint)verb
               withInt:(jint)subject {
  if (!mNeedsLayoutResolution_ && ADRelativeLayout_LayoutParams_isRelativeRuleWithInt_(self, verb) && IOSIntArray_Get(nil_chk(mInitialRules_), verb) != 0 && subject == 0) {
    mNeedsLayoutResolution_ = true;
  }
  *IOSIntArray_GetRef(nil_chk(mRules_), verb) = subject;
  *IOSIntArray_GetRef(nil_chk(mInitialRules_), verb) = subject;
  mRulesChanged_ = true;
}

- (void)removeRuleWithInt:(jint)verb {
  [self addRuleWithInt:verb withInt:0];
}

- (jint)getRuleWithInt:(jint)verb {
  return IOSIntArray_Get(nil_chk(mRules_), verb);
}

- (jboolean)hasRelativeRules {
  return ADRelativeLayout_LayoutParams_hasRelativeRules(self);
}

- (jboolean)isRelativeRuleWithInt:(jint)rule {
  return ADRelativeLayout_LayoutParams_isRelativeRuleWithInt_(self, rule);
}

- (void)resolveRulesWithInt:(jint)layoutDirection {
  ADRelativeLayout_LayoutParams_resolveRulesWithInt_(self, layoutDirection);
}

- (IOSIntArray *)getRulesWithInt:(jint)layoutDirection {
  [self resolveLayoutDirectionWithInt:layoutDirection];
  return mRules_;
}

- (IOSIntArray *)getRules {
  return mRules_;
}

- (void)resolveLayoutDirectionWithInt:(jint)layoutDirection {
  if (ADRelativeLayout_LayoutParams_shouldResolveLayoutDirectionWithInt_(self, layoutDirection)) {
    ADRelativeLayout_LayoutParams_resolveRulesWithInt_(self, layoutDirection);
  }
  [super resolveLayoutDirectionWithInt:layoutDirection];
}

- (jboolean)shouldResolveLayoutDirectionWithInt:(jint)layoutDirection {
  return ADRelativeLayout_LayoutParams_shouldResolveLayoutDirectionWithInt_(self, layoutDirection);
}

- (void)dealloc {
  RELEASE_(mRules_);
  RELEASE_(mInitialRules_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 11, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[2].selector = @selector(initWithADRelativeLayout_LayoutParams:);
  methods[3].selector = @selector(addRuleWithInt:);
  methods[4].selector = @selector(addRuleWithInt:withInt:);
  methods[5].selector = @selector(removeRuleWithInt:);
  methods[6].selector = @selector(getRuleWithInt:);
  methods[7].selector = @selector(hasRelativeRules);
  methods[8].selector = @selector(isRelativeRuleWithInt:);
  methods[9].selector = @selector(resolveRulesWithInt:);
  methods[10].selector = @selector(getRulesWithInt:);
  methods[11].selector = @selector(getRules);
  methods[12].selector = @selector(resolveLayoutDirectionWithInt:);
  methods[13].selector = @selector(shouldResolveLayoutDirectionWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRules_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialRules_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNeedsLayoutResolution_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRulesChanged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIsRtlCompatibilityMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "alignWithParent_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_LayoutParams;", "LADRelativeLayout_LayoutParams;", "addRule", "I", "removeRule", "getRule", "isRelativeRule", "resolveRules", "getRules", "resolveLayoutDirection", "shouldResolveLayoutDirection", "LADRelativeLayout;" };
  static const J2ObjcClassInfo _ADRelativeLayout_LayoutParams = { "LayoutParams", "r.android.widget", ptrTable, methods, fields, 7, 0x9, 14, 10, 12, -1, -1, -1, -1 };
  return &_ADRelativeLayout_LayoutParams;
}

@end

void ADRelativeLayout_LayoutParams_initWithInt_withInt_(ADRelativeLayout_LayoutParams *self, jint w, jint h) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, w, h);
  JreStrongAssignAndConsume(&self->mRules_, [IOSIntArray newArrayWithLength:ADRelativeLayout_VERB_COUNT]);
  JreStrongAssignAndConsume(&self->mInitialRules_, [IOSIntArray newArrayWithLength:ADRelativeLayout_VERB_COUNT]);
  self->mRulesChanged_ = false;
  self->mIsRtlCompatibilityMode_ = false;
}

ADRelativeLayout_LayoutParams *new_ADRelativeLayout_LayoutParams_initWithInt_withInt_(jint w, jint h) {
  J2OBJC_NEW_IMPL(ADRelativeLayout_LayoutParams, initWithInt_withInt_, w, h)
}

ADRelativeLayout_LayoutParams *create_ADRelativeLayout_LayoutParams_initWithInt_withInt_(jint w, jint h) {
  J2OBJC_CREATE_IMPL(ADRelativeLayout_LayoutParams, initWithInt_withInt_, w, h)
}

void ADRelativeLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADRelativeLayout_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  JreStrongAssignAndConsume(&self->mRules_, [IOSIntArray newArrayWithLength:ADRelativeLayout_VERB_COUNT]);
  JreStrongAssignAndConsume(&self->mInitialRules_, [IOSIntArray newArrayWithLength:ADRelativeLayout_VERB_COUNT]);
  self->mRulesChanged_ = false;
  self->mIsRtlCompatibilityMode_ = false;
}

ADRelativeLayout_LayoutParams *new_ADRelativeLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADRelativeLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADRelativeLayout_LayoutParams *create_ADRelativeLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADRelativeLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADRelativeLayout_LayoutParams_initWithADRelativeLayout_LayoutParams_(ADRelativeLayout_LayoutParams *self, ADRelativeLayout_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  JreStrongAssignAndConsume(&self->mRules_, [IOSIntArray newArrayWithLength:ADRelativeLayout_VERB_COUNT]);
  JreStrongAssignAndConsume(&self->mInitialRules_, [IOSIntArray newArrayWithLength:ADRelativeLayout_VERB_COUNT]);
  self->mRulesChanged_ = false;
  self->mIsRtlCompatibilityMode_ = false;
  self->mIsRtlCompatibilityMode_ = ((ADRelativeLayout_LayoutParams *) nil_chk(source))->mIsRtlCompatibilityMode_;
  self->mRulesChanged_ = source->mRulesChanged_;
  self->alignWithParent_ = source->alignWithParent_;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->mRules_, ADRelativeLayout_LEFT_OF, self->mRules_, ADRelativeLayout_LEFT_OF, ADRelativeLayout_VERB_COUNT);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(source->mInitialRules_, ADRelativeLayout_LEFT_OF, self->mInitialRules_, ADRelativeLayout_LEFT_OF, ADRelativeLayout_VERB_COUNT);
}

ADRelativeLayout_LayoutParams *new_ADRelativeLayout_LayoutParams_initWithADRelativeLayout_LayoutParams_(ADRelativeLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADRelativeLayout_LayoutParams, initWithADRelativeLayout_LayoutParams_, source)
}

ADRelativeLayout_LayoutParams *create_ADRelativeLayout_LayoutParams_initWithADRelativeLayout_LayoutParams_(ADRelativeLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADRelativeLayout_LayoutParams, initWithADRelativeLayout_LayoutParams_, source)
}

jboolean ADRelativeLayout_LayoutParams_hasRelativeRules(ADRelativeLayout_LayoutParams *self) {
  return (IOSIntArray_Get(nil_chk(self->mInitialRules_), ADRelativeLayout_START_OF) != 0 || IOSIntArray_Get(self->mInitialRules_, ADRelativeLayout_END_OF) != 0 || IOSIntArray_Get(self->mInitialRules_, ADRelativeLayout_ALIGN_START) != 0 || IOSIntArray_Get(self->mInitialRules_, ADRelativeLayout_ALIGN_END) != 0 || IOSIntArray_Get(self->mInitialRules_, ADRelativeLayout_ALIGN_PARENT_START) != 0 || IOSIntArray_Get(self->mInitialRules_, ADRelativeLayout_ALIGN_PARENT_END) != 0);
}

jboolean ADRelativeLayout_LayoutParams_isRelativeRuleWithInt_(ADRelativeLayout_LayoutParams *self, jint rule) {
  return rule == ADRelativeLayout_START_OF || rule == ADRelativeLayout_END_OF || rule == ADRelativeLayout_ALIGN_START || rule == ADRelativeLayout_ALIGN_END || rule == ADRelativeLayout_ALIGN_PARENT_START || rule == ADRelativeLayout_ALIGN_PARENT_END;
}

void ADRelativeLayout_LayoutParams_resolveRulesWithInt_(ADRelativeLayout_LayoutParams *self, jint layoutDirection) {
  jboolean isLayoutRtl = layoutDirection == ADView_LAYOUT_DIRECTION_RTL;
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->mInitialRules_, ADRelativeLayout_LEFT_OF, self->mRules_, ADRelativeLayout_LEFT_OF, ADRelativeLayout_VERB_COUNT);
  if (self->mIsRtlCompatibilityMode_) {
    if (IOSIntArray_Get(nil_chk(self->mRules_), ADRelativeLayout_ALIGN_START) != 0) {
      if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_LEFT) == 0) {
        *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_LEFT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_START);
      }
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_START) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_END) != 0) {
      if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_RIGHT) == 0) {
        *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_RIGHT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_END);
      }
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_END) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_START_OF) != 0) {
      if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_LEFT_OF) == 0) {
        *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_LEFT_OF) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_START_OF);
      }
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_START_OF) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_END_OF) != 0) {
      if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_RIGHT_OF) == 0) {
        *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_RIGHT_OF) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_END_OF);
      }
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_END_OF) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START) != 0) {
      if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_LEFT) == 0) {
        *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_LEFT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START);
      }
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END) != 0) {
      if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_RIGHT) == 0) {
        *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_RIGHT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END);
      }
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END) = 0;
    }
  }
  else {
    if ((IOSIntArray_Get(nil_chk(self->mRules_), ADRelativeLayout_ALIGN_START) != 0 || IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_END) != 0) && (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_LEFT) != 0 || IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_RIGHT) != 0)) {
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_LEFT) = 0;
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_RIGHT) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_START) != 0) {
      *IOSIntArray_GetRef(self->mRules_, isLayoutRtl ? ADRelativeLayout_ALIGN_RIGHT : ADRelativeLayout_ALIGN_LEFT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_START);
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_START) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_END) != 0) {
      *IOSIntArray_GetRef(self->mRules_, isLayoutRtl ? ADRelativeLayout_ALIGN_LEFT : ADRelativeLayout_ALIGN_RIGHT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_END);
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_END) = 0;
    }
    if ((IOSIntArray_Get(self->mRules_, ADRelativeLayout_START_OF) != 0 || IOSIntArray_Get(self->mRules_, ADRelativeLayout_END_OF) != 0) && (IOSIntArray_Get(self->mRules_, ADRelativeLayout_LEFT_OF) != 0 || IOSIntArray_Get(self->mRules_, ADRelativeLayout_RIGHT_OF) != 0)) {
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_LEFT_OF) = 0;
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_RIGHT_OF) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_START_OF) != 0) {
      *IOSIntArray_GetRef(self->mRules_, isLayoutRtl ? ADRelativeLayout_RIGHT_OF : ADRelativeLayout_LEFT_OF) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_START_OF);
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_START_OF) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_END_OF) != 0) {
      *IOSIntArray_GetRef(self->mRules_, isLayoutRtl ? ADRelativeLayout_LEFT_OF : ADRelativeLayout_RIGHT_OF) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_END_OF);
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_END_OF) = 0;
    }
    if ((IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START) != 0 || IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END) != 0) && (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_LEFT) != 0 || IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_RIGHT) != 0)) {
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_LEFT) = 0;
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_RIGHT) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START) != 0) {
      *IOSIntArray_GetRef(self->mRules_, isLayoutRtl ? ADRelativeLayout_ALIGN_PARENT_RIGHT : ADRelativeLayout_ALIGN_PARENT_LEFT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START);
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_START) = 0;
    }
    if (IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END) != 0) {
      *IOSIntArray_GetRef(self->mRules_, isLayoutRtl ? ADRelativeLayout_ALIGN_PARENT_LEFT : ADRelativeLayout_ALIGN_PARENT_RIGHT) = IOSIntArray_Get(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END);
      *IOSIntArray_GetRef(self->mRules_, ADRelativeLayout_ALIGN_PARENT_END) = 0;
    }
  }
  self->mRulesChanged_ = false;
  self->mNeedsLayoutResolution_ = false;
}

jboolean ADRelativeLayout_LayoutParams_shouldResolveLayoutDirectionWithInt_(ADRelativeLayout_LayoutParams *self, jint layoutDirection) {
  return (self->mNeedsLayoutResolution_ || ADRelativeLayout_LayoutParams_hasRelativeRules(self)) && (self->mRulesChanged_ || layoutDirection != [self getLayoutDirection]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADRelativeLayout_LayoutParams)

@implementation ADRelativeLayout_DependencyGraph

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADRelativeLayout_DependencyGraph_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  JavaUtilArrayList *nodes = mNodes_;
  jint count = [((JavaUtilArrayList *) nil_chk(nodes)) size];
  for (jint i = 0; i < count; i++) {
    [((ADRelativeLayout_DependencyGraph_Node *) nil_chk([nodes getWithInt:i])) release__];
  }
  [nodes clear];
  [((ADSparseArray *) nil_chk(mKeyNodes_)) clear];
  [((JavaUtilArrayDeque *) nil_chk(mRoots_)) clear];
}

- (void)addWithADView:(ADView *)view {
  jint id_ = [((ADView *) nil_chk(view)) getId];
  ADRelativeLayout_DependencyGraph_Node *node = ADRelativeLayout_DependencyGraph_Node_acquireWithADView_(view);
  if (id_ != ADView_NO_ID) {
    [((ADSparseArray *) nil_chk(mKeyNodes_)) putWithInt:id_ withId:node];
  }
  [((JavaUtilArrayList *) nil_chk(mNodes_)) addWithId:node];
}

- (void)getSortedViewsWithADViewArray:(IOSObjectArray *)sorted
                         withIntArray:(IOSIntArray *)rules {
  JavaUtilArrayDeque *roots = ADRelativeLayout_DependencyGraph_findRootsWithIntArray_(self, rules);
  jint index = 0;
  ADRelativeLayout_DependencyGraph_Node *node;
  while ((node = [((JavaUtilArrayDeque *) nil_chk(roots)) pollLast]) != nil) {
    ADView *view = ((ADRelativeLayout_DependencyGraph_Node *) nil_chk(node))->view_;
    jint key = [((ADView *) nil_chk(view)) getId];
    IOSObjectArray_Set(nil_chk(sorted), index++, view);
    ADArrayMap *dependents = node->dependents_;
    jint count = [((ADArrayMap *) nil_chk(dependents)) size];
    for (jint i = 0; i < count; i++) {
      ADRelativeLayout_DependencyGraph_Node *dependent = [dependents keyAtWithInt:i];
      ADSparseArray *dependencies = ((ADRelativeLayout_DependencyGraph_Node *) nil_chk(dependent))->dependencies_;
      [((ADSparseArray *) nil_chk(dependencies)) removeWithInt:key];
      if ([dependencies size] == 0) {
        [roots addWithId:dependent];
      }
    }
  }
  if (index < ((IOSObjectArray *) nil_chk(sorted))->size_) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Circular dependencies cannot exist in RelativeLayout");
  }
}

- (JavaUtilArrayDeque *)findRootsWithIntArray:(IOSIntArray *)rulesFilter {
  return ADRelativeLayout_DependencyGraph_findRootsWithIntArray_(self, rulesFilter);
}

- (void)dealloc {
  RELEASE_(mNodes_);
  RELEASE_(mKeyNodes_);
  RELEASE_(mRoots_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x80, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayDeque;", 0x2, 4, 5, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(addWithADView:);
  methods[3].selector = @selector(getSortedViewsWithADViewArray:withIntArray:);
  methods[4].selector = @selector(findRootsWithIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mNodes_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 7, -1 },
    { "mKeyNodes_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "mRoots_", "LJavaUtilArrayDeque;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "add", "LADView;", "getSortedViews", "[LADView;[I", "findRoots", "[I", "([I)Ljava/util/ArrayDeque<Lr/android/widget/RelativeLayout$DependencyGraph$Node;>;", "Ljava/util/ArrayList<Lr/android/widget/RelativeLayout$DependencyGraph$Node;>;", "Lr/android/util/SparseArray<Lr/android/widget/RelativeLayout$DependencyGraph$Node;>;", "Ljava/util/ArrayDeque<Lr/android/widget/RelativeLayout$DependencyGraph$Node;>;", "LADRelativeLayout;", "LADRelativeLayout_DependencyGraph_Node;" };
  static const J2ObjcClassInfo _ADRelativeLayout_DependencyGraph = { "DependencyGraph", "r.android.widget", ptrTable, methods, fields, 7, 0xa, 5, 3, 10, 11, -1, -1, -1 };
  return &_ADRelativeLayout_DependencyGraph;
}

@end

void ADRelativeLayout_DependencyGraph_init(ADRelativeLayout_DependencyGraph *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mNodes_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mKeyNodes_, new_ADSparseArray_init());
  JreStrongAssignAndConsume(&self->mRoots_, new_JavaUtilArrayDeque_init());
}

ADRelativeLayout_DependencyGraph *new_ADRelativeLayout_DependencyGraph_init() {
  J2OBJC_NEW_IMPL(ADRelativeLayout_DependencyGraph, init)
}

ADRelativeLayout_DependencyGraph *create_ADRelativeLayout_DependencyGraph_init() {
  J2OBJC_CREATE_IMPL(ADRelativeLayout_DependencyGraph, init)
}

JavaUtilArrayDeque *ADRelativeLayout_DependencyGraph_findRootsWithIntArray_(ADRelativeLayout_DependencyGraph *self, IOSIntArray *rulesFilter) {
  ADSparseArray *keyNodes = self->mKeyNodes_;
  JavaUtilArrayList *nodes = self->mNodes_;
  jint count = [((JavaUtilArrayList *) nil_chk(nodes)) size];
  for (jint i = 0; i < count; i++) {
    ADRelativeLayout_DependencyGraph_Node *node = [nodes getWithInt:i];
    [((ADArrayMap *) nil_chk(((ADRelativeLayout_DependencyGraph_Node *) nil_chk(node))->dependents_)) clear];
    [((ADSparseArray *) nil_chk(node->dependencies_)) clear];
  }
  for (jint i = 0; i < count; i++) {
    ADRelativeLayout_DependencyGraph_Node *node = [nodes getWithInt:i];
    ADRelativeLayout_LayoutParams *layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(((ADRelativeLayout_DependencyGraph_Node *) nil_chk(node))->view_)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
    IOSIntArray *rules = ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->mRules_;
    jint rulesCount = ((IOSIntArray *) nil_chk(rulesFilter))->size_;
    for (jint j = 0; j < rulesCount; j++) {
      jint rule = IOSIntArray_Get(nil_chk(rules), IOSIntArray_Get(rulesFilter, j));
      if (rule > 0) {
        ADRelativeLayout_DependencyGraph_Node *dependency = [((ADSparseArray *) nil_chk(keyNodes)) getWithInt:rule];
        if (dependency == nil || dependency == node) {
          continue;
        }
        [((ADArrayMap *) nil_chk(dependency->dependents_)) putWithId:node withId:self];
        [((ADSparseArray *) nil_chk(node->dependencies_)) putWithInt:rule withId:dependency];
      }
    }
  }
  JavaUtilArrayDeque *roots = self->mRoots_;
  [((JavaUtilArrayDeque *) nil_chk(roots)) clear];
  for (jint i = 0; i < count; i++) {
    ADRelativeLayout_DependencyGraph_Node *node = [nodes getWithInt:i];
    if ([((ADSparseArray *) nil_chk(((ADRelativeLayout_DependencyGraph_Node *) nil_chk(node))->dependencies_)) size] == 0) [roots addLastWithId:node];
  }
  return roots;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADRelativeLayout_DependencyGraph)

J2OBJC_INITIALIZED_DEFN(ADRelativeLayout_DependencyGraph_Node)

@implementation ADRelativeLayout_DependencyGraph_Node

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADRelativeLayout_DependencyGraph_Node_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADRelativeLayout_DependencyGraph_Node *)acquireWithADView:(ADView *)view {
  return ADRelativeLayout_DependencyGraph_Node_acquireWithADView_(view);
}

- (void)release__ {
  view_ = nil;
  [((ADArrayMap *) nil_chk(dependents_)) clear];
  [((ADSparseArray *) nil_chk(dependencies_)) clear];
  [((ADPools_SynchronizedPool *) nil_chk(ADRelativeLayout_DependencyGraph_Node_sPool)) release__WithId:self];
}

- (void)__javaClone:(ADRelativeLayout_DependencyGraph_Node *)original {
  [super __javaClone:original];
  [view_ release];
}

- (void)dealloc {
  RELEASE_(dependents_);
  RELEASE_(dependencies_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADRelativeLayout_DependencyGraph_Node;", 0x8, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(acquireWithADView:);
  methods[2].selector = @selector(release__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "view_", "LADView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dependents_", "LADArrayMap;", .constantValue.asLong = 0, 0x10, -1, -1, 3, -1 },
    { "dependencies_", "LADSparseArray;", .constantValue.asLong = 0, 0x10, -1, -1, 4, -1 },
    { "POOL_LIMIT", "I", .constantValue.asInt = ADRelativeLayout_DependencyGraph_Node_POOL_LIMIT, 0x1a, -1, -1, -1, -1 },
    { "sPool", "LADPools_SynchronizedPool;", .constantValue.asLong = 0, 0x1a, -1, 5, 6, -1 },
  };
  static const void *ptrTable[] = { "acquire", "LADView;", "release", "Lr/android/util/ArrayMap<Lr/android/widget/RelativeLayout$DependencyGraph$Node;Lr/android/widget/RelativeLayout$DependencyGraph;>;", "Lr/android/util/SparseArray<Lr/android/widget/RelativeLayout$DependencyGraph$Node;>;", &ADRelativeLayout_DependencyGraph_Node_sPool, "Lr/android/util/Pools$SynchronizedPool<Lr/android/widget/RelativeLayout$DependencyGraph$Node;>;", "LADRelativeLayout_DependencyGraph;" };
  static const J2ObjcClassInfo _ADRelativeLayout_DependencyGraph_Node = { "Node", "r.android.widget", ptrTable, methods, fields, 7, 0x8, 3, 5, 7, -1, -1, -1, -1 };
  return &_ADRelativeLayout_DependencyGraph_Node;
}

+ (void)initialize {
  if (self == [ADRelativeLayout_DependencyGraph_Node class]) {
    JreStrongAssignAndConsume(&ADRelativeLayout_DependencyGraph_Node_sPool, new_ADPools_SynchronizedPool_initWithInt_(ADRelativeLayout_DependencyGraph_Node_POOL_LIMIT));
    J2OBJC_SET_INITIALIZED(ADRelativeLayout_DependencyGraph_Node)
  }
}

@end

void ADRelativeLayout_DependencyGraph_Node_init(ADRelativeLayout_DependencyGraph_Node *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->dependents_, new_ADArrayMap_init());
  JreStrongAssignAndConsume(&self->dependencies_, new_ADSparseArray_init());
}

ADRelativeLayout_DependencyGraph_Node *new_ADRelativeLayout_DependencyGraph_Node_init() {
  J2OBJC_NEW_IMPL(ADRelativeLayout_DependencyGraph_Node, init)
}

ADRelativeLayout_DependencyGraph_Node *create_ADRelativeLayout_DependencyGraph_Node_init() {
  J2OBJC_CREATE_IMPL(ADRelativeLayout_DependencyGraph_Node, init)
}

ADRelativeLayout_DependencyGraph_Node *ADRelativeLayout_DependencyGraph_Node_acquireWithADView_(ADView *view) {
  ADRelativeLayout_DependencyGraph_Node_initialize();
  ADRelativeLayout_DependencyGraph_Node *node = JreRetainedLocalValue([((ADPools_SynchronizedPool *) nil_chk(ADRelativeLayout_DependencyGraph_Node_sPool)) acquire]);
  if (node == nil) {
    node = create_ADRelativeLayout_DependencyGraph_Node_init();
  }
  node->view_ = view;
  return node;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADRelativeLayout_DependencyGraph_Node)
