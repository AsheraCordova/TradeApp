//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\SparseIntArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SparseIntArray")
#ifdef RESTRICT_SparseIntArray
#define INCLUDE_ALL_SparseIntArray 0
#else
#define INCLUDE_ALL_SparseIntArray 1
#endif
#undef RESTRICT_SparseIntArray

#if !defined (ADSparseIntArray_) && (INCLUDE_ALL_SparseIntArray || defined(INCLUDE_ADSparseIntArray))
#define ADSparseIntArray_

@interface ADSparseIntArray : NSObject

#pragma mark Public

/*!
 @brief Creates a new SparseIntArray containing no mappings.
 */
- (instancetype)init;

/*!
 @brief Creates a new SparseIntArray containing no mappings that will not
  require any additional memory allocation to store the specified
  number of mappings.If you supply an initial capacity of 0, the
  sparse array will be initialized with a light-weight representation
  not requiring any additional array allocations.
 */
- (instancetype)initWithInt:(jint)initialCapacity;

/*!
 @brief Puts a key/value pair into the array, optimizing for the case where
  the key is greater than all existing keys in the array.
 */
- (void)appendWithInt:(jint)key
              withInt:(jint)value;

/*!
 @brief Removes all key-value mappings from this SparseIntArray.
 */
- (void)clear;

- (ADSparseIntArray *)java_clone;

/*!
 @brief Removes the mapping from the specified key, if there was any.
 */
- (void)delete__WithInt:(jint)key;

/*!
 @brief Gets the int mapped from the specified key, or <code>0</code>
  if no such mapping has been made.
 */
- (jint)getWithInt:(jint)key;

/*!
 @brief Gets the int mapped from the specified key, or the specified value
  if no such mapping has been made.
 */
- (jint)getWithInt:(jint)key
           withInt:(jint)valueIfKeyNotFound;

/*!
 @brief Returns the index for which <code>keyAt</code> would return the
  specified key, or a negative number if the specified
  key is not mapped.
 */
- (jint)indexOfKeyWithInt:(jint)key;

/*!
 @brief Returns an index for which <code>valueAt</code> would return the
  specified key, or a negative number if no keys map to the
  specified value.
 Beware that this is a linear search, unlike lookups by key,
  and that multiple keys can map to the same value and this will
  find only one of them.
 */
- (jint)indexOfValueWithInt:(jint)value;

/*!
 @brief Given an index in the range <code>0...size()-1</code>, returns
  the key from the <code>index</code>th key-value mapping that this
  SparseIntArray stores.
 <p>The keys corresponding to indices in ascending order are guaranteed to
  be in ascending order, e.g., <code>keyAt(0)</code> will return the
  smallest key and <code>keyAt(size()-1)</code> will return the largest
  key.</p>
 */
- (jint)keyAtWithInt:(jint)index;

/*!
 @brief Adds a mapping from the specified key to the specified value,
  replacing the previous mapping from the specified key if there
  was one.
 */
- (void)putWithInt:(jint)key
           withInt:(jint)value;

/*!
 @brief Removes the mapping at the given index.
 */
- (void)removeAtWithInt:(jint)index;

/*!
 @brief Directly set the value at a particular index.
 */
- (void)setValueAtWithInt:(jint)index
                  withInt:(jint)value;

/*!
 @brief Returns the number of key-value mappings that this SparseIntArray
  currently stores.
 */
- (jint)size;

/*!
 @brief <p>This implementation composes a string by iterating over its mappings.
 */
- (NSString *)description;

/*!
 @brief Given an index in the range <code>0...size()-1</code>, returns
  the value from the <code>index</code>th key-value mapping that this
  SparseIntArray stores.
 <p>The values corresponding to indices in ascending order are guaranteed
  to be associated with keys in ascending order, e.g., 
 <code>valueAt(0)</code> will return the value associated with the
  smallest key and <code>valueAt(size()-1)</code> will return the value
  associated with the largest key.</p>
 */
- (jint)valueAtWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ADSparseIntArray)

FOUNDATION_EXPORT void ADSparseIntArray_init(ADSparseIntArray *self);

FOUNDATION_EXPORT ADSparseIntArray *new_ADSparseIntArray_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADSparseIntArray *create_ADSparseIntArray_init(void);

FOUNDATION_EXPORT void ADSparseIntArray_initWithInt_(ADSparseIntArray *self, jint initialCapacity);

FOUNDATION_EXPORT ADSparseIntArray *new_ADSparseIntArray_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADSparseIntArray *create_ADSparseIntArray_initWithInt_(jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(ADSparseIntArray)

@compatibility_alias RAndroidUtilSparseIntArray ADSparseIntArray;

#endif

#pragma pop_macro("INCLUDE_ALL_SparseIntArray")
