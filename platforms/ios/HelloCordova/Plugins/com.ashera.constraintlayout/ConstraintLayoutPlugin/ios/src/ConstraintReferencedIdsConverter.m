//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\ConstraintReferencedIdsConverter.java
//

#include "ConstraintReferencedIdsConverter.h"
#include "IFragment.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "StringUtils.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@implementation ASConstraintReferencedIdsConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASConstraintReferencedIdsConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (IOSIntArray *)convertFromWithId:(NSString *)value
                   withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                   withASIFragment:(id<ASIFragment>)fragment {
  IOSObjectArray *ids = [((NSString *) nil_chk(value)) java_split:@","];
  IOSIntArray *idRefs = [IOSIntArray newArrayWithLength:((IOSObjectArray *) nil_chk(ids))->size_];
  for (jint i = 0; i < ids->size_; i++) {
    *IOSIntArray_GetRef(idRefs, i) = ASIdGenerator_getIdWithNSString_(JreStrcat("$$", @"@+id/", [((NSString *) nil_chk(IOSObjectArray_Get(ids, i))) java_trim]));
  }
  return idRefs;
}

- (NSString *)convertToWithId:(IOSIntArray *)values
              withASIFragment:(id<ASIFragment>)fragment {
  id<JavaUtilList> idRefs = new_JavaUtilArrayList_init();
  {
    IOSIntArray *a__ = values;
    jint const *b__ = ((IOSIntArray *) nil_chk(a__))->buffer_;
    jint const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jint value = *b__++;
      [idRefs addWithId:[((NSString *) nil_chk(ASIdGenerator_getNameWithInt_(value))) java_replace:@"@+id/" withSequence:@""]];
    }
  }
  return ASStringUtils_joinWithNSString_withJavaUtilList_(@",", idRefs);
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertToWithId:withASIFragment:);
  methods[3].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)[I", "convertTo", "[ILASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<[ILjava/lang/String;>;" };
  static const J2ObjcClassInfo _ASConstraintReferencedIdsConverter = { "ConstraintReferencedIdsConverter", "com.ashera.constraintlayout", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, 6, -1 };
  return &_ASConstraintReferencedIdsConverter;
}

@end

void ASConstraintReferencedIdsConverter_init(ASConstraintReferencedIdsConverter *self) {
  NSObject_init(self);
}

ASConstraintReferencedIdsConverter *new_ASConstraintReferencedIdsConverter_init() {
  J2OBJC_NEW_IMPL(ASConstraintReferencedIdsConverter, init)
}

ASConstraintReferencedIdsConverter *create_ASConstraintReferencedIdsConverter_init() {
  J2OBJC_CREATE_IMPL(ASConstraintReferencedIdsConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASConstraintReferencedIdsConverter)
