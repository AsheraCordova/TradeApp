//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\CompoundButton.java
//

#include "Button.h"
#include "Canvas.h"
#include "ColorStateList.h"
#include "CompoundButton.h"
#include "Context.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "R.h"
#include "RectM.h"
#include "View.h"


@interface ADCompoundButton () {
 @public
  jboolean mChecked_;
  jboolean mBroadcasting_;
  ADDrawable *mButtonDrawable_;
  ADColorStateList *mButtonTintList_;
  jboolean mHasButtonTint_;
  jboolean mHasButtonBlendMode_;
  id<ADCompoundButton_OnCheckedChangeListener> mOnCheckedChangeListener_;
  id<ADCompoundButton_OnCheckedChangeListener> mOnCheckedChangeWidgetListener_;
  jboolean mCheckedFromResource_;
}

@end

J2OBJC_FIELD_SETTER(ADCompoundButton, mButtonDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADCompoundButton, mButtonTintList_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADCompoundButton, mOnCheckedChangeListener_, id<ADCompoundButton_OnCheckedChangeListener>)
J2OBJC_FIELD_SETTER(ADCompoundButton, mOnCheckedChangeWidgetListener_, id<ADCompoundButton_OnCheckedChangeListener>)

inline IOSIntArray *ADCompoundButton_get_CHECKED_STATE_SET(void);
static IOSIntArray *ADCompoundButton_CHECKED_STATE_SET;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADCompoundButton, CHECKED_STATE_SET, IOSIntArray *)

@interface ADCompoundButton_OnCheckedChangeListener : NSObject

@end

@interface ADCompoundButton_AutofillManager : NSObject

@end

J2OBJC_INITIALIZED_DEFN(ADCompoundButton)

@implementation ADCompoundButton

- (void)toggle {
  [self setCheckedWithBoolean:!mChecked_];
}

- (jboolean)isChecked {
  return mChecked_;
}

- (void)setCheckedWithBoolean:(jboolean)checked {
  if (mChecked_ != checked) {
    mCheckedFromResource_ = false;
    mChecked_ = checked;
    [self refreshDrawableState];
    if (mBroadcasting_) {
      return;
    }
    mBroadcasting_ = true;
    if (mOnCheckedChangeListener_ != nil) {
      [mOnCheckedChangeListener_ onCheckedChangedWithADCompoundButton:self withBoolean:mChecked_];
    }
    if (mOnCheckedChangeWidgetListener_ != nil) {
      [mOnCheckedChangeWidgetListener_ onCheckedChangedWithADCompoundButton:self withBoolean:mChecked_];
    }
    id<ADCompoundButton_AutofillManager> afm = [((ADContext *) nil_chk(mContext_)) getSystemServiceWithIOSClass:ADCompoundButton_AutofillManager_class_()];
    if (afm != nil) {
      [afm notifyValueChangedWithADCompoundButton:self];
    }
    mBroadcasting_ = false;
  }
  [self setDefaultStateDescritption];
}

- (void)setOnCheckedChangeListenerWithADCompoundButton_OnCheckedChangeListener:(id<ADCompoundButton_OnCheckedChangeListener>)listener {
  JreStrongAssign(&mOnCheckedChangeListener_, listener);
}

- (void)setOnCheckedChangeWidgetListenerWithADCompoundButton_OnCheckedChangeListener:(id<ADCompoundButton_OnCheckedChangeListener>)listener {
  JreStrongAssign(&mOnCheckedChangeWidgetListener_, listener);
}

- (void)setButtonDrawableWithInt:(jint)resId {
  ADDrawable *d;
  if (resId != 0) {
    d = [((ADContext *) nil_chk([self getContext])) getDrawableWithInt:resId];
  }
  else {
    d = nil;
  }
  [self setButtonDrawableWithADDrawable:d];
}

- (void)setButtonDrawableWithADDrawable:(ADDrawable *)drawable {
  if (mButtonDrawable_ != drawable) {
    if (mButtonDrawable_ != nil) {
      [mButtonDrawable_ setCallbackWithId:nil];
      [self unscheduleDrawableWithId:mButtonDrawable_];
    }
    JreStrongAssign(&mButtonDrawable_, drawable);
    if (drawable != nil) {
      [drawable setCallbackWithId:self];
      [drawable setLayoutDirectionWithInt:[self getLayoutDirection]];
      if ([drawable isStateful]) {
        [drawable setStateWithIntArray:[self getDrawableState]];
      }
      [drawable setVisibleWithBoolean:[self getVisibility] == ADView_VISIBLE withBoolean:false];
      [self setMinHeightWithInt:[drawable getIntrinsicHeight]];
      [self applyButtonTint];
    }
  }
}

- (ADDrawable *)getButtonDrawable {
  return mButtonDrawable_;
}

- (void)setButtonTintListWithADColorStateList:(ADColorStateList *)tint {
  JreStrongAssign(&mButtonTintList_, tint);
  mHasButtonTint_ = true;
  [self applyButtonTint];
}

- (ADColorStateList *)getButtonTintList {
  return mButtonTintList_;
}

- (jint)getCompoundPaddingLeft {
  jint padding = [super getCompoundPaddingLeft];
  if (![self isLayoutRtl]) {
    ADDrawable *buttonDrawable = mButtonDrawable_;
    if (buttonDrawable != nil) {
      padding += [buttonDrawable getIntrinsicWidth];
    }
  }
  return padding;
}

- (jint)getCompoundPaddingRight {
  jint padding = [super getCompoundPaddingRight];
  if ([self isLayoutRtl]) {
    ADDrawable *buttonDrawable = mButtonDrawable_;
    if (buttonDrawable != nil) {
      padding += [buttonDrawable getIntrinsicWidth];
    }
  }
  return padding;
}

- (jint)getHorizontalOffsetForDrawables {
  ADDrawable *buttonDrawable = mButtonDrawable_;
  return (buttonDrawable != nil) ? [((ADDrawable *) nil_chk(buttonDrawable)) getIntrinsicWidth] : 0;
}

- (void)onDrawWithADCanvas:(id<ADCanvas>)canvas {
  ADDrawable *buttonDrawable = mButtonDrawable_;
  if (buttonDrawable != nil) {
    jint verticalGravity = [self getGravity] & ADGravity_VERTICAL_GRAVITY_MASK;
    jint drawableHeight = [buttonDrawable getIntrinsicHeight];
    jint drawableWidth = [buttonDrawable getIntrinsicWidth];
    jint top;
    switch (verticalGravity) {
      case ADGravity_BOTTOM:
      top = [self getHeight] - drawableHeight;
      break;
      case ADGravity_CENTER_VERTICAL:
      top = JreIntDiv(([self getHeight] - drawableHeight), 2);
      break;
      default:
      top = 0;
    }
    jint bottom = top + drawableHeight;
    jint left = [self isLayoutRtl] ? [self getWidth] - drawableWidth : 0;
    jint right = [self isLayoutRtl] ? [self getWidth] : drawableWidth;
    [buttonDrawable setBoundsWithInt:left withInt:top withInt:right withInt:bottom];
    ADDrawable *background = [self getBackground];
    if (background != nil) {
      [background setHotspotBoundsWithInt:left withInt:top withInt:right withInt:bottom];
    }
  }
  [super onDrawWithADCanvas:canvas];
  if (buttonDrawable != nil) {
    jint scrollX = mScrollX_;
    jint scrollY = mScrollY_;
    if (scrollX == 0 && scrollY == 0) {
      [buttonDrawable drawWithADCanvas:canvas];
    }
    else {
      [((id<ADCanvas>) nil_chk(canvas)) translateWithInt:scrollX withInt:scrollY];
      [buttonDrawable drawWithADCanvas:canvas];
      [canvas translateWithInt:-scrollX withInt:-scrollY];
    }
  }
}

- (IOSIntArray *)onCreateDrawableStateWithInt:(jint)extraSpace {
  IOSIntArray *drawableState = [super onCreateDrawableStateWithInt:extraSpace + 1];
  if ([self isChecked]) {
    ADView_mergeDrawableStatesWithIntArray_withIntArray_(drawableState, ADCompoundButton_CHECKED_STATE_SET);
  }
  return drawableState;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ADCompoundButton_initWithASIWidget_(self, widget);
  return self;
}

- (void)invalidateDrawableWithADDrawable:(ADDrawable *)drawable {
}

- (void)applyButtonTint {
}

- (void)setDefaultStateDescritption {
}

- (ASRectM *)getLeftDrawableBoundsWithInt:(jint)x
                                  withInt:(jint)y
                                  withInt:(jint)width
                                  withInt:(jint)height {
  ASRectM *leftBounds = [super getLeftDrawableBoundsWithInt:x withInt:y withInt:width withInt:height];
  if (mButtonDrawable_ != nil) {
    ((ASRectM *) nil_chk(leftBounds))->x_ = leftBounds->x_ + [mButtonDrawable_ getMinimumWidth];
  }
  return leftBounds;
}

- (jboolean)hasDrawables {
  return mButtonDrawable_ != nil || [super hasDrawables];
}

- (void)dealloc {
  RELEASE_(mButtonDrawable_);
  RELEASE_(mButtonTintList_);
  RELEASE_(mOnCheckedChangeListener_);
  RELEASE_(mOnCheckedChangeWidgetListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 7, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 12, 6, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(toggle);
  methods[1].selector = @selector(isChecked);
  methods[2].selector = @selector(setCheckedWithBoolean:);
  methods[3].selector = @selector(setOnCheckedChangeListenerWithADCompoundButton_OnCheckedChangeListener:);
  methods[4].selector = @selector(setOnCheckedChangeWidgetListenerWithADCompoundButton_OnCheckedChangeListener:);
  methods[5].selector = @selector(setButtonDrawableWithInt:);
  methods[6].selector = @selector(setButtonDrawableWithADDrawable:);
  methods[7].selector = @selector(getButtonDrawable);
  methods[8].selector = @selector(setButtonTintListWithADColorStateList:);
  methods[9].selector = @selector(getButtonTintList);
  methods[10].selector = @selector(getCompoundPaddingLeft);
  methods[11].selector = @selector(getCompoundPaddingRight);
  methods[12].selector = @selector(getHorizontalOffsetForDrawables);
  methods[13].selector = @selector(onDrawWithADCanvas:);
  methods[14].selector = @selector(onCreateDrawableStateWithInt:);
  methods[15].selector = @selector(initWithASIWidget:);
  methods[16].selector = @selector(invalidateDrawableWithADDrawable:);
  methods[17].selector = @selector(applyButtonTint);
  methods[18].selector = @selector(setDefaultStateDescritption);
  methods[19].selector = @selector(getLeftDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[20].selector = @selector(hasDrawables);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mChecked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBroadcasting_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mButtonDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mButtonTintList_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasButtonTint_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasButtonBlendMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnCheckedChangeListener_", "LADCompoundButton_OnCheckedChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnCheckedChangeWidgetListener_", "LADCompoundButton_OnCheckedChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCheckedFromResource_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CHECKED_STATE_SET", "[I", .constantValue.asLong = 0, 0x1a, -1, 17, -1, -1 },
  };
  static const void *ptrTable[] = { "setChecked", "Z", "setOnCheckedChangeListener", "LADCompoundButton_OnCheckedChangeListener;", "setOnCheckedChangeWidgetListener", "setButtonDrawable", "I", "LADDrawable;", "setButtonTintList", "LADColorStateList;", "onDraw", "LADCanvas;", "onCreateDrawableState", "LASIWidget;", "invalidateDrawable", "getLeftDrawableBounds", "IIII", &ADCompoundButton_CHECKED_STATE_SET, "LADCompoundButton_OnCheckedChangeListener;LADCompoundButton_AutofillManager;" };
  static const J2ObjcClassInfo _ADCompoundButton = { "CompoundButton", "r.android.widget", ptrTable, methods, fields, 7, 0x401, 21, 10, -1, 18, -1, -1, -1 };
  return &_ADCompoundButton;
}

+ (void)initialize {
  if (self == [ADCompoundButton class]) {
    JreStrongAssignAndConsume(&ADCompoundButton_CHECKED_STATE_SET, [IOSIntArray newArrayWithInts:(jint[]){ ADR_attr_state_checked } count:1]);
    J2OBJC_SET_INITIALIZED(ADCompoundButton)
  }
}

@end

void ADCompoundButton_initWithASIWidget_(ADCompoundButton *self, id<ASIWidget> widget) {
  ADButton_initWithASIWidget_(self, widget);
  JreStrongAssign(&self->mButtonTintList_, nil);
  self->mHasButtonTint_ = false;
  self->mHasButtonBlendMode_ = false;
  self->mCheckedFromResource_ = false;
  JreStrongAssignAndConsume(&self->mContext_, new_ADContext_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADCompoundButton)

@implementation ADCompoundButton_OnCheckedChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onCheckedChangedWithADCompoundButton:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onCheckedChanged", "LADCompoundButton;Z", "LADCompoundButton;" };
  static const J2ObjcClassInfo _ADCompoundButton_OnCheckedChangeListener = { "OnCheckedChangeListener", "r.android.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADCompoundButton_OnCheckedChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADCompoundButton_OnCheckedChangeListener)

@implementation ADCompoundButton_AutofillManager

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(notifyValueChangedWithADCompoundButton:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "notifyValueChanged", "LADCompoundButton;" };
  static const J2ObjcClassInfo _ADCompoundButton_AutofillManager = { "AutofillManager", "r.android.widget", ptrTable, methods, NULL, 7, 0x608, 1, 0, 1, -1, -1, -1, -1 };
  return &_ADCompoundButton_AutofillManager;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADCompoundButton_AutofillManager)
