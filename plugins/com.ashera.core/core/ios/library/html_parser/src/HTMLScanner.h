//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\HTMLScanner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_HTMLScanner")
#ifdef RESTRICT_HTMLScanner
#define INCLUDE_ALL_HTMLScanner 0
#else
#define INCLUDE_ALL_HTMLScanner 1
#endif
#undef RESTRICT_HTMLScanner

#if !defined (TSHTMLScanner_) && (INCLUDE_ALL_HTMLScanner || defined(INCLUDE_TSHTMLScanner))
#define TSHTMLScanner_

#define RESTRICT_Scanner 1
#define INCLUDE_TSScanner 1
#include "Scanner.h"

#define RESTRICT_OrgXmlSaxLocator 1
#define INCLUDE_OrgXmlSaxLocator 1
#include "org/xml/sax/Locator.h"

@class IOSCharArray;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaIoReader;
@protocol TSScanHandler;

/*!
 @brief This class implements a table-driven scanner for HTML, allowing for lots of
 defects.It implements the Scanner interface, which accepts a Reader
 object to fetch characters from and a ScanHandler object to report lexical
 events to.
 */
@interface TSHTMLScanner : NSObject < TSScanner, OrgXmlSaxLocator > {
 @public
  jint theState_;
  jint theNextState_;
  IOSCharArray *theOutputBuffer_;
  jint theSize_;
  IOSIntArray *theWinMap_;
}

#pragma mark Public

- (instancetype)init;

- (jint)getColumnNumber;

- (jint)getLineNumber;

- (NSString *)getPublicId;

- (NSString *)getSystemId;

/*!
 @brief Reset document locator, supplying systemid and publicid.
 @param systemid System id
 @param publicid Public id
 */
- (void)resetDocumentLocatorWithNSString:(NSString *)publicid
                            withNSString:(NSString *)systemid;

/*!
 @brief Scan HTML source, reporting lexical events.
 @param r0 Reader that provides characters
 @param h ScanHandler that accepts lexical events.
 */
- (void)scanWithJavaIoReader:(JavaIoReader *)r0
           withTSScanHandler:(id<TSScanHandler>)h;

/*!
 @brief A callback for the ScanHandler that allows it to force
 	the lexer state to CDATA content (no markup is recognized except
 	the end of element.
 */
- (void)startCDATA;

@end

J2OBJC_STATIC_INIT(TSHTMLScanner)

J2OBJC_FIELD_SETTER(TSHTMLScanner, theOutputBuffer_, IOSCharArray *)
J2OBJC_FIELD_SETTER(TSHTMLScanner, theWinMap_, IOSIntArray *)

/*!
 @brief Index into the state table for [state][input character - 2].
 The state table consists of 4-entry runs on the form
  { current state, input character, action, next state }.
  We precompute the index into the state table for all possible
  { current state, input character } and store the result in
  the statetableIndex array. Since only some input characters
  are present in the state table, we only do the computation for
  characters 0 to the highest character value in the state table.
  An input character of -2 is used to cover all other characters
  as -2 is guaranteed not to match any input character entry
  in the state table. 
 <p>When doing lookups, the input character should first be tested
  to be in the range [-1 (inclusive), statetableIndexMaxChar (exclusive)].
  if it isn't use -2 as the input character.  
 <p>Finally, add 2 to the input character to cover for the fact that
  Java doesn't support negative array indexes. Then look up
  the value in the statetableIndex. If the value is -1, then
  no action or next state was found for the { state, input } that
  you had. If it isn't -1, then action = statetable[value + 2] and
  next state = statetable[value + 3]. That is, the value points
  to the start of the answer 4-tuple in the statetable.
 */
inline IOSObjectArray *TSHTMLScanner_get_statetableIndex(void);
inline IOSObjectArray *TSHTMLScanner_set_statetableIndex(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *TSHTMLScanner_statetableIndex;
J2OBJC_STATIC_FIELD_OBJ(TSHTMLScanner, statetableIndex, IOSObjectArray *)

/*!
 @brief The highest character value seen in the statetable.
 See the doc comment for statetableIndex to see how this
  is used.
 */
inline jint TSHTMLScanner_get_statetableIndexMaxChar(void);
inline jint TSHTMLScanner_set_statetableIndexMaxChar(jint value);
inline jint *TSHTMLScanner_getRef_statetableIndexMaxChar(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint TSHTMLScanner_statetableIndexMaxChar;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSHTMLScanner, statetableIndexMaxChar, jint)

FOUNDATION_EXPORT void TSHTMLScanner_init(TSHTMLScanner *self);

FOUNDATION_EXPORT TSHTMLScanner *new_TSHTMLScanner_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT TSHTMLScanner *create_TSHTMLScanner_init(void);

J2OBJC_TYPE_LITERAL_HEADER(TSHTMLScanner)

@compatibility_alias RepackagedOrgCcilCowanTagsoupHTMLScanner TSHTMLScanner;

#endif

#pragma pop_macro("INCLUDE_ALL_HTMLScanner")
