//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLArray.java
//

#include "CLArray.h"
#include "CLContainer.h"
#include "CLElement.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/StringBuilder.h"
#include "java/util/ArrayList.h"


@implementation ADXCLArray

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLArray_initWithCharArray_(self, content);
  return self;
}

+ (ADXCLElement *)allocateWithCharArray:(IOSCharArray *)content {
  return ADXCLArray_allocateWithCharArray_(content);
}

- (NSString *)toJSON {
  JavaLangStringBuilder *content = create_JavaLangStringBuilder_initWithNSString_(JreStrcat("$C", [self getDebugName], '['));
  jboolean first = true;
  for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(mElements_)) size]; i++) {
    if (!first) {
      [content appendWithNSString:@", "];
    }
    else {
      first = false;
    }
    [content appendWithNSString:[((ADXCLElement *) nil_chk([((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:i])) toJSON]];
  }
  return JreStrcat("@C", content, ']');
}

- (NSString *)toFormattedJSONWithInt:(jint)indent
                             withInt:(jint)forceIndent {
  JavaLangStringBuilder *json = create_JavaLangStringBuilder_init();
  NSString *val = JreRetainedLocalValue([self toJSON]);
  if (forceIndent <= 0 && [((NSString *) nil_chk(val)) java_length] + indent < JreLoadStatic(ADXCLElement, MAX_LINE)) {
    [json appendWithNSString:val];
  }
  else {
    [json appendWithNSString:@"[\n"];
    jboolean first = true;
    for (ADXCLElement * __strong element in nil_chk(mElements_)) {
      if (!first) {
        [json appendWithNSString:@",\n"];
      }
      else {
        first = false;
      }
      [self addIndentWithJavaLangStringBuilder:json withInt:indent + JreLoadStatic(ADXCLElement, BASE_INDENT)];
      [json appendWithNSString:[((ADXCLElement *) nil_chk(element)) toFormattedJSONWithInt:indent + JreLoadStatic(ADXCLElement, BASE_INDENT) withInt:forceIndent - 1]];
    }
    [json appendWithNSString:@"\n"];
    [self addIndentWithJavaLangStringBuilder:json withInt:indent];
    [json appendWithNSString:@"]"];
  }
  return [json description];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(allocateWithCharArray:);
  methods[2].selector = @selector(toJSON);
  methods[3].selector = @selector(toFormattedJSONWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "[C", "allocate", "toFormattedJSON", "II" };
  static const J2ObjcClassInfo _ADXCLArray = { "CLArray", "androidx.constraintlayout.core.parser", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, -1, -1 };
  return &_ADXCLArray;
}

@end

void ADXCLArray_initWithCharArray_(ADXCLArray *self, IOSCharArray *content) {
  ADXCLContainer_initWithCharArray_(self, content);
}

ADXCLArray *new_ADXCLArray_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLArray, initWithCharArray_, content)
}

ADXCLArray *create_ADXCLArray_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLArray, initWithCharArray_, content)
}

ADXCLElement *ADXCLArray_allocateWithCharArray_(IOSCharArray *content) {
  ADXCLArray_initialize();
  return create_ADXCLArray_initWithCharArray_(content);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLArray)
