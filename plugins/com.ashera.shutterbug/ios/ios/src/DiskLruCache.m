//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSShutterBugPlugin\src\main\java\com\applidium\shutterbug\cache\DiskLruCache.java
//

#include "DiskLruCache.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/BufferedInputStream.h"
#include "java/io/BufferedWriter.h"
#include "java/io/Closeable.h"
#include "java/io/EOFException.h"
#include "java/io/File.h"
#include "java/io/FileInputStream.h"
#include "java/io/FileNotFoundException.h"
#include "java/io/FileOutputStream.h"
#include "java/io/FileWriter.h"
#include "java/io/FilterOutputStream.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/OutputStream.h"
#include "java/io/OutputStreamWriter.h"
#include "java/io/PrintStream.h"
#include "java/io/Reader.h"
#include "java/io/StringWriter.h"
#include "java/io/Writer.h"
#include "java/lang/ArrayIndexOutOfBoundsException.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Long.h"
#include "java/lang/Math.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/Void.h"
#include "java/lang/reflect/Array.h"
#include "java/nio/charset/Charset.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Iterator.h"
#include "java/util/LinkedHashMap.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/concurrent/Callable.h"
#include "java/util/concurrent/ExecutorService.h"
#include "java/util/concurrent/Future.h"
#include "java/util/concurrent/LinkedBlockingQueue.h"
#include "java/util/concurrent/ThreadPoolExecutor.h"
#include "java/util/concurrent/TimeUnit.h"

@class APDiskLruCache_Entry;
@class JavaIoFile;
@class JavaIoIOException;
@class JavaIoInputStream;
@class JavaIoOutputStream;
@class JavaIoReader;
@class JavaIoWriter;
@class JavaLangVoid;
@class JavaNioCharsetCharset;
@class JavaUtilLinkedHashMap;
@protocol JavaIoCloseable;
@protocol JavaUtilConcurrentCallable;
@protocol JavaUtilConcurrentExecutorService;


@interface APDiskLruCache () {
 @public
  JavaIoFile *directory_;
  JavaIoFile *journalFile_;
  JavaIoFile *journalFileTmp_;
  jint appVersion_;
  jlong maxSize_;
  jint valueCount_;
  jlong size_;
  JavaIoWriter *journalWriter_;
  JavaUtilLinkedHashMap *lruEntries_;
  jint redundantOpCount_;
  jlong nextSequenceNumber_;
  id<JavaUtilConcurrentExecutorService> executorService_;
  id<JavaUtilConcurrentCallable> cleanupCallable_;
}

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end OBJC_METHOD_FAMILY_NONE;

+ (void)deleteContentsWithJavaIoFile:(JavaIoFile *)dir;

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable;

+ (NSString *)readFullyWithJavaIoReader:(JavaIoReader *)reader;

+ (NSString *)readAsciiLineWithJavaIoInputStream:(JavaIoInputStream *)inArg;

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                           withInt:(jint)appVersion
                           withInt:(jint)valueCount
                          withLong:(jlong)maxSize;

- (void)readJournal;

- (void)readJournalLineWithNSString:(NSString *)line;

- (void)processJournal;

- (void)rebuildJournal;

+ (void)deleteIfExistsWithJavaIoFile:(JavaIoFile *)file;

- (APDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                   withLong:(jlong)expectedSequenceNumber;

- (void)completeEditWithAPDiskLruCache_Editor:(APDiskLruCache_Editor *)editor
                                  withBoolean:(jboolean)success;

- (jboolean)journalRebuildRequired;

- (void)checkNotClosed;

- (void)trimToSize;

- (void)validateKeyWithNSString:(NSString *)key;

+ (NSString *)inputStreamToStringWithJavaIoInputStream:(JavaIoInputStream *)inArg;

@end

J2OBJC_FIELD_SETTER(APDiskLruCache, directory_, JavaIoFile *)
J2OBJC_FIELD_SETTER(APDiskLruCache, journalFile_, JavaIoFile *)
J2OBJC_FIELD_SETTER(APDiskLruCache, journalFileTmp_, JavaIoFile *)
J2OBJC_FIELD_SETTER(APDiskLruCache, journalWriter_, JavaIoWriter *)
J2OBJC_FIELD_SETTER(APDiskLruCache, lruEntries_, JavaUtilLinkedHashMap *)
J2OBJC_FIELD_SETTER(APDiskLruCache, executorService_, id<JavaUtilConcurrentExecutorService>)
J2OBJC_FIELD_SETTER(APDiskLruCache, cleanupCallable_, id<JavaUtilConcurrentCallable>)

inline NSString *APDiskLruCache_get_CLEAN(void);
static NSString *APDiskLruCache_CLEAN = @"CLEAN";
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, CLEAN, NSString *)

inline NSString *APDiskLruCache_get_DIRTY(void);
static NSString *APDiskLruCache_DIRTY = @"DIRTY";
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, DIRTY, NSString *)

inline NSString *APDiskLruCache_get_REMOVE(void);
static NSString *APDiskLruCache_REMOVE = @"REMOVE";
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, REMOVE, NSString *)

inline NSString *APDiskLruCache_get_READ(void);
static NSString *APDiskLruCache_READ = @"READ";
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, READ, NSString *)

inline JavaNioCharsetCharset *APDiskLruCache_get_UTF_8(void);
static JavaNioCharsetCharset *APDiskLruCache_UTF_8;
J2OBJC_STATIC_FIELD_OBJ_FINAL(APDiskLruCache, UTF_8, JavaNioCharsetCharset *)

__attribute__((unused)) static IOSObjectArray *APDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(IOSObjectArray *original, jint start, jint end);

__attribute__((unused)) static void APDiskLruCache_deleteContentsWithJavaIoFile_(JavaIoFile *dir);

__attribute__((unused)) static void APDiskLruCache_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable);

__attribute__((unused)) static NSString *APDiskLruCache_readFullyWithJavaIoReader_(JavaIoReader *reader);

__attribute__((unused)) static NSString *APDiskLruCache_readAsciiLineWithJavaIoInputStream_(JavaIoInputStream *inArg);

__attribute__((unused)) static void APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(APDiskLruCache *self, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize);

__attribute__((unused)) static APDiskLruCache *new_APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) NS_RETURNS_RETAINED;

__attribute__((unused)) static APDiskLruCache *create_APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize);

__attribute__((unused)) static void APDiskLruCache_readJournal(APDiskLruCache *self);

__attribute__((unused)) static void APDiskLruCache_readJournalLineWithNSString_(APDiskLruCache *self, NSString *line);

__attribute__((unused)) static void APDiskLruCache_processJournal(APDiskLruCache *self);

__attribute__((unused)) static void APDiskLruCache_rebuildJournal(APDiskLruCache *self);

__attribute__((unused)) static void APDiskLruCache_deleteIfExistsWithJavaIoFile_(JavaIoFile *file);

__attribute__((unused)) static APDiskLruCache_Editor *APDiskLruCache_editWithNSString_withLong_(APDiskLruCache *self, NSString *key, jlong expectedSequenceNumber);

__attribute__((unused)) static void APDiskLruCache_completeEditWithAPDiskLruCache_Editor_withBoolean_(APDiskLruCache *self, APDiskLruCache_Editor *editor, jboolean success);

__attribute__((unused)) static jboolean APDiskLruCache_journalRebuildRequired(APDiskLruCache *self);

__attribute__((unused)) static void APDiskLruCache_checkNotClosed(APDiskLruCache *self);

__attribute__((unused)) static void APDiskLruCache_trimToSize(APDiskLruCache *self);

__attribute__((unused)) static void APDiskLruCache_validateKeyWithNSString_(APDiskLruCache *self, NSString *key);

__attribute__((unused)) static NSString *APDiskLruCache_inputStreamToStringWithJavaIoInputStream_(JavaIoInputStream *inArg);

@interface APDiskLruCache_1 : NSObject < JavaUtilConcurrentCallable > {
 @public
  APDiskLruCache *this$0_;
}

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$;

- (JavaLangVoid *)call;

@end

J2OBJC_EMPTY_STATIC_INIT(APDiskLruCache_1)

__attribute__((unused)) static void APDiskLruCache_1_initWithAPDiskLruCache_(APDiskLruCache_1 *self, APDiskLruCache *outer$);

__attribute__((unused)) static APDiskLruCache_1 *new_APDiskLruCache_1_initWithAPDiskLruCache_(APDiskLruCache *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static APDiskLruCache_1 *create_APDiskLruCache_1_initWithAPDiskLruCache_(APDiskLruCache *outer$);

@interface APDiskLruCache_Snapshot () {
 @public
  APDiskLruCache *this$0_;
  NSString *key_;
  jlong sequenceNumber_;
  IOSObjectArray *ins_;
}

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$
                          withNSString:(NSString *)key
                              withLong:(jlong)sequenceNumber
            withJavaIoInputStreamArray:(IOSObjectArray *)ins;

@end

J2OBJC_FIELD_SETTER(APDiskLruCache_Snapshot, key_, NSString *)
J2OBJC_FIELD_SETTER(APDiskLruCache_Snapshot, ins_, IOSObjectArray *)

__attribute__((unused)) static void APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(APDiskLruCache_Snapshot *self, APDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins);

__attribute__((unused)) static APDiskLruCache_Snapshot *new_APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(APDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) NS_RETURNS_RETAINED;

__attribute__((unused)) static APDiskLruCache_Snapshot *create_APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(APDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins);

@interface APDiskLruCache_Editor () {
 @public
  APDiskLruCache *this$0_;
  APDiskLruCache_Entry *entry__;
  jboolean hasErrors_;
}

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$
              withAPDiskLruCache_Entry:(APDiskLruCache_Entry *)entry_;

@end

J2OBJC_FIELD_SETTER(APDiskLruCache_Editor, entry__, APDiskLruCache_Entry *)

__attribute__((unused)) static void APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(APDiskLruCache_Editor *self, APDiskLruCache *outer$, APDiskLruCache_Entry *entry_);

__attribute__((unused)) static APDiskLruCache_Editor *new_APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(APDiskLruCache *outer$, APDiskLruCache_Entry *entry_) NS_RETURNS_RETAINED;

__attribute__((unused)) static APDiskLruCache_Editor *create_APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(APDiskLruCache *outer$, APDiskLruCache_Entry *entry_);

@interface APDiskLruCache_Editor_FaultHidingOutputStream : JavaIoFilterOutputStream {
 @public
  APDiskLruCache_Editor *this$0_;
}

- (instancetype)initWithAPDiskLruCache_Editor:(APDiskLruCache_Editor *)outer$
                       withJavaIoOutputStream:(JavaIoOutputStream *)outArg;

- (void)writeWithInt:(jint)oneByte;

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)length;

- (void)close;

- (void)flush;

@end

J2OBJC_EMPTY_STATIC_INIT(APDiskLruCache_Editor_FaultHidingOutputStream)

__attribute__((unused)) static void APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(APDiskLruCache_Editor_FaultHidingOutputStream *self, APDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg);

__attribute__((unused)) static APDiskLruCache_Editor_FaultHidingOutputStream *new_APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(APDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) NS_RETURNS_RETAINED;

__attribute__((unused)) static APDiskLruCache_Editor_FaultHidingOutputStream *create_APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(APDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg);

J2OBJC_TYPE_LITERAL_HEADER(APDiskLruCache_Editor_FaultHidingOutputStream)

@interface APDiskLruCache_Entry : NSObject {
 @public
  APDiskLruCache *this$0_;
  NSString *key_;
  IOSLongArray *lengths_;
  jboolean readable_;
  APDiskLruCache_Editor *currentEditor_;
  jlong sequenceNumber_;
}

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$
                          withNSString:(NSString *)key;

- (NSString *)getLengths;

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings;

- (JavaIoFile *)getCleanFileWithInt:(jint)i;

- (JavaIoFile *)getDirtyFileWithInt:(jint)i;

@end

J2OBJC_EMPTY_STATIC_INIT(APDiskLruCache_Entry)

J2OBJC_FIELD_SETTER(APDiskLruCache_Entry, key_, NSString *)
J2OBJC_FIELD_SETTER(APDiskLruCache_Entry, lengths_, IOSLongArray *)
J2OBJC_FIELD_SETTER(APDiskLruCache_Entry, currentEditor_, APDiskLruCache_Editor *)

__attribute__((unused)) static void APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(APDiskLruCache_Entry *self, APDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static APDiskLruCache_Entry *new_APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(APDiskLruCache *outer$, NSString *key) NS_RETURNS_RETAINED;

__attribute__((unused)) static APDiskLruCache_Entry *create_APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(APDiskLruCache *outer$, NSString *key);

__attribute__((unused)) static void APDiskLruCache_Entry_setLengthsWithNSStringArray_(APDiskLruCache_Entry *self, IOSObjectArray *strings);

__attribute__((unused)) static JavaIoIOException *APDiskLruCache_Entry_invalidLengthsWithNSStringArray_(APDiskLruCache_Entry *self, IOSObjectArray *strings);

J2OBJC_TYPE_LITERAL_HEADER(APDiskLruCache_Entry)

J2OBJC_INITIALIZED_DEFN(APDiskLruCache)

NSString *APDiskLruCache_JOURNAL_FILE = @"journal";
NSString *APDiskLruCache_JOURNAL_FILE_TMP = @"journal.tmp";
NSString *APDiskLruCache_MAGIC = @"libcore.io.DiskLruCache";
NSString *APDiskLruCache_VERSION_1 = @"1";

@implementation APDiskLruCache

+ (IOSObjectArray *)copyOfRangeWithNSObjectArray:(IOSObjectArray *)original
                                         withInt:(jint)start
                                         withInt:(jint)end {
  return APDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(original, start, end);
}

+ (void)deleteContentsWithJavaIoFile:(JavaIoFile *)dir {
  APDiskLruCache_deleteContentsWithJavaIoFile_(dir);
}

+ (void)closeQuietlyWithJavaIoCloseable:(id<JavaIoCloseable>)closeable {
  APDiskLruCache_closeQuietlyWithJavaIoCloseable_(closeable);
}

+ (NSString *)readFullyWithJavaIoReader:(JavaIoReader *)reader {
  return APDiskLruCache_readFullyWithJavaIoReader_(reader);
}

+ (NSString *)readAsciiLineWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return APDiskLruCache_readAsciiLineWithJavaIoInputStream_(inArg);
}

- (instancetype)initWithJavaIoFile:(JavaIoFile *)directory
                           withInt:(jint)appVersion
                           withInt:(jint)valueCount
                          withLong:(jlong)maxSize {
  APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(self, directory, appVersion, valueCount, maxSize);
  return self;
}

+ (APDiskLruCache *)openWithJavaIoFile:(JavaIoFile *)directory
                               withInt:(jint)appVersion
                               withInt:(jint)valueCount
                              withLong:(jlong)maxSize {
  return APDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize);
}

- (void)readJournal {
  APDiskLruCache_readJournal(self);
}

- (void)readJournalLineWithNSString:(NSString *)line {
  APDiskLruCache_readJournalLineWithNSString_(self, line);
}

- (void)processJournal {
  APDiskLruCache_processJournal(self);
}

- (void)rebuildJournal {
  APDiskLruCache_rebuildJournal(self);
}

+ (void)deleteIfExistsWithJavaIoFile:(JavaIoFile *)file {
  APDiskLruCache_deleteIfExistsWithJavaIoFile_(file);
}

- (APDiskLruCache_Snapshot *)getWithNSString:(NSString *)key {
  @synchronized(self) {
    APDiskLruCache_checkNotClosed(self);
    APDiskLruCache_validateKeyWithNSString_(self, key);
    APDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil) {
      return JreRetainedLocalValue(nil);
    }
    if (!entry_->readable_) {
      return JreRetainedLocalValue(nil);
    }
    IOSObjectArray *ins = [IOSObjectArray newArrayWithLength:valueCount_ type:JavaIoInputStream_class_()];
    @try {
      for (jint i = 0; i < valueCount_; i++) {
        (void) IOSObjectArray_SetAndConsume(ins, i, new_JavaIoFileInputStream_initWithJavaIoFile_([entry_ getCleanFileWithInt:i]));
      }
    }
    @catch (JavaIoFileNotFoundException *e) {
      return JreRetainedLocalValue(nil);
    }
    redundantOpCount_++;
    (void) [((JavaIoWriter *) nil_chk(journalWriter_)) appendWithJavaLangCharSequence:JreStrcat("$C$C", APDiskLruCache_READ, ' ', key, 0x000a)];
    if (APDiskLruCache_journalRebuildRequired(self)) {
      (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) submitWithJavaUtilConcurrentCallable:cleanupCallable_];
    }
    return JreRetainedLocalValue(new_APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(self, key, entry_->sequenceNumber_, ins));
  }
}

- (APDiskLruCache_Editor *)editWithNSString:(NSString *)key {
  return APDiskLruCache_editWithNSString_withLong_(self, key, APDiskLruCache_ANY_SEQUENCE_NUMBER);
}

- (APDiskLruCache_Editor *)editWithNSString:(NSString *)key
                                   withLong:(jlong)expectedSequenceNumber {
  return APDiskLruCache_editWithNSString_withLong_(self, key, expectedSequenceNumber);
}

- (JavaIoFile *)getDirectory {
  return directory_;
}

- (jlong)maxSize {
  return maxSize_;
}

- (jlong)size {
  @synchronized(self) {
    return size_;
  }
}

- (void)completeEditWithAPDiskLruCache_Editor:(APDiskLruCache_Editor *)editor
                                  withBoolean:(jboolean)success {
  APDiskLruCache_completeEditWithAPDiskLruCache_Editor_withBoolean_(self, editor, success);
}

- (jboolean)journalRebuildRequired {
  return APDiskLruCache_journalRebuildRequired(self);
}

- (jboolean)removeWithNSString:(NSString *)key {
  @synchronized(self) {
    APDiskLruCache_checkNotClosed(self);
    APDiskLruCache_validateKeyWithNSString_(self, key);
    APDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) getWithId:key];
    if (entry_ == nil || entry_->currentEditor_ != nil) {
      return false;
    }
    for (jint i = 0; i < valueCount_; i++) {
      JavaIoFile *file = [entry_ getCleanFileWithInt:i];
      if (![((JavaIoFile *) nil_chk(file)) delete__]) {
        @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$@", @"failed to delete ", file));
      }
      size_ -= IOSLongArray_Get(nil_chk(entry_->lengths_), i);
      *IOSLongArray_GetRef(entry_->lengths_, i) = 0;
    }
    redundantOpCount_++;
    (void) [((JavaIoWriter *) nil_chk(journalWriter_)) appendWithJavaLangCharSequence:JreStrcat("$C$C", APDiskLruCache_REMOVE, ' ', key, 0x000a)];
    (void) [lruEntries_ removeWithId:key];
    if (APDiskLruCache_journalRebuildRequired(self)) {
      (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(executorService_)) submitWithJavaUtilConcurrentCallable:cleanupCallable_];
    }
    return true;
  }
}

- (jboolean)isClosed {
  return journalWriter_ == nil;
}

- (void)checkNotClosed {
  APDiskLruCache_checkNotClosed(self);
}

- (void)flush {
  @synchronized(self) {
    APDiskLruCache_checkNotClosed(self);
    APDiskLruCache_trimToSize(self);
    [((JavaIoWriter *) nil_chk(journalWriter_)) flush];
  }
}

- (void)close {
  @synchronized(self) {
    if (journalWriter_ == nil) {
      return;
    }
    for (APDiskLruCache_Entry * __strong entry_ in new_JavaUtilArrayList_initWithJavaUtilCollection_([((JavaUtilLinkedHashMap *) nil_chk(lruEntries_)) values])) {
      if (((APDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
        [entry_->currentEditor_ abort];
      }
    }
    APDiskLruCache_trimToSize(self);
    [((JavaIoWriter *) nil_chk(journalWriter_)) close];
    journalWriter_ = nil;
  }
}

- (void)trimToSize {
  APDiskLruCache_trimToSize(self);
}

- (void)delete__ {
  [self close];
  APDiskLruCache_deleteContentsWithJavaIoFile_(directory_);
}

- (void)validateKeyWithNSString:(NSString *)key {
  APDiskLruCache_validateKeyWithNSString_(self, key);
}

+ (NSString *)inputStreamToStringWithJavaIoInputStream:(JavaIoInputStream *)inArg {
  return APDiskLruCache_inputStreamToStringWithJavaIoInputStream_(inArg);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LNSObject;", 0xa, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0xa, 3, 4, 5, -1, -1, -1 },
    { NULL, "V", 0xa, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 8, 9, 5, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 10, 11, 5, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 12, -1, -1, -1, -1 },
    { NULL, "LAPDiskLruCache;", 0x9, 13, 12, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x22, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0xa, 16, 4, 5, -1, -1, -1 },
    { NULL, "LAPDiskLruCache_Snapshot;", 0x21, 17, 15, 5, -1, -1, -1 },
    { NULL, "LAPDiskLruCache_Editor;", 0x1, 18, 15, 5, -1, -1, -1 },
    { NULL, "LAPDiskLruCache_Editor;", 0x22, 18, 19, 5, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x21, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x22, 20, 21, 5, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x21, 22, 15, 5, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x21, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x1, 23, -1, 5, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 25, 11, 5, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(copyOfRangeWithNSObjectArray:withInt:withInt:);
  methods[1].selector = @selector(deleteContentsWithJavaIoFile:);
  methods[2].selector = @selector(closeQuietlyWithJavaIoCloseable:);
  methods[3].selector = @selector(readFullyWithJavaIoReader:);
  methods[4].selector = @selector(readAsciiLineWithJavaIoInputStream:);
  methods[5].selector = @selector(initWithJavaIoFile:withInt:withInt:withLong:);
  methods[6].selector = @selector(openWithJavaIoFile:withInt:withInt:withLong:);
  methods[7].selector = @selector(readJournal);
  methods[8].selector = @selector(readJournalLineWithNSString:);
  methods[9].selector = @selector(processJournal);
  methods[10].selector = @selector(rebuildJournal);
  methods[11].selector = @selector(deleteIfExistsWithJavaIoFile:);
  methods[12].selector = @selector(getWithNSString:);
  methods[13].selector = @selector(editWithNSString:);
  methods[14].selector = @selector(editWithNSString:withLong:);
  methods[15].selector = @selector(getDirectory);
  methods[16].selector = @selector(maxSize);
  methods[17].selector = @selector(size);
  methods[18].selector = @selector(completeEditWithAPDiskLruCache_Editor:withBoolean:);
  methods[19].selector = @selector(journalRebuildRequired);
  methods[20].selector = @selector(removeWithNSString:);
  methods[21].selector = @selector(isClosed);
  methods[22].selector = @selector(checkNotClosed);
  methods[23].selector = @selector(flush);
  methods[24].selector = @selector(close);
  methods[25].selector = @selector(trimToSize);
  methods[26].selector = @selector(delete__);
  methods[27].selector = @selector(validateKeyWithNSString:);
  methods[28].selector = @selector(inputStreamToStringWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "JOURNAL_FILE", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 26, -1, -1 },
    { "JOURNAL_FILE_TMP", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 27, -1, -1 },
    { "MAGIC", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 28, -1, -1 },
    { "VERSION_1", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 29, -1, -1 },
    { "ANY_SEQUENCE_NUMBER", "J", .constantValue.asLong = APDiskLruCache_ANY_SEQUENCE_NUMBER, 0x18, -1, -1, -1, -1 },
    { "CLEAN", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "DIRTY", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 31, -1, -1 },
    { "REMOVE", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "READ", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 33, -1, -1 },
    { "UTF_8", "LJavaNioCharsetCharset;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "directory_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "journalFile_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "journalFileTmp_", "LJavaIoFile;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "appVersion_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "maxSize_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "valueCount_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "size_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "journalWriter_", "LJavaIoWriter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lruEntries_", "LJavaUtilLinkedHashMap;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "redundantOpCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "nextSequenceNumber_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "executorService_", "LJavaUtilConcurrentExecutorService;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "cleanupCallable_", "LJavaUtilConcurrentCallable;", .constantValue.asLong = 0, 0x12, -1, -1, 36, -1 },
  };
  static const void *ptrTable[] = { "copyOfRange", "[LNSObject;II", "<T:Ljava/lang/Object;>([TT;II)[TT;", "deleteContents", "LJavaIoFile;", "LJavaIoIOException;", "closeQuietly", "LJavaIoCloseable;", "readFully", "LJavaIoReader;", "readAsciiLine", "LJavaIoInputStream;", "LJavaIoFile;IIJ", "open", "readJournalLine", "LNSString;", "deleteIfExists", "get", "edit", "LNSString;J", "completeEdit", "LAPDiskLruCache_Editor;Z", "remove", "delete", "validateKey", "inputStreamToString", &APDiskLruCache_JOURNAL_FILE, &APDiskLruCache_JOURNAL_FILE_TMP, &APDiskLruCache_MAGIC, &APDiskLruCache_VERSION_1, &APDiskLruCache_CLEAN, &APDiskLruCache_DIRTY, &APDiskLruCache_REMOVE, &APDiskLruCache_READ, &APDiskLruCache_UTF_8, "Ljava/util/LinkedHashMap<Ljava/lang/String;Lcom/applidium/shutterbug/cache/DiskLruCache$Entry;>;", "Ljava/util/concurrent/Callable<Ljava/lang/Void;>;", "LAPDiskLruCache_Snapshot;LAPDiskLruCache_Editor;LAPDiskLruCache_Entry;" };
  static const J2ObjcClassInfo _APDiskLruCache = { "DiskLruCache", "com.applidium.shutterbug.cache", ptrTable, methods, fields, 7, 0x11, 29, 23, -1, 37, -1, -1, -1 };
  return &_APDiskLruCache;
}

+ (void)initialize {
  if (self == [APDiskLruCache class]) {
    APDiskLruCache_UTF_8 = JavaNioCharsetCharset_forNameWithNSString_(@"UTF-8");
    J2OBJC_SET_INITIALIZED(APDiskLruCache)
  }
}

@end

IOSObjectArray *APDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(IOSObjectArray *original, jint start, jint end) {
  APDiskLruCache_initialize();
  jint originalLength = ((IOSObjectArray *) nil_chk(original))->size_;
  if (start > end) {
    @throw new_JavaLangIllegalArgumentException_init();
  }
  if (start < 0 || start > originalLength) {
    @throw new_JavaLangArrayIndexOutOfBoundsException_init();
  }
  jint resultLength = end - start;
  jint copyLength = JavaLangMath_minWithInt_withInt_(resultLength, originalLength - start);
  IOSObjectArray *result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[original java_getClass] getComponentType], resultLength), IOSClass_arrayType(NSObject_class_(), 1));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(original, start, result, 0, copyLength);
  return result;
}

void APDiskLruCache_deleteContentsWithJavaIoFile_(JavaIoFile *dir) {
  APDiskLruCache_initialize();
  IOSObjectArray *files = [((JavaIoFile *) nil_chk(dir)) listFiles];
  if (files == nil) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"not a directory: ", dir));
  }
  {
    IOSObjectArray *a__ = files;
    JavaIoFile * const *b__ = a__->buffer_;
    JavaIoFile * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoFile *file = *b__++;
      if ([((JavaIoFile *) nil_chk(file)) isDirectory]) {
        APDiskLruCache_deleteContentsWithJavaIoFile_(file);
      }
      if (![file delete__]) {
      }
    }
  }
}

void APDiskLruCache_closeQuietlyWithJavaIoCloseable_(id<JavaIoCloseable> closeable) {
  APDiskLruCache_initialize();
  if (closeable != nil) {
    @try {
      [closeable close];
    }
    @catch (JavaLangRuntimeException *rethrown) {
      @throw rethrown;
    }
    @catch (JavaLangException *ignored) {
    }
  }
}

NSString *APDiskLruCache_readFullyWithJavaIoReader_(JavaIoReader *reader) {
  APDiskLruCache_initialize();
  @try {
    JavaIoStringWriter *writer = new_JavaIoStringWriter_init();
    IOSCharArray *buffer = [IOSCharArray newArrayWithLength:1024];
    jint count;
    while ((count = [((JavaIoReader *) nil_chk(reader)) readWithCharArray:buffer]) != -1) {
      [writer writeWithCharArray:buffer withInt:0 withInt:count];
    }
    return [writer description];
  }
  @finally {
    [((JavaIoReader *) nil_chk(reader)) close];
  }
}

NSString *APDiskLruCache_readAsciiLineWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  APDiskLruCache_initialize();
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_initWithInt_(80);
  while (true) {
    jint c = [((JavaIoInputStream *) nil_chk(inArg)) read];
    if (c == -1) {
      @throw new_JavaIoEOFException_init();
    }
    else if (c == 0x000a) {
      break;
    }
    (void) [result appendWithChar:(jchar) c];
  }
  jint length = [result java_length];
  if (length > 0 && [result charAtWithInt:length - 1] == 0x000d) {
    [result setLengthWithInt:length - 1];
  }
  return [result description];
}

void APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(APDiskLruCache *self, JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  NSObject_init(self);
  self->size_ = 0;
  self->lruEntries_ = new_JavaUtilLinkedHashMap_initWithInt_withFloat_withBoolean_(0, 0.75f, true);
  self->nextSequenceNumber_ = 0;
  self->executorService_ = new_JavaUtilConcurrentThreadPoolExecutor_initWithInt_withInt_withLong_withJavaUtilConcurrentTimeUnit_withJavaUtilConcurrentBlockingQueue_(0, 1, 60LL, JreLoadEnum(JavaUtilConcurrentTimeUnit, SECONDS), new_JavaUtilConcurrentLinkedBlockingQueue_init());
  self->cleanupCallable_ = new_APDiskLruCache_1_initWithAPDiskLruCache_(self);
  self->directory_ = directory;
  self->appVersion_ = appVersion;
  self->journalFile_ = new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, APDiskLruCache_JOURNAL_FILE);
  self->journalFileTmp_ = new_JavaIoFile_initWithJavaIoFile_withNSString_(directory, APDiskLruCache_JOURNAL_FILE_TMP);
  self->valueCount_ = valueCount;
  self->maxSize_ = maxSize;
}

APDiskLruCache *new_APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  J2OBJC_NEW_IMPL(APDiskLruCache, initWithJavaIoFile_withInt_withInt_withLong_, directory, appVersion, valueCount, maxSize)
}

APDiskLruCache *create_APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  J2OBJC_CREATE_IMPL(APDiskLruCache, initWithJavaIoFile_withInt_withInt_withLong_, directory, appVersion, valueCount, maxSize)
}

APDiskLruCache *APDiskLruCache_openWithJavaIoFile_withInt_withInt_withLong_(JavaIoFile *directory, jint appVersion, jint valueCount, jlong maxSize) {
  APDiskLruCache_initialize();
  if (maxSize <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"maxSize <= 0");
  }
  if (valueCount <= 0) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(@"valueCount <= 0");
  }
  APDiskLruCache *cache = new_APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize);
  if ([((JavaIoFile *) nil_chk(cache->journalFile_)) exists]) {
    @try {
      APDiskLruCache_readJournal(cache);
      APDiskLruCache_processJournal(cache);
      cache->journalWriter_ = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(cache->journalFile_, true));
      return cache;
    }
    @catch (JavaIoIOException *journalIsCorrupt) {
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$$$", @"DiskLruCache ", directory, @" is corrupt: ", [journalIsCorrupt getMessage], @", removing")];
      [cache delete__];
    }
  }
  [((JavaIoFile *) nil_chk(directory)) mkdirs];
  cache = new_APDiskLruCache_initWithJavaIoFile_withInt_withInt_withLong_(directory, appVersion, valueCount, maxSize);
  APDiskLruCache_rebuildJournal(cache);
  return cache;
}

void APDiskLruCache_readJournal(APDiskLruCache *self) {
  JavaIoInputStream *in = new_JavaIoBufferedInputStream_initWithJavaIoInputStream_(new_JavaIoFileInputStream_initWithJavaIoFile_(self->journalFile_));
  @try {
    NSString *magic = APDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *version_ = APDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *appVersionString = APDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *valueCountString = APDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    NSString *blank = APDiskLruCache_readAsciiLineWithJavaIoInputStream_(in);
    if (![((NSString *) nil_chk(APDiskLruCache_MAGIC)) isEqual:magic] || ![((NSString *) nil_chk(APDiskLruCache_VERSION_1)) isEqual:version_] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->appVersion_))) isEqual:appVersionString] || ![((NSString *) nil_chk(JavaLangInteger_toStringWithInt_(self->valueCount_))) isEqual:valueCountString] || ![@"" isEqual:blank]) {
      @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$$$$$$$C", @"unexpected journal header: [", magic, @", ", version_, @", ", valueCountString, @", ", blank, ']'));
    }
    while (true) {
      @try {
        APDiskLruCache_readJournalLineWithNSString_(self, APDiskLruCache_readAsciiLineWithJavaIoInputStream_(in));
      }
      @catch (JavaIoEOFException *endOfJournal) {
        break;
      }
    }
  }
  @finally {
    APDiskLruCache_closeQuietlyWithJavaIoCloseable_(in);
  }
}

void APDiskLruCache_readJournalLineWithNSString_(APDiskLruCache *self, NSString *line) {
  IOSObjectArray *parts = [((NSString *) nil_chk(line)) java_split:@" "];
  if (((IOSObjectArray *) nil_chk(parts))->size_ < 2) {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line));
  }
  NSString *key = IOSObjectArray_Get(parts, 1);
  if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:APDiskLruCache_REMOVE] && parts->size_ == 2) {
    (void) [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:key];
    return;
  }
  APDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
  if (entry_ == nil) {
    entry_ = new_APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(self, key);
    (void) [self->lruEntries_ putWithId:key withId:entry_];
  }
  if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:APDiskLruCache_CLEAN] && parts->size_ == 2 + self->valueCount_) {
    entry_->readable_ = true;
    entry_->currentEditor_ = nil;
    APDiskLruCache_Entry_setLengthsWithNSStringArray_(entry_, APDiskLruCache_copyOfRangeWithNSObjectArray_withInt_withInt_(parts, 2, parts->size_));
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:APDiskLruCache_DIRTY] && parts->size_ == 2) {
    entry_->currentEditor_ = new_APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(self, entry_);
  }
  else if ([((NSString *) nil_chk(IOSObjectArray_Get(parts, 0))) isEqual:APDiskLruCache_READ] && parts->size_ == 2) {
  }
  else {
    @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", line));
  }
}

void APDiskLruCache_processJournal(APDiskLruCache *self) {
  APDiskLruCache_deleteIfExistsWithJavaIoFile_(self->journalFileTmp_);
  for (id<JavaUtilIterator> i = [((id<JavaUtilCollection>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) iterator]; [((id<JavaUtilIterator>) nil_chk(i)) hasNext]; ) {
    APDiskLruCache_Entry *entry_ = [i next];
    if (((APDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ == nil) {
      for (jint t = 0; t < self->valueCount_; t++) {
        self->size_ += IOSLongArray_Get(nil_chk(entry_->lengths_), t);
      }
    }
    else {
      entry_->currentEditor_ = nil;
      for (jint t = 0; t < self->valueCount_; t++) {
        APDiskLruCache_deleteIfExistsWithJavaIoFile_([entry_ getCleanFileWithInt:t]);
        APDiskLruCache_deleteIfExistsWithJavaIoFile_([entry_ getDirtyFileWithInt:t]);
      }
      [i remove];
    }
  }
}

void APDiskLruCache_rebuildJournal(APDiskLruCache *self) {
  @synchronized(self) {
    if (self->journalWriter_ != nil) {
      [self->journalWriter_ close];
    }
    JavaIoWriter *writer = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoFileWriter_initWithJavaIoFile_(self->journalFileTmp_));
    [writer writeWithNSString:APDiskLruCache_MAGIC];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:APDiskLruCache_VERSION_1];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:JavaLangInteger_toStringWithInt_(self->appVersion_)];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:JavaLangInteger_toStringWithInt_(self->valueCount_)];
    [writer writeWithNSString:@"\n"];
    [writer writeWithNSString:@"\n"];
    for (APDiskLruCache_Entry * __strong entry_ in nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) values])) {
      if (((APDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != nil) {
        [writer writeWithNSString:JreStrcat("$C$C", APDiskLruCache_DIRTY, ' ', entry_->key_, 0x000a)];
      }
      else {
        [writer writeWithNSString:JreStrcat("$C$$C", APDiskLruCache_CLEAN, ' ', entry_->key_, [entry_ getLengths], 0x000a)];
      }
    }
    [writer close];
    [((JavaIoFile *) nil_chk(self->journalFileTmp_)) renameToWithJavaIoFile:self->journalFile_];
    self->journalWriter_ = new_JavaIoBufferedWriter_initWithJavaIoWriter_(new_JavaIoFileWriter_initWithJavaIoFile_withBoolean_(self->journalFile_, true));
  }
}

void APDiskLruCache_deleteIfExistsWithJavaIoFile_(JavaIoFile *file) {
  APDiskLruCache_initialize();
  if ([((JavaIoFile *) nil_chk(file)) exists] && ![file delete__]) {
    @throw new_JavaIoIOException_init();
  }
}

APDiskLruCache_Editor *APDiskLruCache_editWithNSString_withLong_(APDiskLruCache *self, NSString *key, jlong expectedSequenceNumber) {
  @synchronized(self) {
    APDiskLruCache_checkNotClosed(self);
    APDiskLruCache_validateKeyWithNSString_(self, key);
    APDiskLruCache_Entry *entry_ = [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) getWithId:key];
    if (expectedSequenceNumber != APDiskLruCache_ANY_SEQUENCE_NUMBER && (entry_ == nil || entry_->sequenceNumber_ != expectedSequenceNumber)) {
      return JreRetainedLocalValue(nil);
    }
    if (entry_ == nil) {
      entry_ = new_APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(self, key);
      (void) [self->lruEntries_ putWithId:key withId:entry_];
    }
    else if (entry_->currentEditor_ != nil) {
      return JreRetainedLocalValue(nil);
    }
    APDiskLruCache_Editor *editor = new_APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(self, entry_);
    entry_->currentEditor_ = editor;
    [((JavaIoWriter *) nil_chk(self->journalWriter_)) writeWithNSString:JreStrcat("$C$C", APDiskLruCache_DIRTY, ' ', key, 0x000a)];
    [((JavaIoWriter *) nil_chk(self->journalWriter_)) flush];
    return JreRetainedLocalValue(editor);
  }
}

void APDiskLruCache_completeEditWithAPDiskLruCache_Editor_withBoolean_(APDiskLruCache *self, APDiskLruCache_Editor *editor, jboolean success) {
  @synchronized(self) {
    APDiskLruCache_Entry *entry_ = ((APDiskLruCache_Editor *) nil_chk(editor))->entry__;
    if (((APDiskLruCache_Entry *) nil_chk(entry_))->currentEditor_ != editor) {
      @throw new_JavaLangIllegalStateException_init();
    }
    if (success && !entry_->readable_) {
      for (jint i = 0; i < self->valueCount_; i++) {
        if (![((JavaIoFile *) nil_chk([entry_ getDirtyFileWithInt:i])) exists]) {
          [editor abort];
          @throw new_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I", @"edit didn't create file ", i));
        }
      }
    }
    for (jint i = 0; i < self->valueCount_; i++) {
      JavaIoFile *dirty = [entry_ getDirtyFileWithInt:i];
      if (success) {
        if ([((JavaIoFile *) nil_chk(dirty)) exists]) {
          JavaIoFile *clean = [entry_ getCleanFileWithInt:i];
          [dirty renameToWithJavaIoFile:clean];
          jlong oldLength = IOSLongArray_Get(nil_chk(entry_->lengths_), i);
          jlong newLength = [((JavaIoFile *) nil_chk(clean)) length];
          *IOSLongArray_GetRef(entry_->lengths_, i) = newLength;
          self->size_ = self->size_ - oldLength + newLength;
        }
      }
      else {
        APDiskLruCache_deleteIfExistsWithJavaIoFile_(dirty);
      }
    }
    self->redundantOpCount_++;
    entry_->currentEditor_ = nil;
    if (entry_->readable_ | success) {
      entry_->readable_ = true;
      [((JavaIoWriter *) nil_chk(self->journalWriter_)) writeWithNSString:JreStrcat("$C$$C", APDiskLruCache_CLEAN, ' ', entry_->key_, [entry_ getLengths], 0x000a)];
      if (success) {
        entry_->sequenceNumber_ = self->nextSequenceNumber_++;
      }
    }
    else {
      (void) [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) removeWithId:entry_->key_];
      [((JavaIoWriter *) nil_chk(self->journalWriter_)) writeWithNSString:JreStrcat("$C$C", APDiskLruCache_REMOVE, ' ', entry_->key_, 0x000a)];
    }
    if (self->size_ > self->maxSize_ || APDiskLruCache_journalRebuildRequired(self)) {
      (void) [((id<JavaUtilConcurrentExecutorService>) nil_chk(self->executorService_)) submitWithJavaUtilConcurrentCallable:self->cleanupCallable_];
    }
  }
}

jboolean APDiskLruCache_journalRebuildRequired(APDiskLruCache *self) {
  jint REDUNDANT_OP_COMPACT_THRESHOLD = 2000;
  return self->redundantOpCount_ >= REDUNDANT_OP_COMPACT_THRESHOLD && self->redundantOpCount_ >= [((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) size];
}

void APDiskLruCache_checkNotClosed(APDiskLruCache *self) {
  if (self->journalWriter_ == nil) {
    @throw new_JavaLangIllegalStateException_initWithNSString_(@"cache is closed");
  }
}

void APDiskLruCache_trimToSize(APDiskLruCache *self) {
  while (self->size_ > self->maxSize_) {
    id<JavaUtilMap_Entry> toEvict = [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([((JavaUtilLinkedHashMap *) nil_chk(self->lruEntries_)) entrySet])) iterator])) next];
    [self removeWithNSString:[((id<JavaUtilMap_Entry>) nil_chk(toEvict)) getKey]];
  }
}

void APDiskLruCache_validateKeyWithNSString_(APDiskLruCache *self, NSString *key) {
  if ([((NSString *) nil_chk(key)) java_contains:@" "] || [key java_contains:@"\n"] || [key java_contains:@"\x0d"]) {
    @throw new_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$C", @"keys must not contain spaces or newlines: \"", key, '"'));
  }
}

NSString *APDiskLruCache_inputStreamToStringWithJavaIoInputStream_(JavaIoInputStream *inArg) {
  APDiskLruCache_initialize();
  return APDiskLruCache_readFullyWithJavaIoReader_(new_JavaIoInputStreamReader_initWithJavaIoInputStream_withJavaNioCharsetCharset_(inArg, APDiskLruCache_UTF_8));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APDiskLruCache)

@implementation APDiskLruCache_1

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$ {
  APDiskLruCache_1_initWithAPDiskLruCache_(self, outer$);
  return self;
}

- (JavaLangVoid *)call {
  @synchronized(this$0_) {
    if (this$0_->journalWriter_ == nil) {
      return JreRetainedLocalValue(nil);
    }
    APDiskLruCache_trimToSize(this$0_);
    if (APDiskLruCache_journalRebuildRequired(this$0_)) {
      APDiskLruCache_rebuildJournal(this$0_);
      this$0_->redundantOpCount_ = 0;
    }
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaLangVoid;", 0x1, -1, -1, 1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPDiskLruCache:);
  methods[1].selector = @selector(call);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAPDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPDiskLruCache;", "LJavaLangException;", "Ljava/lang/Object;Ljava/util/concurrent/Callable<Ljava/lang/Void;>;" };
  static const J2ObjcClassInfo _APDiskLruCache_1 = { "", "com.applidium.shutterbug.cache", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, -1, 2, -1 };
  return &_APDiskLruCache_1;
}

@end

void APDiskLruCache_1_initWithAPDiskLruCache_(APDiskLruCache_1 *self, APDiskLruCache *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

APDiskLruCache_1 *new_APDiskLruCache_1_initWithAPDiskLruCache_(APDiskLruCache *outer$) {
  J2OBJC_NEW_IMPL(APDiskLruCache_1, initWithAPDiskLruCache_, outer$)
}

APDiskLruCache_1 *create_APDiskLruCache_1_initWithAPDiskLruCache_(APDiskLruCache *outer$) {
  J2OBJC_CREATE_IMPL(APDiskLruCache_1, initWithAPDiskLruCache_, outer$)
}

@implementation APDiskLruCache_Snapshot

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$
                          withNSString:(NSString *)key
                              withLong:(jlong)sequenceNumber
            withJavaIoInputStreamArray:(IOSObjectArray *)ins {
  APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(self, outer$, key, sequenceNumber, ins);
  return self;
}

- (APDiskLruCache_Editor *)edit {
  return APDiskLruCache_editWithNSString_withLong_(this$0_, key_, sequenceNumber_);
}

- (JavaIoInputStream *)getInputStreamWithInt:(jint)index {
  return IOSObjectArray_Get(nil_chk(ins_), index);
}

- (NSString *)getStringWithInt:(jint)index {
  return APDiskLruCache_inputStreamToStringWithJavaIoInputStream_([self getInputStreamWithInt:index]);
}

- (void)close {
  {
    IOSObjectArray *a__ = ins_;
    JavaIoInputStream * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    JavaIoInputStream * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      JavaIoInputStream *in = *b__++;
      APDiskLruCache_closeQuietlyWithJavaIoCloseable_(in);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LAPDiskLruCache_Editor;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 3, 1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPDiskLruCache:withNSString:withLong:withJavaIoInputStreamArray:);
  methods[1].selector = @selector(edit);
  methods[2].selector = @selector(getInputStreamWithInt:);
  methods[3].selector = @selector(getStringWithInt:);
  methods[4].selector = @selector(close);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAPDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "sequenceNumber_", "J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "ins_", "[LJavaIoInputStream;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPDiskLruCache;LNSString;J[LJavaIoInputStream;", "LJavaIoIOException;", "getInputStream", "I", "getString", "LAPDiskLruCache;" };
  static const J2ObjcClassInfo _APDiskLruCache_Snapshot = { "Snapshot", "com.applidium.shutterbug.cache", ptrTable, methods, fields, 7, 0x11, 5, 4, 5, -1, -1, -1, -1 };
  return &_APDiskLruCache_Snapshot;
}

@end

void APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(APDiskLruCache_Snapshot *self, APDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->key_ = key;
  self->sequenceNumber_ = sequenceNumber;
  self->ins_ = ins;
}

APDiskLruCache_Snapshot *new_APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(APDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) {
  J2OBJC_NEW_IMPL(APDiskLruCache_Snapshot, initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_, outer$, key, sequenceNumber, ins)
}

APDiskLruCache_Snapshot *create_APDiskLruCache_Snapshot_initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_(APDiskLruCache *outer$, NSString *key, jlong sequenceNumber, IOSObjectArray *ins) {
  J2OBJC_CREATE_IMPL(APDiskLruCache_Snapshot, initWithAPDiskLruCache_withNSString_withLong_withJavaIoInputStreamArray_, outer$, key, sequenceNumber, ins)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APDiskLruCache_Snapshot)

@implementation APDiskLruCache_Editor

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$
              withAPDiskLruCache_Entry:(APDiskLruCache_Entry *)entry_ {
  APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(self, outer$, entry_);
  return self;
}

- (JavaIoInputStream *)newInputStreamWithInt:(jint)index {
  @synchronized(this$0_) {
    if (((APDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      @throw new_JavaLangIllegalStateException_init();
    }
    if (!entry__->readable_) {
      return JreRetainedLocalValue(nil);
    }
    return JreRetainedLocalValue(new_JavaIoFileInputStream_initWithJavaIoFile_([entry__ getCleanFileWithInt:index]));
  }
}

- (NSString *)getStringWithInt:(jint)index {
  JavaIoInputStream *in = [self newInputStreamWithInt:index];
  return in != nil ? APDiskLruCache_inputStreamToStringWithJavaIoInputStream_(in) : nil;
}

- (JavaIoOutputStream *)newOutputStreamWithInt:(jint)index {
  @synchronized(this$0_) {
    if (((APDiskLruCache_Entry *) nil_chk(entry__))->currentEditor_ != self) {
      @throw new_JavaLangIllegalStateException_init();
    }
    return JreRetainedLocalValue(new_APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(self, new_JavaIoFileOutputStream_initWithJavaIoFile_([entry__ getDirtyFileWithInt:index])));
  }
}

- (void)setWithInt:(jint)index
      withNSString:(NSString *)value {
  JavaIoWriter *writer = nil;
  @try {
    writer = new_JavaIoOutputStreamWriter_initWithJavaIoOutputStream_withJavaNioCharsetCharset_([self newOutputStreamWithInt:index], JreLoadStatic(APDiskLruCache, UTF_8));
    [writer writeWithNSString:value];
  }
  @finally {
    APDiskLruCache_closeQuietlyWithJavaIoCloseable_(writer);
  }
}

- (void)commit {
  if (hasErrors_) {
    APDiskLruCache_completeEditWithAPDiskLruCache_Editor_withBoolean_(this$0_, self, false);
    [this$0_ removeWithNSString:((APDiskLruCache_Entry *) nil_chk(entry__))->key_];
  }
  else {
    APDiskLruCache_completeEditWithAPDiskLruCache_Editor_withBoolean_(this$0_, self, true);
  }
  [((JavaIoWriter *) nil_chk(this$0_->journalWriter_)) flush];
}

- (void)abort {
  APDiskLruCache_completeEditWithAPDiskLruCache_Editor_withBoolean_(this$0_, self, false);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x1, 1, 2, 3, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, 2, 3, -1, -1, -1 },
    { NULL, "LJavaIoOutputStream;", 0x1, 5, 2, 3, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 3, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPDiskLruCache:withAPDiskLruCache_Entry:);
  methods[1].selector = @selector(newInputStreamWithInt:);
  methods[2].selector = @selector(getStringWithInt:);
  methods[3].selector = @selector(newOutputStreamWithInt:);
  methods[4].selector = @selector(setWithInt:withNSString:);
  methods[5].selector = @selector(commit);
  methods[6].selector = @selector(abort);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAPDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "entry__", "LAPDiskLruCache_Entry;", .constantValue.asLong = 0, 0x12, 8, -1, -1, -1 },
    { "hasErrors_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPDiskLruCache;LAPDiskLruCache_Entry;", "newInputStream", "I", "LJavaIoIOException;", "getString", "newOutputStream", "set", "ILNSString;", "entry", "LAPDiskLruCache;", "LAPDiskLruCache_Editor_FaultHidingOutputStream;" };
  static const J2ObjcClassInfo _APDiskLruCache_Editor = { "Editor", "com.applidium.shutterbug.cache", ptrTable, methods, fields, 7, 0x11, 7, 3, 9, 10, -1, -1, -1 };
  return &_APDiskLruCache_Editor;
}

@end

void APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(APDiskLruCache_Editor *self, APDiskLruCache *outer$, APDiskLruCache_Entry *entry_) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->entry__ = entry_;
}

APDiskLruCache_Editor *new_APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(APDiskLruCache *outer$, APDiskLruCache_Entry *entry_) {
  J2OBJC_NEW_IMPL(APDiskLruCache_Editor, initWithAPDiskLruCache_withAPDiskLruCache_Entry_, outer$, entry_)
}

APDiskLruCache_Editor *create_APDiskLruCache_Editor_initWithAPDiskLruCache_withAPDiskLruCache_Entry_(APDiskLruCache *outer$, APDiskLruCache_Entry *entry_) {
  J2OBJC_CREATE_IMPL(APDiskLruCache_Editor, initWithAPDiskLruCache_withAPDiskLruCache_Entry_, outer$, entry_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APDiskLruCache_Editor)

@implementation APDiskLruCache_Editor_FaultHidingOutputStream

- (instancetype)initWithAPDiskLruCache_Editor:(APDiskLruCache_Editor *)outer$
                       withJavaIoOutputStream:(JavaIoOutputStream *)outArg {
  APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(self, outer$, outArg);
  return self;
}

- (void)writeWithInt:(jint)oneByte {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithInt:oneByte];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)writeWithByteArray:(IOSByteArray *)buffer
                   withInt:(jint)offset
                   withInt:(jint)length {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) writeWithByteArray:buffer withInt:offset withInt:length];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)close {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) close];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

- (void)flush {
  @try {
    [((JavaIoOutputStream *) nil_chk(out_)) flush];
  }
  @catch (JavaIoIOException *e) {
    this$0_->hasErrors_ = true;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPDiskLruCache_Editor:withJavaIoOutputStream:);
  methods[1].selector = @selector(writeWithInt:);
  methods[2].selector = @selector(writeWithByteArray:withInt:withInt:);
  methods[3].selector = @selector(close);
  methods[4].selector = @selector(flush);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAPDiskLruCache_Editor;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPDiskLruCache_Editor;LJavaIoOutputStream;", "write", "I", "[BII", "LAPDiskLruCache_Editor;" };
  static const J2ObjcClassInfo _APDiskLruCache_Editor_FaultHidingOutputStream = { "FaultHidingOutputStream", "com.applidium.shutterbug.cache", ptrTable, methods, fields, 7, 0x2, 5, 1, 4, -1, -1, -1, -1 };
  return &_APDiskLruCache_Editor_FaultHidingOutputStream;
}

@end

void APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(APDiskLruCache_Editor_FaultHidingOutputStream *self, APDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) {
  self->this$0_ = outer$;
  JavaIoFilterOutputStream_initWithJavaIoOutputStream_(self, outArg);
}

APDiskLruCache_Editor_FaultHidingOutputStream *new_APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(APDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) {
  J2OBJC_NEW_IMPL(APDiskLruCache_Editor_FaultHidingOutputStream, initWithAPDiskLruCache_Editor_withJavaIoOutputStream_, outer$, outArg)
}

APDiskLruCache_Editor_FaultHidingOutputStream *create_APDiskLruCache_Editor_FaultHidingOutputStream_initWithAPDiskLruCache_Editor_withJavaIoOutputStream_(APDiskLruCache_Editor *outer$, JavaIoOutputStream *outArg) {
  J2OBJC_CREATE_IMPL(APDiskLruCache_Editor_FaultHidingOutputStream, initWithAPDiskLruCache_Editor_withJavaIoOutputStream_, outer$, outArg)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APDiskLruCache_Editor_FaultHidingOutputStream)

@implementation APDiskLruCache_Entry

- (instancetype)initWithAPDiskLruCache:(APDiskLruCache *)outer$
                          withNSString:(NSString *)key {
  APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(self, outer$, key);
  return self;
}

- (NSString *)getLengths {
  JavaLangStringBuilder *result = new_JavaLangStringBuilder_init();
  {
    IOSLongArray *a__ = lengths_;
    jlong const *b__ = ((IOSLongArray *) nil_chk(a__))->buffer_;
    jlong const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      jlong size = *b__++;
      (void) [((JavaLangStringBuilder *) nil_chk([result appendWithChar:' '])) appendWithLong:size];
    }
  }
  return [result description];
}

- (void)setLengthsWithNSStringArray:(IOSObjectArray *)strings {
  APDiskLruCache_Entry_setLengthsWithNSStringArray_(self, strings);
}

- (JavaIoIOException *)invalidLengthsWithNSStringArray:(IOSObjectArray *)strings {
  return APDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings);
}

- (JavaIoFile *)getCleanFileWithInt:(jint)i {
  return new_JavaIoFile_initWithJavaIoFile_withNSString_(this$0_->directory_, JreStrcat("$CI", key_, '.', i));
}

- (JavaIoFile *)getDirtyFileWithInt:(jint)i {
  return new_JavaIoFile_initWithJavaIoFile_withNSString_(this$0_->directory_, JreStrcat("$CI$", key_, '.', i, @".tmp"));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, 1, -1, -1, -1 },
    { NULL, "LJavaIoIOException;", 0x2, 4, 3, 1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaIoFile;", 0x1, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithAPDiskLruCache:withNSString:);
  methods[1].selector = @selector(getLengths);
  methods[2].selector = @selector(setLengthsWithNSStringArray:);
  methods[3].selector = @selector(invalidLengthsWithNSStringArray:);
  methods[4].selector = @selector(getCleanFileWithInt:);
  methods[5].selector = @selector(getDirtyFileWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LAPDiskLruCache;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "key_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "lengths_", "[J", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "readable_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "currentEditor_", "LAPDiskLruCache_Editor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sequenceNumber_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LAPDiskLruCache;LNSString;", "LJavaIoIOException;", "setLengths", "[LNSString;", "invalidLengths", "getCleanFile", "I", "getDirtyFile", "LAPDiskLruCache;" };
  static const J2ObjcClassInfo _APDiskLruCache_Entry = { "Entry", "com.applidium.shutterbug.cache", ptrTable, methods, fields, 7, 0x12, 6, 6, 8, -1, -1, -1, -1 };
  return &_APDiskLruCache_Entry;
}

@end

void APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(APDiskLruCache_Entry *self, APDiskLruCache *outer$, NSString *key) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->key_ = key;
  self->lengths_ = [IOSLongArray newArrayWithLength:outer$->valueCount_];
}

APDiskLruCache_Entry *new_APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(APDiskLruCache *outer$, NSString *key) {
  J2OBJC_NEW_IMPL(APDiskLruCache_Entry, initWithAPDiskLruCache_withNSString_, outer$, key)
}

APDiskLruCache_Entry *create_APDiskLruCache_Entry_initWithAPDiskLruCache_withNSString_(APDiskLruCache *outer$, NSString *key) {
  J2OBJC_CREATE_IMPL(APDiskLruCache_Entry, initWithAPDiskLruCache_withNSString_, outer$, key)
}

void APDiskLruCache_Entry_setLengthsWithNSStringArray_(APDiskLruCache_Entry *self, IOSObjectArray *strings) {
  if (((IOSObjectArray *) nil_chk(strings))->size_ != self->this$0_->valueCount_) {
    @throw nil_chk(APDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings));
  }
  @try {
    for (jint i = 0; i < strings->size_; i++) {
      *IOSLongArray_GetRef(nil_chk(self->lengths_), i) = JavaLangLong_parseLongWithNSString_(IOSObjectArray_Get(strings, i));
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw nil_chk(APDiskLruCache_Entry_invalidLengthsWithNSStringArray_(self, strings));
  }
}

JavaIoIOException *APDiskLruCache_Entry_invalidLengthsWithNSStringArray_(APDiskLruCache_Entry *self, IOSObjectArray *strings) {
  @throw new_JavaIoIOException_initWithNSString_(JreStrcat("$$", @"unexpected journal line: ", JavaUtilArrays_toStringWithNSObjectArray_(strings)));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(APDiskLruCache_Entry)
