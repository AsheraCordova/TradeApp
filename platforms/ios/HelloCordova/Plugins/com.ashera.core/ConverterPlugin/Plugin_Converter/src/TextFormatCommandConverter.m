//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\TextFormatCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "TextFormatCommandConverter.h"


@interface ASTextFormatCommandConverter () {
 @public
  NSString *textFormat_;
}

@end

J2OBJC_FIELD_SETTER(ASTextFormatCommandConverter, textFormat_, NSString *)

@implementation ASTextFormatCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASTextFormatCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (value == nil) {
    return nil;
  }
  NSString *text = (NSString *) cast_chk(value, [NSString class]);
  NSString *result = NSString_java_formatWithNSString_withNSObjectArray_(textFormat_, [IOSObjectArray arrayWithObjects:(id[]){ text } count:1 type:NSObject_class_()]);
  return result;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASTextFormatCommandConverter *textFormatCommandConverter = create_ASTextFormatCommandConverter_initWithNSString_(self->id__);
  [textFormatCommandConverter updateArgsWithNSObjectArray:args];
  return textFormatCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  JreStrongAssign(&self->textFormat_, (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]));
}

- (void)dealloc {
  RELEASE_(textFormat_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(newInstanceWithNSObjectArray:);
  methods[3].selector = @selector(updateArgsWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "textFormat_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs" };
  static const J2ObjcClassInfo _ASTextFormatCommandConverter = { "TextFormatCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ASTextFormatCommandConverter;
}

@end

void ASTextFormatCommandConverter_initWithNSString_(ASTextFormatCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASTextFormatCommandConverter *new_ASTextFormatCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASTextFormatCommandConverter, initWithNSString_, id_)
}

ASTextFormatCommandConverter *create_ASTextFormatCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASTextFormatCommandConverter, initWithNSString_, id_)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTextFormatCommandConverter)
