//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\AbstractEnumToIntConverter.java
//

#include "AbstractEnumToIntConverter.h"
#include "IFragment.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "java/lang/Integer.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


@implementation ASAbstractEnumToIntConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAbstractEnumToIntConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangInteger *)convertFromWithId:(id)value
                       withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                       withASIFragment:(id<ASIFragment>)fragment {
  id<JavaUtilMap> mapping = JreRetainedLocalValue([self getMapping]);
  if ([((id<JavaUtilMap>) nil_chk(mapping)) containsKeyWithId:value]) {
    return [mapping getWithId:value];
  }
  if ([self supportsIntAlso]) {
    return ASPluginInvoker_getIntWithId_(value);
  }
  JavaLangInteger *defaultValue = JreRetainedLocalValue([self getDefault]);
  if ([((JavaLangInteger *) nil_chk(defaultValue)) intValue] == ASAbstractEnumToIntConverter_DEFAULT_UNKNOWN) {
    return nil;
  }
  return defaultValue;
}

- (NSString *)convertToWithId:(JavaLangInteger *)value
              withASIFragment:(id<ASIFragment>)fragment {
  id<JavaUtilMap> mapping = JreRetainedLocalValue([self getMapping]);
  NSString *convertValue = nil;
  id<JavaUtilSet> keySet = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(mapping)) keySet]);
  for (NSString * __strong key in nil_chk(keySet)) {
    JavaLangInteger *mappingValue = JreRetainedLocalValue([mapping getWithId:key]);
    if ([((JavaLangInteger *) nil_chk(mappingValue)) isEqual:value]) {
      convertValue = key;
      break;
    }
  }
  if (convertValue == nil && [self supportsIntAlso]) {
    convertValue = [((JavaLangInteger *) nil_chk(value)) description];
  }
  return convertValue;
}

- (jboolean)supportsIntAlso {
  return false;
}

- (id<JavaUtilMap>)getMapping {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaLangInteger *)getDefault {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 6, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertToWithId:withASIFragment:);
  methods[3].selector = @selector(supportsIntAlso);
  methods[4].selector = @selector(getMapping);
  methods[5].selector = @selector(getDefault);
  methods[6].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_UNKNOWN", "I", .constantValue.asInt = ASAbstractEnumToIntConverter_DEFAULT_UNKNOWN, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "convertFrom", "LNSObject;LJavaUtilMap;LASIFragment;", "(Ljava/lang/Object;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Ljava/lang/Integer;", "convertTo", "LJavaLangInteger;LASIFragment;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<Ljava/lang/Integer;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASAbstractEnumToIntConverter = { "AbstractEnumToIntConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x401, 7, 1, -1, -1, -1, 7, -1 };
  return &_ASAbstractEnumToIntConverter;
}

@end

void ASAbstractEnumToIntConverter_init(ASAbstractEnumToIntConverter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAbstractEnumToIntConverter)
