//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\CLPools.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CLPools")
#ifdef RESTRICT_CLPools
#define INCLUDE_ALL_CLPools 0
#else
#define INCLUDE_ALL_CLPools 1
#endif
#undef RESTRICT_CLPools
#ifdef INCLUDE_ADXCLPools_SimplePool
#define INCLUDE_ADXCLPools_Pool 1
#endif

#if !defined (ADXCLPools_) && (INCLUDE_ALL_CLPools || defined(INCLUDE_ADXCLPools))
#define ADXCLPools_

/*!
 @brief Helper class for crating pools of objects.An example use looks like this: 
 @code

  public class MyPooledClass {
      private static final SimplePool<MyPooledClass> sPool =
              new SimplePool<MyPooledClass>(10);
      public static MyPooledClass obtain() {
          MyPooledClass instance = sPool.acquire();
          return (instance !
 = null) ? instance : new MyPooledClass();
      }
      public void recycle() {
           // Clear state if needed.
           sPool.release(this);
      }
      . . .
  } 
  
@endcode
 */
@interface ADXCLPools : NSObject

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCLPools)

J2OBJC_TYPE_LITERAL_HEADER(ADXCLPools)

@compatibility_alias AndroidxConstraintlayoutCoreCLPools ADXCLPools;

#endif

#if !defined (ADXCLPools_Pool_) && (INCLUDE_ALL_CLPools || defined(INCLUDE_ADXCLPools_Pool))
#define ADXCLPools_Pool_

@class IOSObjectArray;

/*!
 @brief Interface for managing a pool of objects.
 */
@protocol ADXCLPools_Pool < JavaObject >

/*!
 @return An instance from the pool if such, null otherwise.
 */
- (id)acquire;

/*!
 @brief Release an instance to the pool.
 @param instance The instance to release.
 @return Whether the instance was put in the pool.
 @throw IllegalStateExceptionIf the instance is already in the pool.
 */
- (jboolean)release__WithId:(id)instance;

/*!
 @brief Try releasing all instances at the same time
 @param variables the variables to release
 @param count the number of variables to release
 */
- (void)releaseAllWithNSObjectArray:(IOSObjectArray *)variables
                            withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCLPools_Pool)

J2OBJC_TYPE_LITERAL_HEADER(ADXCLPools_Pool)

#endif

#if !defined (ADXCLPools_SimplePool_) && (INCLUDE_ALL_CLPools || defined(INCLUDE_ADXCLPools_SimplePool))
#define ADXCLPools_SimplePool_

@class IOSObjectArray;

/*!
 @brief Simple (non-synchronized) pool of objects.
 */
@interface ADXCLPools_SimplePool : NSObject < ADXCLPools_Pool >

#pragma mark Public

- (id)acquire;

- (jboolean)release__WithId:(id)instance;

- (void)releaseAllWithNSObjectArray:(IOSObjectArray *)variables
                            withInt:(jint)count;

#pragma mark Package-Private

/*!
 @brief Creates a new instance.
 @param maxPoolSize The max pool size.
 @throw IllegalArgumentExceptionIf the max pool size is less than zero.
 */
- (instancetype)initWithInt:(jint)maxPoolSize;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCLPools_SimplePool)

FOUNDATION_EXPORT void ADXCLPools_SimplePool_initWithInt_(ADXCLPools_SimplePool *self, jint maxPoolSize);

FOUNDATION_EXPORT ADXCLPools_SimplePool *new_ADXCLPools_SimplePool_initWithInt_(jint maxPoolSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXCLPools_SimplePool *create_ADXCLPools_SimplePool_initWithInt_(jint maxPoolSize);

J2OBJC_TYPE_LITERAL_HEADER(ADXCLPools_SimplePool)

#endif

#pragma pop_macro("INCLUDE_ALL_CLPools")
