//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\widget\Barrier.java
//

#include "Barrier.h"
#include "ConstraintHelper.h"
#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "Context.h"
#include "CoreBarrier.h"
#include "Helper.h"
#include "HelperWidget.h"
#include "J2ObjC_source.h"
#include "SparseArray.h"
#include "View.h"

static void (*ADXBarrier_super$_setVisibilityWithInt_)(id, SEL, jint);


@interface ADXBarrier () {
 @public
  jint mIndicatedType_;
  jint mResolvedType_;
  ADXCoreBarrier *mBarrier_;
}

- (void)updateTypeWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                  withInt:(jint)type
                              withBoolean:(jboolean)isRtl;

@end

J2OBJC_FIELD_SETTER(ADXBarrier, mBarrier_, ADXCoreBarrier *)

__attribute__((unused)) static void ADXBarrier_updateTypeWithADXConstraintWidget_withInt_withBoolean_(ADXBarrier *self, ADXConstraintWidget *widget, jint type, jboolean isRtl);

J2OBJC_INITIALIZED_DEFN(ADXBarrier)

@implementation ADXBarrier

- (jint)getType {
  return mIndicatedType_;
}

- (void)setTypeWithInt:(jint)type {
  mIndicatedType_ = type;
}

- (void)updateTypeWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                  withInt:(jint)type
                              withBoolean:(jboolean)isRtl {
  ADXBarrier_updateTypeWithADXConstraintWidget_withInt_withBoolean_(self, widget, type, isRtl);
}

- (void)resolveRtlWithADXConstraintWidget:(ADXConstraintWidget *)widget
                              withBoolean:(jboolean)isRtl {
  ADXBarrier_updateTypeWithADXConstraintWidget_withInt_withBoolean_(self, widget, mIndicatedType_, isRtl);
}

- (void)setAllowsGoneWidgetWithBoolean:(jboolean)supportGone {
  [((ADXCoreBarrier *) nil_chk(mBarrier_)) setAllowsGoneWidgetWithBoolean:supportGone];
}

- (jboolean)allowsGoneWidget {
  return [((ADXCoreBarrier *) nil_chk(mBarrier_)) getAllowsGoneWidget];
}

- (jboolean)getAllowsGoneWidget {
  return [((ADXCoreBarrier *) nil_chk(mBarrier_)) getAllowsGoneWidget];
}

- (jint)getMargin {
  return [((ADXCoreBarrier *) nil_chk(mBarrier_)) getMargin];
}

- (void)setMarginWithInt:(jint)margin {
  [((ADXCoreBarrier *) nil_chk(mBarrier_)) setMarginWithInt:margin];
}

- (void)loadParametersWithADXConstraintSet_Constraint:(ADXConstraintSet_Constraint *)constraint
                                  withADXHelperWidget:(ADXHelperWidget *)child
                 withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                    withADSparseArray:(ADSparseArray *)mapIdToWidget {
  [super loadParametersWithADXConstraintSet_Constraint:constraint withADXHelperWidget:child withADXConstraintLayout_LayoutParams:layoutParams withADSparseArray:mapIdToWidget];
  if ([child isKindOfClass:[ADXCoreBarrier class]]) {
    ADXCoreBarrier *barrier = (ADXCoreBarrier *) child;
    ADXConstraintWidgetContainer *container = (ADXConstraintWidgetContainer *) cast_chk([((ADXHelperWidget *) nil_chk(child)) getParent], [ADXConstraintWidgetContainer class]);
    jboolean isRtl = [((ADXConstraintWidgetContainer *) nil_chk(container)) isRtl];
    ADXBarrier_updateTypeWithADXConstraintWidget_withInt_withBoolean_(self, barrier, ((ADXConstraintSet_Layout *) nil_chk(((ADXConstraintSet_Constraint *) nil_chk(constraint))->layout_))->mBarrierDirection_, isRtl);
    [((ADXCoreBarrier *) nil_chk(barrier)) setAllowsGoneWidgetWithBoolean:constraint->layout_->mBarrierAllowsGoneWidgets_];
    [barrier setMarginWithInt:constraint->layout_->mBarrierMargin_];
  }
}

- (instancetype)initWithADContext:(ADContext *)context {
  ADXBarrier_initWithADContext_(self, context);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXBarrier_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mBarrier_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, 11, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getType);
  methods[1].selector = @selector(setTypeWithInt:);
  methods[2].selector = @selector(updateTypeWithADXConstraintWidget:withInt:withBoolean:);
  methods[3].selector = @selector(resolveRtlWithADXConstraintWidget:withBoolean:);
  methods[4].selector = @selector(setAllowsGoneWidgetWithBoolean:);
  methods[5].selector = @selector(allowsGoneWidget);
  methods[6].selector = @selector(getAllowsGoneWidget);
  methods[7].selector = @selector(getMargin);
  methods[8].selector = @selector(setMarginWithInt:);
  methods[9].selector = @selector(loadParametersWithADXConstraintSet_Constraint:withADXHelperWidget:withADXConstraintLayout_LayoutParams:withADSparseArray:);
  methods[10].selector = @selector(initWithADContext:);
  methods[11].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LEFT", "I", .constantValue.asInt = ADXBarrier_LEFT, 0x19, -1, -1, -1, -1 },
    { "TOP", "I", .constantValue.asInt = ADXBarrier_TOP, 0x19, -1, -1, -1, -1 },
    { "RIGHT", "I", .constantValue.asInt = ADXBarrier_RIGHT, 0x19, -1, -1, -1, -1 },
    { "BOTTOM", "I", .constantValue.asInt = ADXBarrier_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "START", "I", .constantValue.asInt = ADXBarrier_START, 0x19, -1, -1, -1, -1 },
    { "END", "I", .constantValue.asInt = ADXBarrier_END, 0x19, -1, -1, -1, -1 },
    { "mIndicatedType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mResolvedType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBarrier_", "LADXCoreBarrier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setType", "I", "updateType", "LADXConstraintWidget;IZ", "resolveRtl", "LADXConstraintWidget;Z", "setAllowsGoneWidget", "Z", "setMargin", "loadParameters", "LADXConstraintSet_Constraint;LADXHelperWidget;LADXConstraintLayout_LayoutParams;LADSparseArray;", "(Landroidx/constraintlayout/widget/ConstraintSet$Constraint;Landroidx/constraintlayout/core/widgets/HelperWidget;Landroidx/constraintlayout/widget/ConstraintLayout$LayoutParams;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "LADContext;" };
  static const J2ObjcClassInfo _ADXBarrier = { "Barrier", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x1, 12, 9, -1, -1, -1, -1, -1 };
  return &_ADXBarrier;
}

+ (void)initialize {
  if (self == [ADXBarrier class]) {
    ADXBarrier_super$_setVisibilityWithInt_ = (void (*)(id, SEL, jint))[ADXConstraintHelper instanceMethodForSelector:@selector(setVisibilityWithInt:)];
    J2OBJC_SET_INITIALIZED(ADXBarrier)
  }
}

@end

void ADXBarrier_updateTypeWithADXConstraintWidget_withInt_withBoolean_(ADXBarrier *self, ADXConstraintWidget *widget, jint type, jboolean isRtl) {
  self->mResolvedType_ = type;
  {
    if (isRtl) {
      if (self->mIndicatedType_ == ADXBarrier_START) {
        self->mResolvedType_ = ADXBarrier_RIGHT;
      }
      else if (self->mIndicatedType_ == ADXBarrier_END) {
        self->mResolvedType_ = ADXBarrier_LEFT;
      }
    }
    else {
      if (self->mIndicatedType_ == ADXBarrier_START) {
        self->mResolvedType_ = ADXBarrier_LEFT;
      }
      else if (self->mIndicatedType_ == ADXBarrier_END) {
        self->mResolvedType_ = ADXBarrier_RIGHT;
      }
    }
  }
  if ([widget isKindOfClass:[ADXCoreBarrier class]]) {
    ADXCoreBarrier *barrier = (ADXCoreBarrier *) widget;
    [((ADXCoreBarrier *) nil_chk(barrier)) setBarrierTypeWithInt:self->mResolvedType_];
  }
}

void ADXBarrier_initWithADContext_(ADXBarrier *self, ADContext *context) {
  ADXConstraintHelper_init(self);
  ADXBarrier_super$_setVisibilityWithInt_(self, @selector(setVisibilityWithInt:), ADView_GONE);
  JreStrongAssignAndConsume(&self->mBarrier_, new_ADXCoreBarrier_init());
  JreStrongAssign(&self->mHelperWidget_, self->mBarrier_);
  [self validateParams];
}

ADXBarrier *new_ADXBarrier_initWithADContext_(ADContext *context) {
  J2OBJC_NEW_IMPL(ADXBarrier, initWithADContext_, context)
}

ADXBarrier *create_ADXBarrier_initWithADContext_(ADContext *context) {
  J2OBJC_CREATE_IMPL(ADXBarrier, initWithADContext_, context)
}

void ADXBarrier_init(ADXBarrier *self) {
  ADXConstraintHelper_init(self);
  ADXBarrier_super$_setVisibilityWithInt_(self, @selector(setVisibilityWithInt:), ADView_GONE);
  JreStrongAssignAndConsume(&self->mBarrier_, new_ADXCoreBarrier_init());
  JreStrongAssign(&self->mHelperWidget_, self->mBarrier_);
  [self validateParams];
}

ADXBarrier *new_ADXBarrier_init() {
  J2OBJC_NEW_IMPL(ADXBarrier, init)
}

ADXBarrier *create_ADXBarrier_init() {
  J2OBJC_CREATE_IMPL(ADXBarrier, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBarrier)
