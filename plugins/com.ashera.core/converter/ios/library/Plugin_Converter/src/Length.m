//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\Length.java
//

#include "BaseValidator.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "Length.h"
#include "ResourceBundleUtils.h"
#include "Validation.h"
#include "java/lang/Integer.h"


@interface ASLength () {
 @public
  jint mMinLength_;
  jint mMaxLength_;
}

- (instancetype)initWithInt:(jint)minLength
                    withInt:(jint)maxLength;

@end

__attribute__((unused)) static void ASLength_initWithInt_withInt_(ASLength *self, jint minLength, jint maxLength);

__attribute__((unused)) static ASLength *new_ASLength_initWithInt_withInt_(jint minLength, jint maxLength) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASLength *create_ASLength_initWithInt_withInt_(jint minLength, jint maxLength);

@implementation ASLength

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASLength_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  if (((IOSObjectArray *) nil_chk(argument))->size_ == 2) {
    return create_ASLength_initWithInt_withInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(argument, 0)), JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(argument, 1)));
  }
  if (argument->size_ == 1) {
    return create_ASLength_initWithInt_withInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(argument, 0)), -1);
  }
  return create_ASLength_initWithInt_withInt_(0, 0);
}

- (instancetype)initWithInt:(jint)minLength
                    withInt:(jint)maxLength {
  ASLength_initWithInt_withInt_(self, minLength, maxLength);
  return self;
}

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  if (mMinLength_ != -1 && mMaxLength_ != -1) {
    NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/length_between_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
    return NSString_java_formatWithNSString_withNSObjectArray_(res, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mMinLength_), JavaLangInteger_valueOfWithInt_(mMaxLength_) } count:2 type:NSObject_class_()]);
  }
  else if (mMinLength_ == -1 && mMaxLength_ != -1) {
    NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/length_atmost_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
    return NSString_java_formatWithNSString_withNSObjectArray_(res, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mMaxLength_) } count:1 type:NSObject_class_()]);
  }
  NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/length_atleast_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
  return NSString_java_formatWithNSString_withNSObjectArray_(res, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mMinLength_) } count:1 type:NSObject_class_()]);
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil) {
    return false;
  }
  if (mMinLength_ > 0 && mMaxLength_ > 0) {
    return [text java_length] >= mMinLength_ && [text java_length] <= mMaxLength_;
  }
  if (mMinLength_ > 0 && mMaxLength_ < 0) {
    return [text java_length] >= mMinLength_;
  }
  return [text java_length] <= mMaxLength_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstanceWithNSStringArray:);
  methods[2].selector = @selector(initWithInt:withInt:);
  methods[3].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[4].selector = @selector(isValidWithNSString:withASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMinLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMaxLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "II", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;" };
  static const J2ObjcClassInfo _ASLength = { "Length", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ASLength;
}

@end

void ASLength_init(ASLength *self) {
  ASBaseValidator_init(self);
  self->mMinLength_ = 0;
  self->mMaxLength_ = 0;
}

ASLength *new_ASLength_init() {
  J2OBJC_NEW_IMPL(ASLength, init)
}

ASLength *create_ASLength_init() {
  J2OBJC_CREATE_IMPL(ASLength, init)
}

void ASLength_initWithInt_withInt_(ASLength *self, jint minLength, jint maxLength) {
  ASBaseValidator_init(self);
  self->mMinLength_ = minLength;
  self->mMaxLength_ = maxLength;
}

ASLength *new_ASLength_initWithInt_withInt_(jint minLength, jint maxLength) {
  J2OBJC_NEW_IMPL(ASLength, initWithInt_withInt_, minLength, maxLength)
}

ASLength *create_ASLength_initWithInt_withInt_(jint minLength, jint maxLength) {
  J2OBJC_CREATE_IMPL(ASLength, initWithInt_withInt_, minLength, maxLength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASLength)
