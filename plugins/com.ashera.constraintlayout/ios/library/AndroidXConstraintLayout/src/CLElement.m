//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLElement.java
//

#include "CLContainer.h"
#include "CLElement.h"
#include "CLNumber.h"
#include "CLParser.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/Long.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"


@interface ADXCLElement () {
 @public
  IOSCharArray *mContent_;
  jint line_;
}

@end

J2OBJC_FIELD_SETTER(ADXCLElement, mContent_, IOSCharArray *)

jint ADXCLElement_MAX_LINE = 80;
jint ADXCLElement_BASE_INDENT = 2;

@implementation ADXCLElement

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLElement_initWithCharArray_(self, content);
  return self;
}

- (jboolean)notStarted {
  return start_ == -1;
}

- (void)setLineWithInt:(jint)line {
  self->line_ = line;
}

- (jint)getLine {
  return line_;
}

- (void)setStartWithLong:(jlong)start {
  self->start_ = start;
}

- (jlong)getStart {
  return self->start_;
}

- (jlong)getEnd {
  return self->end_;
}

- (void)setEndWithLong:(jlong)end {
  if (self->end_ != JavaLangLong_MAX_VALUE) {
    return;
  }
  self->end_ = end;
  if (JreLoadStatic(ADXCLParser, DEBUG)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I$@", @"closing ", ((jint) [self hash]), @" -> ", self)];
  }
  if (mContainer_ != nil) {
    [mContainer_ addWithADXCLElement:self];
  }
}

- (void)addIndentWithJavaLangStringBuilder:(JavaLangStringBuilder *)builder
                                   withInt:(jint)indent {
  for (jint i = 0; i < indent; i++) {
    [((JavaLangStringBuilder *) nil_chk(builder)) appendWithChar:' '];
  }
}

- (NSString *)description {
  if (start_ > end_ || end_ == JavaLangLong_MAX_VALUE) {
    return JreStrcat("@$JCJC", [self java_getClass], @" (INVALID, ", start_, '-', end_, ')');
  }
  NSString *content = [NSString java_stringWithCharacters:mContent_];
  content = [content java_substring:(jint) start_ endIndex:(jint) end_ + 1];
  return JreStrcat("$$J$J$$$", [self getStrClass], @" (", start_, @" : ", end_, @") <<", content, @">>");
}

- (NSString *)getStrClass {
  NSString *myClass = [[self java_getClass] description];
  return [((NSString *) nil_chk(myClass)) java_substring:[myClass java_lastIndexOf:'.'] + 1];
}

- (NSString *)getDebugName {
  if (JreLoadStatic(ADXCLParser, DEBUG)) {
    return JreStrcat("$$", [self getStrClass], @" -> ");
  }
  return @"";
}

- (NSString *)content {
  NSString *content = [NSString java_stringWithCharacters:mContent_];
  if (end_ == JavaLangLong_MAX_VALUE || end_ < start_) {
    return [content java_substring:(jint) start_ endIndex:(jint) start_ + 1];
  }
  return [content java_substring:(jint) start_ endIndex:(jint) end_ + 1];
}

- (jboolean)isDone {
  return end_ != JavaLangLong_MAX_VALUE;
}

- (void)setContainerWithADXCLContainer:(ADXCLContainer *)element {
  JreStrongAssign(&mContainer_, element);
}

- (ADXCLElement *)getContainer {
  return mContainer_;
}

- (jboolean)isStarted {
  return start_ > -1;
}

- (NSString *)toJSON {
  return @"";
}

- (NSString *)toFormattedJSONWithInt:(jint)indent
                             withInt:(jint)forceIndent {
  return @"";
}

- (jint)getInt {
  if ([self isKindOfClass:[ADXCLNumber class]]) {
    return [((ADXCLNumber *) cast_chk(self, [ADXCLNumber class])) getInt];
  }
  return 0;
}

- (jfloat)getFloat {
  if ([self isKindOfClass:[ADXCLNumber class]]) {
    return [((ADXCLNumber *) cast_chk(self, [ADXCLNumber class])) getFloat];
  }
  return JavaLangFloat_NaN;
}

- (void)dealloc {
  RELEASE_(mContent_);
  RELEASE_(mContainer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x4, 11, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(notStarted);
  methods[2].selector = @selector(setLineWithInt:);
  methods[3].selector = @selector(getLine);
  methods[4].selector = @selector(setStartWithLong:);
  methods[5].selector = @selector(getStart);
  methods[6].selector = @selector(getEnd);
  methods[7].selector = @selector(setEndWithLong:);
  methods[8].selector = @selector(addIndentWithJavaLangStringBuilder:withInt:);
  methods[9].selector = @selector(description);
  methods[10].selector = @selector(getStrClass);
  methods[11].selector = @selector(getDebugName);
  methods[12].selector = @selector(content);
  methods[13].selector = @selector(isDone);
  methods[14].selector = @selector(setContainerWithADXCLContainer:);
  methods[15].selector = @selector(getContainer);
  methods[16].selector = @selector(isStarted);
  methods[17].selector = @selector(toJSON);
  methods[18].selector = @selector(toFormattedJSONWithInt:withInt:);
  methods[19].selector = @selector(getInt);
  methods[20].selector = @selector(getFloat);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mContent_", "[C", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "start_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "end_", "J", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mContainer_", "LADXCLContainer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "line_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "MAX_LINE", "I", .constantValue.asLong = 0, 0xc, -1, 13, -1, -1 },
    { "BASE_INDENT", "I", .constantValue.asLong = 0, 0xc, -1, 14, -1, -1 },
  };
  static const void *ptrTable[] = { "[C", "setLine", "I", "setStart", "J", "setEnd", "addIndent", "LJavaLangStringBuilder;I", "toString", "setContainer", "LADXCLContainer;", "toFormattedJSON", "II", &ADXCLElement_MAX_LINE, &ADXCLElement_BASE_INDENT };
  static const J2ObjcClassInfo _ADXCLElement = { "CLElement", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x1, 21, 7, -1, -1, -1, -1, -1 };
  return &_ADXCLElement;
}

@end

void ADXCLElement_initWithCharArray_(ADXCLElement *self, IOSCharArray *content) {
  NSObject_init(self);
  self->start_ = -1;
  self->end_ = JavaLangLong_MAX_VALUE;
  JreStrongAssign(&self->mContent_, content);
}

ADXCLElement *new_ADXCLElement_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLElement, initWithCharArray_, content)
}

ADXCLElement *create_ADXCLElement_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLElement, initWithCharArray_, content)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLElement)
