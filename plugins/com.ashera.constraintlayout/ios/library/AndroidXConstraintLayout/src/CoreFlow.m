//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\CoreFlow.java
//

#include "BasicMeasure.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "CoreFlow.h"
#include "CoreVirtualLayout.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"

@class JavaUtilArrayList;


@interface ADXCoreFlow () {
 @public
  jint mHorizontalStyle_;
  jint mVerticalStyle_;
  jint mFirstHorizontalStyle_;
  jint mFirstVerticalStyle_;
  jint mLastHorizontalStyle_;
  jint mLastVerticalStyle_;
  jfloat mHorizontalBias_;
  jfloat mVerticalBias_;
  jfloat mFirstHorizontalBias_;
  jfloat mFirstVerticalBias_;
  jfloat mLastHorizontalBias_;
  jfloat mLastVerticalBias_;
  jint mHorizontalGap_;
  jint mVerticalGap_;
  jint mHorizontalAlign_;
  jint mVerticalAlign_;
  jint mWrapMode_;
  jint mMaxElementsWrap_;
  jint mOrientation_;
  JavaUtilArrayList *mChainList_;
  IOSObjectArray *mAlignedBiggestElementsInRows_;
  IOSObjectArray *mAlignedBiggestElementsInCols_;
  IOSIntArray *mAlignedDimensions_;
  IOSObjectArray *mDisplayedWidgets_;
  jint mDisplayedWidgetsCount_;
}

- (jint)getWidgetWidthWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                      withInt:(jint)max;

- (jint)getWidgetHeightWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                       withInt:(jint)max;

/*!
 @brief Measure the virtual layout using a list of chains for the children
 @param widgets list of widgets
 @param count
 @param orientation the layout orientation (horizontal or vertical)
 @param max the maximum available space
 @param measured output parameters -- will contain the resulting measure
 */
- (void)measureChainWrapWithADXConstraintWidgetArray:(IOSObjectArray *)widgets
                                             withInt:(jint)count
                                             withInt:(jint)orientation
                                             withInt:(jint)max
                                        withIntArray:(IOSIntArray *)measured;

/*!
 @brief Measure the virtual layout using a single chain for the children
 @param widgets list of widgets
 @param count
 @param orientation the layout orientation (horizontal or vertical)
 @param max the maximum available space
 @param measured output parameters -- will contain the resulting measure
 */
- (void)measureNoWrapWithADXConstraintWidgetArray:(IOSObjectArray *)widgets
                                          withInt:(jint)count
                                          withInt:(jint)orientation
                                          withInt:(jint)max
                                     withIntArray:(IOSIntArray *)measured;

/*!
 @brief Measure the virtual layout arranging the children in a regular grid
 @param widgets list of widgets
 @param orientation the layout orientation (horizontal or vertical)
 @param max the maximum available space
 @param measured output parameters -- will contain the resulting measure
 */
- (void)measureAlignedWithADXConstraintWidgetArray:(IOSObjectArray *)widgets
                                           withInt:(jint)count
                                           withInt:(jint)orientation
                                           withInt:(jint)max
                                      withIntArray:(IOSIntArray *)measured;

- (void)createAlignedConstraintsWithBoolean:(jboolean)isInRtl;

@end

J2OBJC_FIELD_SETTER(ADXCoreFlow, mChainList_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXCoreFlow, mAlignedBiggestElementsInRows_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXCoreFlow, mAlignedBiggestElementsInCols_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXCoreFlow, mAlignedDimensions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXCoreFlow, mDisplayedWidgets_, IOSObjectArray *)

__attribute__((unused)) static jint ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(ADXCoreFlow *self, ADXConstraintWidget *widget, jint max);

__attribute__((unused)) static jint ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(ADXCoreFlow *self, ADXConstraintWidget *widget, jint max);

__attribute__((unused)) static void ADXCoreFlow_measureChainWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(ADXCoreFlow *self, IOSObjectArray *widgets, jint count, jint orientation, jint max, IOSIntArray *measured);

__attribute__((unused)) static void ADXCoreFlow_measureNoWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(ADXCoreFlow *self, IOSObjectArray *widgets, jint count, jint orientation, jint max, IOSIntArray *measured);

__attribute__((unused)) static void ADXCoreFlow_measureAlignedWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(ADXCoreFlow *self, IOSObjectArray *widgets, jint count, jint orientation, jint max, IOSIntArray *measured);

__attribute__((unused)) static void ADXCoreFlow_createAlignedConstraintsWithBoolean_(ADXCoreFlow *self, jboolean isInRtl);

@interface ADXCoreFlow_WidgetsList : NSObject {
 @public
  __unsafe_unretained ADXCoreFlow *this$0_;
  jint mOrientation_;
  ADXConstraintWidget *biggest_;
  jint biggestDimension_;
  ADXConstraintAnchor *mLeft_;
  ADXConstraintAnchor *mTop_;
  ADXConstraintAnchor *mRight_;
  ADXConstraintAnchor *mBottom_;
  jint mPaddingLeft_;
  jint mPaddingTop_;
  jint mPaddingRight_;
  jint mPaddingBottom_;
  jint mWidth_;
  jint mHeight_;
  jint mStartIndex_;
  jint mCount_;
  jint mNbMatchConstraintsWidgets_;
  jint mMax_;
}

- (instancetype)initWithADXCoreFlow:(ADXCoreFlow *)outer$
                            withInt:(jint)orientation
            withADXConstraintAnchor:(ADXConstraintAnchor *)left
            withADXConstraintAnchor:(ADXConstraintAnchor *)top
            withADXConstraintAnchor:(ADXConstraintAnchor *)right
            withADXConstraintAnchor:(ADXConstraintAnchor *)bottom
                            withInt:(jint)max;

- (void)setupWithInt:(jint)orientation
withADXConstraintAnchor:(ADXConstraintAnchor *)left
withADXConstraintAnchor:(ADXConstraintAnchor *)top
withADXConstraintAnchor:(ADXConstraintAnchor *)right
withADXConstraintAnchor:(ADXConstraintAnchor *)bottom
             withInt:(jint)paddingLeft
             withInt:(jint)paddingTop
             withInt:(jint)paddingRight
             withInt:(jint)paddingBottom
             withInt:(jint)max;

- (void)clear;

- (void)setStartIndexWithInt:(jint)value;

- (jint)getWidth;

- (jint)getHeight;

- (void)addWithADXConstraintWidget:(ADXConstraintWidget *)widget;

- (void)createConstraintsWithBoolean:(jboolean)isInRtl
                             withInt:(jint)chainIndex
                         withBoolean:(jboolean)isLastChain;

- (void)measureMatchConstraintsWithInt:(jint)availableSpace;

- (void)recomputeDimensions;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCoreFlow_WidgetsList)

J2OBJC_FIELD_SETTER(ADXCoreFlow_WidgetsList, biggest_, ADXConstraintWidget *)
J2OBJC_FIELD_SETTER(ADXCoreFlow_WidgetsList, mLeft_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXCoreFlow_WidgetsList, mTop_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXCoreFlow_WidgetsList, mRight_, ADXConstraintAnchor *)
J2OBJC_FIELD_SETTER(ADXCoreFlow_WidgetsList, mBottom_, ADXConstraintAnchor *)

__attribute__((unused)) static void ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(ADXCoreFlow_WidgetsList *self, ADXCoreFlow *outer$, jint orientation, ADXConstraintAnchor *left, ADXConstraintAnchor *top, ADXConstraintAnchor *right, ADXConstraintAnchor *bottom, jint max);

__attribute__((unused)) static ADXCoreFlow_WidgetsList *new_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(ADXCoreFlow *outer$, jint orientation, ADXConstraintAnchor *left, ADXConstraintAnchor *top, ADXConstraintAnchor *right, ADXConstraintAnchor *bottom, jint max) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXCoreFlow_WidgetsList *create_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(ADXCoreFlow *outer$, jint orientation, ADXConstraintAnchor *left, ADXConstraintAnchor *top, ADXConstraintAnchor *right, ADXConstraintAnchor *bottom, jint max);

__attribute__((unused)) static void ADXCoreFlow_WidgetsList_recomputeDimensions(ADXCoreFlow_WidgetsList *self);

J2OBJC_TYPE_LITERAL_HEADER(ADXCoreFlow_WidgetsList)

@implementation ADXCoreFlow

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCoreFlow_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copy__WithADXConstraintWidget:(ADXConstraintWidget *)src
                  withJavaUtilHashMap:(JavaUtilHashMap *)map {
  [super copy__WithADXConstraintWidget:src withJavaUtilHashMap:map];
  ADXCoreFlow *srcFLow = (ADXCoreFlow *) cast_chk(src, [ADXCoreFlow class]);
  mHorizontalStyle_ = ((ADXCoreFlow *) nil_chk(srcFLow))->mHorizontalStyle_;
  mVerticalStyle_ = srcFLow->mVerticalStyle_;
  mFirstHorizontalStyle_ = srcFLow->mFirstHorizontalStyle_;
  mFirstVerticalStyle_ = srcFLow->mFirstVerticalStyle_;
  mLastHorizontalStyle_ = srcFLow->mLastHorizontalStyle_;
  mLastVerticalStyle_ = srcFLow->mLastVerticalStyle_;
  mHorizontalBias_ = srcFLow->mHorizontalBias_;
  mVerticalBias_ = srcFLow->mVerticalBias_;
  mFirstHorizontalBias_ = srcFLow->mFirstHorizontalBias_;
  mFirstVerticalBias_ = srcFLow->mFirstVerticalBias_;
  mLastHorizontalBias_ = srcFLow->mLastHorizontalBias_;
  mLastVerticalBias_ = srcFLow->mLastVerticalBias_;
  mHorizontalGap_ = srcFLow->mHorizontalGap_;
  mVerticalGap_ = srcFLow->mVerticalGap_;
  mHorizontalAlign_ = srcFLow->mHorizontalAlign_;
  mVerticalAlign_ = srcFLow->mVerticalAlign_;
  mWrapMode_ = srcFLow->mWrapMode_;
  mMaxElementsWrap_ = srcFLow->mMaxElementsWrap_;
  mOrientation_ = srcFLow->mOrientation_;
}

- (void)setOrientationWithInt:(jint)value {
  mOrientation_ = value;
}

- (void)setFirstHorizontalStyleWithInt:(jint)value {
  mFirstHorizontalStyle_ = value;
}

- (void)setFirstVerticalStyleWithInt:(jint)value {
  mFirstVerticalStyle_ = value;
}

- (void)setLastHorizontalStyleWithInt:(jint)value {
  mLastHorizontalStyle_ = value;
}

- (void)setLastVerticalStyleWithInt:(jint)value {
  mLastVerticalStyle_ = value;
}

- (void)setHorizontalStyleWithInt:(jint)value {
  mHorizontalStyle_ = value;
}

- (void)setVerticalStyleWithInt:(jint)value {
  mVerticalStyle_ = value;
}

- (void)setHorizontalBiasWithFloat:(jfloat)value {
  mHorizontalBias_ = value;
}

- (void)setVerticalBiasWithFloat:(jfloat)value {
  mVerticalBias_ = value;
}

- (void)setFirstHorizontalBiasWithFloat:(jfloat)value {
  mFirstHorizontalBias_ = value;
}

- (void)setFirstVerticalBiasWithFloat:(jfloat)value {
  mFirstVerticalBias_ = value;
}

- (void)setLastHorizontalBiasWithFloat:(jfloat)value {
  mLastHorizontalBias_ = value;
}

- (void)setLastVerticalBiasWithFloat:(jfloat)value {
  mLastVerticalBias_ = value;
}

- (void)setHorizontalAlignWithInt:(jint)value {
  mHorizontalAlign_ = value;
}

- (void)setVerticalAlignWithInt:(jint)value {
  mVerticalAlign_ = value;
}

- (void)setWrapModeWithInt:(jint)value {
  mWrapMode_ = value;
}

- (void)setHorizontalGapWithInt:(jint)value {
  mHorizontalGap_ = value;
}

- (void)setVerticalGapWithInt:(jint)value {
  mVerticalGap_ = value;
}

- (void)setMaxElementsWrapWithInt:(jint)value {
  mMaxElementsWrap_ = value;
}

- (jint)getWidgetWidthWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                      withInt:(jint)max {
  return ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(self, widget, max);
}

- (jint)getWidgetHeightWithADXConstraintWidget:(ADXConstraintWidget *)widget
                                       withInt:(jint)max {
  return ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self, widget, max);
}

- (void)measureWithInt:(jint)widthMode
               withInt:(jint)widthSize
               withInt:(jint)heightMode
               withInt:(jint)heightSize {
  if (mWidgetsCount_ > 0 && ![self measureChildren]) {
    [self setMeasureWithInt:0 withInt:0];
    [self needsCallbackFromSolverWithBoolean:false];
    return;
  }
  jint width = 0;
  jint height = 0;
  jint paddingLeft = [self getPaddingLeft];
  jint paddingRight = [self getPaddingRight];
  jint paddingTop = [self getPaddingTop];
  jint paddingBottom = [self getPaddingBottom];
  IOSIntArray *measured = [IOSIntArray arrayWithLength:2];
  jint max = widthSize - paddingLeft - paddingRight;
  if (mOrientation_ == ADXConstraintWidget_VERTICAL) {
    max = heightSize - paddingTop - paddingBottom;
  }
  if (mOrientation_ == ADXConstraintWidget_HORIZONTAL) {
    if (mHorizontalStyle_ == ADXConstraintWidget_UNKNOWN) {
      mHorizontalStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
    }
    if (mVerticalStyle_ == ADXConstraintWidget_UNKNOWN) {
      mVerticalStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
    }
  }
  else {
    if (mHorizontalStyle_ == ADXConstraintWidget_UNKNOWN) {
      mHorizontalStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
    }
    if (mVerticalStyle_ == ADXConstraintWidget_UNKNOWN) {
      mVerticalStyle_ = ADXConstraintWidget_CHAIN_SPREAD;
    }
  }
  IOSObjectArray *widgets = mWidgets_;
  jint gone = 0;
  for (jint i = 0; i < mWidgetsCount_; i++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(mWidgets_), i);
    if ([((ADXConstraintWidget *) nil_chk(widget)) getVisibility] == ADXConstraintWidget_GONE) {
      gone++;
    }
  }
  jint count = mWidgetsCount_;
  if (gone > 0) {
    widgets = [IOSObjectArray arrayWithLength:mWidgetsCount_ - gone type:ADXConstraintWidget_class_()];
    jint j = 0;
    for (jint i = 0; i < mWidgetsCount_; i++) {
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(mWidgets_), i);
      if ([((ADXConstraintWidget *) nil_chk(widget)) getVisibility] != ADXConstraintWidget_GONE) {
        IOSObjectArray_Set(widgets, j, widget);
        j++;
      }
    }
    count = j;
  }
  JreStrongAssign(&mDisplayedWidgets_, widgets);
  mDisplayedWidgetsCount_ = count;
  switch (mWrapMode_) {
    case ADXCoreFlow_WRAP_ALIGNED:
    {
      ADXCoreFlow_measureAlignedWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(self, widgets, count, mOrientation_, max, measured);
    }
    break;
    case ADXCoreFlow_WRAP_CHAIN:
    {
      ADXCoreFlow_measureChainWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(self, widgets, count, mOrientation_, max, measured);
    }
    break;
    case ADXCoreFlow_WRAP_NONE:
    {
      ADXCoreFlow_measureNoWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(self, widgets, count, mOrientation_, max, measured);
    }
    break;
  }
  width = IOSIntArray_Get(measured, ADXConstraintWidget_HORIZONTAL) + paddingLeft + paddingRight;
  height = IOSIntArray_Get(measured, ADXConstraintWidget_VERTICAL) + paddingTop + paddingBottom;
  jint measuredWidth = 0;
  jint measuredHeight = 0;
  if (widthMode == ADXBasicMeasure_EXACTLY) {
    measuredWidth = widthSize;
  }
  else if (widthMode == ADXBasicMeasure_AT_MOST) {
    measuredWidth = JavaLangMath_minWithInt_withInt_(width, widthSize);
  }
  else if (widthMode == ADXBasicMeasure_UNSPECIFIED) {
    measuredWidth = width;
  }
  if (heightMode == ADXBasicMeasure_EXACTLY) {
    measuredHeight = heightSize;
  }
  else if (heightMode == ADXBasicMeasure_AT_MOST) {
    measuredHeight = JavaLangMath_minWithInt_withInt_(height, heightSize);
  }
  else if (heightMode == ADXBasicMeasure_UNSPECIFIED) {
    measuredHeight = height;
  }
  [self setMeasureWithInt:measuredWidth withInt:measuredHeight];
  [self setWidthWithInt:measuredWidth];
  [self setHeightWithInt:measuredHeight];
  [self needsCallbackFromSolverWithBoolean:mWidgetsCount_ > 0];
}

- (void)measureChainWrapWithADXConstraintWidgetArray:(IOSObjectArray *)widgets
                                             withInt:(jint)count
                                             withInt:(jint)orientation
                                             withInt:(jint)max
                                        withIntArray:(IOSIntArray *)measured {
  ADXCoreFlow_measureChainWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(self, widgets, count, orientation, max, measured);
}

- (void)measureNoWrapWithADXConstraintWidgetArray:(IOSObjectArray *)widgets
                                          withInt:(jint)count
                                          withInt:(jint)orientation
                                          withInt:(jint)max
                                     withIntArray:(IOSIntArray *)measured {
  ADXCoreFlow_measureNoWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(self, widgets, count, orientation, max, measured);
}

- (void)measureAlignedWithADXConstraintWidgetArray:(IOSObjectArray *)widgets
                                           withInt:(jint)count
                                           withInt:(jint)orientation
                                           withInt:(jint)max
                                      withIntArray:(IOSIntArray *)measured {
  ADXCoreFlow_measureAlignedWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(self, widgets, count, orientation, max, measured);
}

- (void)createAlignedConstraintsWithBoolean:(jboolean)isInRtl {
  ADXCoreFlow_createAlignedConstraintsWithBoolean_(self, isInRtl);
}

- (void)addToSolverWithADXLinearSystem:(ADXLinearSystem *)system
                           withBoolean:(jboolean)optimize {
  [super addToSolverWithADXLinearSystem:system withBoolean:optimize];
  jboolean isInRtl = [self getParent] != nil && [((ADXConstraintWidgetContainer *) nil_chk(((ADXConstraintWidgetContainer *) cast_chk([self getParent], [ADXConstraintWidgetContainer class])))) isRtl];
  switch (mWrapMode_) {
    case ADXCoreFlow_WRAP_CHAIN:
    {
      jint count = [((JavaUtilArrayList *) nil_chk(mChainList_)) size];
      for (jint i = 0; i < count; i++) {
        ADXCoreFlow_WidgetsList *list = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChainList_)) getWithInt:i]);
        [((ADXCoreFlow_WidgetsList *) nil_chk(list)) createConstraintsWithBoolean:isInRtl withInt:i withBoolean:i == count - 1];
      }
    }
    break;
    case ADXCoreFlow_WRAP_NONE:
    {
      if ([((JavaUtilArrayList *) nil_chk(mChainList_)) size] > 0) {
        ADXCoreFlow_WidgetsList *list = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChainList_)) getWithInt:0]);
        [((ADXCoreFlow_WidgetsList *) nil_chk(list)) createConstraintsWithBoolean:isInRtl withInt:0 withBoolean:true];
      }
    }
    break;
    case ADXCoreFlow_WRAP_ALIGNED:
    {
      ADXCoreFlow_createAlignedConstraintsWithBoolean_(self, isInRtl);
    }
  }
  [self needsCallbackFromSolverWithBoolean:false];
}

- (void)dealloc {
  RELEASE_(mChainList_);
  RELEASE_(mAlignedBiggestElementsInRows_);
  RELEASE_(mAlignedBiggestElementsInCols_);
  RELEASE_(mAlignedDimensions_);
  RELEASE_(mDisplayedWidgets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x12, 26, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copy__WithADXConstraintWidget:withJavaUtilHashMap:);
  methods[2].selector = @selector(setOrientationWithInt:);
  methods[3].selector = @selector(setFirstHorizontalStyleWithInt:);
  methods[4].selector = @selector(setFirstVerticalStyleWithInt:);
  methods[5].selector = @selector(setLastHorizontalStyleWithInt:);
  methods[6].selector = @selector(setLastVerticalStyleWithInt:);
  methods[7].selector = @selector(setHorizontalStyleWithInt:);
  methods[8].selector = @selector(setVerticalStyleWithInt:);
  methods[9].selector = @selector(setHorizontalBiasWithFloat:);
  methods[10].selector = @selector(setVerticalBiasWithFloat:);
  methods[11].selector = @selector(setFirstHorizontalBiasWithFloat:);
  methods[12].selector = @selector(setFirstVerticalBiasWithFloat:);
  methods[13].selector = @selector(setLastHorizontalBiasWithFloat:);
  methods[14].selector = @selector(setLastVerticalBiasWithFloat:);
  methods[15].selector = @selector(setHorizontalAlignWithInt:);
  methods[16].selector = @selector(setVerticalAlignWithInt:);
  methods[17].selector = @selector(setWrapModeWithInt:);
  methods[18].selector = @selector(setHorizontalGapWithInt:);
  methods[19].selector = @selector(setVerticalGapWithInt:);
  methods[20].selector = @selector(setMaxElementsWrapWithInt:);
  methods[21].selector = @selector(getWidgetWidthWithADXConstraintWidget:withInt:);
  methods[22].selector = @selector(getWidgetHeightWithADXConstraintWidget:withInt:);
  methods[23].selector = @selector(measureWithInt:withInt:withInt:withInt:);
  methods[24].selector = @selector(measureChainWrapWithADXConstraintWidgetArray:withInt:withInt:withInt:withIntArray:);
  methods[25].selector = @selector(measureNoWrapWithADXConstraintWidgetArray:withInt:withInt:withInt:withIntArray:);
  methods[26].selector = @selector(measureAlignedWithADXConstraintWidgetArray:withInt:withInt:withInt:withIntArray:);
  methods[27].selector = @selector(createAlignedConstraintsWithBoolean:);
  methods[28].selector = @selector(addToSolverWithADXLinearSystem:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HORIZONTAL_ALIGN_START", "I", .constantValue.asInt = ADXCoreFlow_HORIZONTAL_ALIGN_START, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_ALIGN_END", "I", .constantValue.asInt = ADXCoreFlow_HORIZONTAL_ALIGN_END, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_ALIGN_CENTER", "I", .constantValue.asInt = ADXCoreFlow_HORIZONTAL_ALIGN_CENTER, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_TOP", "I", .constantValue.asInt = ADXCoreFlow_VERTICAL_ALIGN_TOP, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_BOTTOM", "I", .constantValue.asInt = ADXCoreFlow_VERTICAL_ALIGN_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_CENTER", "I", .constantValue.asInt = ADXCoreFlow_VERTICAL_ALIGN_CENTER, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_ALIGN_BASELINE", "I", .constantValue.asInt = ADXCoreFlow_VERTICAL_ALIGN_BASELINE, 0x19, -1, -1, -1, -1 },
    { "WRAP_NONE", "I", .constantValue.asInt = ADXCoreFlow_WRAP_NONE, 0x19, -1, -1, -1, -1 },
    { "WRAP_CHAIN", "I", .constantValue.asInt = ADXCoreFlow_WRAP_CHAIN, 0x19, -1, -1, -1, -1 },
    { "WRAP_ALIGNED", "I", .constantValue.asInt = ADXCoreFlow_WRAP_ALIGNED, 0x19, -1, -1, -1, -1 },
    { "mHorizontalStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVerticalStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstHorizontalStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstVerticalStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastHorizontalStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastVerticalStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHorizontalBias_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVerticalBias_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstHorizontalBias_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFirstVerticalBias_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastHorizontalBias_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastVerticalBias_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHorizontalGap_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVerticalGap_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHorizontalAlign_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mVerticalAlign_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWrapMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxElementsWrap_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOrientation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChainList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 37, -1 },
    { "mAlignedBiggestElementsInRows_", "[LADXConstraintWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAlignedBiggestElementsInCols_", "[LADXConstraintWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAlignedDimensions_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDisplayedWidgets_", "[LADXConstraintWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDisplayedWidgetsCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copy", "LADXConstraintWidget;LJavaUtilHashMap;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidget;Ljava/util/HashMap<Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "setOrientation", "I", "setFirstHorizontalStyle", "setFirstVerticalStyle", "setLastHorizontalStyle", "setLastVerticalStyle", "setHorizontalStyle", "setVerticalStyle", "setHorizontalBias", "F", "setVerticalBias", "setFirstHorizontalBias", "setFirstVerticalBias", "setLastHorizontalBias", "setLastVerticalBias", "setHorizontalAlign", "setVerticalAlign", "setWrapMode", "setHorizontalGap", "setVerticalGap", "setMaxElementsWrap", "getWidgetWidth", "LADXConstraintWidget;I", "getWidgetHeight", "measure", "IIII", "measureChainWrap", "[LADXConstraintWidget;III[I", "measureNoWrap", "measureAligned", "createAlignedConstraints", "Z", "addToSolver", "LADXLinearSystem;Z", "Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/CoreFlow$WidgetsList;>;", "LADXCoreFlow_WidgetsList;" };
  static const J2ObjcClassInfo _ADXCoreFlow = { "CoreFlow", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x1, 29, 35, -1, 38, -1, -1, -1 };
  return &_ADXCoreFlow;
}

@end

void ADXCoreFlow_init(ADXCoreFlow *self) {
  ADXCoreVirtualLayout_init(self);
  self->mHorizontalStyle_ = ADXConstraintWidget_UNKNOWN;
  self->mVerticalStyle_ = ADXConstraintWidget_UNKNOWN;
  self->mFirstHorizontalStyle_ = ADXConstraintWidget_UNKNOWN;
  self->mFirstVerticalStyle_ = ADXConstraintWidget_UNKNOWN;
  self->mLastHorizontalStyle_ = ADXConstraintWidget_UNKNOWN;
  self->mLastVerticalStyle_ = ADXConstraintWidget_UNKNOWN;
  self->mHorizontalBias_ = 0.5f;
  self->mVerticalBias_ = 0.5f;
  self->mFirstHorizontalBias_ = 0.5f;
  self->mFirstVerticalBias_ = 0.5f;
  self->mLastHorizontalBias_ = 0.5f;
  self->mLastVerticalBias_ = 0.5f;
  self->mHorizontalGap_ = 0;
  self->mVerticalGap_ = 0;
  self->mHorizontalAlign_ = ADXCoreFlow_HORIZONTAL_ALIGN_CENTER;
  self->mVerticalAlign_ = ADXCoreFlow_VERTICAL_ALIGN_CENTER;
  self->mWrapMode_ = ADXCoreFlow_WRAP_NONE;
  self->mMaxElementsWrap_ = ADXConstraintWidget_UNKNOWN;
  self->mOrientation_ = ADXConstraintWidget_HORIZONTAL;
  JreStrongAssignAndConsume(&self->mChainList_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mAlignedBiggestElementsInRows_, nil);
  JreStrongAssign(&self->mAlignedBiggestElementsInCols_, nil);
  JreStrongAssign(&self->mAlignedDimensions_, nil);
  self->mDisplayedWidgetsCount_ = 0;
}

ADXCoreFlow *new_ADXCoreFlow_init() {
  J2OBJC_NEW_IMPL(ADXCoreFlow, init)
}

ADXCoreFlow *create_ADXCoreFlow_init() {
  J2OBJC_CREATE_IMPL(ADXCoreFlow, init)
}

jint ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(ADXCoreFlow *self, ADXConstraintWidget *widget, jint max) {
  if (widget == nil) {
    return 0;
  }
  if ([widget getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      return 0;
    }
    else if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT) {
      jint value = JreFpToInt((widget->mMatchConstraintPercentWidth_ * max));
      if (value != [widget getWidth]) {
        [widget setMeasureRequestedWithBoolean:true];
        [self measureWithADXConstraintWidget:widget withADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) withInt:value withADXConstraintWidget_DimensionBehaviour:[widget getVerticalDimensionBehaviour] withInt:[widget getHeight]];
      }
      return value;
    }
    else if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
      return [widget getWidth];
    }
    else if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
      return JreFpToInt(([widget getHeight] * widget->mDimensionRatio_ + 0.5f));
    }
  }
  return [widget getWidth];
}

jint ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(ADXCoreFlow *self, ADXConstraintWidget *widget, jint max) {
  if (widget == nil) {
    return 0;
  }
  if ([widget getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      return 0;
    }
    else if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT) {
      jint value = JreFpToInt((widget->mMatchConstraintPercentHeight_ * max));
      if (value != [widget getHeight]) {
        [widget setMeasureRequestedWithBoolean:true];
        [self measureWithADXConstraintWidget:widget withADXConstraintWidget_DimensionBehaviour:[widget getHorizontalDimensionBehaviour] withInt:[widget getWidth] withADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) withInt:value];
      }
      return value;
    }
    else if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
      return [widget getHeight];
    }
    else if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
      return JreFpToInt(([widget getWidth] * widget->mDimensionRatio_ + 0.5f));
    }
  }
  return [widget getHeight];
}

void ADXCoreFlow_measureChainWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(ADXCoreFlow *self, IOSObjectArray *widgets, jint count, jint orientation, jint max, IOSIntArray *measured) {
  if (count == 0) {
    return;
  }
  [((JavaUtilArrayList *) nil_chk(self->mChainList_)) clear];
  ADXCoreFlow_WidgetsList *list = create_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(self, orientation, self->mLeft_, self->mTop_, self->mRight_, self->mBottom_, max);
  [((JavaUtilArrayList *) nil_chk(self->mChainList_)) addWithId:list];
  jint nbMatchConstraintsWidgets = 0;
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    jint width = 0;
    for (jint i = 0; i < count; i++) {
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(widgets), i);
      jint w = ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(self, widget, max);
      if ([((ADXConstraintWidget *) nil_chk(widget)) getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        nbMatchConstraintsWidgets++;
      }
      jboolean doWrap = (width == max || (width + self->mHorizontalGap_ + w) > max) && list->biggest_ != nil;
      if (!doWrap && i > 0 && self->mMaxElementsWrap_ > 0 && (JreIntMod(i, self->mMaxElementsWrap_) == 0)) {
        doWrap = true;
      }
      if (doWrap) {
        width = w;
        list = create_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(self, orientation, self->mLeft_, self->mTop_, self->mRight_, self->mBottom_, max);
        [list setStartIndexWithInt:i];
        [((JavaUtilArrayList *) nil_chk(self->mChainList_)) addWithId:list];
      }
      else {
        if (i > 0) {
          width += self->mHorizontalGap_ + w;
        }
        else {
          width = w;
        }
      }
      [list addWithADXConstraintWidget:widget];
    }
  }
  else {
    jint height = 0;
    for (jint i = 0; i < count; i++) {
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(widgets), i);
      jint h = ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self, widget, max);
      if ([((ADXConstraintWidget *) nil_chk(widget)) getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        nbMatchConstraintsWidgets++;
      }
      jboolean doWrap = (height == max || (height + self->mVerticalGap_ + h) > max) && list->biggest_ != nil;
      if (!doWrap && i > 0 && self->mMaxElementsWrap_ > 0 && (JreIntMod(i, self->mMaxElementsWrap_) == 0)) {
        doWrap = true;
      }
      if (doWrap) {
        height = h;
        list = create_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(self, orientation, self->mLeft_, self->mTop_, self->mRight_, self->mBottom_, max);
        [list setStartIndexWithInt:i];
        [((JavaUtilArrayList *) nil_chk(self->mChainList_)) addWithId:list];
      }
      else {
        if (i > 0) {
          height += self->mVerticalGap_ + h;
        }
        else {
          height = h;
        }
      }
      [list addWithADXConstraintWidget:widget];
    }
  }
  jint listCount = [((JavaUtilArrayList *) nil_chk(self->mChainList_)) size];
  ADXConstraintAnchor *left = JreRetainedLocalValue(self->mLeft_);
  ADXConstraintAnchor *top = JreRetainedLocalValue(self->mTop_);
  ADXConstraintAnchor *right = JreRetainedLocalValue(self->mRight_);
  ADXConstraintAnchor *bottom = JreRetainedLocalValue(self->mBottom_);
  jint paddingLeft = [self getPaddingLeft];
  jint paddingTop = [self getPaddingTop];
  jint paddingRight = [self getPaddingRight];
  jint paddingBottom = [self getPaddingBottom];
  jint maxWidth = 0;
  jint maxHeight = 0;
  jboolean needInternalMeasure = [self getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || [self getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
  if (nbMatchConstraintsWidgets > 0 && needInternalMeasure) {
    for (jint i = 0; i < listCount; i++) {
      ADXCoreFlow_WidgetsList *current = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(self->mChainList_)) getWithInt:i]);
      if (orientation == ADXConstraintWidget_HORIZONTAL) {
        [((ADXCoreFlow_WidgetsList *) nil_chk(current)) measureMatchConstraintsWithInt:max - [current getWidth]];
      }
      else {
        [((ADXCoreFlow_WidgetsList *) nil_chk(current)) measureMatchConstraintsWithInt:max - [current getHeight]];
      }
    }
  }
  for (jint i = 0; i < listCount; i++) {
    ADXCoreFlow_WidgetsList *current = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(self->mChainList_)) getWithInt:i]);
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      if (i < listCount - 1) {
        ADXCoreFlow_WidgetsList *next = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(self->mChainList_)) getWithInt:i + 1]);
        bottom = ((ADXConstraintWidget *) nil_chk(((ADXCoreFlow_WidgetsList *) nil_chk(next))->biggest_))->mTop_;
        paddingBottom = 0;
      }
      else {
        bottom = self->mBottom_;
        paddingBottom = [self getPaddingBottom];
      }
      ADXConstraintAnchor *currentBottom = JreRetainedLocalValue(((ADXConstraintWidget *) nil_chk(((ADXCoreFlow_WidgetsList *) nil_chk(current))->biggest_))->mBottom_);
      [current setupWithInt:orientation withADXConstraintAnchor:left withADXConstraintAnchor:top withADXConstraintAnchor:right withADXConstraintAnchor:bottom withInt:paddingLeft withInt:paddingTop withInt:paddingRight withInt:paddingBottom withInt:max];
      top = currentBottom;
      paddingTop = 0;
      maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [current getWidth]);
      maxHeight += [current getHeight];
      if (i > 0) {
        maxHeight += self->mVerticalGap_;
      }
    }
    else {
      if (i < listCount - 1) {
        ADXCoreFlow_WidgetsList *next = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(self->mChainList_)) getWithInt:i + 1]);
        right = ((ADXConstraintWidget *) nil_chk(((ADXCoreFlow_WidgetsList *) nil_chk(next))->biggest_))->mLeft_;
        paddingRight = 0;
      }
      else {
        right = self->mRight_;
        paddingRight = [self getPaddingRight];
      }
      ADXConstraintAnchor *currentRight = JreRetainedLocalValue(((ADXConstraintWidget *) nil_chk(((ADXCoreFlow_WidgetsList *) nil_chk(current))->biggest_))->mRight_);
      [current setupWithInt:orientation withADXConstraintAnchor:left withADXConstraintAnchor:top withADXConstraintAnchor:right withADXConstraintAnchor:bottom withInt:paddingLeft withInt:paddingTop withInt:paddingRight withInt:paddingBottom withInt:max];
      left = currentRight;
      paddingLeft = 0;
      maxWidth += [current getWidth];
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [current getHeight]);
      if (i > 0) {
        maxWidth += self->mHorizontalGap_;
      }
    }
  }
  *IOSIntArray_GetRef(nil_chk(measured), ADXConstraintWidget_HORIZONTAL) = maxWidth;
  *IOSIntArray_GetRef(measured, ADXConstraintWidget_VERTICAL) = maxHeight;
}

void ADXCoreFlow_measureNoWrapWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(ADXCoreFlow *self, IOSObjectArray *widgets, jint count, jint orientation, jint max, IOSIntArray *measured) {
  if (count == 0) {
    return;
  }
  ADXCoreFlow_WidgetsList *list = nil;
  if ([((JavaUtilArrayList *) nil_chk(self->mChainList_)) size] == 0) {
    list = create_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(self, orientation, self->mLeft_, self->mTop_, self->mRight_, self->mBottom_, max);
    [((JavaUtilArrayList *) nil_chk(self->mChainList_)) addWithId:list];
  }
  else {
    list = [((JavaUtilArrayList *) nil_chk(self->mChainList_)) getWithInt:0];
    [((ADXCoreFlow_WidgetsList *) nil_chk(list)) clear];
    [list setupWithInt:orientation withADXConstraintAnchor:self->mLeft_ withADXConstraintAnchor:self->mTop_ withADXConstraintAnchor:self->mRight_ withADXConstraintAnchor:self->mBottom_ withInt:[self getPaddingLeft] withInt:[self getPaddingTop] withInt:[self getPaddingRight] withInt:[self getPaddingBottom] withInt:max];
  }
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(widgets), i);
    [list addWithADXConstraintWidget:widget];
  }
  *IOSIntArray_GetRef(nil_chk(measured), ADXConstraintWidget_HORIZONTAL) = [list getWidth];
  *IOSIntArray_GetRef(measured, ADXConstraintWidget_VERTICAL) = [list getHeight];
}

void ADXCoreFlow_measureAlignedWithADXConstraintWidgetArray_withInt_withInt_withInt_withIntArray_(ADXCoreFlow *self, IOSObjectArray *widgets, jint count, jint orientation, jint max, IOSIntArray *measured) {
  jboolean done = false;
  jint rows = 0;
  jint cols = 0;
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    cols = self->mMaxElementsWrap_;
    if (cols <= 0) {
      jint w = 0;
      cols = 0;
      for (jint i = 0; i < count; i++) {
        if (i > 0) {
          w += self->mHorizontalGap_;
        }
        ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(widgets), i);
        if (widget == nil) {
          continue;
        }
        w += ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(self, widget, max);
        if (w > max) {
          break;
        }
        cols++;
      }
    }
  }
  else {
    rows = self->mMaxElementsWrap_;
    if (rows <= 0) {
      jint h = 0;
      rows = 0;
      for (jint i = 0; i < count; i++) {
        if (i > 0) {
          h += self->mVerticalGap_;
        }
        ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(widgets), i);
        if (widget == nil) {
          continue;
        }
        h += ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self, widget, max);
        if (h > max) {
          break;
        }
        rows++;
      }
    }
  }
  if (self->mAlignedDimensions_ == nil) {
    JreStrongAssignAndConsume(&self->mAlignedDimensions_, [IOSIntArray newArrayWithLength:2]);
  }
  if ((rows == 0 && orientation == ADXConstraintWidget_VERTICAL) || (cols == 0 && orientation == ADXConstraintWidget_HORIZONTAL)) {
    done = true;
  }
  while (!done) {
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      rows = JreFpToInt((JavaLangMath_ceilWithDouble_(count / (jfloat) cols)));
    }
    else {
      cols = JreFpToInt((JavaLangMath_ceilWithDouble_(count / (jfloat) rows)));
    }
    if (self->mAlignedBiggestElementsInCols_ == nil || self->mAlignedBiggestElementsInCols_->size_ < cols) {
      JreStrongAssignAndConsume(&self->mAlignedBiggestElementsInCols_, [IOSObjectArray newArrayWithLength:cols type:ADXConstraintWidget_class_()]);
    }
    else {
      JavaUtilArrays_fillWithNSObjectArray_withId_(self->mAlignedBiggestElementsInCols_, nil);
    }
    if (self->mAlignedBiggestElementsInRows_ == nil || self->mAlignedBiggestElementsInRows_->size_ < rows) {
      JreStrongAssignAndConsume(&self->mAlignedBiggestElementsInRows_, [IOSObjectArray newArrayWithLength:rows type:ADXConstraintWidget_class_()]);
    }
    else {
      JavaUtilArrays_fillWithNSObjectArray_withId_(self->mAlignedBiggestElementsInRows_, nil);
    }
    for (jint i = 0; i < cols; i++) {
      for (jint j = 0; j < rows; j++) {
        jint index = j * cols + i;
        if (orientation == ADXConstraintWidget_VERTICAL) {
          index = i * rows + j;
        }
        if (index >= ((IOSObjectArray *) nil_chk(widgets))->size_) {
          continue;
        }
        ADXConstraintWidget *widget = IOSObjectArray_Get(widgets, index);
        if (widget == nil) {
          continue;
        }
        jint w = ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(self, widget, max);
        if (IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInCols_), i) == nil || [((ADXConstraintWidget *) nil_chk(IOSObjectArray_Get(self->mAlignedBiggestElementsInCols_, i))) getWidth] < w) {
          IOSObjectArray_Set(nil_chk(self->mAlignedBiggestElementsInCols_), i, widget);
        }
        jint h = ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self, widget, max);
        if (IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInRows_), j) == nil || [((ADXConstraintWidget *) nil_chk(IOSObjectArray_Get(self->mAlignedBiggestElementsInRows_, j))) getHeight] < h) {
          IOSObjectArray_Set(nil_chk(self->mAlignedBiggestElementsInRows_), j, widget);
        }
      }
    }
    jint w = 0;
    for (jint i = 0; i < cols; i++) {
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInCols_), i);
      if (widget != nil) {
        if (i > 0) {
          w += self->mHorizontalGap_;
        }
        w += ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(self, widget, max);
      }
    }
    jint h = 0;
    for (jint j = 0; j < rows; j++) {
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInRows_), j);
      if (widget != nil) {
        if (j > 0) {
          h += self->mVerticalGap_;
        }
        h += ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self, widget, max);
      }
    }
    *IOSIntArray_GetRef(nil_chk(measured), ADXConstraintWidget_HORIZONTAL) = w;
    *IOSIntArray_GetRef(measured, ADXConstraintWidget_VERTICAL) = h;
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      if (w > max) {
        if (cols > 1) {
          cols--;
        }
        else {
          done = true;
        }
      }
      else {
        done = true;
      }
    }
    else {
      if (h > max) {
        if (rows > 1) {
          rows--;
        }
        else {
          done = true;
        }
      }
      else {
        done = true;
      }
    }
  }
  *IOSIntArray_GetRef(nil_chk(self->mAlignedDimensions_), ADXConstraintWidget_HORIZONTAL) = cols;
  *IOSIntArray_GetRef(self->mAlignedDimensions_, ADXConstraintWidget_VERTICAL) = rows;
}

void ADXCoreFlow_createAlignedConstraintsWithBoolean_(ADXCoreFlow *self, jboolean isInRtl) {
  if (self->mAlignedDimensions_ == nil || self->mAlignedBiggestElementsInCols_ == nil || self->mAlignedBiggestElementsInRows_ == nil) {
    return;
  }
  for (jint i = 0; i < self->mDisplayedWidgetsCount_; i++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(self->mDisplayedWidgets_), i);
    [((ADXConstraintWidget *) nil_chk(widget)) resetAnchors];
  }
  jint cols = IOSIntArray_Get(nil_chk(self->mAlignedDimensions_), ADXConstraintWidget_HORIZONTAL);
  jint rows = IOSIntArray_Get(self->mAlignedDimensions_, ADXConstraintWidget_VERTICAL);
  ADXConstraintWidget *previous = nil;
  jfloat horizontalBias = self->mHorizontalBias_;
  for (jint i = 0; i < cols; i++) {
    jint index = i;
    if (isInRtl) {
      index = cols - i - 1;
      horizontalBias = 1 - self->mHorizontalBias_;
    }
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInCols_), index);
    if (widget == nil || [widget getVisibility] == ADXConstraintWidget_GONE) {
      continue;
    }
    if (i == 0) {
      [widget connectWithADXConstraintAnchor:widget->mLeft_ withADXConstraintAnchor:self->mLeft_ withInt:[self getPaddingLeft]];
      [widget setHorizontalChainStyleWithInt:self->mHorizontalStyle_];
      [widget setHorizontalBiasPercentWithFloat:horizontalBias];
    }
    if (i == cols - 1) {
      [widget connectWithADXConstraintAnchor:widget->mRight_ withADXConstraintAnchor:self->mRight_ withInt:[self getPaddingRight]];
    }
    if (i > 0 && previous != nil) {
      [widget connectWithADXConstraintAnchor:widget->mLeft_ withADXConstraintAnchor:previous->mRight_ withInt:self->mHorizontalGap_];
      [previous connectWithADXConstraintAnchor:previous->mRight_ withADXConstraintAnchor:widget->mLeft_ withInt:0];
    }
    previous = widget;
  }
  for (jint j = 0; j < rows; j++) {
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInRows_), j);
    if (widget == nil || [widget getVisibility] == ADXConstraintWidget_GONE) {
      continue;
    }
    if (j == 0) {
      [widget connectWithADXConstraintAnchor:widget->mTop_ withADXConstraintAnchor:self->mTop_ withInt:[self getPaddingTop]];
      [widget setVerticalChainStyleWithInt:self->mVerticalStyle_];
      [widget setVerticalBiasPercentWithFloat:self->mVerticalBias_];
    }
    if (j == rows - 1) {
      [widget connectWithADXConstraintAnchor:widget->mBottom_ withADXConstraintAnchor:self->mBottom_ withInt:[self getPaddingBottom]];
    }
    if (j > 0 && previous != nil) {
      [widget connectWithADXConstraintAnchor:widget->mTop_ withADXConstraintAnchor:previous->mBottom_ withInt:self->mVerticalGap_];
      [previous connectWithADXConstraintAnchor:previous->mBottom_ withADXConstraintAnchor:widget->mTop_ withInt:0];
    }
    previous = widget;
  }
  for (jint i = 0; i < cols; i++) {
    for (jint j = 0; j < rows; j++) {
      jint index = j * cols + i;
      if (self->mOrientation_ == ADXConstraintWidget_VERTICAL) {
        index = i * rows + j;
      }
      if (index >= ((IOSObjectArray *) nil_chk(self->mDisplayedWidgets_))->size_) {
        continue;
      }
      ADXConstraintWidget *widget = IOSObjectArray_Get(self->mDisplayedWidgets_, index);
      if (widget == nil || [widget getVisibility] == ADXConstraintWidget_GONE) {
        continue;
      }
      ADXConstraintWidget *biggestInCol = IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInCols_), i);
      ADXConstraintWidget *biggestInRow = IOSObjectArray_Get(nil_chk(self->mAlignedBiggestElementsInRows_), j);
      if (widget != biggestInCol) {
        [widget connectWithADXConstraintAnchor:widget->mLeft_ withADXConstraintAnchor:((ADXConstraintWidget *) nil_chk(biggestInCol))->mLeft_ withInt:0];
        [widget connectWithADXConstraintAnchor:widget->mRight_ withADXConstraintAnchor:biggestInCol->mRight_ withInt:0];
      }
      if (widget != biggestInRow) {
        [widget connectWithADXConstraintAnchor:widget->mTop_ withADXConstraintAnchor:((ADXConstraintWidget *) nil_chk(biggestInRow))->mTop_ withInt:0];
        [widget connectWithADXConstraintAnchor:widget->mBottom_ withADXConstraintAnchor:biggestInRow->mBottom_ withInt:0];
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoreFlow)

@implementation ADXCoreFlow_WidgetsList

- (instancetype)initWithADXCoreFlow:(ADXCoreFlow *)outer$
                            withInt:(jint)orientation
            withADXConstraintAnchor:(ADXConstraintAnchor *)left
            withADXConstraintAnchor:(ADXConstraintAnchor *)top
            withADXConstraintAnchor:(ADXConstraintAnchor *)right
            withADXConstraintAnchor:(ADXConstraintAnchor *)bottom
                            withInt:(jint)max {
  ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(self, outer$, orientation, left, top, right, bottom, max);
  return self;
}

- (void)setupWithInt:(jint)orientation
withADXConstraintAnchor:(ADXConstraintAnchor *)left
withADXConstraintAnchor:(ADXConstraintAnchor *)top
withADXConstraintAnchor:(ADXConstraintAnchor *)right
withADXConstraintAnchor:(ADXConstraintAnchor *)bottom
             withInt:(jint)paddingLeft
             withInt:(jint)paddingTop
             withInt:(jint)paddingRight
             withInt:(jint)paddingBottom
             withInt:(jint)max {
  mOrientation_ = orientation;
  JreStrongAssign(&mLeft_, left);
  JreStrongAssign(&mTop_, top);
  JreStrongAssign(&mRight_, right);
  JreStrongAssign(&mBottom_, bottom);
  mPaddingLeft_ = paddingLeft;
  mPaddingTop_ = paddingTop;
  mPaddingRight_ = paddingRight;
  mPaddingBottom_ = paddingBottom;
  mMax_ = max;
}

- (void)clear {
  biggestDimension_ = 0;
  JreStrongAssign(&biggest_, nil);
  mWidth_ = 0;
  mHeight_ = 0;
  mStartIndex_ = 0;
  mCount_ = 0;
  mNbMatchConstraintsWidgets_ = 0;
}

- (void)setStartIndexWithInt:(jint)value {
  mStartIndex_ = value;
}

- (jint)getWidth {
  if (mOrientation_ == ADXConstraintWidget_HORIZONTAL) {
    return mWidth_ - this$0_->mHorizontalGap_;
  }
  return mWidth_;
}

- (jint)getHeight {
  if (mOrientation_ == ADXConstraintWidget_VERTICAL) {
    return mHeight_ - this$0_->mVerticalGap_;
  }
  return mHeight_;
}

- (void)addWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  if (mOrientation_ == ADXConstraintWidget_HORIZONTAL) {
    jint width = ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(this$0_, widget, mMax_);
    if ([((ADXConstraintWidget *) nil_chk(widget)) getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      mNbMatchConstraintsWidgets_++;
      width = 0;
    }
    jint gap = this$0_->mHorizontalGap_;
    if ([widget getVisibility] == ADXConstraintWidget_GONE) {
      gap = 0;
    }
    mWidth_ += width + gap;
    jint height = ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(this$0_, widget, mMax_);
    if (biggest_ == nil || biggestDimension_ < height) {
      JreStrongAssign(&biggest_, widget);
      biggestDimension_ = height;
      mHeight_ = height;
    }
  }
  else {
    jint width = ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(this$0_, widget, mMax_);
    jint height = ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(this$0_, widget, mMax_);
    if ([((ADXConstraintWidget *) nil_chk(widget)) getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      mNbMatchConstraintsWidgets_++;
      height = 0;
    }
    jint gap = this$0_->mVerticalGap_;
    if ([widget getVisibility] == ADXConstraintWidget_GONE) {
      gap = 0;
    }
    mHeight_ += height + gap;
    if (biggest_ == nil || biggestDimension_ < width) {
      JreStrongAssign(&biggest_, widget);
      biggestDimension_ = width;
      mWidth_ = width;
    }
  }
  mCount_++;
}

- (void)createConstraintsWithBoolean:(jboolean)isInRtl
                             withInt:(jint)chainIndex
                         withBoolean:(jboolean)isLastChain {
  jint count = mCount_;
  for (jint i = 0; i < count; i++) {
    if (mStartIndex_ + i >= this$0_->mDisplayedWidgetsCount_) {
      break;
    }
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(this$0_->mDisplayedWidgets_), mStartIndex_ + i);
    if (widget != nil) {
      [widget resetAnchors];
    }
  }
  if (count == 0 || biggest_ == nil) {
    return;
  }
  jboolean singleChain = isLastChain && chainIndex == 0;
  jint firstVisible = -1;
  jint lastVisible = -1;
  for (jint i = 0; i < count; i++) {
    jint index = i;
    if (isInRtl) {
      index = count - 1 - i;
    }
    if (mStartIndex_ + index >= this$0_->mDisplayedWidgetsCount_) {
      break;
    }
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(this$0_->mDisplayedWidgets_), mStartIndex_ + index);
    if ([((ADXConstraintWidget *) nil_chk(widget)) getVisibility] == ADXConstraintWidget_VISIBLE) {
      if (firstVisible == -1) {
        firstVisible = i;
      }
      lastVisible = i;
    }
  }
  ADXConstraintWidget *previous = nil;
  if (mOrientation_ == ADXConstraintWidget_HORIZONTAL) {
    ADXConstraintWidget *verticalWidget = JreRetainedLocalValue(biggest_);
    [((ADXConstraintWidget *) nil_chk(verticalWidget)) setVerticalChainStyleWithInt:this$0_->mVerticalStyle_];
    jint padding = mPaddingTop_;
    if (chainIndex > 0) {
      padding += this$0_->mVerticalGap_;
    }
    [((ADXConstraintAnchor *) nil_chk(verticalWidget->mTop_)) connectWithADXConstraintAnchor:mTop_ withInt:padding];
    if (isLastChain) {
      [((ADXConstraintAnchor *) nil_chk(verticalWidget->mBottom_)) connectWithADXConstraintAnchor:mBottom_ withInt:mPaddingBottom_];
    }
    if (chainIndex > 0) {
      ADXConstraintAnchor *bottom = JreRetainedLocalValue(((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(mTop_))->mOwner_))->mBottom_);
      [((ADXConstraintAnchor *) nil_chk(bottom)) connectWithADXConstraintAnchor:verticalWidget->mTop_ withInt:0];
    }
    ADXConstraintWidget *baselineVerticalWidget = JreRetainedLocalValue(verticalWidget);
    if (this$0_->mVerticalAlign_ == ADXCoreFlow_VERTICAL_ALIGN_BASELINE && ![verticalWidget hasBaseline]) {
      for (jint i = 0; i < count; i++) {
        jint index = i;
        if (isInRtl) {
          index = count - 1 - i;
        }
        if (mStartIndex_ + index >= this$0_->mDisplayedWidgetsCount_) {
          break;
        }
        ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(this$0_->mDisplayedWidgets_), mStartIndex_ + index);
        if ([((ADXConstraintWidget *) nil_chk(widget)) hasBaseline]) {
          baselineVerticalWidget = widget;
          break;
        }
      }
    }
    for (jint i = 0; i < count; i++) {
      jint index = i;
      if (isInRtl) {
        index = count - 1 - i;
      }
      if (mStartIndex_ + index >= this$0_->mDisplayedWidgetsCount_) {
        break;
      }
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(this$0_->mDisplayedWidgets_), mStartIndex_ + index);
      if (i == 0) {
        [((ADXConstraintWidget *) nil_chk(widget)) connectWithADXConstraintAnchor:widget->mLeft_ withADXConstraintAnchor:mLeft_ withInt:mPaddingLeft_];
      }
      if (index == 0) {
        jint style = this$0_->mHorizontalStyle_;
        jfloat bias = isInRtl ? (1 - this$0_->mHorizontalBias_) : this$0_->mHorizontalBias_;
        if (mStartIndex_ == 0 && this$0_->mFirstHorizontalStyle_ != ADXConstraintWidget_UNKNOWN) {
          style = this$0_->mFirstHorizontalStyle_;
          bias = isInRtl ? (1 - this$0_->mFirstHorizontalBias_) : this$0_->mFirstHorizontalBias_;
        }
        else if (isLastChain && this$0_->mLastHorizontalStyle_ != ADXConstraintWidget_UNKNOWN) {
          style = this$0_->mLastHorizontalStyle_;
          bias = isInRtl ? (1 - this$0_->mLastHorizontalBias_) : this$0_->mLastHorizontalBias_;
        }
        [((ADXConstraintWidget *) nil_chk(widget)) setHorizontalChainStyleWithInt:style];
        [widget setHorizontalBiasPercentWithFloat:bias];
      }
      if (i == count - 1) {
        [((ADXConstraintWidget *) nil_chk(widget)) connectWithADXConstraintAnchor:widget->mRight_ withADXConstraintAnchor:mRight_ withInt:mPaddingRight_];
      }
      if (previous != nil) {
        [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mLeft_)) connectWithADXConstraintAnchor:previous->mRight_ withInt:this$0_->mHorizontalGap_];
        if (i == firstVisible) {
          [((ADXConstraintAnchor *) nil_chk(widget->mLeft_)) setGoneMarginWithInt:mPaddingLeft_];
        }
        [((ADXConstraintAnchor *) nil_chk(previous->mRight_)) connectWithADXConstraintAnchor:widget->mLeft_ withInt:0];
        if (i == lastVisible + 1) {
          [((ADXConstraintAnchor *) nil_chk(previous->mRight_)) setGoneMarginWithInt:mPaddingRight_];
        }
      }
      if (widget != verticalWidget) {
        if (this$0_->mVerticalAlign_ == ADXCoreFlow_VERTICAL_ALIGN_BASELINE && [baselineVerticalWidget hasBaseline] && widget != baselineVerticalWidget && [((ADXConstraintWidget *) nil_chk(widget)) hasBaseline]) {
          [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mBaseline_)) connectWithADXConstraintAnchor:baselineVerticalWidget->mBaseline_ withInt:0];
        }
        else {
          switch (this$0_->mVerticalAlign_) {
            case ADXCoreFlow_VERTICAL_ALIGN_TOP:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mTop_)) connectWithADXConstraintAnchor:verticalWidget->mTop_ withInt:0];
            }
            break;
            case ADXCoreFlow_VERTICAL_ALIGN_BOTTOM:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mBottom_)) connectWithADXConstraintAnchor:verticalWidget->mBottom_ withInt:0];
            }
            break;
            case ADXCoreFlow_VERTICAL_ALIGN_CENTER:
            default:
            {
              if (singleChain) {
                [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mTop_)) connectWithADXConstraintAnchor:mTop_ withInt:mPaddingTop_];
                [((ADXConstraintAnchor *) nil_chk(widget->mBottom_)) connectWithADXConstraintAnchor:mBottom_ withInt:mPaddingBottom_];
              }
              else {
                [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mTop_)) connectWithADXConstraintAnchor:verticalWidget->mTop_ withInt:0];
                [((ADXConstraintAnchor *) nil_chk(widget->mBottom_)) connectWithADXConstraintAnchor:verticalWidget->mBottom_ withInt:0];
              }
            }
          }
        }
      }
      previous = widget;
    }
  }
  else {
    ADXConstraintWidget *horizontalWidget = JreRetainedLocalValue(biggest_);
    [((ADXConstraintWidget *) nil_chk(horizontalWidget)) setHorizontalChainStyleWithInt:this$0_->mHorizontalStyle_];
    jint padding = mPaddingLeft_;
    if (chainIndex > 0) {
      padding += this$0_->mHorizontalGap_;
    }
    if (isInRtl) {
      [((ADXConstraintAnchor *) nil_chk(horizontalWidget->mRight_)) connectWithADXConstraintAnchor:mRight_ withInt:padding];
      if (isLastChain) {
        [((ADXConstraintAnchor *) nil_chk(horizontalWidget->mLeft_)) connectWithADXConstraintAnchor:mLeft_ withInt:mPaddingRight_];
      }
      if (chainIndex > 0) {
        ADXConstraintAnchor *left = JreRetainedLocalValue(((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(mRight_))->mOwner_))->mLeft_);
        [((ADXConstraintAnchor *) nil_chk(left)) connectWithADXConstraintAnchor:horizontalWidget->mRight_ withInt:0];
      }
    }
    else {
      [((ADXConstraintAnchor *) nil_chk(horizontalWidget->mLeft_)) connectWithADXConstraintAnchor:mLeft_ withInt:padding];
      if (isLastChain) {
        [((ADXConstraintAnchor *) nil_chk(horizontalWidget->mRight_)) connectWithADXConstraintAnchor:mRight_ withInt:mPaddingRight_];
      }
      if (chainIndex > 0) {
        ADXConstraintAnchor *right = JreRetainedLocalValue(((ADXConstraintWidget *) nil_chk(((ADXConstraintAnchor *) nil_chk(mLeft_))->mOwner_))->mRight_);
        [((ADXConstraintAnchor *) nil_chk(right)) connectWithADXConstraintAnchor:horizontalWidget->mLeft_ withInt:0];
      }
    }
    for (jint i = 0; i < count; i++) {
      if (mStartIndex_ + i >= this$0_->mDisplayedWidgetsCount_) {
        break;
      }
      ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(this$0_->mDisplayedWidgets_), mStartIndex_ + i);
      if (i == 0) {
        [((ADXConstraintWidget *) nil_chk(widget)) connectWithADXConstraintAnchor:widget->mTop_ withADXConstraintAnchor:mTop_ withInt:mPaddingTop_];
        jint style = this$0_->mVerticalStyle_;
        jfloat bias = this$0_->mVerticalBias_;
        if (mStartIndex_ == 0 && this$0_->mFirstVerticalStyle_ != ADXConstraintWidget_UNKNOWN) {
          style = this$0_->mFirstVerticalStyle_;
          bias = this$0_->mFirstVerticalBias_;
        }
        else if (isLastChain && this$0_->mLastVerticalStyle_ != ADXConstraintWidget_UNKNOWN) {
          style = this$0_->mLastVerticalStyle_;
          bias = this$0_->mLastVerticalBias_;
        }
        [widget setVerticalChainStyleWithInt:style];
        [widget setVerticalBiasPercentWithFloat:bias];
      }
      if (i == count - 1) {
        [((ADXConstraintWidget *) nil_chk(widget)) connectWithADXConstraintAnchor:widget->mBottom_ withADXConstraintAnchor:mBottom_ withInt:mPaddingBottom_];
      }
      if (previous != nil) {
        [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mTop_)) connectWithADXConstraintAnchor:previous->mBottom_ withInt:this$0_->mVerticalGap_];
        if (i == firstVisible) {
          [((ADXConstraintAnchor *) nil_chk(widget->mTop_)) setGoneMarginWithInt:mPaddingTop_];
        }
        [((ADXConstraintAnchor *) nil_chk(previous->mBottom_)) connectWithADXConstraintAnchor:widget->mTop_ withInt:0];
        if (i == lastVisible + 1) {
          [((ADXConstraintAnchor *) nil_chk(previous->mBottom_)) setGoneMarginWithInt:mPaddingBottom_];
        }
      }
      if (widget != horizontalWidget) {
        if (isInRtl) {
          switch (this$0_->mHorizontalAlign_) {
            case ADXCoreFlow_HORIZONTAL_ALIGN_START:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mRight_)) connectWithADXConstraintAnchor:horizontalWidget->mRight_ withInt:0];
            }
            break;
            case ADXCoreFlow_HORIZONTAL_ALIGN_CENTER:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mLeft_)) connectWithADXConstraintAnchor:horizontalWidget->mLeft_ withInt:0];
              [((ADXConstraintAnchor *) nil_chk(widget->mRight_)) connectWithADXConstraintAnchor:horizontalWidget->mRight_ withInt:0];
            }
            break;
            case ADXCoreFlow_HORIZONTAL_ALIGN_END:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mLeft_)) connectWithADXConstraintAnchor:horizontalWidget->mLeft_ withInt:0];
            }
            break;
          }
        }
        else {
          switch (this$0_->mHorizontalAlign_) {
            case ADXCoreFlow_HORIZONTAL_ALIGN_START:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mLeft_)) connectWithADXConstraintAnchor:horizontalWidget->mLeft_ withInt:0];
            }
            break;
            case ADXCoreFlow_HORIZONTAL_ALIGN_CENTER:
            {
              if (singleChain) {
                [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mLeft_)) connectWithADXConstraintAnchor:mLeft_ withInt:mPaddingLeft_];
                [((ADXConstraintAnchor *) nil_chk(widget->mRight_)) connectWithADXConstraintAnchor:mRight_ withInt:mPaddingRight_];
              }
              else {
                [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mLeft_)) connectWithADXConstraintAnchor:horizontalWidget->mLeft_ withInt:0];
                [((ADXConstraintAnchor *) nil_chk(widget->mRight_)) connectWithADXConstraintAnchor:horizontalWidget->mRight_ withInt:0];
              }
            }
            break;
            case ADXCoreFlow_HORIZONTAL_ALIGN_END:
            {
              [((ADXConstraintAnchor *) nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mRight_)) connectWithADXConstraintAnchor:horizontalWidget->mRight_ withInt:0];
            }
            break;
          }
        }
      }
      previous = widget;
    }
  }
}

- (void)measureMatchConstraintsWithInt:(jint)availableSpace {
  if (mNbMatchConstraintsWidgets_ == 0) {
    return;
  }
  jint count = mCount_;
  jint widgetSize = JreIntDiv(availableSpace, mNbMatchConstraintsWidgets_);
  for (jint i = 0; i < count; i++) {
    if (mStartIndex_ + i >= this$0_->mDisplayedWidgetsCount_) {
      break;
    }
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(this$0_->mDisplayedWidgets_), mStartIndex_ + i);
    if (mOrientation_ == ADXConstraintWidget_HORIZONTAL) {
      if (widget != nil && [widget getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
          [this$0_ measureWithADXConstraintWidget:widget withADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) withInt:widgetSize withADXConstraintWidget_DimensionBehaviour:[widget getVerticalDimensionBehaviour] withInt:[widget getHeight]];
        }
      }
    }
    else {
      if (widget != nil && [widget getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
          [this$0_ measureWithADXConstraintWidget:widget withADXConstraintWidget_DimensionBehaviour:[widget getHorizontalDimensionBehaviour] withInt:[widget getWidth] withADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) withInt:widgetSize];
        }
      }
    }
  }
  ADXCoreFlow_WidgetsList_recomputeDimensions(self);
}

- (void)recomputeDimensions {
  ADXCoreFlow_WidgetsList_recomputeDimensions(self);
}

- (void)__javaClone:(ADXCoreFlow_WidgetsList *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (void)dealloc {
  RELEASE_(biggest_);
  RELEASE_(mLeft_);
  RELEASE_(mTop_);
  RELEASE_(mRight_);
  RELEASE_(mBottom_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXCoreFlow:withInt:withADXConstraintAnchor:withADXConstraintAnchor:withADXConstraintAnchor:withADXConstraintAnchor:withInt:);
  methods[1].selector = @selector(setupWithInt:withADXConstraintAnchor:withADXConstraintAnchor:withADXConstraintAnchor:withADXConstraintAnchor:withInt:withInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(clear);
  methods[3].selector = @selector(setStartIndexWithInt:);
  methods[4].selector = @selector(getWidth);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(addWithADXConstraintWidget:);
  methods[7].selector = @selector(createConstraintsWithBoolean:withInt:withBoolean:);
  methods[8].selector = @selector(measureMatchConstraintsWithInt:);
  methods[9].selector = @selector(recomputeDimensions);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXCoreFlow;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mOrientation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "biggest_", "LADXConstraintWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "biggestDimension_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLeft_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTop_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRight_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBottom_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPaddingLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPaddingTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPaddingRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPaddingBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStartIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNbMatchConstraintsWidgets_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXCoreFlow;ILADXConstraintAnchor;LADXConstraintAnchor;LADXConstraintAnchor;LADXConstraintAnchor;I", "setup", "ILADXConstraintAnchor;LADXConstraintAnchor;LADXConstraintAnchor;LADXConstraintAnchor;IIIII", "setStartIndex", "I", "add", "LADXConstraintWidget;", "createConstraints", "ZIZ", "measureMatchConstraints", "LADXCoreFlow;" };
  static const J2ObjcClassInfo _ADXCoreFlow_WidgetsList = { "WidgetsList", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x2, 10, 18, 10, -1, -1, -1, -1 };
  return &_ADXCoreFlow_WidgetsList;
}

@end

void ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(ADXCoreFlow_WidgetsList *self, ADXCoreFlow *outer$, jint orientation, ADXConstraintAnchor *left, ADXConstraintAnchor *top, ADXConstraintAnchor *right, ADXConstraintAnchor *bottom, jint max) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->mOrientation_ = ADXConstraintWidget_HORIZONTAL;
  JreStrongAssign(&self->biggest_, nil);
  self->biggestDimension_ = 0;
  self->mPaddingLeft_ = 0;
  self->mPaddingTop_ = 0;
  self->mPaddingRight_ = 0;
  self->mPaddingBottom_ = 0;
  self->mWidth_ = 0;
  self->mHeight_ = 0;
  self->mStartIndex_ = 0;
  self->mCount_ = 0;
  self->mNbMatchConstraintsWidgets_ = 0;
  self->mMax_ = 0;
  self->mOrientation_ = orientation;
  JreStrongAssign(&self->mLeft_, left);
  JreStrongAssign(&self->mTop_, top);
  JreStrongAssign(&self->mRight_, right);
  JreStrongAssign(&self->mBottom_, bottom);
  self->mPaddingLeft_ = [outer$ getPaddingLeft];
  self->mPaddingTop_ = [outer$ getPaddingTop];
  self->mPaddingRight_ = [outer$ getPaddingRight];
  self->mPaddingBottom_ = [outer$ getPaddingBottom];
  self->mMax_ = max;
}

ADXCoreFlow_WidgetsList *new_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(ADXCoreFlow *outer$, jint orientation, ADXConstraintAnchor *left, ADXConstraintAnchor *top, ADXConstraintAnchor *right, ADXConstraintAnchor *bottom, jint max) {
  J2OBJC_NEW_IMPL(ADXCoreFlow_WidgetsList, initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_, outer$, orientation, left, top, right, bottom, max)
}

ADXCoreFlow_WidgetsList *create_ADXCoreFlow_WidgetsList_initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_(ADXCoreFlow *outer$, jint orientation, ADXConstraintAnchor *left, ADXConstraintAnchor *top, ADXConstraintAnchor *right, ADXConstraintAnchor *bottom, jint max) {
  J2OBJC_CREATE_IMPL(ADXCoreFlow_WidgetsList, initWithADXCoreFlow_withInt_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withADXConstraintAnchor_withInt_, outer$, orientation, left, top, right, bottom, max)
}

void ADXCoreFlow_WidgetsList_recomputeDimensions(ADXCoreFlow_WidgetsList *self) {
  self->mWidth_ = 0;
  self->mHeight_ = 0;
  JreStrongAssign(&self->biggest_, nil);
  self->biggestDimension_ = 0;
  jint count = self->mCount_;
  for (jint i = 0; i < count; i++) {
    if (self->mStartIndex_ + i >= self->this$0_->mDisplayedWidgetsCount_) {
      break;
    }
    ADXConstraintWidget *widget = IOSObjectArray_Get(nil_chk(self->this$0_->mDisplayedWidgets_), self->mStartIndex_ + i);
    if (self->mOrientation_ == ADXConstraintWidget_HORIZONTAL) {
      jint width = [((ADXConstraintWidget *) nil_chk(widget)) getWidth];
      jint gap = self->this$0_->mHorizontalGap_;
      if ([widget getVisibility] == ADXConstraintWidget_GONE) {
        gap = 0;
      }
      self->mWidth_ += width + gap;
      jint height = ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self->this$0_, widget, self->mMax_);
      if (self->biggest_ == nil || self->biggestDimension_ < height) {
        JreStrongAssign(&self->biggest_, widget);
        self->biggestDimension_ = height;
        self->mHeight_ = height;
      }
    }
    else {
      jint width = ADXCoreFlow_getWidgetWidthWithADXConstraintWidget_withInt_(self->this$0_, widget, self->mMax_);
      jint height = ADXCoreFlow_getWidgetHeightWithADXConstraintWidget_withInt_(self->this$0_, widget, self->mMax_);
      jint gap = self->this$0_->mVerticalGap_;
      if ([((ADXConstraintWidget *) nil_chk(widget)) getVisibility] == ADXConstraintWidget_GONE) {
        gap = 0;
      }
      self->mHeight_ += height + gap;
      if (self->biggest_ == nil || self->biggestDimension_ < width) {
        JreStrongAssign(&self->biggest_, widget);
        self->biggestDimension_ = width;
        self->mWidth_ = width;
      }
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoreFlow_WidgetsList)
