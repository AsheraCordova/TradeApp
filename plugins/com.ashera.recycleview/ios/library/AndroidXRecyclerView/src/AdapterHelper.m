//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\AdapterHelper.java
//

#include "AdapterHelper.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OpReorderer.h"
#include "Pools.h"
#include "RecyclerView.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"


@interface ADXAdapterHelper () {
 @public
  id<ADPools_Pool> mUpdateOpPool_;
  jint mExistingUpdateTypes_;
}

- (void)applyMoveWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)applyRemoveWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)applyUpdateWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (jint)updatePositionWithPostponedWithInt:(jint)pos
                                   withInt:(jint)cmd;

- (jboolean)canFindInPreLayoutWithInt:(jint)position;

- (void)applyAddWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

@end

J2OBJC_FIELD_SETTER(ADXAdapterHelper, mUpdateOpPool_, id<ADPools_Pool>)

inline jboolean ADXAdapterHelper_get_DEBUG(void);
#define ADXAdapterHelper_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXAdapterHelper, DEBUG, jboolean)

inline NSString *ADXAdapterHelper_get_TAG(void);
static NSString *ADXAdapterHelper_TAG = @"AHT";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXAdapterHelper, TAG, NSString *)

__attribute__((unused)) static void ADXAdapterHelper_applyMoveWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op);

__attribute__((unused)) static void ADXAdapterHelper_applyRemoveWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op);

__attribute__((unused)) static void ADXAdapterHelper_applyUpdateWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op);

__attribute__((unused)) static void ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op);

__attribute__((unused)) static jint ADXAdapterHelper_updatePositionWithPostponedWithInt_withInt_(ADXAdapterHelper *self, jint pos, jint cmd);

__attribute__((unused)) static jboolean ADXAdapterHelper_canFindInPreLayoutWithInt_(ADXAdapterHelper *self, jint position);

__attribute__((unused)) static void ADXAdapterHelper_applyAddWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op);

__attribute__((unused)) static void ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op);

@interface ADXAdapterHelper_Callback : NSObject

@end

@implementation ADXAdapterHelper

- (instancetype)initPackagePrivateWithADXAdapterHelper_Callback:(id<ADXAdapterHelper_Callback>)callback {
  ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(self, callback);
  return self;
}

- (instancetype)initPackagePrivateWithADXAdapterHelper_Callback:(id<ADXAdapterHelper_Callback>)callback
                                                    withBoolean:(jboolean)disableRecycler {
  ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(self, callback, disableRecycler);
  return self;
}

- (ADXAdapterHelper *)addUpdateOpWithADXAdapterHelper_UpdateOpArray:(IOSObjectArray *)ops {
  JavaUtilCollections_addAllWithJavaUtilCollection_withNSObjectArray_(mPendingUpdates_, ops);
  return self;
}

- (void)reset {
  [self recycleUpdateOpsAndClearListWithJavaUtilList:mPendingUpdates_];
  [self recycleUpdateOpsAndClearListWithJavaUtilList:mPostponedList_];
  mExistingUpdateTypes_ = 0;
}

- (void)preProcess {
  [((ADXOpReorderer *) nil_chk(mOpReorderer_)) reorderOpsWithJavaUtilList:mPendingUpdates_];
  jint count = [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) size];
  for (jint i = 0; i < count; i++) {
    ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([mPendingUpdates_ getWithInt:i]);
    switch (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
      case ADXAdapterHelper_UpdateOp_ADD:
      ADXAdapterHelper_applyAddWithADXAdapterHelper_UpdateOp_(self, op);
      break;
      case ADXAdapterHelper_UpdateOp_REMOVE:
      ADXAdapterHelper_applyRemoveWithADXAdapterHelper_UpdateOp_(self, op);
      break;
      case ADXAdapterHelper_UpdateOp_UPDATE:
      ADXAdapterHelper_applyUpdateWithADXAdapterHelper_UpdateOp_(self, op);
      break;
      case ADXAdapterHelper_UpdateOp_MOVE:
      ADXAdapterHelper_applyMoveWithADXAdapterHelper_UpdateOp_(self, op);
      break;
    }
    if (mOnItemProcessedCallback_ != nil) {
      [mOnItemProcessedCallback_ run];
    }
  }
  [mPendingUpdates_ clear];
}

- (void)consumePostponedUpdates {
  jint count = [((JavaUtilArrayList *) nil_chk(mPostponedList_)) size];
  for (jint i = 0; i < count; i++) {
    [((id<ADXAdapterHelper_Callback>) nil_chk(mCallback_)) onDispatchSecondPassWithADXAdapterHelper_UpdateOp:[mPostponedList_ getWithInt:i]];
  }
  [self recycleUpdateOpsAndClearListWithJavaUtilList:mPostponedList_];
  mExistingUpdateTypes_ = 0;
}

- (void)applyMoveWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  ADXAdapterHelper_applyMoveWithADXAdapterHelper_UpdateOp_(self, op);
}

- (void)applyRemoveWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  ADXAdapterHelper_applyRemoveWithADXAdapterHelper_UpdateOp_(self, op);
}

- (void)applyUpdateWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  ADXAdapterHelper_applyUpdateWithADXAdapterHelper_UpdateOp_(self, op);
}

- (void)dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
}

- (void)dispatchFirstPassAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op
                                                                   withInt:(jint)offsetStart {
  [((id<ADXAdapterHelper_Callback>) nil_chk(mCallback_)) onDispatchFirstPassWithADXAdapterHelper_UpdateOp:op];
  switch (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
    case ADXAdapterHelper_UpdateOp_REMOVE:
    [mCallback_ offsetPositionsForRemovingInvisibleWithInt:offsetStart withInt:op->itemCount_];
    break;
    case ADXAdapterHelper_UpdateOp_UPDATE:
    [mCallback_ markViewHoldersUpdatedWithInt:offsetStart withInt:op->itemCount_ withId:op->payload_];
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"only remove and update ops can be dispatched in first pass");
  }
}

- (jint)updatePositionWithPostponedWithInt:(jint)pos
                                   withInt:(jint)cmd {
  return ADXAdapterHelper_updatePositionWithPostponedWithInt_withInt_(self, pos, cmd);
}

- (jboolean)canFindInPreLayoutWithInt:(jint)position {
  return ADXAdapterHelper_canFindInPreLayoutWithInt_(self, position);
}

- (void)applyAddWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  ADXAdapterHelper_applyAddWithADXAdapterHelper_UpdateOp_(self, op);
}

- (void)postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
}

- (jboolean)hasPendingUpdates {
  return [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) size] > 0;
}

- (jboolean)hasAnyUpdateTypesWithInt:(jint)updateTypes {
  return (mExistingUpdateTypes_ & updateTypes) != 0;
}

- (jint)findPositionOffsetWithInt:(jint)position {
  return [self findPositionOffsetWithInt:position withInt:0];
}

- (jint)findPositionOffsetWithInt:(jint)position
                          withInt:(jint)firstPostponedItem {
  jint count = [((JavaUtilArrayList *) nil_chk(mPostponedList_)) size];
  for (jint i = firstPostponedItem; i < count; ++i) {
    ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([mPostponedList_ getWithInt:i]);
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_ == ADXAdapterHelper_UpdateOp_MOVE) {
      if (op->positionStart_ == position) {
        position = op->itemCount_;
      }
      else {
        if (op->positionStart_ < position) {
          position--;
        }
        if (op->itemCount_ <= position) {
          position++;
        }
      }
    }
    else if (op->positionStart_ <= position) {
      if (op->cmd_ == ADXAdapterHelper_UpdateOp_REMOVE) {
        if (position < op->positionStart_ + op->itemCount_) {
          return -1;
        }
        position -= op->itemCount_;
      }
      else if (op->cmd_ == ADXAdapterHelper_UpdateOp_ADD) {
        position += op->itemCount_;
      }
    }
  }
  return position;
}

- (jboolean)onItemRangeChangedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payload {
  if (itemCount < 1) {
    return false;
  }
  [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) addWithId:[self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_UPDATE withInt:positionStart withInt:itemCount withId:payload]];
  mExistingUpdateTypes_ |= ADXAdapterHelper_UpdateOp_UPDATE;
  return [mPendingUpdates_ size] == 1;
}

- (jboolean)onItemRangeInsertedWithInt:(jint)positionStart
                               withInt:(jint)itemCount {
  if (itemCount < 1) {
    return false;
  }
  [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) addWithId:[self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_ADD withInt:positionStart withInt:itemCount withId:nil]];
  mExistingUpdateTypes_ |= ADXAdapterHelper_UpdateOp_ADD;
  return [mPendingUpdates_ size] == 1;
}

- (jboolean)onItemRangeRemovedWithInt:(jint)positionStart
                              withInt:(jint)itemCount {
  if (itemCount < 1) {
    return false;
  }
  [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) addWithId:[self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_REMOVE withInt:positionStart withInt:itemCount withId:nil]];
  mExistingUpdateTypes_ |= ADXAdapterHelper_UpdateOp_REMOVE;
  return [mPendingUpdates_ size] == 1;
}

- (jboolean)onItemRangeMovedWithInt:(jint)from
                            withInt:(jint)to
                            withInt:(jint)itemCount {
  if (from == to) {
    return false;
  }
  if (itemCount != 1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Moving more than 1 item is not supported yet");
  }
  [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) addWithId:[self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_MOVE withInt:from withInt:to withId:nil]];
  mExistingUpdateTypes_ |= ADXAdapterHelper_UpdateOp_MOVE;
  return [mPendingUpdates_ size] == 1;
}

- (void)consumeUpdatesInOnePass {
  [self consumePostponedUpdates];
  jint count = [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) size];
  for (jint i = 0; i < count; i++) {
    ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([mPendingUpdates_ getWithInt:i]);
    switch (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
      case ADXAdapterHelper_UpdateOp_ADD:
      [((id<ADXAdapterHelper_Callback>) nil_chk(mCallback_)) onDispatchSecondPassWithADXAdapterHelper_UpdateOp:op];
      [mCallback_ offsetPositionsForAddWithInt:op->positionStart_ withInt:op->itemCount_];
      break;
      case ADXAdapterHelper_UpdateOp_REMOVE:
      [((id<ADXAdapterHelper_Callback>) nil_chk(mCallback_)) onDispatchSecondPassWithADXAdapterHelper_UpdateOp:op];
      [mCallback_ offsetPositionsForRemovingInvisibleWithInt:op->positionStart_ withInt:op->itemCount_];
      break;
      case ADXAdapterHelper_UpdateOp_UPDATE:
      [((id<ADXAdapterHelper_Callback>) nil_chk(mCallback_)) onDispatchSecondPassWithADXAdapterHelper_UpdateOp:op];
      [mCallback_ markViewHoldersUpdatedWithInt:op->positionStart_ withInt:op->itemCount_ withId:op->payload_];
      break;
      case ADXAdapterHelper_UpdateOp_MOVE:
      [((id<ADXAdapterHelper_Callback>) nil_chk(mCallback_)) onDispatchSecondPassWithADXAdapterHelper_UpdateOp:op];
      [mCallback_ offsetPositionsForMoveWithInt:op->positionStart_ withInt:op->itemCount_];
      break;
    }
    if (mOnItemProcessedCallback_ != nil) {
      [mOnItemProcessedCallback_ run];
    }
  }
  [self recycleUpdateOpsAndClearListWithJavaUtilList:mPendingUpdates_];
  mExistingUpdateTypes_ = 0;
}

- (jint)applyPendingUpdatesToPositionWithInt:(jint)position {
  jint size = [((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) size];
  for (jint i = 0; i < size; i++) {
    ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([mPendingUpdates_ getWithInt:i]);
    switch (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
      case ADXAdapterHelper_UpdateOp_ADD:
      if (op->positionStart_ <= position) {
        position += op->itemCount_;
      }
      break;
      case ADXAdapterHelper_UpdateOp_REMOVE:
      if (op->positionStart_ <= position) {
        jint end = op->positionStart_ + op->itemCount_;
        if (end > position) {
          return ADXRecyclerView_NO_POSITION;
        }
        position -= op->itemCount_;
      }
      break;
      case ADXAdapterHelper_UpdateOp_MOVE:
      if (op->positionStart_ == position) {
        position = op->itemCount_;
      }
      else {
        if (op->positionStart_ < position) {
          position -= 1;
        }
        if (op->itemCount_ <= position) {
          position += 1;
        }
      }
      break;
    }
  }
  return position;
}

- (jboolean)hasUpdates {
  return ![((JavaUtilArrayList *) nil_chk(mPostponedList_)) isEmpty] && ![((JavaUtilArrayList *) nil_chk(mPendingUpdates_)) isEmpty];
}

- (ADXAdapterHelper_UpdateOp *)obtainUpdateOpWithInt:(jint)cmd
                                             withInt:(jint)positionStart
                                             withInt:(jint)itemCount
                                              withId:(id)payload {
  ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([((id<ADPools_Pool>) nil_chk(mUpdateOpPool_)) acquire]);
  if (op == nil) {
    op = create_ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(cmd, positionStart, itemCount, payload);
  }
  else {
    op->cmd_ = cmd;
    op->positionStart_ = positionStart;
    op->itemCount_ = itemCount;
    JreStrongAssign(&op->payload_, payload);
  }
  return op;
}

- (void)recycleUpdateOpWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  if (!mDisableRecycler_) {
    JreStrongAssign(&((ADXAdapterHelper_UpdateOp *) nil_chk(op))->payload_, nil);
    [((id<ADPools_Pool>) nil_chk(mUpdateOpPool_)) release__WithId:op];
  }
}

- (void)recycleUpdateOpsAndClearListWithJavaUtilList:(id<JavaUtilList>)ops {
  jint count = [((id<JavaUtilList>) nil_chk(ops)) size];
  for (jint i = 0; i < count; i++) {
    [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:[ops getWithInt:i]];
  }
  [ops clear];
}

- (void)dealloc {
  RELEASE_(mUpdateOpPool_);
  RELEASE_(mPendingUpdates_);
  RELEASE_(mPostponedList_);
  RELEASE_(mCallback_);
  RELEASE_(mOnItemProcessedCallback_);
  RELEASE_(mOpReorderer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LADXAdapterHelper;", 0x80, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 17, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 18, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 18, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 21, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 22, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 25, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXAdapterHelper_UpdateOp;", 0x1, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 30, -1, 31, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXAdapterHelper_Callback:);
  methods[1].selector = @selector(initPackagePrivateWithADXAdapterHelper_Callback:withBoolean:);
  methods[2].selector = @selector(addUpdateOpWithADXAdapterHelper_UpdateOpArray:);
  methods[3].selector = @selector(reset);
  methods[4].selector = @selector(preProcess);
  methods[5].selector = @selector(consumePostponedUpdates);
  methods[6].selector = @selector(applyMoveWithADXAdapterHelper_UpdateOp:);
  methods[7].selector = @selector(applyRemoveWithADXAdapterHelper_UpdateOp:);
  methods[8].selector = @selector(applyUpdateWithADXAdapterHelper_UpdateOp:);
  methods[9].selector = @selector(dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:);
  methods[10].selector = @selector(dispatchFirstPassAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:withInt:);
  methods[11].selector = @selector(updatePositionWithPostponedWithInt:withInt:);
  methods[12].selector = @selector(canFindInPreLayoutWithInt:);
  methods[13].selector = @selector(applyAddWithADXAdapterHelper_UpdateOp:);
  methods[14].selector = @selector(postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:);
  methods[15].selector = @selector(hasPendingUpdates);
  methods[16].selector = @selector(hasAnyUpdateTypesWithInt:);
  methods[17].selector = @selector(findPositionOffsetWithInt:);
  methods[18].selector = @selector(findPositionOffsetWithInt:withInt:);
  methods[19].selector = @selector(onItemRangeChangedWithInt:withInt:withId:);
  methods[20].selector = @selector(onItemRangeInsertedWithInt:withInt:);
  methods[21].selector = @selector(onItemRangeRemovedWithInt:withInt:);
  methods[22].selector = @selector(onItemRangeMovedWithInt:withInt:withInt:);
  methods[23].selector = @selector(consumeUpdatesInOnePass);
  methods[24].selector = @selector(applyPendingUpdatesToPositionWithInt:);
  methods[25].selector = @selector(hasUpdates);
  methods[26].selector = @selector(obtainUpdateOpWithInt:withInt:withInt:withId:);
  methods[27].selector = @selector(recycleUpdateOpWithADXAdapterHelper_UpdateOp:);
  methods[28].selector = @selector(recycleUpdateOpsAndClearListWithJavaUtilList:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "POSITION_TYPE_INVISIBLE", "I", .constantValue.asInt = ADXAdapterHelper_POSITION_TYPE_INVISIBLE, 0x18, -1, -1, -1, -1 },
    { "POSITION_TYPE_NEW_OR_LAID_OUT", "I", .constantValue.asInt = ADXAdapterHelper_POSITION_TYPE_NEW_OR_LAID_OUT, 0x18, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXAdapterHelper_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 32, -1, -1 },
    { "mUpdateOpPool_", "LADPools_Pool;", .constantValue.asLong = 0, 0x2, -1, -1, 33, -1 },
    { "mPendingUpdates_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 34, -1 },
    { "mPostponedList_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 34, -1 },
    { "mCallback_", "LADXAdapterHelper_Callback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mOnItemProcessedCallback_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDisableRecycler_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mOpReorderer_", "LADXOpReorderer;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mExistingUpdateTypes_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXAdapterHelper_Callback;", "LADXAdapterHelper_Callback;Z", "addUpdateOp", "[LADXAdapterHelper_UpdateOp;", "applyMove", "LADXAdapterHelper_UpdateOp;", "applyRemove", "applyUpdate", "dispatchAndUpdateViewHolders", "dispatchFirstPassAndUpdateViewHolders", "LADXAdapterHelper_UpdateOp;I", "updatePositionWithPostponed", "II", "canFindInPreLayout", "I", "applyAdd", "postponeAndUpdateViewHolders", "hasAnyUpdateTypes", "findPositionOffset", "onItemRangeChanged", "IILNSObject;", "onItemRangeInserted", "onItemRangeRemoved", "onItemRangeMoved", "III", "applyPendingUpdatesToPosition", "obtainUpdateOp", "IIILNSObject;", "recycleUpdateOp", "recycleUpdateOpsAndClearList", "LJavaUtilList;", "(Ljava/util/List<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;)V", &ADXAdapterHelper_TAG, "Lr/android/util/Pools$Pool<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;", "Ljava/util/ArrayList<Landroidx/recyclerview/widget/AdapterHelper$UpdateOp;>;", "LADXAdapterHelper_UpdateOp;LADXAdapterHelper_Callback;" };
  static const J2ObjcClassInfo _ADXAdapterHelper = { "AdapterHelper", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x10, 29, 12, -1, 35, -1, -1, -1 };
  return &_ADXAdapterHelper;
}

@end

void ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(ADXAdapterHelper *self, id<ADXAdapterHelper_Callback> callback) {
  ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(self, callback, false);
}

ADXAdapterHelper *new_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(id<ADXAdapterHelper_Callback> callback) {
  J2OBJC_NEW_IMPL(ADXAdapterHelper, initPackagePrivateWithADXAdapterHelper_Callback_, callback)
}

ADXAdapterHelper *create_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(id<ADXAdapterHelper_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADXAdapterHelper, initPackagePrivateWithADXAdapterHelper_Callback_, callback)
}

void ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(ADXAdapterHelper *self, id<ADXAdapterHelper_Callback> callback, jboolean disableRecycler) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mUpdateOpPool_, new_ADPools_SimplePool_initWithInt_(ADXAdapterHelper_UpdateOp_POOL_SIZE));
  JreStrongAssignAndConsume(&self->mPendingUpdates_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mPostponedList_, new_JavaUtilArrayList_init());
  self->mExistingUpdateTypes_ = 0;
  JreStrongAssign(&self->mCallback_, callback);
  self->mDisableRecycler_ = disableRecycler;
  JreStrongAssignAndConsume(&self->mOpReorderer_, new_ADXOpReorderer_initPackagePrivateWithADXOpReorderer_Callback_(self));
}

ADXAdapterHelper *new_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(id<ADXAdapterHelper_Callback> callback, jboolean disableRecycler) {
  J2OBJC_NEW_IMPL(ADXAdapterHelper, initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_, callback, disableRecycler)
}

ADXAdapterHelper *create_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_(id<ADXAdapterHelper_Callback> callback, jboolean disableRecycler) {
  J2OBJC_CREATE_IMPL(ADXAdapterHelper, initPackagePrivateWithADXAdapterHelper_Callback_withBoolean_, callback, disableRecycler)
}

void ADXAdapterHelper_applyMoveWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op) {
  ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
}

void ADXAdapterHelper_applyRemoveWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op) {
  jint tmpStart = ((ADXAdapterHelper_UpdateOp *) nil_chk(op))->positionStart_;
  jint tmpCount = 0;
  jint tmpEnd = op->positionStart_ + op->itemCount_;
  jint type = -1;
  for (jint position = op->positionStart_; position < tmpEnd; position++) {
    jboolean typeChanged = false;
    ADXRecyclerView_ViewHolder *vh = JreRetainedLocalValue([((id<ADXAdapterHelper_Callback>) nil_chk(self->mCallback_)) findViewHolderWithInt:position]);
    if (vh != nil || ADXAdapterHelper_canFindInPreLayoutWithInt_(self, position)) {
      if (type == ADXAdapterHelper_POSITION_TYPE_INVISIBLE) {
        ADXAdapterHelper_UpdateOp *newOp = JreRetainedLocalValue([self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_REMOVE withInt:tmpStart withInt:tmpCount withId:nil]);
        ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, newOp);
        typeChanged = true;
      }
      type = ADXAdapterHelper_POSITION_TYPE_NEW_OR_LAID_OUT;
    }
    else {
      if (type == ADXAdapterHelper_POSITION_TYPE_NEW_OR_LAID_OUT) {
        ADXAdapterHelper_UpdateOp *newOp = JreRetainedLocalValue([self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_REMOVE withInt:tmpStart withInt:tmpCount withId:nil]);
        ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, newOp);
        typeChanged = true;
      }
      type = ADXAdapterHelper_POSITION_TYPE_INVISIBLE;
    }
    if (typeChanged) {
      position -= tmpCount;
      tmpEnd -= tmpCount;
      tmpCount = 1;
    }
    else {
      tmpCount++;
    }
  }
  if (tmpCount != op->itemCount_) {
    [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:op];
    op = [self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_REMOVE withInt:tmpStart withInt:tmpCount withId:nil];
  }
  if (type == ADXAdapterHelper_POSITION_TYPE_INVISIBLE) {
    ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
  }
  else {
    ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
  }
}

void ADXAdapterHelper_applyUpdateWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op) {
  jint tmpStart = ((ADXAdapterHelper_UpdateOp *) nil_chk(op))->positionStart_;
  jint tmpCount = 0;
  jint tmpEnd = op->positionStart_ + op->itemCount_;
  jint type = -1;
  for (jint position = op->positionStart_; position < tmpEnd; position++) {
    ADXRecyclerView_ViewHolder *vh = JreRetainedLocalValue([((id<ADXAdapterHelper_Callback>) nil_chk(self->mCallback_)) findViewHolderWithInt:position]);
    if (vh != nil || ADXAdapterHelper_canFindInPreLayoutWithInt_(self, position)) {
      if (type == ADXAdapterHelper_POSITION_TYPE_INVISIBLE) {
        ADXAdapterHelper_UpdateOp *newOp = JreRetainedLocalValue([self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_UPDATE withInt:tmpStart withInt:tmpCount withId:op->payload_]);
        ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, newOp);
        tmpCount = 0;
        tmpStart = position;
      }
      type = ADXAdapterHelper_POSITION_TYPE_NEW_OR_LAID_OUT;
    }
    else {
      if (type == ADXAdapterHelper_POSITION_TYPE_NEW_OR_LAID_OUT) {
        ADXAdapterHelper_UpdateOp *newOp = JreRetainedLocalValue([self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_UPDATE withInt:tmpStart withInt:tmpCount withId:op->payload_]);
        ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, newOp);
        tmpCount = 0;
        tmpStart = position;
      }
      type = ADXAdapterHelper_POSITION_TYPE_INVISIBLE;
    }
    tmpCount++;
  }
  if (tmpCount != op->itemCount_) {
    id payload = JreRetainedLocalValue(op->payload_);
    [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:op];
    op = [self obtainUpdateOpWithInt:ADXAdapterHelper_UpdateOp_UPDATE withInt:tmpStart withInt:tmpCount withId:payload];
  }
  if (type == ADXAdapterHelper_POSITION_TYPE_INVISIBLE) {
    ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
  }
  else {
    ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
  }
}

void ADXAdapterHelper_dispatchAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op) {
  if (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_ == ADXAdapterHelper_UpdateOp_ADD || op->cmd_ == ADXAdapterHelper_UpdateOp_MOVE) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"should not dispatch add or move for pre layout");
  }
  jint tmpStart = ADXAdapterHelper_updatePositionWithPostponedWithInt_withInt_(self, op->positionStart_, op->cmd_);
  jint tmpCnt = 1;
  jint offsetPositionForPartial = op->positionStart_;
  jint positionMultiplier;
  switch (op->cmd_) {
    case ADXAdapterHelper_UpdateOp_UPDATE:
    positionMultiplier = 1;
    break;
    case ADXAdapterHelper_UpdateOp_REMOVE:
    positionMultiplier = 0;
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"op should be remove or update.", op));
  }
  for (jint p = 1; p < op->itemCount_; p++) {
    jint pos = op->positionStart_ + (positionMultiplier * p);
    jint updatedPos = ADXAdapterHelper_updatePositionWithPostponedWithInt_withInt_(self, pos, op->cmd_);
    jboolean continuous = false;
    switch (op->cmd_) {
      case ADXAdapterHelper_UpdateOp_UPDATE:
      continuous = (updatedPos == tmpStart + 1);
      break;
      case ADXAdapterHelper_UpdateOp_REMOVE:
      continuous = (updatedPos == tmpStart);
      break;
    }
    if (continuous) {
      tmpCnt++;
    }
    else {
      ADXAdapterHelper_UpdateOp *tmp = JreRetainedLocalValue([self obtainUpdateOpWithInt:op->cmd_ withInt:tmpStart withInt:tmpCnt withId:op->payload_]);
      [self dispatchFirstPassAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:tmp withInt:offsetPositionForPartial];
      [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:tmp];
      if (op->cmd_ == ADXAdapterHelper_UpdateOp_UPDATE) {
        offsetPositionForPartial += tmpCnt;
      }
      tmpStart = updatedPos;
      tmpCnt = 1;
    }
  }
  id payload = JreRetainedLocalValue(op->payload_);
  [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:op];
  if (tmpCnt > 0) {
    ADXAdapterHelper_UpdateOp *tmp = JreRetainedLocalValue([self obtainUpdateOpWithInt:op->cmd_ withInt:tmpStart withInt:tmpCnt withId:payload]);
    [self dispatchFirstPassAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp:tmp withInt:offsetPositionForPartial];
    [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:tmp];
  }
}

jint ADXAdapterHelper_updatePositionWithPostponedWithInt_withInt_(ADXAdapterHelper *self, jint pos, jint cmd) {
  jint count = [((JavaUtilArrayList *) nil_chk(self->mPostponedList_)) size];
  for (jint i = count - 1; i >= 0; i--) {
    ADXAdapterHelper_UpdateOp *postponed = JreRetainedLocalValue([self->mPostponedList_ getWithInt:i]);
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(postponed))->cmd_ == ADXAdapterHelper_UpdateOp_MOVE) {
      jint start;
      jint end;
      if (postponed->positionStart_ < postponed->itemCount_) {
        start = postponed->positionStart_;
        end = postponed->itemCount_;
      }
      else {
        start = postponed->itemCount_;
        end = postponed->positionStart_;
      }
      if (pos >= start && pos <= end) {
        if (start == postponed->positionStart_) {
          if (cmd == ADXAdapterHelper_UpdateOp_ADD) {
            postponed->itemCount_++;
          }
          else if (cmd == ADXAdapterHelper_UpdateOp_REMOVE) {
            postponed->itemCount_--;
          }
          pos++;
        }
        else {
          if (cmd == ADXAdapterHelper_UpdateOp_ADD) {
            postponed->positionStart_++;
          }
          else if (cmd == ADXAdapterHelper_UpdateOp_REMOVE) {
            postponed->positionStart_--;
          }
          pos--;
        }
      }
      else if (pos < postponed->positionStart_) {
        if (cmd == ADXAdapterHelper_UpdateOp_ADD) {
          postponed->positionStart_++;
          postponed->itemCount_++;
        }
        else if (cmd == ADXAdapterHelper_UpdateOp_REMOVE) {
          postponed->positionStart_--;
          postponed->itemCount_--;
        }
      }
    }
    else {
      if (postponed->positionStart_ <= pos) {
        if (postponed->cmd_ == ADXAdapterHelper_UpdateOp_ADD) {
          pos -= postponed->itemCount_;
        }
        else if (postponed->cmd_ == ADXAdapterHelper_UpdateOp_REMOVE) {
          pos += postponed->itemCount_;
        }
      }
      else {
        if (cmd == ADXAdapterHelper_UpdateOp_ADD) {
          postponed->positionStart_++;
        }
        else if (cmd == ADXAdapterHelper_UpdateOp_REMOVE) {
          postponed->positionStart_--;
        }
      }
    }
  }
  for (jint i = [self->mPostponedList_ size] - 1; i >= 0; i--) {
    ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([self->mPostponedList_ getWithInt:i]);
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_ == ADXAdapterHelper_UpdateOp_MOVE) {
      if (op->itemCount_ == op->positionStart_ || op->itemCount_ < 0) {
        [self->mPostponedList_ removeWithInt:i];
        [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:op];
      }
    }
    else if (op->itemCount_ <= 0) {
      [self->mPostponedList_ removeWithInt:i];
      [self recycleUpdateOpWithADXAdapterHelper_UpdateOp:op];
    }
  }
  return pos;
}

jboolean ADXAdapterHelper_canFindInPreLayoutWithInt_(ADXAdapterHelper *self, jint position) {
  jint count = [((JavaUtilArrayList *) nil_chk(self->mPostponedList_)) size];
  for (jint i = 0; i < count; i++) {
    ADXAdapterHelper_UpdateOp *op = JreRetainedLocalValue([self->mPostponedList_ getWithInt:i]);
    if (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_ == ADXAdapterHelper_UpdateOp_MOVE) {
      if ([self findPositionOffsetWithInt:op->itemCount_ withInt:i + 1] == position) {
        return true;
      }
    }
    else if (op->cmd_ == ADXAdapterHelper_UpdateOp_ADD) {
      jint end = op->positionStart_ + op->itemCount_;
      for (jint pos = op->positionStart_; pos < end; pos++) {
        if ([self findPositionOffsetWithInt:pos withInt:i + 1] == position) {
          return true;
        }
      }
    }
  }
  return false;
}

void ADXAdapterHelper_applyAddWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op) {
  ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(self, op);
}

void ADXAdapterHelper_postponeAndUpdateViewHoldersWithADXAdapterHelper_UpdateOp_(ADXAdapterHelper *self, ADXAdapterHelper_UpdateOp *op) {
  [((JavaUtilArrayList *) nil_chk(self->mPostponedList_)) addWithId:op];
  switch (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
    case ADXAdapterHelper_UpdateOp_ADD:
    [((id<ADXAdapterHelper_Callback>) nil_chk(self->mCallback_)) offsetPositionsForAddWithInt:op->positionStart_ withInt:op->itemCount_];
    break;
    case ADXAdapterHelper_UpdateOp_MOVE:
    [((id<ADXAdapterHelper_Callback>) nil_chk(self->mCallback_)) offsetPositionsForMoveWithInt:op->positionStart_ withInt:op->itemCount_];
    break;
    case ADXAdapterHelper_UpdateOp_REMOVE:
    [((id<ADXAdapterHelper_Callback>) nil_chk(self->mCallback_)) offsetPositionsForRemovingLaidOutOrNewViewWithInt:op->positionStart_ withInt:op->itemCount_];
    break;
    case ADXAdapterHelper_UpdateOp_UPDATE:
    [((id<ADXAdapterHelper_Callback>) nil_chk(self->mCallback_)) markViewHoldersUpdatedWithInt:op->positionStart_ withInt:op->itemCount_ withId:op->payload_];
    break;
    default:
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"Unknown update op type for ", op));
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXAdapterHelper)

@implementation ADXAdapterHelper_UpdateOp

- (instancetype)initWithInt:(jint)cmd
                    withInt:(jint)positionStart
                    withInt:(jint)itemCount
                     withId:(id)payload {
  ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(self, cmd, positionStart, itemCount, payload);
  return self;
}

- (NSString *)cmdToString {
  switch (cmd_) {
    case ADXAdapterHelper_UpdateOp_ADD:
    return @"add";
    case ADXAdapterHelper_UpdateOp_REMOVE:
    return @"rm";
    case ADXAdapterHelper_UpdateOp_UPDATE:
    return @"up";
    case ADXAdapterHelper_UpdateOp_MOVE:
    return @"mv";
  }
  return @"??";
}

- (NSString *)description {
  return JreStrcat("$C$$I$I$@C", JavaLangInteger_toHexStringWithInt_(JavaLangSystem_identityHashCodeWithId_(self)), '[', [self cmdToString], @",s:", positionStart_, @"c:", itemCount_, @",p:", payload_, ']');
}

- (jboolean)isEqual:(id)o {
  if (self == o) {
    return true;
  }
  if (!([o isKindOfClass:[ADXAdapterHelper_UpdateOp class]])) {
    return false;
  }
  ADXAdapterHelper_UpdateOp *op = (ADXAdapterHelper_UpdateOp *) cast_chk(o, [ADXAdapterHelper_UpdateOp class]);
  if (cmd_ != ((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
    return false;
  }
  if (cmd_ == ADXAdapterHelper_UpdateOp_MOVE && JavaLangMath_absWithInt_(itemCount_ - positionStart_) == 1) {
    if (itemCount_ == op->positionStart_ && positionStart_ == op->itemCount_) {
      return true;
    }
  }
  if (itemCount_ != op->itemCount_) {
    return false;
  }
  if (positionStart_ != op->positionStart_) {
    return false;
  }
  if (payload_ != nil) {
    if (![payload_ isEqual:op->payload_]) {
      return false;
    }
  }
  else if (op->payload_ != nil) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = cmd_;
  result = 31 * result + positionStart_;
  result = 31 * result + itemCount_;
  return result;
}

- (void)dealloc {
  RELEASE_(payload_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withId:);
  methods[1].selector = @selector(cmdToString);
  methods[2].selector = @selector(description);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ADD", "I", .constantValue.asInt = ADXAdapterHelper_UpdateOp_ADD, 0x18, -1, -1, -1, -1 },
    { "REMOVE", "I", .constantValue.asInt = ADXAdapterHelper_UpdateOp_REMOVE, 0x18, -1, -1, -1, -1 },
    { "UPDATE", "I", .constantValue.asInt = ADXAdapterHelper_UpdateOp_UPDATE, 0x18, -1, -1, -1, -1 },
    { "MOVE", "I", .constantValue.asInt = ADXAdapterHelper_UpdateOp_MOVE, 0x18, -1, -1, -1, -1 },
    { "POOL_SIZE", "I", .constantValue.asInt = ADXAdapterHelper_UpdateOp_POOL_SIZE, 0x18, -1, -1, -1, -1 },
    { "cmd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "positionStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "payload_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "itemCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIILNSObject;", "toString", "equals", "LNSObject;", "hashCode", "LADXAdapterHelper;" };
  static const J2ObjcClassInfo _ADXAdapterHelper_UpdateOp = { "UpdateOp", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x18, 5, 9, 5, -1, -1, -1, -1 };
  return &_ADXAdapterHelper_UpdateOp;
}

@end

void ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(ADXAdapterHelper_UpdateOp *self, jint cmd, jint positionStart, jint itemCount, id payload) {
  NSObject_init(self);
  self->cmd_ = cmd;
  self->positionStart_ = positionStart;
  self->itemCount_ = itemCount;
  JreStrongAssign(&self->payload_, payload);
}

ADXAdapterHelper_UpdateOp *new_ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(jint cmd, jint positionStart, jint itemCount, id payload) {
  J2OBJC_NEW_IMPL(ADXAdapterHelper_UpdateOp, initWithInt_withInt_withInt_withId_, cmd, positionStart, itemCount, payload)
}

ADXAdapterHelper_UpdateOp *create_ADXAdapterHelper_UpdateOp_initWithInt_withInt_withInt_withId_(jint cmd, jint positionStart, jint itemCount, id payload) {
  J2OBJC_CREATE_IMPL(ADXAdapterHelper_UpdateOp, initWithInt_withInt_withInt_withId_, cmd, positionStart, itemCount, payload)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXAdapterHelper_UpdateOp)

@implementation ADXAdapterHelper_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXRecyclerView_ViewHolder;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(findViewHolderWithInt:);
  methods[1].selector = @selector(offsetPositionsForRemovingInvisibleWithInt:withInt:);
  methods[2].selector = @selector(offsetPositionsForRemovingLaidOutOrNewViewWithInt:withInt:);
  methods[3].selector = @selector(markViewHoldersUpdatedWithInt:withInt:withId:);
  methods[4].selector = @selector(onDispatchFirstPassWithADXAdapterHelper_UpdateOp:);
  methods[5].selector = @selector(onDispatchSecondPassWithADXAdapterHelper_UpdateOp:);
  methods[6].selector = @selector(offsetPositionsForAddWithInt:withInt:);
  methods[7].selector = @selector(offsetPositionsForMoveWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "findViewHolder", "I", "offsetPositionsForRemovingInvisible", "II", "offsetPositionsForRemovingLaidOutOrNewView", "markViewHoldersUpdated", "IILNSObject;", "onDispatchFirstPass", "LADXAdapterHelper_UpdateOp;", "onDispatchSecondPass", "offsetPositionsForAdd", "offsetPositionsForMove", "LADXAdapterHelper;" };
  static const J2ObjcClassInfo _ADXAdapterHelper_Callback = { "Callback", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x608, 8, 0, 12, -1, -1, -1, -1 };
  return &_ADXAdapterHelper_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXAdapterHelper_Callback)
