//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\RootImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "BaseHasWidgets.h"
#include "ConverterFactory.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "RelativeLayout.h"
#include "RootImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/Collection.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@class JavaUtilHashMap;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASRootImpl () {
 @public
  id uiView_;
  ADRelativeLayout *relativeLayout_;
  JavaUtilHashMap *ruleMapper_;
  ASRootImpl_RootCommandBuilder *builder_;
  ASRootImpl_RootBean *bean_;
  ASRootImpl_RootCommandParamsBuilder *paramsBuilder_;
  ASRootImpl_RootParamsBean *paramsBean_;
}

- (void)addDellocHandler;

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADRelativeLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)addRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                         withInt:(jint)rule
                                          withId:(id)objValue;

- (void)addRemoveRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                               withInt:(jint)rule
                                                withId:(id)objValue;

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                            withInt:(jint)rule;

- (id)getRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                       withInt:(jint)rule;

- (id)getBoolRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                           withInt:(jint)rule;

- (jint)getInferredRuleWithInt:(jint)rule;

- (void)removeAllRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams;

- (id<JavaUtilMap>)invertMapWithJavaUtilMap:(id<JavaUtilMap>)map;

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                             withId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setupForInsets;

@end

J2OBJC_FIELD_SETTER(ASRootImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASRootImpl, relativeLayout_, ADRelativeLayout *)
J2OBJC_FIELD_SETTER(ASRootImpl, ruleMapper_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ASRootImpl, builder_, ASRootImpl_RootCommandBuilder *)
J2OBJC_FIELD_SETTER(ASRootImpl, bean_, ASRootImpl_RootBean *)
J2OBJC_FIELD_SETTER(ASRootImpl, paramsBuilder_, ASRootImpl_RootCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASRootImpl, paramsBean_, ASRootImpl_RootParamsBean *)

inline NSString *ASRootImpl_get_DELLOC_EVENT(void);
static NSString *ASRootImpl_DELLOC_EVENT;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASRootImpl, DELLOC_EVENT, NSString *)

__attribute__((unused)) static void ASRootImpl_addDellocHandler(ASRootImpl *self);

__attribute__((unused)) static void ASRootImpl_setWidgetOnNativeClass(ASRootImpl *self);

__attribute__((unused)) static void ASRootImpl_createLayoutParamsWithADView_(ASRootImpl *self, ADView *view);

__attribute__((unused)) static ADRelativeLayout_LayoutParams *ASRootImpl_getLayoutParamsWithADView_(ASRootImpl *self, ADView *view);

__attribute__((unused)) static void ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule, id objValue);

__attribute__((unused)) static void ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule, id objValue);

__attribute__((unused)) static void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule);

__attribute__((unused)) static id ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule);

__attribute__((unused)) static id ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule);

__attribute__((unused)) static jint ASRootImpl_getInferredRuleWithInt_(ASRootImpl *self, jint rule);

__attribute__((unused)) static void ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams);

__attribute__((unused)) static id<JavaUtilMap> ASRootImpl_invertMapWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> map);

__attribute__((unused)) static void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, id objValue);

__attribute__((unused)) static void ASRootImpl_nativeCreateWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASRootImpl_setupForInsets(ASRootImpl *self);

@interface ASRootImpl_DallocHandler () {
 @public
  __unsafe_unretained ASRootImpl *this$0_;
}

@end

@interface ASRootImpl_RemoveRule () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASRootImpl_RemoveRule, mapping_, id<JavaUtilMap>)

@interface ASRootImpl_RootExt () {
 @public
  __unsafe_unretained ASRootImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASRootImpl_RootExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASRootImpl_RootExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASRootImpl_RootCommandBuilder () {
 @public
  ASRootImpl *this$0_;
}

@end

@interface ASRootImpl_RootBean () {
 @public
  ASRootImpl *this$0_;
}

@end

@interface ASRootImpl_RootParamsBean () {
 @public
  ASRootImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASRootImpl)

NSString *ASRootImpl_LOCAL_NAME = @"layout";
NSString *ASRootImpl_GROUP_NAME = @"layout";

@implementation ASRootImpl

@synthesize uiView = uiView_;

- (void)addDellocHandler {
  ASRootImpl_addDellocHandler(self);
}

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ignoreGravity"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_above"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignBaseline"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignBottom"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignEnd"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignLeft"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentBottom"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentEnd"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentLeft"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentRight"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentStart"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignParentTop"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignRight"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignStart"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignTop"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_below"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_centerHorizontal"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_centerInParent"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_centerVertical"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toEndOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toLeftOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toRightOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_toStartOf"])) withTypeWithNSString:@"id"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_alignWithParentIfMissing"])) withTypeWithNSString:@"boolean"])) forChild]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"layout.removeRule", new_ASRootImpl_RemoveRule_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_removeRule"])) withTypeWithNSString:@"layout.removeRule"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_removeAllRules"])) withTypeWithNSString:@"boolean"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRootImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASRootImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASRootImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASRootImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  relativeLayout_ = new_ASRootImpl_RootExt_initWithASRootImpl_(self);
  ASRootImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASRootImpl_addDellocHandler(self);
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASViewImpl_setLayoutDirectionWithASIWidget_withId_(self, JavaLangInteger_valueOfWithInt_(ADView_LAYOUT_DIRECTION_RTL));
  }
  else {
    ASViewImpl_setLayoutDirectionWithASIWidget_withId_(self, JavaLangInteger_valueOfWithInt_(ADView_LAYOUT_DIRECTION_LTR));
  }
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASRootImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASRootImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return relativeLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADRelativeLayout *) nil_chk(relativeLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADRelativeLayout *) nil_chk(relativeLayout_)) getChildCount]) {
    [((ADRelativeLayout *) nil_chk(relativeLayout_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASRootImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) addViewWithADView:view];
    }
    else {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASRootImpl_createLayoutParamsWithADView_(self, view);
}

- (ADRelativeLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASRootImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADRelativeLayout_LayoutParams *layoutParams = ASRootImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_above", @"layout_alignBaseline", @"layout_alignBottom", @"layout_alignEnd", @"layout_alignLeft", @"layout_alignParentBottom", @"layout_alignParentEnd", @"layout_alignParentLeft", @"layout_alignParentRight", @"layout_alignParentStart", @"layout_alignParentTop", @"layout_alignRight", @"layout_alignStart", @"layout_alignTop", @"layout_below", @"layout_centerHorizontal", @"layout_centerInParent", @"layout_centerVertical", @"layout_toEndOf", @"layout_toLeftOf", @"layout_toRightOf", @"layout_toStartOf", @"layout_alignWithParentIfMissing", @"layout_removeRule", @"layout_removeAllRules" }, 27)) {
    case 0:
    ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ABOVE, objValue);
    }
    break;
    case 3:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_BASELINE, objValue);
    }
    break;
    case 4:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_BOTTOM, objValue);
    }
    break;
    case 5:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_END, objValue);
    }
    break;
    case 6:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_LEFT, objValue);
    }
    break;
    case 7:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_BOTTOM, objValue);
    }
    break;
    case 8:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_END, objValue);
    }
    break;
    case 9:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_LEFT, objValue);
    }
    break;
    case 10:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_RIGHT, objValue);
    }
    break;
    case 11:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_START, objValue);
    }
    break;
    case 12:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_TOP, objValue);
    }
    break;
    case 13:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_RIGHT, objValue);
    }
    break;
    case 14:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_START, objValue);
    }
    break;
    case 15:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_ALIGN_TOP, objValue);
    }
    break;
    case 16:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_BELOW, objValue);
    }
    break;
    case 17:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_CENTER_HORIZONTAL, objValue);
    }
    break;
    case 18:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_CENTER_IN_PARENT, objValue);
    }
    break;
    case 19:
    {
      ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_CENTER_VERTICAL, objValue);
    }
    break;
    case 20:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_END_OF, objValue);
    }
    break;
    case 21:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_LEFT_OF, objValue);
    }
    break;
    case 22:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_RIGHT_OF, objValue);
    }
    break;
    case 23:
    {
      ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, ADRelativeLayout_START_OF, objValue);
    }
    break;
    case 24:
    {
      ((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->alignWithParent_ = [((JavaLangBoolean *) nil_chk(((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class])))) booleanValue];
    }
    break;
    case 25:
    {
      ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(self, layoutParams, objValue);
    }
    break;
    case 26:
    {
      ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(self, layoutParams);
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADRelativeLayout_LayoutParams *layoutParams = ASRootImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_above", @"layout_alignBaseline", @"layout_alignBottom", @"layout_alignEnd", @"layout_alignLeft", @"layout_alignParentBottom", @"layout_alignParentEnd", @"layout_alignParentLeft", @"layout_alignParentRight", @"layout_alignParentStart", @"layout_alignParentTop", @"layout_alignRight", @"layout_alignStart", @"layout_alignTop", @"layout_below", @"layout_centerHorizontal", @"layout_centerInParent", @"layout_centerVertical", @"layout_toEndOf", @"layout_toLeftOf", @"layout_toRightOf", @"layout_toStartOf", @"layout_alignWithParentIfMissing" }, 25)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->height_);
    case 2:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ABOVE);
    }
    case 3:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_BASELINE);
    }
    case 4:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_BOTTOM);
    }
    case 5:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_END);
    }
    case 6:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_LEFT);
    }
    case 7:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_BOTTOM);
    }
    case 8:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_END);
    }
    case 9:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_LEFT);
    }
    case 10:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_RIGHT);
    }
    case 11:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_START);
    }
    case 12:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_PARENT_TOP);
    }
    case 13:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_RIGHT);
    }
    case 14:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_START);
    }
    case 15:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_ALIGN_TOP);
    }
    case 16:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_BELOW);
    }
    case 17:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_CENTER_HORIZONTAL);
    }
    case 18:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_CENTER_IN_PARENT);
    }
    case 19:
    {
      return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_CENTER_VERTICAL);
    }
    case 20:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_END_OF);
    }
    case 21:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_LEFT_OF);
    }
    case 22:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_RIGHT_OF);
    }
    case 23:
    {
      return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, ADRelativeLayout_START_OF);
    }
    case 24:
    {
      return JavaLangBoolean_valueOfWithBoolean_(((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams))->alignWithParent_);
    }
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASRootImpl_RootExt *) nil_chk(((ASRootImpl_RootExt *) cast_chk(relativeLayout_, [ASRootImpl_RootExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity", @"ignoreGravity" }, 2)) {
    case 0:
    {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) setGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADRelativeLayout *) nil_chk(relativeLayout_)) setIgnoreGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"gravity" }, 1)) {
    case 0:
    {
      return JavaLangInteger_valueOfWithInt_([((ADRelativeLayout *) nil_chk(relativeLayout_)) getGravity]);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)addRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                         withInt:(jint)rule
                                          withId:(id)objValue {
  ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, rule, objValue);
}

- (void)addRemoveRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                               withInt:(jint)rule
                                                withId:(id)objValue {
  ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(self, layoutParams, rule, objValue);
}

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                            withInt:(jint)rule {
  ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
}

- (id)getRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                       withInt:(jint)rule {
  return ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
}

- (id)getBoolRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                           withInt:(jint)rule {
  return ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
}

- (jint)getInferredRuleWithInt:(jint)rule {
  return ASRootImpl_getInferredRuleWithInt_(self, rule);
}

- (void)removeAllRulesWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams {
  ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(self, layoutParams);
}

- (id<JavaUtilMap>)invertMapWithJavaUtilMap:(id<JavaUtilMap>)map {
  return ASRootImpl_invertMapWithJavaUtilMap_(self, map);
}

- (void)removeRuleWithADRelativeLayout_LayoutParams:(ADRelativeLayout_LayoutParams *)layoutParams
                                             withId:(id)objValue {
  ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(self, layoutParams, objValue);
}

- (void)measure {
  jint width = ASPluginInvoker_getScreenWidth();
  jint height = ASPluginInvoker_getScreenHeight();
  [self measureWithInt:0 withInt:0 withInt:width withInt:height];
}

- (void)measureWithInt:(jint)x
               withInt:(jint)y
               withInt:(jint)width
               withInt:(jint)height {
  jint wmeasureSpec = ADView_MeasureSpec_EXACTLY;
  jint hmeasureSpec = ADView_MeasureSpec_EXACTLY;
  if (height == -2) {
    hmeasureSpec = ADView_MeasureSpec_UNSPECIFIED;
  }
  if (width == -2) {
    wmeasureSpec = ADView_MeasureSpec_UNSPECIFIED;
  }
  [((ADRelativeLayout *) nil_chk(relativeLayout_)) measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(width, wmeasureSpec) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(height, hmeasureSpec)];
  if (height == -2) {
    height = [((ADRelativeLayout *) nil_chk(relativeLayout_)) getMeasuredHeight];
  }
  if (width == -2) {
    width = [((ADRelativeLayout *) nil_chk(relativeLayout_)) getMeasuredWidth];
  }
  [((ADRelativeLayout *) nil_chk(relativeLayout_)) layoutWithInt:x withInt:y withInt:x + width withInt:y + height];
}

- (void)displayErrorIndicator {
  id<ASIWidget> widget = [self findWidgetByIdWithNSString:@"@+id/errorBanner"];
  if (widget != nil) {
    [widget setVisibleWithBoolean:true];
  }
  else {
    id<ASIWidget> button = ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(@"TextView", @"TextView", self, false);
    [((id<ASIWidget>) nil_chk(button)) setIdWithNSString:@"@+id/errorBanner"];
    [button setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"style") withId:@"@style/error_banner" withBoolean:false];
    [button setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_(@"TextView", @"onClick") withId:@"onError(data = . from fatalErrors->view)" withBoolean:false];
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADRelativeLayout *) nil_chk(relativeLayout_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASRootImpl_RootBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASRootImpl_RootBean_initWithASRootImpl_(self);
  }
  return bean_;
}

- (ASRootImpl_RootCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASRootImpl_RootCommandBuilder_initWithASRootImpl_(self);
  }
  return builder_;
}

- (ASRootImpl_RootParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASRootImpl_RootParamsBean_initWithASRootImpl_(self);
  }
  return paramsBean_;
}

- (ASRootImpl_RootCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASRootImpl_RootCommandParamsBuilder_initWithASRootImpl_(self);
  }
  return paramsBuilder_;
}

- (void)createViewWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASRootImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)setupForInsets {
  ASRootImpl_setupForInsets(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADRelativeLayout_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 30, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 31, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 32, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 35, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x2, 28, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 42, 1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 43, 36, -1, 44, -1, -1 },
    { NULL, "V", 0x2, 45, 36, -1, 44, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addDellocHandler);
  methods[1].selector = @selector(loadAttributesWithNSString:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithNSString:);
  methods[4].selector = @selector(initWithNSString:withNSString:);
  methods[5].selector = @selector(newInstance);
  methods[6].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[7].selector = @selector(setWidgetOnNativeClass);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(removeWithASIWidget:);
  methods[10].selector = @selector(removeWithInt:);
  methods[11].selector = @selector(addWithASIWidget:withInt:);
  methods[12].selector = @selector(createLayoutParamsWithADView:);
  methods[13].selector = @selector(getLayoutParamsWithADView:);
  methods[14].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[15].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[16].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[17].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[18].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[19].selector = @selector(asNativeWidget);
  methods[20].selector = @selector(checkIosVersionWithNSString:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(addRuleWithADRelativeLayout_LayoutParams:withInt:withId:);
  methods[24].selector = @selector(addRemoveRuleWithADRelativeLayout_LayoutParams:withInt:withId:);
  methods[25].selector = @selector(removeRuleWithADRelativeLayout_LayoutParams:withInt:);
  methods[26].selector = @selector(getRuleWithADRelativeLayout_LayoutParams:withInt:);
  methods[27].selector = @selector(getBoolRuleWithADRelativeLayout_LayoutParams:withInt:);
  methods[28].selector = @selector(getInferredRuleWithInt:);
  methods[29].selector = @selector(removeAllRulesWithADRelativeLayout_LayoutParams:);
  methods[30].selector = @selector(invertMapWithJavaUtilMap:);
  methods[31].selector = @selector(removeRuleWithADRelativeLayout_LayoutParams:withId:);
  methods[32].selector = @selector(measure);
  methods[33].selector = @selector(measureWithInt:withInt:withInt:withInt:);
  methods[34].selector = @selector(displayErrorIndicator);
  methods[35].selector = @selector(setIdWithNSString:);
  methods[36].selector = @selector(getPluginWithNSString:);
  methods[37].selector = @selector(getBean);
  methods[38].selector = @selector(getBuilder);
  methods[39].selector = @selector(getParamsBean);
  methods[40].selector = @selector(getParamsBuilder);
  methods[41].selector = @selector(createViewWithJavaUtilMap:);
  methods[42].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[43].selector = @selector(setupForInsets);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 46, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 47, -1, -1 },
    { "relativeLayout_", "LADRelativeLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DELLOC_EVENT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 48, -1, -1 },
    { "ruleMapper_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 49, -1 },
    { "builder_", "LASRootImpl_RootCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASRootImpl_RootBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASRootImpl_RootCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASRootImpl_RootParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "addRule", "LADRelativeLayout_LayoutParams;ILNSObject;", "addRemoveRule", "removeRule", "LADRelativeLayout_LayoutParams;I", "getRule", "getBoolRule", "getInferredRule", "removeAllRules", "LADRelativeLayout_LayoutParams;", "invertMap", "LJavaUtilMap;", "<A:Ljava/lang/Object;B:Ljava/lang/Object;>(Ljava/util/Map<TA;TB;>;)Ljava/util/Map<TB;TA;>;", "LADRelativeLayout_LayoutParams;LNSObject;", "measure", "IIII", "setId", "getPlugin", "createView", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "nativeCreate", &ASRootImpl_LOCAL_NAME, &ASRootImpl_GROUP_NAME, &ASRootImpl_DELLOC_EVENT, "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRootImpl_DallocHandler;LASRootImpl_RemoveRule;LASRootImpl_RootExt;LASRootImpl_RootCommandBuilder;LASRootImpl_RootBean;LASRootImpl_RootParamsBean;LASRootImpl_RootCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASRootImpl = { "RootImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 44, 10, -1, 50, -1, -1, -1 };
  return &_ASRootImpl;
}

+ (void)initialize {
  if (self == [ASRootImpl class]) {
    ASRootImpl_DELLOC_EVENT = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    J2OBJC_SET_INITIALIZED(ASRootImpl)
  }
}

@end

void ASRootImpl_addDellocHandler(ASRootImpl *self) {
  [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:ASRootImpl_DELLOC_EVENT withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ create_ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(self, ASRootImpl_DELLOC_EVENT) } count:1 type:ASEventBusHandler_class_()]];
}

void ASRootImpl_init(ASRootImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRootImpl_GROUP_NAME, ASRootImpl_LOCAL_NAME);
  self->ruleMapper_ = new_JavaUtilHashMap_init();
  {
    (void) [self->ruleMapper_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ABOVE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BASELINE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_BELOW)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_HORIZONTAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_VERTICAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_IN_PARENT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_END_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_LEFT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_RIGHT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_START_OF)];
  }
}

ASRootImpl *new_ASRootImpl_init() {
  J2OBJC_NEW_IMPL(ASRootImpl, init)
}

ASRootImpl *create_ASRootImpl_init() {
  J2OBJC_CREATE_IMPL(ASRootImpl, init)
}

void ASRootImpl_initWithNSString_(ASRootImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASRootImpl_GROUP_NAME, localname);
  self->ruleMapper_ = new_JavaUtilHashMap_init();
  {
    (void) [self->ruleMapper_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ABOVE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BASELINE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_BELOW)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_HORIZONTAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_VERTICAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_IN_PARENT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_END_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_LEFT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_RIGHT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_START_OF)];
  }
}

ASRootImpl *new_ASRootImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASRootImpl, initWithNSString_, localname)
}

ASRootImpl *create_ASRootImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRootImpl, initWithNSString_, localname)
}

void ASRootImpl_initWithNSString_withNSString_(ASRootImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
  self->ruleMapper_ = new_JavaUtilHashMap_init();
  {
    (void) [self->ruleMapper_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ABOVE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BASELINE)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_BOTTOM)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_END)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_LEFT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_PARENT_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_RIGHT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_START)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_ALIGN_TOP)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_BELOW)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_HORIZONTAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_VERTICAL)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_CENTER_IN_PARENT)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_END_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_LEFT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_RIGHT_OF)];
    (void) [((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_(ADRelativeLayout_START_OF)];
  }
}

ASRootImpl *new_ASRootImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASRootImpl, initWithNSString_withNSString_, groupName, localname)
}

ASRootImpl *create_ASRootImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASRootImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASRootImpl_setWidgetOnNativeClass(ASRootImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASRootImpl_createLayoutParamsWithADView_(ASRootImpl *self, ADView *view) {
  ADRelativeLayout_LayoutParams *layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  layoutParams = (ADRelativeLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADRelativeLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADRelativeLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADRelativeLayout_LayoutParams *ASRootImpl_getLayoutParamsWithADView_(ASRootImpl *self, ADView *view) {
  return (ADRelativeLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADRelativeLayout_LayoutParams class]);
}

void ASRootImpl_addRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule, id objValue) {
  [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:rule withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASRootImpl_addRemoveRuleWithADRelativeLayout_LayoutParams_withInt_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) addRuleWithInt:rule];
  }
  else {
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
  }
}

void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule) {
  {
    [((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) removeRuleWithInt:rule];
  }
}

id ASRootImpl_getRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule) {
  {
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    return JavaLangInteger_valueOfWithInt_([((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) getRuleWithInt:rule]);
  }
}

id ASRootImpl_getBoolRuleWithADRelativeLayout_LayoutParams_withInt_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, jint rule) {
  {
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    return JavaLangBoolean_valueOfWithBoolean_([((ADRelativeLayout_LayoutParams *) nil_chk(layoutParams)) getRuleWithInt:rule] != 0);
  }
}

jint ASRootImpl_getInferredRuleWithInt_(ASRootImpl *self, jint rule) {
  if (rule == ADRelativeLayout_ALIGN_PARENT_END) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_PARENT_LEFT : ADRelativeLayout_ALIGN_PARENT_RIGHT;
  }
  if (rule == ADRelativeLayout_ALIGN_PARENT_START) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_PARENT_RIGHT : ADRelativeLayout_ALIGN_PARENT_LEFT;
  }
  if (rule == ADRelativeLayout_END_OF) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_LEFT_OF : ADRelativeLayout_RIGHT_OF;
  }
  if (rule == ADRelativeLayout_START_OF) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_RIGHT_OF : ADRelativeLayout_LEFT_OF;
  }
  if (rule == ADRelativeLayout_ALIGN_END) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_LEFT : ADRelativeLayout_ALIGN_RIGHT;
  }
  if (rule == ADRelativeLayout_ALIGN_START) {
    rule = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? ADRelativeLayout_ALIGN_RIGHT : ADRelativeLayout_ALIGN_LEFT;
  }
  return rule;
}

void ASRootImpl_removeAllRulesWithADRelativeLayout_LayoutParams_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams) {
  ASRootImpl_RemoveRule *removeRule = (ASRootImpl_RemoveRule *) cast_chk(ASConverterFactory_getWithNSString_(@"RelativeLayout.removeRule"), [ASRootImpl_RemoveRule class]);
  id<JavaUtilCollection> keys = [((id<JavaUtilMap>) nil_chk(((ASRootImpl_RemoveRule *) nil_chk(removeRule))->mapping_)) keySet];
  for (NSString * __strong key in nil_chk(keys)) {
    jint rule = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) getWithId:key])) intValue];
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
    rule = ASRootImpl_getInferredRuleWithInt_(self, rule);
    ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, rule);
  }
}

id<JavaUtilMap> ASRootImpl_invertMapWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> map) {
  id<JavaUtilMap> reverseMap = new_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(map)) entrySet])) {
    (void) [reverseMap putWithId:[((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue] withId:[entry_ getKey]];
  }
  return reverseMap;
}

void ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withId_(ASRootImpl *self, ADRelativeLayout_LayoutParams *layoutParams, id objValue) {
  ASRootImpl_RemoveRule *removeRule = (ASRootImpl_RemoveRule *) cast_chk(ASConverterFactory_getWithNSString_(@"RelativeLayout.removeRule"), [ASRootImpl_RemoveRule class]);
  jint rule = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  id<JavaUtilMap> reverseMap = ASRootImpl_invertMapWithJavaUtilMap_(self, ((ASRootImpl_RemoveRule *) nil_chk(removeRule))->mapping_);
  id<JavaUtilCollection> flags = [removeRule getReverseMappingFlags];
  for (JavaLangInteger *boxed__ in nil_chk(flags)) {
    jint flag = [((JavaLangInteger *) nil_chk(boxed__)) intValue];
    if ((rule & flag) != 0) {
      jint finalRule = [((JavaLangInteger *) nil_chk([((JavaUtilHashMap *) nil_chk(self->ruleMapper_)) getWithId:[((id<JavaUtilMap>) nil_chk(reverseMap)) getWithId:JavaLangInteger_valueOfWithInt_(flag)]])) intValue];
      ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, finalRule);
      finalRule = ASRootImpl_getInferredRuleWithInt_(self, finalRule);
      ASRootImpl_removeRuleWithADRelativeLayout_LayoutParams_withInt_(self, layoutParams, finalRule);
    }
  }
}

void ASRootImpl_nativeCreateWithJavaUtilMap_(ASRootImpl *self, id<JavaUtilMap> params) {
  [self createViewWithJavaUtilMap:params];
  [((id<ASIFragment>) nil_chk(self->fragment_)) setRootWidgetWithASIWidget:self];
}

void ASRootImpl_setupForInsets(ASRootImpl *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl)

@implementation ASRootImpl_DallocHandler

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$
                      withNSString:(NSString *)type {
  ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  [((ADRelativeLayout *) nil_chk(this$0_->relativeLayout_)) release__];
}

- (void)__javaClone:(ASRootImpl_DallocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRootImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRootImpl;LNSString;", "doPerform", "LNSObject;", "LASRootImpl;" };
  static const J2ObjcClassInfo _ASRootImpl_DallocHandler = { "DallocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASRootImpl_DallocHandler;
}

@end

void ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(ASRootImpl_DallocHandler *self, ASRootImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASRootImpl_DallocHandler *new_ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(ASRootImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASRootImpl_DallocHandler, initWithASRootImpl_withNSString_, outer$, type)
}

ASRootImpl_DallocHandler *create_ASRootImpl_DallocHandler_initWithASRootImpl_withNSString_(ASRootImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASRootImpl_DallocHandler, initWithASRootImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_DallocHandler)

@implementation ASRootImpl_RemoveRule

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASRootImpl_RemoveRule_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASRootImpl;" };
  static const J2ObjcClassInfo _ASRootImpl_RemoveRule = { "RemoveRule", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASRootImpl_RemoveRule;
}

@end

void ASRootImpl_RemoveRule_init(ASRootImpl_RemoveRule *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"layout_above" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignBaseline" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignBottom" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignEnd" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignLeft" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x16)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentBottom" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x32)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentEnd" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x64)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentLeft" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x128)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentRight" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x256)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentStart" withId:JavaLangInteger_valueOfWithInt_(-(jint) 0x1024)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignParentTop" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignRight" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignStart" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_alignTop" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_below" withId:JavaLangInteger_valueOfWithInt_((jint) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_centerHorizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x16)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_centerInParent" withId:JavaLangInteger_valueOfWithInt_((jint) 0x32)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_centerVertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x64)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toEndOf" withId:JavaLangInteger_valueOfWithInt_((jint) 0x128)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toLeftOf" withId:JavaLangInteger_valueOfWithInt_((jint) 0x256)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toRightOf" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1024)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"layout_toStartOf" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2048)];
  }
}

ASRootImpl_RemoveRule *new_ASRootImpl_RemoveRule_init() {
  J2OBJC_NEW_IMPL(ASRootImpl_RemoveRule, init)
}

ASRootImpl_RemoveRule *create_ASRootImpl_RemoveRule_init() {
  J2OBJC_CREATE_IMPL(ASRootImpl_RemoveRule, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RemoveRule)

@implementation ASRootImpl_RootExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$ {
  ASRootImpl_RootExt_initWithASRootImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASRootImpl_RootExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASRootImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASRootImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASRootImpl_RootExt = { "RootExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASRootImpl_RootExt;
}

@end

void ASRootImpl_RootExt_initWithASRootImpl_(ASRootImpl_RootExt *self, ASRootImpl *outer$) {
  self->this$0_ = outer$;
  ADRelativeLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASRootImpl_RootExt *new_ASRootImpl_RootExt_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRootImpl_RootExt, initWithASRootImpl_, outer$)
}

ASRootImpl_RootExt *create_ASRootImpl_RootExt_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRootImpl_RootExt, initWithASRootImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RootExt)

@implementation ASRootImpl_RootCommandBuilder

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$ {
  ASRootImpl_RootCommandBuilder_initWithASRootImpl_(self, outer$);
  return self;
}

- (ASRootImpl_RootCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASRootImpl_RootCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandBuilder *)setIgnoreGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ignoreGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRootImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetGravity);
  methods[3].selector = @selector(getGravity);
  methods[4].selector = @selector(setGravityWithNSString:);
  methods[5].selector = @selector(setIgnoreGravityWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRootImpl;", "execute", "Z", "setGravity", "LNSString;", "setIgnoreGravity", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/layout/RootImpl$RootCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASRootImpl_RootCommandBuilder = { "RootCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 6, 1, 0, -1, -1, 6, -1 };
  return &_ASRootImpl_RootCommandBuilder;
}

@end

void ASRootImpl_RootCommandBuilder_initWithASRootImpl_(ASRootImpl_RootCommandBuilder *self, ASRootImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASRootImpl_RootCommandBuilder *new_ASRootImpl_RootCommandBuilder_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRootImpl_RootCommandBuilder, initWithASRootImpl_, outer$)
}

ASRootImpl_RootCommandBuilder *create_ASRootImpl_RootCommandBuilder_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRootImpl_RootCommandBuilder, initWithASRootImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RootCommandBuilder)

@implementation ASRootImpl_RootBean

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$ {
  ASRootImpl_RootBean_initWithASRootImpl_(self, outer$);
  return self;
}

- (id)getGravity {
  return [((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (void)setIgnoreGravityWithNSString:(NSString *)value {
  (void) [((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([((ASRootImpl_RootCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIgnoreGravityWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRootImpl:);
  methods[1].selector = @selector(getGravity);
  methods[2].selector = @selector(setGravityWithNSString:);
  methods[3].selector = @selector(setIgnoreGravityWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRootImpl;", "setGravity", "LNSString;", "setIgnoreGravity" };
  static const J2ObjcClassInfo _ASRootImpl_RootBean = { "RootBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 4, 1, 0, -1, -1, -1, -1 };
  return &_ASRootImpl_RootBean;
}

@end

void ASRootImpl_RootBean_initWithASRootImpl_(ASRootImpl_RootBean *self, ASRootImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASRootImpl_RootBean *new_ASRootImpl_RootBean_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRootImpl_RootBean, initWithASRootImpl_, outer$)
}

ASRootImpl_RootBean *create_ASRootImpl_RootBean_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRootImpl_RootBean, initWithASRootImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RootBean)

@implementation ASRootImpl_RootParamsBean

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$ {
  ASRootImpl_RootParamsBean_initWithASRootImpl_(self, outer$);
  return self;
}

- (id)getLayoutAboveWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAbove])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAbove];
}

- (void)setLayoutAboveWithASIWidget:(id<ASIWidget>)w
                       withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAboveWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignBaselineWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignBaseline])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignBaseline];
}

- (void)setLayoutAlignBaselineWithASIWidget:(id<ASIWidget>)w
                               withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignBaselineWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignBottomWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignBottom])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignBottom];
}

- (void)setLayoutAlignBottomWithASIWidget:(id<ASIWidget>)w
                             withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignBottomWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignEndWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignEnd])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignEnd];
}

- (void)setLayoutAlignEndWithASIWidget:(id<ASIWidget>)w
                          withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignEndWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignLeftWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignLeft])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignLeft];
}

- (void)setLayoutAlignLeftWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignLeftWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignParentBottomWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignParentBottom])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignParentBottom];
}

- (void)setLayoutAlignParentBottomWithASIWidget:(id<ASIWidget>)w
                                    withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignParentBottomWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignParentEndWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignParentEnd])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignParentEnd];
}

- (void)setLayoutAlignParentEndWithASIWidget:(id<ASIWidget>)w
                                 withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignParentEndWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignParentLeftWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignParentLeft])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignParentLeft];
}

- (void)setLayoutAlignParentLeftWithASIWidget:(id<ASIWidget>)w
                                  withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignParentLeftWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignParentRightWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignParentRight])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignParentRight];
}

- (void)setLayoutAlignParentRightWithASIWidget:(id<ASIWidget>)w
                                   withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignParentRightWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignParentStartWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignParentStart])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignParentStart];
}

- (void)setLayoutAlignParentStartWithASIWidget:(id<ASIWidget>)w
                                   withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignParentStartWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignParentTopWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignParentTop])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignParentTop];
}

- (void)setLayoutAlignParentTopWithASIWidget:(id<ASIWidget>)w
                                 withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignParentTopWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignRightWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignRight])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignRight];
}

- (void)setLayoutAlignRightWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignRightWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignStartWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignStart])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignStart];
}

- (void)setLayoutAlignStartWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignStartWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutAlignTopWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignTop])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutAlignTop];
}

- (void)setLayoutAlignTopWithASIWidget:(id<ASIWidget>)w
                          withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignTopWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutBelowWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutBelow])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutBelow];
}

- (void)setLayoutBelowWithASIWidget:(id<ASIWidget>)w
                       withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutBelowWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutCenterHorizontalWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutCenterHorizontal])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutCenterHorizontal];
}

- (void)setLayoutCenterHorizontalWithASIWidget:(id<ASIWidget>)w
                                   withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutCenterHorizontalWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutCenterInParentWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutCenterInParent])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutCenterInParent];
}

- (void)setLayoutCenterInParentWithASIWidget:(id<ASIWidget>)w
                                 withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutCenterInParentWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutCenterVerticalWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutCenterVertical])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutCenterVertical];
}

- (void)setLayoutCenterVerticalWithASIWidget:(id<ASIWidget>)w
                                 withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutCenterVerticalWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutToEndOfWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutToEndOf])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutToEndOf];
}

- (void)setLayoutToEndOfWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutToEndOfWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutToLeftOfWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutToLeftOf])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutToLeftOf];
}

- (void)setLayoutToLeftOfWithASIWidget:(id<ASIWidget>)w
                          withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutToLeftOfWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutToRightOfWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutToRightOf])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutToRightOf];
}

- (void)setLayoutToRightOfWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutToRightOfWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)getLayoutToStartOfWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutToStartOf])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) getLayoutToStartOf];
}

- (void)setLayoutToStartOfWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutToStartOfWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (id)isLayoutAlignWithParentIfMissingWithASIWidget:(id<ASIWidget>)w {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  id<JavaUtilMap> command = [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) tryGetLayoutAlignWithParentIfMissing])) getCommand];
  (void) [layoutParams putWithId:@"layoutParams" withId:command];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return [((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) isLayoutAlignWithParentIfMissing];
}

- (void)setLayoutAlignWithParentIfMissingWithASIWidget:(id<ASIWidget>)w
                                           withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutAlignWithParentIfMissingWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutRemoveRuleWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutRemoveRuleWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutRemoveAllRulesWithASIWidget:(id<ASIWidget>)w
                                 withBoolean:(jboolean)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([((ASRootImpl_RootCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutRemoveAllRulesWithBoolean:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 28, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 42, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 46, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 48, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRootImpl:);
  methods[1].selector = @selector(getLayoutAboveWithASIWidget:);
  methods[2].selector = @selector(setLayoutAboveWithASIWidget:withNSString:);
  methods[3].selector = @selector(getLayoutAlignBaselineWithASIWidget:);
  methods[4].selector = @selector(setLayoutAlignBaselineWithASIWidget:withNSString:);
  methods[5].selector = @selector(getLayoutAlignBottomWithASIWidget:);
  methods[6].selector = @selector(setLayoutAlignBottomWithASIWidget:withNSString:);
  methods[7].selector = @selector(getLayoutAlignEndWithASIWidget:);
  methods[8].selector = @selector(setLayoutAlignEndWithASIWidget:withNSString:);
  methods[9].selector = @selector(getLayoutAlignLeftWithASIWidget:);
  methods[10].selector = @selector(setLayoutAlignLeftWithASIWidget:withNSString:);
  methods[11].selector = @selector(isLayoutAlignParentBottomWithASIWidget:);
  methods[12].selector = @selector(setLayoutAlignParentBottomWithASIWidget:withBoolean:);
  methods[13].selector = @selector(isLayoutAlignParentEndWithASIWidget:);
  methods[14].selector = @selector(setLayoutAlignParentEndWithASIWidget:withBoolean:);
  methods[15].selector = @selector(isLayoutAlignParentLeftWithASIWidget:);
  methods[16].selector = @selector(setLayoutAlignParentLeftWithASIWidget:withBoolean:);
  methods[17].selector = @selector(isLayoutAlignParentRightWithASIWidget:);
  methods[18].selector = @selector(setLayoutAlignParentRightWithASIWidget:withBoolean:);
  methods[19].selector = @selector(isLayoutAlignParentStartWithASIWidget:);
  methods[20].selector = @selector(setLayoutAlignParentStartWithASIWidget:withBoolean:);
  methods[21].selector = @selector(isLayoutAlignParentTopWithASIWidget:);
  methods[22].selector = @selector(setLayoutAlignParentTopWithASIWidget:withBoolean:);
  methods[23].selector = @selector(getLayoutAlignRightWithASIWidget:);
  methods[24].selector = @selector(setLayoutAlignRightWithASIWidget:withNSString:);
  methods[25].selector = @selector(getLayoutAlignStartWithASIWidget:);
  methods[26].selector = @selector(setLayoutAlignStartWithASIWidget:withNSString:);
  methods[27].selector = @selector(getLayoutAlignTopWithASIWidget:);
  methods[28].selector = @selector(setLayoutAlignTopWithASIWidget:withNSString:);
  methods[29].selector = @selector(getLayoutBelowWithASIWidget:);
  methods[30].selector = @selector(setLayoutBelowWithASIWidget:withNSString:);
  methods[31].selector = @selector(isLayoutCenterHorizontalWithASIWidget:);
  methods[32].selector = @selector(setLayoutCenterHorizontalWithASIWidget:withBoolean:);
  methods[33].selector = @selector(isLayoutCenterInParentWithASIWidget:);
  methods[34].selector = @selector(setLayoutCenterInParentWithASIWidget:withBoolean:);
  methods[35].selector = @selector(isLayoutCenterVerticalWithASIWidget:);
  methods[36].selector = @selector(setLayoutCenterVerticalWithASIWidget:withBoolean:);
  methods[37].selector = @selector(getLayoutToEndOfWithASIWidget:);
  methods[38].selector = @selector(setLayoutToEndOfWithASIWidget:withNSString:);
  methods[39].selector = @selector(getLayoutToLeftOfWithASIWidget:);
  methods[40].selector = @selector(setLayoutToLeftOfWithASIWidget:withNSString:);
  methods[41].selector = @selector(getLayoutToRightOfWithASIWidget:);
  methods[42].selector = @selector(setLayoutToRightOfWithASIWidget:withNSString:);
  methods[43].selector = @selector(getLayoutToStartOfWithASIWidget:);
  methods[44].selector = @selector(setLayoutToStartOfWithASIWidget:withNSString:);
  methods[45].selector = @selector(isLayoutAlignWithParentIfMissingWithASIWidget:);
  methods[46].selector = @selector(setLayoutAlignWithParentIfMissingWithASIWidget:withBoolean:);
  methods[47].selector = @selector(setLayoutRemoveRuleWithASIWidget:withNSString:);
  methods[48].selector = @selector(setLayoutRemoveAllRulesWithASIWidget:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASRootImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASRootImpl;", "getLayoutAbove", "LASIWidget;", "setLayoutAbove", "LASIWidget;LNSString;", "getLayoutAlignBaseline", "setLayoutAlignBaseline", "getLayoutAlignBottom", "setLayoutAlignBottom", "getLayoutAlignEnd", "setLayoutAlignEnd", "getLayoutAlignLeft", "setLayoutAlignLeft", "isLayoutAlignParentBottom", "setLayoutAlignParentBottom", "LASIWidget;Z", "isLayoutAlignParentEnd", "setLayoutAlignParentEnd", "isLayoutAlignParentLeft", "setLayoutAlignParentLeft", "isLayoutAlignParentRight", "setLayoutAlignParentRight", "isLayoutAlignParentStart", "setLayoutAlignParentStart", "isLayoutAlignParentTop", "setLayoutAlignParentTop", "getLayoutAlignRight", "setLayoutAlignRight", "getLayoutAlignStart", "setLayoutAlignStart", "getLayoutAlignTop", "setLayoutAlignTop", "getLayoutBelow", "setLayoutBelow", "isLayoutCenterHorizontal", "setLayoutCenterHorizontal", "isLayoutCenterInParent", "setLayoutCenterInParent", "isLayoutCenterVertical", "setLayoutCenterVertical", "getLayoutToEndOf", "setLayoutToEndOf", "getLayoutToLeftOf", "setLayoutToLeftOf", "getLayoutToRightOf", "setLayoutToRightOf", "getLayoutToStartOf", "setLayoutToStartOf", "isLayoutAlignWithParentIfMissing", "setLayoutAlignWithParentIfMissing", "setLayoutRemoveRule", "setLayoutRemoveAllRules" };
  static const J2ObjcClassInfo _ASRootImpl_RootParamsBean = { "RootParamsBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 49, 1, 0, -1, -1, -1, -1 };
  return &_ASRootImpl_RootParamsBean;
}

@end

void ASRootImpl_RootParamsBean_initWithASRootImpl_(ASRootImpl_RootParamsBean *self, ASRootImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASRootImpl_RootParamsBean *new_ASRootImpl_RootParamsBean_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRootImpl_RootParamsBean, initWithASRootImpl_, outer$)
}

ASRootImpl_RootParamsBean *create_ASRootImpl_RootParamsBean_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRootImpl_RootParamsBean, initWithASRootImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RootParamsBean)

@implementation ASRootImpl_RootCommandParamsBuilder

- (instancetype)initWithASRootImpl:(ASRootImpl *)outer$ {
  ASRootImpl_RootCommandParamsBuilder_initWithASRootImpl_(self, outer$);
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAbove {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_above"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAbove {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_above"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAboveWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_above"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignBaseline {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignBaseline"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignBaseline {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignBaseline"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignBaselineWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignBaseline"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignParentBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignParentBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignParentBottomWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignParentEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignParentEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignParentEndWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignParentLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignParentLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignParentLeftWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignParentRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignParentRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignParentRightWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignParentStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignParentStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignParentStartWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignParentTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignParentTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignParentTopWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignParentTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutAlignTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutBelow {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_below"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutBelow {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_below"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutBelowWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_below"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutCenterHorizontal {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutCenterHorizontal {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerHorizontal"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutCenterHorizontalWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutCenterInParent {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerInParent"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutCenterInParent {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerInParent"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutCenterInParentWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerInParent"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutCenterVertical {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutCenterVertical {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerVertical"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutCenterVerticalWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_centerVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutToEndOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toEndOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutToEndOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toEndOf"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutToEndOfWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toEndOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutToLeftOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toLeftOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutToLeftOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toLeftOf"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutToLeftOfWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toLeftOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutToRightOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toRightOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutToRightOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toRightOf"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutToRightOfWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toRightOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutToStartOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toStartOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutToStartOf {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toStartOf"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutToStartOfWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_toStartOf"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)tryGetLayoutAlignWithParentIfMissing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignWithParentIfMissing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLayoutAlignWithParentIfMissing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignWithParentIfMissing"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutAlignWithParentIfMissingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_alignWithParentIfMissing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutRemoveRuleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_removeRule"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASRootImpl_RootCommandParamsBuilder *)setLayoutRemoveAllRulesWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_removeAllRules"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 12, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 13, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 18, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 19, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 20, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 25, 8, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "LASRootImpl_RootCommandParamsBuilder;", 0x1, 27, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASRootImpl:);
  methods[1].selector = @selector(tryGetLayoutAbove);
  methods[2].selector = @selector(getLayoutAbove);
  methods[3].selector = @selector(setLayoutAboveWithNSString:);
  methods[4].selector = @selector(tryGetLayoutAlignBaseline);
  methods[5].selector = @selector(getLayoutAlignBaseline);
  methods[6].selector = @selector(setLayoutAlignBaselineWithNSString:);
  methods[7].selector = @selector(tryGetLayoutAlignBottom);
  methods[8].selector = @selector(getLayoutAlignBottom);
  methods[9].selector = @selector(setLayoutAlignBottomWithNSString:);
  methods[10].selector = @selector(tryGetLayoutAlignEnd);
  methods[11].selector = @selector(getLayoutAlignEnd);
  methods[12].selector = @selector(setLayoutAlignEndWithNSString:);
  methods[13].selector = @selector(tryGetLayoutAlignLeft);
  methods[14].selector = @selector(getLayoutAlignLeft);
  methods[15].selector = @selector(setLayoutAlignLeftWithNSString:);
  methods[16].selector = @selector(tryGetLayoutAlignParentBottom);
  methods[17].selector = @selector(isLayoutAlignParentBottom);
  methods[18].selector = @selector(setLayoutAlignParentBottomWithBoolean:);
  methods[19].selector = @selector(tryGetLayoutAlignParentEnd);
  methods[20].selector = @selector(isLayoutAlignParentEnd);
  methods[21].selector = @selector(setLayoutAlignParentEndWithBoolean:);
  methods[22].selector = @selector(tryGetLayoutAlignParentLeft);
  methods[23].selector = @selector(isLayoutAlignParentLeft);
  methods[24].selector = @selector(setLayoutAlignParentLeftWithBoolean:);
  methods[25].selector = @selector(tryGetLayoutAlignParentRight);
  methods[26].selector = @selector(isLayoutAlignParentRight);
  methods[27].selector = @selector(setLayoutAlignParentRightWithBoolean:);
  methods[28].selector = @selector(tryGetLayoutAlignParentStart);
  methods[29].selector = @selector(isLayoutAlignParentStart);
  methods[30].selector = @selector(setLayoutAlignParentStartWithBoolean:);
  methods[31].selector = @selector(tryGetLayoutAlignParentTop);
  methods[32].selector = @selector(isLayoutAlignParentTop);
  methods[33].selector = @selector(setLayoutAlignParentTopWithBoolean:);
  methods[34].selector = @selector(tryGetLayoutAlignRight);
  methods[35].selector = @selector(getLayoutAlignRight);
  methods[36].selector = @selector(setLayoutAlignRightWithNSString:);
  methods[37].selector = @selector(tryGetLayoutAlignStart);
  methods[38].selector = @selector(getLayoutAlignStart);
  methods[39].selector = @selector(setLayoutAlignStartWithNSString:);
  methods[40].selector = @selector(tryGetLayoutAlignTop);
  methods[41].selector = @selector(getLayoutAlignTop);
  methods[42].selector = @selector(setLayoutAlignTopWithNSString:);
  methods[43].selector = @selector(tryGetLayoutBelow);
  methods[44].selector = @selector(getLayoutBelow);
  methods[45].selector = @selector(setLayoutBelowWithNSString:);
  methods[46].selector = @selector(tryGetLayoutCenterHorizontal);
  methods[47].selector = @selector(isLayoutCenterHorizontal);
  methods[48].selector = @selector(setLayoutCenterHorizontalWithBoolean:);
  methods[49].selector = @selector(tryGetLayoutCenterInParent);
  methods[50].selector = @selector(isLayoutCenterInParent);
  methods[51].selector = @selector(setLayoutCenterInParentWithBoolean:);
  methods[52].selector = @selector(tryGetLayoutCenterVertical);
  methods[53].selector = @selector(isLayoutCenterVertical);
  methods[54].selector = @selector(setLayoutCenterVerticalWithBoolean:);
  methods[55].selector = @selector(tryGetLayoutToEndOf);
  methods[56].selector = @selector(getLayoutToEndOf);
  methods[57].selector = @selector(setLayoutToEndOfWithNSString:);
  methods[58].selector = @selector(tryGetLayoutToLeftOf);
  methods[59].selector = @selector(getLayoutToLeftOf);
  methods[60].selector = @selector(setLayoutToLeftOfWithNSString:);
  methods[61].selector = @selector(tryGetLayoutToRightOf);
  methods[62].selector = @selector(getLayoutToRightOf);
  methods[63].selector = @selector(setLayoutToRightOfWithNSString:);
  methods[64].selector = @selector(tryGetLayoutToStartOf);
  methods[65].selector = @selector(getLayoutToStartOf);
  methods[66].selector = @selector(setLayoutToStartOfWithNSString:);
  methods[67].selector = @selector(tryGetLayoutAlignWithParentIfMissing);
  methods[68].selector = @selector(isLayoutAlignWithParentIfMissing);
  methods[69].selector = @selector(setLayoutAlignWithParentIfMissingWithBoolean:);
  methods[70].selector = @selector(setLayoutRemoveRuleWithNSString:);
  methods[71].selector = @selector(setLayoutRemoveAllRulesWithBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASRootImpl;", "setLayoutAbove", "LNSString;", "setLayoutAlignBaseline", "setLayoutAlignBottom", "setLayoutAlignEnd", "setLayoutAlignLeft", "setLayoutAlignParentBottom", "Z", "setLayoutAlignParentEnd", "setLayoutAlignParentLeft", "setLayoutAlignParentRight", "setLayoutAlignParentStart", "setLayoutAlignParentTop", "setLayoutAlignRight", "setLayoutAlignStart", "setLayoutAlignTop", "setLayoutBelow", "setLayoutCenterHorizontal", "setLayoutCenterInParent", "setLayoutCenterVertical", "setLayoutToEndOf", "setLayoutToLeftOf", "setLayoutToRightOf", "setLayoutToStartOf", "setLayoutAlignWithParentIfMissing", "setLayoutRemoveRule", "setLayoutRemoveAllRules", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/layout/RootImpl$RootCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASRootImpl_RootCommandParamsBuilder = { "RootCommandParamsBuilder", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 72, 0, 0, -1, -1, 28, -1 };
  return &_ASRootImpl_RootCommandParamsBuilder;
}

@end

void ASRootImpl_RootCommandParamsBuilder_initWithASRootImpl_(ASRootImpl_RootCommandParamsBuilder *self, ASRootImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASRootImpl_RootCommandParamsBuilder *new_ASRootImpl_RootCommandParamsBuilder_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_NEW_IMPL(ASRootImpl_RootCommandParamsBuilder, initWithASRootImpl_, outer$)
}

ASRootImpl_RootCommandParamsBuilder *create_ASRootImpl_RootCommandParamsBuilder_initWithASRootImpl_(ASRootImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASRootImpl_RootCommandParamsBuilder, initWithASRootImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASRootImpl_RootCommandParamsBuilder)
