//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\RunGroup.java
//

#include "ChainRun.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "Dependency.h"
#include "DependencyNode.h"
#include "HelperReferences.h"
#include "HorizontalWidgetRun.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RunGroup.h"
#include "VerticalWidgetRun.h"
#include "WidgetRun.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


@interface ADXRunGroup ()

- (jlong)traverseStartWithADXDependencyNode:(ADXDependencyNode *)node
                                   withLong:(jlong)startPosition;

- (jlong)traverseEndWithADXDependencyNode:(ADXDependencyNode *)node
                                 withLong:(jlong)startPosition;

- (jboolean)defineTerminalWidgetWithADXWidgetRun:(ADXWidgetRun *)run
                                         withInt:(jint)orientation;

@end

__attribute__((unused)) static jlong ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(ADXRunGroup *self, ADXDependencyNode *node, jlong startPosition);

__attribute__((unused)) static jlong ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(ADXRunGroup *self, ADXDependencyNode *node, jlong startPosition);

__attribute__((unused)) static jboolean ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(ADXRunGroup *self, ADXWidgetRun *run, jint orientation);

jint ADXRunGroup_index;

@implementation ADXRunGroup

- (instancetype)initPackagePrivateWithADXWidgetRun:(ADXWidgetRun *)run
                                           withInt:(jint)dir {
  ADXRunGroup_initPackagePrivateWithADXWidgetRun_withInt_(self, run, dir);
  return self;
}

- (void)addWithADXWidgetRun:(ADXWidgetRun *)run {
  [((JavaUtilArrayList *) nil_chk(runs_)) addWithId:run];
  JreStrongAssign(&lastRun_, run);
}

- (jlong)traverseStartWithADXDependencyNode:(ADXDependencyNode *)node
                                   withLong:(jlong)startPosition {
  return ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(self, node, startPosition);
}

- (jlong)traverseEndWithADXDependencyNode:(ADXDependencyNode *)node
                                 withLong:(jlong)startPosition {
  return ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(self, node, startPosition);
}

- (jlong)computeWrapSizeWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                                 withInt:(jint)orientation {
  if ([firstRun_ isKindOfClass:[ADXChainRun class]]) {
    ADXChainRun *chainRun = (ADXChainRun *) firstRun_;
    if (((ADXChainRun *) nil_chk(chainRun))->orientation_ != orientation) {
      return 0;
    }
  }
  else {
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      if (!([firstRun_ isKindOfClass:[ADXHorizontalWidgetRun class]])) {
        return 0;
      }
    }
    else {
      if (!([firstRun_ isKindOfClass:[ADXVerticalWidgetRun class]])) {
        return 0;
      }
    }
  }
  ADXDependencyNode *containerStart = orientation == ADXConstraintWidget_HORIZONTAL ? ((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container))->horizontalRun_))->start_ : ((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container))->verticalRun_))->start_;
  ADXDependencyNode *containerEnd = orientation == ADXConstraintWidget_HORIZONTAL ? ((ADXHorizontalWidgetRun *) nil_chk(container->horizontalRun_))->end_ : ((ADXVerticalWidgetRun *) nil_chk(container->verticalRun_))->end_;
  jboolean runWithStartTarget = [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->start_))->targets_)) containsWithId:containerStart];
  jboolean runWithEndTarget = [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->end_))->targets_)) containsWithId:containerEnd];
  jlong dimension = [((ADXWidgetRun *) nil_chk(firstRun_)) getWrapDimension];
  if (runWithStartTarget && runWithEndTarget) {
    jlong maxPosition = ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(self, ((ADXWidgetRun *) nil_chk(firstRun_))->start_, 0);
    jlong minPosition = ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(self, ((ADXWidgetRun *) nil_chk(firstRun_))->end_, 0);
    jlong endGap = maxPosition - dimension;
    if (endGap >= -((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->end_))->margin_) {
      endGap += firstRun_->end_->margin_;
    }
    jlong startGap = -minPosition - dimension - ((ADXDependencyNode *) nil_chk(firstRun_->start_))->margin_;
    if (startGap >= firstRun_->start_->margin_) {
      startGap -= firstRun_->start_->margin_;
    }
    jfloat bias = [((ADXConstraintWidget *) nil_chk(firstRun_->widget_)) getBiasPercentWithInt:orientation];
    jlong gap = 0;
    if (bias > 0) {
      gap = JreFpToLong(((startGap / bias) + (endGap / (1.0f - bias))));
    }
    startGap = JreFpToLong((0.5f + (gap * bias)));
    endGap = JreFpToLong((0.5f + (gap * (1.0f - bias))));
    jlong runDimension = startGap + dimension + endGap;
    dimension = ((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->start_))->margin_ + runDimension - ((ADXDependencyNode *) nil_chk(firstRun_->end_))->margin_;
  }
  else if (runWithStartTarget) {
    jlong maxPosition = ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(self, ((ADXWidgetRun *) nil_chk(firstRun_))->start_, ((ADXDependencyNode *) nil_chk(firstRun_->start_))->margin_);
    jlong runDimension = ((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->start_))->margin_ + dimension;
    dimension = JavaLangMath_maxWithLong_withLong_(maxPosition, runDimension);
  }
  else if (runWithEndTarget) {
    jlong minPosition = ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(self, ((ADXWidgetRun *) nil_chk(firstRun_))->end_, ((ADXDependencyNode *) nil_chk(firstRun_->end_))->margin_);
    jlong runDimension = -((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->end_))->margin_ + dimension;
    dimension = JavaLangMath_maxWithLong_withLong_(-minPosition, runDimension);
  }
  else {
    dimension = ((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->start_))->margin_ + [firstRun_ getWrapDimension] - ((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(firstRun_))->end_))->margin_;
  }
  return dimension;
}

- (jboolean)defineTerminalWidgetWithADXWidgetRun:(ADXWidgetRun *)run
                                         withInt:(jint)orientation {
  return ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, run, orientation);
}

- (void)defineTerminalWidgetsWithBoolean:(jboolean)horizontalCheck
                             withBoolean:(jboolean)verticalCheck {
  if (horizontalCheck && [firstRun_ isKindOfClass:[ADXHorizontalWidgetRun class]]) {
    ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, firstRun_, ADXConstraintWidget_HORIZONTAL);
  }
  if (verticalCheck && [firstRun_ isKindOfClass:[ADXVerticalWidgetRun class]]) {
    ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, firstRun_, ADXConstraintWidget_VERTICAL);
  }
}

- (void)dealloc {
  RELEASE_(firstRun_);
  RELEASE_(lastRun_);
  RELEASE_(runs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x2, 5, 4, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXWidgetRun:withInt:);
  methods[1].selector = @selector(addWithADXWidgetRun:);
  methods[2].selector = @selector(traverseStartWithADXDependencyNode:withLong:);
  methods[3].selector = @selector(traverseEndWithADXDependencyNode:withLong:);
  methods[4].selector = @selector(computeWrapSizeWithADXConstraintWidgetContainer:withInt:);
  methods[5].selector = @selector(defineTerminalWidgetWithADXWidgetRun:withInt:);
  methods[6].selector = @selector(defineTerminalWidgetsWithBoolean:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "START", "I", .constantValue.asInt = ADXRunGroup_START, 0x19, -1, -1, -1, -1 },
    { "END", "I", .constantValue.asInt = ADXRunGroup_END, 0x19, -1, -1, -1, -1 },
    { "BASELINE", "I", .constantValue.asInt = ADXRunGroup_BASELINE, 0x19, -1, -1, -1, -1 },
    { "index", "I", .constantValue.asLong = 0, 0x9, -1, 11, -1, -1 },
    { "position_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dual_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "firstRun_", "LADXWidgetRun;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "lastRun_", "LADXWidgetRun;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "runs_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 12, -1 },
    { "groupIndex_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "direction_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXWidgetRun;I", "add", "LADXWidgetRun;", "traverseStart", "LADXDependencyNode;J", "traverseEnd", "computeWrapSize", "LADXConstraintWidgetContainer;I", "defineTerminalWidget", "defineTerminalWidgets", "ZZ", &ADXRunGroup_index, "Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/WidgetRun;>;" };
  static const J2ObjcClassInfo _ADXRunGroup = { "RunGroup", "androidx.constraintlayout.core.widgets.analyzer", ptrTable, methods, fields, 7, 0x0, 7, 11, -1, -1, -1, -1, -1 };
  return &_ADXRunGroup;
}

@end

void ADXRunGroup_initPackagePrivateWithADXWidgetRun_withInt_(ADXRunGroup *self, ADXWidgetRun *run, jint dir) {
  NSObject_init(self);
  self->position_ = 0;
  self->dual_ = false;
  JreStrongAssign(&self->firstRun_, nil);
  JreStrongAssign(&self->lastRun_, nil);
  JreStrongAssignAndConsume(&self->runs_, new_JavaUtilArrayList_init());
  self->groupIndex_ = 0;
  self->groupIndex_ = ADXRunGroup_index;
  ADXRunGroup_index++;
  JreStrongAssign(&self->firstRun_, run);
  JreStrongAssign(&self->lastRun_, run);
  self->direction_ = dir;
}

ADXRunGroup *new_ADXRunGroup_initPackagePrivateWithADXWidgetRun_withInt_(ADXWidgetRun *run, jint dir) {
  J2OBJC_NEW_IMPL(ADXRunGroup, initPackagePrivateWithADXWidgetRun_withInt_, run, dir)
}

ADXRunGroup *create_ADXRunGroup_initPackagePrivateWithADXWidgetRun_withInt_(ADXWidgetRun *run, jint dir) {
  J2OBJC_CREATE_IMPL(ADXRunGroup, initPackagePrivateWithADXWidgetRun_withInt_, run, dir)
}

jlong ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(ADXRunGroup *self, ADXDependencyNode *node, jlong startPosition) {
  ADXWidgetRun *run = JreRetainedLocalValue(((ADXDependencyNode *) nil_chk(node))->run_);
  if ([run isKindOfClass:[ADXHelperReferences class]]) {
    return startPosition;
  }
  jlong position = startPosition;
  jint count = [((id<JavaUtilList>) nil_chk(node->dependencies_)) size];
  for (jint i = 0; i < count; i++) {
    id<ADXDependency> dependency = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(node->dependencies_)) getWithInt:i]);
    if ([dependency isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyNode *nextNode = (ADXDependencyNode *) dependency;
      if (((ADXDependencyNode *) nil_chk(nextNode))->run_ == run) {
        continue;
      }
      position = JavaLangMath_maxWithLong_withLong_(position, ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(self, nextNode, startPosition + nextNode->margin_));
    }
  }
  if (node == ((ADXWidgetRun *) nil_chk(run))->start_) {
    jlong dimension = [run getWrapDimension];
    position = JavaLangMath_maxWithLong_withLong_(position, ADXRunGroup_traverseStartWithADXDependencyNode_withLong_(self, run->end_, startPosition + dimension));
    position = JavaLangMath_maxWithLong_withLong_(position, startPosition + dimension - ((ADXDependencyNode *) nil_chk(run->end_))->margin_);
  }
  return position;
}

jlong ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(ADXRunGroup *self, ADXDependencyNode *node, jlong startPosition) {
  ADXWidgetRun *run = JreRetainedLocalValue(((ADXDependencyNode *) nil_chk(node))->run_);
  if ([run isKindOfClass:[ADXHelperReferences class]]) {
    return startPosition;
  }
  jlong position = startPosition;
  jint count = [((id<JavaUtilList>) nil_chk(node->dependencies_)) size];
  for (jint i = 0; i < count; i++) {
    id<ADXDependency> dependency = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(node->dependencies_)) getWithInt:i]);
    if ([dependency isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyNode *nextNode = (ADXDependencyNode *) dependency;
      if (((ADXDependencyNode *) nil_chk(nextNode))->run_ == run) {
        continue;
      }
      position = JavaLangMath_minWithLong_withLong_(position, ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(self, nextNode, startPosition + nextNode->margin_));
    }
  }
  if (node == ((ADXWidgetRun *) nil_chk(run))->end_) {
    jlong dimension = [run getWrapDimension];
    position = JavaLangMath_minWithLong_withLong_(position, ADXRunGroup_traverseEndWithADXDependencyNode_withLong_(self, run->start_, startPosition - dimension));
    position = JavaLangMath_minWithLong_withLong_(position, startPosition - dimension - ((ADXDependencyNode *) nil_chk(run->start_))->margin_);
  }
  return position;
}

jboolean ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(ADXRunGroup *self, ADXWidgetRun *run, jint orientation) {
  if (!IOSBooleanArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(((ADXWidgetRun *) nil_chk(run))->widget_))->isTerminalWidget_), orientation)) {
    return false;
  }
  for (id<ADXDependency> __strong dependency in nil_chk(((ADXDependencyNode *) nil_chk(run->start_))->dependencies_)) {
    if ([dependency isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyNode *node = (ADXDependencyNode *) dependency;
      if (((ADXDependencyNode *) nil_chk(node))->run_ == run) {
        continue;
      }
      if (node == ((ADXWidgetRun *) nil_chk(node->run_))->start_) {
        if ([run isKindOfClass:[ADXChainRun class]]) {
          ADXChainRun *chainRun = (ADXChainRun *) run;
          for (ADXWidgetRun * __strong widgetChainRun in nil_chk(chainRun->widgets_)) {
            ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, widgetChainRun, orientation);
          }
        }
        else {
          if (!([run isKindOfClass:[ADXHelperReferences class]])) {
            *IOSBooleanArray_GetRef(nil_chk(((ADXConstraintWidget *) nil_chk(run->widget_))->isTerminalWidget_), orientation) = false;
          }
        }
        ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, node->run_, orientation);
      }
    }
  }
  for (id<ADXDependency> __strong dependency in ((ADXDependencyNode *) nil_chk(run->end_))->dependencies_) {
    if ([dependency isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyNode *node = (ADXDependencyNode *) dependency;
      if (((ADXDependencyNode *) nil_chk(node))->run_ == run) {
        continue;
      }
      if (node == ((ADXWidgetRun *) nil_chk(node->run_))->start_) {
        if ([run isKindOfClass:[ADXChainRun class]]) {
          ADXChainRun *chainRun = (ADXChainRun *) run;
          for (ADXWidgetRun * __strong widgetChainRun in nil_chk(chainRun->widgets_)) {
            ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, widgetChainRun, orientation);
          }
        }
        else {
          if (!([run isKindOfClass:[ADXHelperReferences class]])) {
            *IOSBooleanArray_GetRef(nil_chk(((ADXConstraintWidget *) nil_chk(run->widget_))->isTerminalWidget_), orientation) = false;
          }
        }
        ADXRunGroup_defineTerminalWidgetWithADXWidgetRun_withInt_(self, node->run_, orientation);
      }
    }
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRunGroup)
