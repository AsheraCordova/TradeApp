//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\HelperReferences.java
//

#include "ConstraintWidget.h"
#include "CoreBarrier.h"
#include "Dependency.h"
#include "DependencyNode.h"
#include "HelperReferences.h"
#include "HorizontalWidgetRun.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RunGroup.h"
#include "VerticalWidgetRun.h"
#include "WidgetRun.h"
#include "java/util/List.h"


@interface ADXHelperReferences ()

- (void)addDependencyWithADXDependencyNode:(ADXDependencyNode *)node;

@end

__attribute__((unused)) static void ADXHelperReferences_addDependencyWithADXDependencyNode_(ADXHelperReferences *self, ADXDependencyNode *node);

@implementation ADXHelperReferences

- (instancetype)initPackagePrivateWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  ADXHelperReferences_initPackagePrivateWithADXConstraintWidget_(self, widget);
  return self;
}

- (void)clear {
  JreStrongAssign(&runGroup_, nil);
  [((ADXDependencyNode *) nil_chk(start_)) clear];
}

- (void)reset {
  ((ADXDependencyNode *) nil_chk(start_))->resolved_ = false;
}

- (jboolean)supportsWrapComputation {
  return false;
}

- (void)addDependencyWithADXDependencyNode:(ADXDependencyNode *)node {
  ADXHelperReferences_addDependencyWithADXDependencyNode_(self, node);
}

- (void)apply {
  if ([widget_ isKindOfClass:[ADXCoreBarrier class]]) {
    ((ADXDependencyNode *) nil_chk(start_))->delegateToWidgetRun_ = true;
    ADXCoreBarrier *barrier = (ADXCoreBarrier *) widget_;
    jint type = [((ADXCoreBarrier *) nil_chk(barrier)) getBarrierType];
    jboolean allowsGoneWidget = [barrier getAllowsGoneWidget];
    switch (type) {
      case ADXCoreBarrier_LEFT:
      {
        JreStrongAssign(&((ADXDependencyNode *) nil_chk(start_))->type_, JreLoadEnum(ADXDependencyNode_Type, LEFT));
        for (jint i = 0; i < barrier->mWidgetsCount_; i++) {
          ADXConstraintWidget *refWidget = IOSObjectArray_Get(nil_chk(barrier->mWidgets_), i);
          if (!allowsGoneWidget && [((ADXConstraintWidget *) nil_chk(refWidget)) getVisibility] == ADXConstraintWidget_GONE) {
            continue;
          }
          ADXDependencyNode *target = JreRetainedLocalValue(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(refWidget))->horizontalRun_))->start_);
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(target))->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) addWithId:target];
        }
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->start_);
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->end_);
      }
      break;
      case ADXCoreBarrier_RIGHT:
      {
        JreStrongAssign(&((ADXDependencyNode *) nil_chk(start_))->type_, JreLoadEnum(ADXDependencyNode_Type, RIGHT));
        for (jint i = 0; i < barrier->mWidgetsCount_; i++) {
          ADXConstraintWidget *refWidget = IOSObjectArray_Get(nil_chk(barrier->mWidgets_), i);
          if (!allowsGoneWidget && [((ADXConstraintWidget *) nil_chk(refWidget)) getVisibility] == ADXConstraintWidget_GONE) {
            continue;
          }
          ADXDependencyNode *target = JreRetainedLocalValue(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(refWidget))->horizontalRun_))->end_);
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(target))->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) addWithId:target];
        }
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->start_);
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->horizontalRun_))->end_);
      }
      break;
      case ADXCoreBarrier_TOP:
      {
        JreStrongAssign(&((ADXDependencyNode *) nil_chk(start_))->type_, JreLoadEnum(ADXDependencyNode_Type, TOP));
        for (jint i = 0; i < barrier->mWidgetsCount_; i++) {
          ADXConstraintWidget *refwidget = IOSObjectArray_Get(nil_chk(barrier->mWidgets_), i);
          if (!allowsGoneWidget && [((ADXConstraintWidget *) nil_chk(refwidget)) getVisibility] == ADXConstraintWidget_GONE) {
            continue;
          }
          ADXDependencyNode *target = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(refwidget))->verticalRun_))->start_);
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(target))->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) addWithId:target];
        }
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->start_);
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->end_);
      }
      break;
      case ADXCoreBarrier_BOTTOM:
      {
        JreStrongAssign(&((ADXDependencyNode *) nil_chk(start_))->type_, JreLoadEnum(ADXDependencyNode_Type, BOTTOM));
        for (jint i = 0; i < barrier->mWidgetsCount_; i++) {
          ADXConstraintWidget *refwidget = IOSObjectArray_Get(nil_chk(barrier->mWidgets_), i);
          if (!allowsGoneWidget && [((ADXConstraintWidget *) nil_chk(refwidget)) getVisibility] == ADXConstraintWidget_GONE) {
            continue;
          }
          ADXDependencyNode *target = JreRetainedLocalValue(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(refwidget))->verticalRun_))->end_);
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(target))->dependencies_)) addWithId:start_];
          [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) addWithId:target];
        }
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->start_);
        ADXHelperReferences_addDependencyWithADXDependencyNode_(self, ((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidget *) nil_chk(widget_))->verticalRun_))->end_);
      }
      break;
    }
  }
}

- (void)updateWithADXDependency:(id<ADXDependency>)dependency {
  ADXCoreBarrier *barrier = (ADXCoreBarrier *) cast_chk(widget_, [ADXCoreBarrier class]);
  jint type = [((ADXCoreBarrier *) nil_chk(barrier)) getBarrierType];
  jint min = -1;
  jint max = 0;
  for (ADXDependencyNode * __strong node in nil_chk(((ADXDependencyNode *) nil_chk(start_))->targets_)) {
    jint value = ((ADXDependencyNode *) nil_chk(node))->value_;
    if (min == -1 || value < min) {
      min = value;
    }
    if (max < value) {
      max = value;
    }
  }
  if (type == ADXCoreBarrier_LEFT || type == ADXCoreBarrier_TOP) {
    [start_ resolveWithInt:min + [barrier getMargin]];
  }
  else {
    [start_ resolveWithInt:max + [barrier getMargin]];
  }
}

- (void)applyToWidget {
  if ([widget_ isKindOfClass:[ADXCoreBarrier class]]) {
    ADXCoreBarrier *barrier = (ADXCoreBarrier *) widget_;
    jint type = [((ADXCoreBarrier *) nil_chk(barrier)) getBarrierType];
    if (type == ADXCoreBarrier_LEFT || type == ADXCoreBarrier_RIGHT) {
      [((ADXConstraintWidget *) nil_chk(widget_)) setXWithInt:((ADXDependencyNode *) nil_chk(start_))->value_];
    }
    else {
      [((ADXConstraintWidget *) nil_chk(widget_)) setYWithInt:((ADXDependencyNode *) nil_chk(start_))->value_];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXConstraintWidget:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(supportsWrapComputation);
  methods[4].selector = @selector(addDependencyWithADXDependencyNode:);
  methods[5].selector = @selector(apply);
  methods[6].selector = @selector(updateWithADXDependency:);
  methods[7].selector = @selector(applyToWidget);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXConstraintWidget;", "addDependency", "LADXDependencyNode;", "update", "LADXDependency;" };
  static const J2ObjcClassInfo _ADXHelperReferences = { "HelperReferences", "androidx.constraintlayout.core.widgets.analyzer", ptrTable, methods, NULL, 7, 0x0, 8, 0, -1, -1, -1, -1, -1 };
  return &_ADXHelperReferences;
}

@end

void ADXHelperReferences_initPackagePrivateWithADXConstraintWidget_(ADXHelperReferences *self, ADXConstraintWidget *widget) {
  ADXWidgetRun_initWithADXConstraintWidget_(self, widget);
}

ADXHelperReferences *new_ADXHelperReferences_initPackagePrivateWithADXConstraintWidget_(ADXConstraintWidget *widget) {
  J2OBJC_NEW_IMPL(ADXHelperReferences, initPackagePrivateWithADXConstraintWidget_, widget)
}

ADXHelperReferences *create_ADXHelperReferences_initPackagePrivateWithADXConstraintWidget_(ADXConstraintWidget *widget) {
  J2OBJC_CREATE_IMPL(ADXHelperReferences, initPackagePrivateWithADXConstraintWidget_, widget)
}

void ADXHelperReferences_addDependencyWithADXDependencyNode_(ADXHelperReferences *self, ADXDependencyNode *node) {
  [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(self->start_))->dependencies_)) addWithId:node];
  [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(node))->targets_)) addWithId:self->start_];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXHelperReferences)
