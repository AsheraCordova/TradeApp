//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\com\ashera\drawable\ColorStateListFactory.java
//

#include "Color.h"
#include "ColorStateList.h"
#include "ColorStateListFactory.h"
#include "ColorUtil.h"
#include "GrowingArrayUtils.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MathUtils.h"
#include "PluginInvoker.h"
#include "R.h"
#include "ResourceBundleUtils.h"
#include "StateSet.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@protocol JavaUtilMap;


@interface ASColorStateListFactory ()

+ (jint)modulateColorAlphaWithInt:(jint)baseColor
                        withFloat:(jfloat)alphaMod;

@end

inline IOSObjectArray *ASColorStateListFactory_get_COLOR_STATE_LIST(void);
static IOSObjectArray *ASColorStateListFactory_COLOR_STATE_LIST;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASColorStateListFactory, COLOR_STATE_LIST, IOSObjectArray *)

inline IOSIntArray *ASColorStateListFactory_get_COLOR_STATE_LIST_ATTR(void);
static IOSIntArray *ASColorStateListFactory_COLOR_STATE_LIST_ATTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASColorStateListFactory, COLOR_STATE_LIST_ATTR, IOSIntArray *)

inline id<JavaUtilMap> ASColorStateListFactory_get_STATELIST_MAPPER(void);
inline id<JavaUtilMap> ASColorStateListFactory_set_STATELIST_MAPPER(id<JavaUtilMap> value);
static id<JavaUtilMap> ASColorStateListFactory_STATELIST_MAPPER;
J2OBJC_STATIC_FIELD_OBJ(ASColorStateListFactory, STATELIST_MAPPER, id<JavaUtilMap>)

__attribute__((unused)) static jint ASColorStateListFactory_modulateColorAlphaWithInt_withFloat_(jint baseColor, jfloat alphaMod);

J2OBJC_INITIALIZED_DEFN(ASColorStateListFactory)

@implementation ASColorStateListFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASColorStateListFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)modulateColorAlphaWithInt:(jint)baseColor
                        withFloat:(jfloat)alphaMod {
  return ASColorStateListFactory_modulateColorAlphaWithInt_withFloat_(baseColor, alphaMod);
}

+ (ADColorStateList *)getColorWithJavaUtilMap:(id<JavaUtilMap>)colorMap
                              withASIFragment:(id<ASIFragment>)fragment {
  return ASColorStateListFactory_getColorWithJavaUtilMap_withASIFragment_(colorMap, fragment);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x9, 2, 3, -1, 4, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(modulateColorAlphaWithInt:withFloat:);
  methods[2].selector = @selector(getColorWithJavaUtilMap:withASIFragment:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COLOR_STATE_LIST", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 5, -1, -1 },
    { "COLOR_STATE_LIST_ATTR", "[I", .constantValue.asLong = 0, 0x1a, -1, 6, -1, -1 },
    { "STATELIST_MAPPER", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 7, 8, -1 },
  };
  static const void *ptrTable[] = { "modulateColorAlpha", "IF", "getColor", "LJavaUtilMap;LASIFragment;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Lr/android/content/res/ColorStateList;", &ASColorStateListFactory_COLOR_STATE_LIST, &ASColorStateListFactory_COLOR_STATE_LIST_ATTR, &ASColorStateListFactory_STATELIST_MAPPER, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;" };
  static const J2ObjcClassInfo _ASColorStateListFactory = { "ColorStateListFactory", "com.ashera.drawable", ptrTable, methods, fields, 7, 0x1, 3, 3, -1, -1, -1, -1, -1 };
  return &_ASColorStateListFactory;
}

+ (void)initialize {
  if (self == [ASColorStateListFactory class]) {
    JreStrongAssignAndConsume(&ASColorStateListFactory_COLOR_STATE_LIST, [IOSObjectArray newArrayWithObjects:(id[]){ @"@android:state_window_focused", @"@android:state_selected", @"@android:state_focused", @"@android:state_pressed", @"@android:state_hovered", @"@android:state_activated", @"@android:state_accelerated", @"@android:state_enabled", @"@android:state_drag_can_accept", @"@android:state_drag_hovered" } count:10 type:NSString_class_()]);
    JreStrongAssignAndConsume(&ASColorStateListFactory_COLOR_STATE_LIST_ATTR, [IOSIntArray newArrayWithInts:(jint[]){ ADR_attr_state_window_focused, ADR_attr_state_selected, ADR_attr_state_focused, ADR_attr_state_pressed, ADR_attr_state_hovered, ADR_attr_state_activated, ADR_attr_state_accelerated, ADR_attr_state_enabled, ADR_attr_state_drag_can_accept, ADR_attr_state_drag_hovered } count:10]);
    JreStrongAssignAndConsume(&ASColorStateListFactory_STATELIST_MAPPER, new_JavaUtilHashMap_init());
    {
      for (jint i = 0; i < ASColorStateListFactory_COLOR_STATE_LIST->size_; i++) {
        [((id<JavaUtilMap>) nil_chk(ASColorStateListFactory_STATELIST_MAPPER)) putWithId:IOSObjectArray_Get(ASColorStateListFactory_COLOR_STATE_LIST, i) withId:JavaLangInteger_valueOfWithInt_(IOSIntArray_Get(ASColorStateListFactory_COLOR_STATE_LIST_ATTR, i))];
      }
    }
    J2OBJC_SET_INITIALIZED(ASColorStateListFactory)
  }
}

@end

void ASColorStateListFactory_init(ASColorStateListFactory *self) {
  NSObject_init(self);
}

ASColorStateListFactory *new_ASColorStateListFactory_init() {
  J2OBJC_NEW_IMPL(ASColorStateListFactory, init)
}

ASColorStateListFactory *create_ASColorStateListFactory_init() {
  J2OBJC_CREATE_IMPL(ASColorStateListFactory, init)
}

jint ASColorStateListFactory_modulateColorAlphaWithInt_withFloat_(jint baseColor, jfloat alphaMod) {
  ASColorStateListFactory_initialize();
  if (alphaMod == 1.0f) {
    return baseColor;
  }
  jint baseAlpha = ADColor_alphaWithInt_(baseColor);
  jint alpha = ADMathUtils_constrainWithInt_withInt_withInt_(JreFpToInt((baseAlpha * alphaMod + 0.5f)), 0, 255);
  return (baseColor & (jint) 0xFFFFFF) | (JreLShift32(alpha, 24));
}

ADColorStateList *ASColorStateListFactory_getColorWithJavaUtilMap_withASIFragment_(id<JavaUtilMap> colorMap, id<ASIFragment> fragment) {
  ASColorStateListFactory_initialize();
  if ([((id<JavaUtilMap>) nil_chk(colorMap)) containsKeyWithId:@"selector"]) {
    jint defaultColor = ADColor_RED;
    IOSObjectArray *stateSpecList = [IOSIntArray arrayWithDimensions:2 lengths:(jint[]){ 20, 20 }];
    IOSIntArray *colorList = [IOSIntArray arrayWithLength:stateSpecList->size_];
    jint listSize = 0;
    id<JavaUtilMap> selector = ASPluginInvoker_getMapWithId_([colorMap getWithId:@"selector"]);
    id<JavaUtilList> items = ASPluginInvoker_getListWithId_([((id<JavaUtilMap>) nil_chk(selector)) getWithId:@"item"]);
    for (id __strong item in nil_chk(items)) {
      id<JavaUtilMap> itemMap = ASPluginInvoker_getMapWithId_(item);
      NSString *colorStr = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(itemMap)) getWithId:@"@android:color"], [NSString class]);
      if ([((NSString *) nil_chk(colorStr)) java_hasPrefix:@"@color/"]) {
        colorStr = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"color/color", @"color", colorStr, fragment);
      }
      jint baseColor = colorStr == nil ? ADColor_RED : ADColor_parseColorWithNSString_(ASColorUtil_colorToHexWithNSString_(colorStr));
      NSString *aplhaStr = (NSString *) cast_chk([itemMap getWithId:@"@android:alpha"], [NSString class]);
      jfloat alphaMod = aplhaStr == nil ? 1.0f : [((JavaLangFloat *) nil_chk(ASPluginInvoker_getFloatWithId_(aplhaStr))) floatValue];
      jint j = 0;
      id<JavaUtilSet> itemMapKeySet = JreRetainedLocalValue([itemMap keySet]);
      id<JavaUtilIterator> itemMapIter = JreRetainedLocalValue([((id<JavaUtilSet>) nil_chk(itemMapKeySet)) iterator]);
      jint numAttrs = [itemMapKeySet size];
      IOSIntArray *stateSpec = [IOSIntArray arrayWithLength:numAttrs];
      while ([((id<JavaUtilIterator>) nil_chk(itemMapIter)) hasNext]) {
        NSString *stateResStrId = [itemMapIter next];
        if (!([((NSString *) nil_chk(stateResStrId)) java_hasPrefix:@"@android:alpha"] || [stateResStrId java_hasPrefix:@"@android:color"])) {
          jint stateResId = [((JavaLangInteger *) nil_chk([((id<JavaUtilMap>) nil_chk(ASColorStateListFactory_STATELIST_MAPPER)) getWithId:stateResStrId])) intValue];
          *IOSIntArray_GetRef(stateSpec, j++) = [((JavaLangBoolean *) nil_chk(ASPluginInvoker_getBooleanWithId_([itemMap getWithId:stateResStrId]))) booleanValue] ? stateResId : -stateResId;
        }
      }
      stateSpec = ADStateSet_trimStateSetWithIntArray_withInt_(stateSpec, j);
      jint color = ASColorStateListFactory_modulateColorAlphaWithInt_withFloat_(baseColor, alphaMod);
      if (listSize == 0 || ((IOSIntArray *) nil_chk(stateSpec))->size_ == 0) {
        defaultColor = color;
      }
      colorList = ADGrowingArrayUtils_appendWithIntArray_withInt_withInt_(colorList, listSize, color);
      stateSpecList = ADGrowingArrayUtils_appendWithNSObjectArray_withInt_withId_(stateSpecList, listSize, stateSpec);
      listSize++;
    }
    ADColorStateList *colorStateList = create_ADColorStateList_initWithIntArray2_withIntArray_(stateSpecList, colorList);
    [colorStateList setDefaultColorWithInt:defaultColor];
    [colorStateList onColorsChanged];
    return colorStateList;
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(@"unknown color");
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASColorStateListFactory)
