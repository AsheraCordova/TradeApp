//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\DependencyGraph.java
//

#include "BasicMeasure.h"
#include "ChainRun.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "CoreBarrier.h"
#include "CoreGuideline.h"
#include "Dependency.h"
#include "DependencyGraph.h"
#include "DependencyNode.h"
#include "DimensionDependency.h"
#include "GuidelineReference.h"
#include "HelperReferences.h"
#include "HelperWidget.h"
#include "HorizontalWidgetRun.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "RunGroup.h"
#include "VerticalWidgetRun.h"
#include "WidgetRun.h"
#include "java/io/PrintStream.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"

@class JavaUtilArrayList;


@interface ADXDependencyGraph () {
 @public
  ADXConstraintWidgetContainer *container_;
  jboolean mNeedBuildGraph_;
  jboolean mNeedRedoMeasures_;
  ADXConstraintWidgetContainer *mContainer_;
  JavaUtilArrayList *mRuns_;
  JavaUtilArrayList *runGroups_;
  id<ADXBasicMeasure_Measurer> mMeasurer_;
  ADXBasicMeasure_Measure *mMeasure_;
}

- (jint)computeWrapWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                            withInt:(jint)orientation;

/*!
 @brief Convenience function to fill in the measure spec
 @param widget the widget to measure
 @param horizontalBehavior
 @param horizontalDimension
 @param verticalBehavior
 @param verticalDimension
 */
- (void)measureWithADXConstraintWidget:(ADXConstraintWidget *)widget
withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)horizontalBehavior
                               withInt:(jint)horizontalDimension
withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)verticalBehavior
                               withInt:(jint)verticalDimension;

- (jboolean)basicMeasureWidgetsWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)constraintWidgetContainer;

- (void)displayGraph;

- (void)applyGroupWithADXDependencyNode:(ADXDependencyNode *)node
                                withInt:(jint)orientation
                                withInt:(jint)direction
                  withADXDependencyNode:(ADXDependencyNode *)end
                  withJavaUtilArrayList:(JavaUtilArrayList *)groups
                        withADXRunGroup:(ADXRunGroup *)group;

- (void)findGroupWithADXWidgetRun:(ADXWidgetRun *)run
                          withInt:(jint)orientation
            withJavaUtilArrayList:(JavaUtilArrayList *)groups;

- (NSString *)generateDisplayNodeWithADXDependencyNode:(ADXDependencyNode *)node
                                           withBoolean:(jboolean)centeredConnection
                                          withNSString:(NSString *)content;

- (NSString *)nodeDefinitionWithADXWidgetRun:(ADXWidgetRun *)run;

- (NSString *)generateChainDisplayGraphWithADXChainRun:(ADXChainRun *)chain
                                          withNSString:(NSString *)content;

- (jboolean)isCenteredConnectionWithADXDependencyNode:(ADXDependencyNode *)start
                                withADXDependencyNode:(ADXDependencyNode *)end;

- (NSString *)generateDisplayGraphWithADXWidgetRun:(ADXWidgetRun *)root
                                      withNSString:(NSString *)content;

@end

J2OBJC_FIELD_SETTER(ADXDependencyGraph, container_, ADXConstraintWidgetContainer *)
J2OBJC_FIELD_SETTER(ADXDependencyGraph, mContainer_, ADXConstraintWidgetContainer *)
J2OBJC_FIELD_SETTER(ADXDependencyGraph, mRuns_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXDependencyGraph, runGroups_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXDependencyGraph, mMeasurer_, id<ADXBasicMeasure_Measurer>)
J2OBJC_FIELD_SETTER(ADXDependencyGraph, mMeasure_, ADXBasicMeasure_Measure *)

inline jboolean ADXDependencyGraph_get_USE_GROUPS(void);
#define ADXDependencyGraph_USE_GROUPS true
J2OBJC_STATIC_FIELD_CONSTANT(ADXDependencyGraph, USE_GROUPS, jboolean)

__attribute__((unused)) static jint ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(ADXDependencyGraph *self, ADXConstraintWidgetContainer *container, jint orientation);

__attribute__((unused)) static void ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(ADXDependencyGraph *self, ADXConstraintWidget *widget, ADXConstraintWidget_DimensionBehaviour *horizontalBehavior, jint horizontalDimension, ADXConstraintWidget_DimensionBehaviour *verticalBehavior, jint verticalDimension);

__attribute__((unused)) static jboolean ADXDependencyGraph_basicMeasureWidgetsWithADXConstraintWidgetContainer_(ADXDependencyGraph *self, ADXConstraintWidgetContainer *constraintWidgetContainer);

__attribute__((unused)) static void ADXDependencyGraph_displayGraph(ADXDependencyGraph *self);

__attribute__((unused)) static void ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(ADXDependencyGraph *self, ADXDependencyNode *node, jint orientation, jint direction, ADXDependencyNode *end, JavaUtilArrayList *groups, ADXRunGroup *group);

__attribute__((unused)) static void ADXDependencyGraph_findGroupWithADXWidgetRun_withInt_withJavaUtilArrayList_(ADXDependencyGraph *self, ADXWidgetRun *run, jint orientation, JavaUtilArrayList *groups);

__attribute__((unused)) static NSString *ADXDependencyGraph_generateDisplayNodeWithADXDependencyNode_withBoolean_withNSString_(ADXDependencyGraph *self, ADXDependencyNode *node, jboolean centeredConnection, NSString *content);

__attribute__((unused)) static NSString *ADXDependencyGraph_nodeDefinitionWithADXWidgetRun_(ADXDependencyGraph *self, ADXWidgetRun *run);

__attribute__((unused)) static NSString *ADXDependencyGraph_generateChainDisplayGraphWithADXChainRun_withNSString_(ADXDependencyGraph *self, ADXChainRun *chain, NSString *content);

__attribute__((unused)) static jboolean ADXDependencyGraph_isCenteredConnectionWithADXDependencyNode_withADXDependencyNode_(ADXDependencyGraph *self, ADXDependencyNode *start, ADXDependencyNode *end);

__attribute__((unused)) static NSString *ADXDependencyGraph_generateDisplayGraphWithADXWidgetRun_withNSString_(ADXDependencyGraph *self, ADXWidgetRun *root, NSString *content);

@implementation ADXDependencyGraph

- (instancetype)initWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container {
  ADXDependencyGraph_initWithADXConstraintWidgetContainer_(self, container);
  return self;
}

- (void)setMeasurerWithADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer {
  JreStrongAssign(&mMeasurer_, measurer);
}

- (jint)computeWrapWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)container
                                            withInt:(jint)orientation {
  return ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(self, container, orientation);
}

- (void)defineTerminalWidgetsWithADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)horizontalBehavior
                             withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)verticalBehavior {
  if (mNeedBuildGraph_) {
    [self buildGraph];
    {
      jboolean hasBarrier = false;
      for (ADXConstraintWidget * __strong widget in nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mChildren_)) {
        *IOSBooleanArray_GetRef(nil_chk(((ADXConstraintWidget *) nil_chk(widget))->isTerminalWidget_), ADXConstraintWidget_HORIZONTAL) = true;
        *IOSBooleanArray_GetRef(widget->isTerminalWidget_, ADXConstraintWidget_VERTICAL) = true;
        if ([widget isKindOfClass:[ADXCoreBarrier class]]) {
          hasBarrier = true;
        }
      }
      if (!hasBarrier) {
        for (ADXRunGroup * __strong group in nil_chk(mGroups_)) {
          [((ADXRunGroup *) nil_chk(group)) defineTerminalWidgetsWithBoolean:horizontalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) withBoolean:verticalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
        }
      }
    }
  }
}

- (jboolean)directMeasureWithBoolean:(jboolean)optimizeWrap {
  optimizeWrap &= ADXDependencyGraph_USE_GROUPS;
  if (mNeedBuildGraph_ || mNeedRedoMeasures_) {
    for (ADXConstraintWidget * __strong widget in nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mChildren_)) {
      [((ADXConstraintWidget *) nil_chk(widget)) ensureWidgetRuns];
      widget->measured_ = false;
      [((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_)) reset];
      [((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_)) reset];
    }
    [container_ ensureWidgetRuns];
    ((ADXConstraintWidgetContainer *) nil_chk(container_))->measured_ = false;
    [((ADXHorizontalWidgetRun *) nil_chk(container_->horizontalRun_)) reset];
    [((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_)) reset];
    mNeedRedoMeasures_ = false;
  }
  jboolean avoid = ADXDependencyGraph_basicMeasureWidgetsWithADXConstraintWidgetContainer_(self, mContainer_);
  if (avoid) {
    return false;
  }
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setXWithInt:0];
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setYWithInt:0];
  ADXConstraintWidget_DimensionBehaviour *originalHorizontalDimension = JreRetainedLocalValue([((ADXConstraintWidgetContainer *) nil_chk(container_)) getDimensionBehaviourWithInt:ADXConstraintWidget_HORIZONTAL]);
  ADXConstraintWidget_DimensionBehaviour *originalVerticalDimension = JreRetainedLocalValue([((ADXConstraintWidgetContainer *) nil_chk(container_)) getDimensionBehaviourWithInt:ADXConstraintWidget_VERTICAL]);
  if (mNeedBuildGraph_) {
    [self buildGraph];
  }
  jint x1 = [((ADXConstraintWidgetContainer *) nil_chk(container_)) getX];
  jint y1 = [((ADXConstraintWidgetContainer *) nil_chk(container_)) getY];
  [((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->start_)) resolveWithInt:x1];
  [((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->start_)) resolveWithInt:y1];
  [self measureWidgets];
  if (originalHorizontalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || originalVerticalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
    if (optimizeWrap) {
      for (ADXWidgetRun * __strong run in nil_chk(mRuns_)) {
        if (![((ADXWidgetRun *) nil_chk(run)) supportsWrapComputation]) {
          optimizeWrap = false;
          break;
        }
      }
    }
    if (optimizeWrap && originalHorizontalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
      [((ADXConstraintWidgetContainer *) nil_chk(container_)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
      [((ADXConstraintWidgetContainer *) nil_chk(container_)) setWidthWithInt:ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(self, container_, ADXConstraintWidget_HORIZONTAL)];
      [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->dimension_)) resolveWithInt:[container_ getWidth]];
    }
    if (optimizeWrap && originalVerticalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
      [((ADXConstraintWidgetContainer *) nil_chk(container_)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
      [((ADXConstraintWidgetContainer *) nil_chk(container_)) setHeightWithInt:ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(self, container_, ADXConstraintWidget_VERTICAL)];
      [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->dimension_)) resolveWithInt:[container_ getHeight]];
    }
  }
  jboolean checkRoot = false;
  if (IOSObjectArray_Get(nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || IOSObjectArray_Get(container_->mListDimensionBehaviors_, ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
    jint x2 = x1 + [container_ getWidth];
    [((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->end_)) resolveWithInt:x2];
    [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->dimension_)) resolveWithInt:x2 - x1];
    [self measureWidgets];
    if (IOSObjectArray_Get(nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mListDimensionBehaviors_), ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || IOSObjectArray_Get(container_->mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
      jint y2 = y1 + [container_ getHeight];
      [((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->end_)) resolveWithInt:y2];
      [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->dimension_)) resolveWithInt:y2 - y1];
    }
    [self measureWidgets];
    checkRoot = true;
  }
  else {
  }
  for (ADXWidgetRun * __strong run in nil_chk(mRuns_)) {
    if (((ADXWidgetRun *) nil_chk(run))->widget_ == container_ && !run->resolved_) {
      continue;
    }
    [run applyToWidget];
  }
  jboolean allResolved = true;
  for (ADXWidgetRun * __strong run in mRuns_) {
    if (!checkRoot && ((ADXWidgetRun *) nil_chk(run))->widget_ == container_) {
      continue;
    }
    if (!((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(run))->start_))->resolved_) {
      allResolved = false;
      break;
    }
    if (!((ADXDependencyNode *) nil_chk(run->end_))->resolved_ && !([run isKindOfClass:[ADXGuidelineReference class]])) {
      allResolved = false;
      break;
    }
    if (!((ADXDimensionDependency *) nil_chk(run->dimension_))->resolved_ && !([run isKindOfClass:[ADXChainRun class]]) && !([run isKindOfClass:[ADXGuidelineReference class]])) {
      allResolved = false;
      break;
    }
  }
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:originalHorizontalDimension];
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:originalVerticalDimension];
  return allResolved;
}

- (jboolean)directMeasureSetupWithBoolean:(jboolean)optimizeWrap {
  if (mNeedBuildGraph_) {
    for (ADXConstraintWidget * __strong widget in nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mChildren_)) {
      [((ADXConstraintWidget *) nil_chk(widget)) ensureWidgetRuns];
      widget->measured_ = false;
      ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_))->resolved_ = false;
      widget->horizontalRun_->resolved_ = false;
      [widget->horizontalRun_ reset];
      ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_))->resolved_ = false;
      widget->verticalRun_->resolved_ = false;
      [widget->verticalRun_ reset];
    }
    [container_ ensureWidgetRuns];
    ((ADXConstraintWidgetContainer *) nil_chk(container_))->measured_ = false;
    ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(container_->horizontalRun_))->dimension_))->resolved_ = false;
    container_->horizontalRun_->resolved_ = false;
    [container_->horizontalRun_ reset];
    ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->dimension_))->resolved_ = false;
    container_->verticalRun_->resolved_ = false;
    [container_->verticalRun_ reset];
    [self buildGraph];
  }
  jboolean avoid = ADXDependencyGraph_basicMeasureWidgetsWithADXConstraintWidgetContainer_(self, mContainer_);
  if (avoid) {
    return false;
  }
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setXWithInt:0];
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setYWithInt:0];
  [((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->start_)) resolveWithInt:0];
  [((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->start_)) resolveWithInt:0];
  return true;
}

- (jboolean)directMeasureWithOrientationWithBoolean:(jboolean)optimizeWrap
                                            withInt:(jint)orientation {
  optimizeWrap &= ADXDependencyGraph_USE_GROUPS;
  ADXConstraintWidget_DimensionBehaviour *originalHorizontalDimension = JreRetainedLocalValue([((ADXConstraintWidgetContainer *) nil_chk(container_)) getDimensionBehaviourWithInt:ADXConstraintWidget_HORIZONTAL]);
  ADXConstraintWidget_DimensionBehaviour *originalVerticalDimension = JreRetainedLocalValue([((ADXConstraintWidgetContainer *) nil_chk(container_)) getDimensionBehaviourWithInt:ADXConstraintWidget_VERTICAL]);
  jint x1 = [((ADXConstraintWidgetContainer *) nil_chk(container_)) getX];
  jint y1 = [((ADXConstraintWidgetContainer *) nil_chk(container_)) getY];
  if (optimizeWrap && (originalHorizontalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || originalVerticalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT))) {
    for (ADXWidgetRun * __strong run in nil_chk(mRuns_)) {
      if (((ADXWidgetRun *) nil_chk(run))->orientation_ == orientation && ![run supportsWrapComputation]) {
        optimizeWrap = false;
        break;
      }
    }
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      if (optimizeWrap && originalHorizontalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
        [((ADXConstraintWidgetContainer *) nil_chk(container_)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
        [((ADXConstraintWidgetContainer *) nil_chk(container_)) setWidthWithInt:ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(self, container_, ADXConstraintWidget_HORIZONTAL)];
        [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->dimension_)) resolveWithInt:[container_ getWidth]];
      }
    }
    else {
      if (optimizeWrap && originalVerticalDimension == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
        [((ADXConstraintWidgetContainer *) nil_chk(container_)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
        [((ADXConstraintWidgetContainer *) nil_chk(container_)) setHeightWithInt:ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(self, container_, ADXConstraintWidget_VERTICAL)];
        [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->dimension_)) resolveWithInt:[container_ getHeight]];
      }
    }
  }
  jboolean checkRoot = false;
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    if (IOSObjectArray_Get(nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || IOSObjectArray_Get(container_->mListDimensionBehaviors_, ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
      jint x2 = x1 + [container_ getWidth];
      [((ADXDependencyNode *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->end_)) resolveWithInt:x2];
      [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_))->dimension_)) resolveWithInt:x2 - x1];
      checkRoot = true;
    }
  }
  else {
    if (IOSObjectArray_Get(nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mListDimensionBehaviors_), ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || IOSObjectArray_Get(container_->mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
      jint y2 = y1 + [container_ getHeight];
      [((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->end_)) resolveWithInt:y2];
      [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_))->dimension_)) resolveWithInt:y2 - y1];
      checkRoot = true;
    }
  }
  [self measureWidgets];
  for (ADXWidgetRun * __strong run in nil_chk(mRuns_)) {
    if (((ADXWidgetRun *) nil_chk(run))->orientation_ != orientation) {
      continue;
    }
    if (run->widget_ == container_ && !run->resolved_) {
      continue;
    }
    [run applyToWidget];
  }
  jboolean allResolved = true;
  for (ADXWidgetRun * __strong run in mRuns_) {
    if (((ADXWidgetRun *) nil_chk(run))->orientation_ != orientation) {
      continue;
    }
    if (!checkRoot && run->widget_ == container_) {
      continue;
    }
    if (!((ADXDependencyNode *) nil_chk(run->start_))->resolved_) {
      allResolved = false;
      break;
    }
    if (!((ADXDependencyNode *) nil_chk(run->end_))->resolved_) {
      allResolved = false;
      break;
    }
    if (!([run isKindOfClass:[ADXChainRun class]]) && !((ADXDimensionDependency *) nil_chk(run->dimension_))->resolved_) {
      allResolved = false;
      break;
    }
  }
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:originalHorizontalDimension];
  [((ADXConstraintWidgetContainer *) nil_chk(container_)) setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:originalVerticalDimension];
  return allResolved;
}

- (void)measureWithADXConstraintWidget:(ADXConstraintWidget *)widget
withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)horizontalBehavior
                               withInt:(jint)horizontalDimension
withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)verticalBehavior
                               withInt:(jint)verticalDimension {
  ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, horizontalBehavior, horizontalDimension, verticalBehavior, verticalDimension);
}

- (jboolean)basicMeasureWidgetsWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)constraintWidgetContainer {
  return ADXDependencyGraph_basicMeasureWidgetsWithADXConstraintWidgetContainer_(self, constraintWidgetContainer);
}

- (void)measureWidgets {
  for (ADXConstraintWidget * __strong widget in nil_chk(((ADXConstraintWidgetContainer *) nil_chk(container_))->mChildren_)) {
    if (((ADXConstraintWidget *) nil_chk(widget))->measured_) {
      continue;
    }
    ADXConstraintWidget_DimensionBehaviour *horiz = IOSObjectArray_Get(nil_chk(widget->mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL);
    ADXConstraintWidget_DimensionBehaviour *vert = IOSObjectArray_Get(widget->mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL);
    jint horizMatchConstraintsType = widget->mMatchConstraintDefaultWidth_;
    jint vertMatchConstraintsType = widget->mMatchConstraintDefaultHeight_;
    jboolean horizWrap = horiz == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || (horiz == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && horizMatchConstraintsType == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP);
    jboolean vertWrap = vert == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || (vert == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && vertMatchConstraintsType == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP);
    jboolean horizResolved = ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_))->resolved_;
    jboolean vertResolved = ((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_->resolved_;
    if (horizResolved && vertResolved) {
      ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), widget->horizontalRun_->dimension_->value_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), widget->verticalRun_->dimension_->value_);
      widget->measured_ = true;
    }
    else if (horizResolved && vertWrap) {
      ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), widget->horizontalRun_->dimension_->value_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), widget->verticalRun_->dimension_->value_);
      if (vert == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_))->wrapValue_ = [widget getHeight];
      }
      else {
        [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
        widget->measured_ = true;
      }
    }
    else if (vertResolved && horizWrap) {
      ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), widget->horizontalRun_->dimension_->value_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), widget->verticalRun_->dimension_->value_);
      if (horiz == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_))->wrapValue_ = [widget getWidth];
      }
      else {
        [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
        widget->measured_ = true;
      }
    }
    if (widget->measured_ && ((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->baselineDimension_ != nil) {
      [((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->baselineDimension_ resolveWithInt:[widget getBaselineDistance]];
    }
  }
}

- (void)invalidateGraph {
  mNeedBuildGraph_ = true;
}

- (void)invalidateMeasures {
  mNeedRedoMeasures_ = true;
}

- (void)buildGraph {
  [self buildGraphWithJavaUtilArrayList:mRuns_];
  {
    [((JavaUtilArrayList *) nil_chk(mGroups_)) clear];
    *JreLoadStaticRef(ADXRunGroup, index) = 0;
    ADXDependencyGraph_findGroupWithADXWidgetRun_withInt_withJavaUtilArrayList_(self, ((ADXConstraintWidgetContainer *) nil_chk(container_))->horizontalRun_, ADXConstraintWidget_HORIZONTAL, mGroups_);
    ADXDependencyGraph_findGroupWithADXWidgetRun_withInt_withJavaUtilArrayList_(self, ((ADXConstraintWidgetContainer *) nil_chk(container_))->verticalRun_, ADXConstraintWidget_VERTICAL, mGroups_);
  }
  mNeedBuildGraph_ = false;
}

- (void)buildGraphWithJavaUtilArrayList:(JavaUtilArrayList *)runs {
  [((JavaUtilArrayList *) nil_chk(runs)) clear];
  [((ADXHorizontalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(mContainer_))->horizontalRun_)) clear];
  [((ADXVerticalWidgetRun *) nil_chk(((ADXConstraintWidgetContainer *) nil_chk(mContainer_))->verticalRun_)) clear];
  [runs addWithId:((ADXConstraintWidgetContainer *) nil_chk(mContainer_))->horizontalRun_];
  [runs addWithId:((ADXConstraintWidgetContainer *) nil_chk(mContainer_))->verticalRun_];
  JavaUtilHashSet *chainRuns = nil;
  for (ADXConstraintWidget * __strong widget in nil_chk(((ADXConstraintWidgetContainer *) nil_chk(mContainer_))->mChildren_)) {
    if ([widget isKindOfClass:[ADXCoreGuideline class]]) {
      [runs addWithId:create_ADXGuidelineReference_initPackagePrivateWithADXConstraintWidget_(widget)];
      continue;
    }
    if ([((ADXConstraintWidget *) nil_chk(widget)) isInHorizontalChain]) {
      if (widget->horizontalChainRun_ == nil) {
        JreStrongAssignAndConsume(&widget->horizontalChainRun_, new_ADXChainRun_initWithADXConstraintWidget_withInt_(widget, ADXConstraintWidget_HORIZONTAL));
      }
      if (chainRuns == nil) {
        chainRuns = create_JavaUtilHashSet_init();
      }
      [chainRuns addWithId:widget->horizontalChainRun_];
    }
    else {
      [runs addWithId:widget->horizontalRun_];
    }
    if ([widget isInVerticalChain]) {
      if (widget->verticalChainRun_ == nil) {
        JreStrongAssignAndConsume(&widget->verticalChainRun_, new_ADXChainRun_initWithADXConstraintWidget_withInt_(widget, ADXConstraintWidget_VERTICAL));
      }
      if (chainRuns == nil) {
        chainRuns = create_JavaUtilHashSet_init();
      }
      [chainRuns addWithId:widget->verticalChainRun_];
    }
    else {
      [runs addWithId:widget->verticalRun_];
    }
    if ([widget isKindOfClass:[ADXHelperWidget class]]) {
      [runs addWithId:create_ADXHelperReferences_initPackagePrivateWithADXConstraintWidget_(widget)];
    }
  }
  if (chainRuns != nil) {
    [runs addAllWithJavaUtilCollection:chainRuns];
  }
  for (ADXWidgetRun * __strong run in runs) {
    [((ADXWidgetRun *) nil_chk(run)) clear];
  }
  for (ADXWidgetRun * __strong run in runs) {
    if (((ADXWidgetRun *) nil_chk(run))->widget_ == mContainer_) {
      continue;
    }
    [run apply];
  }
}

- (void)displayGraph {
  ADXDependencyGraph_displayGraph(self);
}

- (void)applyGroupWithADXDependencyNode:(ADXDependencyNode *)node
                                withInt:(jint)orientation
                                withInt:(jint)direction
                  withADXDependencyNode:(ADXDependencyNode *)end
                  withJavaUtilArrayList:(JavaUtilArrayList *)groups
                        withADXRunGroup:(ADXRunGroup *)group {
  ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, node, orientation, direction, end, groups, group);
}

- (void)findGroupWithADXWidgetRun:(ADXWidgetRun *)run
                          withInt:(jint)orientation
            withJavaUtilArrayList:(JavaUtilArrayList *)groups {
  ADXDependencyGraph_findGroupWithADXWidgetRun_withInt_withJavaUtilArrayList_(self, run, orientation, groups);
}

- (NSString *)generateDisplayNodeWithADXDependencyNode:(ADXDependencyNode *)node
                                           withBoolean:(jboolean)centeredConnection
                                          withNSString:(NSString *)content {
  return ADXDependencyGraph_generateDisplayNodeWithADXDependencyNode_withBoolean_withNSString_(self, node, centeredConnection, content);
}

- (NSString *)nodeDefinitionWithADXWidgetRun:(ADXWidgetRun *)run {
  return ADXDependencyGraph_nodeDefinitionWithADXWidgetRun_(self, run);
}

- (NSString *)generateChainDisplayGraphWithADXChainRun:(ADXChainRun *)chain
                                          withNSString:(NSString *)content {
  return ADXDependencyGraph_generateChainDisplayGraphWithADXChainRun_withNSString_(self, chain, content);
}

- (jboolean)isCenteredConnectionWithADXDependencyNode:(ADXDependencyNode *)start
                                withADXDependencyNode:(ADXDependencyNode *)end {
  return ADXDependencyGraph_isCenteredConnectionWithADXDependencyNode_withADXDependencyNode_(self, start, end);
}

- (NSString *)generateDisplayGraphWithADXWidgetRun:(ADXWidgetRun *)root
                                      withNSString:(NSString *)content {
  return ADXDependencyGraph_generateDisplayGraphWithADXWidgetRun_withNSString_(self, root, content);
}

- (void)dealloc {
  RELEASE_(container_);
  RELEASE_(mContainer_);
  RELEASE_(mRuns_);
  RELEASE_(runGroups_);
  RELEASE_(mMeasurer_);
  RELEASE_(mMeasure_);
  RELEASE_(mGroups_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 14, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, 17, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, 23, -1, -1 },
    { NULL, "LNSString;", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 28, 29, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 30, 31, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 32, 33, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXConstraintWidgetContainer:);
  methods[1].selector = @selector(setMeasurerWithADXBasicMeasure_Measurer:);
  methods[2].selector = @selector(computeWrapWithADXConstraintWidgetContainer:withInt:);
  methods[3].selector = @selector(defineTerminalWidgetsWithADXConstraintWidget_DimensionBehaviour:withADXConstraintWidget_DimensionBehaviour:);
  methods[4].selector = @selector(directMeasureWithBoolean:);
  methods[5].selector = @selector(directMeasureSetupWithBoolean:);
  methods[6].selector = @selector(directMeasureWithOrientationWithBoolean:withInt:);
  methods[7].selector = @selector(measureWithADXConstraintWidget:withADXConstraintWidget_DimensionBehaviour:withInt:withADXConstraintWidget_DimensionBehaviour:withInt:);
  methods[8].selector = @selector(basicMeasureWidgetsWithADXConstraintWidgetContainer:);
  methods[9].selector = @selector(measureWidgets);
  methods[10].selector = @selector(invalidateGraph);
  methods[11].selector = @selector(invalidateMeasures);
  methods[12].selector = @selector(buildGraph);
  methods[13].selector = @selector(buildGraphWithJavaUtilArrayList:);
  methods[14].selector = @selector(displayGraph);
  methods[15].selector = @selector(applyGroupWithADXDependencyNode:withInt:withInt:withADXDependencyNode:withJavaUtilArrayList:withADXRunGroup:);
  methods[16].selector = @selector(findGroupWithADXWidgetRun:withInt:withJavaUtilArrayList:);
  methods[17].selector = @selector(generateDisplayNodeWithADXDependencyNode:withBoolean:withNSString:);
  methods[18].selector = @selector(nodeDefinitionWithADXWidgetRun:);
  methods[19].selector = @selector(generateChainDisplayGraphWithADXChainRun:withNSString:);
  methods[20].selector = @selector(isCenteredConnectionWithADXDependencyNode:withADXDependencyNode:);
  methods[21].selector = @selector(generateDisplayGraphWithADXWidgetRun:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "USE_GROUPS", "Z", .constantValue.asBOOL = ADXDependencyGraph_USE_GROUPS, 0x1a, -1, -1, -1, -1 },
    { "container_", "LADXConstraintWidgetContainer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNeedBuildGraph_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNeedRedoMeasures_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContainer_", "LADXConstraintWidgetContainer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRuns_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 34, -1 },
    { "runGroups_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 35, -1 },
    { "mMeasurer_", "LADXBasicMeasure_Measurer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMeasure_", "LADXBasicMeasure_Measure;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGroups_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 35, -1 },
  };
  static const void *ptrTable[] = { "LADXConstraintWidgetContainer;", "setMeasurer", "LADXBasicMeasure_Measurer;", "computeWrap", "LADXConstraintWidgetContainer;I", "defineTerminalWidgets", "LADXConstraintWidget_DimensionBehaviour;LADXConstraintWidget_DimensionBehaviour;", "directMeasure", "Z", "directMeasureSetup", "directMeasureWithOrientation", "ZI", "measure", "LADXConstraintWidget;LADXConstraintWidget_DimensionBehaviour;ILADXConstraintWidget_DimensionBehaviour;I", "basicMeasureWidgets", "buildGraph", "LJavaUtilArrayList;", "(Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/WidgetRun;>;)V", "applyGroup", "LADXDependencyNode;IILADXDependencyNode;LJavaUtilArrayList;LADXRunGroup;", "(Landroidx/constraintlayout/core/widgets/analyzer/DependencyNode;IILandroidx/constraintlayout/core/widgets/analyzer/DependencyNode;Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/RunGroup;>;Landroidx/constraintlayout/core/widgets/analyzer/RunGroup;)V", "findGroup", "LADXWidgetRun;ILJavaUtilArrayList;", "(Landroidx/constraintlayout/core/widgets/analyzer/WidgetRun;ILjava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/RunGroup;>;)V", "generateDisplayNode", "LADXDependencyNode;ZLNSString;", "nodeDefinition", "LADXWidgetRun;", "generateChainDisplayGraph", "LADXChainRun;LNSString;", "isCenteredConnection", "LADXDependencyNode;LADXDependencyNode;", "generateDisplayGraph", "LADXWidgetRun;LNSString;", "Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/WidgetRun;>;", "Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/RunGroup;>;" };
  static const J2ObjcClassInfo _ADXDependencyGraph = { "DependencyGraph", "androidx.constraintlayout.core.widgets.analyzer", ptrTable, methods, fields, 7, 0x1, 22, 10, -1, -1, -1, -1, -1 };
  return &_ADXDependencyGraph;
}

@end

void ADXDependencyGraph_initWithADXConstraintWidgetContainer_(ADXDependencyGraph *self, ADXConstraintWidgetContainer *container) {
  NSObject_init(self);
  self->mNeedBuildGraph_ = true;
  self->mNeedRedoMeasures_ = true;
  JreStrongAssignAndConsume(&self->mRuns_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->runGroups_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mMeasurer_, nil);
  JreStrongAssignAndConsume(&self->mMeasure_, new_ADXBasicMeasure_Measure_init());
  JreStrongAssignAndConsume(&self->mGroups_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->container_, container);
  JreStrongAssign(&self->mContainer_, container);
}

ADXDependencyGraph *new_ADXDependencyGraph_initWithADXConstraintWidgetContainer_(ADXConstraintWidgetContainer *container) {
  J2OBJC_NEW_IMPL(ADXDependencyGraph, initWithADXConstraintWidgetContainer_, container)
}

ADXDependencyGraph *create_ADXDependencyGraph_initWithADXConstraintWidgetContainer_(ADXConstraintWidgetContainer *container) {
  J2OBJC_CREATE_IMPL(ADXDependencyGraph, initWithADXConstraintWidgetContainer_, container)
}

jint ADXDependencyGraph_computeWrapWithADXConstraintWidgetContainer_withInt_(ADXDependencyGraph *self, ADXConstraintWidgetContainer *container, jint orientation) {
  jint count = [((JavaUtilArrayList *) nil_chk(self->mGroups_)) size];
  jlong wrapSize = 0;
  for (jint i = 0; i < count; i++) {
    ADXRunGroup *run = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(self->mGroups_)) getWithInt:i]);
    jlong size = [((ADXRunGroup *) nil_chk(run)) computeWrapSizeWithADXConstraintWidgetContainer:container withInt:orientation];
    wrapSize = JavaLangMath_maxWithLong_withLong_(wrapSize, size);
  }
  return (jint) wrapSize;
}

void ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(ADXDependencyGraph *self, ADXConstraintWidget *widget, ADXConstraintWidget_DimensionBehaviour *horizontalBehavior, jint horizontalDimension, ADXConstraintWidget_DimensionBehaviour *verticalBehavior, jint verticalDimension) {
  JreStrongAssign(&((ADXBasicMeasure_Measure *) nil_chk(self->mMeasure_))->horizontalBehavior_, horizontalBehavior);
  JreStrongAssign(&self->mMeasure_->verticalBehavior_, verticalBehavior);
  self->mMeasure_->horizontalDimension_ = horizontalDimension;
  self->mMeasure_->verticalDimension_ = verticalDimension;
  [((id<ADXBasicMeasure_Measurer>) nil_chk(self->mMeasurer_)) measureWithADXConstraintWidget:widget withADXBasicMeasure_Measure:self->mMeasure_];
  [((ADXConstraintWidget *) nil_chk(widget)) setWidthWithInt:((ADXBasicMeasure_Measure *) nil_chk(self->mMeasure_))->measuredWidth_];
  [widget setHeightWithInt:((ADXBasicMeasure_Measure *) nil_chk(self->mMeasure_))->measuredHeight_];
  [widget setHasBaselineWithBoolean:((ADXBasicMeasure_Measure *) nil_chk(self->mMeasure_))->measuredHasBaseline_];
  [widget setBaselineDistanceWithInt:((ADXBasicMeasure_Measure *) nil_chk(self->mMeasure_))->measuredBaseline_];
}

jboolean ADXDependencyGraph_basicMeasureWidgetsWithADXConstraintWidgetContainer_(ADXDependencyGraph *self, ADXConstraintWidgetContainer *constraintWidgetContainer) {
  for (ADXConstraintWidget * __strong widget in nil_chk(((ADXConstraintWidgetContainer *) nil_chk(constraintWidgetContainer))->mChildren_)) {
    ADXConstraintWidget_DimensionBehaviour *horizontal = IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL);
    ADXConstraintWidget_DimensionBehaviour *vertical = IOSObjectArray_Get(widget->mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL);
    if ([widget getVisibility] == ADXConstraintWidget_GONE) {
      widget->measured_ = true;
      continue;
    }
    if (widget->mMatchConstraintPercentWidth_ < 1 && horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      widget->mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT;
    }
    if (widget->mMatchConstraintPercentHeight_ < 1 && vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      widget->mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT;
    }
    if ([widget getDimensionRatio] > 0) {
      if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED))) {
        widget->mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
      }
      else if (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED))) {
        widget->mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
      }
      else if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
        if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
          widget->mMatchConstraintDefaultWidth_ = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
        }
        if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
          widget->mMatchConstraintDefaultHeight_ = ADXConstraintWidget_MATCH_CONSTRAINT_RATIO;
        }
      }
    }
    if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
      if (((ADXConstraintAnchor *) nil_chk(widget->mLeft_))->mTarget_ == nil || ((ADXConstraintAnchor *) nil_chk(widget->mRight_))->mTarget_ == nil) {
        horizontal = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
      }
    }
    if (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
      if (((ADXConstraintAnchor *) nil_chk(widget->mTop_))->mTarget_ == nil || ((ADXConstraintAnchor *) nil_chk(widget->mBottom_))->mTarget_ == nil) {
        vertical = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
      }
    }
    JreStrongAssign(&((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimensionBehavior_, horizontal);
    widget->horizontalRun_->matchConstraintsType_ = widget->mMatchConstraintDefaultWidth_;
    JreStrongAssign(&((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimensionBehavior_, vertical);
    widget->verticalRun_->matchConstraintsType_ = widget->mMatchConstraintDefaultHeight_;
    if ((horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT) || horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) && (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT) || vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT))) {
      jint width = [widget getWidth];
      if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
        width = [constraintWidgetContainer getWidth] - ((ADXConstraintAnchor *) nil_chk(widget->mLeft_))->mMargin_ - ((ADXConstraintAnchor *) nil_chk(widget->mRight_))->mMargin_;
        horizontal = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED);
      }
      jint height = [widget getHeight];
      if (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
        height = [constraintWidgetContainer getHeight] - ((ADXConstraintAnchor *) nil_chk(widget->mTop_))->mMargin_ - ((ADXConstraintAnchor *) nil_chk(widget->mBottom_))->mMargin_;
        vertical = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED);
      }
      ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, horizontal, width, vertical, height);
      [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
      [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
      widget->measured_ = true;
      continue;
    }
    if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED))) {
      if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
        if (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
          ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0);
        }
        jint height = [widget getHeight];
        jint width = JreFpToInt((height * widget->mDimensionRatio_ + 0.5f));
        ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), width, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), height);
        [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
        [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
        widget->measured_ = true;
        continue;
      }
      else if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
        ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0, vertical, 0);
        ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_))->wrapValue_ = [widget getWidth];
        continue;
      }
      else if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT) {
        if (IOSObjectArray_Get(nil_chk(constraintWidgetContainer->mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || IOSObjectArray_Get(constraintWidgetContainer->mListDimensionBehaviors_, ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
          jfloat percent = widget->mMatchConstraintPercentWidth_;
          jint width = JreFpToInt((0.5f + percent * [constraintWidgetContainer getWidth]));
          jint height = [widget getHeight];
          ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), width, vertical, height);
          [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
          [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
          widget->measured_ = true;
          continue;
        }
      }
      else {
        if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(widget->mListAnchors_), ADXConstraintWidget_ANCHOR_LEFT)))->mTarget_ == nil || ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget->mListAnchors_, ADXConstraintWidget_ANCHOR_RIGHT)))->mTarget_ == nil) {
          ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0, vertical, 0);
          [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
          [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
          widget->measured_ = true;
          continue;
        }
      }
    }
    if (vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED))) {
      if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO) {
        if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
          ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0);
        }
        jint width = [widget getWidth];
        jfloat ratio = widget->mDimensionRatio_;
        if ([widget getDimensionRatioSide] == ADXConstraintWidget_UNKNOWN) {
          ratio = 1.0f / ratio;
        }
        jint height = JreFpToInt((width * ratio + 0.5f));
        ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), width, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), height);
        [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
        [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
        widget->measured_ = true;
        continue;
      }
      else if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
        ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, horizontal, 0, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0);
        ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_))->wrapValue_ = [widget getHeight];
        continue;
      }
      else if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT) {
        if (IOSObjectArray_Get(nil_chk(constraintWidgetContainer->mListDimensionBehaviors_), ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || IOSObjectArray_Get(constraintWidgetContainer->mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)) {
          jfloat percent = widget->mMatchConstraintPercentHeight_;
          jint width = [widget getWidth];
          jint height = JreFpToInt((0.5f + percent * [constraintWidgetContainer getHeight]));
          ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, horizontal, width, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), height);
          [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
          [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
          widget->measured_ = true;
          continue;
        }
      }
      else {
        if (((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(nil_chk(widget->mListAnchors_), ADXConstraintWidget_ANCHOR_TOP)))->mTarget_ == nil || ((ADXConstraintAnchor *) nil_chk(IOSObjectArray_Get(widget->mListAnchors_, ADXConstraintWidget_ANCHOR_BOTTOM)))->mTarget_ == nil) {
          ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0, vertical, 0);
          [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
          [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
          widget->measured_ = true;
          continue;
        }
      }
    }
    if (horizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && vertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
      if (widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP || widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_WRAP) {
        ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT), 0);
        ((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_))->wrapValue_ = [widget getWidth];
        ((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_))->wrapValue_ = [widget getHeight];
      }
      else if (widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT && widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_PERCENT && IOSObjectArray_Get(nil_chk(constraintWidgetContainer->mListDimensionBehaviors_), ADXConstraintWidget_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) && IOSObjectArray_Get(constraintWidgetContainer->mListDimensionBehaviors_, ADXConstraintWidget_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
        jfloat horizPercent = widget->mMatchConstraintPercentWidth_;
        jfloat vertPercent = widget->mMatchConstraintPercentHeight_;
        jint width = JreFpToInt((0.5f + horizPercent * [constraintWidgetContainer getWidth]));
        jint height = JreFpToInt((0.5f + vertPercent * [constraintWidgetContainer getHeight]));
        ADXDependencyGraph_measureWithADXConstraintWidget_withADXConstraintWidget_DimensionBehaviour_withInt_withADXConstraintWidget_DimensionBehaviour_withInt_(self, widget, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), width, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED), height);
        [((ADXDimensionDependency *) nil_chk(((ADXHorizontalWidgetRun *) nil_chk(widget->horizontalRun_))->dimension_)) resolveWithInt:[widget getWidth]];
        [((ADXDimensionDependency *) nil_chk(((ADXVerticalWidgetRun *) nil_chk(widget->verticalRun_))->dimension_)) resolveWithInt:[widget getHeight]];
        widget->measured_ = true;
      }
    }
  }
  return false;
}

void ADXDependencyGraph_displayGraph(ADXDependencyGraph *self) {
  NSString *content = @"digraph {\n";
  for (ADXWidgetRun * __strong run in nil_chk(self->mRuns_)) {
    content = ADXDependencyGraph_generateDisplayGraphWithADXWidgetRun_withNSString_(self, run, content);
  }
  JreStrAppend(&content, "$", @"\n}\n");
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$$", @"content:<<\n", content, @"\n>>")];
}

void ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(ADXDependencyGraph *self, ADXDependencyNode *node, jint orientation, jint direction, ADXDependencyNode *end, JavaUtilArrayList *groups, ADXRunGroup *group) {
  ADXWidgetRun *run = JreRetainedLocalValue(((ADXDependencyNode *) nil_chk(node))->run_);
  if (((ADXWidgetRun *) nil_chk(run))->runGroup_ != nil || run == ((ADXConstraintWidgetContainer *) nil_chk(self->container_))->horizontalRun_ || run == self->container_->verticalRun_) {
    return;
  }
  if (group == nil) {
    group = create_ADXRunGroup_initPackagePrivateWithADXWidgetRun_withInt_(run, direction);
    [((JavaUtilArrayList *) nil_chk(groups)) addWithId:group];
  }
  JreStrongAssign(&run->runGroup_, group);
  [group addWithADXWidgetRun:run];
  for (id<ADXDependency> __strong dependent in nil_chk(((ADXDependencyNode *) nil_chk(run->start_))->dependencies_)) {
    if ([dependent isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, (ADXDependencyNode *) dependent, orientation, ADXRunGroup_START, end, groups, group);
    }
  }
  for (id<ADXDependency> __strong dependent in ((ADXDependencyNode *) nil_chk(run->end_))->dependencies_) {
    if ([dependent isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, (ADXDependencyNode *) dependent, orientation, ADXRunGroup_END, end, groups, group);
    }
  }
  if (orientation == ADXConstraintWidget_VERTICAL && [run isKindOfClass:[ADXVerticalWidgetRun class]]) {
    for (id<ADXDependency> __strong dependent in ((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) cast_chk(run, [ADXVerticalWidgetRun class]))->baseline_))->dependencies_) {
      if ([dependent isKindOfClass:[ADXDependencyNode class]]) {
        ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, (ADXDependencyNode *) dependent, orientation, ADXRunGroup_BASELINE, end, groups, group);
      }
    }
  }
  for (ADXDependencyNode * __strong target in nil_chk(run->start_->targets_)) {
    if (target == end) {
      group->dual_ = true;
    }
    ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, target, orientation, ADXRunGroup_START, end, groups, group);
  }
  for (ADXDependencyNode * __strong target in run->end_->targets_) {
    if (target == end) {
      group->dual_ = true;
    }
    ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, target, orientation, ADXRunGroup_END, end, groups, group);
  }
  if (orientation == ADXConstraintWidget_VERTICAL && [run isKindOfClass:[ADXVerticalWidgetRun class]]) {
    for (ADXDependencyNode * __strong target in ((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) cast_chk(run, [ADXVerticalWidgetRun class]))->baseline_))->targets_) {
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, target, orientation, ADXRunGroup_BASELINE, end, groups, group);
    }
  }
}

void ADXDependencyGraph_findGroupWithADXWidgetRun_withInt_withJavaUtilArrayList_(ADXDependencyGraph *self, ADXWidgetRun *run, jint orientation, JavaUtilArrayList *groups) {
  for (id<ADXDependency> __strong dependent in nil_chk(((ADXDependencyNode *) nil_chk(((ADXWidgetRun *) nil_chk(run))->start_))->dependencies_)) {
    if ([dependent isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyNode *node = (ADXDependencyNode *) dependent;
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, node, orientation, ADXRunGroup_START, run->end_, groups, nil);
    }
    else if ([dependent isKindOfClass:[ADXWidgetRun class]]) {
      ADXWidgetRun *dependentRun = (ADXWidgetRun *) dependent;
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, ((ADXWidgetRun *) nil_chk(dependentRun))->start_, orientation, ADXRunGroup_START, run->end_, groups, nil);
    }
  }
  for (id<ADXDependency> __strong dependent in ((ADXDependencyNode *) nil_chk(run->end_))->dependencies_) {
    if ([dependent isKindOfClass:[ADXDependencyNode class]]) {
      ADXDependencyNode *node = (ADXDependencyNode *) dependent;
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, node, orientation, ADXRunGroup_END, run->start_, groups, nil);
    }
    else if ([dependent isKindOfClass:[ADXWidgetRun class]]) {
      ADXWidgetRun *dependentRun = (ADXWidgetRun *) dependent;
      ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, ((ADXWidgetRun *) nil_chk(dependentRun))->end_, orientation, ADXRunGroup_END, run->start_, groups, nil);
    }
  }
  if (orientation == ADXConstraintWidget_VERTICAL) {
    for (id<ADXDependency> __strong dependent in ((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) cast_chk(run, [ADXVerticalWidgetRun class]))->baseline_))->dependencies_) {
      if ([dependent isKindOfClass:[ADXDependencyNode class]]) {
        ADXDependencyNode *node = (ADXDependencyNode *) dependent;
        ADXDependencyGraph_applyGroupWithADXDependencyNode_withInt_withInt_withADXDependencyNode_withJavaUtilArrayList_withADXRunGroup_(self, node, orientation, ADXRunGroup_BASELINE, nil, groups, nil);
      }
    }
  }
}

NSString *ADXDependencyGraph_generateDisplayNodeWithADXDependencyNode_withBoolean_withNSString_(ADXDependencyGraph *self, ADXDependencyNode *node, jboolean centeredConnection, NSString *content) {
  JavaLangStringBuilder *contentBuilder = create_JavaLangStringBuilder_initWithNSString_(content);
  for (ADXDependencyNode * __strong target in nil_chk(((ADXDependencyNode *) nil_chk(node))->targets_)) {
    NSString *constraint = JreStrcat("C$", 0x000a, [node name]);
    JreStrAppend(&constraint, "$$", @" -> ", [((ADXDependencyNode *) nil_chk(target)) name]);
    if (node->margin_ > 0 || centeredConnection || [node->run_ isKindOfClass:[ADXHelperReferences class]]) {
      JreStrAppend(&constraint, "$", @"[");
      if (node->margin_ > 0) {
        JreStrAppend(&constraint, "$IC", @"label=\"", node->margin_, '"');
        if (centeredConnection) {
          JreStrAppend(&constraint, "$", @",");
        }
      }
      if (centeredConnection) {
        JreStrAppend(&constraint, "$", @" style=dashed ");
      }
      if ([node->run_ isKindOfClass:[ADXHelperReferences class]]) {
        JreStrAppend(&constraint, "$", @" style=bold,color=gray ");
      }
      JreStrAppend(&constraint, "$", @"]");
    }
    JreStrAppend(&constraint, "$", @"\n");
    [contentBuilder appendWithNSString:constraint];
  }
  content = [contentBuilder description];
  return content;
}

NSString *ADXDependencyGraph_nodeDefinitionWithADXWidgetRun_(ADXDependencyGraph *self, ADXWidgetRun *run) {
  jint orientation = [run isKindOfClass:[ADXVerticalWidgetRun class]] ? ADXConstraintWidget_VERTICAL : ADXConstraintWidget_HORIZONTAL;
  NSString *name = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(((ADXWidgetRun *) nil_chk(run))->widget_)) getDebugName]);
  JavaLangStringBuilder *definition = create_JavaLangStringBuilder_initWithNSString_(name);
  ADXConstraintWidget_DimensionBehaviour *behaviour = orientation == ADXConstraintWidget_HORIZONTAL ? [((ADXConstraintWidget *) nil_chk(run->widget_)) getHorizontalDimensionBehaviour] : [((ADXConstraintWidget *) nil_chk(run->widget_)) getVerticalDimensionBehaviour];
  ADXRunGroup *runGroup = JreRetainedLocalValue(run->runGroup_);
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    [definition appendWithNSString:@"_HORIZONTAL"];
  }
  else {
    [definition appendWithNSString:@"_VERTICAL"];
  }
  [definition appendWithNSString:@" [shape=none, label=<"];
  [definition appendWithNSString:@"<TABLE BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"2\">"];
  [definition appendWithNSString:@"  <TR>"];
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    [definition appendWithNSString:@"    <TD "];
    if (((ADXDependencyNode *) nil_chk(run->start_))->resolved_) {
      [definition appendWithNSString:@" BGCOLOR=\"green\""];
    }
    [definition appendWithNSString:@" PORT=\"LEFT\" BORDER=\"1\">L</TD>"];
  }
  else {
    [definition appendWithNSString:@"    <TD "];
    if (((ADXDependencyNode *) nil_chk(run->start_))->resolved_) {
      [definition appendWithNSString:@" BGCOLOR=\"green\""];
    }
    [definition appendWithNSString:@" PORT=\"TOP\" BORDER=\"1\">T</TD>"];
  }
  [definition appendWithNSString:@"    <TD BORDER=\"1\" "];
  if (((ADXDimensionDependency *) nil_chk(run->dimension_))->resolved_ && !((ADXConstraintWidget *) nil_chk(run->widget_))->measured_) {
    [definition appendWithNSString:@" BGCOLOR=\"green\" "];
  }
  else if (run->dimension_->resolved_) {
    [definition appendWithNSString:@" BGCOLOR=\"lightgray\" "];
  }
  else if (((ADXConstraintWidget *) nil_chk(run->widget_))->measured_) {
    [definition appendWithNSString:@" BGCOLOR=\"yellow\" "];
  }
  if (behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)) {
    [definition appendWithNSString:@"style=\"dashed\""];
  }
  [definition appendWithNSString:@">"];
  [definition appendWithNSString:name];
  if (runGroup != nil) {
    [definition appendWithNSString:@" ["];
    [definition appendWithInt:runGroup->groupIndex_ + 1];
    [definition appendWithNSString:@"/"];
    [definition appendWithInt:JreLoadStatic(ADXRunGroup, index)];
    [definition appendWithNSString:@"]"];
  }
  [definition appendWithNSString:@" </TD>"];
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    [definition appendWithNSString:@"    <TD "];
    if (((ADXDependencyNode *) nil_chk(run->end_))->resolved_) {
      [definition appendWithNSString:@" BGCOLOR=\"green\""];
    }
    [definition appendWithNSString:@" PORT=\"RIGHT\" BORDER=\"1\">R</TD>"];
  }
  else {
    [definition appendWithNSString:@"    <TD "];
    if (((ADXDependencyNode *) nil_chk(((ADXVerticalWidgetRun *) cast_chk(run, [ADXVerticalWidgetRun class]))->baseline_))->resolved_) {
      [definition appendWithNSString:@" BGCOLOR=\"green\""];
    }
    [definition appendWithNSString:@" PORT=\"BASELINE\" BORDER=\"1\">b</TD>"];
    [definition appendWithNSString:@"    <TD "];
    if (((ADXDependencyNode *) nil_chk(run->end_))->resolved_) {
      [definition appendWithNSString:@" BGCOLOR=\"green\""];
    }
    [definition appendWithNSString:@" PORT=\"BOTTOM\" BORDER=\"1\">B</TD>"];
  }
  [definition appendWithNSString:@"  </TR></TABLE>"];
  [definition appendWithNSString:@">];\n"];
  return [definition description];
}

NSString *ADXDependencyGraph_generateChainDisplayGraphWithADXChainRun_withNSString_(ADXDependencyGraph *self, ADXChainRun *chain, NSString *content) {
  jint orientation = ((ADXChainRun *) nil_chk(chain))->orientation_;
  JavaLangStringBuilder *subgroup = create_JavaLangStringBuilder_initWithNSString_(@"subgraph ");
  [subgroup appendWithNSString:@"cluster_"];
  [subgroup appendWithNSString:[((ADXConstraintWidget *) nil_chk(chain->widget_)) getDebugName]];
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    [subgroup appendWithNSString:@"_h"];
  }
  else {
    [subgroup appendWithNSString:@"_v"];
  }
  [subgroup appendWithNSString:@" {\n"];
  NSString *definitions = @"";
  for (ADXWidgetRun * __strong run in nil_chk(chain->widgets_)) {
    [subgroup appendWithNSString:[((ADXConstraintWidget *) nil_chk(((ADXWidgetRun *) nil_chk(run))->widget_)) getDebugName]];
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      [subgroup appendWithNSString:@"_HORIZONTAL"];
    }
    else {
      [subgroup appendWithNSString:@"_VERTICAL"];
    }
    [subgroup appendWithNSString:@";\n"];
    definitions = ADXDependencyGraph_generateDisplayGraphWithADXWidgetRun_withNSString_(self, run, definitions);
  }
  [subgroup appendWithNSString:@"}\n"];
  return JreStrcat("$$@", content, definitions, subgroup);
}

jboolean ADXDependencyGraph_isCenteredConnectionWithADXDependencyNode_withADXDependencyNode_(ADXDependencyGraph *self, ADXDependencyNode *start, ADXDependencyNode *end) {
  jint startTargets = 0;
  jint endTargets = 0;
  for (ADXDependencyNode * __strong s in nil_chk(((ADXDependencyNode *) nil_chk(start))->targets_)) {
    if (s != end) {
      startTargets++;
    }
  }
  for (ADXDependencyNode * __strong e in ((ADXDependencyNode *) nil_chk(end))->targets_) {
    if (e != start) {
      endTargets++;
    }
  }
  return startTargets > 0 && endTargets > 0;
}

NSString *ADXDependencyGraph_generateDisplayGraphWithADXWidgetRun_withNSString_(ADXDependencyGraph *self, ADXWidgetRun *root, NSString *content) {
  ADXDependencyNode *start = JreRetainedLocalValue(((ADXWidgetRun *) nil_chk(root))->start_);
  ADXDependencyNode *end = JreRetainedLocalValue(root->end_);
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(content);
  if (!([root isKindOfClass:[ADXHelperReferences class]]) && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start))->dependencies_)) isEmpty] && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end))->dependencies_)) isEmpty] & [((id<JavaUtilList>) nil_chk(start->targets_)) isEmpty] && [((id<JavaUtilList>) nil_chk(end->targets_)) isEmpty]) {
    return content;
  }
  [sb appendWithNSString:ADXDependencyGraph_nodeDefinitionWithADXWidgetRun_(self, root)];
  jboolean centeredConnection = ADXDependencyGraph_isCenteredConnectionWithADXDependencyNode_withADXDependencyNode_(self, start, end);
  content = ADXDependencyGraph_generateDisplayNodeWithADXDependencyNode_withBoolean_withNSString_(self, start, centeredConnection, content);
  content = ADXDependencyGraph_generateDisplayNodeWithADXDependencyNode_withBoolean_withNSString_(self, end, centeredConnection, content);
  if ([root isKindOfClass:[ADXVerticalWidgetRun class]]) {
    ADXDependencyNode *baseline = JreRetainedLocalValue(((ADXVerticalWidgetRun *) root)->baseline_);
    content = ADXDependencyGraph_generateDisplayNodeWithADXDependencyNode_withBoolean_withNSString_(self, baseline, centeredConnection, content);
  }
  if ([root isKindOfClass:[ADXHorizontalWidgetRun class]] || ([root isKindOfClass:[ADXChainRun class]] && ((ADXChainRun *) cast_chk(root, [ADXChainRun class]))->orientation_ == ADXConstraintWidget_HORIZONTAL)) {
    ADXConstraintWidget_DimensionBehaviour *behaviour = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(root->widget_)) getHorizontalDimensionBehaviour]);
    if (behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
      if (![((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start))->targets_)) isEmpty] && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end))->targets_)) isEmpty]) {
        [sb appendWithNSString:@"\n"];
        [sb appendWithNSString:[((ADXDependencyNode *) nil_chk(end)) name]];
        [sb appendWithNSString:@" -> "];
        [sb appendWithNSString:[start name]];
        [sb appendWithNSString:@"\n"];
      }
      else if ([((id<JavaUtilList>) nil_chk(start->targets_)) isEmpty] && ![((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end))->targets_)) isEmpty]) {
        [sb appendWithNSString:@"\n"];
        [sb appendWithNSString:[start name]];
        [sb appendWithNSString:@" -> "];
        [sb appendWithNSString:[((ADXDependencyNode *) nil_chk(end)) name]];
        [sb appendWithNSString:@"\n"];
      }
    }
    else {
      if (behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && [((ADXConstraintWidget *) nil_chk(root->widget_)) getDimensionRatio] > 0) {
        [sb appendWithNSString:@"\n"];
        [sb appendWithNSString:[((ADXConstraintWidget *) nil_chk(root->widget_)) getDebugName]];
        [sb appendWithNSString:@"_HORIZONTAL -> "];
        [sb appendWithNSString:[((ADXConstraintWidget *) nil_chk(root->widget_)) getDebugName]];
        [sb appendWithNSString:@"_VERTICAL;\n"];
      }
    }
  }
  else if ([root isKindOfClass:[ADXVerticalWidgetRun class]] || ([root isKindOfClass:[ADXChainRun class]] && ((ADXChainRun *) cast_chk(root, [ADXChainRun class]))->orientation_ == ADXConstraintWidget_VERTICAL)) {
    ADXConstraintWidget_DimensionBehaviour *behaviour = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(root->widget_)) getVerticalDimensionBehaviour]);
    if (behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
      if (![((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(start))->targets_)) isEmpty] && [((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end))->targets_)) isEmpty]) {
        [sb appendWithNSString:@"\n"];
        [sb appendWithNSString:[((ADXDependencyNode *) nil_chk(end)) name]];
        [sb appendWithNSString:@" -> "];
        [sb appendWithNSString:[start name]];
        [sb appendWithNSString:@"\n"];
      }
      else if ([((id<JavaUtilList>) nil_chk(start->targets_)) isEmpty] && ![((id<JavaUtilList>) nil_chk(((ADXDependencyNode *) nil_chk(end))->targets_)) isEmpty]) {
        [sb appendWithNSString:@"\n"];
        [sb appendWithNSString:[start name]];
        [sb appendWithNSString:@" -> "];
        [sb appendWithNSString:[((ADXDependencyNode *) nil_chk(end)) name]];
        [sb appendWithNSString:@"\n"];
      }
    }
    else {
      if (behaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && [((ADXConstraintWidget *) nil_chk(root->widget_)) getDimensionRatio] > 0) {
        [sb appendWithNSString:@"\n"];
        [sb appendWithNSString:[((ADXConstraintWidget *) nil_chk(root->widget_)) getDebugName]];
        [sb appendWithNSString:@"_VERTICAL -> "];
        [sb appendWithNSString:[((ADXConstraintWidget *) nil_chk(root->widget_)) getDebugName]];
        [sb appendWithNSString:@"_HORIZONTAL;\n"];
      }
    }
  }
  if ([root isKindOfClass:[ADXChainRun class]]) {
    return ADXDependencyGraph_generateChainDisplayGraphWithADXChainRun_withNSString_(self, (ADXChainRun *) root, content);
  }
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDependencyGraph)
