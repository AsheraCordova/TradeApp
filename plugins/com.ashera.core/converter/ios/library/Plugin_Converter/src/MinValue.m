//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\MinValue.java
//

#include "BaseValidator.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "MinValue.h"
#include "ResourceBundleUtils.h"
#include "Validation.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"


@interface ASMinValue () {
 @public
  jint mMinValue_;
}

- (instancetype)initWithInt:(jint)minValue;

@end

__attribute__((unused)) static void ASMinValue_initWithInt_(ASMinValue *self, jint minValue);

__attribute__((unused)) static ASMinValue *new_ASMinValue_initWithInt_(jint minValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASMinValue *create_ASMinValue_initWithInt_(jint minValue);

@implementation ASMinValue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMinValue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  return create_ASMinValue_initWithInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(argument), 0)));
}

- (instancetype)initWithInt:(jint)minValue {
  ASMinValue_initWithInt_(self, minValue);
  return self;
}

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/min_value_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
  return NSString_java_formatWithNSString_withNSObjectArray_(res, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mMinValue_) } count:1 type:NSObject_class_()]);
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil || [text java_isEmpty]) {
    return true;
  }
  @try {
    return JavaLangFloat_parseFloatWithNSString_(text) >= mMinValue_;
  }
  @catch (JavaLangNumberFormatException *e) {
    return false;
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstanceWithNSStringArray:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[4].selector = @selector(isValidWithNSString:withASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMinValue_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "I", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;" };
  static const J2ObjcClassInfo _ASMinValue = { "MinValue", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ASMinValue;
}

@end

void ASMinValue_init(ASMinValue *self) {
  ASBaseValidator_init(self);
  self->mMinValue_ = 0;
}

ASMinValue *new_ASMinValue_init() {
  J2OBJC_NEW_IMPL(ASMinValue, init)
}

ASMinValue *create_ASMinValue_init() {
  J2OBJC_CREATE_IMPL(ASMinValue, init)
}

void ASMinValue_initWithInt_(ASMinValue *self, jint minValue) {
  ASBaseValidator_init(self);
  self->mMinValue_ = minValue;
}

ASMinValue *new_ASMinValue_initWithInt_(jint minValue) {
  J2OBJC_NEW_IMPL(ASMinValue, initWithInt_, minValue)
}

ASMinValue *create_ASMinValue_initWithInt_(jint minValue) {
  J2OBJC_CREATE_IMPL(ASMinValue, initWithInt_, minValue)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMinValue)
