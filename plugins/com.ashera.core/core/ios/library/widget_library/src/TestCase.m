//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\model\TestCase.java
//

#include "J2ObjC_source.h"
#include "TestCase.h"
#include "java/util/HashMap.h"
#include "java/util/LinkedHashMap.h"

@class JavaUtilHashMap;


@interface ASTestCase () {
 @public
  JavaUtilHashMap *testCaseData_;
}

@end

J2OBJC_FIELD_SETTER(ASTestCase, testCaseData_, JavaUtilHashMap *)

@implementation ASTestCase

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTestCase_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaUtilHashMap *)getTestCaseData {
  return testCaseData_;
}

- (void)setTestCaseDataWithJavaUtilHashMap:(JavaUtilHashMap *)testCaseData {
  JreStrongAssign(&self->testCaseData_, testCaseData);
}

- (void)dealloc {
  RELEASE_(testCaseData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilHashMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTestCaseData);
  methods[2].selector = @selector(setTestCaseDataWithJavaUtilHashMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "testCaseData_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;", "setTestCaseData", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;)V", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASTestCase = { "TestCase", "com.ashera.model", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ASTestCase;
}

@end

void ASTestCase_init(ASTestCase *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->testCaseData_, new_JavaUtilLinkedHashMap_init());
}

ASTestCase *new_ASTestCase_init() {
  J2OBJC_NEW_IMPL(ASTestCase, init)
}

ASTestCase *create_ASTestCase_init() {
  J2OBJC_CREATE_IMPL(ASTestCase, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTestCase)
