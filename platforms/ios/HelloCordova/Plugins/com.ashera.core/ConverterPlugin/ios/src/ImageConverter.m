//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\ImageConverter.java
//

#include "ColorImageConverter.h"
#include "IFragment.h"
#include "ImageConverter.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@interface ASImageConverter ()

- (jboolean)isImageWithId:(id)objImage;

@end

__attribute__((unused)) static jboolean ASImageConverter_isImageWithId_(ASImageConverter *self, id objImage);

@implementation ASImageConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASImageConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)convertFromWithId:(NSString *)value
        withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
        withASIFragment:(id<ASIFragment>)fragment {
  if (value == nil || [value isEqual:@"@null"] || [value java_hasPrefix:@"@drawable"]) {
    id image = [super convertFromWithId:value withJavaUtilMap:dependentAttributesMap withASIFragment:fragment];
    if (ASImageConverter_isImageWithId_(self, image)) {
      return image;
    }
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unable to convert path to image : ", value));
}

- (jboolean)isImageWithId:(id)objImage {
  return ASImageConverter_isImageWithId_(self, objImage);
}

- (NSString *)convertToWithId:(id)value
              withASIFragment:(id<ASIFragment>)fragment {
  return [super convertToWithId:value withASIFragment:fragment];
}

- (id<JavaUtilList>)getDependentAttributes {
  return [super getDependentAttributes];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x102, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(isImageWithId:);
  methods[3].selector = @selector(convertToWithId:withASIFragment:);
  methods[4].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Ljava/lang/Object;", "isImage", "LNSObject;", "convertTo", "LNSObject;LASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASImageConverter = { "ImageConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x1, 5, 0, -1, -1, -1, -1, -1 };
  return &_ASImageConverter;
}

@end

void ASImageConverter_init(ASImageConverter *self) {
  ASColorImageConverter_init(self);
}

ASImageConverter *new_ASImageConverter_init() {
  J2OBJC_NEW_IMPL(ASImageConverter, init)
}

ASImageConverter *create_ASImageConverter_init() {
  J2OBJC_CREATE_IMPL(ASImageConverter, init)
}

jboolean ASImageConverter_isImageWithId_(ASImageConverter *self, id objImage) {
  return [objImage isKindOfClass:[UIImage class]];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASImageConverter)
