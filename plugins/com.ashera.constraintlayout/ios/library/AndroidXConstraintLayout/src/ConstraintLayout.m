//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\widget\ConstraintLayout.java
//

#include "ApplicationInfo.h"
#include "BasicMeasure.h"
#include "ConstraintAnchor.h"
#include "ConstraintHelper.h"
#include "ConstraintLayout.h"
#include "ConstraintSet.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "Constraints.h"
#include "Context.h"
#include "CoreGuideline.h"
#include "CoreVirtualLayout.h"
#include "Guideline.h"
#include "J2ObjC_source.h"
#include "Metrics.h"
#include "Optimizer.h"
#include "Placeholder.h"
#include "Resources.h"
#include "SparseArray.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "VirtualLayout.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"

@class JavaUtilArrayList;
@class JavaUtilHashMap;


@interface ADXConstraintLayout () {
 @public
  JavaUtilArrayList *mConstraintHelpers_;
  jint mMinWidth_ConstraintLayout_;
  jint mMinHeight_ConstraintLayout_;
  jint mMaxWidth_;
  jint mMaxHeight_;
  jint mOptimizationLevel_;
  ADXConstraintSet *mConstraintSet_;
  jint mConstraintSetId_;
  JavaUtilHashMap *mDesignIds_;
  jint mLastMeasureWidth_;
  jint mLastMeasureHeight_;
  ADSparseArray *mTempMapIdToWidget_;
  ADXMetrics *mMetrics_;
  jint mOnMeasureWidthMeasureSpec_;
  jint mOnMeasureHeightMeasureSpec_;
}

- (jboolean)updateHierarchy;

- (void)setChildrenConstraints;

- (void)setWidgetBaselineWithADXConstraintWidget:(ADXConstraintWidget *)widget
            withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                               withADSparseArray:(ADSparseArray *)idToWidget
                                         withInt:(jint)baselineTarget
                    withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)type;

- (ADXConstraintWidget *)getTargetWidgetWithInt:(jint)id_;

- (jint)getPaddingWidth;

- (void)markHierarchyDirty;

@end

J2OBJC_FIELD_SETTER(ADXConstraintLayout, mConstraintHelpers_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXConstraintLayout, mConstraintSet_, ADXConstraintSet *)
J2OBJC_FIELD_SETTER(ADXConstraintLayout, mDesignIds_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ADXConstraintLayout, mTempMapIdToWidget_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADXConstraintLayout, mMetrics_, ADXMetrics *)

inline NSString *ADXConstraintLayout_get_TAG(void);
static NSString *ADXConstraintLayout_TAG = @"ConstraintLayout";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXConstraintLayout, TAG, NSString *)

inline jboolean ADXConstraintLayout_get_USE_CONSTRAINTS_HELPER(void);
#define ADXConstraintLayout_USE_CONSTRAINTS_HELPER true
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintLayout, USE_CONSTRAINTS_HELPER, jboolean)

inline jboolean ADXConstraintLayout_get_DEBUG(void);
#define ADXConstraintLayout_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintLayout, DEBUG, jboolean)

inline jboolean ADXConstraintLayout_get_DEBUG_DRAW_CONSTRAINTS(void);
#define ADXConstraintLayout_DEBUG_DRAW_CONSTRAINTS false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintLayout, DEBUG_DRAW_CONSTRAINTS, jboolean)

inline jboolean ADXConstraintLayout_get_MEASURE(void);
#define ADXConstraintLayout_MEASURE false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintLayout, MEASURE, jboolean)

inline jboolean ADXConstraintLayout_get_OPTIMIZE_HEIGHT_CHANGE(void);
#define ADXConstraintLayout_OPTIMIZE_HEIGHT_CHANGE false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintLayout, OPTIMIZE_HEIGHT_CHANGE, jboolean)

__attribute__((unused)) static jboolean ADXConstraintLayout_updateHierarchy(ADXConstraintLayout *self);

__attribute__((unused)) static void ADXConstraintLayout_setChildrenConstraints(ADXConstraintLayout *self);

__attribute__((unused)) static void ADXConstraintLayout_setWidgetBaselineWithADXConstraintWidget_withADXConstraintLayout_LayoutParams_withADSparseArray_withInt_withADXConstraintAnchor_Type_(ADXConstraintLayout *self, ADXConstraintWidget *widget, ADXConstraintLayout_LayoutParams *layoutParams, ADSparseArray *idToWidget, jint baselineTarget, ADXConstraintAnchor_Type *type);

__attribute__((unused)) static ADXConstraintWidget *ADXConstraintLayout_getTargetWidgetWithInt_(ADXConstraintLayout *self, jint id_);

__attribute__((unused)) static ADXConstraintWidget *ADXConstraintLayout_getViewWidgetWithADView_(ADXConstraintLayout *self, ADView *view);

__attribute__((unused)) static jint ADXConstraintLayout_getPaddingWidth(ADXConstraintLayout *self);

__attribute__((unused)) static void ADXConstraintLayout_markHierarchyDirty(ADXConstraintLayout *self);

@interface ADXConstraintLayout_Measurer () {
 @public
  __unsafe_unretained ADXConstraintLayout *this$0_;
}

- (jboolean)isSimilarSpecWithInt:(jint)lastMeasureSpec
                         withInt:(jint)spec
                         withInt:(jint)widgetSize;

@end

__attribute__((unused)) static jboolean ADXConstraintLayout_Measurer_isSimilarSpecWithInt_withInt_withInt_(ADXConstraintLayout_Measurer *self, jint lastMeasureSpec, jint spec, jint widgetSize);

NSString *ADXConstraintLayout_VERSION = @"ConstraintLayout-2.1.0";

@implementation ADXConstraintLayout

- (void)setDesignInformationWithInt:(jint)type
                             withId:(id)value1
                             withId:(id)value2 {
  if (type == ADXConstraintLayout_DESIGN_INFO_ID && [value1 isKindOfClass:[NSString class]] && [value2 isKindOfClass:[JavaLangInteger class]]) {
    if (mDesignIds_ == nil) {
      JreStrongAssignAndConsume(&mDesignIds_, new_JavaUtilHashMap_init());
    }
    NSString *name = (NSString *) cast_chk(value1, [NSString class]);
    jint index = [((NSString *) nil_chk(name)) java_indexOfString:@"/"];
    if (index != -1) {
      name = [name java_substring:index + 1];
    }
    jint id_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value2, [JavaLangInteger class]))) intValue];
    [((JavaUtilHashMap *) nil_chk(mDesignIds_)) putWithId:name withId:JavaLangInteger_valueOfWithInt_(id_)];
  }
}

- (id)getDesignInformationWithInt:(jint)type
                           withId:(id)value {
  if (type == ADXConstraintLayout_DESIGN_INFO_ID && [value isKindOfClass:[NSString class]]) {
    NSString *name = (NSString *) cast_chk(value, [NSString class]);
    if (mDesignIds_ != nil && [mDesignIds_ containsKeyWithId:name]) {
      return [mDesignIds_ getWithId:name];
    }
  }
  return nil;
}

- (void)onViewAddedWithADView:(ADView *)view {
  [super onViewAddedWithADView:view];
  ADXConstraintWidget *widget = ADXConstraintLayout_getViewWidgetWithADView_(self, view);
  if ([view isKindOfClass:[ADXGuideline class]]) {
    if (!([widget isKindOfClass:[ADXCoreGuideline class]])) {
      ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
      JreStrongAssignAndConsume(&((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->widget_, new_ADXCoreGuideline_init());
      layoutParams->isGuideline_ = true;
      [((ADXCoreGuideline *) cast_chk(layoutParams->widget_, [ADXCoreGuideline class])) setOrientationWithInt:layoutParams->orientation_];
    }
  }
  if ([view isKindOfClass:[ADXConstraintHelper class]]) {
    ADXConstraintHelper *helper = (ADXConstraintHelper *) view;
    [((ADXConstraintHelper *) nil_chk(helper)) validateParams];
    ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->isHelper_ = true;
    if (![((JavaUtilArrayList *) nil_chk(mConstraintHelpers_)) containsWithId:helper]) {
      [((JavaUtilArrayList *) nil_chk(mConstraintHelpers_)) addWithId:helper];
    }
  }
  [((ADSparseArray *) nil_chk(mChildrenByIds_)) putWithInt:[((ADView *) nil_chk(view)) getId] withId:view];
  mDirtyHierarchy_ = true;
}

- (void)onViewRemovedWithADView:(ADView *)view {
  [super onViewRemovedWithADView:view];
  [((ADSparseArray *) nil_chk(mChildrenByIds_)) removeWithInt:[((ADView *) nil_chk(view)) getId]];
  ADXConstraintWidget *widget = ADXConstraintLayout_getViewWidgetWithADView_(self, view);
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) removeWithADXConstraintWidget:widget];
  [((JavaUtilArrayList *) nil_chk(mConstraintHelpers_)) removeWithId:view];
  mDirtyHierarchy_ = true;
}

- (void)setMinWidthWithInt:(jint)value {
  if (value == mMinWidth_ConstraintLayout_) {
    return;
  }
  mMinWidth_ConstraintLayout_ = value;
  [self requestLayout];
}

- (void)setMinHeightWithInt:(jint)value {
  if (value == mMinHeight_ConstraintLayout_) {
    return;
  }
  mMinHeight_ConstraintLayout_ = value;
  [self requestLayout];
}

- (jint)getMinWidth {
  return mMinWidth_ConstraintLayout_;
}

- (jint)getMinHeight {
  return mMinHeight_ConstraintLayout_;
}

- (void)setMaxWidthWithInt:(jint)value {
  if (value == mMaxWidth_) {
    return;
  }
  mMaxWidth_ = value;
  [self requestLayout];
}

- (void)setMaxHeightWithInt:(jint)value {
  if (value == mMaxHeight_) {
    return;
  }
  mMaxHeight_ = value;
  [self requestLayout];
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (jboolean)updateHierarchy {
  return ADXConstraintLayout_updateHierarchy(self);
}

- (void)setChildrenConstraints {
  ADXConstraintLayout_setChildrenConstraints(self);
}

- (void)applyConstraintsFromLayoutParamsWithBoolean:(jboolean)isInEditMode
                                         withADView:(ADView *)child
                            withADXConstraintWidget:(ADXConstraintWidget *)widget
               withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                                  withADSparseArray:(ADSparseArray *)idToWidget {
  [((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams)) validate];
  layoutParams->helped_ = false;
  [((ADXConstraintWidget *) nil_chk(widget)) setVisibilityWithInt:[((ADView *) nil_chk(child)) getVisibility]];
  if (layoutParams->isInPlaceholder_) {
    [widget setInPlaceholderWithBoolean:true];
    [widget setVisibilityWithInt:ADView_GONE];
  }
  [widget setCompanionWidgetWithId:child];
  if ([child isKindOfClass:[ADXConstraintHelper class]]) {
    ADXConstraintHelper *helper = (ADXConstraintHelper *) child;
    [helper resolveRtlWithADXConstraintWidget:widget withBoolean:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) isRtl]];
  }
  if (layoutParams->isGuideline_) {
    ADXCoreGuideline *guideline = (ADXCoreGuideline *) cast_chk(widget, [ADXCoreGuideline class]);
    jint resolvedGuideBegin = layoutParams->resolvedGuideBegin_;
    jint resolvedGuideEnd = layoutParams->resolvedGuideEnd_;
    jfloat resolvedGuidePercent = layoutParams->resolvedGuidePercent_;
    if (resolvedGuidePercent != ADXConstraintLayout_LayoutParams_UNSET) {
      [guideline setGuidePercentWithFloat:resolvedGuidePercent];
    }
    else if (resolvedGuideBegin != ADXConstraintLayout_LayoutParams_UNSET) {
      [guideline setGuideBeginWithInt:resolvedGuideBegin];
    }
    else if (resolvedGuideEnd != ADXConstraintLayout_LayoutParams_UNSET) {
      [guideline setGuideEndWithInt:resolvedGuideEnd];
    }
  }
  else {
    jint resolvedLeftToLeft = layoutParams->resolvedLeftToLeft_;
    jint resolvedLeftToRight = layoutParams->resolvedLeftToRight_;
    jint resolvedRightToLeft = layoutParams->resolvedRightToLeft_;
    jint resolvedRightToRight = layoutParams->resolvedRightToRight_;
    jint resolveGoneLeftMargin = layoutParams->resolveGoneLeftMargin_;
    jint resolveGoneRightMargin = layoutParams->resolveGoneRightMargin_;
    jfloat resolvedHorizontalBias = layoutParams->resolvedHorizontalBias_;
    if (layoutParams->circleConstraint_ != ADXConstraintLayout_LayoutParams_UNSET) {
      ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:layoutParams->circleConstraint_]);
      if (target != nil) {
        [widget connectCircularConstraintWithADXConstraintWidget:target withFloat:layoutParams->circleAngle_ withInt:layoutParams->circleRadius_];
      }
    }
    else {
      if (resolvedLeftToLeft != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:resolvedLeftToLeft]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withInt:layoutParams->leftMargin_ withInt:resolveGoneLeftMargin];
        }
      }
      else if (resolvedLeftToRight != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:resolvedLeftToRight]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withInt:layoutParams->leftMargin_ withInt:resolveGoneLeftMargin];
        }
      }
      if (resolvedRightToLeft != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:resolvedRightToLeft]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT) withInt:layoutParams->rightMargin_ withInt:resolveGoneRightMargin];
        }
      }
      else if (resolvedRightToRight != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:resolvedRightToRight]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT) withInt:layoutParams->rightMargin_ withInt:resolveGoneRightMargin];
        }
      }
      if (layoutParams->topToTop_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:layoutParams->topToTop_]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withInt:layoutParams->topMargin_ withInt:layoutParams->goneTopMargin_];
        }
      }
      else if (layoutParams->topToBottom_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:layoutParams->topToBottom_]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withInt:layoutParams->topMargin_ withInt:layoutParams->goneTopMargin_];
        }
      }
      if (layoutParams->bottomToTop_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:layoutParams->bottomToTop_]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP) withInt:layoutParams->bottomMargin_ withInt:layoutParams->goneBottomMargin_];
        }
      }
      else if (layoutParams->bottomToBottom_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:layoutParams->bottomToBottom_]);
        if (target != nil) {
          [widget immediateConnectWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withADXConstraintWidget:target withADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM) withInt:layoutParams->bottomMargin_ withInt:layoutParams->goneBottomMargin_];
        }
      }
      if (layoutParams->baselineToBaseline_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintLayout_setWidgetBaselineWithADXConstraintWidget_withADXConstraintLayout_LayoutParams_withADSparseArray_withInt_withADXConstraintAnchor_Type_(self, widget, layoutParams, idToWidget, layoutParams->baselineToBaseline_, JreLoadEnum(ADXConstraintAnchor_Type, BASELINE));
      }
      else if (layoutParams->baselineToTop_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintLayout_setWidgetBaselineWithADXConstraintWidget_withADXConstraintLayout_LayoutParams_withADSparseArray_withInt_withADXConstraintAnchor_Type_(self, widget, layoutParams, idToWidget, layoutParams->baselineToTop_, JreLoadEnum(ADXConstraintAnchor_Type, TOP));
      }
      else if (layoutParams->baselineToBottom_ != ADXConstraintLayout_LayoutParams_UNSET) {
        ADXConstraintLayout_setWidgetBaselineWithADXConstraintWidget_withADXConstraintLayout_LayoutParams_withADSparseArray_withInt_withADXConstraintAnchor_Type_(self, widget, layoutParams, idToWidget, layoutParams->baselineToBottom_, JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM));
      }
      if (resolvedHorizontalBias >= 0) {
        [widget setHorizontalBiasPercentWithFloat:resolvedHorizontalBias];
      }
      if (layoutParams->verticalBias_ >= 0) {
        [widget setVerticalBiasPercentWithFloat:layoutParams->verticalBias_];
      }
    }
    if (isInEditMode && ((layoutParams->editorAbsoluteX_ != ADXConstraintLayout_LayoutParams_UNSET) || (layoutParams->editorAbsoluteY_ != ADXConstraintLayout_LayoutParams_UNSET))) {
      [widget setOriginWithInt:layoutParams->editorAbsoluteX_ withInt:layoutParams->editorAbsoluteY_];
    }
    if (!layoutParams->horizontalDimensionFixed_) {
      if (layoutParams->width_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
        if (layoutParams->constrainedWidth_) {
          [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)];
        }
        else {
          [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)];
        }
        ((ADXConstraintAnchor *) nil_chk([widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]))->mMargin_ = layoutParams->leftMargin_;
        ((ADXConstraintAnchor *) nil_chk([widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]))->mMargin_ = layoutParams->rightMargin_;
      }
      else {
        [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)];
        [widget setWidthWithInt:0];
      }
    }
    else {
      [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
      [widget setWidthWithInt:layoutParams->width_];
      if (layoutParams->width_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
        [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
      }
    }
    if (!layoutParams->verticalDimensionFixed_) {
      if (layoutParams->height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
        if (layoutParams->constrainedHeight_) {
          [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)];
        }
        else {
          [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT)];
        }
        ((ADXConstraintAnchor *) nil_chk([widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]))->mMargin_ = layoutParams->topMargin_;
        ((ADXConstraintAnchor *) nil_chk([widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]))->mMargin_ = layoutParams->bottomMargin_;
      }
      else {
        [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT)];
        [widget setHeightWithInt:0];
      }
    }
    else {
      [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
      [widget setHeightWithInt:layoutParams->height_];
      if (layoutParams->height_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
        [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)];
      }
    }
    [widget setDimensionRatioWithNSString:layoutParams->dimensionRatio_];
    [widget setHorizontalWeightWithFloat:layoutParams->horizontalWeight_];
    [widget setVerticalWeightWithFloat:layoutParams->verticalWeight_];
    [widget setHorizontalChainStyleWithInt:layoutParams->horizontalChainStyle_];
    [widget setVerticalChainStyleWithInt:layoutParams->verticalChainStyle_];
    [widget setWrapBehaviorInParentWithInt:layoutParams->wrapBehaviorInParent_];
    [widget setHorizontalMatchStyleWithInt:layoutParams->matchConstraintDefaultWidth_ withInt:layoutParams->matchConstraintMinWidth_ withInt:layoutParams->matchConstraintMaxWidth_ withFloat:layoutParams->matchConstraintPercentWidth_];
    [widget setVerticalMatchStyleWithInt:layoutParams->matchConstraintDefaultHeight_ withInt:layoutParams->matchConstraintMinHeight_ withInt:layoutParams->matchConstraintMaxHeight_ withFloat:layoutParams->matchConstraintPercentHeight_];
  }
}

- (void)setWidgetBaselineWithADXConstraintWidget:(ADXConstraintWidget *)widget
            withADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)layoutParams
                               withADSparseArray:(ADSparseArray *)idToWidget
                                         withInt:(jint)baselineTarget
                    withADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)type {
  ADXConstraintLayout_setWidgetBaselineWithADXConstraintWidget_withADXConstraintLayout_LayoutParams_withADSparseArray_withInt_withADXConstraintAnchor_Type_(self, widget, layoutParams, idToWidget, baselineTarget, type);
}

- (ADXConstraintWidget *)getTargetWidgetWithInt:(jint)id_ {
  return ADXConstraintLayout_getTargetWidgetWithInt_(self, id_);
}

- (ADXConstraintWidget *)getViewWidgetWithADView:(ADView *)view {
  return ADXConstraintLayout_getViewWidgetWithADView_(self, view);
}

- (void)resolveSystemWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)layout
                                              withInt:(jint)optimizationLevel
                                              withInt:(jint)widthMeasureSpec
                                              withInt:(jint)heightMeasureSpec {
  jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec);
  jint widthSize = ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec);
  jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec);
  jint heightSize = ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  jint paddingY = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingTop]);
  jint paddingBottom = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingBottom]);
  jint paddingHeight = paddingY + paddingBottom;
  jint paddingWidth = ADXConstraintLayout_getPaddingWidth(self);
  jint paddingX;
  [((ADXConstraintLayout_Measurer *) nil_chk(mMeasurer_)) captureLayoutInfoWithInt:widthMeasureSpec withInt:heightMeasureSpec withInt:paddingY withInt:paddingBottom withInt:paddingWidth withInt:paddingHeight];
  {
    jint paddingStart = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingStart]);
    jint paddingEnd = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingEnd]);
    if (paddingStart > 0 || paddingEnd > 0) {
      if ([self isRtl]) {
        paddingX = paddingEnd;
      }
      else {
        paddingX = paddingStart;
      }
    }
    else {
      paddingX = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingLeft]);
    }
  }
  widthSize -= paddingWidth;
  heightSize -= paddingHeight;
  [self setSelfDimensionBehaviourWithADXConstraintWidgetContainer:layout withInt:widthMode withInt:widthSize withInt:heightMode withInt:heightSize];
  [((ADXConstraintWidgetContainer *) nil_chk(layout)) measureWithInt:optimizationLevel withInt:widthMode withInt:widthSize withInt:heightMode withInt:heightSize withInt:mLastMeasureWidth_ withInt:mLastMeasureHeight_ withInt:paddingX withInt:paddingY];
}

- (void)resolveMeasuredDimensionWithInt:(jint)widthMeasureSpec
                                withInt:(jint)heightMeasureSpec
                                withInt:(jint)measuredWidth
                                withInt:(jint)measuredHeight
                            withBoolean:(jboolean)isWidthMeasuredTooSmall
                            withBoolean:(jboolean)isHeightMeasuredTooSmall {
  jint childState = 0;
  jint heightPadding = ((ADXConstraintLayout_Measurer *) nil_chk(mMeasurer_))->paddingHeight_;
  jint widthPadding = mMeasurer_->paddingWidth_;
  jint androidLayoutWidth = measuredWidth + widthPadding;
  jint androidLayoutHeight = measuredHeight + heightPadding;
  jint resolvedWidthSize = ADView_resolveSizeAndStateWithInt_withInt_withInt_(androidLayoutWidth, widthMeasureSpec, childState);
  jint resolvedHeightSize = ADView_resolveSizeAndStateWithInt_withInt_withInt_(androidLayoutHeight, heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT));
  resolvedWidthSize &= ADView_MEASURED_SIZE_MASK;
  resolvedHeightSize &= ADView_MEASURED_SIZE_MASK;
  resolvedWidthSize = JavaLangMath_minWithInt_withInt_(mMaxWidth_, resolvedWidthSize);
  resolvedHeightSize = JavaLangMath_minWithInt_withInt_(mMaxHeight_, resolvedHeightSize);
  if (isWidthMeasuredTooSmall) {
    resolvedWidthSize |= ADView_MEASURED_STATE_TOO_SMALL;
  }
  if (isHeightMeasuredTooSmall) {
    resolvedHeightSize |= ADView_MEASURED_STATE_TOO_SMALL;
  }
  [self setMeasuredDimensionWithInt:resolvedWidthSize withInt:resolvedHeightSize];
  mLastMeasureWidth_ = resolvedWidthSize;
  mLastMeasureHeight_ = resolvedHeightSize;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jlong time = 0;
  jboolean sameSpecsAsPreviousMeasure = (mOnMeasureWidthMeasureSpec_ == widthMeasureSpec && mOnMeasureHeightMeasureSpec_ == heightMeasureSpec);
  sameSpecsAsPreviousMeasure = false;
  if (!mDirtyHierarchy_ && !sameSpecsAsPreviousMeasure) {
    jint count = [self getChildCount];
    for (jint i = 0; i < count; i++) {
      ADView *child = [self getChildAtWithInt:i];
      if ([((ADView *) nil_chk(child)) isLayoutRequested]) {
        mDirtyHierarchy_ = true;
        break;
      }
    }
  }
  if (!mDirtyHierarchy_) {
    if (sameSpecsAsPreviousMeasure) {
      [self resolveMeasuredDimensionWithInt:widthMeasureSpec withInt:heightMeasureSpec withInt:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getWidth] withInt:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getHeight] withBoolean:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) isWidthMeasuredTooSmall] withBoolean:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) isHeightMeasuredTooSmall]];
      return;
    }
  }
  mOnMeasureWidthMeasureSpec_ = widthMeasureSpec;
  mOnMeasureHeightMeasureSpec_ = heightMeasureSpec;
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) setRtlWithBoolean:[self isRtl]];
  if (mDirtyHierarchy_) {
    mDirtyHierarchy_ = false;
    if (ADXConstraintLayout_updateHierarchy(self)) {
      [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) updateHierarchy];
    }
  }
  [self resolveSystemWithADXConstraintWidgetContainer:mLayoutWidget_ withInt:mOptimizationLevel_ withInt:widthMeasureSpec withInt:heightMeasureSpec];
  [self resolveMeasuredDimensionWithInt:widthMeasureSpec withInt:heightMeasureSpec withInt:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getWidth] withInt:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getHeight] withBoolean:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) isWidthMeasuredTooSmall] withBoolean:[((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) isHeightMeasuredTooSmall]];
}

- (jboolean)isRtl {
  {
    jboolean isRtlSupported = (((ADApplicationInfo *) nil_chk([((ADContext *) nil_chk([self getContext])) getApplicationInfo]))->flags_ & ADApplicationInfo_FLAG_SUPPORTS_RTL) != 0;
    return isRtlSupported && (ADView_LAYOUT_DIRECTION_RTL == [self getLayoutDirection]);
  }
}

- (jint)getPaddingWidth {
  return ADXConstraintLayout_getPaddingWidth(self);
}

- (void)setSelfDimensionBehaviourWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)layout
                                                          withInt:(jint)widthMode
                                                          withInt:(jint)widthSize
                                                          withInt:(jint)heightMode
                                                          withInt:(jint)heightSize {
  jint heightPadding = ((ADXConstraintLayout_Measurer *) nil_chk(mMeasurer_))->paddingHeight_;
  jint widthPadding = mMeasurer_->paddingWidth_;
  ADXConstraintWidget_DimensionBehaviour *widthBehaviour = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED);
  ADXConstraintWidget_DimensionBehaviour *heightBehaviour = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED);
  jint desiredWidth = 0;
  jint desiredHeight = 0;
  jint childCount = [self getChildCount];
  switch (widthMode) {
    case ADView_MeasureSpec_AT_MOST:
    {
      widthBehaviour = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
      desiredWidth = widthSize;
      if (childCount == 0) {
        desiredWidth = JavaLangMath_maxWithInt_withInt_(0, mMinWidth_ConstraintLayout_);
      }
    }
    break;
    case ADView_MeasureSpec_UNSPECIFIED:
    {
      widthBehaviour = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
      if (childCount == 0) {
        desiredWidth = JavaLangMath_maxWithInt_withInt_(0, mMinWidth_ConstraintLayout_);
      }
    }
    break;
    case ADView_MeasureSpec_EXACTLY:
    {
      desiredWidth = JavaLangMath_minWithInt_withInt_(mMaxWidth_ - widthPadding, widthSize);
    }
  }
  switch (heightMode) {
    case ADView_MeasureSpec_AT_MOST:
    {
      heightBehaviour = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
      desiredHeight = heightSize;
      if (childCount == 0) {
        desiredHeight = JavaLangMath_maxWithInt_withInt_(0, mMinHeight_ConstraintLayout_);
      }
    }
    break;
    case ADView_MeasureSpec_UNSPECIFIED:
    {
      heightBehaviour = JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
      if (childCount == 0) {
        desiredHeight = JavaLangMath_maxWithInt_withInt_(0, mMinHeight_ConstraintLayout_);
      }
    }
    break;
    case ADView_MeasureSpec_EXACTLY:
    {
      desiredHeight = JavaLangMath_minWithInt_withInt_(mMaxHeight_ - heightPadding, heightSize);
    }
  }
  if (desiredWidth != [((ADXConstraintWidgetContainer *) nil_chk(layout)) getWidth] || desiredHeight != [layout getHeight]) {
    [layout invalidateMeasures];
  }
  [layout setXWithInt:0];
  [layout setYWithInt:0];
  [layout setMaxWidthWithInt:mMaxWidth_ - widthPadding];
  [layout setMaxHeightWithInt:mMaxHeight_ - heightPadding];
  [layout setMinWidthWithInt:0];
  [layout setMinHeightWithInt:0];
  [layout setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:widthBehaviour];
  [layout setWidthWithInt:desiredWidth];
  [layout setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:heightBehaviour];
  [layout setHeightWithInt:desiredHeight];
  [layout setMinWidthWithInt:mMinWidth_ConstraintLayout_ - widthPadding];
  [layout setMinHeightWithInt:mMinHeight_ConstraintLayout_ - heightPadding];
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  jint widgetsCount = [self getChildCount];
  jboolean isInEditMode = [self isInEditMode];
  for (jint i = 0; i < widgetsCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADXConstraintLayout_LayoutParams *params = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    ADXConstraintWidget *widget = JreRetainedLocalValue(((ADXConstraintLayout_LayoutParams *) nil_chk(params))->widget_);
    if ([child getVisibility] == ADView_GONE && !params->isGuideline_ && !params->isHelper_ && !params->isVirtualGroup_ && !isInEditMode) {
      continue;
    }
    if (params->isInPlaceholder_) {
      continue;
    }
    jint l = [((ADXConstraintWidget *) nil_chk(widget)) getX];
    jint t = [widget getY];
    jint r = l + [widget getWidth];
    jint b = t + [widget getHeight];
    [child layoutWithInt:l withInt:t withInt:r withInt:b];
    if ([child isKindOfClass:[ADXPlaceholder class]]) {
      ADXPlaceholder *holder = (ADXPlaceholder *) child;
      ADView *content = JreRetainedLocalValue([holder getContent]);
      if (content != nil) {
        [content setVisibilityWithInt:ADView_VISIBLE];
        [content layoutWithInt:l withInt:t withInt:r withInt:b];
      }
    }
  }
  jint helperCount = [((JavaUtilArrayList *) nil_chk(mConstraintHelpers_)) size];
  if (helperCount > 0) {
    for (jint i = 0; i < helperCount; i++) {
      ADXConstraintHelper *helper = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mConstraintHelpers_)) getWithInt:i]);
      [((ADXConstraintHelper *) nil_chk(helper)) updatePostLayoutWithADXConstraintLayout:self];
    }
  }
}

- (void)setOptimizationLevelWithInt:(jint)level {
  mOptimizationLevel_ = level;
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) setOptimizationLevelWithInt:level];
}

- (jint)getOptimizationLevel {
  return [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getOptimizationLevel];
}

- (ADXConstraintLayout_LayoutParams *)generateDefaultLayoutParams {
  return create_ADXConstraintLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
}

- (void)setConstraintSetWithADXConstraintSet:(ADXConstraintSet *)set {
  JreStrongAssign(&mConstraintSet_, set);
}

- (ADView *)getViewByIdWithInt:(jint)id_ {
  return [((ADSparseArray *) nil_chk(mChildrenByIds_)) getWithInt:id_];
}

- (void)requestLayout {
  ADXConstraintLayout_markHierarchyDirty(self);
  [super requestLayout];
}

- (void)markHierarchyDirty {
  ADXConstraintLayout_markHierarchyDirty(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)release__ {
  for (ADXConstraintWidget * __strong constraintWidget in nil_chk([((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) getChildren])) {
    [((ADXConstraintWidget *) nil_chk(constraintWidget)) reset];
    [constraintWidget resetAnchors];
  }
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) resetAnchors];
  [((ADXConstraintWidgetContainer *) nil_chk(mLayoutWidget_)) release__];
  JreStrongAssign(&mConstraintHelpers_, nil);
  JreStrongAssign(&mLayoutWidget_, nil);
  JreStrongAssign(&mChildrenByIds_, nil);
  JreStrongAssign(&mMeasurer_, nil);
}

- (void)dealloc {
  RELEASE_(mChildrenByIds_);
  RELEASE_(mConstraintHelpers_);
  RELEASE_(mLayoutWidget_);
  RELEASE_(mConstraintSet_);
  RELEASE_(mDesignIds_);
  RELEASE_(mTempMapIdToWidget_);
  RELEASE_(mMetrics_);
  RELEASE_(mMeasurer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, 17, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x12, 18, 8, -1, -1, -1, -1 },
    { NULL, "LADXConstraintWidget;", 0x11, 19, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 24, 25, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXConstraintLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 33, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setDesignInformationWithInt:withId:withId:);
  methods[1].selector = @selector(getDesignInformationWithInt:withId:);
  methods[2].selector = @selector(onViewAddedWithADView:);
  methods[3].selector = @selector(onViewRemovedWithADView:);
  methods[4].selector = @selector(setMinWidthWithInt:);
  methods[5].selector = @selector(setMinHeightWithInt:);
  methods[6].selector = @selector(getMinWidth);
  methods[7].selector = @selector(getMinHeight);
  methods[8].selector = @selector(setMaxWidthWithInt:);
  methods[9].selector = @selector(setMaxHeightWithInt:);
  methods[10].selector = @selector(getMaxWidth);
  methods[11].selector = @selector(getMaxHeight);
  methods[12].selector = @selector(updateHierarchy);
  methods[13].selector = @selector(setChildrenConstraints);
  methods[14].selector = @selector(applyConstraintsFromLayoutParamsWithBoolean:withADView:withADXConstraintWidget:withADXConstraintLayout_LayoutParams:withADSparseArray:);
  methods[15].selector = @selector(setWidgetBaselineWithADXConstraintWidget:withADXConstraintLayout_LayoutParams:withADSparseArray:withInt:withADXConstraintAnchor_Type:);
  methods[16].selector = @selector(getTargetWidgetWithInt:);
  methods[17].selector = @selector(getViewWidgetWithADView:);
  methods[18].selector = @selector(resolveSystemWithADXConstraintWidgetContainer:withInt:withInt:withInt:);
  methods[19].selector = @selector(resolveMeasuredDimensionWithInt:withInt:withInt:withInt:withBoolean:withBoolean:);
  methods[20].selector = @selector(onMeasureWithInt:withInt:);
  methods[21].selector = @selector(isRtl);
  methods[22].selector = @selector(getPaddingWidth);
  methods[23].selector = @selector(setSelfDimensionBehaviourWithADXConstraintWidgetContainer:withInt:withInt:withInt:withInt:);
  methods[24].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[25].selector = @selector(setOptimizationLevelWithInt:);
  methods[26].selector = @selector(getOptimizationLevel);
  methods[27].selector = @selector(generateDefaultLayoutParams);
  methods[28].selector = @selector(setConstraintSetWithADXConstraintSet:);
  methods[29].selector = @selector(getViewByIdWithInt:);
  methods[30].selector = @selector(requestLayout);
  methods[31].selector = @selector(markHierarchyDirty);
  methods[32].selector = @selector(init);
  methods[33].selector = @selector(release__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VERSION", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 36, -1, -1 },
    { "USE_CONSTRAINTS_HELPER", "Z", .constantValue.asBOOL = ADXConstraintLayout_USE_CONSTRAINTS_HELPER, 0x1a, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXConstraintLayout_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "DEBUG_DRAW_CONSTRAINTS", "Z", .constantValue.asBOOL = ADXConstraintLayout_DEBUG_DRAW_CONSTRAINTS, 0x1a, -1, -1, -1, -1 },
    { "MEASURE", "Z", .constantValue.asBOOL = ADXConstraintLayout_MEASURE, 0x1a, -1, -1, -1, -1 },
    { "OPTIMIZE_HEIGHT_CHANGE", "Z", .constantValue.asBOOL = ADXConstraintLayout_OPTIMIZE_HEIGHT_CHANGE, 0x1a, -1, -1, -1, -1 },
    { "mChildrenByIds_", "LADSparseArray;", .constantValue.asLong = 0, 0x0, -1, -1, 37, -1 },
    { "mConstraintHelpers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 38, -1 },
    { "mLayoutWidget_", "LADXConstraintWidgetContainer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mMinWidth_ConstraintLayout_", "I", .constantValue.asLong = 0, 0x2, 39, -1, -1, -1 },
    { "mMinHeight_ConstraintLayout_", "I", .constantValue.asLong = 0, 0x2, 40, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDirtyHierarchy_", "Z", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mOptimizationLevel_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConstraintSet_", "LADXConstraintSet;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mConstraintSetId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDesignIds_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 41, -1 },
    { "mLastMeasureWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastMeasureHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastMeasureWidthSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastMeasureHeightSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastMeasureWidthMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastMeasureHeightMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempMapIdToWidget_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "DESIGN_INFO_ID", "I", .constantValue.asInt = ADXConstraintLayout_DESIGN_INFO_ID, 0x19, -1, -1, -1, -1 },
    { "mMetrics_", "LADXMetrics;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMeasurer_", "LADXConstraintLayout_Measurer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOnMeasureWidthMeasureSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnMeasureHeightMeasureSpec_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDesignInformation", "ILNSObject;LNSObject;", "getDesignInformation", "ILNSObject;", "onViewAdded", "LADView;", "onViewRemoved", "setMinWidth", "I", "setMinHeight", "setMaxWidth", "setMaxHeight", "applyConstraintsFromLayoutParams", "ZLADView;LADXConstraintWidget;LADXConstraintLayout_LayoutParams;LADSparseArray;", "(ZLr/android/view/View;Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/widget/ConstraintLayout$LayoutParams;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "setWidgetBaseline", "LADXConstraintWidget;LADXConstraintLayout_LayoutParams;LADSparseArray;ILADXConstraintAnchor_Type;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/widget/ConstraintLayout$LayoutParams;Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;ILandroidx/constraintlayout/core/widgets/ConstraintAnchor$Type;)V", "getTargetWidget", "getViewWidget", "resolveSystem", "LADXConstraintWidgetContainer;III", "resolveMeasuredDimension", "IIIIZZ", "onMeasure", "II", "setSelfDimensionBehaviour", "LADXConstraintWidgetContainer;IIII", "onLayout", "ZIIII", "setOptimizationLevel", "setConstraintSet", "LADXConstraintSet;", "getViewById", "release", &ADXConstraintLayout_VERSION, &ADXConstraintLayout_TAG, "Lr/android/util/SparseArray<Lr/android/view/View;>;", "Ljava/util/ArrayList<Landroidx/constraintlayout/widget/ConstraintHelper;>;", "mMinWidth", "mMinHeight", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "Lr/android/util/SparseArray<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;", "LADXConstraintLayout_Measurer;LADXConstraintLayout_LayoutParams;" };
  static const J2ObjcClassInfo _ADXConstraintLayout = { "ConstraintLayout", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x1, 34, 31, -1, 43, -1, -1, -1 };
  return &_ADXConstraintLayout;
}

@end

jboolean ADXConstraintLayout_updateHierarchy(ADXConstraintLayout *self) {
  jint count = [self getChildCount];
  jboolean recompute = false;
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) isLayoutRequested]) {
      recompute = true;
      break;
    }
  }
  if (recompute) {
    ADXConstraintLayout_setChildrenConstraints(self);
  }
  return recompute;
}

void ADXConstraintLayout_setChildrenConstraints(ADXConstraintLayout *self) {
  jboolean isInEditMode = [self isInEditMode];
  jint count = [self getChildCount];
  for (jint i = 0; i < count; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXConstraintWidget *widget = ADXConstraintLayout_getViewWidgetWithADView_(self, child);
    if (widget == nil) {
      continue;
    }
    [widget reset];
  }
  if (isInEditMode) {
    for (jint i = 0; i < count; i++) {
      ADView *view = [self getChildAtWithInt:i];
      @try {
        NSString *IdAsString = JreRetainedLocalValue([((ADResources *) nil_chk([self getResources])) getResourceNameWithInt:[((ADView *) nil_chk(view)) getId]]);
        [self setDesignInformationWithInt:ADXConstraintLayout_DESIGN_INFO_ID withId:IdAsString withId:JavaLangInteger_valueOfWithInt_([view getId])];
        jint slashIndex = [((NSString *) nil_chk(IdAsString)) java_indexOf:'/'];
        if (slashIndex != -1) {
          IdAsString = [IdAsString java_substring:slashIndex + 1];
        }
        [((ADXConstraintWidget *) nil_chk(ADXConstraintLayout_getTargetWidgetWithInt_(self, [view getId]))) setDebugNameWithNSString:IdAsString];
      }
      @catch (ADResources_NotFoundException *e) {
      }
    }
  }
  if (self->mConstraintSetId_ != -1) {
    for (jint i = 0; i < count; i++) {
      ADView *child = [self getChildAtWithInt:i];
      if ([((ADView *) nil_chk(child)) getId] == self->mConstraintSetId_ && [child isKindOfClass:[ADXConstraints class]]) {
        JreStrongAssign(&self->mConstraintSet_, [((ADXConstraints *) cast_chk(child, [ADXConstraints class])) getConstraintSet]);
      }
    }
  }
  if (self->mConstraintSet_ != nil) {
    [self->mConstraintSet_ applyToInternalWithADXConstraintLayout:self withBoolean:true];
  }
  [((ADXConstraintWidgetContainer *) nil_chk(self->mLayoutWidget_)) removeAllChildren];
  jint helperCount = [((JavaUtilArrayList *) nil_chk(self->mConstraintHelpers_)) size];
  if (helperCount > 0) {
    for (jint i = 0; i < helperCount; i++) {
      ADXConstraintHelper *helper = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(self->mConstraintHelpers_)) getWithInt:i]);
      [((ADXConstraintHelper *) nil_chk(helper)) updatePreLayoutWithADXConstraintLayout:self];
    }
  }
  for (jint i = 0; i < count; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([child isKindOfClass:[ADXPlaceholder class]]) {
      [((ADXPlaceholder *) nil_chk(((ADXPlaceholder *) child))) updatePreLayoutWithADXConstraintLayout:self];
    }
  }
  [((ADSparseArray *) nil_chk(self->mTempMapIdToWidget_)) clear];
  [((ADSparseArray *) nil_chk(self->mTempMapIdToWidget_)) putWithInt:ADXConstraintLayout_LayoutParams_PARENT_ID withId:self->mLayoutWidget_];
  [((ADSparseArray *) nil_chk(self->mTempMapIdToWidget_)) putWithInt:[self getId] withId:self->mLayoutWidget_];
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADXConstraintWidget *widget = ADXConstraintLayout_getViewWidgetWithADView_(self, child);
    [((ADSparseArray *) nil_chk(self->mTempMapIdToWidget_)) putWithInt:[((ADView *) nil_chk(child)) getId] withId:widget];
  }
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADXConstraintWidget *widget = ADXConstraintLayout_getViewWidgetWithADView_(self, child);
    if (widget == nil) {
      continue;
    }
    ADXConstraintLayout_LayoutParams *layoutParams = (ADXConstraintLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
    [((ADXConstraintWidgetContainer *) nil_chk(self->mLayoutWidget_)) addWithADXConstraintWidget:widget];
    [self applyConstraintsFromLayoutParamsWithBoolean:isInEditMode withADView:child withADXConstraintWidget:widget withADXConstraintLayout_LayoutParams:layoutParams withADSparseArray:self->mTempMapIdToWidget_];
  }
}

void ADXConstraintLayout_setWidgetBaselineWithADXConstraintWidget_withADXConstraintLayout_LayoutParams_withADSparseArray_withInt_withADXConstraintAnchor_Type_(ADXConstraintLayout *self, ADXConstraintWidget *widget, ADXConstraintLayout_LayoutParams *layoutParams, ADSparseArray *idToWidget, jint baselineTarget, ADXConstraintAnchor_Type *type) {
  ADView *view = JreRetainedLocalValue([((ADSparseArray *) nil_chk(self->mChildrenByIds_)) getWithInt:baselineTarget]);
  ADXConstraintWidget *target = JreRetainedLocalValue([((ADSparseArray *) nil_chk(idToWidget)) getWithInt:baselineTarget]);
  if (target != nil && view != nil && [[view getLayoutParams] isKindOfClass:[ADXConstraintLayout_LayoutParams class]]) {
    ((ADXConstraintLayout_LayoutParams *) nil_chk(layoutParams))->needsBaseline_ = true;
    if (type == JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)) {
      ADXConstraintLayout_LayoutParams *targetParams = (ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
      ((ADXConstraintLayout_LayoutParams *) nil_chk(targetParams))->needsBaseline_ = true;
      [((ADXConstraintWidget *) nil_chk(targetParams->widget_)) setHasBaselineWithBoolean:true];
    }
    ADXConstraintAnchor *baseline = JreRetainedLocalValue([((ADXConstraintWidget *) nil_chk(widget)) getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)]);
    ADXConstraintAnchor *targetAnchor = JreRetainedLocalValue([target getAnchorWithADXConstraintAnchor_Type:type]);
    [((ADXConstraintAnchor *) nil_chk(baseline)) connectWithADXConstraintAnchor:targetAnchor withInt:layoutParams->baselineMargin_ withInt:layoutParams->goneBaselineMargin_ withBoolean:true];
    [widget setHasBaselineWithBoolean:true];
    [((ADXConstraintAnchor *) nil_chk([widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)])) reset];
    [((ADXConstraintAnchor *) nil_chk([widget getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)])) reset];
  }
}

ADXConstraintWidget *ADXConstraintLayout_getTargetWidgetWithInt_(ADXConstraintLayout *self, jint id_) {
  if (id_ == ADXConstraintLayout_LayoutParams_PARENT_ID) {
    return self->mLayoutWidget_;
  }
  else {
    ADView *view = JreRetainedLocalValue([((ADSparseArray *) nil_chk(self->mChildrenByIds_)) getWithInt:id_]);
    if (view == nil) {
      view = [self findViewByIdWithInt:id_];
      if (view != nil && view != self && [view getParent] == self) {
        [self onViewAddedWithADView:view];
      }
    }
    if (view == self) {
      return self->mLayoutWidget_;
    }
    return view == nil ? nil : ((ADXConstraintLayout_LayoutParams *) nil_chk(((ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]))))->widget_;
  }
}

ADXConstraintWidget *ADXConstraintLayout_getViewWidgetWithADView_(ADXConstraintLayout *self, ADView *view) {
  if (view == self) {
    return self->mLayoutWidget_;
  }
  if (view != nil) {
    if ([[view getLayoutParams] isKindOfClass:[ADXConstraintLayout_LayoutParams class]]) {
      return ((ADXConstraintLayout_LayoutParams *) nil_chk(((ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]))))->widget_;
    }
    [view setLayoutParamsWithADViewGroup_LayoutParams:[self generateLayoutParamsWithADViewGroup_LayoutParams:[view getLayoutParams]]];
    if ([[view getLayoutParams] isKindOfClass:[ADXConstraintLayout_LayoutParams class]]) {
      return ((ADXConstraintLayout_LayoutParams *) nil_chk(((ADXConstraintLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXConstraintLayout_LayoutParams class]))))->widget_;
    }
  }
  return nil;
}

jint ADXConstraintLayout_getPaddingWidth(ADXConstraintLayout *self) {
  jint widthPadding = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingLeft]) + JavaLangMath_maxWithInt_withInt_(0, [self getPaddingRight]);
  jint rtlPadding = 0;
  {
    rtlPadding = JavaLangMath_maxWithInt_withInt_(0, [self getPaddingStart]) + JavaLangMath_maxWithInt_withInt_(0, [self getPaddingEnd]);
  }
  if (rtlPadding > 0) {
    widthPadding = rtlPadding;
  }
  return widthPadding;
}

void ADXConstraintLayout_markHierarchyDirty(ADXConstraintLayout *self) {
  self->mDirtyHierarchy_ = true;
  self->mLastMeasureWidth_ = -1;
  self->mLastMeasureHeight_ = -1;
  self->mLastMeasureWidthSize_ = -1;
  self->mLastMeasureHeightSize_ = -1;
  self->mLastMeasureWidthMode_ = ADView_MeasureSpec_UNSPECIFIED;
  self->mLastMeasureHeightMode_ = ADView_MeasureSpec_UNSPECIFIED;
}

void ADXConstraintLayout_init(ADXConstraintLayout *self) {
  ADViewGroup_init(self);
  JreStrongAssignAndConsume(&self->mChildrenByIds_, new_ADSparseArray_init());
  JreStrongAssignAndConsume(&self->mConstraintHelpers_, new_JavaUtilArrayList_initWithInt_(4));
  JreStrongAssignAndConsume(&self->mLayoutWidget_, new_ADXConstraintWidgetContainer_init());
  self->mMinWidth_ConstraintLayout_ = 0;
  self->mMinHeight_ConstraintLayout_ = 0;
  self->mMaxWidth_ = JavaLangInteger_MAX_VALUE;
  self->mMaxHeight_ = JavaLangInteger_MAX_VALUE;
  self->mDirtyHierarchy_ = true;
  self->mOptimizationLevel_ = ADXOptimizer_OPTIMIZATION_STANDARD;
  JreStrongAssign(&self->mConstraintSet_, nil);
  self->mConstraintSetId_ = -1;
  JreStrongAssignAndConsume(&self->mDesignIds_, new_JavaUtilHashMap_init());
  self->mLastMeasureWidth_ = -1;
  self->mLastMeasureHeight_ = -1;
  self->mLastMeasureWidthSize_ = -1;
  self->mLastMeasureHeightSize_ = -1;
  self->mLastMeasureWidthMode_ = ADView_MeasureSpec_UNSPECIFIED;
  self->mLastMeasureHeightMode_ = ADView_MeasureSpec_UNSPECIFIED;
  JreStrongAssignAndConsume(&self->mTempMapIdToWidget_, new_ADSparseArray_init());
  JreStrongAssignAndConsume(&self->mMeasurer_, new_ADXConstraintLayout_Measurer_initWithADXConstraintLayout_withADXConstraintLayout_(self, self));
  self->mOnMeasureWidthMeasureSpec_ = 0;
  self->mOnMeasureHeightMeasureSpec_ = 0;
  [((ADXConstraintWidgetContainer *) nil_chk(self->mLayoutWidget_)) setCompanionWidgetWithId:self];
  [((ADXConstraintWidgetContainer *) nil_chk(self->mLayoutWidget_)) setMeasurerWithADXBasicMeasure_Measurer:self->mMeasurer_];
  [((ADSparseArray *) nil_chk(self->mChildrenByIds_)) putWithInt:[self getId] withId:self];
  JreStrongAssign(&self->mConstraintSet_, nil);
  [((ADXConstraintWidgetContainer *) nil_chk(self->mLayoutWidget_)) setOptimizationLevelWithInt:self->mOptimizationLevel_];
}

ADXConstraintLayout *new_ADXConstraintLayout_init() {
  J2OBJC_NEW_IMPL(ADXConstraintLayout, init)
}

ADXConstraintLayout *create_ADXConstraintLayout_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintLayout)

@implementation ADXConstraintLayout_Measurer

- (void)captureLayoutInfoWithInt:(jint)widthSpec
                         withInt:(jint)heightSpec
                         withInt:(jint)top
                         withInt:(jint)bottom
                         withInt:(jint)width
                         withInt:(jint)height {
  paddingTop_ = top;
  paddingBottom_ = bottom;
  paddingWidth_ = width;
  paddingHeight_ = height;
  layoutWidthSpec_ = widthSpec;
  layoutHeightSpec_ = heightSpec;
}

- (instancetype)initWithADXConstraintLayout:(ADXConstraintLayout *)outer$
                    withADXConstraintLayout:(ADXConstraintLayout *)l {
  ADXConstraintLayout_Measurer_initWithADXConstraintLayout_withADXConstraintLayout_(self, outer$, l);
  return self;
}

- (void)measureWithADXConstraintWidget:(ADXConstraintWidget *)widget
           withADXBasicMeasure_Measure:(ADXBasicMeasure_Measure *)measure {
  if (widget == nil) {
    return;
  }
  if ([widget getVisibility] == ADView_GONE && ![widget isInPlaceholder]) {
    ((ADXBasicMeasure_Measure *) nil_chk(measure))->measuredWidth_ = 0;
    measure->measuredHeight_ = 0;
    measure->measuredBaseline_ = 0;
    return;
  }
  if ([widget getParent] == nil) {
    return;
  }
  jlong startMeasure;
  jlong endMeasure;
  ADXConstraintWidget_DimensionBehaviour *horizontalBehavior = JreRetainedLocalValue(((ADXBasicMeasure_Measure *) nil_chk(measure))->horizontalBehavior_);
  ADXConstraintWidget_DimensionBehaviour *verticalBehavior = JreRetainedLocalValue(measure->verticalBehavior_);
  jint horizontalDimension = measure->horizontalDimension_;
  jint verticalDimension = measure->verticalDimension_;
  jint horizontalSpec = 0;
  jint verticalSpec = 0;
  jint heightPadding = paddingTop_ + paddingBottom_;
  jint widthPadding = paddingWidth_;
  ADView *child = (ADView *) cast_chk([widget getCompanionWidget], [ADView class]);
  switch ([horizontalBehavior ordinal]) {
    case ADXConstraintWidget_DimensionBehaviour_Enum_FIXED:
    {
      horizontalSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(horizontalDimension, ADView_MeasureSpec_EXACTLY);
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_WRAP_CONTENT:
    {
      horizontalSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(layoutWidthSpec_, widthPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_PARENT:
    {
      horizontalSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(layoutWidthSpec_, widthPadding + [widget getHorizontalMargin], ADViewGroup_LayoutParams_MATCH_PARENT);
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_CONSTRAINT:
    {
      horizontalSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(layoutWidthSpec_, widthPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
      jboolean shouldDoWrap = widget->mMatchConstraintDefaultWidth_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP;
      if (measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, TRY_GIVEN_DIMENSIONS) || measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, USE_GIVEN_DIMENSIONS)) {
        jboolean otherDimensionStable = [((ADView *) nil_chk(child)) getMeasuredHeight] == [widget getHeight];
        jboolean useCurrent = measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, USE_GIVEN_DIMENSIONS) || !shouldDoWrap || (shouldDoWrap && otherDimensionStable) || ([child isKindOfClass:[ADXPlaceholder class]]) || ([widget isResolvedHorizontally]);
        if (useCurrent) {
          horizontalSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([widget getWidth], ADView_MeasureSpec_EXACTLY);
        }
      }
    }
    break;
  }
  switch ([verticalBehavior ordinal]) {
    case ADXConstraintWidget_DimensionBehaviour_Enum_FIXED:
    {
      verticalSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(verticalDimension, ADView_MeasureSpec_EXACTLY);
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_WRAP_CONTENT:
    {
      verticalSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(layoutHeightSpec_, heightPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_PARENT:
    {
      verticalSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(layoutHeightSpec_, heightPadding + [widget getVerticalMargin], ADViewGroup_LayoutParams_MATCH_PARENT);
    }
    break;
    case ADXConstraintWidget_DimensionBehaviour_Enum_MATCH_CONSTRAINT:
    {
      verticalSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(layoutHeightSpec_, heightPadding, ADViewGroup_LayoutParams_WRAP_CONTENT);
      jboolean shouldDoWrap = widget->mMatchConstraintDefaultHeight_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP;
      if (measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, TRY_GIVEN_DIMENSIONS) || measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, USE_GIVEN_DIMENSIONS)) {
        jboolean otherDimensionStable = [((ADView *) nil_chk(child)) getMeasuredWidth] == [widget getWidth];
        jboolean useCurrent = measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, USE_GIVEN_DIMENSIONS) || !shouldDoWrap || (shouldDoWrap && otherDimensionStable) || ([child isKindOfClass:[ADXPlaceholder class]]) || ([widget isResolvedVertically]);
        if (useCurrent) {
          verticalSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([widget getHeight], ADView_MeasureSpec_EXACTLY);
        }
      }
    }
    break;
  }
  ADXConstraintWidgetContainer *container = (ADXConstraintWidgetContainer *) cast_chk([widget getParent], [ADXConstraintWidgetContainer class]);
  if (container != nil && ADXOptimizer_enabledWithInt_withInt_(this$0_->mOptimizationLevel_, ADXOptimizer_OPTIMIZATION_CACHE_MEASURES)) {
    if ([((ADView *) nil_chk(child)) getMeasuredWidth] == [widget getWidth] && [child getMeasuredWidth] < [container getWidth] && [child getMeasuredHeight] == [widget getHeight] && [child getMeasuredHeight] < [container getHeight] && [child getBaseline] == [widget getBaselineDistance] && ![widget isMeasureRequested]) {
      jboolean similar = ADXConstraintLayout_Measurer_isSimilarSpecWithInt_withInt_withInt_(self, [widget getLastHorizontalMeasureSpec], horizontalSpec, [widget getWidth]) && ADXConstraintLayout_Measurer_isSimilarSpecWithInt_withInt_withInt_(self, [widget getLastVerticalMeasureSpec], verticalSpec, [widget getHeight]);
      if (similar) {
        measure->measuredWidth_ = [widget getWidth];
        measure->measuredHeight_ = [widget getHeight];
        measure->measuredBaseline_ = [widget getBaselineDistance];
        return;
      }
    }
  }
  jboolean horizontalMatchConstraints = horizontalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
  jboolean verticalMatchConstraints = verticalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
  jboolean verticalDimensionKnown = (verticalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT) || verticalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
  jboolean horizontalDimensionKnown = (horizontalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT) || horizontalBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
  jboolean horizontalUseRatio = horizontalMatchConstraints && widget->mDimensionRatio_ > 0;
  jboolean verticalUseRatio = verticalMatchConstraints && widget->mDimensionRatio_ > 0;
  if (child == nil) {
    return;
  }
  ADXConstraintLayout_LayoutParams *params = (ADXConstraintLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADXConstraintLayout_LayoutParams class]);
  jint width = 0;
  jint height = 0;
  jint baseline = 0;
  if ((measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, TRY_GIVEN_DIMENSIONS) || measure->measureStrategy_ == JreLoadStatic(ADXBasicMeasure_Measure, USE_GIVEN_DIMENSIONS)) || !(horizontalMatchConstraints && widget->mMatchConstraintDefaultWidth_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD && verticalMatchConstraints && widget->mMatchConstraintDefaultHeight_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD)) {
    if ([child isKindOfClass:[ADXVirtualLayout class]] && [widget isKindOfClass:[ADXCoreVirtualLayout class]]) {
      ADXCoreVirtualLayout *layout = (ADXCoreVirtualLayout *) cast_chk(widget, [ADXCoreVirtualLayout class]);
      [((ADXVirtualLayout *) cast_chk(child, [ADXVirtualLayout class])) onMeasureWithADXCoreVirtualLayout:layout withInt:horizontalSpec withInt:verticalSpec];
    }
    else {
      [child measureWithInt:horizontalSpec withInt:verticalSpec];
    }
    [widget setLastMeasureSpecWithInt:horizontalSpec withInt:verticalSpec];
    jint w = [child getMeasuredWidth];
    jint h = [child getMeasuredHeight];
    baseline = [child getBaseline];
    width = w;
    height = h;
    if (widget->mMatchConstraintMinWidth_ > 0) {
      width = JavaLangMath_maxWithInt_withInt_(widget->mMatchConstraintMinWidth_, width);
    }
    if (widget->mMatchConstraintMaxWidth_ > 0) {
      width = JavaLangMath_minWithInt_withInt_(widget->mMatchConstraintMaxWidth_, width);
    }
    if (widget->mMatchConstraintMinHeight_ > 0) {
      height = JavaLangMath_maxWithInt_withInt_(widget->mMatchConstraintMinHeight_, height);
    }
    if (widget->mMatchConstraintMaxHeight_ > 0) {
      height = JavaLangMath_minWithInt_withInt_(widget->mMatchConstraintMaxHeight_, height);
    }
    jboolean optimizeDirect = ADXOptimizer_enabledWithInt_withInt_(this$0_->mOptimizationLevel_, ADXOptimizer_OPTIMIZATION_DIRECT);
    if (!optimizeDirect) {
      if (horizontalUseRatio && verticalDimensionKnown) {
        jfloat ratio = widget->mDimensionRatio_;
        width = JreFpToInt((0.5f + height * ratio));
      }
      else if (verticalUseRatio && horizontalDimensionKnown) {
        jfloat ratio = widget->mDimensionRatio_;
        height = JreFpToInt((0.5f + width / ratio));
      }
    }
    if (w != width || h != height) {
      if (w != width) {
        horizontalSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(width, ADView_MeasureSpec_EXACTLY);
      }
      if (h != height) {
        verticalSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(height, ADView_MeasureSpec_EXACTLY);
      }
      [child measureWithInt:horizontalSpec withInt:verticalSpec];
      [widget setLastMeasureSpecWithInt:horizontalSpec withInt:verticalSpec];
      width = [child getMeasuredWidth];
      height = [child getMeasuredHeight];
      baseline = [child getBaseline];
    }
  }
  jboolean hasBaseline = baseline != -1;
  measure->measuredNeedsSolverPass_ = ((width != measure->horizontalDimension_) || (height != measure->verticalDimension_));
  if (((ADXConstraintLayout_LayoutParams *) nil_chk(params))->needsBaseline_) {
    hasBaseline = true;
  }
  if (hasBaseline && baseline != -1 && [widget getBaselineDistance] != baseline) {
    measure->measuredNeedsSolverPass_ = true;
  }
  measure->measuredWidth_ = width;
  measure->measuredHeight_ = height;
  measure->measuredHasBaseline_ = hasBaseline;
  measure->measuredBaseline_ = baseline;
}

- (jboolean)isSimilarSpecWithInt:(jint)lastMeasureSpec
                         withInt:(jint)spec
                         withInt:(jint)widgetSize {
  return ADXConstraintLayout_Measurer_isSimilarSpecWithInt_withInt_withInt_(self, lastMeasureSpec, spec, widgetSize);
}

- (void)didMeasures {
  jint widgetsCount = [((ADXConstraintLayout *) nil_chk(layout_)) getChildCount];
  for (jint i = 0; i < widgetsCount; i++) {
    ADView *child = [((ADXConstraintLayout *) nil_chk(layout_)) getChildAtWithInt:i];
    if ([child isKindOfClass:[ADXPlaceholder class]]) {
      [((ADXPlaceholder *) nil_chk(((ADXPlaceholder *) child))) updatePostMeasureWithADXConstraintLayout:layout_];
    }
  }
  jint helperCount = [((JavaUtilArrayList *) nil_chk(((ADXConstraintLayout *) nil_chk(layout_))->mConstraintHelpers_)) size];
  if (helperCount > 0) {
    for (jint i = 0; i < helperCount; i++) {
      ADXConstraintHelper *helper = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(((ADXConstraintLayout *) nil_chk(layout_))->mConstraintHelpers_)) getWithInt:i]);
      [((ADXConstraintHelper *) nil_chk(helper)) updatePostMeasureWithADXConstraintLayout:layout_];
    }
  }
}

- (void)__javaClone:(ADXConstraintLayout_Measurer *)original {
  [super __javaClone:original];
  [this$0_ release];
  [layout_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(captureLayoutInfoWithInt:withInt:withInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(initWithADXConstraintLayout:withADXConstraintLayout:);
  methods[2].selector = @selector(measureWithADXConstraintWidget:withADXBasicMeasure_Measure:);
  methods[3].selector = @selector(isSimilarSpecWithInt:withInt:withInt:);
  methods[4].selector = @selector(didMeasures);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXConstraintLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "layout_", "LADXConstraintLayout;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "paddingTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "paddingBottom_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "paddingWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "paddingHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "layoutWidthSpec_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "layoutHeightSpec_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "captureLayoutInfo", "IIIIII", "LADXConstraintLayout;LADXConstraintLayout;", "measure", "LADXConstraintWidget;LADXBasicMeasure_Measure;", "isSimilarSpec", "III", "LADXConstraintLayout;" };
  static const J2ObjcClassInfo _ADXConstraintLayout_Measurer = { "Measurer", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x0, 5, 8, 7, -1, -1, -1, -1 };
  return &_ADXConstraintLayout_Measurer;
}

@end

void ADXConstraintLayout_Measurer_initWithADXConstraintLayout_withADXConstraintLayout_(ADXConstraintLayout_Measurer *self, ADXConstraintLayout *outer$, ADXConstraintLayout *l) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->layout_ = l;
}

ADXConstraintLayout_Measurer *new_ADXConstraintLayout_Measurer_initWithADXConstraintLayout_withADXConstraintLayout_(ADXConstraintLayout *outer$, ADXConstraintLayout *l) {
  J2OBJC_NEW_IMPL(ADXConstraintLayout_Measurer, initWithADXConstraintLayout_withADXConstraintLayout_, outer$, l)
}

ADXConstraintLayout_Measurer *create_ADXConstraintLayout_Measurer_initWithADXConstraintLayout_withADXConstraintLayout_(ADXConstraintLayout *outer$, ADXConstraintLayout *l) {
  J2OBJC_CREATE_IMPL(ADXConstraintLayout_Measurer, initWithADXConstraintLayout_withADXConstraintLayout_, outer$, l)
}

jboolean ADXConstraintLayout_Measurer_isSimilarSpecWithInt_withInt_withInt_(ADXConstraintLayout_Measurer *self, jint lastMeasureSpec, jint spec, jint widgetSize) {
  if (lastMeasureSpec == spec) {
    return true;
  }
  jint lastMode = ADView_MeasureSpec_getModeWithInt_(lastMeasureSpec);
  jint lastSize = ADView_MeasureSpec_getSizeWithInt_(lastMeasureSpec);
  jint mode = ADView_MeasureSpec_getModeWithInt_(spec);
  jint size = ADView_MeasureSpec_getSizeWithInt_(spec);
  if (mode == ADView_MeasureSpec_EXACTLY && (lastMode == ADView_MeasureSpec_AT_MOST || lastMode == ADView_MeasureSpec_UNSPECIFIED) && widgetSize == size) {
    return true;
  }
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintLayout_Measurer)

@implementation ADXConstraintLayout_LayoutParams

- (instancetype)initWithADXConstraintLayout_LayoutParams:(ADXConstraintLayout_LayoutParams *)source {
  ADXConstraintLayout_LayoutParams_initWithADXConstraintLayout_LayoutParams_(self, source);
  return self;
}

- (void)validate {
  isGuideline_ = false;
  horizontalDimensionFixed_ = true;
  verticalDimensionFixed_ = true;
  if (width_ == ADViewGroup_LayoutParams_WRAP_CONTENT && constrainedWidth_) {
    horizontalDimensionFixed_ = false;
    if (matchConstraintDefaultWidth_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD) {
      matchConstraintDefaultWidth_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP;
    }
  }
  if (height_ == ADViewGroup_LayoutParams_WRAP_CONTENT && constrainedHeight_) {
    verticalDimensionFixed_ = false;
    if (matchConstraintDefaultHeight_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD) {
      matchConstraintDefaultHeight_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP;
    }
  }
  if (width_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT || width_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
    horizontalDimensionFixed_ = false;
    if (width_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT && matchConstraintDefaultWidth_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP) {
      width_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
      constrainedWidth_ = true;
    }
  }
  if (height_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT || height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
    verticalDimensionFixed_ = false;
    if (height_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT && matchConstraintDefaultHeight_ == ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP) {
      height_ = ADViewGroup_LayoutParams_WRAP_CONTENT;
      constrainedHeight_ = true;
    }
  }
  if (guidePercent_ != ADXConstraintLayout_LayoutParams_UNSET || guideBegin_ != ADXConstraintLayout_LayoutParams_UNSET || guideEnd_ != ADXConstraintLayout_LayoutParams_UNSET) {
    isGuideline_ = true;
    horizontalDimensionFixed_ = true;
    verticalDimensionFixed_ = true;
    if (!([widget_ isKindOfClass:[ADXCoreGuideline class]])) {
      JreStrongAssignAndConsume(&widget_, new_ADXCoreGuideline_init());
    }
    [((ADXCoreGuideline *) nil_chk(((ADXCoreGuideline *) cast_chk(widget_, [ADXCoreGuideline class])))) setOrientationWithInt:orientation_];
  }
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXConstraintLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXConstraintLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (void)resolveLayoutDirectionWithInt:(jint)layoutDirection {
  jint originalLeftMargin = leftMargin_;
  jint originalRightMargin = rightMargin_;
  jboolean isRtl = false;
  {
    [super resolveLayoutDirectionWithInt:layoutDirection];
    isRtl = (ADView_LAYOUT_DIRECTION_RTL == [self getLayoutDirection]);
  }
  resolvedRightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  resolvedRightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  resolvedLeftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  resolvedLeftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  resolveGoneLeftMargin_ = ADXConstraintLayout_LayoutParams_UNSET;
  resolveGoneRightMargin_ = ADXConstraintLayout_LayoutParams_UNSET;
  resolveGoneLeftMargin_ = goneLeftMargin_;
  resolveGoneRightMargin_ = goneRightMargin_;
  resolvedHorizontalBias_ = horizontalBias_;
  resolvedGuideBegin_ = guideBegin_;
  resolvedGuideEnd_ = guideEnd_;
  resolvedGuidePercent_ = guidePercent_;
  if (isRtl) {
    jboolean startEndDefined = false;
    if (startToEnd_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedRightToLeft_ = startToEnd_;
      startEndDefined = true;
    }
    else if (startToStart_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedRightToRight_ = startToStart_;
      startEndDefined = true;
    }
    if (endToStart_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedLeftToRight_ = endToStart_;
      startEndDefined = true;
    }
    if (endToEnd_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedLeftToLeft_ = endToEnd_;
      startEndDefined = true;
    }
    if (goneStartMargin_ != ADXConstraintLayout_LayoutParams_GONE_UNSET) {
      resolveGoneRightMargin_ = goneStartMargin_;
    }
    if (goneEndMargin_ != ADXConstraintLayout_LayoutParams_GONE_UNSET) {
      resolveGoneLeftMargin_ = goneEndMargin_;
    }
    if (startEndDefined) {
      resolvedHorizontalBias_ = 1 - horizontalBias_;
    }
    if (isGuideline_ && orientation_ == ADXCoreGuideline_VERTICAL) {
      if (guidePercent_ != ADXConstraintLayout_LayoutParams_UNSET) {
        resolvedGuidePercent_ = 1 - guidePercent_;
        resolvedGuideBegin_ = ADXConstraintLayout_LayoutParams_UNSET;
        resolvedGuideEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
      }
      else if (guideBegin_ != ADXConstraintLayout_LayoutParams_UNSET) {
        resolvedGuideEnd_ = guideBegin_;
        resolvedGuideBegin_ = ADXConstraintLayout_LayoutParams_UNSET;
        resolvedGuidePercent_ = ADXConstraintLayout_LayoutParams_UNSET;
      }
      else if (guideEnd_ != ADXConstraintLayout_LayoutParams_UNSET) {
        resolvedGuideBegin_ = guideEnd_;
        resolvedGuideEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
        resolvedGuidePercent_ = ADXConstraintLayout_LayoutParams_UNSET;
      }
    }
  }
  else {
    if (startToEnd_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedLeftToRight_ = startToEnd_;
    }
    if (startToStart_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedLeftToLeft_ = startToStart_;
    }
    if (endToStart_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedRightToLeft_ = endToStart_;
    }
    if (endToEnd_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedRightToRight_ = endToEnd_;
    }
    if (goneStartMargin_ != ADXConstraintLayout_LayoutParams_GONE_UNSET) {
      resolveGoneLeftMargin_ = goneStartMargin_;
    }
    if (goneEndMargin_ != ADXConstraintLayout_LayoutParams_GONE_UNSET) {
      resolveGoneRightMargin_ = goneEndMargin_;
    }
  }
  if (endToStart_ == ADXConstraintLayout_LayoutParams_UNSET && endToEnd_ == ADXConstraintLayout_LayoutParams_UNSET && startToStart_ == ADXConstraintLayout_LayoutParams_UNSET && startToEnd_ == ADXConstraintLayout_LayoutParams_UNSET) {
    if (rightToLeft_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedRightToLeft_ = rightToLeft_;
      if (rightMargin_ <= 0 && originalRightMargin > 0) {
        rightMargin_ = originalRightMargin;
      }
    }
    else if (rightToRight_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedRightToRight_ = rightToRight_;
      if (rightMargin_ <= 0 && originalRightMargin > 0) {
        rightMargin_ = originalRightMargin;
      }
    }
    if (leftToLeft_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedLeftToLeft_ = leftToLeft_;
      if (leftMargin_ <= 0 && originalLeftMargin > 0) {
        leftMargin_ = originalLeftMargin;
      }
    }
    else if (leftToRight_ != ADXConstraintLayout_LayoutParams_UNSET) {
      resolvedLeftToRight_ = leftToRight_;
      if (leftMargin_ <= 0 && originalLeftMargin > 0) {
        leftMargin_ = originalLeftMargin;
      }
    }
  }
}

- (void)dealloc {
  RELEASE_(dimensionRatio_);
  RELEASE_(constraintTag_);
  RELEASE_(widget_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXConstraintLayout_LayoutParams:);
  methods[1].selector = @selector(validate);
  methods[2].selector = @selector(initWithInt:withInt:);
  methods[3].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[4].selector = @selector(resolveLayoutDirectionWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MATCH_CONSTRAINT", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT, 0x19, -1, -1, -1, -1 },
    { "PARENT_ID", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_PARENT_ID, 0x19, -1, -1, -1, -1 },
    { "UNSET", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_UNSET, 0x19, -1, -1, -1, -1 },
    { "GONE_UNSET", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_GONE_UNSET, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "LEFT", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_LEFT, 0x19, -1, -1, -1, -1 },
    { "RIGHT", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_RIGHT, 0x19, -1, -1, -1, -1 },
    { "TOP", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_TOP, 0x19, -1, -1, -1, -1 },
    { "BOTTOM", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "BASELINE", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_BASELINE, 0x19, -1, -1, -1, -1 },
    { "START", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_START, 0x19, -1, -1, -1, -1 },
    { "END", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_END, 0x19, -1, -1, -1, -1 },
    { "CIRCLE", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_CIRCLE, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_WRAP", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_WRAP, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_SPREAD", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD, 0x19, -1, -1, -1, -1 },
    { "MATCH_CONSTRAINT_PERCENT", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_PERCENT, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD, 0x19, -1, -1, -1, -1 },
    { "CHAIN_SPREAD_INSIDE", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD_INSIDE, 0x19, -1, -1, -1, -1 },
    { "CHAIN_PACKED", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_CHAIN_PACKED, 0x19, -1, -1, -1, -1 },
    { "guideBegin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "guideEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "guidePercent_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leftToLeft_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leftToRight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightToLeft_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "rightToRight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "topToTop_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "topToBottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottomToTop_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottomToBottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineToBaseline_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineToTop_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineToBottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "circleConstraint_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "circleRadius_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "circleAngle_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startToEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startToStart_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endToStart_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endToEnd_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneLeftMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneTopMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneRightMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneBottomMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneStartMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneEndMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "goneBaselineMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "baselineMargin_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widthSet_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "heightSet_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "horizontalBias_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalBias_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dimensionRatio_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "dimensionRatioValue_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "dimensionRatioSide_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "horizontalWeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalWeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalChainStyle_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "verticalChainStyle_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintDefaultWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintDefaultHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintMinWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintMinHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintMaxWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintMaxHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintPercentWidth_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConstraintPercentHeight_", "F", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "editorAbsoluteX_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "editorAbsoluteY_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "orientation_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "constrainedWidth_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "constrainedHeight_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "constraintTag_", "LNSString;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_INCLUDED", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_INCLUDED, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_HORIZONTAL_ONLY", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_HORIZONTAL_ONLY, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_VERTICAL_ONLY", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_VERTICAL_ONLY, 0x19, -1, -1, -1, -1 },
    { "WRAP_BEHAVIOR_SKIPPED", "I", .constantValue.asInt = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_SKIPPED, 0x19, -1, -1, -1, -1 },
    { "wrapBehaviorInParent_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "horizontalDimensionFixed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "verticalDimensionFixed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "needsBaseline_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isGuideline_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isHelper_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isInPlaceholder_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "isVirtualGroup_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedLeftToLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedLeftToRight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedRightToLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedRightToRight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolveGoneLeftMargin_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolveGoneRightMargin_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedHorizontalBias_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedGuideBegin_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedGuideEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "resolvedGuidePercent_", "F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "widget_", "LADXConstraintWidget;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "helped_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXConstraintLayout_LayoutParams;", "II", "LADViewGroup_LayoutParams;", "resolveLayoutDirection", "I", "LADXConstraintLayout;" };
  static const J2ObjcClassInfo _ADXConstraintLayout_LayoutParams = { "LayoutParams", "androidx.constraintlayout.widget", ptrTable, methods, fields, 7, 0x9, 5, 98, 5, -1, -1, -1, -1 };
  return &_ADXConstraintLayout_LayoutParams;
}

@end

void ADXConstraintLayout_LayoutParams_initWithADXConstraintLayout_LayoutParams_(ADXConstraintLayout_LayoutParams *self, ADXConstraintLayout_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  self->guideBegin_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->guideEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->guidePercent_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->leftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->leftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->rightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->rightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->topToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->topToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->bottomToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->bottomToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->circleConstraint_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->circleRadius_ = 0;
  self->circleAngle_ = 0;
  self->startToEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->startToStart_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->endToStart_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->endToEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->goneLeftMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneTopMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneRightMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneBottomMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneStartMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneEndMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneBaselineMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->baselineMargin_ = 0;
  self->widthSet_ = true;
  self->heightSet_ = true;
  self->horizontalBias_ = 0.5f;
  self->verticalBias_ = 0.5f;
  JreStrongAssign(&self->dimensionRatio_, nil);
  self->dimensionRatioValue_ = 0;
  self->dimensionRatioSide_ = ADXConstraintLayout_LayoutParams_VERTICAL;
  self->horizontalWeight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->verticalWeight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->horizontalChainStyle_ = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD;
  self->verticalChainStyle_ = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD;
  self->matchConstraintDefaultWidth_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD;
  self->matchConstraintDefaultHeight_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD;
  self->matchConstraintMinWidth_ = 0;
  self->matchConstraintMinHeight_ = 0;
  self->matchConstraintMaxWidth_ = 0;
  self->matchConstraintMaxHeight_ = 0;
  self->matchConstraintPercentWidth_ = 1;
  self->matchConstraintPercentHeight_ = 1;
  self->editorAbsoluteX_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->editorAbsoluteY_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->orientation_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->constrainedWidth_ = false;
  self->constrainedHeight_ = false;
  JreStrongAssign(&self->constraintTag_, nil);
  self->wrapBehaviorInParent_ = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_INCLUDED;
  self->horizontalDimensionFixed_ = true;
  self->verticalDimensionFixed_ = true;
  self->needsBaseline_ = false;
  self->isGuideline_ = false;
  self->isHelper_ = false;
  self->isInPlaceholder_ = false;
  self->isVirtualGroup_ = false;
  self->resolvedLeftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedLeftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedRightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedRightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolveGoneLeftMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->resolveGoneRightMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->resolvedHorizontalBias_ = 0.5f;
  JreStrongAssignAndConsume(&self->widget_, new_ADXConstraintWidget_init());
  self->helped_ = false;
  self->guideBegin_ = ((ADXConstraintLayout_LayoutParams *) nil_chk(source))->guideBegin_;
  self->guideEnd_ = source->guideEnd_;
  self->guidePercent_ = source->guidePercent_;
  self->leftToLeft_ = source->leftToLeft_;
  self->leftToRight_ = source->leftToRight_;
  self->rightToLeft_ = source->rightToLeft_;
  self->rightToRight_ = source->rightToRight_;
  self->topToTop_ = source->topToTop_;
  self->topToBottom_ = source->topToBottom_;
  self->bottomToTop_ = source->bottomToTop_;
  self->bottomToBottom_ = source->bottomToBottom_;
  self->baselineToBaseline_ = source->baselineToBaseline_;
  self->baselineToTop_ = source->baselineToTop_;
  self->baselineToBottom_ = source->baselineToBottom_;
  self->circleConstraint_ = source->circleConstraint_;
  self->circleRadius_ = source->circleRadius_;
  self->circleAngle_ = source->circleAngle_;
  self->startToEnd_ = source->startToEnd_;
  self->startToStart_ = source->startToStart_;
  self->endToStart_ = source->endToStart_;
  self->endToEnd_ = source->endToEnd_;
  self->goneLeftMargin_ = source->goneLeftMargin_;
  self->goneTopMargin_ = source->goneTopMargin_;
  self->goneRightMargin_ = source->goneRightMargin_;
  self->goneBottomMargin_ = source->goneBottomMargin_;
  self->goneStartMargin_ = source->goneStartMargin_;
  self->goneEndMargin_ = source->goneEndMargin_;
  self->goneBaselineMargin_ = source->goneBaselineMargin_;
  self->baselineMargin_ = source->baselineMargin_;
  self->horizontalBias_ = source->horizontalBias_;
  self->verticalBias_ = source->verticalBias_;
  JreStrongAssign(&self->dimensionRatio_, source->dimensionRatio_);
  self->dimensionRatioValue_ = source->dimensionRatioValue_;
  self->dimensionRatioSide_ = source->dimensionRatioSide_;
  self->horizontalWeight_ = source->horizontalWeight_;
  self->verticalWeight_ = source->verticalWeight_;
  self->horizontalChainStyle_ = source->horizontalChainStyle_;
  self->verticalChainStyle_ = source->verticalChainStyle_;
  self->constrainedWidth_ = source->constrainedWidth_;
  self->constrainedHeight_ = source->constrainedHeight_;
  self->matchConstraintDefaultWidth_ = source->matchConstraintDefaultWidth_;
  self->matchConstraintDefaultHeight_ = source->matchConstraintDefaultHeight_;
  self->matchConstraintMinWidth_ = source->matchConstraintMinWidth_;
  self->matchConstraintMaxWidth_ = source->matchConstraintMaxWidth_;
  self->matchConstraintMinHeight_ = source->matchConstraintMinHeight_;
  self->matchConstraintMaxHeight_ = source->matchConstraintMaxHeight_;
  self->matchConstraintPercentWidth_ = source->matchConstraintPercentWidth_;
  self->matchConstraintPercentHeight_ = source->matchConstraintPercentHeight_;
  self->editorAbsoluteX_ = source->editorAbsoluteX_;
  self->editorAbsoluteY_ = source->editorAbsoluteY_;
  self->orientation_ = source->orientation_;
  self->horizontalDimensionFixed_ = source->horizontalDimensionFixed_;
  self->verticalDimensionFixed_ = source->verticalDimensionFixed_;
  self->needsBaseline_ = source->needsBaseline_;
  self->isGuideline_ = source->isGuideline_;
  self->resolvedLeftToLeft_ = source->resolvedLeftToLeft_;
  self->resolvedLeftToRight_ = source->resolvedLeftToRight_;
  self->resolvedRightToLeft_ = source->resolvedRightToLeft_;
  self->resolvedRightToRight_ = source->resolvedRightToRight_;
  self->resolveGoneLeftMargin_ = source->resolveGoneLeftMargin_;
  self->resolveGoneRightMargin_ = source->resolveGoneRightMargin_;
  self->resolvedHorizontalBias_ = source->resolvedHorizontalBias_;
  JreStrongAssign(&self->constraintTag_, source->constraintTag_);
  self->wrapBehaviorInParent_ = source->wrapBehaviorInParent_;
  JreStrongAssign(&self->widget_, source->widget_);
  self->widthSet_ = source->widthSet_;
  self->heightSet_ = source->heightSet_;
}

ADXConstraintLayout_LayoutParams *new_ADXConstraintLayout_LayoutParams_initWithADXConstraintLayout_LayoutParams_(ADXConstraintLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXConstraintLayout_LayoutParams, initWithADXConstraintLayout_LayoutParams_, source)
}

ADXConstraintLayout_LayoutParams *create_ADXConstraintLayout_LayoutParams_initWithADXConstraintLayout_LayoutParams_(ADXConstraintLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXConstraintLayout_LayoutParams, initWithADXConstraintLayout_LayoutParams_, source)
}

void ADXConstraintLayout_LayoutParams_initWithInt_withInt_(ADXConstraintLayout_LayoutParams *self, jint width, jint height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->guideBegin_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->guideEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->guidePercent_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->leftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->leftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->rightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->rightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->topToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->topToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->bottomToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->bottomToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->circleConstraint_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->circleRadius_ = 0;
  self->circleAngle_ = 0;
  self->startToEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->startToStart_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->endToStart_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->endToEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->goneLeftMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneTopMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneRightMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneBottomMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneStartMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneEndMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneBaselineMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->baselineMargin_ = 0;
  self->widthSet_ = true;
  self->heightSet_ = true;
  self->horizontalBias_ = 0.5f;
  self->verticalBias_ = 0.5f;
  JreStrongAssign(&self->dimensionRatio_, nil);
  self->dimensionRatioValue_ = 0;
  self->dimensionRatioSide_ = ADXConstraintLayout_LayoutParams_VERTICAL;
  self->horizontalWeight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->verticalWeight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->horizontalChainStyle_ = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD;
  self->verticalChainStyle_ = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD;
  self->matchConstraintDefaultWidth_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD;
  self->matchConstraintDefaultHeight_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD;
  self->matchConstraintMinWidth_ = 0;
  self->matchConstraintMinHeight_ = 0;
  self->matchConstraintMaxWidth_ = 0;
  self->matchConstraintMaxHeight_ = 0;
  self->matchConstraintPercentWidth_ = 1;
  self->matchConstraintPercentHeight_ = 1;
  self->editorAbsoluteX_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->editorAbsoluteY_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->orientation_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->constrainedWidth_ = false;
  self->constrainedHeight_ = false;
  JreStrongAssign(&self->constraintTag_, nil);
  self->wrapBehaviorInParent_ = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_INCLUDED;
  self->horizontalDimensionFixed_ = true;
  self->verticalDimensionFixed_ = true;
  self->needsBaseline_ = false;
  self->isGuideline_ = false;
  self->isHelper_ = false;
  self->isInPlaceholder_ = false;
  self->isVirtualGroup_ = false;
  self->resolvedLeftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedLeftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedRightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedRightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolveGoneLeftMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->resolveGoneRightMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->resolvedHorizontalBias_ = 0.5f;
  JreStrongAssignAndConsume(&self->widget_, new_ADXConstraintWidget_init());
  self->helped_ = false;
}

ADXConstraintLayout_LayoutParams *new_ADXConstraintLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintLayout_LayoutParams, initWithInt_withInt_, width, height)
}

ADXConstraintLayout_LayoutParams *create_ADXConstraintLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintLayout_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXConstraintLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADXConstraintLayout_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->guideBegin_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->guideEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->guidePercent_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->leftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->leftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->rightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->rightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->topToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->topToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->bottomToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->bottomToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToBaseline_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToTop_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->baselineToBottom_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->circleConstraint_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->circleRadius_ = 0;
  self->circleAngle_ = 0;
  self->startToEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->startToStart_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->endToStart_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->endToEnd_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->goneLeftMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneTopMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneRightMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneBottomMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneStartMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneEndMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->goneBaselineMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->baselineMargin_ = 0;
  self->widthSet_ = true;
  self->heightSet_ = true;
  self->horizontalBias_ = 0.5f;
  self->verticalBias_ = 0.5f;
  JreStrongAssign(&self->dimensionRatio_, nil);
  self->dimensionRatioValue_ = 0;
  self->dimensionRatioSide_ = ADXConstraintLayout_LayoutParams_VERTICAL;
  self->horizontalWeight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->verticalWeight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->horizontalChainStyle_ = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD;
  self->verticalChainStyle_ = ADXConstraintLayout_LayoutParams_CHAIN_SPREAD;
  self->matchConstraintDefaultWidth_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD;
  self->matchConstraintDefaultHeight_ = ADXConstraintLayout_LayoutParams_MATCH_CONSTRAINT_SPREAD;
  self->matchConstraintMinWidth_ = 0;
  self->matchConstraintMinHeight_ = 0;
  self->matchConstraintMaxWidth_ = 0;
  self->matchConstraintMaxHeight_ = 0;
  self->matchConstraintPercentWidth_ = 1;
  self->matchConstraintPercentHeight_ = 1;
  self->editorAbsoluteX_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->editorAbsoluteY_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->orientation_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->constrainedWidth_ = false;
  self->constrainedHeight_ = false;
  JreStrongAssign(&self->constraintTag_, nil);
  self->wrapBehaviorInParent_ = ADXConstraintLayout_LayoutParams_WRAP_BEHAVIOR_INCLUDED;
  self->horizontalDimensionFixed_ = true;
  self->verticalDimensionFixed_ = true;
  self->needsBaseline_ = false;
  self->isGuideline_ = false;
  self->isHelper_ = false;
  self->isInPlaceholder_ = false;
  self->isVirtualGroup_ = false;
  self->resolvedLeftToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedLeftToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedRightToLeft_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolvedRightToRight_ = ADXConstraintLayout_LayoutParams_UNSET;
  self->resolveGoneLeftMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->resolveGoneRightMargin_ = ADXConstraintLayout_LayoutParams_GONE_UNSET;
  self->resolvedHorizontalBias_ = 0.5f;
  JreStrongAssignAndConsume(&self->widget_, new_ADXConstraintWidget_init());
  self->helped_ = false;
}

ADXConstraintLayout_LayoutParams *new_ADXConstraintLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXConstraintLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXConstraintLayout_LayoutParams *create_ADXConstraintLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXConstraintLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintLayout_LayoutParams)
