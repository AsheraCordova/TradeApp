//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\SolverVariableValues.java
//

#include "ArrayRow.h"
#include "Cache.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SolverVariable.h"
#include "SolverVariableValues.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"


@interface ADXSolverVariableValues () {
 @public
  jint SIZE_;
  jint HASH_SIZE_;
  __unsafe_unretained ADXArrayRow *mRow_;
}

- (void)increaseSize;

- (void)addToHashMapWithADXSolverVariable:(ADXSolverVariable *)variable
                                  withInt:(jint)index;

- (void)displayHash;

- (void)removeFromHashMapWithADXSolverVariable:(ADXSolverVariable *)variable;

- (void)addVariableWithInt:(jint)index
     withADXSolverVariable:(ADXSolverVariable *)variable
                 withFloat:(jfloat)value;

- (jint)findEmptySlot;

- (void)insertVariableWithInt:(jint)index
        withADXSolverVariable:(ADXSolverVariable *)variable
                    withFloat:(jfloat)value;

@end

inline jboolean ADXSolverVariableValues_get_DEBUG(void);
#define ADXSolverVariableValues_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariableValues, DEBUG, jboolean)

inline jboolean ADXSolverVariableValues_get_HASH(void);
#define ADXSolverVariableValues_HASH true
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariableValues, HASH, jboolean)

inline jfloat ADXSolverVariableValues_get_epsilon(void);
inline jfloat ADXSolverVariableValues_set_epsilon(jfloat value);
inline jfloat *ADXSolverVariableValues_getRef_epsilon(void);
static jfloat ADXSolverVariableValues_epsilon = 0.001f;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADXSolverVariableValues, epsilon, jfloat)

inline jint ADXSolverVariableValues_get_NONE(void);
#define ADXSolverVariableValues_NONE -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXSolverVariableValues, NONE, jint)

__attribute__((unused)) static void ADXSolverVariableValues_increaseSize(ADXSolverVariableValues *self);

__attribute__((unused)) static void ADXSolverVariableValues_addToHashMapWithADXSolverVariable_withInt_(ADXSolverVariableValues *self, ADXSolverVariable *variable, jint index);

__attribute__((unused)) static void ADXSolverVariableValues_displayHash(ADXSolverVariableValues *self);

__attribute__((unused)) static void ADXSolverVariableValues_removeFromHashMapWithADXSolverVariable_(ADXSolverVariableValues *self, ADXSolverVariable *variable);

__attribute__((unused)) static void ADXSolverVariableValues_addVariableWithInt_withADXSolverVariable_withFloat_(ADXSolverVariableValues *self, jint index, ADXSolverVariable *variable, jfloat value);

__attribute__((unused)) static jint ADXSolverVariableValues_findEmptySlot(ADXSolverVariableValues *self);

__attribute__((unused)) static void ADXSolverVariableValues_insertVariableWithInt_withADXSolverVariable_withFloat_(ADXSolverVariableValues *self, jint index, ADXSolverVariable *variable, jfloat value);

@implementation ADXSolverVariableValues

- (instancetype)initWithADXArrayRow:(ADXArrayRow *)row
                       withADXCache:(ADXCache *)cache {
  ADXSolverVariableValues_initWithADXArrayRow_withADXCache_(self, row, cache);
  return self;
}

- (jint)getCurrentSize {
  return mCount_;
}

- (ADXSolverVariable *)getVariableWithInt:(jint)index {
  jint count = mCount_;
  if (count == 0) {
    return nil;
  }
  jint j = head_;
  for (jint i = 0; i < count; i++) {
    if (i == index && j != ADXSolverVariableValues_NONE) {
      return IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(variables_), j));
    }
    j = IOSIntArray_Get(nil_chk(next_), j);
    if (j == ADXSolverVariableValues_NONE) {
      break;
    }
  }
  return nil;
}

- (jfloat)getVariableValueWithInt:(jint)index {
  jint count = mCount_;
  jint j = head_;
  for (jint i = 0; i < count; i++) {
    if (i == index) {
      return IOSFloatArray_Get(nil_chk(values_), j);
    }
    j = IOSIntArray_Get(nil_chk(next_), j);
    if (j == ADXSolverVariableValues_NONE) {
      break;
    }
  }
  return 0;
}

- (jboolean)containsWithADXSolverVariable:(ADXSolverVariable *)variable {
  return [self indexOfWithADXSolverVariable:variable] != ADXSolverVariableValues_NONE;
}

- (jint)indexOfWithADXSolverVariable:(ADXSolverVariable *)variable {
  if (mCount_ == 0 || variable == nil) {
    return ADXSolverVariableValues_NONE;
  }
  jint id_ = variable->id__;
  jint key = JreIntMod(id_, HASH_SIZE_);
  key = IOSIntArray_Get(nil_chk(keys_), key);
  if (key == ADXSolverVariableValues_NONE) {
    return ADXSolverVariableValues_NONE;
  }
  if (IOSIntArray_Get(nil_chk(variables_), key) == id_) {
    return key;
  }
  while (IOSIntArray_Get(nil_chk(nextKeys_), key) != ADXSolverVariableValues_NONE && IOSIntArray_Get(variables_, IOSIntArray_Get(nextKeys_, key)) != id_) {
    key = IOSIntArray_Get(nextKeys_, key);
  }
  if (IOSIntArray_Get(nextKeys_, key) == ADXSolverVariableValues_NONE) {
    return ADXSolverVariableValues_NONE;
  }
  if (IOSIntArray_Get(variables_, IOSIntArray_Get(nextKeys_, key)) == id_) {
    return IOSIntArray_Get(nextKeys_, key);
  }
  return ADXSolverVariableValues_NONE;
}

- (jfloat)getWithADXSolverVariable:(ADXSolverVariable *)variable {
  jint index = [self indexOfWithADXSolverVariable:variable];
  if (index != ADXSolverVariableValues_NONE) {
    return IOSFloatArray_Get(nil_chk(values_), index);
  }
  return 0;
}

- (void)display {
  jint count = mCount_;
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"{ "];
  for (jint i = 0; i < count; i++) {
    ADXSolverVariable *v = JreRetainedLocalValue([self getVariableWithInt:i]);
    if (v == nil) {
      continue;
    }
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("@$FC", v, @" = ", [self getVariableValueWithInt:i], ' ')];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@" }"];
}

- (NSString *)description {
  NSString *str = JreStrcat("I$", ((jint) [self hash]), @" { ");
  jint count = mCount_;
  for (jint i = 0; i < count; i++) {
    ADXSolverVariable *v = JreRetainedLocalValue([self getVariableWithInt:i]);
    if (v == nil) {
      continue;
    }
    JreStrAppend(&str, "@$FC", v, @" = ", [self getVariableValueWithInt:i], ' ');
    jint index = [self indexOfWithADXSolverVariable:v];
    JreStrAppend(&str, "$", @"[p: ");
    if (IOSIntArray_Get(nil_chk(previous_), index) != ADXSolverVariableValues_NONE) {
      JreStrAppend(&str, "@", IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(variables_), IOSIntArray_Get(previous_, index))));
    }
    else {
      JreStrAppend(&str, "$", @"none");
    }
    JreStrAppend(&str, "$", @", n: ");
    if (IOSIntArray_Get(nil_chk(next_), index) != ADXSolverVariableValues_NONE) {
      JreStrAppend(&str, "@", IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(nil_chk(variables_), IOSIntArray_Get(next_, index))));
    }
    else {
      JreStrAppend(&str, "$", @"none");
    }
    JreStrAppend(&str, "$", @"]");
  }
  JreStrAppend(&str, "$", @" }");
  return str;
}

- (void)clear {
  jint count = mCount_;
  for (jint i = 0; i < count; i++) {
    ADXSolverVariable *v = JreRetainedLocalValue([self getVariableWithInt:i]);
    if (v != nil) {
      [v removeFromRowWithADXArrayRow:mRow_];
    }
  }
  for (jint i = 0; i < SIZE_; i++) {
    *IOSIntArray_GetRef(nil_chk(variables_), i) = ADXSolverVariableValues_NONE;
    *IOSIntArray_GetRef(nil_chk(nextKeys_), i) = ADXSolverVariableValues_NONE;
  }
  for (jint i = 0; i < HASH_SIZE_; i++) {
    *IOSIntArray_GetRef(nil_chk(keys_), i) = ADXSolverVariableValues_NONE;
  }
  mCount_ = 0;
  head_ = -1;
}

- (void)increaseSize {
  ADXSolverVariableValues_increaseSize(self);
}

- (void)addToHashMapWithADXSolverVariable:(ADXSolverVariable *)variable
                                  withInt:(jint)index {
  ADXSolverVariableValues_addToHashMapWithADXSolverVariable_withInt_(self, variable, index);
}

- (void)displayHash {
  ADXSolverVariableValues_displayHash(self);
}

- (void)removeFromHashMapWithADXSolverVariable:(ADXSolverVariable *)variable {
  ADXSolverVariableValues_removeFromHashMapWithADXSolverVariable_(self, variable);
}

- (void)addVariableWithInt:(jint)index
     withADXSolverVariable:(ADXSolverVariable *)variable
                 withFloat:(jfloat)value {
  ADXSolverVariableValues_addVariableWithInt_withADXSolverVariable_withFloat_(self, index, variable, value);
}

- (jint)findEmptySlot {
  return ADXSolverVariableValues_findEmptySlot(self);
}

- (void)insertVariableWithInt:(jint)index
        withADXSolverVariable:(ADXSolverVariable *)variable
                    withFloat:(jfloat)value {
  ADXSolverVariableValues_insertVariableWithInt_withADXSolverVariable_withFloat_(self, index, variable, value);
}

- (void)putWithADXSolverVariable:(ADXSolverVariable *)variable
                       withFloat:(jfloat)value {
  if (value > -ADXSolverVariableValues_epsilon && value < ADXSolverVariableValues_epsilon) {
    [self removeWithADXSolverVariable:variable withBoolean:true];
    return;
  }
  if (mCount_ == 0) {
    ADXSolverVariableValues_addVariableWithInt_withADXSolverVariable_withFloat_(self, 0, variable, value);
    ADXSolverVariableValues_addToHashMapWithADXSolverVariable_withInt_(self, variable, 0);
    head_ = 0;
  }
  else {
    jint index = [self indexOfWithADXSolverVariable:variable];
    if (index != ADXSolverVariableValues_NONE) {
      *IOSFloatArray_GetRef(nil_chk(values_), index) = value;
    }
    else {
      if (mCount_ + 1 >= SIZE_) {
        ADXSolverVariableValues_increaseSize(self);
      }
      jint count = mCount_;
      jint previousItem = -1;
      jint j = head_;
      for (jint i = 0; i < count; i++) {
        if (IOSIntArray_Get(nil_chk(variables_), j) == ((ADXSolverVariable *) nil_chk(variable))->id__) {
          *IOSFloatArray_GetRef(nil_chk(values_), j) = value;
          return;
        }
        if (IOSIntArray_Get(variables_, j) < variable->id__) {
          previousItem = j;
        }
        j = IOSIntArray_Get(nil_chk(next_), j);
        if (j == ADXSolverVariableValues_NONE) {
          break;
        }
      }
      ADXSolverVariableValues_insertVariableWithInt_withADXSolverVariable_withFloat_(self, previousItem, variable, value);
    }
  }
}

- (jint)sizeInBytes {
  return 0;
}

- (jfloat)removeWithADXSolverVariable:(ADXSolverVariable *)v
                          withBoolean:(jboolean)removeFromDefinition {
  jint index = [self indexOfWithADXSolverVariable:v];
  if (index == ADXSolverVariableValues_NONE) {
    return 0;
  }
  ADXSolverVariableValues_removeFromHashMapWithADXSolverVariable_(self, v);
  jfloat value = IOSFloatArray_Get(nil_chk(values_), index);
  if (head_ == index) {
    head_ = IOSIntArray_Get(nil_chk(next_), index);
  }
  *IOSIntArray_GetRef(nil_chk(variables_), index) = ADXSolverVariableValues_NONE;
  if (IOSIntArray_Get(nil_chk(previous_), index) != ADXSolverVariableValues_NONE) {
    *IOSIntArray_GetRef(nil_chk(next_), IOSIntArray_Get(previous_, index)) = IOSIntArray_Get(next_, index);
  }
  if (IOSIntArray_Get(nil_chk(next_), index) != ADXSolverVariableValues_NONE) {
    *IOSIntArray_GetRef(previous_, IOSIntArray_Get(next_, index)) = IOSIntArray_Get(previous_, index);
  }
  mCount_--;
  ((ADXSolverVariable *) nil_chk(v))->usageInRowCount_--;
  if (removeFromDefinition) {
    [v removeFromRowWithADXArrayRow:mRow_];
  }
  return value;
}

- (void)addWithADXSolverVariable:(ADXSolverVariable *)v
                       withFloat:(jfloat)value
                     withBoolean:(jboolean)removeFromDefinition {
  if (value > -ADXSolverVariableValues_epsilon && value < ADXSolverVariableValues_epsilon) {
    return;
  }
  jint index = [self indexOfWithADXSolverVariable:v];
  if (index == ADXSolverVariableValues_NONE) {
    [self putWithADXSolverVariable:v withFloat:value];
  }
  else {
    JrePlusAssignFloatF(IOSFloatArray_GetRef(nil_chk(values_), index), value);
    if (IOSFloatArray_Get(values_, index) > -ADXSolverVariableValues_epsilon && IOSFloatArray_Get(values_, index) < ADXSolverVariableValues_epsilon) {
      *IOSFloatArray_GetRef(values_, index) = 0;
      [self removeWithADXSolverVariable:v withBoolean:removeFromDefinition];
    }
  }
}

- (jfloat)useWithADXArrayRow:(ADXArrayRow *)def
                 withBoolean:(jboolean)removeFromDefinition {
  jfloat value = [self getWithADXSolverVariable:((ADXArrayRow *) nil_chk(def))->variable_];
  [self removeWithADXSolverVariable:def->variable_ withBoolean:removeFromDefinition];
  ADXSolverVariableValues *definition = (ADXSolverVariableValues *) cast_chk(def->variables_, [ADXSolverVariableValues class]);
  jint definitionSize = [((ADXSolverVariableValues *) nil_chk(definition)) getCurrentSize];
  jint j = definition->head_;
  {
    j = 0;
    for (jint i = 0; j < definitionSize; i++) {
      if (IOSIntArray_Get(nil_chk(definition->variables_), i) != ADXSolverVariableValues_NONE) {
        jfloat definitionValue = IOSFloatArray_Get(nil_chk(definition->values_), i);
        ADXSolverVariable *definitionVariable = IOSObjectArray_Get(nil_chk(((ADXCache *) nil_chk(mCache_))->mIndexedVariables_), IOSIntArray_Get(definition->variables_, i));
        [self addWithADXSolverVariable:definitionVariable withFloat:definitionValue * value withBoolean:removeFromDefinition];
        j++;
      }
    }
  }
  return value;
}

- (void)invert {
  jint count = mCount_;
  jint j = head_;
  for (jint i = 0; i < count; i++) {
    JreTimesAssignFloatF(IOSFloatArray_GetRef(nil_chk(values_), j), -1);
    j = IOSIntArray_Get(nil_chk(next_), j);
    if (j == ADXSolverVariableValues_NONE) {
      break;
    }
  }
}

- (void)divideByAmountWithFloat:(jfloat)amount {
  jint count = mCount_;
  jint j = head_;
  for (jint i = 0; i < count; i++) {
    JreDivideAssignFloatF(IOSFloatArray_GetRef(nil_chk(values_), j), amount);
    j = IOSIntArray_Get(nil_chk(next_), j);
    if (j == ADXSolverVariableValues_NONE) {
      break;
    }
  }
}

- (void)__javaClone:(ADXSolverVariableValues *)original {
  [super __javaClone:original];
  [mRow_ release];
  [mCache_ release];
}

- (void)dealloc {
  RELEASE_(keys_);
  RELEASE_(nextKeys_);
  RELEASE_(variables_);
  RELEASE_(values_);
  RELEASE_(previous_);
  RELEASE_(next_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXSolverVariable;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXArrayRow:withADXCache:);
  methods[1].selector = @selector(getCurrentSize);
  methods[2].selector = @selector(getVariableWithInt:);
  methods[3].selector = @selector(getVariableValueWithInt:);
  methods[4].selector = @selector(containsWithADXSolverVariable:);
  methods[5].selector = @selector(indexOfWithADXSolverVariable:);
  methods[6].selector = @selector(getWithADXSolverVariable:);
  methods[7].selector = @selector(display);
  methods[8].selector = @selector(description);
  methods[9].selector = @selector(clear);
  methods[10].selector = @selector(increaseSize);
  methods[11].selector = @selector(addToHashMapWithADXSolverVariable:withInt:);
  methods[12].selector = @selector(displayHash);
  methods[13].selector = @selector(removeFromHashMapWithADXSolverVariable:);
  methods[14].selector = @selector(addVariableWithInt:withADXSolverVariable:withFloat:);
  methods[15].selector = @selector(findEmptySlot);
  methods[16].selector = @selector(insertVariableWithInt:withADXSolverVariable:withFloat:);
  methods[17].selector = @selector(putWithADXSolverVariable:withFloat:);
  methods[18].selector = @selector(sizeInBytes);
  methods[19].selector = @selector(removeWithADXSolverVariable:withBoolean:);
  methods[20].selector = @selector(addWithADXSolverVariable:withFloat:withBoolean:);
  methods[21].selector = @selector(useWithADXArrayRow:withBoolean:);
  methods[22].selector = @selector(invert);
  methods[23].selector = @selector(divideByAmountWithFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXSolverVariableValues_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "HASH", "Z", .constantValue.asBOOL = ADXSolverVariableValues_HASH, 0x1a, -1, -1, -1, -1 },
    { "epsilon", "F", .constantValue.asLong = 0, 0xa, -1, 25, -1, -1 },
    { "NONE", "I", .constantValue.asInt = ADXSolverVariableValues_NONE, 0x12, 26, -1, -1, -1 },
    { "SIZE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "HASH_SIZE_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keys_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "nextKeys_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "variables_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "values_", "[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "previous_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "next_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "head_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRow_", "LADXArrayRow;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCache_", "LADXCache;", .constantValue.asLong = 0, 0x14, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXArrayRow;LADXCache;", "getVariable", "I", "getVariableValue", "contains", "LADXSolverVariable;", "indexOf", "get", "toString", "addToHashMap", "LADXSolverVariable;I", "removeFromHashMap", "addVariable", "ILADXSolverVariable;F", "insertVariable", "put", "LADXSolverVariable;F", "remove", "LADXSolverVariable;Z", "add", "LADXSolverVariable;FZ", "use", "LADXArrayRow;Z", "divideByAmount", "F", &ADXSolverVariableValues_epsilon, "NONE" };
  static const J2ObjcClassInfo _ADXSolverVariableValues = { "SolverVariableValues", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x1, 24, 16, -1, -1, -1, -1, -1 };
  return &_ADXSolverVariableValues;
}

@end

void ADXSolverVariableValues_initWithADXArrayRow_withADXCache_(ADXSolverVariableValues *self, ADXArrayRow *row, ADXCache *cache) {
  NSObject_init(self);
  self->SIZE_ = 16;
  self->HASH_SIZE_ = 16;
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:self->SIZE_]);
  JreStrongAssignAndConsume(&self->nextKeys_, [IOSIntArray newArrayWithLength:self->SIZE_]);
  JreStrongAssignAndConsume(&self->variables_, [IOSIntArray newArrayWithLength:self->SIZE_]);
  JreStrongAssignAndConsume(&self->values_, [IOSFloatArray newArrayWithLength:self->SIZE_]);
  JreStrongAssignAndConsume(&self->previous_, [IOSIntArray newArrayWithLength:self->SIZE_]);
  JreStrongAssignAndConsume(&self->next_, [IOSIntArray newArrayWithLength:self->SIZE_]);
  self->mCount_ = 0;
  self->head_ = -1;
  self->mRow_ = row;
  self->mCache_ = cache;
  [self clear];
}

ADXSolverVariableValues *new_ADXSolverVariableValues_initWithADXArrayRow_withADXCache_(ADXArrayRow *row, ADXCache *cache) {
  J2OBJC_NEW_IMPL(ADXSolverVariableValues, initWithADXArrayRow_withADXCache_, row, cache)
}

ADXSolverVariableValues *create_ADXSolverVariableValues_initWithADXArrayRow_withADXCache_(ADXArrayRow *row, ADXCache *cache) {
  J2OBJC_CREATE_IMPL(ADXSolverVariableValues, initWithADXArrayRow_withADXCache_, row, cache)
}

void ADXSolverVariableValues_increaseSize(ADXSolverVariableValues *self) {
  jint size = self->SIZE_ * 2;
  JreStrongAssign(&self->variables_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->variables_, size));
  JreStrongAssign(&self->values_, JavaUtilArrays_copyOfWithFloatArray_withInt_(self->values_, size));
  JreStrongAssign(&self->previous_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->previous_, size));
  JreStrongAssign(&self->next_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->next_, size));
  JreStrongAssign(&self->nextKeys_, JavaUtilArrays_copyOfWithIntArray_withInt_(self->nextKeys_, size));
  for (jint i = self->SIZE_; i < size; i++) {
    *IOSIntArray_GetRef(nil_chk(self->variables_), i) = ADXSolverVariableValues_NONE;
    *IOSIntArray_GetRef(nil_chk(self->nextKeys_), i) = ADXSolverVariableValues_NONE;
  }
  self->SIZE_ = size;
}

void ADXSolverVariableValues_addToHashMapWithADXSolverVariable_withInt_(ADXSolverVariableValues *self, ADXSolverVariable *variable, jint index) {
  jint hash_ = JreIntMod(((ADXSolverVariable *) nil_chk(variable))->id__, self->HASH_SIZE_);
  jint key = IOSIntArray_Get(nil_chk(self->keys_), hash_);
  if (key == ADXSolverVariableValues_NONE) {
    *IOSIntArray_GetRef(self->keys_, hash_) = index;
  }
  else {
    while (IOSIntArray_Get(nil_chk(self->nextKeys_), key) != ADXSolverVariableValues_NONE) {
      key = IOSIntArray_Get(self->nextKeys_, key);
    }
    *IOSIntArray_GetRef(self->nextKeys_, key) = index;
  }
  *IOSIntArray_GetRef(nil_chk(self->nextKeys_), index) = ADXSolverVariableValues_NONE;
}

void ADXSolverVariableValues_displayHash(ADXSolverVariableValues *self) {
  for (jint i = 0; i < self->HASH_SIZE_; i++) {
    if (IOSIntArray_Get(nil_chk(self->keys_), i) != ADXSolverVariableValues_NONE) {
      NSString *str = JreStrcat("I$I$", ((jint) [self hash]), @" hash [", i, @"] => ");
      jint key = IOSIntArray_Get(nil_chk(self->keys_), i);
      jboolean done = false;
      while (!done) {
        JreStrAppend(&str, "CI", ' ', IOSIntArray_Get(nil_chk(self->variables_), key));
        if (IOSIntArray_Get(nil_chk(self->nextKeys_), key) != ADXSolverVariableValues_NONE) {
          key = IOSIntArray_Get(self->nextKeys_, key);
        }
        else {
          done = true;
        }
      }
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:str];
    }
  }
}

void ADXSolverVariableValues_removeFromHashMapWithADXSolverVariable_(ADXSolverVariableValues *self, ADXSolverVariable *variable) {
  jint hash_ = JreIntMod(((ADXSolverVariable *) nil_chk(variable))->id__, self->HASH_SIZE_);
  jint key = IOSIntArray_Get(nil_chk(self->keys_), hash_);
  if (key == ADXSolverVariableValues_NONE) {
    return;
  }
  jint id_ = variable->id__;
  if (IOSIntArray_Get(nil_chk(self->variables_), key) == id_) {
    *IOSIntArray_GetRef(self->keys_, hash_) = IOSIntArray_Get(nil_chk(self->nextKeys_), key);
    *IOSIntArray_GetRef(self->nextKeys_, key) = ADXSolverVariableValues_NONE;
  }
  else {
    while (IOSIntArray_Get(nil_chk(self->nextKeys_), key) != ADXSolverVariableValues_NONE && IOSIntArray_Get(self->variables_, IOSIntArray_Get(self->nextKeys_, key)) != id_) {
      key = IOSIntArray_Get(self->nextKeys_, key);
    }
    jint currentKey = IOSIntArray_Get(self->nextKeys_, key);
    if (currentKey != ADXSolverVariableValues_NONE && IOSIntArray_Get(self->variables_, currentKey) == id_) {
      *IOSIntArray_GetRef(self->nextKeys_, key) = IOSIntArray_Get(self->nextKeys_, currentKey);
      *IOSIntArray_GetRef(self->nextKeys_, currentKey) = ADXSolverVariableValues_NONE;
    }
  }
}

void ADXSolverVariableValues_addVariableWithInt_withADXSolverVariable_withFloat_(ADXSolverVariableValues *self, jint index, ADXSolverVariable *variable, jfloat value) {
  *IOSIntArray_GetRef(nil_chk(self->variables_), index) = ((ADXSolverVariable *) nil_chk(variable))->id__;
  *IOSFloatArray_GetRef(nil_chk(self->values_), index) = value;
  *IOSIntArray_GetRef(nil_chk(self->previous_), index) = ADXSolverVariableValues_NONE;
  *IOSIntArray_GetRef(nil_chk(self->next_), index) = ADXSolverVariableValues_NONE;
  [variable addToRowWithADXArrayRow:self->mRow_];
  variable->usageInRowCount_++;
  self->mCount_++;
}

jint ADXSolverVariableValues_findEmptySlot(ADXSolverVariableValues *self) {
  for (jint i = 0; i < self->SIZE_; i++) {
    if (IOSIntArray_Get(nil_chk(self->variables_), i) == ADXSolverVariableValues_NONE) {
      return i;
    }
  }
  return -1;
}

void ADXSolverVariableValues_insertVariableWithInt_withADXSolverVariable_withFloat_(ADXSolverVariableValues *self, jint index, ADXSolverVariable *variable, jfloat value) {
  jint availableSlot = ADXSolverVariableValues_findEmptySlot(self);
  ADXSolverVariableValues_addVariableWithInt_withADXSolverVariable_withFloat_(self, availableSlot, variable, value);
  if (index != ADXSolverVariableValues_NONE) {
    *IOSIntArray_GetRef(nil_chk(self->previous_), availableSlot) = index;
    *IOSIntArray_GetRef(nil_chk(self->next_), availableSlot) = IOSIntArray_Get(self->next_, index);
    *IOSIntArray_GetRef(self->next_, index) = availableSlot;
  }
  else {
    *IOSIntArray_GetRef(nil_chk(self->previous_), availableSlot) = ADXSolverVariableValues_NONE;
    if (self->mCount_ > 0) {
      *IOSIntArray_GetRef(nil_chk(self->next_), availableSlot) = self->head_;
      self->head_ = availableSlot;
    }
    else {
      *IOSIntArray_GetRef(nil_chk(self->next_), availableSlot) = ADXSolverVariableValues_NONE;
    }
  }
  if (IOSIntArray_Get(self->next_, availableSlot) != ADXSolverVariableValues_NONE) {
    *IOSIntArray_GetRef(self->previous_, IOSIntArray_Get(self->next_, availableSlot)) = availableSlot;
  }
  ADXSolverVariableValues_addToHashMapWithADXSolverVariable_withInt_(self, variable, availableSlot);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSolverVariableValues)
