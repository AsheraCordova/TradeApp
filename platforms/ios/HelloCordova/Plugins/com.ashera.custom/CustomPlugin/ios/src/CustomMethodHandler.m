//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\ashera-demo-projects\ashera-phonegap-demo-project\demoapp1\custom_plugins\CustomPlugin\src\main\java\com\ashera\custom\CustomMethodHandler.java
//

#include "CustomMethodHandler.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "MethodHandler.h"
#include "PluginInvoker.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/Map.h"


@implementation ASCustomMethodHandler

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCustomMethodHandler_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)handleWithNSString:(NSString *)methodName
                          withId:(id)obj
                   withASIWidget:(id<ASIWidget>)widget {
  {
    jint points;
    switch (JreIndexOfStr(methodName, (id[]){ @"pointsEarned" }, 1)) {
      case 0:
      points = 0;
      if ([JavaUtilMap_class_() isInstance:obj]) {
        id<JavaUtilMap> map = (id<JavaUtilMap>) cast_check(obj, JavaUtilMap_class_());
        JavaLangInteger *quantity = JavaLangInteger_valueOfWithInt_(0);
        @try {
          quantity = ASPluginInvoker_getIntWithId_([((id<JavaUtilMap>) nil_chk(map)) getWithId:@"noOfItems"]);
        }
        @catch (JavaLangNumberFormatException *e) {
        }
        JavaLangInteger *tradePrice = JavaLangInteger_valueOfWithInt_(0);
        @try {
          tradePrice = ASPluginInvoker_getIntWithId_([map getWithId:@"tradePrice"]);
        }
        @catch (JavaLangNumberFormatException *e) {
        }
        JavaLangInteger *memberPrice = ASPluginInvoker_getIntWithId_([map getWithId:@"memPrice"]);
        if (quantity != nil && tradePrice != nil && memberPrice != nil) {
          points = [quantity intValue] * ([tradePrice intValue] - [memberPrice intValue]);
          if (points < 0) {
            points = 0;
          }
        }
      }
      return JreStrcat("I", points);
      default:
      break;
    }
  }
  return ASMethodHandler_UNHANDLED;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(handleWithNSString:withId:withASIWidget:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "handle", "LNSString;LNSObject;LASIWidget;" };
  static const J2ObjcClassInfo _ASCustomMethodHandler = { "CustomMethodHandler", "com.ashera.custom", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_ASCustomMethodHandler;
}

@end

void ASCustomMethodHandler_init(ASCustomMethodHandler *self) {
  NSObject_init(self);
}

ASCustomMethodHandler *new_ASCustomMethodHandler_init() {
  J2OBJC_NEW_IMPL(ASCustomMethodHandler, init)
}

ASCustomMethodHandler *create_ASCustomMethodHandler_init() {
  J2OBJC_CREATE_IMPL(ASCustomMethodHandler, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCustomMethodHandler)
