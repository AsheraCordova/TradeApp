//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\state\helpers\VerticalChainReference.java
//

#include "ChainReference.h"
#include "ConstraintReference.h"
#include "ConstraintWidget.h"
#include "J2ObjC_source.h"
#include "State.h"
#include "VerticalChainReference.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"


@implementation ADXVerticalChainReference

- (instancetype)initWithADXState:(ADXState *)state {
  ADXVerticalChainReference_initWithADXState_(self, state);
  return self;
}

- (void)apply {
  ADXConstraintReference *first = nil;
  ADXConstraintReference *previous = nil;
  for (id __strong key in nil_chk(mReferences_)) {
    ADXConstraintReference *reference = JreRetainedLocalValue([((ADXState *) nil_chk(mState_HelperReference_)) constraintsWithId:key]);
    [((ADXConstraintReference *) nil_chk(reference)) clearVertical];
  }
  for (id __strong key in mReferences_) {
    ADXConstraintReference *reference = JreRetainedLocalValue([((ADXState *) nil_chk(mState_HelperReference_)) constraintsWithId:key]);
    if (first == nil) {
      first = reference;
      if (mTopToTop_ != nil) {
        [((ADXConstraintReference *) nil_chk(first)) topToTopWithId:mTopToTop_];
      }
      else if (mTopToBottom_ != nil) {
        [((ADXConstraintReference *) nil_chk(first)) topToBottomWithId:mTopToBottom_];
      }
      else {
        [((ADXConstraintReference *) nil_chk(first)) topToTopWithId:JreLoadStatic(ADXState, PARENT)];
      }
    }
    if (previous != nil) {
      [previous bottomToTopWithId:[((ADXConstraintReference *) nil_chk(reference)) getKey]];
      [reference topToBottomWithId:[previous getKey]];
    }
    previous = reference;
  }
  if (previous != nil) {
    if (mBottomToTop_ != nil) {
      [previous bottomToTopWithId:mBottomToTop_];
    }
    else if (mBottomToBottom_ != nil) {
      [previous bottomToBottomWithId:mBottomToBottom_];
    }
    else {
      [previous bottomToBottomWithId:JreLoadStatic(ADXState, PARENT)];
    }
  }
  if (first == nil) {
    return;
  }
  if (mBias_ != 0.5f) {
    [first verticalBiasWithFloat:mBias_];
  }
  switch ([mStyle_ ordinal]) {
    case ADXState_Chain_Enum_SPREAD:
    {
      [first setVerticalChainStyleWithInt:ADXConstraintWidget_CHAIN_SPREAD];
    }
    break;
    case ADXState_Chain_Enum_SPREAD_INSIDE:
    {
      [first setVerticalChainStyleWithInt:ADXConstraintWidget_CHAIN_SPREAD_INSIDE];
    }
    break;
    case ADXState_Chain_Enum_PACKED:
    {
      [first setVerticalChainStyleWithInt:ADXConstraintWidget_CHAIN_PACKED];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXState:);
  methods[1].selector = @selector(apply);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXState;" };
  static const J2ObjcClassInfo _ADXVerticalChainReference = { "VerticalChainReference", "androidx.constraintlayout.core.state.helpers", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, -1, -1, -1, -1 };
  return &_ADXVerticalChainReference;
}

@end

void ADXVerticalChainReference_initWithADXState_(ADXVerticalChainReference *self, ADXState *state) {
  ADXChainReference_initWithADXState_withADXState_Helper_(self, state, JreLoadEnum(ADXState_Helper, VERTICAL_CHAIN));
}

ADXVerticalChainReference *new_ADXVerticalChainReference_initWithADXState_(ADXState *state) {
  J2OBJC_NEW_IMPL(ADXVerticalChainReference, initWithADXState_, state)
}

ADXVerticalChainReference *create_ADXVerticalChainReference_initWithADXState_(ADXState *state) {
  J2OBJC_CREATE_IMPL(ADXVerticalChainReference, initWithADXState_, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXVerticalChainReference)
