//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Pools.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Pools")
#ifdef RESTRICT_Pools
#define INCLUDE_ALL_Pools 0
#else
#define INCLUDE_ALL_Pools 1
#endif
#undef RESTRICT_Pools
#ifdef INCLUDE_ADPools_SynchronizedPool
#define INCLUDE_ADPools_SimplePool 1
#endif
#ifdef INCLUDE_ADPools_SimplePool
#define INCLUDE_ADPools_Pool 1
#endif

#if !defined (ADPools_) && (INCLUDE_ALL_Pools || defined(INCLUDE_ADPools))
#define ADPools_

/*!
 @brief Helper class for crating pools of objects.An example use looks like this: 
 @code

  public class MyPooledClass {
      private static final SynchronizedPool<MyPooledClass> sPool =
              new SynchronizedPool<MyPooledClass>(10);
      public static MyPooledClass obtain() {
          MyPooledClass instance = sPool.acquire();
          return (instance !
 = null) ? instance : new MyPooledClass();
      }
      public void recycle() {
           // Clear state if needed.
           sPool.release(this);
      }
      . . .
  } 
  
@endcode
 */
@interface ADPools : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(ADPools)

J2OBJC_TYPE_LITERAL_HEADER(ADPools)

@compatibility_alias RAndroidUtilPools ADPools;

#endif

#if !defined (ADPools_Pool_) && (INCLUDE_ALL_Pools || defined(INCLUDE_ADPools_Pool))
#define ADPools_Pool_

/*!
 @brief Interface for managing a pool of objects.
 */
@protocol ADPools_Pool < JavaObject >

/*!
 @return An instance from the pool if such, null otherwise.
 */
- (id)acquire;

/*!
 @brief Release an instance to the pool.
 @param instance The instance to release.
 @return Whether the instance was put in the pool.
 @throw IllegalStateExceptionIf the instance is already in the pool.
 */
- (jboolean)release__WithId:(id)instance;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPools_Pool)

J2OBJC_TYPE_LITERAL_HEADER(ADPools_Pool)

#endif

#if !defined (ADPools_SimplePool_) && (INCLUDE_ALL_Pools || defined(INCLUDE_ADPools_SimplePool))
#define ADPools_SimplePool_

/*!
 @brief Simple (non-synchronized) pool of objects.
 */
@interface ADPools_SimplePool : NSObject < ADPools_Pool >

#pragma mark Public

/*!
 @brief Creates a new instance.
 @param maxPoolSize The max pool size.
 @throw IllegalArgumentExceptionIf the max pool size is less than zero.
 */
- (instancetype)initWithInt:(jint)maxPoolSize;

- (id)acquire;

- (jboolean)release__WithId:(id)instance;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPools_SimplePool)

FOUNDATION_EXPORT void ADPools_SimplePool_initWithInt_(ADPools_SimplePool *self, jint maxPoolSize);

FOUNDATION_EXPORT ADPools_SimplePool *new_ADPools_SimplePool_initWithInt_(jint maxPoolSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPools_SimplePool *create_ADPools_SimplePool_initWithInt_(jint maxPoolSize);

J2OBJC_TYPE_LITERAL_HEADER(ADPools_SimplePool)

#endif

#if !defined (ADPools_SynchronizedPool_) && (INCLUDE_ALL_Pools || defined(INCLUDE_ADPools_SynchronizedPool))
#define ADPools_SynchronizedPool_

/*!
 @brief Synchronized) pool of objects.
 */
@interface ADPools_SynchronizedPool : ADPools_SimplePool

#pragma mark Public

/*!
 @brief Creates a new instance.
 @param maxPoolSize The max pool size.
 @throw IllegalArgumentExceptionIf the max pool size is less than zero.
 */
- (instancetype)initWithInt:(jint)maxPoolSize;

- (id)acquire;

- (jboolean)release__WithId:(id)element;

@end

J2OBJC_EMPTY_STATIC_INIT(ADPools_SynchronizedPool)

FOUNDATION_EXPORT void ADPools_SynchronizedPool_initWithInt_(ADPools_SynchronizedPool *self, jint maxPoolSize);

FOUNDATION_EXPORT ADPools_SynchronizedPool *new_ADPools_SynchronizedPool_initWithInt_(jint maxPoolSize) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADPools_SynchronizedPool *create_ADPools_SynchronizedPool_initWithInt_(jint maxPoolSize);

J2OBJC_TYPE_LITERAL_HEADER(ADPools_SynchronizedPool)

#endif

#pragma pop_macro("INCLUDE_ALL_Pools")
