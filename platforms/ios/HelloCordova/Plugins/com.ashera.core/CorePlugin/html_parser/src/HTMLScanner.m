//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\HTMLScanner.java
//

#include "HTMLScanner.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ScanHandler.h"
#include "java/io/BufferedReader.h"
#include "java/io/PushbackReader.h"
#include "java/io/Reader.h"
#include "java/lang/Character.h"
#include "java/lang/Error.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"

@class JavaIoPushbackReader;


@interface TSHTMLScanner () {
 @public
  NSString *thePublicid_;
  NSString *theSystemid_;
  jint theLastLine_;
  jint theLastColumn_;
  jint theCurrentLine_;
  jint theCurrentColumn_;
}

- (void)unreadWithJavaIoPushbackReader:(JavaIoPushbackReader *)r
                               withInt:(jint)c;

/*!
 @brief Mark the current scan position as a "point of interest" - start of a tag,
  cdata, processing instruction etc.
 */
- (void)mark;

- (void)saveWithInt:(jint)ch
  withTSScanHandler:(id<TSScanHandler>)h;

+ (NSString *)nicecharWithInt:(jint)inArg;

@end

J2OBJC_FIELD_SETTER(TSHTMLScanner, thePublicid_, NSString *)
J2OBJC_FIELD_SETTER(TSHTMLScanner, theSystemid_, NSString *)

inline jint TSHTMLScanner_get_S_ANAME(void);
#define TSHTMLScanner_S_ANAME 1
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_ANAME, jint)

inline jint TSHTMLScanner_get_S_APOS(void);
#define TSHTMLScanner_S_APOS 2
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_APOS, jint)

inline jint TSHTMLScanner_get_S_AVAL(void);
#define TSHTMLScanner_S_AVAL 3
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_AVAL, jint)

inline jint TSHTMLScanner_get_S_BB(void);
#define TSHTMLScanner_S_BB 4
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_BB, jint)

inline jint TSHTMLScanner_get_S_BBC(void);
#define TSHTMLScanner_S_BBC 5
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_BBC, jint)

inline jint TSHTMLScanner_get_S_BBCD(void);
#define TSHTMLScanner_S_BBCD 6
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_BBCD, jint)

inline jint TSHTMLScanner_get_S_BBCDA(void);
#define TSHTMLScanner_S_BBCDA 7
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_BBCDA, jint)

inline jint TSHTMLScanner_get_S_BBCDAT(void);
#define TSHTMLScanner_S_BBCDAT 8
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_BBCDAT, jint)

inline jint TSHTMLScanner_get_S_BBCDATA(void);
#define TSHTMLScanner_S_BBCDATA 9
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_BBCDATA, jint)

inline jint TSHTMLScanner_get_S_CDATA(void);
#define TSHTMLScanner_S_CDATA 10
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_CDATA, jint)

inline jint TSHTMLScanner_get_S_CDATA2(void);
#define TSHTMLScanner_S_CDATA2 11
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_CDATA2, jint)

inline jint TSHTMLScanner_get_S_CDSECT(void);
#define TSHTMLScanner_S_CDSECT 12
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_CDSECT, jint)

inline jint TSHTMLScanner_get_S_CDSECT1(void);
#define TSHTMLScanner_S_CDSECT1 13
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_CDSECT1, jint)

inline jint TSHTMLScanner_get_S_CDSECT2(void);
#define TSHTMLScanner_S_CDSECT2 14
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_CDSECT2, jint)

inline jint TSHTMLScanner_get_S_COM(void);
#define TSHTMLScanner_S_COM 15
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_COM, jint)

inline jint TSHTMLScanner_get_S_COM2(void);
#define TSHTMLScanner_S_COM2 16
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_COM2, jint)

inline jint TSHTMLScanner_get_S_COM3(void);
#define TSHTMLScanner_S_COM3 17
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_COM3, jint)

inline jint TSHTMLScanner_get_S_COM4(void);
#define TSHTMLScanner_S_COM4 18
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_COM4, jint)

inline jint TSHTMLScanner_get_S_DECL(void);
#define TSHTMLScanner_S_DECL 19
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_DECL, jint)

inline jint TSHTMLScanner_get_S_DECL2(void);
#define TSHTMLScanner_S_DECL2 20
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_DECL2, jint)

inline jint TSHTMLScanner_get_S_DONE(void);
#define TSHTMLScanner_S_DONE 21
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_DONE, jint)

inline jint TSHTMLScanner_get_S_EMPTYTAG(void);
#define TSHTMLScanner_S_EMPTYTAG 22
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_EMPTYTAG, jint)

inline jint TSHTMLScanner_get_S_ENT(void);
#define TSHTMLScanner_S_ENT 23
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_ENT, jint)

inline jint TSHTMLScanner_get_S_EQ(void);
#define TSHTMLScanner_S_EQ 24
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_EQ, jint)

inline jint TSHTMLScanner_get_S_ETAG(void);
#define TSHTMLScanner_S_ETAG 25
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_ETAG, jint)

inline jint TSHTMLScanner_get_S_GI(void);
#define TSHTMLScanner_S_GI 26
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_GI, jint)

inline jint TSHTMLScanner_get_S_NCR(void);
#define TSHTMLScanner_S_NCR 27
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_NCR, jint)

inline jint TSHTMLScanner_get_S_PCDATA(void);
#define TSHTMLScanner_S_PCDATA 28
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_PCDATA, jint)

inline jint TSHTMLScanner_get_S_PI(void);
#define TSHTMLScanner_S_PI 29
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_PI, jint)

inline jint TSHTMLScanner_get_S_PITARGET(void);
#define TSHTMLScanner_S_PITARGET 30
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_PITARGET, jint)

inline jint TSHTMLScanner_get_S_QUOT(void);
#define TSHTMLScanner_S_QUOT 31
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_QUOT, jint)

inline jint TSHTMLScanner_get_S_STAGC(void);
#define TSHTMLScanner_S_STAGC 32
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_STAGC, jint)

inline jint TSHTMLScanner_get_S_TAG(void);
#define TSHTMLScanner_S_TAG 33
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_TAG, jint)

inline jint TSHTMLScanner_get_S_TAGWS(void);
#define TSHTMLScanner_S_TAGWS 34
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_TAGWS, jint)

inline jint TSHTMLScanner_get_S_XNCR(void);
#define TSHTMLScanner_S_XNCR 35
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, S_XNCR, jint)

inline jint TSHTMLScanner_get_A_ADUP(void);
#define TSHTMLScanner_A_ADUP 1
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ADUP, jint)

inline jint TSHTMLScanner_get_A_ADUP_SAVE(void);
#define TSHTMLScanner_A_ADUP_SAVE 2
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ADUP_SAVE, jint)

inline jint TSHTMLScanner_get_A_ADUP_STAGC(void);
#define TSHTMLScanner_A_ADUP_STAGC 3
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ADUP_STAGC, jint)

inline jint TSHTMLScanner_get_A_ANAME(void);
#define TSHTMLScanner_A_ANAME 4
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ANAME, jint)

inline jint TSHTMLScanner_get_A_ANAME_ADUP(void);
#define TSHTMLScanner_A_ANAME_ADUP 5
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ANAME_ADUP, jint)

inline jint TSHTMLScanner_get_A_ANAME_ADUP_STAGC(void);
#define TSHTMLScanner_A_ANAME_ADUP_STAGC 6
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ANAME_ADUP_STAGC, jint)

inline jint TSHTMLScanner_get_A_AVAL(void);
#define TSHTMLScanner_A_AVAL 7
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_AVAL, jint)

inline jint TSHTMLScanner_get_A_AVAL_STAGC(void);
#define TSHTMLScanner_A_AVAL_STAGC 8
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_AVAL_STAGC, jint)

inline jint TSHTMLScanner_get_A_CDATA(void);
#define TSHTMLScanner_A_CDATA 9
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_CDATA, jint)

inline jint TSHTMLScanner_get_A_CMNT(void);
#define TSHTMLScanner_A_CMNT 10
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_CMNT, jint)

inline jint TSHTMLScanner_get_A_DECL(void);
#define TSHTMLScanner_A_DECL 11
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_DECL, jint)

inline jint TSHTMLScanner_get_A_EMPTYTAG(void);
#define TSHTMLScanner_A_EMPTYTAG 12
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_EMPTYTAG, jint)

inline jint TSHTMLScanner_get_A_ENTITY(void);
#define TSHTMLScanner_A_ENTITY 13
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ENTITY, jint)

inline jint TSHTMLScanner_get_A_ENTITY_START(void);
#define TSHTMLScanner_A_ENTITY_START 14
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ENTITY_START, jint)

inline jint TSHTMLScanner_get_A_ETAG(void);
#define TSHTMLScanner_A_ETAG 15
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_ETAG, jint)

inline jint TSHTMLScanner_get_A_GI(void);
#define TSHTMLScanner_A_GI 16
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_GI, jint)

inline jint TSHTMLScanner_get_A_GI_STAGC(void);
#define TSHTMLScanner_A_GI_STAGC 17
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_GI_STAGC, jint)

inline jint TSHTMLScanner_get_A_LT(void);
#define TSHTMLScanner_A_LT 18
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_LT, jint)

inline jint TSHTMLScanner_get_A_LT_PCDATA(void);
#define TSHTMLScanner_A_LT_PCDATA 19
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_LT_PCDATA, jint)

inline jint TSHTMLScanner_get_A_MINUS(void);
#define TSHTMLScanner_A_MINUS 20
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_MINUS, jint)

inline jint TSHTMLScanner_get_A_MINUS2(void);
#define TSHTMLScanner_A_MINUS2 21
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_MINUS2, jint)

inline jint TSHTMLScanner_get_A_MINUS3(void);
#define TSHTMLScanner_A_MINUS3 22
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_MINUS3, jint)

inline jint TSHTMLScanner_get_A_PCDATA(void);
#define TSHTMLScanner_A_PCDATA 23
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_PCDATA, jint)

inline jint TSHTMLScanner_get_A_PI(void);
#define TSHTMLScanner_A_PI 24
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_PI, jint)

inline jint TSHTMLScanner_get_A_PITARGET(void);
#define TSHTMLScanner_A_PITARGET 25
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_PITARGET, jint)

inline jint TSHTMLScanner_get_A_PITARGET_PI(void);
#define TSHTMLScanner_A_PITARGET_PI 26
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_PITARGET_PI, jint)

inline jint TSHTMLScanner_get_A_SAVE(void);
#define TSHTMLScanner_A_SAVE 27
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_SAVE, jint)

inline jint TSHTMLScanner_get_A_SKIP(void);
#define TSHTMLScanner_A_SKIP 28
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_SKIP, jint)

inline jint TSHTMLScanner_get_A_SP(void);
#define TSHTMLScanner_A_SP 29
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_SP, jint)

inline jint TSHTMLScanner_get_A_STAGC(void);
#define TSHTMLScanner_A_STAGC 30
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_STAGC, jint)

inline jint TSHTMLScanner_get_A_UNGET(void);
#define TSHTMLScanner_A_UNGET 31
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_UNGET, jint)

inline jint TSHTMLScanner_get_A_UNSAVE_PCDATA(void);
#define TSHTMLScanner_A_UNSAVE_PCDATA 32
J2OBJC_STATIC_FIELD_CONSTANT(TSHTMLScanner, A_UNSAVE_PCDATA, jint)

inline IOSIntArray *TSHTMLScanner_get_statetable(void);
inline IOSIntArray *TSHTMLScanner_set_statetable(IOSIntArray *value);
static IOSIntArray *TSHTMLScanner_statetable;
J2OBJC_STATIC_FIELD_OBJ(TSHTMLScanner, statetable, IOSIntArray *)

inline IOSObjectArray *TSHTMLScanner_get_debug_actionnames(void);
static IOSObjectArray *TSHTMLScanner_debug_actionnames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSHTMLScanner, debug_actionnames, IOSObjectArray *)

inline IOSObjectArray *TSHTMLScanner_get_debug_statenames(void);
static IOSObjectArray *TSHTMLScanner_debug_statenames;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSHTMLScanner, debug_statenames, IOSObjectArray *)

__attribute__((unused)) static void TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(TSHTMLScanner *self, JavaIoPushbackReader *r, jint c);

__attribute__((unused)) static void TSHTMLScanner_mark(TSHTMLScanner *self);

__attribute__((unused)) static void TSHTMLScanner_saveWithInt_withTSScanHandler_(TSHTMLScanner *self, jint ch, id<TSScanHandler> h);

__attribute__((unused)) static NSString *TSHTMLScanner_nicecharWithInt_(jint inArg);

J2OBJC_INITIALIZED_DEFN(TSHTMLScanner)

IOSObjectArray *TSHTMLScanner_statetableIndex;
jint TSHTMLScanner_statetableIndexMaxChar;

@implementation TSHTMLScanner

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TSHTMLScanner_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)unreadWithJavaIoPushbackReader:(JavaIoPushbackReader *)r
                               withInt:(jint)c {
  TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(self, r, c);
}

- (jint)getLineNumber {
  return theLastLine_;
}

- (jint)getColumnNumber {
  return theLastColumn_;
}

- (NSString *)getPublicId {
  return thePublicid_;
}

- (NSString *)getSystemId {
  return theSystemid_;
}

- (void)resetDocumentLocatorWithNSString:(NSString *)publicid
                            withNSString:(NSString *)systemid {
  JreStrongAssign(&thePublicid_, publicid);
  JreStrongAssign(&theSystemid_, systemid);
  theLastLine_ = theLastColumn_ = theCurrentLine_ = theCurrentColumn_ = 0;
}

- (void)scanWithJavaIoReader:(JavaIoReader *)r0
           withTSScanHandler:(id<TSScanHandler>)h {
  theState_ = TSHTMLScanner_S_PCDATA;
  JavaIoPushbackReader *r;
  if ([r0 isKindOfClass:[JavaIoBufferedReader class]]) {
    r = create_JavaIoPushbackReader_initWithJavaIoReader_withInt_(r0, 5);
  }
  else {
    r = create_JavaIoPushbackReader_initWithJavaIoReader_withInt_(create_JavaIoBufferedReader_initWithJavaIoReader_(r0), 5);
  }
  jint firstChar = [r read];
  if (firstChar != 0xfeff) TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(self, r, firstChar);
  while (theState_ != TSHTMLScanner_S_DONE) {
    jint ch = [r read];
    if (ch >= (jint) 0x80 && ch <= (jint) 0x9F) ch = IOSIntArray_Get(nil_chk(theWinMap_), ch - (jint) 0x80);
    if (ch == 0x000d) {
      ch = [r read];
      if (ch != 0x000a) {
        TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(self, r, ch);
        ch = 0x000a;
      }
    }
    if (ch == 0x000a) {
      theCurrentLine_++;
      theCurrentColumn_ = 0;
    }
    else {
      theCurrentColumn_++;
    }
    if (!(ch >= (jint) 0x20 || ch == 0x000a || ch == 0x0009 || ch == -1)) continue;
    jint adjCh = (ch >= -1 && ch < TSHTMLScanner_statetableIndexMaxChar) ? ch : -2;
    jint statetableRow = IOSShortArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(TSHTMLScanner_statetableIndex), theState_)), adjCh + 2);
    jint action = 0;
    if (statetableRow != -1) {
      action = IOSIntArray_Get(nil_chk(TSHTMLScanner_statetable), statetableRow + 2);
      theNextState_ = IOSIntArray_Get(TSHTMLScanner_statetable, statetableRow + 3);
    }
    {
      jchar ch1;
      jint ent;
      switch (action) {
        case 0:
        @throw create_JavaLangError_initWithNSString_(JreStrcat("$$$$", @"HTMLScanner can't cope with ", JavaLangInteger_toStringWithInt_(ch), @" in state ", JavaLangInteger_toStringWithInt_(theState_)));
        case TSHTMLScanner_A_ADUP:
        [((id<TSScanHandler>) nil_chk(h)) adupWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_ADUP_SAVE:
        [((id<TSScanHandler>) nil_chk(h)) adupWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
        break;
        case TSHTMLScanner_A_ADUP_STAGC:
        [((id<TSScanHandler>) nil_chk(h)) adupWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [h stagcWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_ANAME:
        [((id<TSScanHandler>) nil_chk(h)) anameWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_ANAME_ADUP:
        [((id<TSScanHandler>) nil_chk(h)) anameWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [h adupWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_ANAME_ADUP_STAGC:
        [((id<TSScanHandler>) nil_chk(h)) anameWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [h adupWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        [h stagcWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_AVAL:
        [((id<TSScanHandler>) nil_chk(h)) avalWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_AVAL_STAGC:
        [((id<TSScanHandler>) nil_chk(h)) avalWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [h stagcWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_CDATA:
        TSHTMLScanner_mark(self);
        if (theSize_ > 1) theSize_ -= 2;
        [((id<TSScanHandler>) nil_chk(h)) pcdataWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_ENTITY_START:
        [((id<TSScanHandler>) nil_chk(h)) pcdataWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
        break;
        case TSHTMLScanner_A_ENTITY:
        TSHTMLScanner_mark(self);
        ch1 = (jchar) ch;
        if (theState_ == TSHTMLScanner_S_ENT && ch1 == '#') {
          theNextState_ = TSHTMLScanner_S_NCR;
          TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
          break;
        }
        else if (theState_ == TSHTMLScanner_S_NCR && (ch1 == 'x' || ch1 == 'X')) {
          theNextState_ = TSHTMLScanner_S_XNCR;
          TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
          break;
        }
        else if (theState_ == TSHTMLScanner_S_ENT && JavaLangCharacter_isLetterOrDigitWithChar_(ch1)) {
          TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
          break;
        }
        else if (theState_ == TSHTMLScanner_S_NCR && JavaLangCharacter_isDigitWithChar_(ch1)) {
          TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
          break;
        }
        else if (theState_ == TSHTMLScanner_S_XNCR && (JavaLangCharacter_isDigitWithChar_(ch1) || [@"abcdefABCDEF" java_indexOf:ch1] != -1)) {
          TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
          break;
        }
        [((id<TSScanHandler>) nil_chk(h)) entityWithCharArray:theOutputBuffer_ withInt:1 withInt:theSize_ - 1];
        ent = [h getEntity];
        if (ent != 0) {
          theSize_ = 0;
          if (ent >= (jint) 0x80 && ent <= (jint) 0x9F) {
            ent = IOSIntArray_Get(nil_chk(theWinMap_), ent - (jint) 0x80);
          }
          if (ent < (jint) 0x20) {
            ent = (jint) 0x20;
          }
          else if (ent >= (jint) 0xD800 && ent <= (jint) 0xDFFF) {
            ent = 0;
          }
          else if (ent <= (jint) 0xFFFF) {
            TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ent, h);
          }
          else {
            ent -= (jint) 0x10000;
            TSHTMLScanner_saveWithInt_withTSScanHandler_(self, (JreRShift32(ent, 10)) + (jint) 0xD800, h);
            TSHTMLScanner_saveWithInt_withTSScanHandler_(self, (ent & (jint) 0x3FF) + (jint) 0xDC00, h);
          }
          if (ch != ';') {
            TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(self, r, ch);
            theCurrentColumn_--;
          }
        }
        else {
          TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(self, r, ch);
          theCurrentColumn_--;
        }
        theNextState_ = TSHTMLScanner_S_PCDATA;
        break;
        case TSHTMLScanner_A_ETAG:
        [((id<TSScanHandler>) nil_chk(h)) etagWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_DECL:
        [((id<TSScanHandler>) nil_chk(h)) declWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_GI:
        [((id<TSScanHandler>) nil_chk(h)) giWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_GI_STAGC:
        [((id<TSScanHandler>) nil_chk(h)) giWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [h stagcWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_LT:
        TSHTMLScanner_mark(self);
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, '<', h);
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
        break;
        case TSHTMLScanner_A_LT_PCDATA:
        TSHTMLScanner_mark(self);
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, '<', h);
        [((id<TSScanHandler>) nil_chk(h)) pcdataWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_PCDATA:
        TSHTMLScanner_mark(self);
        [((id<TSScanHandler>) nil_chk(h)) pcdataWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_CMNT:
        TSHTMLScanner_mark(self);
        [((id<TSScanHandler>) nil_chk(h)) cmntWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_MINUS3:
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, '-', h);
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ' ', h);
        break;
        case TSHTMLScanner_A_MINUS2:
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, '-', h);
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ' ', h);
        case TSHTMLScanner_A_MINUS:
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, '-', h);
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
        break;
        case TSHTMLScanner_A_PI:
        TSHTMLScanner_mark(self);
        [((id<TSScanHandler>) nil_chk(h)) piWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_PITARGET:
        [((id<TSScanHandler>) nil_chk(h)) pitargetWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_PITARGET_PI:
        [((id<TSScanHandler>) nil_chk(h)) pitargetWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [h piWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_SAVE:
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
        break;
        case TSHTMLScanner_A_SKIP:
        break;
        case TSHTMLScanner_A_SP:
        TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ' ', h);
        break;
        case TSHTMLScanner_A_STAGC:
        [((id<TSScanHandler>) nil_chk(h)) stagcWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        case TSHTMLScanner_A_EMPTYTAG:
        TSHTMLScanner_mark(self);
        if (theSize_ > 0) [((id<TSScanHandler>) nil_chk(h)) giWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        [((id<TSScanHandler>) nil_chk(h)) stageWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        break;
        case TSHTMLScanner_A_UNGET:
        TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(self, r, ch);
        theCurrentColumn_--;
        break;
        case TSHTMLScanner_A_UNSAVE_PCDATA:
        if (theSize_ > 0) theSize_--;
        [((id<TSScanHandler>) nil_chk(h)) pcdataWithCharArray:theOutputBuffer_ withInt:0 withInt:theSize_];
        theSize_ = 0;
        break;
        default:
        @throw create_JavaLangError_initWithNSString_(JreStrcat("$I", @"Can't process state ", action));
      }
    }
    theState_ = theNextState_;
  }
  [((id<TSScanHandler>) nil_chk(h)) eofWithCharArray:theOutputBuffer_ withInt:0 withInt:0];
}

- (void)mark {
  TSHTMLScanner_mark(self);
}

- (void)startCDATA {
  theNextState_ = TSHTMLScanner_S_CDATA;
}

- (void)saveWithInt:(jint)ch
  withTSScanHandler:(id<TSScanHandler>)h {
  TSHTMLScanner_saveWithInt_withTSScanHandler_(self, ch, h);
}

+ (NSString *)nicecharWithInt:(jint)inArg {
  return TSHTMLScanner_nicecharWithInt_(inArg);
}

- (void)dealloc {
  RELEASE_(thePublicid_);
  RELEASE_(theSystemid_);
  RELEASE_(theOutputBuffer_);
  RELEASE_(theWinMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 0, 1, 2, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 7, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, 7, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unreadWithJavaIoPushbackReader:withInt:);
  methods[2].selector = @selector(getLineNumber);
  methods[3].selector = @selector(getColumnNumber);
  methods[4].selector = @selector(getPublicId);
  methods[5].selector = @selector(getSystemId);
  methods[6].selector = @selector(resetDocumentLocatorWithNSString:withNSString:);
  methods[7].selector = @selector(scanWithJavaIoReader:withTSScanHandler:);
  methods[8].selector = @selector(mark);
  methods[9].selector = @selector(startCDATA);
  methods[10].selector = @selector(saveWithInt:withTSScanHandler:);
  methods[11].selector = @selector(nicecharWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "S_ANAME", "I", .constantValue.asInt = TSHTMLScanner_S_ANAME, 0x1a, -1, -1, -1, -1 },
    { "S_APOS", "I", .constantValue.asInt = TSHTMLScanner_S_APOS, 0x1a, -1, -1, -1, -1 },
    { "S_AVAL", "I", .constantValue.asInt = TSHTMLScanner_S_AVAL, 0x1a, -1, -1, -1, -1 },
    { "S_BB", "I", .constantValue.asInt = TSHTMLScanner_S_BB, 0x1a, -1, -1, -1, -1 },
    { "S_BBC", "I", .constantValue.asInt = TSHTMLScanner_S_BBC, 0x1a, -1, -1, -1, -1 },
    { "S_BBCD", "I", .constantValue.asInt = TSHTMLScanner_S_BBCD, 0x1a, -1, -1, -1, -1 },
    { "S_BBCDA", "I", .constantValue.asInt = TSHTMLScanner_S_BBCDA, 0x1a, -1, -1, -1, -1 },
    { "S_BBCDAT", "I", .constantValue.asInt = TSHTMLScanner_S_BBCDAT, 0x1a, -1, -1, -1, -1 },
    { "S_BBCDATA", "I", .constantValue.asInt = TSHTMLScanner_S_BBCDATA, 0x1a, -1, -1, -1, -1 },
    { "S_CDATA", "I", .constantValue.asInt = TSHTMLScanner_S_CDATA, 0x1a, -1, -1, -1, -1 },
    { "S_CDATA2", "I", .constantValue.asInt = TSHTMLScanner_S_CDATA2, 0x1a, -1, -1, -1, -1 },
    { "S_CDSECT", "I", .constantValue.asInt = TSHTMLScanner_S_CDSECT, 0x1a, -1, -1, -1, -1 },
    { "S_CDSECT1", "I", .constantValue.asInt = TSHTMLScanner_S_CDSECT1, 0x1a, -1, -1, -1, -1 },
    { "S_CDSECT2", "I", .constantValue.asInt = TSHTMLScanner_S_CDSECT2, 0x1a, -1, -1, -1, -1 },
    { "S_COM", "I", .constantValue.asInt = TSHTMLScanner_S_COM, 0x1a, -1, -1, -1, -1 },
    { "S_COM2", "I", .constantValue.asInt = TSHTMLScanner_S_COM2, 0x1a, -1, -1, -1, -1 },
    { "S_COM3", "I", .constantValue.asInt = TSHTMLScanner_S_COM3, 0x1a, -1, -1, -1, -1 },
    { "S_COM4", "I", .constantValue.asInt = TSHTMLScanner_S_COM4, 0x1a, -1, -1, -1, -1 },
    { "S_DECL", "I", .constantValue.asInt = TSHTMLScanner_S_DECL, 0x1a, -1, -1, -1, -1 },
    { "S_DECL2", "I", .constantValue.asInt = TSHTMLScanner_S_DECL2, 0x1a, -1, -1, -1, -1 },
    { "S_DONE", "I", .constantValue.asInt = TSHTMLScanner_S_DONE, 0x1a, -1, -1, -1, -1 },
    { "S_EMPTYTAG", "I", .constantValue.asInt = TSHTMLScanner_S_EMPTYTAG, 0x1a, -1, -1, -1, -1 },
    { "S_ENT", "I", .constantValue.asInt = TSHTMLScanner_S_ENT, 0x1a, -1, -1, -1, -1 },
    { "S_EQ", "I", .constantValue.asInt = TSHTMLScanner_S_EQ, 0x1a, -1, -1, -1, -1 },
    { "S_ETAG", "I", .constantValue.asInt = TSHTMLScanner_S_ETAG, 0x1a, -1, -1, -1, -1 },
    { "S_GI", "I", .constantValue.asInt = TSHTMLScanner_S_GI, 0x1a, -1, -1, -1, -1 },
    { "S_NCR", "I", .constantValue.asInt = TSHTMLScanner_S_NCR, 0x1a, -1, -1, -1, -1 },
    { "S_PCDATA", "I", .constantValue.asInt = TSHTMLScanner_S_PCDATA, 0x1a, -1, -1, -1, -1 },
    { "S_PI", "I", .constantValue.asInt = TSHTMLScanner_S_PI, 0x1a, -1, -1, -1, -1 },
    { "S_PITARGET", "I", .constantValue.asInt = TSHTMLScanner_S_PITARGET, 0x1a, -1, -1, -1, -1 },
    { "S_QUOT", "I", .constantValue.asInt = TSHTMLScanner_S_QUOT, 0x1a, -1, -1, -1, -1 },
    { "S_STAGC", "I", .constantValue.asInt = TSHTMLScanner_S_STAGC, 0x1a, -1, -1, -1, -1 },
    { "S_TAG", "I", .constantValue.asInt = TSHTMLScanner_S_TAG, 0x1a, -1, -1, -1, -1 },
    { "S_TAGWS", "I", .constantValue.asInt = TSHTMLScanner_S_TAGWS, 0x1a, -1, -1, -1, -1 },
    { "S_XNCR", "I", .constantValue.asInt = TSHTMLScanner_S_XNCR, 0x1a, -1, -1, -1, -1 },
    { "A_ADUP", "I", .constantValue.asInt = TSHTMLScanner_A_ADUP, 0x1a, -1, -1, -1, -1 },
    { "A_ADUP_SAVE", "I", .constantValue.asInt = TSHTMLScanner_A_ADUP_SAVE, 0x1a, -1, -1, -1, -1 },
    { "A_ADUP_STAGC", "I", .constantValue.asInt = TSHTMLScanner_A_ADUP_STAGC, 0x1a, -1, -1, -1, -1 },
    { "A_ANAME", "I", .constantValue.asInt = TSHTMLScanner_A_ANAME, 0x1a, -1, -1, -1, -1 },
    { "A_ANAME_ADUP", "I", .constantValue.asInt = TSHTMLScanner_A_ANAME_ADUP, 0x1a, -1, -1, -1, -1 },
    { "A_ANAME_ADUP_STAGC", "I", .constantValue.asInt = TSHTMLScanner_A_ANAME_ADUP_STAGC, 0x1a, -1, -1, -1, -1 },
    { "A_AVAL", "I", .constantValue.asInt = TSHTMLScanner_A_AVAL, 0x1a, -1, -1, -1, -1 },
    { "A_AVAL_STAGC", "I", .constantValue.asInt = TSHTMLScanner_A_AVAL_STAGC, 0x1a, -1, -1, -1, -1 },
    { "A_CDATA", "I", .constantValue.asInt = TSHTMLScanner_A_CDATA, 0x1a, -1, -1, -1, -1 },
    { "A_CMNT", "I", .constantValue.asInt = TSHTMLScanner_A_CMNT, 0x1a, -1, -1, -1, -1 },
    { "A_DECL", "I", .constantValue.asInt = TSHTMLScanner_A_DECL, 0x1a, -1, -1, -1, -1 },
    { "A_EMPTYTAG", "I", .constantValue.asInt = TSHTMLScanner_A_EMPTYTAG, 0x1a, -1, -1, -1, -1 },
    { "A_ENTITY", "I", .constantValue.asInt = TSHTMLScanner_A_ENTITY, 0x1a, -1, -1, -1, -1 },
    { "A_ENTITY_START", "I", .constantValue.asInt = TSHTMLScanner_A_ENTITY_START, 0x1a, -1, -1, -1, -1 },
    { "A_ETAG", "I", .constantValue.asInt = TSHTMLScanner_A_ETAG, 0x1a, -1, -1, -1, -1 },
    { "A_GI", "I", .constantValue.asInt = TSHTMLScanner_A_GI, 0x1a, -1, -1, -1, -1 },
    { "A_GI_STAGC", "I", .constantValue.asInt = TSHTMLScanner_A_GI_STAGC, 0x1a, -1, -1, -1, -1 },
    { "A_LT", "I", .constantValue.asInt = TSHTMLScanner_A_LT, 0x1a, -1, -1, -1, -1 },
    { "A_LT_PCDATA", "I", .constantValue.asInt = TSHTMLScanner_A_LT_PCDATA, 0x1a, -1, -1, -1, -1 },
    { "A_MINUS", "I", .constantValue.asInt = TSHTMLScanner_A_MINUS, 0x1a, -1, -1, -1, -1 },
    { "A_MINUS2", "I", .constantValue.asInt = TSHTMLScanner_A_MINUS2, 0x1a, -1, -1, -1, -1 },
    { "A_MINUS3", "I", .constantValue.asInt = TSHTMLScanner_A_MINUS3, 0x1a, -1, -1, -1, -1 },
    { "A_PCDATA", "I", .constantValue.asInt = TSHTMLScanner_A_PCDATA, 0x1a, -1, -1, -1, -1 },
    { "A_PI", "I", .constantValue.asInt = TSHTMLScanner_A_PI, 0x1a, -1, -1, -1, -1 },
    { "A_PITARGET", "I", .constantValue.asInt = TSHTMLScanner_A_PITARGET, 0x1a, -1, -1, -1, -1 },
    { "A_PITARGET_PI", "I", .constantValue.asInt = TSHTMLScanner_A_PITARGET_PI, 0x1a, -1, -1, -1, -1 },
    { "A_SAVE", "I", .constantValue.asInt = TSHTMLScanner_A_SAVE, 0x1a, -1, -1, -1, -1 },
    { "A_SKIP", "I", .constantValue.asInt = TSHTMLScanner_A_SKIP, 0x1a, -1, -1, -1, -1 },
    { "A_SP", "I", .constantValue.asInt = TSHTMLScanner_A_SP, 0x1a, -1, -1, -1, -1 },
    { "A_STAGC", "I", .constantValue.asInt = TSHTMLScanner_A_STAGC, 0x1a, -1, -1, -1, -1 },
    { "A_UNGET", "I", .constantValue.asInt = TSHTMLScanner_A_UNGET, 0x1a, -1, -1, -1, -1 },
    { "A_UNSAVE_PCDATA", "I", .constantValue.asInt = TSHTMLScanner_A_UNSAVE_PCDATA, 0x1a, -1, -1, -1, -1 },
    { "statetable", "[I", .constantValue.asLong = 0, 0xa, -1, 12, -1, -1 },
    { "debug_actionnames", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 13, -1, -1 },
    { "debug_statenames", "[LNSString;", .constantValue.asLong = 0, 0x1a, -1, 14, -1, -1 },
    { "thePublicid_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theSystemid_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theLastLine_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theLastColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theCurrentLine_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theCurrentColumn_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "theNextState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "theOutputBuffer_", "[C", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "theSize_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "theWinMap_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "statetableIndex", "[[S", .constantValue.asLong = 0, 0x8, -1, 15, -1, -1 },
    { "statetableIndexMaxChar", "I", .constantValue.asLong = 0, 0x8, -1, 16, -1, -1 },
  };
  static const void *ptrTable[] = { "unread", "LJavaIoPushbackReader;I", "LJavaIoIOException;", "resetDocumentLocator", "LNSString;LNSString;", "scan", "LJavaIoReader;LTSScanHandler;", "LJavaIoIOException;LOrgXmlSaxSAXException;", "save", "ILTSScanHandler;", "nicechar", "I", &TSHTMLScanner_statetable, &TSHTMLScanner_debug_actionnames, &TSHTMLScanner_debug_statenames, &TSHTMLScanner_statetableIndex, &TSHTMLScanner_statetableIndexMaxChar };
  static const J2ObjcClassInfo _TSHTMLScanner = { "HTMLScanner", "repackaged.org.ccil.cowan.tagsoup", ptrTable, methods, fields, 7, 0x1, 12, 83, -1, -1, -1, -1, -1 };
  return &_TSHTMLScanner;
}

+ (void)initialize {
  if (self == [TSHTMLScanner class]) {
    JreStrongAssignAndConsume(&TSHTMLScanner_statetable, [IOSIntArray newArrayWithInts:(jint[]){ TSHTMLScanner_S_ANAME, '/', TSHTMLScanner_A_ANAME_ADUP, TSHTMLScanner_S_EMPTYTAG, TSHTMLScanner_S_ANAME, '=', TSHTMLScanner_A_ANAME, TSHTMLScanner_S_AVAL, TSHTMLScanner_S_ANAME, '>', TSHTMLScanner_A_ANAME_ADUP_STAGC, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_ANAME, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_ANAME, TSHTMLScanner_S_ANAME, -1, TSHTMLScanner_A_ANAME_ADUP_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_ANAME, ' ', TSHTMLScanner_A_ANAME, TSHTMLScanner_S_EQ, TSHTMLScanner_S_ANAME, 0x000a, TSHTMLScanner_A_ANAME, TSHTMLScanner_S_EQ, TSHTMLScanner_S_ANAME, 0x0009, TSHTMLScanner_A_ANAME, TSHTMLScanner_S_EQ, TSHTMLScanner_S_APOS, '\'', TSHTMLScanner_A_AVAL, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_APOS, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_APOS, TSHTMLScanner_S_APOS, -1, TSHTMLScanner_A_AVAL_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_APOS, ' ', TSHTMLScanner_A_SP, TSHTMLScanner_S_APOS, TSHTMLScanner_S_APOS, 0x000a, TSHTMLScanner_A_SP, TSHTMLScanner_S_APOS, TSHTMLScanner_S_APOS, 0x0009, TSHTMLScanner_A_SP, TSHTMLScanner_S_APOS, TSHTMLScanner_S_AVAL, '"', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_QUOT, TSHTMLScanner_S_AVAL, '\'', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_APOS, TSHTMLScanner_S_AVAL, '>', TSHTMLScanner_A_AVAL_STAGC, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_AVAL, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_STAGC, TSHTMLScanner_S_AVAL, -1, TSHTMLScanner_A_AVAL_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_AVAL, ' ', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_AVAL, TSHTMLScanner_S_AVAL, 0x000a, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_AVAL, TSHTMLScanner_S_AVAL, 0x0009, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_AVAL, TSHTMLScanner_S_BB, 'C', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_BBC, TSHTMLScanner_S_BB, 0, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_BB, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_BBC, 'D', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_BBCD, TSHTMLScanner_S_BBC, 0, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_BBC, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_BBCD, 'A', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_BBCDA, TSHTMLScanner_S_BBCD, 0, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_BBCD, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_BBCDA, 'T', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_BBCDAT, TSHTMLScanner_S_BBCDA, 0, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_BBCDA, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_BBCDAT, 'A', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_BBCDATA, TSHTMLScanner_S_BBCDAT, 0, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_BBCDAT, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_BBCDATA, '[', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_CDSECT, TSHTMLScanner_S_BBCDATA, 0, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_BBCDATA, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_CDATA, '<', TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDATA2, TSHTMLScanner_S_CDATA, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDATA, TSHTMLScanner_S_CDATA, -1, TSHTMLScanner_A_PCDATA, TSHTMLScanner_S_DONE, TSHTMLScanner_S_CDATA2, '/', TSHTMLScanner_A_UNSAVE_PCDATA, TSHTMLScanner_S_ETAG, TSHTMLScanner_S_CDATA2, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDATA, TSHTMLScanner_S_CDATA2, -1, TSHTMLScanner_A_UNSAVE_PCDATA, TSHTMLScanner_S_DONE, TSHTMLScanner_S_CDSECT, ']', TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDSECT1, TSHTMLScanner_S_CDSECT, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDSECT, TSHTMLScanner_S_CDSECT, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_CDSECT1, ']', TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDSECT2, TSHTMLScanner_S_CDSECT1, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDSECT, TSHTMLScanner_S_CDSECT1, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_CDSECT2, '>', TSHTMLScanner_A_CDATA, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_CDSECT2, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_CDSECT, TSHTMLScanner_S_CDSECT2, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_COM, '-', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_COM2, TSHTMLScanner_S_COM, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_COM2, TSHTMLScanner_S_COM, -1, TSHTMLScanner_A_CMNT, TSHTMLScanner_S_DONE, TSHTMLScanner_S_COM2, '-', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_COM3, TSHTMLScanner_S_COM2, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_COM2, TSHTMLScanner_S_COM2, -1, TSHTMLScanner_A_CMNT, TSHTMLScanner_S_DONE, TSHTMLScanner_S_COM3, '-', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_COM4, TSHTMLScanner_S_COM3, 0, TSHTMLScanner_A_MINUS, TSHTMLScanner_S_COM2, TSHTMLScanner_S_COM3, -1, TSHTMLScanner_A_CMNT, TSHTMLScanner_S_DONE, TSHTMLScanner_S_COM4, '-', TSHTMLScanner_A_MINUS3, TSHTMLScanner_S_COM4, TSHTMLScanner_S_COM4, '>', TSHTMLScanner_A_CMNT, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_COM4, 0, TSHTMLScanner_A_MINUS2, TSHTMLScanner_S_COM2, TSHTMLScanner_S_COM4, -1, TSHTMLScanner_A_CMNT, TSHTMLScanner_S_DONE, TSHTMLScanner_S_DECL, '-', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_COM, TSHTMLScanner_S_DECL, '>', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_DECL, '[', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_BB, TSHTMLScanner_S_DECL, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_DECL2, TSHTMLScanner_S_DECL, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_DECL2, '>', TSHTMLScanner_A_DECL, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_DECL2, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_DECL2, TSHTMLScanner_S_DECL2, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_EMPTYTAG, '>', TSHTMLScanner_A_EMPTYTAG, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_EMPTYTAG, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_ANAME, TSHTMLScanner_S_EMPTYTAG, ' ', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_EMPTYTAG, 0x000a, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_EMPTYTAG, 0x0009, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_ENT, 0, TSHTMLScanner_A_ENTITY, TSHTMLScanner_S_ENT, TSHTMLScanner_S_ENT, -1, TSHTMLScanner_A_ENTITY, TSHTMLScanner_S_DONE, TSHTMLScanner_S_EQ, '=', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_AVAL, TSHTMLScanner_S_EQ, '>', TSHTMLScanner_A_ADUP_STAGC, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_EQ, 0, TSHTMLScanner_A_ADUP_SAVE, TSHTMLScanner_S_ANAME, TSHTMLScanner_S_EQ, -1, TSHTMLScanner_A_ADUP_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_EQ, ' ', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_EQ, TSHTMLScanner_S_EQ, 0x000a, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_EQ, TSHTMLScanner_S_EQ, 0x0009, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_EQ, TSHTMLScanner_S_ETAG, '>', TSHTMLScanner_A_ETAG, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_ETAG, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_ETAG, TSHTMLScanner_S_ETAG, -1, TSHTMLScanner_A_ETAG, TSHTMLScanner_S_DONE, TSHTMLScanner_S_ETAG, ' ', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_ETAG, TSHTMLScanner_S_ETAG, 0x000a, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_ETAG, TSHTMLScanner_S_ETAG, 0x0009, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_ETAG, TSHTMLScanner_S_GI, '/', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_EMPTYTAG, TSHTMLScanner_S_GI, '>', TSHTMLScanner_A_GI_STAGC, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_GI, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_GI, TSHTMLScanner_S_GI, -1, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DONE, TSHTMLScanner_S_GI, ' ', TSHTMLScanner_A_GI, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_GI, 0x000a, TSHTMLScanner_A_GI, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_GI, 0x0009, TSHTMLScanner_A_GI, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_NCR, 0, TSHTMLScanner_A_ENTITY, TSHTMLScanner_S_NCR, TSHTMLScanner_S_NCR, -1, TSHTMLScanner_A_ENTITY, TSHTMLScanner_S_DONE, TSHTMLScanner_S_PCDATA, '&', TSHTMLScanner_A_ENTITY_START, TSHTMLScanner_S_ENT, TSHTMLScanner_S_PCDATA, '<', TSHTMLScanner_A_PCDATA, TSHTMLScanner_S_TAG, TSHTMLScanner_S_PCDATA, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_PCDATA, -1, TSHTMLScanner_A_PCDATA, TSHTMLScanner_S_DONE, TSHTMLScanner_S_PI, '>', TSHTMLScanner_A_PI, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_PI, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_PI, TSHTMLScanner_S_PI, -1, TSHTMLScanner_A_PI, TSHTMLScanner_S_DONE, TSHTMLScanner_S_PITARGET, '>', TSHTMLScanner_A_PITARGET_PI, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_PITARGET, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_PITARGET, TSHTMLScanner_S_PITARGET, -1, TSHTMLScanner_A_PITARGET_PI, TSHTMLScanner_S_DONE, TSHTMLScanner_S_PITARGET, ' ', TSHTMLScanner_A_PITARGET, TSHTMLScanner_S_PI, TSHTMLScanner_S_PITARGET, 0x000a, TSHTMLScanner_A_PITARGET, TSHTMLScanner_S_PI, TSHTMLScanner_S_PITARGET, 0x0009, TSHTMLScanner_A_PITARGET, TSHTMLScanner_S_PI, TSHTMLScanner_S_QUOT, '"', TSHTMLScanner_A_AVAL, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_QUOT, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_QUOT, TSHTMLScanner_S_QUOT, -1, TSHTMLScanner_A_AVAL_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_QUOT, ' ', TSHTMLScanner_A_SP, TSHTMLScanner_S_QUOT, TSHTMLScanner_S_QUOT, 0x000a, TSHTMLScanner_A_SP, TSHTMLScanner_S_QUOT, TSHTMLScanner_S_QUOT, 0x0009, TSHTMLScanner_A_SP, TSHTMLScanner_S_QUOT, TSHTMLScanner_S_STAGC, '>', TSHTMLScanner_A_AVAL_STAGC, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_STAGC, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_STAGC, TSHTMLScanner_S_STAGC, -1, TSHTMLScanner_A_AVAL_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_STAGC, ' ', TSHTMLScanner_A_AVAL, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_STAGC, 0x000a, TSHTMLScanner_A_AVAL, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_STAGC, 0x0009, TSHTMLScanner_A_AVAL, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_TAG, '!', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_DECL, TSHTMLScanner_S_TAG, '/', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_ETAG, TSHTMLScanner_S_TAG, '<', TSHTMLScanner_A_SAVE, TSHTMLScanner_S_TAG, TSHTMLScanner_S_TAG, '?', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_PITARGET, TSHTMLScanner_S_TAG, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_GI, TSHTMLScanner_S_TAG, -1, TSHTMLScanner_A_LT_PCDATA, TSHTMLScanner_S_DONE, TSHTMLScanner_S_TAG, ' ', TSHTMLScanner_A_LT, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_TAG, 0x000a, TSHTMLScanner_A_LT, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_TAG, 0x0009, TSHTMLScanner_A_LT, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_TAGWS, '/', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_EMPTYTAG, TSHTMLScanner_S_TAGWS, '>', TSHTMLScanner_A_STAGC, TSHTMLScanner_S_PCDATA, TSHTMLScanner_S_TAGWS, 0, TSHTMLScanner_A_SAVE, TSHTMLScanner_S_ANAME, TSHTMLScanner_S_TAGWS, -1, TSHTMLScanner_A_STAGC, TSHTMLScanner_S_DONE, TSHTMLScanner_S_TAGWS, ' ', TSHTMLScanner_A_SKIP, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_TAGWS, 0x000a, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_TAGWS, 0x0009, TSHTMLScanner_A_SKIP, TSHTMLScanner_S_TAGWS, TSHTMLScanner_S_XNCR, 0, TSHTMLScanner_A_ENTITY, TSHTMLScanner_S_XNCR, TSHTMLScanner_S_XNCR, -1, TSHTMLScanner_A_ENTITY, TSHTMLScanner_S_DONE } count:592]);
    JreStrongAssignAndConsume(&TSHTMLScanner_debug_actionnames, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"A_ADUP", @"A_ADUP_SAVE", @"A_ADUP_STAGC", @"A_ANAME", @"A_ANAME_ADUP", @"A_ANAME_ADUP_STAGC", @"A_AVAL", @"A_AVAL_STAGC", @"A_CDATA", @"A_CMNT", @"A_DECL", @"A_EMPTYTAG", @"A_ENTITY", @"A_ENTITY_START", @"A_ETAG", @"A_GI", @"A_GI_STAGC", @"A_LT", @"A_LT_PCDATA", @"A_MINUS", @"A_MINUS2", @"A_MINUS3", @"A_PCDATA", @"A_PI", @"A_PITARGET", @"A_PITARGET_PI", @"A_SAVE", @"A_SKIP", @"A_SP", @"A_STAGC", @"A_UNGET", @"A_UNSAVE_PCDATA" } count:33 type:NSString_class_()]);
    JreStrongAssignAndConsume(&TSHTMLScanner_debug_statenames, [IOSObjectArray newArrayWithObjects:(id[]){ @"", @"S_ANAME", @"S_APOS", @"S_AVAL", @"S_BB", @"S_BBC", @"S_BBCD", @"S_BBCDA", @"S_BBCDAT", @"S_BBCDATA", @"S_CDATA", @"S_CDATA2", @"S_CDSECT", @"S_CDSECT1", @"S_CDSECT2", @"S_COM", @"S_COM2", @"S_COM3", @"S_COM4", @"S_DECL", @"S_DECL2", @"S_DONE", @"S_EMPTYTAG", @"S_ENT", @"S_EQ", @"S_ETAG", @"S_GI", @"S_NCR", @"S_PCDATA", @"S_PI", @"S_PITARGET", @"S_QUOT", @"S_STAGC", @"S_TAG", @"S_TAGWS", @"S_XNCR" } count:36 type:NSString_class_()]);
    {
      jint maxState = -1;
      jint maxChar = -1;
      for (jint i = 0; i < TSHTMLScanner_statetable->size_; i += 4) {
        if (IOSIntArray_Get(TSHTMLScanner_statetable, i) > maxState) {
          maxState = IOSIntArray_Get(TSHTMLScanner_statetable, i);
        }
        if (IOSIntArray_Get(TSHTMLScanner_statetable, i + 1) > maxChar) {
          maxChar = IOSIntArray_Get(TSHTMLScanner_statetable, i + 1);
        }
      }
      TSHTMLScanner_statetableIndexMaxChar = maxChar + 1;
      JreStrongAssignAndConsume(&TSHTMLScanner_statetableIndex, [IOSShortArray newArrayWithDimensions:2 lengths:(jint[]){ maxState + 1, maxChar + 3 }]);
      for (jint theState = 0; theState <= maxState; ++theState) {
        for (jint ch = -2; ch <= maxChar; ++ch) {
          jint hit = -1;
          jint action = 0;
          for (jint i = 0; i < TSHTMLScanner_statetable->size_; i += 4) {
            if (theState != IOSIntArray_Get(TSHTMLScanner_statetable, i)) {
              if (action != 0) break;
              continue;
            }
            if (IOSIntArray_Get(TSHTMLScanner_statetable, i + 1) == 0) {
              hit = i;
              action = IOSIntArray_Get(TSHTMLScanner_statetable, i + 2);
            }
            else if (IOSIntArray_Get(TSHTMLScanner_statetable, i + 1) == ch) {
              hit = i;
              action = IOSIntArray_Get(TSHTMLScanner_statetable, i + 2);
              break;
            }
          }
          *IOSShortArray_GetRef(nil_chk(IOSObjectArray_Get(TSHTMLScanner_statetableIndex, theState)), ch + 2) = (jshort) hit;
        }
      }
    }
    J2OBJC_SET_INITIALIZED(TSHTMLScanner)
  }
}

@end

void TSHTMLScanner_init(TSHTMLScanner *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->theOutputBuffer_, [IOSCharArray newArrayWithLength:200]);
  JreStrongAssignAndConsume(&self->theWinMap_, [IOSIntArray newArrayWithInts:(jint[]){ (jint) 0x20AC, (jint) 0xFFFD, (jint) 0x201A, (jint) 0x0192, (jint) 0x201E, (jint) 0x2026, (jint) 0x2020, (jint) 0x2021, (jint) 0x02C6, (jint) 0x2030, (jint) 0x0160, (jint) 0x2039, (jint) 0x0152, (jint) 0xFFFD, (jint) 0x017D, (jint) 0xFFFD, (jint) 0xFFFD, (jint) 0x2018, (jint) 0x2019, (jint) 0x201C, (jint) 0x201D, (jint) 0x2022, (jint) 0x2013, (jint) 0x2014, (jint) 0x02DC, (jint) 0x2122, (jint) 0x0161, (jint) 0x203A, (jint) 0x0153, (jint) 0xFFFD, (jint) 0x017E, (jint) 0x0178 } count:32]);
}

TSHTMLScanner *new_TSHTMLScanner_init() {
  J2OBJC_NEW_IMPL(TSHTMLScanner, init)
}

TSHTMLScanner *create_TSHTMLScanner_init() {
  J2OBJC_CREATE_IMPL(TSHTMLScanner, init)
}

void TSHTMLScanner_unreadWithJavaIoPushbackReader_withInt_(TSHTMLScanner *self, JavaIoPushbackReader *r, jint c) {
  if (c != -1) [((JavaIoPushbackReader *) nil_chk(r)) unreadWithInt:c];
}

void TSHTMLScanner_mark(TSHTMLScanner *self) {
  self->theLastColumn_ = self->theCurrentColumn_;
  self->theLastLine_ = self->theCurrentLine_;
}

void TSHTMLScanner_saveWithInt_withTSScanHandler_(TSHTMLScanner *self, jint ch, id<TSScanHandler> h) {
  if (self->theSize_ >= ((IOSCharArray *) nil_chk(self->theOutputBuffer_))->size_ - 20) {
    if (self->theState_ == TSHTMLScanner_S_PCDATA || self->theState_ == TSHTMLScanner_S_CDATA) {
      [((id<TSScanHandler>) nil_chk(h)) pcdataWithCharArray:self->theOutputBuffer_ withInt:0 withInt:self->theSize_];
      self->theSize_ = 0;
    }
    else {
      IOSCharArray *newOutputBuffer = [IOSCharArray arrayWithLength:self->theOutputBuffer_->size_ * 2];
      JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(self->theOutputBuffer_, 0, newOutputBuffer, 0, self->theSize_ + 1);
      JreStrongAssign(&self->theOutputBuffer_, newOutputBuffer);
    }
  }
  *IOSCharArray_GetRef(nil_chk(self->theOutputBuffer_), self->theSize_++) = (jchar) ch;
}

NSString *TSHTMLScanner_nicecharWithInt_(jint inArg) {
  TSHTMLScanner_initialize();
  if (inArg == 0x000a) return @"\\n";
  if (inArg < 32) return JreStrcat("$$", @"0x", JavaLangInteger_toHexStringWithInt_(inArg));
  return JreStrcat("CCC", '\'', ((jchar) inArg), '\'');
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TSHTMLScanner)
