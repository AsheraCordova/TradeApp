//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\KeyFrameArray.java
//

#include "CLCustomAttribute.h"
#include "CustomVariable.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "KeyFrameArray.h"
#include "java/io/PrintStream.h"
#include "java/lang/System.h"
#include "java/util/Arrays.h"


inline jint ADXKeyFrameArray_CustomArray_get_EMPTY(void);
#define ADXKeyFrameArray_CustomArray_EMPTY 999
J2OBJC_STATIC_FIELD_CONSTANT(ADXKeyFrameArray_CustomArray, EMPTY, jint)

inline jint ADXKeyFrameArray_CustomVar_get_EMPTY(void);
#define ADXKeyFrameArray_CustomVar_EMPTY 999
J2OBJC_STATIC_FIELD_CONSTANT(ADXKeyFrameArray_CustomVar, EMPTY, jint)

inline jint ADXKeyFrameArray_FloatArray_get_EMPTY(void);
#define ADXKeyFrameArray_FloatArray_EMPTY 999
J2OBJC_STATIC_FIELD_CONSTANT(ADXKeyFrameArray_FloatArray, EMPTY, jint)

@implementation ADXKeyFrameArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyFrameArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXKeyFrameArray_CustomArray;LADXKeyFrameArray_CustomVar;LADXKeyFrameArray_FloatArray;" };
  static const J2ObjcClassInfo _ADXKeyFrameArray = { "KeyFrameArray", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, NULL, 7, 0x1, 1, 0, -1, 0, -1, -1, -1 };
  return &_ADXKeyFrameArray;
}

@end

void ADXKeyFrameArray_init(ADXKeyFrameArray *self) {
  NSObject_init(self);
}

ADXKeyFrameArray *new_ADXKeyFrameArray_init() {
  J2OBJC_NEW_IMPL(ADXKeyFrameArray, init)
}

ADXKeyFrameArray *create_ADXKeyFrameArray_init() {
  J2OBJC_CREATE_IMPL(ADXKeyFrameArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyFrameArray)

@implementation ADXKeyFrameArray_CustomArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyFrameArray_CustomArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  JavaUtilArrays_fillWithIntArray_withInt_(keys_, ADXKeyFrameArray_CustomArray_EMPTY);
  JavaUtilArrays_fillWithNSObjectArray_withId_(values_, nil);
  count_ = 0;
}

- (void)dump {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"V: ", JavaUtilArrays_toStringWithIntArray_(JavaUtilArrays_copyOfWithIntArray_withInt_(keys_, count_)))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"K: ["];
  for (jint i = 0; i < count_; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$@", ((i == 0 ? @"" : @", ")), [self valueAtWithInt:i])];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"]"];
}

- (jint)size {
  return count_;
}

- (ADXCLCustomAttribute *)valueAtWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(values_), IOSIntArray_Get(nil_chk(keys_), i));
}

- (jint)keyAtWithInt:(jint)i {
  return IOSIntArray_Get(nil_chk(keys_), i);
}

- (void)appendWithInt:(jint)position
withADXCLCustomAttribute:(ADXCLCustomAttribute *)value {
  if (IOSObjectArray_Get(nil_chk(values_), position) != nil) {
    [self removeWithInt:position];
  }
  IOSObjectArray_Set(nil_chk(values_), position, value);
  *IOSIntArray_GetRef(nil_chk(keys_), count_++) = position;
  JavaUtilArrays_sortWithIntArray_(keys_);
}

- (void)removeWithInt:(jint)position {
  IOSObjectArray_Set(nil_chk(values_), position, nil);
  for (jint j = 0, i = 0; i < count_; i++) {
    if (position == IOSIntArray_Get(nil_chk(keys_), i)) {
      *IOSIntArray_GetRef(keys_, i) = ADXKeyFrameArray_CustomArray_EMPTY;
      j++;
    }
    if (i != j) {
      *IOSIntArray_GetRef(keys_, i) = IOSIntArray_Get(keys_, j);
    }
    j++;
  }
  count_--;
}

- (void)dealloc {
  RELEASE_(keys_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXCLCustomAttribute;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(dump);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(valueAtWithInt:);
  methods[5].selector = @selector(keyAtWithInt:);
  methods[6].selector = @selector(appendWithInt:withADXCLCustomAttribute:);
  methods[7].selector = @selector(removeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "values_", "[LADXCLCustomAttribute;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY", "I", .constantValue.asInt = ADXKeyFrameArray_CustomArray_EMPTY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueAt", "I", "keyAt", "append", "ILADXCLCustomAttribute;", "remove", "LADXKeyFrameArray;" };
  static const J2ObjcClassInfo _ADXKeyFrameArray_CustomArray = { "CustomArray", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 8, 4, 6, -1, -1, -1, -1 };
  return &_ADXKeyFrameArray_CustomArray;
}

@end

void ADXKeyFrameArray_CustomArray_init(ADXKeyFrameArray_CustomArray *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:101]);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:101 type:ADXCLCustomAttribute_class_()]);
  [self clear];
}

ADXKeyFrameArray_CustomArray *new_ADXKeyFrameArray_CustomArray_init() {
  J2OBJC_NEW_IMPL(ADXKeyFrameArray_CustomArray, init)
}

ADXKeyFrameArray_CustomArray *create_ADXKeyFrameArray_CustomArray_init() {
  J2OBJC_CREATE_IMPL(ADXKeyFrameArray_CustomArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyFrameArray_CustomArray)

@implementation ADXKeyFrameArray_CustomVar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyFrameArray_CustomVar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  JavaUtilArrays_fillWithIntArray_withInt_(keys_, ADXKeyFrameArray_CustomVar_EMPTY);
  JavaUtilArrays_fillWithNSObjectArray_withId_(values_, nil);
  count_ = 0;
}

- (void)dump {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"V: ", JavaUtilArrays_toStringWithIntArray_(JavaUtilArrays_copyOfWithIntArray_withInt_(keys_, count_)))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"K: ["];
  for (jint i = 0; i < count_; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$@", ((i == 0 ? @"" : @", ")), [self valueAtWithInt:i])];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"]"];
}

- (jint)size {
  return count_;
}

- (ADXCustomVariable *)valueAtWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(values_), IOSIntArray_Get(nil_chk(keys_), i));
}

- (jint)keyAtWithInt:(jint)i {
  return IOSIntArray_Get(nil_chk(keys_), i);
}

- (void)appendWithInt:(jint)position
withADXCustomVariable:(ADXCustomVariable *)value {
  if (IOSObjectArray_Get(nil_chk(values_), position) != nil) {
    [self removeWithInt:position];
  }
  IOSObjectArray_Set(nil_chk(values_), position, value);
  *IOSIntArray_GetRef(nil_chk(keys_), count_++) = position;
  JavaUtilArrays_sortWithIntArray_(keys_);
}

- (void)removeWithInt:(jint)position {
  IOSObjectArray_Set(nil_chk(values_), position, nil);
  for (jint j = 0, i = 0; i < count_; i++) {
    if (position == IOSIntArray_Get(nil_chk(keys_), i)) {
      *IOSIntArray_GetRef(keys_, i) = ADXKeyFrameArray_CustomVar_EMPTY;
      j++;
    }
    if (i != j) {
      *IOSIntArray_GetRef(keys_, i) = IOSIntArray_Get(keys_, j);
    }
    j++;
  }
  count_--;
}

- (void)dealloc {
  RELEASE_(keys_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXCustomVariable;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(dump);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(valueAtWithInt:);
  methods[5].selector = @selector(keyAtWithInt:);
  methods[6].selector = @selector(appendWithInt:withADXCustomVariable:);
  methods[7].selector = @selector(removeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "values_", "[LADXCustomVariable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY", "I", .constantValue.asInt = ADXKeyFrameArray_CustomVar_EMPTY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueAt", "I", "keyAt", "append", "ILADXCustomVariable;", "remove", "LADXKeyFrameArray;" };
  static const J2ObjcClassInfo _ADXKeyFrameArray_CustomVar = { "CustomVar", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x9, 8, 4, 6, -1, -1, -1, -1 };
  return &_ADXKeyFrameArray_CustomVar;
}

@end

void ADXKeyFrameArray_CustomVar_init(ADXKeyFrameArray_CustomVar *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:101]);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:101 type:ADXCustomVariable_class_()]);
  [self clear];
}

ADXKeyFrameArray_CustomVar *new_ADXKeyFrameArray_CustomVar_init() {
  J2OBJC_NEW_IMPL(ADXKeyFrameArray_CustomVar, init)
}

ADXKeyFrameArray_CustomVar *create_ADXKeyFrameArray_CustomVar_init() {
  J2OBJC_CREATE_IMPL(ADXKeyFrameArray_CustomVar, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyFrameArray_CustomVar)

@implementation ADXKeyFrameArray_FloatArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXKeyFrameArray_FloatArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  JavaUtilArrays_fillWithIntArray_withInt_(keys_, ADXKeyFrameArray_FloatArray_EMPTY);
  JavaUtilArrays_fillWithNSObjectArray_withId_(values_, nil);
  count_ = 0;
}

- (void)dump {
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$$", @"V: ", JavaUtilArrays_toStringWithIntArray_(JavaUtilArrays_copyOfWithIntArray_withInt_(keys_, count_)))];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:@"K: ["];
  for (jint i = 0; i < count_; i++) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printWithNSString:JreStrcat("$$", ((i == 0 ? @"" : @", ")), JavaUtilArrays_toStringWithFloatArray_([self valueAtWithInt:i]))];
  }
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:@"]"];
}

- (jint)size {
  return count_;
}

- (IOSFloatArray *)valueAtWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(values_), IOSIntArray_Get(nil_chk(keys_), i));
}

- (jint)keyAtWithInt:(jint)i {
  return IOSIntArray_Get(nil_chk(keys_), i);
}

- (void)appendWithInt:(jint)position
       withFloatArray:(IOSFloatArray *)value {
  if (IOSObjectArray_Get(nil_chk(values_), position) != nil) {
    [self removeWithInt:position];
  }
  IOSObjectArray_Set(nil_chk(values_), position, value);
  *IOSIntArray_GetRef(nil_chk(keys_), count_++) = position;
  JavaUtilArrays_sortWithIntArray_(keys_);
}

- (void)removeWithInt:(jint)position {
  IOSObjectArray_Set(nil_chk(values_), position, nil);
  for (jint j = 0, i = 0; i < count_; i++) {
    if (position == IOSIntArray_Get(nil_chk(keys_), i)) {
      *IOSIntArray_GetRef(keys_, i) = ADXKeyFrameArray_FloatArray_EMPTY;
      j++;
    }
    if (i != j) {
      *IOSIntArray_GetRef(keys_, i) = IOSIntArray_Get(keys_, j);
    }
    j++;
  }
  count_--;
}

- (void)dealloc {
  RELEASE_(keys_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[F", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(dump);
  methods[3].selector = @selector(size);
  methods[4].selector = @selector(valueAtWithInt:);
  methods[5].selector = @selector(keyAtWithInt:);
  methods[6].selector = @selector(appendWithInt:withFloatArray:);
  methods[7].selector = @selector(removeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keys_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "values_", "[[F", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EMPTY", "I", .constantValue.asInt = ADXKeyFrameArray_FloatArray_EMPTY, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "valueAt", "I", "keyAt", "append", "I[F", "remove", "LADXKeyFrameArray;" };
  static const J2ObjcClassInfo _ADXKeyFrameArray_FloatArray = { "FloatArray", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x8, 8, 4, 6, -1, -1, -1, -1 };
  return &_ADXKeyFrameArray_FloatArray;
}

@end

void ADXKeyFrameArray_FloatArray_init(ADXKeyFrameArray_FloatArray *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->keys_, [IOSIntArray newArrayWithLength:101]);
  JreStrongAssignAndConsume(&self->values_, [IOSObjectArray newArrayWithLength:101 type:IOSClass_floatArray(1)]);
  [self clear];
}

ADXKeyFrameArray_FloatArray *new_ADXKeyFrameArray_FloatArray_init() {
  J2OBJC_NEW_IMPL(ADXKeyFrameArray_FloatArray, init)
}

ADXKeyFrameArray_FloatArray *create_ADXKeyFrameArray_FloatArray_init() {
  J2OBJC_CREATE_IMPL(ADXKeyFrameArray_FloatArray, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXKeyFrameArray_FloatArray)
