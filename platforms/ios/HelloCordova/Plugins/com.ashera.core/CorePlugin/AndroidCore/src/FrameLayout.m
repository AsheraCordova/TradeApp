//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\FrameLayout.java
//

#include "Drawable.h"
#include "FrameLayout.h"
#include "Gravity.h"
#include "J2ObjC_source.h"
#include "Rect.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"

@class JavaUtilArrayList;


@interface ADFrameLayout () {
 @public
  jint mForegroundPaddingLeft_;
  jint mForegroundPaddingTop_;
  jint mForegroundPaddingRight_;
  jint mForegroundPaddingBottom_;
  JavaUtilArrayList *mMatchParentChildren_;
}

- (jint)getPaddingTopWithForeground;

- (jint)getPaddingBottomWithForeground;

@end

J2OBJC_FIELD_SETTER(ADFrameLayout, mMatchParentChildren_, JavaUtilArrayList *)

inline jint ADFrameLayout_get_DEFAULT_CHILD_GRAVITY(void);
#define ADFrameLayout_DEFAULT_CHILD_GRAVITY 8388659
J2OBJC_STATIC_FIELD_CONSTANT(ADFrameLayout, DEFAULT_CHILD_GRAVITY, jint)

__attribute__((unused)) static jint ADFrameLayout_getPaddingTopWithForeground(ADFrameLayout *self);

__attribute__((unused)) static jint ADFrameLayout_getPaddingBottomWithForeground(ADFrameLayout *self);

@implementation ADFrameLayout

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADFrameLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setForegroundGravityWithInt:(jint)foregroundGravity {
  if ([self getForegroundGravity] != foregroundGravity) {
    [super setForegroundGravityWithInt:foregroundGravity];
    ADDrawable *foreground = [self getForeground];
    if ([self getForegroundGravity] == ADGravity_FILL && foreground != nil) {
      ADRect *padding = create_ADRect_init();
      if ([foreground getPaddingWithADRect:padding]) {
        mForegroundPaddingLeft_ = padding->left_;
        mForegroundPaddingTop_ = padding->top_;
        mForegroundPaddingRight_ = padding->right_;
        mForegroundPaddingBottom_ = padding->bottom_;
      }
    }
    else {
      mForegroundPaddingLeft_ = 0;
      mForegroundPaddingTop_ = 0;
      mForegroundPaddingRight_ = 0;
      mForegroundPaddingBottom_ = 0;
    }
    [self requestLayout];
  }
}

- (ADFrameLayout_LayoutParams *)generateDefaultLayoutParams {
  return create_ADFrameLayout_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_MATCH_PARENT, ADViewGroup_LayoutParams_MATCH_PARENT);
}

- (jint)getPaddingLeftWithForeground {
  return [self isForegroundInsidePadding] ? JavaLangMath_maxWithInt_withInt_(mPaddingLeft_, mForegroundPaddingLeft_) : mPaddingLeft_ + mForegroundPaddingLeft_;
}

- (jint)getPaddingRightWithForeground {
  return [self isForegroundInsidePadding] ? JavaLangMath_maxWithInt_withInt_(mPaddingRight_, mForegroundPaddingRight_) : mPaddingRight_ + mForegroundPaddingRight_;
}

- (jint)getPaddingTopWithForeground {
  return ADFrameLayout_getPaddingTopWithForeground(self);
}

- (jint)getPaddingBottomWithForeground {
  return ADFrameLayout_getPaddingBottomWithForeground(self);
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jint count = [self getChildCount];
  jboolean measureMatchParentChildren = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec) != ADView_MeasureSpec_EXACTLY || ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec) != ADView_MeasureSpec_EXACTLY;
  [((JavaUtilArrayList *) nil_chk(mMatchParentChildren_)) clear];
  jint maxHeight = 0;
  jint maxWidth = 0;
  jint childState = 0;
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if (mMeasureAllChildren_ || [((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      [self measureChildWithMarginsWithADView:child withInt:widthMeasureSpec withInt:0 withInt:heightMeasureSpec withInt:0];
      ADFrameLayout_LayoutParams *lp = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
      maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [child getMeasuredWidth] + ((ADFrameLayout_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_);
      maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [child getMeasuredHeight] + lp->topMargin_ + lp->bottomMargin_);
      childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
      if (measureMatchParentChildren) {
        if (lp->width_ == ADViewGroup_LayoutParams_MATCH_PARENT || lp->height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
          [mMatchParentChildren_ addWithId:child];
        }
      }
    }
  }
  maxWidth += [self getPaddingLeftWithForeground] + [self getPaddingRightWithForeground];
  maxHeight += ADFrameLayout_getPaddingTopWithForeground(self) + ADFrameLayout_getPaddingBottomWithForeground(self);
  maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [self getSuggestedMinimumHeight]);
  maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [self getSuggestedMinimumWidth]);
  ADDrawable *drawable = [self getForeground];
  if (drawable != nil) {
    maxHeight = JavaLangMath_maxWithInt_withInt_(maxHeight, [drawable getMinimumHeight]);
    maxWidth = JavaLangMath_maxWithInt_withInt_(maxWidth, [drawable getMinimumWidth]);
  }
  [self setMeasuredDimensionWithInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(maxWidth, widthMeasureSpec, childState) withInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(maxHeight, heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT))];
  count = [mMatchParentChildren_ size];
  if (count > 1) {
    for (jint i = 0; i < count; i++) {
      ADView *child = [mMatchParentChildren_ getWithInt:i];
      ADViewGroup_MarginLayoutParams *lp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
      jint childWidthMeasureSpec;
      if (((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->width_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
        jint width = JavaLangMath_maxWithInt_withInt_(0, [self getMeasuredWidth] - [self getPaddingLeftWithForeground] - [self getPaddingRightWithForeground] - lp->leftMargin_ - lp->rightMargin_);
        childWidthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(width, ADView_MeasureSpec_EXACTLY);
      }
      else {
        childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(widthMeasureSpec, [self getPaddingLeftWithForeground] + [self getPaddingRightWithForeground] + lp->leftMargin_ + lp->rightMargin_, lp->width_);
      }
      jint childHeightMeasureSpec;
      if (lp->height_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
        jint height = JavaLangMath_maxWithInt_withInt_(0, [self getMeasuredHeight] - ADFrameLayout_getPaddingTopWithForeground(self) - ADFrameLayout_getPaddingBottomWithForeground(self) - lp->topMargin_ - lp->bottomMargin_);
        childHeightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(height, ADView_MeasureSpec_EXACTLY);
      }
      else {
        childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(heightMeasureSpec, ADFrameLayout_getPaddingTopWithForeground(self) + ADFrameLayout_getPaddingBottomWithForeground(self) + lp->topMargin_ + lp->bottomMargin_, lp->height_);
      }
      [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
    }
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  [self layoutChildrenWithInt:left withInt:top withInt:right withInt:bottom withBoolean:false];
}

- (void)layoutChildrenWithInt:(jint)left
                      withInt:(jint)top
                      withInt:(jint)right
                      withInt:(jint)bottom
                  withBoolean:(jboolean)forceLeftGravity {
  jint count = [self getChildCount];
  jint parentLeft = [self getPaddingLeftWithForeground];
  jint parentRight = right - left - [self getPaddingRightWithForeground];
  jint parentTop = ADFrameLayout_getPaddingTopWithForeground(self);
  jint parentBottom = bottom - top - ADFrameLayout_getPaddingBottomWithForeground(self);
  for (jint i = 0; i < count; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] != ADView_GONE) {
      ADFrameLayout_LayoutParams *lp = (ADFrameLayout_LayoutParams *) cast_chk([child getLayoutParams], [ADFrameLayout_LayoutParams class]);
      jint width = [child getMeasuredWidth];
      jint height = [child getMeasuredHeight];
      jint childLeft;
      jint childTop;
      jint gravity = ((ADFrameLayout_LayoutParams *) nil_chk(lp))->gravity_;
      if (gravity == -1) {
        gravity = ADFrameLayout_DEFAULT_CHILD_GRAVITY;
      }
      jint layoutDirection = [self getLayoutDirection];
      jint absoluteGravity = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
      jint verticalGravity = gravity & ADGravity_VERTICAL_GRAVITY_MASK;
      switch (absoluteGravity & ADGravity_HORIZONTAL_GRAVITY_MASK) {
        case ADGravity_CENTER_HORIZONTAL:
        childLeft = parentLeft + JreIntDiv((parentRight - parentLeft - width), 2) + lp->leftMargin_ - lp->rightMargin_;
        break;
        case ADGravity_RIGHT:
        if (!forceLeftGravity) {
          childLeft = parentRight - width - lp->rightMargin_;
          break;
        }
        case ADGravity_LEFT:
        default:
        childLeft = parentLeft + lp->leftMargin_;
      }
      switch (verticalGravity) {
        case ADGravity_TOP:
        childTop = parentTop + lp->topMargin_;
        break;
        case ADGravity_CENTER_VERTICAL:
        childTop = parentTop + JreIntDiv((parentBottom - parentTop - height), 2) + lp->topMargin_ - lp->bottomMargin_;
        break;
        case ADGravity_BOTTOM:
        childTop = parentBottom - height - lp->bottomMargin_;
        break;
        default:
        childTop = parentTop + lp->topMargin_;
      }
      [child layoutWithInt:childLeft withInt:childTop withInt:childLeft + width withInt:childTop + height];
    }
  }
}

- (void)setMeasureAllChildrenWithBoolean:(jboolean)measureAll {
  mMeasureAllChildren_ = measureAll;
}

- (jboolean)getMeasureAllChildren {
  return mMeasureAllChildren_;
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [p isKindOfClass:[ADFrameLayout_LayoutParams class]];
}

- (ADViewGroup_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)lp {
  if (JreLoadStatic(ADView, sPreserveMarginParamsInLayoutParamConversion)) {
    if ([lp isKindOfClass:[ADFrameLayout_LayoutParams class]]) {
      return create_ADFrameLayout_LayoutParams_initWithADFrameLayout_LayoutParams_((ADFrameLayout_LayoutParams *) lp);
    }
    else if ([lp isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
      return create_ADFrameLayout_LayoutParams_initWithADViewGroup_LayoutParams_((ADViewGroup_MarginLayoutParams *) lp);
    }
  }
  return create_ADFrameLayout_LayoutParams_initWithADViewGroup_LayoutParams_(lp);
}

- (void)dealloc {
  RELEASE_(mMatchParentChildren_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 10, 11, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x4, 12, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setForegroundGravityWithInt:);
  methods[2].selector = @selector(generateDefaultLayoutParams);
  methods[3].selector = @selector(getPaddingLeftWithForeground);
  methods[4].selector = @selector(getPaddingRightWithForeground);
  methods[5].selector = @selector(getPaddingTopWithForeground);
  methods[6].selector = @selector(getPaddingBottomWithForeground);
  methods[7].selector = @selector(onMeasureWithInt:withInt:);
  methods[8].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[9].selector = @selector(layoutChildrenWithInt:withInt:withInt:withInt:withBoolean:);
  methods[10].selector = @selector(setMeasureAllChildrenWithBoolean:);
  methods[11].selector = @selector(getMeasureAllChildren);
  methods[12].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[13].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_CHILD_GRAVITY", "I", .constantValue.asInt = ADFrameLayout_DEFAULT_CHILD_GRAVITY, 0x1a, -1, -1, -1, -1 },
    { "mMeasureAllChildren_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mForegroundPaddingLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mForegroundPaddingTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mForegroundPaddingRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mForegroundPaddingBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMatchParentChildren_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "setForegroundGravity", "I", "onMeasure", "II", "onLayout", "ZIIII", "layoutChildren", "IIIIZ", "setMeasureAllChildren", "Z", "checkLayoutParams", "LADViewGroup_LayoutParams;", "generateLayoutParams", "Ljava/util/ArrayList<Lr/android/view/View;>;", "LADFrameLayout_LayoutParams;" };
  static const J2ObjcClassInfo _ADFrameLayout = { "FrameLayout", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 14, 7, -1, 14, -1, -1, -1 };
  return &_ADFrameLayout;
}

@end

void ADFrameLayout_init(ADFrameLayout *self) {
  ADViewGroup_init(self);
  self->mMeasureAllChildren_ = false;
  self->mForegroundPaddingLeft_ = 0;
  self->mForegroundPaddingTop_ = 0;
  self->mForegroundPaddingRight_ = 0;
  self->mForegroundPaddingBottom_ = 0;
  JreStrongAssignAndConsume(&self->mMatchParentChildren_, new_JavaUtilArrayList_initWithInt_(1));
}

ADFrameLayout *new_ADFrameLayout_init() {
  J2OBJC_NEW_IMPL(ADFrameLayout, init)
}

ADFrameLayout *create_ADFrameLayout_init() {
  J2OBJC_CREATE_IMPL(ADFrameLayout, init)
}

jint ADFrameLayout_getPaddingTopWithForeground(ADFrameLayout *self) {
  return [self isForegroundInsidePadding] ? JavaLangMath_maxWithInt_withInt_(self->mPaddingTop_, self->mForegroundPaddingTop_) : self->mPaddingTop_ + self->mForegroundPaddingTop_;
}

jint ADFrameLayout_getPaddingBottomWithForeground(ADFrameLayout *self) {
  return [self isForegroundInsidePadding] ? JavaLangMath_maxWithInt_withInt_(self->mPaddingBottom_, self->mForegroundPaddingBottom_) : self->mPaddingBottom_ + self->mForegroundPaddingBottom_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFrameLayout)

@implementation ADFrameLayout_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADFrameLayout_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                    withInt:(jint)gravity {
  ADFrameLayout_LayoutParams_initWithInt_withInt_withInt_(self, width, height, gravity);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADFrameLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADFrameLayout_LayoutParams:(ADFrameLayout_LayoutParams *)source {
  ADFrameLayout_LayoutParams_initWithADFrameLayout_LayoutParams_(self, source);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[3].selector = @selector(initWithADFrameLayout_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNSPECIFIED_GRAVITY", "I", .constantValue.asInt = ADFrameLayout_LayoutParams_UNSPECIFIED_GRAVITY, 0x19, -1, -1, -1, -1 },
    { "gravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "III", "LADViewGroup_LayoutParams;", "LADFrameLayout_LayoutParams;", "LADFrameLayout;" };
  static const J2ObjcClassInfo _ADFrameLayout_LayoutParams = { "LayoutParams", "r.android.widget", ptrTable, methods, fields, 7, 0x9, 4, 2, 4, -1, -1, -1, -1 };
  return &_ADFrameLayout_LayoutParams;
}

@end

void ADFrameLayout_LayoutParams_initWithInt_withInt_(ADFrameLayout_LayoutParams *self, jint width, jint height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = ADFrameLayout_LayoutParams_UNSPECIFIED_GRAVITY;
}

ADFrameLayout_LayoutParams *new_ADFrameLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADFrameLayout_LayoutParams, initWithInt_withInt_, width, height)
}

ADFrameLayout_LayoutParams *create_ADFrameLayout_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADFrameLayout_LayoutParams, initWithInt_withInt_, width, height)
}

void ADFrameLayout_LayoutParams_initWithInt_withInt_withInt_(ADFrameLayout_LayoutParams *self, jint width, jint height, jint gravity) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = ADFrameLayout_LayoutParams_UNSPECIFIED_GRAVITY;
  self->gravity_ = gravity;
}

ADFrameLayout_LayoutParams *new_ADFrameLayout_LayoutParams_initWithInt_withInt_withInt_(jint width, jint height, jint gravity) {
  J2OBJC_NEW_IMPL(ADFrameLayout_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

ADFrameLayout_LayoutParams *create_ADFrameLayout_LayoutParams_initWithInt_withInt_withInt_(jint width, jint height, jint gravity) {
  J2OBJC_CREATE_IMPL(ADFrameLayout_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

void ADFrameLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADFrameLayout_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->gravity_ = ADFrameLayout_LayoutParams_UNSPECIFIED_GRAVITY;
}

ADFrameLayout_LayoutParams *new_ADFrameLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADFrameLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADFrameLayout_LayoutParams *create_ADFrameLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADFrameLayout_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADFrameLayout_LayoutParams_initWithADFrameLayout_LayoutParams_(ADFrameLayout_LayoutParams *self, ADFrameLayout_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  self->gravity_ = ADFrameLayout_LayoutParams_UNSPECIFIED_GRAVITY;
  self->gravity_ = ((ADFrameLayout_LayoutParams *) nil_chk(source))->gravity_;
}

ADFrameLayout_LayoutParams *new_ADFrameLayout_LayoutParams_initWithADFrameLayout_LayoutParams_(ADFrameLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADFrameLayout_LayoutParams, initWithADFrameLayout_LayoutParams_, source)
}

ADFrameLayout_LayoutParams *create_ADFrameLayout_LayoutParams_initWithADFrameLayout_LayoutParams_(ADFrameLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADFrameLayout_LayoutParams, initWithADFrameLayout_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADFrameLayout_LayoutParams)
