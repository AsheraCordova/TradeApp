//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\utils\CommandHelper.java
//

#include "CommandHelper.h"
#include "IActivity.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "java/util/List.h"


@interface ASCommandHelper_SucessCallBack : NSObject

@end

@implementation ASCommandHelper

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCommandHelper_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)executeCommandWithASIActivity:(id<ASIActivity>)activity
                               withId:(id)command
                         withNSString:(NSString *)strpayLoad
   withASCommandHelper_SucessCallBack:(id<ASCommandHelper_SucessCallBack>)successCallBack {
  ASCommandHelper_executeCommandWithASIActivity_withId_withNSString_withASCommandHelper_SucessCallBack_(activity, command, strpayLoad, successCallBack);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(executeCommandWithASIActivity:withId:withNSString:withASCommandHelper_SucessCallBack:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "executeCommand", "LASIActivity;LNSObject;LNSString;LASCommandHelper_SucessCallBack;", "LASCommandHelper_SucessCallBack;" };
  static const J2ObjcClassInfo _ASCommandHelper = { "CommandHelper", "com.ashera.utils", ptrTable, methods, NULL, 7, 0x1, 2, 0, -1, 2, -1, -1, -1 };
  return &_ASCommandHelper;
}

@end

void ASCommandHelper_init(ASCommandHelper *self) {
  NSObject_init(self);
}

ASCommandHelper *new_ASCommandHelper_init() {
  J2OBJC_NEW_IMPL(ASCommandHelper, init)
}

ASCommandHelper *create_ASCommandHelper_init() {
  J2OBJC_CREATE_IMPL(ASCommandHelper, init)
}

void ASCommandHelper_executeCommandWithASIActivity_withId_withNSString_withASCommandHelper_SucessCallBack_(id<ASIActivity> activity, id command, NSString *strpayLoad, id<ASCommandHelper_SucessCallBack> successCallBack) {
  ASCommandHelper_initialize();
  id<ASIFragment> fragment = [((id<ASIActivity>) nil_chk(activity)) getActiveRootFragment];
  id<ASIWidget> w = JreRetainedLocalValue([((id<ASIFragment>) nil_chk(fragment)) getRootWidget]);
  id payLoad = ASPluginInvoker_unmarshalWithNSString_withIOSClass_(strpayLoad, JavaUtilList_class_());
  if (payLoad != nil) {
    id<JavaUtilList> commandDataArr = ASPluginInvoker_getListWithId_(payLoad);
    [((id<ASIWidget>) nil_chk(w)) executeCommandWithASIWidget:w withJavaUtilList:commandDataArr withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [fragment remeasure];
    [w executeCommandWithASIWidget:w withJavaUtilList:commandDataArr withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  }
  [((id<ASCommandHelper_SucessCallBack>) nil_chk(successCallBack)) successWithId:command withNSString:ASPluginInvoker_marshalWithId_(payLoad)];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCommandHelper)

@implementation ASCommandHelper_SucessCallBack

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(successWithId:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "success", "LNSObject;LNSString;", "LASCommandHelper;" };
  static const J2ObjcClassInfo _ASCommandHelper_SucessCallBack = { "SucessCallBack", "com.ashera.utils", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ASCommandHelper_SucessCallBack;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ASCommandHelper_SucessCallBack)
