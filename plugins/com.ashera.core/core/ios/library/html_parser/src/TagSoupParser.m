//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\TagSoupParser.java
//

#include "AttributesImpl.h"
#include "AutoDetector.h"
#include "Element.h"
#include "ElementType.h"
#include "HTMLScanner.h"
#include "HTMLSchema.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Scanner.h"
#include "Schema.h"
#include "TagSoupParser.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/io/InputStreamReader.h"
#include "java/io/Reader.h"
#include "java/io/UnsupportedEncodingException.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/lang/StringBuffer.h"
#include "java/lang/System.h"
#include "java/net/URL.h"
#include "java/net/URLConnection.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "org/xml/sax/Attributes.h"
#include "org/xml/sax/ContentHandler.h"
#include "org/xml/sax/DTDHandler.h"
#include "org/xml/sax/EntityResolver.h"
#include "org/xml/sax/ErrorHandler.h"
#include "org/xml/sax/InputSource.h"
#include "org/xml/sax/Locator.h"
#include "org/xml/sax/SAXNotRecognizedException.h"
#include "org/xml/sax/SAXNotSupportedException.h"
#include "org/xml/sax/ext/LexicalHandler.h"
#include "org/xml/sax/helpers/DefaultHandler.h"

@class JavaIoInputStream;
@class JavaIoReader;
@class JavaLangBoolean;
@class JavaUtilHashMap;
@class OrgXmlSaxInputSource;
@protocol OrgXmlSaxContentHandler;
@protocol OrgXmlSaxDTDHandler;
@protocol OrgXmlSaxEntityResolver;
@protocol OrgXmlSaxErrorHandler;
@protocol OrgXmlSaxExtLexicalHandler;


@interface TSTagSoupParser () {
 @public
  __unsafe_unretained id<OrgXmlSaxContentHandler> theContentHandler_;
  __unsafe_unretained id<OrgXmlSaxExtLexicalHandler> theLexicalHandler_;
  __unsafe_unretained id<OrgXmlSaxDTDHandler> theDTDHandler_;
  __unsafe_unretained id<OrgXmlSaxErrorHandler> theErrorHandler_;
  __unsafe_unretained id<OrgXmlSaxEntityResolver> theEntityResolver_;
  TSSchema *theSchema_;
  id<TSScanner> theScanner_;
  id<TSAutoDetector> theAutoDetector_;
  jboolean namespaces_;
  jboolean ignoreBogons_;
  jboolean bogonsEmpty_;
  jboolean rootBogons_;
  jboolean defaultAttributes_;
  jboolean translateColons_;
  jboolean restartElements_;
  jboolean ignorableWhitespace_;
  jboolean CDATAElements_;
  JavaUtilHashMap *theFeatures_;
  TSElement *theNewElement_;
  NSString *theAttributeName_;
  jboolean theDoctypeIsPresent_;
  NSString *theDoctypePublicId_;
  NSString *theDoctypeSystemId_;
  NSString *theDoctypeName_;
  NSString *thePITarget_;
  TSElement *theStack_;
  TSElement *theSaved_;
  TSElement *thePCDATA_;
  jint theEntity_;
  jboolean virginStack_;
  IOSCharArray *theCommentBuffer_;
}

+ (JavaLangBoolean *)truthValueWithBoolean:(jboolean)b;

- (void)setup;

- (JavaIoReader *)getReaderWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)s;

- (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)publicid
                                     withNSString:(NSString *)systemid;

- (NSString *)expandEntitiesWithNSString:(NSString *)src;

- (jint)lookupEntityWithCharArray:(IOSCharArray *)buff
                          withInt:(jint)offset
                          withInt:(jint)length;

- (void)restartWithTSElement:(TSElement *)e;

- (void)pop;

- (void)restartablyPop;

- (void)pushWithTSElement:(TSElement *)e;

- (NSString *)prefixOfWithNSString:(NSString *)name;

- (jboolean)foreignWithNSString:(NSString *)prefix
                   withNSString:(NSString *)namespace_;

+ (NSString *)trimquotesWithNSString:(NSString *)inArg;

+ (IOSObjectArray *)splitWithNSString:(NSString *)val;

- (NSString *)cleanPublicidWithNSString:(NSString *)src;

- (void)rectifyWithTSElement:(TSElement *)e;

- (NSString *)makeNameWithCharArray:(IOSCharArray *)buff
                            withInt:(jint)offset
                            withInt:(jint)length;

@end

J2OBJC_FIELD_SETTER(TSTagSoupParser, theSchema_, TSSchema *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theScanner_, id<TSScanner>)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theAutoDetector_, id<TSAutoDetector>)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theFeatures_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theNewElement_, TSElement *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theAttributeName_, NSString *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theDoctypePublicId_, NSString *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theDoctypeSystemId_, NSString *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theDoctypeName_, NSString *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, thePITarget_, NSString *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theStack_, TSElement *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theSaved_, TSElement *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, thePCDATA_, TSElement *)
J2OBJC_FIELD_SETTER(TSTagSoupParser, theCommentBuffer_, IOSCharArray *)

inline jboolean TSTagSoupParser_get_DEFAULT_NAMESPACES(void);
inline jboolean TSTagSoupParser_set_DEFAULT_NAMESPACES(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_NAMESPACES(void);
static jboolean TSTagSoupParser_DEFAULT_NAMESPACES = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_NAMESPACES, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_IGNORE_BOGONS(void);
inline jboolean TSTagSoupParser_set_DEFAULT_IGNORE_BOGONS(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_IGNORE_BOGONS(void);
static jboolean TSTagSoupParser_DEFAULT_IGNORE_BOGONS = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_IGNORE_BOGONS, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_BOGONS_EMPTY(void);
inline jboolean TSTagSoupParser_set_DEFAULT_BOGONS_EMPTY(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_BOGONS_EMPTY(void);
static jboolean TSTagSoupParser_DEFAULT_BOGONS_EMPTY = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_BOGONS_EMPTY, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_ROOT_BOGONS(void);
inline jboolean TSTagSoupParser_set_DEFAULT_ROOT_BOGONS(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_ROOT_BOGONS(void);
static jboolean TSTagSoupParser_DEFAULT_ROOT_BOGONS = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_ROOT_BOGONS, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_DEFAULT_ATTRIBUTES(void);
inline jboolean TSTagSoupParser_set_DEFAULT_DEFAULT_ATTRIBUTES(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_DEFAULT_ATTRIBUTES(void);
static jboolean TSTagSoupParser_DEFAULT_DEFAULT_ATTRIBUTES = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_DEFAULT_ATTRIBUTES, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_TRANSLATE_COLONS(void);
inline jboolean TSTagSoupParser_set_DEFAULT_TRANSLATE_COLONS(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_TRANSLATE_COLONS(void);
static jboolean TSTagSoupParser_DEFAULT_TRANSLATE_COLONS = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_TRANSLATE_COLONS, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_RESTART_ELEMENTS(void);
inline jboolean TSTagSoupParser_set_DEFAULT_RESTART_ELEMENTS(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_RESTART_ELEMENTS(void);
static jboolean TSTagSoupParser_DEFAULT_RESTART_ELEMENTS = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_RESTART_ELEMENTS, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_IGNORABLE_WHITESPACE(void);
inline jboolean TSTagSoupParser_set_DEFAULT_IGNORABLE_WHITESPACE(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_IGNORABLE_WHITESPACE(void);
static jboolean TSTagSoupParser_DEFAULT_IGNORABLE_WHITESPACE = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_IGNORABLE_WHITESPACE, jboolean)

inline jboolean TSTagSoupParser_get_DEFAULT_CDATA_ELEMENTS(void);
inline jboolean TSTagSoupParser_set_DEFAULT_CDATA_ELEMENTS(jboolean value);
inline jboolean *TSTagSoupParser_getRef_DEFAULT_CDATA_ELEMENTS(void);
static jboolean TSTagSoupParser_DEFAULT_CDATA_ELEMENTS = true;
J2OBJC_STATIC_FIELD_PRIMITIVE(TSTagSoupParser, DEFAULT_CDATA_ELEMENTS, jboolean)

inline IOSCharArray *TSTagSoupParser_get_etagchars(void);
inline IOSCharArray *TSTagSoupParser_set_etagchars(IOSCharArray *value);
static IOSCharArray *TSTagSoupParser_etagchars;
J2OBJC_STATIC_FIELD_OBJ(TSTagSoupParser, etagchars, IOSCharArray *)

inline NSString *TSTagSoupParser_get_legal(void);
inline NSString *TSTagSoupParser_set_legal(NSString *value);
static NSString *TSTagSoupParser_legal = @"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-'()+,./:=?;!*#@$_%";
J2OBJC_STATIC_FIELD_OBJ(TSTagSoupParser, legal, NSString *)

__attribute__((unused)) static JavaLangBoolean *TSTagSoupParser_truthValueWithBoolean_(jboolean b);

__attribute__((unused)) static void TSTagSoupParser_setup(TSTagSoupParser *self);

__attribute__((unused)) static JavaIoReader *TSTagSoupParser_getReaderWithOrgXmlSaxInputSource_(TSTagSoupParser *self, OrgXmlSaxInputSource *s);

__attribute__((unused)) static JavaIoInputStream *TSTagSoupParser_getInputStreamWithNSString_withNSString_(TSTagSoupParser *self, NSString *publicid, NSString *systemid);

__attribute__((unused)) static NSString *TSTagSoupParser_expandEntitiesWithNSString_(TSTagSoupParser *self, NSString *src);

__attribute__((unused)) static jint TSTagSoupParser_lookupEntityWithCharArray_withInt_withInt_(TSTagSoupParser *self, IOSCharArray *buff, jint offset, jint length);

__attribute__((unused)) static void TSTagSoupParser_restartWithTSElement_(TSTagSoupParser *self, TSElement *e);

__attribute__((unused)) static void TSTagSoupParser_pop(TSTagSoupParser *self);

__attribute__((unused)) static void TSTagSoupParser_restartablyPop(TSTagSoupParser *self);

__attribute__((unused)) static void TSTagSoupParser_pushWithTSElement_(TSTagSoupParser *self, TSElement *e);

__attribute__((unused)) static NSString *TSTagSoupParser_prefixOfWithNSString_(TSTagSoupParser *self, NSString *name);

__attribute__((unused)) static jboolean TSTagSoupParser_foreignWithNSString_withNSString_(TSTagSoupParser *self, NSString *prefix, NSString *namespace_);

__attribute__((unused)) static NSString *TSTagSoupParser_trimquotesWithNSString_(NSString *inArg);

__attribute__((unused)) static IOSObjectArray *TSTagSoupParser_splitWithNSString_(NSString *val);

__attribute__((unused)) static NSString *TSTagSoupParser_cleanPublicidWithNSString_(TSTagSoupParser *self, NSString *src);

__attribute__((unused)) static void TSTagSoupParser_rectifyWithTSElement_(TSTagSoupParser *self, TSElement *e);

__attribute__((unused)) static NSString *TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(TSTagSoupParser *self, IOSCharArray *buff, jint offset, jint length);

@interface TSTagSoupParser_1 : NSObject < TSAutoDetector >

- (instancetype)init;

- (JavaIoReader *)autoDetectingReaderWithJavaIoInputStream:(JavaIoInputStream *)i;

@end

J2OBJC_EMPTY_STATIC_INIT(TSTagSoupParser_1)

__attribute__((unused)) static void TSTagSoupParser_1_init(TSTagSoupParser_1 *self);

__attribute__((unused)) static TSTagSoupParser_1 *new_TSTagSoupParser_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static TSTagSoupParser_1 *create_TSTagSoupParser_1_init(void);

J2OBJC_INITIALIZED_DEFN(TSTagSoupParser)

NSString *TSTagSoupParser_namespacesFeature = @"http://xml.org/sax/features/namespaces";
NSString *TSTagSoupParser_namespacePrefixesFeature = @"http://xml.org/sax/features/namespace-prefixes";
NSString *TSTagSoupParser_externalGeneralEntitiesFeature = @"http://xml.org/sax/features/external-general-entities";
NSString *TSTagSoupParser_externalParameterEntitiesFeature = @"http://xml.org/sax/features/external-parameter-entities";
NSString *TSTagSoupParser_isStandaloneFeature = @"http://xml.org/sax/features/is-standalone";
NSString *TSTagSoupParser_lexicalHandlerParameterEntitiesFeature = @"http://xml.org/sax/features/lexical-handler/parameter-entities";
NSString *TSTagSoupParser_resolveDTDURIsFeature = @"http://xml.org/sax/features/resolve-dtd-uris";
NSString *TSTagSoupParser_stringInterningFeature = @"http://xml.org/sax/features/string-interning";
NSString *TSTagSoupParser_useAttributes2Feature = @"http://xml.org/sax/features/use-attributes2";
NSString *TSTagSoupParser_useLocator2Feature = @"http://xml.org/sax/features/use-locator2";
NSString *TSTagSoupParser_useEntityResolver2Feature = @"http://xml.org/sax/features/use-entity-resolver2";
NSString *TSTagSoupParser_validationFeature = @"http://xml.org/sax/features/validation";
NSString *TSTagSoupParser_unicodeNormalizationCheckingFeature = @"http://xml.org/sax/features/unicode-normalization-checking";
NSString *TSTagSoupParser_xmlnsURIsFeature = @"http://xml.org/sax/features/xmlns-uris";
NSString *TSTagSoupParser_XML11Feature = @"http://xml.org/sax/features/xml-1.1";
NSString *TSTagSoupParser_ignoreBogonsFeature = @"http://www.ccil.org/~cowan/tagsoup/features/ignore-bogons";
NSString *TSTagSoupParser_bogonsEmptyFeature = @"http://www.ccil.org/~cowan/tagsoup/features/bogons-empty";
NSString *TSTagSoupParser_rootBogonsFeature = @"http://www.ccil.org/~cowan/tagsoup/features/root-bogons";
NSString *TSTagSoupParser_defaultAttributesFeature = @"http://www.ccil.org/~cowan/tagsoup/features/default-attributes";
NSString *TSTagSoupParser_translateColonsFeature = @"http://www.ccil.org/~cowan/tagsoup/features/translate-colons";
NSString *TSTagSoupParser_restartElementsFeature = @"http://www.ccil.org/~cowan/tagsoup/features/restart-elements";
NSString *TSTagSoupParser_ignorableWhitespaceFeature = @"http://www.ccil.org/~cowan/tagsoup/features/ignorable-whitespace";
NSString *TSTagSoupParser_CDATAElementsFeature = @"http://www.ccil.org/~cowan/tagsoup/features/cdata-elements";
NSString *TSTagSoupParser_lexicalHandlerProperty = @"http://xml.org/sax/properties/lexical-handler";
NSString *TSTagSoupParser_scannerProperty = @"http://www.ccil.org/~cowan/tagsoup/properties/scanner";
NSString *TSTagSoupParser_schemaProperty = @"http://www.ccil.org/~cowan/tagsoup/properties/schema";
NSString *TSTagSoupParser_autoDetectorProperty = @"http://www.ccil.org/~cowan/tagsoup/properties/auto-detector";

@implementation TSTagSoupParser

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TSTagSoupParser_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (JavaLangBoolean *)truthValueWithBoolean:(jboolean)b {
  return TSTagSoupParser_truthValueWithBoolean_(b);
}

- (jboolean)getFeatureWithNSString:(NSString *)name {
  JavaLangBoolean *b = (JavaLangBoolean *) cast_chk([((JavaUtilHashMap *) nil_chk(theFeatures_)) getWithId:name], [JavaLangBoolean class]);
  if (b == nil) {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(JreStrcat("$$", @"Unknown feature ", name));
  }
  return [b booleanValue];
}

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value {
  JavaLangBoolean *b = (JavaLangBoolean *) cast_chk([((JavaUtilHashMap *) nil_chk(theFeatures_)) getWithId:name], [JavaLangBoolean class]);
  if (b == nil) {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(JreStrcat("$$", @"Unknown feature ", name));
  }
  if (value) [((JavaUtilHashMap *) nil_chk(theFeatures_)) putWithId:name withId:JreLoadStatic(JavaLangBoolean, TRUE)];
  else [((JavaUtilHashMap *) nil_chk(theFeatures_)) putWithId:name withId:JreLoadStatic(JavaLangBoolean, FALSE)];
  if ([((NSString *) nil_chk(name)) isEqual:TSTagSoupParser_namespacesFeature]) namespaces_ = value;
  else if ([name isEqual:TSTagSoupParser_ignoreBogonsFeature]) ignoreBogons_ = value;
  else if ([name isEqual:TSTagSoupParser_bogonsEmptyFeature]) bogonsEmpty_ = value;
  else if ([name isEqual:TSTagSoupParser_rootBogonsFeature]) rootBogons_ = value;
  else if ([name isEqual:TSTagSoupParser_defaultAttributesFeature]) defaultAttributes_ = value;
  else if ([name isEqual:TSTagSoupParser_translateColonsFeature]) translateColons_ = value;
  else if ([name isEqual:TSTagSoupParser_restartElementsFeature]) restartElements_ = value;
  else if ([name isEqual:TSTagSoupParser_ignorableWhitespaceFeature]) ignorableWhitespace_ = value;
  else if ([name isEqual:TSTagSoupParser_CDATAElementsFeature]) CDATAElements_ = value;
}

- (id)getPropertyWithNSString:(NSString *)name {
  if ([((NSString *) nil_chk(name)) isEqual:TSTagSoupParser_lexicalHandlerProperty]) {
    return theLexicalHandler_ == self ? nil : theLexicalHandler_;
  }
  else if ([name isEqual:TSTagSoupParser_scannerProperty]) {
    return theScanner_;
  }
  else if ([name isEqual:TSTagSoupParser_schemaProperty]) {
    return theSchema_;
  }
  else if ([name isEqual:TSTagSoupParser_autoDetectorProperty]) {
    return theAutoDetector_;
  }
  else {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(JreStrcat("$$", @"Unknown property ", name));
  }
}

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value {
  if ([((NSString *) nil_chk(name)) isEqual:TSTagSoupParser_lexicalHandlerProperty]) {
    if (value == nil) {
      theLexicalHandler_ = self;
    }
    else if ([OrgXmlSaxExtLexicalHandler_class_() isInstance:value]) {
      theLexicalHandler_ = (id<OrgXmlSaxExtLexicalHandler>) cast_check(value, OrgXmlSaxExtLexicalHandler_class_());
    }
    else {
      @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(@"Your lexical handler is not a LexicalHandler");
    }
  }
  else if ([name isEqual:TSTagSoupParser_scannerProperty]) {
    if ([TSScanner_class_() isInstance:value]) {
      JreStrongAssign(&theScanner_, (id<TSScanner>) cast_check(value, TSScanner_class_()));
    }
    else {
      @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(@"Your scanner is not a Scanner");
    }
  }
  else if ([name isEqual:TSTagSoupParser_schemaProperty]) {
    if ([value isKindOfClass:[TSSchema class]]) {
      JreStrongAssign(&theSchema_, (TSSchema *) value);
    }
    else {
      @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(@"Your schema is not a Schema");
    }
  }
  else if ([name isEqual:TSTagSoupParser_autoDetectorProperty]) {
    if ([TSAutoDetector_class_() isInstance:value]) {
      JreStrongAssign(&theAutoDetector_, (id<TSAutoDetector>) cast_check(value, TSAutoDetector_class_()));
    }
    else {
      @throw create_OrgXmlSaxSAXNotSupportedException_initWithNSString_(@"Your auto-detector is not an AutoDetector");
    }
  }
  else {
    @throw create_OrgXmlSaxSAXNotRecognizedException_initWithNSString_(JreStrcat("$$", @"Unknown property ", name));
  }
}

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver {
  theEntityResolver_ = (resolver == nil) ? self : resolver;
}

- (id<OrgXmlSaxEntityResolver>)getEntityResolver {
  return (theEntityResolver_ == self) ? nil : theEntityResolver_;
}

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler {
  theDTDHandler_ = (handler == nil) ? self : handler;
}

- (id<OrgXmlSaxDTDHandler>)getDTDHandler {
  return (theDTDHandler_ == self) ? nil : theDTDHandler_;
}

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler {
  theContentHandler_ = (handler == nil) ? self : handler;
}

- (id<OrgXmlSaxContentHandler>)getContentHandler {
  return (theContentHandler_ == self) ? nil : theContentHandler_;
}

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler {
  theErrorHandler_ = (handler == nil) ? self : handler;
}

- (id<OrgXmlSaxErrorHandler>)getErrorHandler {
  return (theErrorHandler_ == self) ? nil : theErrorHandler_;
}

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input {
  TSTagSoupParser_setup(self);
  JavaIoReader *r = TSTagSoupParser_getReaderWithOrgXmlSaxInputSource_(self, input);
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) startDocument];
  [((id<TSScanner>) nil_chk(theScanner_)) resetDocumentLocatorWithNSString:[((OrgXmlSaxInputSource *) nil_chk(input)) getPublicId] withNSString:[input getSystemId]];
  if ([OrgXmlSaxLocator_class_() isInstance:theScanner_]) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) setDocumentLocatorWithOrgXmlSaxLocator:(id<OrgXmlSaxLocator>) cast_check(theScanner_, OrgXmlSaxLocator_class_())];
  }
  if (!([((NSString *) nil_chk([((TSSchema *) nil_chk(theSchema_)) getURI])) isEqual:@""])) [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) startPrefixMappingWithNSString:[((TSSchema *) nil_chk(theSchema_)) getPrefix] withNSString:[((TSSchema *) nil_chk(theSchema_)) getURI]];
  [((id<TSScanner>) nil_chk(theScanner_)) scanWithJavaIoReader:r withTSScanHandler:self];
}

- (void)parseWithNSString:(NSString *)systemid {
  [self parseWithOrgXmlSaxInputSource:create_OrgXmlSaxInputSource_initWithNSString_(systemid)];
}

- (void)setup {
  TSTagSoupParser_setup(self);
}

- (JavaIoReader *)getReaderWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)s {
  return TSTagSoupParser_getReaderWithOrgXmlSaxInputSource_(self, s);
}

- (JavaIoInputStream *)getInputStreamWithNSString:(NSString *)publicid
                                     withNSString:(NSString *)systemid {
  return TSTagSoupParser_getInputStreamWithNSString_withNSString_(self, publicid, systemid);
}

- (void)adupWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length {
  if (theNewElement_ == nil || theAttributeName_ == nil) return;
  [theNewElement_ setAttributeWithNSString:theAttributeName_ withNSString:nil withNSString:theAttributeName_];
  JreStrongAssign(&theAttributeName_, nil);
}

- (void)anameWithCharArray:(IOSCharArray *)buff
                   withInt:(jint)offset
                   withInt:(jint)length {
  if (theNewElement_ == nil) return;
  JreStrongAssign(&theAttributeName_, TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(self, buff, offset, length));
}

- (void)avalWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length {
  if (theNewElement_ == nil || theAttributeName_ == nil) return;
  NSString *value = [NSString java_stringWithCharacters:buff offset:offset length:length];
  value = TSTagSoupParser_expandEntitiesWithNSString_(self, value);
  [((TSElement *) nil_chk(theNewElement_)) setAttributeWithNSString:theAttributeName_ withNSString:nil withNSString:value];
  JreStrongAssign(&theAttributeName_, nil);
}

- (NSString *)expandEntitiesWithNSString:(NSString *)src {
  return TSTagSoupParser_expandEntitiesWithNSString_(self, src);
}

- (void)entityWithCharArray:(IOSCharArray *)buff
                    withInt:(jint)offset
                    withInt:(jint)length {
  theEntity_ = TSTagSoupParser_lookupEntityWithCharArray_withInt_withInt_(self, buff, offset, length);
}

- (jint)lookupEntityWithCharArray:(IOSCharArray *)buff
                          withInt:(jint)offset
                          withInt:(jint)length {
  return TSTagSoupParser_lookupEntityWithCharArray_withInt_withInt_(self, buff, offset, length);
}

- (void)eofWithCharArray:(IOSCharArray *)buff
                 withInt:(jint)offset
                 withInt:(jint)length {
  if (virginStack_) TSTagSoupParser_rectifyWithTSElement_(self, thePCDATA_);
  while ([((TSElement *) nil_chk(theStack_)) next] != nil) {
    TSTagSoupParser_pop(self);
  }
  if (!([((NSString *) nil_chk([((TSSchema *) nil_chk(theSchema_)) getURI])) isEqual:@""])) [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) endPrefixMappingWithNSString:[((TSSchema *) nil_chk(theSchema_)) getPrefix]];
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) endDocument];
}

- (void)etagWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length {
  if ([self etag_cdataWithCharArray:buff withInt:offset withInt:length]) return;
  [self etag_basicWithCharArray:buff withInt:offset withInt:length];
}

- (jboolean)etag_cdataWithCharArray:(IOSCharArray *)buff
                            withInt:(jint)offset
                            withInt:(jint)length {
  NSString *currentName = JreRetainedLocalValue([((TSElement *) nil_chk(theStack_)) name]);
  if (CDATAElements_ && ([((TSElement *) nil_chk(theStack_)) flags] & TSSchema_F_CDATA) != 0) {
    jboolean realTag = length == [((NSString *) nil_chk(currentName)) java_length];
    if (realTag) {
      for (jint i = 0; i < length; i++) {
        if (JavaLangCharacter_toLowerCaseWithChar_(IOSCharArray_Get(nil_chk(buff), offset + i)) != JavaLangCharacter_toLowerCaseWithChar_([currentName charAtWithInt:i])) {
          realTag = false;
          break;
        }
      }
    }
    if (!realTag) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) charactersWithCharArray:TSTagSoupParser_etagchars withInt:0 withInt:2];
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) charactersWithCharArray:buff withInt:offset withInt:length];
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) charactersWithCharArray:TSTagSoupParser_etagchars withInt:2 withInt:1];
      [((id<TSScanner>) nil_chk(theScanner_)) startCDATA];
      return true;
    }
  }
  return false;
}

- (void)etag_basicWithCharArray:(IOSCharArray *)buff
                        withInt:(jint)offset
                        withInt:(jint)length {
  JreStrongAssign(&theNewElement_, nil);
  NSString *name;
  if (length != 0) {
    name = TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(self, buff, offset, length);
    TSElementType *type = JreRetainedLocalValue([((TSSchema *) nil_chk(theSchema_)) getElementTypeWithNSString:name]);
    if (type == nil) return;
    name = [type name];
  }
  else {
    name = [((TSElement *) nil_chk(theStack_)) name];
  }
  TSElement *sp;
  jboolean inNoforce = false;
  for (sp = theStack_; sp != nil; sp = [sp next]) {
    if ([((NSString *) nil_chk([sp name])) isEqual:name]) break;
    if (([sp flags] & TSSchema_F_NOFORCE) != 0) inNoforce = true;
  }
  if (sp == nil) return;
  if ([sp next] == nil || [((TSElement *) nil_chk([sp next])) next] == nil) return;
  if (inNoforce) {
    [sp preclose];
  }
  else {
    while (theStack_ != sp) {
      TSTagSoupParser_restartablyPop(self);
    }
    TSTagSoupParser_pop(self);
  }
  while ([((TSElement *) nil_chk(theStack_)) isPreclosed]) {
    TSTagSoupParser_pop(self);
  }
  TSTagSoupParser_restartWithTSElement_(self, nil);
}

- (void)restartWithTSElement:(TSElement *)e {
  TSTagSoupParser_restartWithTSElement_(self, e);
}

- (void)pop {
  TSTagSoupParser_pop(self);
}

- (void)restartablyPop {
  TSTagSoupParser_restartablyPop(self);
}

- (void)pushWithTSElement:(TSElement *)e {
  TSTagSoupParser_pushWithTSElement_(self, e);
}

- (NSString *)prefixOfWithNSString:(NSString *)name {
  return TSTagSoupParser_prefixOfWithNSString_(self, name);
}

- (jboolean)foreignWithNSString:(NSString *)prefix
                   withNSString:(NSString *)namespace_ {
  return TSTagSoupParser_foreignWithNSString_withNSString_(self, prefix, namespace_);
}

- (void)declWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length {
  NSString *s = [NSString java_stringWithCharacters:buff offset:offset length:length];
  NSString *name = nil;
  NSString *systemid = nil;
  NSString *publicid = nil;
  IOSObjectArray *v = TSTagSoupParser_splitWithNSString_(s);
  if (((IOSObjectArray *) nil_chk(v))->size_ > 0 && [@"DOCTYPE" java_equalsIgnoreCase:IOSObjectArray_Get(v, 0)]) {
    if (theDoctypeIsPresent_) return;
    theDoctypeIsPresent_ = true;
    if (v->size_ > 1) {
      name = IOSObjectArray_Get(v, 1);
      if (v->size_ > 3 && [@"SYSTEM" isEqual:IOSObjectArray_Get(v, 2)]) {
        systemid = IOSObjectArray_Get(v, 3);
      }
      else if (v->size_ > 3 && [@"PUBLIC" isEqual:IOSObjectArray_Get(v, 2)]) {
        publicid = IOSObjectArray_Get(v, 3);
        if (v->size_ > 4) {
          systemid = IOSObjectArray_Get(v, 4);
        }
        else {
          systemid = @"";
        }
      }
    }
  }
  publicid = TSTagSoupParser_trimquotesWithNSString_(publicid);
  systemid = TSTagSoupParser_trimquotesWithNSString_(systemid);
  if (name != nil) {
    publicid = TSTagSoupParser_cleanPublicidWithNSString_(self, publicid);
    [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) startDTDWithNSString:name withNSString:publicid withNSString:systemid];
    [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) endDTD];
    JreStrongAssign(&theDoctypeName_, name);
    JreStrongAssign(&theDoctypePublicId_, publicid);
    if ([OrgXmlSaxLocator_class_() isInstance:theScanner_]) {
      JreStrongAssign(&theDoctypeSystemId_, [((id<OrgXmlSaxLocator>) nil_chk(((id<OrgXmlSaxLocator>) cast_check(theScanner_, OrgXmlSaxLocator_class_())))) getSystemId]);
      @try {
        JreStrongAssign(&theDoctypeSystemId_, [create_JavaNetURL_initWithJavaNetURL_withNSString_(create_JavaNetURL_initWithNSString_(theDoctypeSystemId_), systemid) description]);
      }
      @catch (JavaLangException *e) {
      }
    }
  }
}

+ (NSString *)trimquotesWithNSString:(NSString *)inArg {
  return TSTagSoupParser_trimquotesWithNSString_(inArg);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)val {
  return TSTagSoupParser_splitWithNSString_(val);
}

- (NSString *)cleanPublicidWithNSString:(NSString *)src {
  return TSTagSoupParser_cleanPublicidWithNSString_(self, src);
}

- (void)giWithCharArray:(IOSCharArray *)buff
                withInt:(jint)offset
                withInt:(jint)length {
  if (theNewElement_ != nil) return;
  NSString *name = TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(self, buff, offset, length);
  if (name == nil) return;
  TSElementType *type = JreRetainedLocalValue([((TSSchema *) nil_chk(theSchema_)) getElementTypeWithNSString:name]);
  if (type == nil) {
    if (ignoreBogons_) return;
    jint bogonModel = bogonsEmpty_ ? TSSchema_M_EMPTY : TSSchema_M_ANY;
    jint bogonMemberOf = rootBogons_ ? TSSchema_M_ANY : (TSSchema_M_ANY & ~TSSchema_M_ROOT);
    [((TSSchema *) nil_chk(theSchema_)) elementTypeWithNSString:name withInt:bogonModel withInt:bogonMemberOf withInt:0];
    if (!rootBogons_) [((TSSchema *) nil_chk(theSchema_)) parentWithNSString:name withNSString:[((TSElementType *) nil_chk([theSchema_ rootElementType])) name]];
    type = [((TSSchema *) nil_chk(theSchema_)) getElementTypeWithNSString:name];
  }
  JreStrongAssignAndConsume(&theNewElement_, new_TSElement_initWithTSElementType_withBoolean_(type, defaultAttributes_));
}

- (void)cdsectWithCharArray:(IOSCharArray *)buff
                    withInt:(jint)offset
                    withInt:(jint)length {
  [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) startCDATA];
  [self pcdataWithCharArray:buff withInt:offset withInt:length];
  [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) endCDATA];
}

- (void)pcdataWithCharArray:(IOSCharArray *)buff
                    withInt:(jint)offset
                    withInt:(jint)length {
  if (length == 0) return;
  jboolean allWhite = true;
  for (jint i = 0; i < length; i++) {
    if (!JavaLangCharacter_isWhitespaceWithChar_(IOSCharArray_Get(nil_chk(buff), offset + i))) {
      allWhite = false;
    }
  }
  if (allWhite && ![((TSElement *) nil_chk(theStack_)) canContainWithTSElement:thePCDATA_]) {
    if (ignorableWhitespace_) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) ignorableWhitespaceWithCharArray:buff withInt:offset withInt:length];
    }
  }
  else {
    TSTagSoupParser_rectifyWithTSElement_(self, thePCDATA_);
    [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) charactersWithCharArray:buff withInt:offset withInt:length];
  }
}

- (void)pitargetWithCharArray:(IOSCharArray *)buff
                      withInt:(jint)offset
                      withInt:(jint)length {
  if (theNewElement_ != nil) return;
  JreStrongAssign(&thePITarget_, [(TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(self, buff, offset, length)) java_replace:':' withChar:'_']);
}

- (void)piWithCharArray:(IOSCharArray *)buff
                withInt:(jint)offset
                withInt:(jint)length {
  if (theNewElement_ != nil || thePITarget_ == nil) return;
  if ([@"xml" java_equalsIgnoreCase:thePITarget_]) return;
  if (length > 0 && IOSCharArray_Get(nil_chk(buff), length - 1) == '?') length--;
  [((id<OrgXmlSaxContentHandler>) nil_chk(theContentHandler_)) processingInstructionWithNSString:thePITarget_ withNSString:[NSString java_stringWithCharacters:buff offset:offset length:length]];
  JreStrongAssign(&thePITarget_, nil);
}

- (void)stagcWithCharArray:(IOSCharArray *)buff
                   withInt:(jint)offset
                   withInt:(jint)length {
  if (theNewElement_ == nil) return;
  TSTagSoupParser_rectifyWithTSElement_(self, theNewElement_);
  if ([((TSElement *) nil_chk(theStack_)) model] == TSSchema_M_EMPTY) {
    [self etag_basicWithCharArray:buff withInt:offset withInt:length];
  }
}

- (void)stageWithCharArray:(IOSCharArray *)buff
                   withInt:(jint)offset
                   withInt:(jint)length {
  if (theNewElement_ == nil) return;
  TSTagSoupParser_rectifyWithTSElement_(self, theNewElement_);
  [self etag_basicWithCharArray:buff withInt:offset withInt:length];
}

- (void)cmntWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length {
  [((id<OrgXmlSaxExtLexicalHandler>) nil_chk(theLexicalHandler_)) commentWithCharArray:buff withInt:offset withInt:length];
}

- (void)rectifyWithTSElement:(TSElement *)e {
  TSTagSoupParser_rectifyWithTSElement_(self, e);
}

- (jint)getEntity {
  return theEntity_;
}

- (NSString *)makeNameWithCharArray:(IOSCharArray *)buff
                            withInt:(jint)offset
                            withInt:(jint)length {
  return TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(self, buff, offset, length);
}

- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(jint)start
                     withInt:(jint)length {
}

- (void)endCDATA {
}

- (void)endDTD {
}

- (void)endEntityWithNSString:(NSString *)name {
}

- (void)startCDATA {
}

- (void)startDTDWithNSString:(NSString *)name
                withNSString:(NSString *)publicid
                withNSString:(NSString *)systemid {
}

- (void)startEntityWithNSString:(NSString *)name {
}

- (void)__javaClone:(TSTagSoupParser *)original {
  [super __javaClone:original];
  [theContentHandler_ release];
  [theLexicalHandler_ release];
  [theDTDHandler_ release];
  [theErrorHandler_ release];
  [theEntityResolver_ release];
}

- (void)dealloc {
  RELEASE_(theSchema_);
  RELEASE_(theScanner_);
  RELEASE_(theAutoDetector_);
  RELEASE_(theFeatures_);
  RELEASE_(theNewElement_);
  RELEASE_(theAttributeName_);
  RELEASE_(theDoctypePublicId_);
  RELEASE_(theDoctypeSystemId_);
  RELEASE_(theDoctypeName_);
  RELEASE_(thePITarget_);
  RELEASE_(theStack_);
  RELEASE_(theSaved_);
  RELEASE_(thePCDATA_);
  RELEASE_(theCommentBuffer_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, 4, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 3, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxEntityResolver;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxDTDHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxContentHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LOrgXmlSaxErrorHandler;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, 20, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, 20, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x2, 21, 19, 22, -1, -1, -1 },
    { NULL, "LJavaIoInputStream;", 0x2, 23, 24, 20, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 26, 27, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 30, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 26, 27, -1, -1, -1 },
    { NULL, "I", 0x2, 32, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 26, 27, -1, -1, -1 },
    { NULL, "Z", 0x1, 35, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, 27, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 27, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, 27, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 38, 27, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 40, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 41, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 26, 27, -1, -1, -1 },
    { NULL, "LNSString;", 0xa, 43, 3, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0xa, 44, 3, 45, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 46, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 38, 27, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 56, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 26, 27, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 27, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 3, 27, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 60, 27, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 3, 27, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(truthValueWithBoolean:);
  methods[2].selector = @selector(getFeatureWithNSString:);
  methods[3].selector = @selector(setFeatureWithNSString:withBoolean:);
  methods[4].selector = @selector(getPropertyWithNSString:);
  methods[5].selector = @selector(setPropertyWithNSString:withId:);
  methods[6].selector = @selector(setEntityResolverWithOrgXmlSaxEntityResolver:);
  methods[7].selector = @selector(getEntityResolver);
  methods[8].selector = @selector(setDTDHandlerWithOrgXmlSaxDTDHandler:);
  methods[9].selector = @selector(getDTDHandler);
  methods[10].selector = @selector(setContentHandlerWithOrgXmlSaxContentHandler:);
  methods[11].selector = @selector(getContentHandler);
  methods[12].selector = @selector(setErrorHandlerWithOrgXmlSaxErrorHandler:);
  methods[13].selector = @selector(getErrorHandler);
  methods[14].selector = @selector(parseWithOrgXmlSaxInputSource:);
  methods[15].selector = @selector(parseWithNSString:);
  methods[16].selector = @selector(setup);
  methods[17].selector = @selector(getReaderWithOrgXmlSaxInputSource:);
  methods[18].selector = @selector(getInputStreamWithNSString:withNSString:);
  methods[19].selector = @selector(adupWithCharArray:withInt:withInt:);
  methods[20].selector = @selector(anameWithCharArray:withInt:withInt:);
  methods[21].selector = @selector(avalWithCharArray:withInt:withInt:);
  methods[22].selector = @selector(expandEntitiesWithNSString:);
  methods[23].selector = @selector(entityWithCharArray:withInt:withInt:);
  methods[24].selector = @selector(lookupEntityWithCharArray:withInt:withInt:);
  methods[25].selector = @selector(eofWithCharArray:withInt:withInt:);
  methods[26].selector = @selector(etagWithCharArray:withInt:withInt:);
  methods[27].selector = @selector(etag_cdataWithCharArray:withInt:withInt:);
  methods[28].selector = @selector(etag_basicWithCharArray:withInt:withInt:);
  methods[29].selector = @selector(restartWithTSElement:);
  methods[30].selector = @selector(pop);
  methods[31].selector = @selector(restartablyPop);
  methods[32].selector = @selector(pushWithTSElement:);
  methods[33].selector = @selector(prefixOfWithNSString:);
  methods[34].selector = @selector(foreignWithNSString:withNSString:);
  methods[35].selector = @selector(declWithCharArray:withInt:withInt:);
  methods[36].selector = @selector(trimquotesWithNSString:);
  methods[37].selector = @selector(splitWithNSString:);
  methods[38].selector = @selector(cleanPublicidWithNSString:);
  methods[39].selector = @selector(giWithCharArray:withInt:withInt:);
  methods[40].selector = @selector(cdsectWithCharArray:withInt:withInt:);
  methods[41].selector = @selector(pcdataWithCharArray:withInt:withInt:);
  methods[42].selector = @selector(pitargetWithCharArray:withInt:withInt:);
  methods[43].selector = @selector(piWithCharArray:withInt:withInt:);
  methods[44].selector = @selector(stagcWithCharArray:withInt:withInt:);
  methods[45].selector = @selector(stageWithCharArray:withInt:withInt:);
  methods[46].selector = @selector(cmntWithCharArray:withInt:withInt:);
  methods[47].selector = @selector(rectifyWithTSElement:);
  methods[48].selector = @selector(getEntity);
  methods[49].selector = @selector(makeNameWithCharArray:withInt:withInt:);
  methods[50].selector = @selector(commentWithCharArray:withInt:withInt:);
  methods[51].selector = @selector(endCDATA);
  methods[52].selector = @selector(endDTD);
  methods[53].selector = @selector(endEntityWithNSString:);
  methods[54].selector = @selector(startCDATA);
  methods[55].selector = @selector(startDTDWithNSString:withNSString:withNSString:);
  methods[56].selector = @selector(startEntityWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "theContentHandler_", "LOrgXmlSaxContentHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theLexicalHandler_", "LOrgXmlSaxExtLexicalHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theDTDHandler_", "LOrgXmlSaxDTDHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theErrorHandler_", "LOrgXmlSaxErrorHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theEntityResolver_", "LOrgXmlSaxEntityResolver;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theSchema_", "LTSSchema;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theScanner_", "LTSScanner;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theAutoDetector_", "LTSAutoDetector;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_NAMESPACES", "Z", .constantValue.asLong = 0, 0xa, -1, 62, -1, -1 },
    { "DEFAULT_IGNORE_BOGONS", "Z", .constantValue.asLong = 0, 0xa, -1, 63, -1, -1 },
    { "DEFAULT_BOGONS_EMPTY", "Z", .constantValue.asLong = 0, 0xa, -1, 64, -1, -1 },
    { "DEFAULT_ROOT_BOGONS", "Z", .constantValue.asLong = 0, 0xa, -1, 65, -1, -1 },
    { "DEFAULT_DEFAULT_ATTRIBUTES", "Z", .constantValue.asLong = 0, 0xa, -1, 66, -1, -1 },
    { "DEFAULT_TRANSLATE_COLONS", "Z", .constantValue.asLong = 0, 0xa, -1, 67, -1, -1 },
    { "DEFAULT_RESTART_ELEMENTS", "Z", .constantValue.asLong = 0, 0xa, -1, 68, -1, -1 },
    { "DEFAULT_IGNORABLE_WHITESPACE", "Z", .constantValue.asLong = 0, 0xa, -1, 69, -1, -1 },
    { "DEFAULT_CDATA_ELEMENTS", "Z", .constantValue.asLong = 0, 0xa, -1, 70, -1, -1 },
    { "namespaces_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignoreBogons_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bogonsEmpty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rootBogons_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "defaultAttributes_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "translateColons_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "restartElements_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ignorableWhitespace_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "CDATAElements_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "namespacesFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 71, -1, -1 },
    { "namespacePrefixesFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 72, -1, -1 },
    { "externalGeneralEntitiesFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 73, -1, -1 },
    { "externalParameterEntitiesFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 74, -1, -1 },
    { "isStandaloneFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 75, -1, -1 },
    { "lexicalHandlerParameterEntitiesFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 76, -1, -1 },
    { "resolveDTDURIsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 77, -1, -1 },
    { "stringInterningFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 78, -1, -1 },
    { "useAttributes2Feature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 79, -1, -1 },
    { "useLocator2Feature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 80, -1, -1 },
    { "useEntityResolver2Feature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 81, -1, -1 },
    { "validationFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 82, -1, -1 },
    { "unicodeNormalizationCheckingFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 83, -1, -1 },
    { "xmlnsURIsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 84, -1, -1 },
    { "XML11Feature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 85, -1, -1 },
    { "ignoreBogonsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 86, -1, -1 },
    { "bogonsEmptyFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 87, -1, -1 },
    { "rootBogonsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 88, -1, -1 },
    { "defaultAttributesFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 89, -1, -1 },
    { "translateColonsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 90, -1, -1 },
    { "restartElementsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 91, -1, -1 },
    { "ignorableWhitespaceFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 92, -1, -1 },
    { "CDATAElementsFeature", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 93, -1, -1 },
    { "lexicalHandlerProperty", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 94, -1, -1 },
    { "scannerProperty", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 95, -1, -1 },
    { "schemaProperty", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 96, -1, -1 },
    { "autoDetectorProperty", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 97, -1, -1 },
    { "theFeatures_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theNewElement_", "LTSElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theAttributeName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theDoctypeIsPresent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theDoctypePublicId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theDoctypeSystemId_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theDoctypeName_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thePITarget_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theStack_", "LTSElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theSaved_", "LTSElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "thePCDATA_", "LTSElement;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "theEntity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "etagchars", "[C", .constantValue.asLong = 0, 0xa, -1, 98, -1, -1 },
    { "virginStack_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "legal", "LNSString;", .constantValue.asLong = 0, 0xa, -1, 99, -1, -1 },
    { "theCommentBuffer_", "[C", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "truthValue", "Z", "getFeature", "LNSString;", "LOrgXmlSaxSAXNotRecognizedException;LOrgXmlSaxSAXNotSupportedException;", "setFeature", "LNSString;Z", "getProperty", "setProperty", "LNSString;LNSObject;", "setEntityResolver", "LOrgXmlSaxEntityResolver;", "setDTDHandler", "LOrgXmlSaxDTDHandler;", "setContentHandler", "LOrgXmlSaxContentHandler;", "setErrorHandler", "LOrgXmlSaxErrorHandler;", "parse", "LOrgXmlSaxInputSource;", "LJavaIoIOException;LOrgXmlSaxSAXException;", "getReader", "LOrgXmlSaxSAXException;LJavaIoIOException;", "getInputStream", "LNSString;LNSString;", "adup", "[CII", "LOrgXmlSaxSAXException;", "aname", "aval", "expandEntities", "entity", "lookupEntity", "eof", "etag", "etag_cdata", "etag_basic", "restart", "LTSElement;", "push", "prefixOf", "foreign", "decl", "trimquotes", "split", "LJavaLangIllegalArgumentException;", "cleanPublicid", "gi", "cdsect", "pcdata", "pitarget", "pi", "stagc", "stage", "cmnt", "rectify", "makeName", "comment", "endEntity", "startDTD", "LNSString;LNSString;LNSString;", "startEntity", &TSTagSoupParser_DEFAULT_NAMESPACES, &TSTagSoupParser_DEFAULT_IGNORE_BOGONS, &TSTagSoupParser_DEFAULT_BOGONS_EMPTY, &TSTagSoupParser_DEFAULT_ROOT_BOGONS, &TSTagSoupParser_DEFAULT_DEFAULT_ATTRIBUTES, &TSTagSoupParser_DEFAULT_TRANSLATE_COLONS, &TSTagSoupParser_DEFAULT_RESTART_ELEMENTS, &TSTagSoupParser_DEFAULT_IGNORABLE_WHITESPACE, &TSTagSoupParser_DEFAULT_CDATA_ELEMENTS, &TSTagSoupParser_namespacesFeature, &TSTagSoupParser_namespacePrefixesFeature, &TSTagSoupParser_externalGeneralEntitiesFeature, &TSTagSoupParser_externalParameterEntitiesFeature, &TSTagSoupParser_isStandaloneFeature, &TSTagSoupParser_lexicalHandlerParameterEntitiesFeature, &TSTagSoupParser_resolveDTDURIsFeature, &TSTagSoupParser_stringInterningFeature, &TSTagSoupParser_useAttributes2Feature, &TSTagSoupParser_useLocator2Feature, &TSTagSoupParser_useEntityResolver2Feature, &TSTagSoupParser_validationFeature, &TSTagSoupParser_unicodeNormalizationCheckingFeature, &TSTagSoupParser_xmlnsURIsFeature, &TSTagSoupParser_XML11Feature, &TSTagSoupParser_ignoreBogonsFeature, &TSTagSoupParser_bogonsEmptyFeature, &TSTagSoupParser_rootBogonsFeature, &TSTagSoupParser_defaultAttributesFeature, &TSTagSoupParser_translateColonsFeature, &TSTagSoupParser_restartElementsFeature, &TSTagSoupParser_ignorableWhitespaceFeature, &TSTagSoupParser_CDATAElementsFeature, &TSTagSoupParser_lexicalHandlerProperty, &TSTagSoupParser_scannerProperty, &TSTagSoupParser_schemaProperty, &TSTagSoupParser_autoDetectorProperty, &TSTagSoupParser_etagchars, &TSTagSoupParser_legal };
  static const J2ObjcClassInfo _TSTagSoupParser = { "TagSoupParser", "repackaged.org.ccil.cowan.tagsoup", ptrTable, methods, fields, 7, 0x1, 57, 69, -1, -1, -1, -1, -1 };
  return &_TSTagSoupParser;
}

+ (void)initialize {
  if (self == [TSTagSoupParser class]) {
    JreStrongAssignAndConsume(&TSTagSoupParser_etagchars, [IOSCharArray newArrayWithChars:(jchar[]){ '<', '/', '>' } count:3]);
    J2OBJC_SET_INITIALIZED(TSTagSoupParser)
  }
}

@end

void TSTagSoupParser_init(TSTagSoupParser *self) {
  OrgXmlSaxHelpersDefaultHandler_init(self);
  self->theContentHandler_ = self;
  self->theLexicalHandler_ = self;
  self->theDTDHandler_ = self;
  self->theErrorHandler_ = self;
  self->theEntityResolver_ = self;
  self->namespaces_ = TSTagSoupParser_DEFAULT_NAMESPACES;
  self->ignoreBogons_ = TSTagSoupParser_DEFAULT_IGNORE_BOGONS;
  self->bogonsEmpty_ = TSTagSoupParser_DEFAULT_BOGONS_EMPTY;
  self->rootBogons_ = TSTagSoupParser_DEFAULT_ROOT_BOGONS;
  self->defaultAttributes_ = TSTagSoupParser_DEFAULT_DEFAULT_ATTRIBUTES;
  self->translateColons_ = TSTagSoupParser_DEFAULT_TRANSLATE_COLONS;
  self->restartElements_ = TSTagSoupParser_DEFAULT_RESTART_ELEMENTS;
  self->ignorableWhitespace_ = TSTagSoupParser_DEFAULT_IGNORABLE_WHITESPACE;
  self->CDATAElements_ = TSTagSoupParser_DEFAULT_CDATA_ELEMENTS;
  JreStrongAssignAndConsume(&self->theFeatures_, new_JavaUtilHashMap_init());
  {
    [self->theFeatures_ putWithId:TSTagSoupParser_namespacesFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_NAMESPACES)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_namespacePrefixesFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_externalGeneralEntitiesFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_externalParameterEntitiesFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_isStandaloneFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_lexicalHandlerParameterEntitiesFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_resolveDTDURIsFeature withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_stringInterningFeature withId:JreLoadStatic(JavaLangBoolean, TRUE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_useAttributes2Feature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_useLocator2Feature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_useEntityResolver2Feature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_validationFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_xmlnsURIsFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_xmlnsURIsFeature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_XML11Feature withId:JreLoadStatic(JavaLangBoolean, FALSE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_ignoreBogonsFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_IGNORE_BOGONS)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_bogonsEmptyFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_BOGONS_EMPTY)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_rootBogonsFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_ROOT_BOGONS)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_defaultAttributesFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_DEFAULT_ATTRIBUTES)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_translateColonsFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_TRANSLATE_COLONS)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_restartElementsFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_RESTART_ELEMENTS)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_ignorableWhitespaceFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_IGNORABLE_WHITESPACE)];
    [((JavaUtilHashMap *) nil_chk(self->theFeatures_)) putWithId:TSTagSoupParser_CDATAElementsFeature withId:TSTagSoupParser_truthValueWithBoolean_(TSTagSoupParser_DEFAULT_CDATA_ELEMENTS)];
  }
  JreStrongAssign(&self->theNewElement_, nil);
  JreStrongAssign(&self->theAttributeName_, nil);
  self->theDoctypeIsPresent_ = false;
  JreStrongAssign(&self->theDoctypePublicId_, nil);
  JreStrongAssign(&self->theDoctypeSystemId_, nil);
  JreStrongAssign(&self->theDoctypeName_, nil);
  JreStrongAssign(&self->thePITarget_, nil);
  JreStrongAssign(&self->theStack_, nil);
  JreStrongAssign(&self->theSaved_, nil);
  JreStrongAssign(&self->thePCDATA_, nil);
  self->theEntity_ = 0;
  self->virginStack_ = true;
  JreStrongAssignAndConsume(&self->theCommentBuffer_, [IOSCharArray newArrayWithLength:2000]);
}

TSTagSoupParser *new_TSTagSoupParser_init() {
  J2OBJC_NEW_IMPL(TSTagSoupParser, init)
}

TSTagSoupParser *create_TSTagSoupParser_init() {
  J2OBJC_CREATE_IMPL(TSTagSoupParser, init)
}

JavaLangBoolean *TSTagSoupParser_truthValueWithBoolean_(jboolean b) {
  TSTagSoupParser_initialize();
  return b ? JreLoadStatic(JavaLangBoolean, TRUE) : JreLoadStatic(JavaLangBoolean, FALSE);
}

void TSTagSoupParser_setup(TSTagSoupParser *self) {
  if (self->theSchema_ == nil) JreStrongAssignAndConsume(&self->theSchema_, new_TSHTMLSchema_init());
  if (self->theScanner_ == nil) JreStrongAssignAndConsume(&self->theScanner_, new_TSHTMLScanner_init());
  if (self->theAutoDetector_ == nil) {
    JreStrongAssignAndConsume(&self->theAutoDetector_, new_TSTagSoupParser_1_init());
  }
  JreStrongAssignAndConsume(&self->theStack_, new_TSElement_initWithTSElementType_withBoolean_([((TSSchema *) nil_chk(self->theSchema_)) getElementTypeWithNSString:@"<root>"], self->defaultAttributes_));
  JreStrongAssignAndConsume(&self->thePCDATA_, new_TSElement_initWithTSElementType_withBoolean_([((TSSchema *) nil_chk(self->theSchema_)) getElementTypeWithNSString:@"<pcdata>"], self->defaultAttributes_));
  JreStrongAssign(&self->theNewElement_, nil);
  JreStrongAssign(&self->theAttributeName_, nil);
  JreStrongAssign(&self->thePITarget_, nil);
  JreStrongAssign(&self->theSaved_, nil);
  self->theEntity_ = 0;
  self->virginStack_ = true;
  JreStrongAssign(&self->theDoctypeName_, JreStrongAssign(&self->theDoctypePublicId_, JreStrongAssign(&self->theDoctypeSystemId_, nil)));
}

JavaIoReader *TSTagSoupParser_getReaderWithOrgXmlSaxInputSource_(TSTagSoupParser *self, OrgXmlSaxInputSource *s) {
  JavaIoReader *r = JreRetainedLocalValue([((OrgXmlSaxInputSource *) nil_chk(s)) getCharacterStream]);
  JavaIoInputStream *i = JreRetainedLocalValue([s getByteStream]);
  NSString *encoding = JreRetainedLocalValue([s getEncoding]);
  NSString *publicid = JreRetainedLocalValue([s getPublicId]);
  NSString *systemid = JreRetainedLocalValue([s getSystemId]);
  if (r == nil) {
    if (i == nil) i = TSTagSoupParser_getInputStreamWithNSString_withNSString_(self, publicid, systemid);
    if (encoding == nil) {
      r = [((id<TSAutoDetector>) nil_chk(self->theAutoDetector_)) autoDetectingReaderWithJavaIoInputStream:i];
    }
    else {
      @try {
        r = create_JavaIoInputStreamReader_initWithJavaIoInputStream_withNSString_(i, encoding);
      }
      @catch (JavaIoUnsupportedEncodingException *e) {
        r = create_JavaIoInputStreamReader_initWithJavaIoInputStream_(i);
      }
    }
  }
  return r;
}

JavaIoInputStream *TSTagSoupParser_getInputStreamWithNSString_withNSString_(TSTagSoupParser *self, NSString *publicid, NSString *systemid) {
  JavaNetURL *basis = create_JavaNetURL_initWithNSString_withNSString_withNSString_(@"file", @"", JreStrcat("$$", JavaLangSystem_getPropertyWithNSString_(@"user.dir"), @"/."));
  JavaNetURL *url = create_JavaNetURL_initWithJavaNetURL_withNSString_(basis, systemid);
  JavaNetURLConnection *c = JreRetainedLocalValue([url openConnection]);
  return [((JavaNetURLConnection *) nil_chk(c)) getInputStream];
}

NSString *TSTagSoupParser_expandEntitiesWithNSString_(TSTagSoupParser *self, NSString *src) {
  jint refStart = -1;
  jint len = [((NSString *) nil_chk(src)) java_length];
  IOSCharArray *dst = [IOSCharArray arrayWithLength:len];
  jint dstlen = 0;
  for (jint i = 0; i < len; i++) {
    jchar ch = [src charAtWithInt:i];
    *IOSCharArray_GetRef(dst, dstlen++) = ch;
    if (ch == '&' && refStart == -1) {
      refStart = dstlen;
    }
    else if (refStart == -1) {
    }
    else if (JavaLangCharacter_isLetterWithChar_(ch) || JavaLangCharacter_isDigitWithChar_(ch) || ch == '#') {
    }
    else if (ch == ';') {
      jint ent = TSTagSoupParser_lookupEntityWithCharArray_withInt_withInt_(self, dst, refStart, dstlen - refStart - 1);
      if (ent > (jint) 0xFFFF) {
        ent -= (jint) 0x10000;
        *IOSCharArray_GetRef(dst, refStart - 1) = (jchar) ((JreRShift32(ent, 10)) + (jint) 0xD800);
        *IOSCharArray_GetRef(dst, refStart) = (jchar) ((ent & (jint) 0x3FF) + (jint) 0xDC00);
        dstlen = refStart + 1;
      }
      else if (ent != 0) {
        *IOSCharArray_GetRef(dst, refStart - 1) = (jchar) ent;
        dstlen = refStart;
      }
      refStart = -1;
    }
    else {
      refStart = -1;
    }
  }
  return [NSString java_stringWithCharacters:dst offset:0 length:dstlen];
}

jint TSTagSoupParser_lookupEntityWithCharArray_withInt_withInt_(TSTagSoupParser *self, IOSCharArray *buff, jint offset, jint length) {
  jint result = 0;
  if (length < 1) return result;
  if (IOSCharArray_Get(nil_chk(buff), offset) == '#') {
    if (length > 1 && (IOSCharArray_Get(buff, offset + 1) == 'x' || IOSCharArray_Get(buff, offset + 1) == 'X')) {
      @try {
        return JavaLangInteger_parseIntWithNSString_withInt_([NSString java_stringWithCharacters:buff offset:offset + 2 length:length - 2], 16);
      }
      @catch (JavaLangNumberFormatException *e) {
        return 0;
      }
    }
    @try {
      return JavaLangInteger_parseIntWithNSString_withInt_([NSString java_stringWithCharacters:buff offset:offset + 1 length:length - 1], 10);
    }
    @catch (JavaLangNumberFormatException *e) {
      return 0;
    }
  }
  return [((TSSchema *) nil_chk(self->theSchema_)) getEntityWithNSString:[NSString java_stringWithCharacters:buff offset:offset length:length]];
}

void TSTagSoupParser_restartWithTSElement_(TSTagSoupParser *self, TSElement *e) {
  while (self->theSaved_ != nil && [((TSElement *) nil_chk(self->theStack_)) canContainWithTSElement:self->theSaved_] && (e == nil || [((TSElement *) nil_chk(self->theSaved_)) canContainWithTSElement:e])) {
    TSElement *next = JreRetainedLocalValue([self->theSaved_ next]);
    TSTagSoupParser_pushWithTSElement_(self, self->theSaved_);
    JreStrongAssign(&self->theSaved_, next);
  }
}

void TSTagSoupParser_pop(TSTagSoupParser *self) {
  if (self->theStack_ == nil) return;
  NSString *name = JreRetainedLocalValue([self->theStack_ name]);
  NSString *localName = JreRetainedLocalValue([((TSElement *) nil_chk(self->theStack_)) localName]);
  NSString *namespace_ = JreRetainedLocalValue([((TSElement *) nil_chk(self->theStack_)) namespace__]);
  NSString *prefix = TSTagSoupParser_prefixOfWithNSString_(self, name);
  if (!self->namespaces_) namespace_ = localName = @"";
  [((id<OrgXmlSaxContentHandler>) nil_chk(self->theContentHandler_)) endElementWithNSString:namespace_ withNSString:localName withNSString:name];
  if (TSTagSoupParser_foreignWithNSString_withNSString_(self, prefix, namespace_)) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->theContentHandler_)) endPrefixMappingWithNSString:prefix];
  }
  id<OrgXmlSaxAttributes> atts = JreRetainedLocalValue([((TSElement *) nil_chk(self->theStack_)) atts]);
  for (jint i = [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength] - 1; i >= 0; i--) {
    NSString *attNamespace = JreRetainedLocalValue([atts getURIWithInt:i]);
    NSString *attPrefix = TSTagSoupParser_prefixOfWithNSString_(self, [atts getQNameWithInt:i]);
    if (TSTagSoupParser_foreignWithNSString_withNSString_(self, attPrefix, attNamespace)) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(self->theContentHandler_)) endPrefixMappingWithNSString:attPrefix];
    }
  }
  JreStrongAssign(&self->theStack_, [((TSElement *) nil_chk(self->theStack_)) next]);
}

void TSTagSoupParser_restartablyPop(TSTagSoupParser *self) {
  TSElement *popped = JreRetainedLocalValue(self->theStack_);
  TSTagSoupParser_pop(self);
  if (self->restartElements_ && ([((TSElement *) nil_chk(popped)) flags] & TSSchema_F_RESTART) != 0) {
    [((TSElement *) nil_chk(popped)) anonymize];
    [popped setNextWithTSElement:self->theSaved_];
    JreStrongAssign(&self->theSaved_, popped);
  }
}

void TSTagSoupParser_pushWithTSElement_(TSTagSoupParser *self, TSElement *e) {
  NSString *name = JreRetainedLocalValue([((TSElement *) nil_chk(e)) name]);
  NSString *localName = JreRetainedLocalValue([e localName]);
  NSString *namespace_ = JreRetainedLocalValue([e namespace__]);
  NSString *prefix = TSTagSoupParser_prefixOfWithNSString_(self, name);
  [e clean];
  if (!self->namespaces_) namespace_ = localName = @"";
  if (self->virginStack_ && [((NSString *) nil_chk(localName)) java_equalsIgnoreCase:self->theDoctypeName_]) {
    @try {
      [((id<OrgXmlSaxEntityResolver>) nil_chk(self->theEntityResolver_)) resolveEntityWithNSString:self->theDoctypePublicId_ withNSString:self->theDoctypeSystemId_];
    }
    @catch (JavaIoIOException *ew) {
    }
  }
  if (TSTagSoupParser_foreignWithNSString_withNSString_(self, prefix, namespace_)) {
    [((id<OrgXmlSaxContentHandler>) nil_chk(self->theContentHandler_)) startPrefixMappingWithNSString:prefix withNSString:namespace_];
  }
  id<OrgXmlSaxAttributes> atts = JreRetainedLocalValue([e atts]);
  jint len = [((id<OrgXmlSaxAttributes>) nil_chk(atts)) getLength];
  for (jint i = 0; i < len; i++) {
    NSString *attNamespace = JreRetainedLocalValue([atts getURIWithInt:i]);
    NSString *attPrefix = TSTagSoupParser_prefixOfWithNSString_(self, [atts getQNameWithInt:i]);
    if (TSTagSoupParser_foreignWithNSString_withNSString_(self, attPrefix, attNamespace)) {
      [((id<OrgXmlSaxContentHandler>) nil_chk(self->theContentHandler_)) startPrefixMappingWithNSString:attPrefix withNSString:attNamespace];
    }
  }
  [((id<OrgXmlSaxContentHandler>) nil_chk(self->theContentHandler_)) startElementWithNSString:namespace_ withNSString:localName withNSString:name withOrgXmlSaxAttributes:[e atts]];
  [e setNextWithTSElement:self->theStack_];
  JreStrongAssign(&self->theStack_, e);
  self->virginStack_ = false;
  if (self->CDATAElements_ && ([self->theStack_ flags] & TSSchema_F_CDATA) != 0) {
    [((id<TSScanner>) nil_chk(self->theScanner_)) startCDATA];
  }
}

NSString *TSTagSoupParser_prefixOfWithNSString_(TSTagSoupParser *self, NSString *name) {
  jint i = [((NSString *) nil_chk(name)) java_indexOf:':'];
  NSString *prefix = @"";
  if (i != -1) prefix = [name java_substring:0 endIndex:i];
  return prefix;
}

jboolean TSTagSoupParser_foreignWithNSString_withNSString_(TSTagSoupParser *self, NSString *prefix, NSString *namespace_) {
  jboolean foreign = !([((NSString *) nil_chk(prefix)) isEqual:@""] || [((NSString *) nil_chk(namespace_)) isEqual:@""] || [namespace_ isEqual:[((TSSchema *) nil_chk(self->theSchema_)) getURI]]);
  return foreign;
}

NSString *TSTagSoupParser_trimquotesWithNSString_(NSString *inArg) {
  TSTagSoupParser_initialize();
  if (inArg == nil) return inArg;
  jint length = [inArg java_length];
  if (length == 0) return inArg;
  jchar s = [inArg charAtWithInt:0];
  jchar e = [inArg charAtWithInt:length - 1];
  if (s == e && (s == '\'' || s == '"')) {
    inArg = [inArg java_substring:1 endIndex:[inArg java_length] - 1];
  }
  return inArg;
}

IOSObjectArray *TSTagSoupParser_splitWithNSString_(NSString *val) {
  TSTagSoupParser_initialize();
  val = [((NSString *) nil_chk(val)) java_trim];
  if ([((NSString *) nil_chk(val)) java_length] == 0) {
    return [IOSObjectArray arrayWithLength:0 type:NSString_class_()];
  }
  else {
    JavaUtilArrayList *l = create_JavaUtilArrayList_init();
    jint s = 0;
    jint e = 0;
    jboolean sq = false;
    jboolean dq = false;
    jchar lastc = 0;
    jint len = [val java_length];
    for (e = 0; e < len; e++) {
      jchar c = [val charAtWithInt:e];
      if (!dq && c == '\'' && lastc != '\\') {
        sq = !sq;
        if (s < 0) s = e;
      }
      else if (!sq && c == '"' && lastc != '\\') {
        dq = !dq;
        if (s < 0) s = e;
      }
      else if (!sq && !dq) {
        if (JavaLangCharacter_isWhitespaceWithChar_(c)) {
          if (s >= 0) [l addWithId:[val java_substring:s endIndex:e]];
          s = -1;
        }
        else if (s < 0 && c != ' ') {
          s = e;
        }
      }
      lastc = c;
    }
    [l addWithId:[val java_substring:s endIndex:e]];
    return (IOSObjectArray *) cast_check([l toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:0 type:NSString_class_()]], IOSClass_arrayType(NSString_class_(), 1));
  }
}

NSString *TSTagSoupParser_cleanPublicidWithNSString_(TSTagSoupParser *self, NSString *src) {
  if (src == nil) return nil;
  jint len = [src java_length];
  JavaLangStringBuffer *dst = create_JavaLangStringBuffer_initWithInt_(len);
  jboolean suppressSpace = true;
  for (jint i = 0; i < len; i++) {
    jchar ch = [src charAtWithInt:i];
    if ([((NSString *) nil_chk(TSTagSoupParser_legal)) java_indexOf:ch] != -1) {
      [dst appendWithChar:ch];
      suppressSpace = false;
    }
    else if (suppressSpace) {
      
      ;
    }
    else {
      [dst appendWithChar:' '];
      suppressSpace = true;
    }
  }
  return [((NSString *) nil_chk([dst description])) java_trim];
}

void TSTagSoupParser_rectifyWithTSElement_(TSTagSoupParser *self, TSElement *e) {
  TSElement *sp;
  while (true) {
    for (sp = self->theStack_; sp != nil; sp = [sp next]) {
      if ([sp canContainWithTSElement:e]) break;
    }
    if (sp != nil) break;
    TSElementType *parentType = JreRetainedLocalValue([((TSElement *) nil_chk(e)) parent]);
    if (parentType == nil) break;
    TSElement *parent = create_TSElement_initWithTSElementType_withBoolean_(parentType, self->defaultAttributes_);
    [parent setNextWithTSElement:e];
    e = parent;
  }
  if (sp == nil) return;
  while (self->theStack_ != sp) {
    if (self->theStack_ == nil || [self->theStack_ next] == nil || [((TSElement *) nil_chk([((TSElement *) nil_chk(self->theStack_)) next])) next] == nil) break;
    TSTagSoupParser_restartablyPop(self);
  }
  while (e != nil) {
    TSElement *nexte = JreRetainedLocalValue([e next]);
    if (![((NSString *) nil_chk([e name])) isEqual:@"<pcdata>"]) TSTagSoupParser_pushWithTSElement_(self, e);
    e = nexte;
    TSTagSoupParser_restartWithTSElement_(self, e);
  }
  JreStrongAssign(&self->theNewElement_, nil);
}

NSString *TSTagSoupParser_makeNameWithCharArray_withInt_withInt_(TSTagSoupParser *self, IOSCharArray *buff, jint offset, jint length) {
  JavaLangStringBuffer *dst = create_JavaLangStringBuffer_initWithInt_(length + 2);
  jboolean seenColon = false;
  jboolean start = true;
  for (; length-- > 0; offset++) {
    jchar ch = IOSCharArray_Get(nil_chk(buff), offset);
    if (JavaLangCharacter_isLetterWithChar_(ch) || ch == '_') {
      start = false;
      [dst appendWithChar:ch];
    }
    else if (JavaLangCharacter_isDigitWithChar_(ch) || ch == '-' || ch == '.') {
      if (start) [dst appendWithChar:'_'];
      start = false;
      [dst appendWithChar:ch];
    }
    else if (ch == ':' && !seenColon) {
      seenColon = true;
      if (start) [dst appendWithChar:'_'];
      start = true;
      [dst appendWithChar:self->translateColons_ ? '_' : ch];
    }
  }
  jint dstLength = [dst java_length];
  if (dstLength == 0 || [dst charAtWithInt:dstLength - 1] == ':') [dst appendWithChar:'_'];
  return [((NSString *) nil_chk([dst description])) java_intern];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(TSTagSoupParser)

@implementation TSTagSoupParser_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  TSTagSoupParser_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaIoReader *)autoDetectingReaderWithJavaIoInputStream:(JavaIoInputStream *)i {
  return create_JavaIoInputStreamReader_initWithJavaIoInputStream_(i);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaIoReader;", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(autoDetectingReaderWithJavaIoInputStream:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "autoDetectingReader", "LJavaIoInputStream;", "LTSTagSoupParser;", "setup" };
  static const J2ObjcClassInfo _TSTagSoupParser_1 = { "", "repackaged.org.ccil.cowan.tagsoup", ptrTable, methods, NULL, 7, 0x8010, 2, 0, 2, -1, 3, -1, -1 };
  return &_TSTagSoupParser_1;
}

@end

void TSTagSoupParser_1_init(TSTagSoupParser_1 *self) {
  NSObject_init(self);
}

TSTagSoupParser_1 *new_TSTagSoupParser_1_init() {
  J2OBJC_NEW_IMPL(TSTagSoupParser_1, init)
}

TSTagSoupParser_1 *create_TSTagSoupParser_1_init() {
  J2OBJC_CREATE_IMPL(TSTagSoupParser_1, init)
}
