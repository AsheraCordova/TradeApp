//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidToolBar\src\main\java\androidx\appcompat\widget\Toolbar.java
//

#include "BaseMeasurableImageView.h"
#include "DisplayMetrics.h"
#include "Drawable.h"
#include "Gravity.h"
#include "GravityCompat.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MarginLayoutParamsCompat.h"
#include "Resources.h"
#include "RtlSpacingHelper.h"
#include "Toolbar.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "ViewUtils.h"
#include "java/lang/Math.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"

@class JavaUtilArrayList;
@protocol JavaUtilList;


@interface ADXToolbar () {
 @public
  jint mPopupTheme_;
  jint mTitleTextAppearance_;
  jint mSubtitleTextAppearance_;
  jint mMaxButtonHeight_;
  jint mTitleMarginStart_;
  jint mTitleMarginEnd_;
  jint mTitleMarginTop_;
  jint mTitleMarginBottom_;
  ADXRtlSpacingHelper *mContentInsets_;
  jint mContentInsetStartWithNavigation_;
  jint mContentInsetEndWithActions_;
  jint mGravity_;
  jboolean mEatingTouch_;
  jboolean mEatingHover_;
  JavaUtilArrayList *mTempViews_;
  JavaUtilArrayList *mHiddenViews_;
  IOSIntArray *mTempMargins_;
  jboolean mCollapsible_;
  ASBaseMeasurableImageView *mNavButtonView_;
  ADView *mCollapseButtonView_;
  ADView *mMenuView_;
  ADView *mExpandedActionView_;
  ADView *mLogoView_;
  ADView *mTitleTextView_;
  ADView *mSubtitleTextView_;
}

- (void)addSystemViewWithADView:(ADView *)v
                    withBoolean:(jboolean)allowHide;

- (void)measureChildConstrainedWithADView:(ADView *)child
                                  withInt:(jint)parentWidthSpec
                                  withInt:(jint)widthUsed
                                  withInt:(jint)parentHeightSpec
                                  withInt:(jint)heightUsed
                                  withInt:(jint)heightConstraint;

- (jint)measureChildCollapseMarginsWithADView:(ADView *)child
                                      withInt:(jint)parentWidthMeasureSpec
                                      withInt:(jint)widthUsed
                                      withInt:(jint)parentHeightMeasureSpec
                                      withInt:(jint)heightUsed
                                 withIntArray:(IOSIntArray *)collapsingMargins;

- (jboolean)shouldCollapse;

- (jint)getViewListMeasuredWidthWithJavaUtilList:(id<JavaUtilList>)views
                                    withIntArray:(IOSIntArray *)collapsingMargins;

- (jint)layoutChildLeftWithADView:(ADView *)child
                          withInt:(jint)left
                     withIntArray:(IOSIntArray *)collapsingMargins
                          withInt:(jint)alignmentHeight;

- (jint)layoutChildRightWithADView:(ADView *)child
                           withInt:(jint)right
                      withIntArray:(IOSIntArray *)collapsingMargins
                           withInt:(jint)alignmentHeight;

- (jint)getChildTopWithADView:(ADView *)child
                      withInt:(jint)alignmentHeight;

- (jint)getChildVerticalGravityWithInt:(jint)gravity;

- (void)addCustomViewsWithGravityWithJavaUtilList:(id<JavaUtilList>)views
                                          withInt:(jint)gravity;

- (jint)getChildHorizontalGravityWithInt:(jint)gravity;

- (jboolean)shouldLayoutWithADView:(ADView *)view;

- (jint)getHorizontalMarginsWithADView:(ADView *)v;

- (jint)getVerticalMarginsWithADView:(ADView *)v;

- (void)ensureContentInsets;

@end

J2OBJC_FIELD_SETTER(ADXToolbar, mContentInsets_, ADXRtlSpacingHelper *)
J2OBJC_FIELD_SETTER(ADXToolbar, mTempViews_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXToolbar, mHiddenViews_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXToolbar, mTempMargins_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXToolbar, mNavButtonView_, ASBaseMeasurableImageView *)
J2OBJC_FIELD_SETTER(ADXToolbar, mCollapseButtonView_, ADView *)
J2OBJC_FIELD_SETTER(ADXToolbar, mMenuView_, ADView *)
J2OBJC_FIELD_SETTER(ADXToolbar, mExpandedActionView_, ADView *)
J2OBJC_FIELD_SETTER(ADXToolbar, mLogoView_, ADView *)
J2OBJC_FIELD_SETTER(ADXToolbar, mTitleTextView_, ADView *)
J2OBJC_FIELD_SETTER(ADXToolbar, mSubtitleTextView_, ADView *)

__attribute__((unused)) static void ADXToolbar_addSystemViewWithADView_withBoolean_(ADXToolbar *self, ADView *v, jboolean allowHide);

__attribute__((unused)) static void ADXToolbar_measureChildConstrainedWithADView_withInt_withInt_withInt_withInt_withInt_(ADXToolbar *self, ADView *child, jint parentWidthSpec, jint widthUsed, jint parentHeightSpec, jint heightUsed, jint heightConstraint);

__attribute__((unused)) static jint ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(ADXToolbar *self, ADView *child, jint parentWidthMeasureSpec, jint widthUsed, jint parentHeightMeasureSpec, jint heightUsed, IOSIntArray *collapsingMargins);

__attribute__((unused)) static jboolean ADXToolbar_shouldCollapse(ADXToolbar *self);

__attribute__((unused)) static jint ADXToolbar_getViewListMeasuredWidthWithJavaUtilList_withIntArray_(ADXToolbar *self, id<JavaUtilList> views, IOSIntArray *collapsingMargins);

__attribute__((unused)) static jint ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(ADXToolbar *self, ADView *child, jint left, IOSIntArray *collapsingMargins, jint alignmentHeight);

__attribute__((unused)) static jint ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(ADXToolbar *self, ADView *child, jint right, IOSIntArray *collapsingMargins, jint alignmentHeight);

__attribute__((unused)) static jint ADXToolbar_getChildTopWithADView_withInt_(ADXToolbar *self, ADView *child, jint alignmentHeight);

__attribute__((unused)) static jint ADXToolbar_getChildVerticalGravityWithInt_(ADXToolbar *self, jint gravity);

__attribute__((unused)) static void ADXToolbar_addCustomViewsWithGravityWithJavaUtilList_withInt_(ADXToolbar *self, id<JavaUtilList> views, jint gravity);

__attribute__((unused)) static jint ADXToolbar_getChildHorizontalGravityWithInt_(ADXToolbar *self, jint gravity);

__attribute__((unused)) static jboolean ADXToolbar_shouldLayoutWithADView_(ADXToolbar *self, ADView *view);

__attribute__((unused)) static jint ADXToolbar_getHorizontalMarginsWithADView_(ADXToolbar *self, ADView *v);

__attribute__((unused)) static jint ADXToolbar_getVerticalMarginsWithADView_(ADXToolbar *self, ADView *v);

__attribute__((unused)) static void ADXToolbar_ensureContentInsets(ADXToolbar *self);

@interface ADXToolbar_OnMenuItemClickListener : NSObject

@end

@implementation ADXToolbar

- (void)setTitleMarginWithInt:(jint)start
                      withInt:(jint)top
                      withInt:(jint)end
                      withInt:(jint)bottom {
  mTitleMarginStart_ = start;
  mTitleMarginTop_ = top;
  mTitleMarginEnd_ = end;
  mTitleMarginBottom_ = bottom;
  [self requestLayout];
}

- (void)setTitleMarginStartWithInt:(jint)margin {
  mTitleMarginStart_ = margin;
  [self requestLayout];
}

- (void)setTitleMarginTopWithInt:(jint)margin {
  mTitleMarginTop_ = margin;
  [self requestLayout];
}

- (void)setTitleMarginEndWithInt:(jint)margin {
  mTitleMarginEnd_ = margin;
  [self requestLayout];
}

- (void)setTitleMarginBottomWithInt:(jint)margin {
  mTitleMarginBottom_ = margin;
  [self requestLayout];
}

- (ADDrawable *)getNavigationIcon {
  return mNavButtonView_ != nil ? [mNavButtonView_ getImageDrawable] : nil;
}

- (void)setContentInsetsRelativeWithInt:(jint)contentInsetStart
                                withInt:(jint)contentInsetEnd {
  ADXToolbar_ensureContentInsets(self);
  [((ADXRtlSpacingHelper *) nil_chk(mContentInsets_)) setRelativeWithInt:contentInsetStart withInt:contentInsetEnd];
}

- (jint)getContentInsetStart {
  return mContentInsets_ != nil ? [mContentInsets_ getStart] : 0;
}

- (jint)getContentInsetEnd {
  return mContentInsets_ != nil ? [mContentInsets_ getEnd] : 0;
}

- (void)setContentInsetsAbsoluteWithInt:(jint)contentInsetLeft
                                withInt:(jint)contentInsetRight {
  ADXToolbar_ensureContentInsets(self);
  [((ADXRtlSpacingHelper *) nil_chk(mContentInsets_)) setAbsoluteWithInt:contentInsetLeft withInt:contentInsetRight];
}

- (jint)getContentInsetLeft {
  return mContentInsets_ != nil ? [mContentInsets_ getLeft] : 0;
}

- (jint)getContentInsetRight {
  return mContentInsets_ != nil ? [mContentInsets_ getRight] : 0;
}

- (void)setContentInsetStartWithNavigationWithInt:(jint)insetStartWithNavigation {
  if (insetStartWithNavigation < 0) {
    insetStartWithNavigation = ADXRtlSpacingHelper_UNDEFINED;
  }
  if (insetStartWithNavigation != mContentInsetStartWithNavigation_) {
    mContentInsetStartWithNavigation_ = insetStartWithNavigation;
    if ([self getNavigationIcon] != nil) {
      [self requestLayout];
    }
  }
}

- (void)setContentInsetEndWithActionsWithInt:(jint)insetEndWithActions {
  if (insetEndWithActions < 0) {
    insetEndWithActions = ADXRtlSpacingHelper_UNDEFINED;
  }
  if (insetEndWithActions != mContentInsetEndWithActions_) {
    mContentInsetEndWithActions_ = insetEndWithActions;
    if ([self getNavigationIcon] != nil) {
      [self requestLayout];
    }
  }
}

- (jint)getCurrentContentInsetStart {
  return [self getNavigationIcon] != nil ? JavaLangMath_maxWithInt_withInt_([self getContentInsetStart], JavaLangMath_maxWithInt_withInt_(mContentInsetStartWithNavigation_, 0)) : [self getContentInsetStart];
}

- (jint)getCurrentContentInsetEnd {
  jboolean hasActions = false;
  if (mMenuView_ != nil) {
  }
  return hasActions ? JavaLangMath_maxWithInt_withInt_([self getContentInsetEnd], JavaLangMath_maxWithInt_withInt_(mContentInsetEndWithActions_, 0)) : [self getContentInsetEnd];
}

- (jint)getCurrentContentInsetLeft {
  return ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL ? [self getCurrentContentInsetEnd] : [self getCurrentContentInsetStart];
}

- (jint)getCurrentContentInsetRight {
  return ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL ? [self getCurrentContentInsetStart] : [self getCurrentContentInsetEnd];
}

- (void)addSystemViewWithADView:(ADView *)v
                    withBoolean:(jboolean)allowHide {
  ADXToolbar_addSystemViewWithADView_withBoolean_(self, v, allowHide);
}

- (void)measureChildConstrainedWithADView:(ADView *)child
                                  withInt:(jint)parentWidthSpec
                                  withInt:(jint)widthUsed
                                  withInt:(jint)parentHeightSpec
                                  withInt:(jint)heightUsed
                                  withInt:(jint)heightConstraint {
  ADXToolbar_measureChildConstrainedWithADView_withInt_withInt_withInt_withInt_withInt_(self, child, parentWidthSpec, widthUsed, parentHeightSpec, heightUsed, heightConstraint);
}

- (jint)measureChildCollapseMarginsWithADView:(ADView *)child
                                      withInt:(jint)parentWidthMeasureSpec
                                      withInt:(jint)widthUsed
                                      withInt:(jint)parentHeightMeasureSpec
                                      withInt:(jint)heightUsed
                                 withIntArray:(IOSIntArray *)collapsingMargins {
  return ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(self, child, parentWidthMeasureSpec, widthUsed, parentHeightMeasureSpec, heightUsed, collapsingMargins);
}

- (jboolean)shouldCollapse {
  return ADXToolbar_shouldCollapse(self);
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  jint width = 0;
  jint height = 0;
  jint childState = 0;
  IOSIntArray *collapsingMargins = mTempMargins_;
  jint marginStartIndex;
  jint marginEndIndex;
  if (ADXViewUtils_isLayoutRtlWithADView_(self)) {
    marginStartIndex = 1;
    marginEndIndex = 0;
  }
  else {
    marginStartIndex = 0;
    marginEndIndex = 1;
  }
  jint navWidth = 0;
  if (ADXToolbar_shouldLayoutWithADView_(self, mNavButtonView_)) {
    ADXToolbar_measureChildConstrainedWithADView_withInt_withInt_withInt_withInt_withInt_(self, mNavButtonView_, widthMeasureSpec, width, heightMeasureSpec, 0, mMaxButtonHeight_);
    navWidth = [((ASBaseMeasurableImageView *) nil_chk(mNavButtonView_)) getMeasuredWidth] + ADXToolbar_getHorizontalMarginsWithADView_(self, mNavButtonView_);
    height = JavaLangMath_maxWithInt_withInt_(height, [((ASBaseMeasurableImageView *) nil_chk(mNavButtonView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mNavButtonView_));
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ASBaseMeasurableImageView *) nil_chk(mNavButtonView_)) getMeasuredState]);
  }
  if (ADXToolbar_shouldLayoutWithADView_(self, mCollapseButtonView_)) {
    ADXToolbar_measureChildConstrainedWithADView_withInt_withInt_withInt_withInt_withInt_(self, mCollapseButtonView_, widthMeasureSpec, width, heightMeasureSpec, 0, mMaxButtonHeight_);
    navWidth = [((ADView *) nil_chk(mCollapseButtonView_)) getMeasuredWidth] + ADXToolbar_getHorizontalMarginsWithADView_(self, mCollapseButtonView_);
    height = JavaLangMath_maxWithInt_withInt_(height, [((ADView *) nil_chk(mCollapseButtonView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mCollapseButtonView_));
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ADView *) nil_chk(mCollapseButtonView_)) getMeasuredState]);
  }
  jint contentInsetStart = [self getCurrentContentInsetStart];
  width += JavaLangMath_maxWithInt_withInt_(contentInsetStart, navWidth);
  *IOSIntArray_GetRef(nil_chk(collapsingMargins), marginStartIndex) = JavaLangMath_maxWithInt_withInt_(0, contentInsetStart - navWidth);
  jint menuWidth = 0;
  if (ADXToolbar_shouldLayoutWithADView_(self, mMenuView_)) {
    ADXToolbar_measureChildConstrainedWithADView_withInt_withInt_withInt_withInt_withInt_(self, mMenuView_, widthMeasureSpec, width, heightMeasureSpec, 0, mMaxButtonHeight_);
    menuWidth = [((ADView *) nil_chk(mMenuView_)) getMeasuredWidth] + ADXToolbar_getHorizontalMarginsWithADView_(self, mMenuView_);
    height = JavaLangMath_maxWithInt_withInt_(height, [((ADView *) nil_chk(mMenuView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mMenuView_));
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ADView *) nil_chk(mMenuView_)) getMeasuredState]);
  }
  jint contentInsetEnd = [self getCurrentContentInsetEnd];
  width += JavaLangMath_maxWithInt_withInt_(contentInsetEnd, menuWidth);
  *IOSIntArray_GetRef(collapsingMargins, marginEndIndex) = JavaLangMath_maxWithInt_withInt_(0, contentInsetEnd - menuWidth);
  if (ADXToolbar_shouldLayoutWithADView_(self, mExpandedActionView_)) {
    width += ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(self, mExpandedActionView_, widthMeasureSpec, width, heightMeasureSpec, 0, collapsingMargins);
    height = JavaLangMath_maxWithInt_withInt_(height, [((ADView *) nil_chk(mExpandedActionView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mExpandedActionView_));
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ADView *) nil_chk(mExpandedActionView_)) getMeasuredState]);
  }
  if (ADXToolbar_shouldLayoutWithADView_(self, mLogoView_)) {
    width += ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(self, mLogoView_, widthMeasureSpec, width, heightMeasureSpec, 0, collapsingMargins);
    height = JavaLangMath_maxWithInt_withInt_(height, [((ADView *) nil_chk(mLogoView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mLogoView_));
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ADView *) nil_chk(mLogoView_)) getMeasuredState]);
  }
  jint childCount = [self getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXToolbar_LayoutParams class]);
    if (((ADXToolbar_LayoutParams *) nil_chk(lp))->mViewType_ != ADXToolbar_LayoutParams_CUSTOM || !ADXToolbar_shouldLayoutWithADView_(self, child)) {
      continue;
    }
    width += ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(self, child, widthMeasureSpec, width, heightMeasureSpec, 0, collapsingMargins);
    height = JavaLangMath_maxWithInt_withInt_(height, [child getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, child));
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [child getMeasuredState]);
  }
  jint titleWidth = 0;
  jint titleHeight = 0;
  jint titleVertMargins = mTitleMarginTop_ + mTitleMarginBottom_;
  jint titleHorizMargins = mTitleMarginStart_ + mTitleMarginEnd_;
  if (ADXToolbar_shouldLayoutWithADView_(self, mTitleTextView_)) {
    titleWidth = ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(self, mTitleTextView_, widthMeasureSpec, width + titleHorizMargins, heightMeasureSpec, titleVertMargins, collapsingMargins);
    titleWidth = [((ADView *) nil_chk(mTitleTextView_)) getMeasuredWidth] + ADXToolbar_getHorizontalMarginsWithADView_(self, mTitleTextView_);
    titleHeight = [((ADView *) nil_chk(mTitleTextView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mTitleTextView_);
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ADView *) nil_chk(mTitleTextView_)) getMeasuredState]);
  }
  if (ADXToolbar_shouldLayoutWithADView_(self, mSubtitleTextView_)) {
    titleWidth = JavaLangMath_maxWithInt_withInt_(titleWidth, ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(self, mSubtitleTextView_, widthMeasureSpec, width + titleHorizMargins, heightMeasureSpec, titleHeight + titleVertMargins, collapsingMargins));
    titleHeight += [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredHeight] + ADXToolbar_getVerticalMarginsWithADView_(self, mSubtitleTextView_);
    childState = ADView_combineMeasuredStatesWithInt_withInt_(childState, [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredState]);
  }
  width += titleWidth;
  height = JavaLangMath_maxWithInt_withInt_(height, titleHeight);
  width += [self getPaddingLeft] + [self getPaddingRight];
  height += [self getPaddingTop] + [self getPaddingBottom];
  jint measuredWidth = ADView_resolveSizeAndStateWithInt_withInt_withInt_(JavaLangMath_maxWithInt_withInt_(width, [self getSuggestedMinimumWidth]), widthMeasureSpec, childState & ADView_MEASURED_STATE_MASK);
  jint measuredHeight = ADView_resolveSizeAndStateWithInt_withInt_withInt_(JavaLangMath_maxWithInt_withInt_(height, [self getSuggestedMinimumHeight]), heightMeasureSpec, JreLShift32(childState, ADView_MEASURED_HEIGHT_STATE_SHIFT));
  [self setMeasuredDimensionWithInt:measuredWidth withInt:ADXToolbar_shouldCollapse(self) ? 0 : measuredHeight];
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  jboolean isRtl = ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL;
  jint width = [self getWidth];
  jint height = [self getHeight];
  jint paddingLeft = [self getPaddingLeft];
  jint paddingRight = [self getPaddingRight];
  jint paddingTop = [self getPaddingTop];
  jint paddingBottom = [self getPaddingBottom];
  jint left = paddingLeft;
  jint right = width - paddingRight;
  IOSIntArray *collapsingMargins = mTempMargins_;
  *IOSIntArray_GetRef(nil_chk(collapsingMargins), 0) = *IOSIntArray_GetRef(collapsingMargins, 1) = 0;
  jint minHeight = ADXViewCompat_getMinimumHeightWithADView_(self);
  jint alignmentHeight = minHeight >= 0 ? JavaLangMath_minWithInt_withInt_(minHeight, b - t) : 0;
  if (ADXToolbar_shouldLayoutWithADView_(self, mNavButtonView_)) {
    if (isRtl) {
      right = ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, mNavButtonView_, right, collapsingMargins, alignmentHeight);
    }
    else {
      left = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, mNavButtonView_, left, collapsingMargins, alignmentHeight);
    }
  }
  if (ADXToolbar_shouldLayoutWithADView_(self, mCollapseButtonView_)) {
    if (isRtl) {
      right = ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, mCollapseButtonView_, right, collapsingMargins, alignmentHeight);
    }
    else {
      left = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, mCollapseButtonView_, left, collapsingMargins, alignmentHeight);
    }
  }
  if (ADXToolbar_shouldLayoutWithADView_(self, mMenuView_)) {
    if (isRtl) {
      left = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, mMenuView_, left, collapsingMargins, alignmentHeight);
    }
    else {
      right = ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, mMenuView_, right, collapsingMargins, alignmentHeight);
    }
  }
  jint contentInsetLeft = [self getCurrentContentInsetLeft];
  jint contentInsetRight = [self getCurrentContentInsetRight];
  *IOSIntArray_GetRef(collapsingMargins, 0) = JavaLangMath_maxWithInt_withInt_(0, contentInsetLeft - left);
  *IOSIntArray_GetRef(collapsingMargins, 1) = JavaLangMath_maxWithInt_withInt_(0, contentInsetRight - (width - paddingRight - right));
  left = JavaLangMath_maxWithInt_withInt_(left, contentInsetLeft);
  right = JavaLangMath_minWithInt_withInt_(right, width - paddingRight - contentInsetRight);
  if (ADXToolbar_shouldLayoutWithADView_(self, mExpandedActionView_)) {
    if (isRtl) {
      right = ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, mExpandedActionView_, right, collapsingMargins, alignmentHeight);
    }
    else {
      left = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, mExpandedActionView_, left, collapsingMargins, alignmentHeight);
    }
  }
  if (ADXToolbar_shouldLayoutWithADView_(self, mLogoView_)) {
    if (isRtl) {
      right = ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, mLogoView_, right, collapsingMargins, alignmentHeight);
    }
    else {
      left = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, mLogoView_, left, collapsingMargins, alignmentHeight);
    }
  }
  jboolean layoutTitle = ADXToolbar_shouldLayoutWithADView_(self, mTitleTextView_);
  jboolean layoutSubtitle = ADXToolbar_shouldLayoutWithADView_(self, mSubtitleTextView_);
  jint titleHeight = 0;
  if (layoutTitle) {
    ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(mTitleTextView_)) getLayoutParams], [ADXToolbar_LayoutParams class]);
    titleHeight += ((ADXToolbar_LayoutParams *) nil_chk(lp))->topMargin_ + [((ADView *) nil_chk(mTitleTextView_)) getMeasuredHeight] + lp->bottomMargin_;
  }
  if (layoutSubtitle) {
    ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(mSubtitleTextView_)) getLayoutParams], [ADXToolbar_LayoutParams class]);
    titleHeight += ((ADXToolbar_LayoutParams *) nil_chk(lp))->topMargin_ + [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredHeight] + lp->bottomMargin_;
  }
  if (layoutTitle || layoutSubtitle) {
    jint titleTop;
    ADView *topChild = layoutTitle ? mTitleTextView_ : mSubtitleTextView_;
    ADView *bottomChild = layoutSubtitle ? mSubtitleTextView_ : mTitleTextView_;
    ADXToolbar_LayoutParams *toplp = (ADXToolbar_LayoutParams *) cast_chk([topChild getLayoutParams], [ADXToolbar_LayoutParams class]);
    ADXToolbar_LayoutParams *bottomlp = (ADXToolbar_LayoutParams *) cast_chk([bottomChild getLayoutParams], [ADXToolbar_LayoutParams class]);
    jboolean titleHasWidth = (layoutTitle && ([((ADView *) nil_chk(mTitleTextView_)) getMeasuredWidth] > 0)) || (layoutSubtitle && [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredWidth] > 0);
    {
      jint space;
      jint spaceAbove;
      switch (mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK) {
        case ADGravity_TOP:
        titleTop = [self getPaddingTop] + ((ADXToolbar_LayoutParams *) nil_chk(toplp))->topMargin_ + mTitleMarginTop_;
        break;
        default:
        case ADGravity_CENTER_VERTICAL:
        space = height - paddingTop - paddingBottom;
        spaceAbove = JreIntDiv((space - titleHeight), 2);
        if (spaceAbove < ((ADXToolbar_LayoutParams *) nil_chk(toplp))->topMargin_ + mTitleMarginTop_) {
          spaceAbove = toplp->topMargin_ + mTitleMarginTop_;
        }
        else {
          jint spaceBelow = height - paddingBottom - titleHeight - spaceAbove - paddingTop;
          if (spaceBelow < toplp->bottomMargin_ + mTitleMarginBottom_) {
            spaceAbove = JavaLangMath_maxWithInt_withInt_(0, spaceAbove - (((ADXToolbar_LayoutParams *) nil_chk(bottomlp))->bottomMargin_ + mTitleMarginBottom_ - spaceBelow));
          }
        }
        titleTop = paddingTop + spaceAbove;
        break;
        case ADGravity_BOTTOM:
        titleTop = height - paddingBottom - ((ADXToolbar_LayoutParams *) nil_chk(bottomlp))->bottomMargin_ - mTitleMarginBottom_ - titleHeight;
        break;
      }
    }
    if (isRtl) {
      jint rd = (titleHasWidth ? mTitleMarginStart_ : 0) - IOSIntArray_Get(collapsingMargins, 1);
      right -= JavaLangMath_maxWithInt_withInt_(0, rd);
      *IOSIntArray_GetRef(collapsingMargins, 1) = JavaLangMath_maxWithInt_withInt_(0, -rd);
      jint titleRight = right;
      jint subtitleRight = right;
      if (layoutTitle) {
        ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(mTitleTextView_)) getLayoutParams], [ADXToolbar_LayoutParams class]);
        jint titleLeft = titleRight - [((ADView *) nil_chk(mTitleTextView_)) getMeasuredWidth];
        jint titleBottom = titleTop + [((ADView *) nil_chk(mTitleTextView_)) getMeasuredHeight];
        [((ADView *) nil_chk(mTitleTextView_)) layoutWithInt:titleLeft withInt:titleTop withInt:titleRight withInt:titleBottom];
        titleRight = titleLeft - mTitleMarginEnd_;
        titleTop = titleBottom + ((ADXToolbar_LayoutParams *) nil_chk(lp))->bottomMargin_;
      }
      if (layoutSubtitle) {
        ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(mSubtitleTextView_)) getLayoutParams], [ADXToolbar_LayoutParams class]);
        titleTop += ((ADXToolbar_LayoutParams *) nil_chk(lp))->topMargin_;
        jint subtitleLeft = subtitleRight - [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredWidth];
        jint subtitleBottom = titleTop + [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredHeight];
        [((ADView *) nil_chk(mSubtitleTextView_)) layoutWithInt:subtitleLeft withInt:titleTop withInt:subtitleRight withInt:subtitleBottom];
        subtitleRight = subtitleRight - mTitleMarginEnd_;
        titleTop = subtitleBottom + lp->bottomMargin_;
      }
      if (titleHasWidth) {
        right = JavaLangMath_minWithInt_withInt_(titleRight, subtitleRight);
      }
    }
    else {
      jint ld = (titleHasWidth ? mTitleMarginStart_ : 0) - IOSIntArray_Get(collapsingMargins, 0);
      left += JavaLangMath_maxWithInt_withInt_(0, ld);
      *IOSIntArray_GetRef(collapsingMargins, 0) = JavaLangMath_maxWithInt_withInt_(0, -ld);
      jint titleLeft = left;
      jint subtitleLeft = left;
      if (layoutTitle) {
        ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(mTitleTextView_)) getLayoutParams], [ADXToolbar_LayoutParams class]);
        jint titleRight = titleLeft + [((ADView *) nil_chk(mTitleTextView_)) getMeasuredWidth];
        jint titleBottom = titleTop + [((ADView *) nil_chk(mTitleTextView_)) getMeasuredHeight];
        [((ADView *) nil_chk(mTitleTextView_)) layoutWithInt:titleLeft withInt:titleTop withInt:titleRight withInt:titleBottom];
        titleLeft = titleRight + mTitleMarginEnd_;
        titleTop = titleBottom + ((ADXToolbar_LayoutParams *) nil_chk(lp))->bottomMargin_;
      }
      if (layoutSubtitle) {
        ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(mSubtitleTextView_)) getLayoutParams], [ADXToolbar_LayoutParams class]);
        titleTop += ((ADXToolbar_LayoutParams *) nil_chk(lp))->topMargin_;
        jint subtitleRight = subtitleLeft + [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredWidth];
        jint subtitleBottom = titleTop + [((ADView *) nil_chk(mSubtitleTextView_)) getMeasuredHeight];
        [((ADView *) nil_chk(mSubtitleTextView_)) layoutWithInt:subtitleLeft withInt:titleTop withInt:subtitleRight withInt:subtitleBottom];
        subtitleLeft = subtitleRight + mTitleMarginEnd_;
        titleTop = subtitleBottom + lp->bottomMargin_;
      }
      if (titleHasWidth) {
        left = JavaLangMath_maxWithInt_withInt_(titleLeft, subtitleLeft);
      }
    }
  }
  ADXToolbar_addCustomViewsWithGravityWithJavaUtilList_withInt_(self, mTempViews_, ADGravity_LEFT);
  jint leftViewsCount = [((JavaUtilArrayList *) nil_chk(mTempViews_)) size];
  for (jint i = 0; i < leftViewsCount; i++) {
    left = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, [mTempViews_ getWithInt:i], left, collapsingMargins, alignmentHeight);
  }
  ADXToolbar_addCustomViewsWithGravityWithJavaUtilList_withInt_(self, mTempViews_, ADGravity_RIGHT);
  jint rightViewsCount = [mTempViews_ size];
  for (jint i = 0; i < rightViewsCount; i++) {
    right = ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, [mTempViews_ getWithInt:i], right, collapsingMargins, alignmentHeight);
  }
  ADXToolbar_addCustomViewsWithGravityWithJavaUtilList_withInt_(self, mTempViews_, ADGravity_CENTER_HORIZONTAL);
  jint centerViewsWidth = ADXToolbar_getViewListMeasuredWidthWithJavaUtilList_withIntArray_(self, mTempViews_, collapsingMargins);
  jint parentCenter = paddingLeft + JreIntDiv((width - paddingLeft - paddingRight), 2);
  jint halfCenterViewsWidth = JreIntDiv(centerViewsWidth, 2);
  jint centerLeft = parentCenter - halfCenterViewsWidth;
  jint centerRight = centerLeft + centerViewsWidth;
  if (centerLeft < left) {
    centerLeft = left;
  }
  else if (centerRight > right) {
    centerLeft -= centerRight - right;
  }
  jint centerViewsCount = [mTempViews_ size];
  for (jint i = 0; i < centerViewsCount; i++) {
    centerLeft = ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, [mTempViews_ getWithInt:i], centerLeft, collapsingMargins, alignmentHeight);
  }
  [mTempViews_ clear];
}

- (jint)getViewListMeasuredWidthWithJavaUtilList:(id<JavaUtilList>)views
                                    withIntArray:(IOSIntArray *)collapsingMargins {
  return ADXToolbar_getViewListMeasuredWidthWithJavaUtilList_withIntArray_(self, views, collapsingMargins);
}

- (jint)layoutChildLeftWithADView:(ADView *)child
                          withInt:(jint)left
                     withIntArray:(IOSIntArray *)collapsingMargins
                          withInt:(jint)alignmentHeight {
  return ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(self, child, left, collapsingMargins, alignmentHeight);
}

- (jint)layoutChildRightWithADView:(ADView *)child
                           withInt:(jint)right
                      withIntArray:(IOSIntArray *)collapsingMargins
                           withInt:(jint)alignmentHeight {
  return ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(self, child, right, collapsingMargins, alignmentHeight);
}

- (jint)getChildTopWithADView:(ADView *)child
                      withInt:(jint)alignmentHeight {
  return ADXToolbar_getChildTopWithADView_withInt_(self, child, alignmentHeight);
}

- (jint)getChildVerticalGravityWithInt:(jint)gravity {
  return ADXToolbar_getChildVerticalGravityWithInt_(self, gravity);
}

- (void)addCustomViewsWithGravityWithJavaUtilList:(id<JavaUtilList>)views
                                          withInt:(jint)gravity {
  ADXToolbar_addCustomViewsWithGravityWithJavaUtilList_withInt_(self, views, gravity);
}

- (jint)getChildHorizontalGravityWithInt:(jint)gravity {
  return ADXToolbar_getChildHorizontalGravityWithInt_(self, gravity);
}

- (jboolean)shouldLayoutWithADView:(ADView *)view {
  return ADXToolbar_shouldLayoutWithADView_(self, view);
}

- (jint)getHorizontalMarginsWithADView:(ADView *)v {
  return ADXToolbar_getHorizontalMarginsWithADView_(self, v);
}

- (jint)getVerticalMarginsWithADView:(ADView *)v {
  return ADXToolbar_getVerticalMarginsWithADView_(self, v);
}

- (ADXToolbar_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  if ([p isKindOfClass:[ADXToolbar_LayoutParams class]]) {
    return create_ADXToolbar_LayoutParams_initWithADXToolbar_LayoutParams_((ADXToolbar_LayoutParams *) p);
  }
  else if ([p isKindOfClass:[ADXToolbar_ActionBar_LayoutParams class]]) {
    return create_ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_((ADXToolbar_ActionBar_LayoutParams *) p);
  }
  else if ([p isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    return create_ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_((ADViewGroup_MarginLayoutParams *) p);
  }
  else {
    return create_ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_(p);
  }
}

- (ADXToolbar_LayoutParams *)generateDefaultLayoutParams {
  return create_ADXToolbar_LayoutParams_initWithInt_withInt_(ADViewGroup_LayoutParams_WRAP_CONTENT, ADViewGroup_LayoutParams_WRAP_CONTENT);
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  return [super checkLayoutParamsWithADViewGroup_LayoutParams:p] && [p isKindOfClass:[ADXToolbar_LayoutParams class]];
}

- (void)ensureContentInsets {
  ADXToolbar_ensureContentInsets(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXToolbar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setTitleTextViewWithADView:(ADView *)mTitleTextView {
  JreStrongAssign(&self->mTitleTextView_, mTitleTextView);
  ADXToolbar_addSystemViewWithADView_withBoolean_(self, mTitleTextView, mCollapsible_);
}

- (void)setSubtitleTextViewWithADView:(ADView *)mSubtitleTextView {
  JreStrongAssign(&self->mSubtitleTextView_, mSubtitleTextView);
  ADXToolbar_addSystemViewWithADView_withBoolean_(self, mSubtitleTextView, mCollapsible_);
}

- (void)setLogoViewWithADView:(ADView *)mLogoView {
  JreStrongAssign(&self->mLogoView_, mLogoView);
  ADXToolbar_addSystemViewWithADView_withBoolean_(self, mLogoView, mCollapsible_);
}

- (void)setNavigationIconWithASBaseMeasurableImageView:(ASBaseMeasurableImageView *)mNavButtonView {
  JreStrongAssign(&self->mNavButtonView_, mNavButtonView);
  ADXToolbar_addSystemViewWithADView_withBoolean_(self, mNavButtonView, mCollapsible_);
}

- (void)setMenuViewWithADView:(ADView *)mMenuView {
  JreStrongAssign(&self->mMenuView_, mMenuView);
  ADXToolbar_addSystemViewWithADView_withBoolean_(self, mMenuView, mCollapsible_);
}

- (void)setGravityWithInt:(jint)gravity {
  mGravity_ = gravity;
}

- (void)setMaxButtonHeightWithInt:(jint)height {
  mMaxButtonHeight_ = height;
}

- (void)dealloc {
  RELEASE_(mContentInsets_);
  RELEASE_(mTempViews_);
  RELEASE_(mHiddenViews_);
  RELEASE_(mTempMargins_);
  RELEASE_(mNavButtonView_);
  RELEASE_(mCollapseButtonView_);
  RELEASE_(mMenuView_);
  RELEASE_(mExpandedActionView_);
  RELEASE_(mLogoView_);
  RELEASE_(mTitleTextView_);
  RELEASE_(mSubtitleTextView_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 16, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 18, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 21, 22, -1, 23, -1, -1 },
    { NULL, "I", 0x2, 24, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 26, 25, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 29, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 31, -1, 32, -1, -1 },
    { NULL, "I", 0x2, 33, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 34, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 36, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 37, 35, -1, -1, -1, -1 },
    { NULL, "LADXToolbar_LayoutParams;", 0x4, 38, 39, -1, -1, -1, -1 },
    { NULL, "LADXToolbar_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 40, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setTitleMarginWithInt:withInt:withInt:withInt:);
  methods[1].selector = @selector(setTitleMarginStartWithInt:);
  methods[2].selector = @selector(setTitleMarginTopWithInt:);
  methods[3].selector = @selector(setTitleMarginEndWithInt:);
  methods[4].selector = @selector(setTitleMarginBottomWithInt:);
  methods[5].selector = @selector(getNavigationIcon);
  methods[6].selector = @selector(setContentInsetsRelativeWithInt:withInt:);
  methods[7].selector = @selector(getContentInsetStart);
  methods[8].selector = @selector(getContentInsetEnd);
  methods[9].selector = @selector(setContentInsetsAbsoluteWithInt:withInt:);
  methods[10].selector = @selector(getContentInsetLeft);
  methods[11].selector = @selector(getContentInsetRight);
  methods[12].selector = @selector(setContentInsetStartWithNavigationWithInt:);
  methods[13].selector = @selector(setContentInsetEndWithActionsWithInt:);
  methods[14].selector = @selector(getCurrentContentInsetStart);
  methods[15].selector = @selector(getCurrentContentInsetEnd);
  methods[16].selector = @selector(getCurrentContentInsetLeft);
  methods[17].selector = @selector(getCurrentContentInsetRight);
  methods[18].selector = @selector(addSystemViewWithADView:withBoolean:);
  methods[19].selector = @selector(measureChildConstrainedWithADView:withInt:withInt:withInt:withInt:withInt:);
  methods[20].selector = @selector(measureChildCollapseMarginsWithADView:withInt:withInt:withInt:withInt:withIntArray:);
  methods[21].selector = @selector(shouldCollapse);
  methods[22].selector = @selector(onMeasureWithInt:withInt:);
  methods[23].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[24].selector = @selector(getViewListMeasuredWidthWithJavaUtilList:withIntArray:);
  methods[25].selector = @selector(layoutChildLeftWithADView:withInt:withIntArray:withInt:);
  methods[26].selector = @selector(layoutChildRightWithADView:withInt:withIntArray:withInt:);
  methods[27].selector = @selector(getChildTopWithADView:withInt:);
  methods[28].selector = @selector(getChildVerticalGravityWithInt:);
  methods[29].selector = @selector(addCustomViewsWithGravityWithJavaUtilList:withInt:);
  methods[30].selector = @selector(getChildHorizontalGravityWithInt:);
  methods[31].selector = @selector(shouldLayoutWithADView:);
  methods[32].selector = @selector(getHorizontalMarginsWithADView:);
  methods[33].selector = @selector(getVerticalMarginsWithADView:);
  methods[34].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[35].selector = @selector(generateDefaultLayoutParams);
  methods[36].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[37].selector = @selector(ensureContentInsets);
  methods[38].selector = @selector(init);
  methods[39].selector = @selector(setTitleTextViewWithADView:);
  methods[40].selector = @selector(setSubtitleTextViewWithADView:);
  methods[41].selector = @selector(setLogoViewWithADView:);
  methods[42].selector = @selector(setNavigationIconWithASBaseMeasurableImageView:);
  methods[43].selector = @selector(setMenuViewWithADView:);
  methods[44].selector = @selector(setGravityWithInt:);
  methods[45].selector = @selector(setMaxButtonHeightWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mPopupTheme_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTitleTextAppearance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSubtitleTextAppearance_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mButtonGravity_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMaxButtonHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTitleMarginStart_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTitleMarginEnd_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTitleMarginTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTitleMarginBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContentInsets_", "LADXRtlSpacingHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContentInsetStartWithNavigation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mContentInsetEndWithActions_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEatingTouch_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEatingHover_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTempViews_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "mHiddenViews_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 49, -1 },
    { "mTempMargins_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCollapsible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNavButtonView_", "LASBaseMeasurableImageView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCollapseButtonView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMenuView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mExpandedActionView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLogoView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTitleTextView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSubtitleTextView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTitleMargin", "IIII", "setTitleMarginStart", "I", "setTitleMarginTop", "setTitleMarginEnd", "setTitleMarginBottom", "setContentInsetsRelative", "II", "setContentInsetsAbsolute", "setContentInsetStartWithNavigation", "setContentInsetEndWithActions", "addSystemView", "LADView;Z", "measureChildConstrained", "LADView;IIIII", "measureChildCollapseMargins", "LADView;IIII[I", "onMeasure", "onLayout", "ZIIII", "getViewListMeasuredWidth", "LJavaUtilList;[I", "(Ljava/util/List<Lr/android/view/View;>;[I)I", "layoutChildLeft", "LADView;I[II", "layoutChildRight", "getChildTop", "LADView;I", "getChildVerticalGravity", "addCustomViewsWithGravity", "LJavaUtilList;I", "(Ljava/util/List<Lr/android/view/View;>;I)V", "getChildHorizontalGravity", "shouldLayout", "LADView;", "getHorizontalMargins", "getVerticalMargins", "generateLayoutParams", "LADViewGroup_LayoutParams;", "checkLayoutParams", "setTitleTextView", "setSubtitleTextView", "setLogoView", "setNavigationIcon", "LASBaseMeasurableImageView;", "setMenuView", "setGravity", "setMaxButtonHeight", "Ljava/util/ArrayList<Lr/android/view/View;>;", "LADXToolbar_OnMenuItemClickListener;LADXToolbar_LayoutParams;LADXToolbar_ActionBar;" };
  static const J2ObjcClassInfo _ADXToolbar = { "Toolbar", "androidx.appcompat.widget", ptrTable, methods, fields, 7, 0x1, 46, 26, -1, 50, -1, -1, -1 };
  return &_ADXToolbar;
}

@end

void ADXToolbar_addSystemViewWithADView_withBoolean_(ADXToolbar *self, ADView *v, jboolean allowHide) {
  ADViewGroup_LayoutParams *vlp = [((ADView *) nil_chk(v)) getLayoutParams];
  ADXToolbar_LayoutParams *lp;
  if (vlp == nil) {
    lp = [self generateDefaultLayoutParams];
  }
  else if (![self checkLayoutParamsWithADViewGroup_LayoutParams:vlp]) {
    lp = [self generateLayoutParamsWithADViewGroup_LayoutParams:vlp];
  }
  else {
    lp = (ADXToolbar_LayoutParams *) cast_chk(vlp, [ADXToolbar_LayoutParams class]);
  }
  ((ADXToolbar_LayoutParams *) nil_chk(lp))->mViewType_ = ADXToolbar_LayoutParams_SYSTEM;
  if (allowHide && self->mExpandedActionView_ != nil) {
    [v setLayoutParamsWithADViewGroup_LayoutParams:lp];
    [((JavaUtilArrayList *) nil_chk(self->mHiddenViews_)) addWithId:v];
  }
  else {
    [self addViewWithADView:v withADViewGroup_LayoutParams:lp];
  }
}

void ADXToolbar_measureChildConstrainedWithADView_withInt_withInt_withInt_withInt_withInt_(ADXToolbar *self, ADView *child, jint parentWidthSpec, jint widthUsed, jint parentHeightSpec, jint heightUsed, jint heightConstraint) {
  ADViewGroup_MarginLayoutParams *lp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
  jint childWidthSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthSpec, [self getPaddingLeft] + [self getPaddingRight] + ((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ + widthUsed, lp->width_);
  jint childHeightSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentHeightSpec, [self getPaddingTop] + [self getPaddingBottom] + lp->topMargin_ + lp->bottomMargin_ + heightUsed, lp->height_);
  jint childHeightMode = ADView_MeasureSpec_getModeWithInt_(childHeightSpec);
  if (childHeightMode != ADView_MeasureSpec_EXACTLY && heightConstraint >= 0) {
    jint size = childHeightMode != ADView_MeasureSpec_UNSPECIFIED ? JavaLangMath_minWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(childHeightSpec), heightConstraint) : heightConstraint;
    childHeightSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, ADView_MeasureSpec_EXACTLY);
  }
  [child measureWithInt:childWidthSpec withInt:childHeightSpec];
}

jint ADXToolbar_measureChildCollapseMarginsWithADView_withInt_withInt_withInt_withInt_withIntArray_(ADXToolbar *self, ADView *child, jint parentWidthMeasureSpec, jint widthUsed, jint parentHeightMeasureSpec, jint heightUsed, IOSIntArray *collapsingMargins) {
  ADViewGroup_MarginLayoutParams *lp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
  jint leftDiff = ((ADViewGroup_MarginLayoutParams *) nil_chk(lp))->leftMargin_ - IOSIntArray_Get(nil_chk(collapsingMargins), 0);
  jint rightDiff = lp->rightMargin_ - IOSIntArray_Get(collapsingMargins, 1);
  jint leftMargin = JavaLangMath_maxWithInt_withInt_(0, leftDiff);
  jint rightMargin = JavaLangMath_maxWithInt_withInt_(0, rightDiff);
  jint hMargins = leftMargin + rightMargin;
  *IOSIntArray_GetRef(collapsingMargins, 0) = JavaLangMath_maxWithInt_withInt_(0, -leftDiff);
  *IOSIntArray_GetRef(collapsingMargins, 1) = JavaLangMath_maxWithInt_withInt_(0, -rightDiff);
  jint childWidthMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthMeasureSpec, [self getPaddingLeft] + [self getPaddingRight] + hMargins + widthUsed, lp->width_);
  jint childHeightMeasureSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentHeightMeasureSpec, [self getPaddingTop] + [self getPaddingBottom] + lp->topMargin_ + lp->bottomMargin_ + heightUsed, lp->height_);
  [child measureWithInt:childWidthMeasureSpec withInt:childHeightMeasureSpec];
  return [child getMeasuredWidth] + hMargins;
}

jboolean ADXToolbar_shouldCollapse(ADXToolbar *self) {
  if (!self->mCollapsible_) return false;
  jint childCount = [self getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    if (ADXToolbar_shouldLayoutWithADView_(self, child) && [((ADView *) nil_chk(child)) getMeasuredWidth] > 0 && [child getMeasuredHeight] > 0) {
      return false;
    }
  }
  return true;
}

jint ADXToolbar_getViewListMeasuredWidthWithJavaUtilList_withIntArray_(ADXToolbar *self, id<JavaUtilList> views, IOSIntArray *collapsingMargins) {
  jint collapseLeft = IOSIntArray_Get(nil_chk(collapsingMargins), 0);
  jint collapseRight = IOSIntArray_Get(collapsingMargins, 1);
  jint width = 0;
  jint count = [((id<JavaUtilList>) nil_chk(views)) size];
  for (jint i = 0; i < count; i++) {
    ADView *v = [views getWithInt:i];
    ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(v)) getLayoutParams], [ADXToolbar_LayoutParams class]);
    jint l = ((ADXToolbar_LayoutParams *) nil_chk(lp))->leftMargin_ - collapseLeft;
    jint r = lp->rightMargin_ - collapseRight;
    jint leftMargin = JavaLangMath_maxWithInt_withInt_(0, l);
    jint rightMargin = JavaLangMath_maxWithInt_withInt_(0, r);
    collapseLeft = JavaLangMath_maxWithInt_withInt_(0, -l);
    collapseRight = JavaLangMath_maxWithInt_withInt_(0, -r);
    width += leftMargin + [v getMeasuredWidth] + rightMargin;
  }
  return width;
}

jint ADXToolbar_layoutChildLeftWithADView_withInt_withIntArray_withInt_(ADXToolbar *self, ADView *child, jint left, IOSIntArray *collapsingMargins, jint alignmentHeight) {
  ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXToolbar_LayoutParams class]);
  jint l = ((ADXToolbar_LayoutParams *) nil_chk(lp))->leftMargin_ - IOSIntArray_Get(nil_chk(collapsingMargins), 0);
  left += JavaLangMath_maxWithInt_withInt_(0, l);
  *IOSIntArray_GetRef(collapsingMargins, 0) = JavaLangMath_maxWithInt_withInt_(0, -l);
  jint top = ADXToolbar_getChildTopWithADView_withInt_(self, child, alignmentHeight);
  jint childWidth = [child getMeasuredWidth];
  [child layoutWithInt:left withInt:top withInt:left + childWidth withInt:top + [child getMeasuredHeight]];
  left += childWidth + lp->rightMargin_;
  return left;
}

jint ADXToolbar_layoutChildRightWithADView_withInt_withIntArray_withInt_(ADXToolbar *self, ADView *child, jint right, IOSIntArray *collapsingMargins, jint alignmentHeight) {
  ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXToolbar_LayoutParams class]);
  jint r = ((ADXToolbar_LayoutParams *) nil_chk(lp))->rightMargin_ - IOSIntArray_Get(nil_chk(collapsingMargins), 1);
  right -= JavaLangMath_maxWithInt_withInt_(0, r);
  *IOSIntArray_GetRef(collapsingMargins, 1) = JavaLangMath_maxWithInt_withInt_(0, -r);
  jint top = ADXToolbar_getChildTopWithADView_withInt_(self, child, alignmentHeight);
  jint childWidth = [child getMeasuredWidth];
  [child layoutWithInt:right - childWidth withInt:top withInt:right withInt:top + [child getMeasuredHeight]];
  right -= childWidth + lp->leftMargin_;
  return right;
}

jint ADXToolbar_getChildTopWithADView_withInt_(ADXToolbar *self, ADView *child, jint alignmentHeight) {
  ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXToolbar_LayoutParams class]);
  jint childHeight = [child getMeasuredHeight];
  jint alignmentOffset = alignmentHeight > 0 ? JreIntDiv((childHeight - alignmentHeight), 2) : 0;
  {
    jint paddingTop;
    jint paddingBottom;
    jint height;
    jint space;
    jint spaceAbove;
    switch (ADXToolbar_getChildVerticalGravityWithInt_(self, ((ADXToolbar_LayoutParams *) nil_chk(lp))->gravity_)) {
      case ADGravity_TOP:
      return [self getPaddingTop] - alignmentOffset;
      case ADGravity_BOTTOM:
      return [self getHeight] - [self getPaddingBottom] - childHeight - lp->bottomMargin_ - alignmentOffset;
      default:
      case ADGravity_CENTER_VERTICAL:
      paddingTop = [self getPaddingTop];
      paddingBottom = [self getPaddingBottom];
      height = [self getHeight];
      space = height - paddingTop - paddingBottom;
      spaceAbove = JreIntDiv((space - childHeight), 2);
      if (spaceAbove < lp->topMargin_) {
        spaceAbove = lp->topMargin_;
      }
      else {
        jint spaceBelow = height - paddingBottom - childHeight - spaceAbove - paddingTop;
        if (spaceBelow < lp->bottomMargin_) {
          spaceAbove = JavaLangMath_maxWithInt_withInt_(0, spaceAbove - (lp->bottomMargin_ - spaceBelow));
        }
      }
      return paddingTop + spaceAbove;
    }
  }
}

jint ADXToolbar_getChildVerticalGravityWithInt_(ADXToolbar *self, jint gravity) {
  jint vgrav = gravity & ADGravity_VERTICAL_GRAVITY_MASK;
  switch (vgrav) {
    case ADGravity_TOP:
    case ADGravity_BOTTOM:
    case ADGravity_CENTER_VERTICAL:
    return vgrav;
    default:
    return self->mGravity_ & ADGravity_VERTICAL_GRAVITY_MASK;
  }
}

void ADXToolbar_addCustomViewsWithGravityWithJavaUtilList_withInt_(ADXToolbar *self, id<JavaUtilList> views, jint gravity) {
  jboolean isRtl = ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL;
  jint childCount = [self getChildCount];
  jint absGrav = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(gravity, ADXViewCompat_getLayoutDirectionWithADView_(self));
  [((id<JavaUtilList>) nil_chk(views)) clear];
  if (isRtl) {
    for (jint i = childCount - 1; i >= 0; i--) {
      ADView *child = [self getChildAtWithInt:i];
      ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXToolbar_LayoutParams class]);
      if (((ADXToolbar_LayoutParams *) nil_chk(lp))->mViewType_ == ADXToolbar_LayoutParams_CUSTOM && ADXToolbar_shouldLayoutWithADView_(self, child) && ADXToolbar_getChildHorizontalGravityWithInt_(self, lp->gravity_) == absGrav) {
        [views addWithId:child];
      }
    }
  }
  else {
    for (jint i = 0; i < childCount; i++) {
      ADView *child = [self getChildAtWithInt:i];
      ADXToolbar_LayoutParams *lp = (ADXToolbar_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXToolbar_LayoutParams class]);
      if (((ADXToolbar_LayoutParams *) nil_chk(lp))->mViewType_ == ADXToolbar_LayoutParams_CUSTOM && ADXToolbar_shouldLayoutWithADView_(self, child) && ADXToolbar_getChildHorizontalGravityWithInt_(self, lp->gravity_) == absGrav) {
        [views addWithId:child];
      }
    }
  }
}

jint ADXToolbar_getChildHorizontalGravityWithInt_(ADXToolbar *self, jint gravity) {
  jint ld = ADXViewCompat_getLayoutDirectionWithADView_(self);
  jint absGrav = ADXGravityCompat_getAbsoluteGravityWithInt_withInt_(gravity, ld);
  jint hGrav = absGrav & ADGravity_HORIZONTAL_GRAVITY_MASK;
  switch (hGrav) {
    case ADGravity_LEFT:
    case ADGravity_RIGHT:
    case ADGravity_CENTER_HORIZONTAL:
    return hGrav;
    default:
    return ld == ADXViewCompat_LAYOUT_DIRECTION_RTL ? ADGravity_RIGHT : ADGravity_LEFT;
  }
}

jboolean ADXToolbar_shouldLayoutWithADView_(ADXToolbar *self, ADView *view) {
  return view != nil && [view getParent] == self && [view getVisibility] != ADView_GONE;
}

jint ADXToolbar_getHorizontalMarginsWithADView_(ADXToolbar *self, ADView *v) {
  ADViewGroup_MarginLayoutParams *mlp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(v)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
  return ADXMarginLayoutParamsCompat_getMarginStartWithADViewGroup_MarginLayoutParams_(mlp) + ADXMarginLayoutParamsCompat_getMarginEndWithADViewGroup_MarginLayoutParams_(mlp);
}

jint ADXToolbar_getVerticalMarginsWithADView_(ADXToolbar *self, ADView *v) {
  ADViewGroup_MarginLayoutParams *mlp = (ADViewGroup_MarginLayoutParams *) cast_chk([((ADView *) nil_chk(v)) getLayoutParams], [ADViewGroup_MarginLayoutParams class]);
  return ((ADViewGroup_MarginLayoutParams *) nil_chk(mlp))->topMargin_ + mlp->bottomMargin_;
}

void ADXToolbar_ensureContentInsets(ADXToolbar *self) {
  if (self->mContentInsets_ == nil) {
    JreStrongAssignAndConsume(&self->mContentInsets_, new_ADXRtlSpacingHelper_initPackagePrivate());
  }
}

void ADXToolbar_init(ADXToolbar *self) {
  ADViewGroup_init(self);
  self->mGravity_ = ADXGravityCompat_START | ADGravity_CENTER_VERTICAL;
  JreStrongAssignAndConsume(&self->mTempViews_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mHiddenViews_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mTempMargins_, [IOSIntArray newArrayWithLength:2]);
  jfloat density = ((ADDisplayMetrics *) nil_chk([((ADResources *) nil_chk([self getResources])) getDisplayMetrics]))->density_;
  self->mMaxButtonHeight_ = JreFpToInt(((density * 48) + 0.5f));
  self->mButtonGravity_ = ADGravity_TOP;
}

ADXToolbar *new_ADXToolbar_init() {
  J2OBJC_NEW_IMPL(ADXToolbar, init)
}

ADXToolbar *create_ADXToolbar_init() {
  J2OBJC_CREATE_IMPL(ADXToolbar, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXToolbar)

@implementation ADXToolbar_OnMenuItemClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onMenuItemClickWithADMenuItem:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onMenuItemClick", "LADMenuItem;", "LADXToolbar;" };
  static const J2ObjcClassInfo _ADXToolbar_OnMenuItemClickListener = { "OnMenuItemClickListener", "androidx.appcompat.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXToolbar_OnMenuItemClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXToolbar_OnMenuItemClickListener)

@implementation ADXToolbar_ActionBar_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                    withInt:(jint)gravity {
  ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_withInt_(self, width, height, gravity);
  return self;
}

- (instancetype)initWithADXToolbar_ActionBar_LayoutParams:(ADXToolbar_ActionBar_LayoutParams *)source {
  ADXToolbar_ActionBar_LayoutParams_initWithADXToolbar_ActionBar_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXToolbar_ActionBar_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(initWithADXToolbar_ActionBar_LayoutParams:);
  methods[3].selector = @selector(initWithADViewGroup_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "gravity_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "III", "LADXToolbar_ActionBar_LayoutParams;", "LADViewGroup_LayoutParams;", "LADXToolbar_ActionBar;" };
  static const J2ObjcClassInfo _ADXToolbar_ActionBar_LayoutParams = { "LayoutParams", "androidx.appcompat.widget", ptrTable, methods, fields, 7, 0x9, 4, 1, 4, -1, -1, -1, -1 };
  return &_ADXToolbar_ActionBar_LayoutParams;
}

@end

void ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_(ADXToolbar_ActionBar_LayoutParams *self, jint width, jint height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = ADGravity_CENTER_VERTICAL | ADXGravityCompat_START;
}

ADXToolbar_ActionBar_LayoutParams *new_ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithInt_withInt_, width, height)
}

ADXToolbar_ActionBar_LayoutParams *create_ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_withInt_(ADXToolbar_ActionBar_LayoutParams *self, jint width, jint height, jint gravity) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  self->gravity_ = gravity;
}

ADXToolbar_ActionBar_LayoutParams *new_ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_withInt_(jint width, jint height, jint gravity) {
  J2OBJC_NEW_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

ADXToolbar_ActionBar_LayoutParams *create_ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_withInt_(jint width, jint height, jint gravity) {
  J2OBJC_CREATE_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

void ADXToolbar_ActionBar_LayoutParams_initWithADXToolbar_ActionBar_LayoutParams_(ADXToolbar_ActionBar_LayoutParams *self, ADXToolbar_ActionBar_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
}

ADXToolbar_ActionBar_LayoutParams *new_ADXToolbar_ActionBar_LayoutParams_initWithADXToolbar_ActionBar_LayoutParams_(ADXToolbar_ActionBar_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithADXToolbar_ActionBar_LayoutParams_, source)
}

ADXToolbar_ActionBar_LayoutParams *create_ADXToolbar_ActionBar_LayoutParams_initWithADXToolbar_ActionBar_LayoutParams_(ADXToolbar_ActionBar_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithADXToolbar_ActionBar_LayoutParams_, source)
}

void ADXToolbar_ActionBar_LayoutParams_initWithADViewGroup_LayoutParams_(ADXToolbar_ActionBar_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
}

ADXToolbar_ActionBar_LayoutParams *new_ADXToolbar_ActionBar_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXToolbar_ActionBar_LayoutParams *create_ADXToolbar_ActionBar_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXToolbar_ActionBar_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXToolbar_ActionBar_LayoutParams)

@implementation ADXToolbar_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXToolbar_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                    withInt:(jint)gravity {
  ADXToolbar_LayoutParams_initWithInt_withInt_withInt_(self, width, height, gravity);
  return self;
}

- (instancetype)initWithADXToolbar_LayoutParams:(ADXToolbar_LayoutParams *)source {
  ADXToolbar_LayoutParams_initWithADXToolbar_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithInt:withInt:withInt:);
  methods[2].selector = @selector(initWithADXToolbar_LayoutParams:);
  methods[3].selector = @selector(initWithADViewGroup_LayoutParams:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "CUSTOM", "I", .constantValue.asInt = ADXToolbar_LayoutParams_CUSTOM, 0x18, -1, -1, -1, -1 },
    { "SYSTEM", "I", .constantValue.asInt = ADXToolbar_LayoutParams_SYSTEM, 0x18, -1, -1, -1, -1 },
    { "EXPANDED", "I", .constantValue.asInt = ADXToolbar_LayoutParams_EXPANDED, 0x18, -1, -1, -1, -1 },
    { "mViewType_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "III", "LADXToolbar_LayoutParams;", "LADViewGroup_LayoutParams;", "LADXToolbar;" };
  static const J2ObjcClassInfo _ADXToolbar_LayoutParams = { "LayoutParams", "androidx.appcompat.widget", ptrTable, methods, fields, 7, 0x9, 4, 4, 4, -1, -1, -1, -1 };
  return &_ADXToolbar_LayoutParams;
}

@end

void ADXToolbar_LayoutParams_initWithInt_withInt_(ADXToolbar_LayoutParams *self, jint width, jint height) {
  ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_(self, width, height);
  self->mViewType_ = ADXToolbar_LayoutParams_CUSTOM;
  self->gravity_ = ADGravity_CENTER_VERTICAL | ADXGravityCompat_START;
}

ADXToolbar_LayoutParams *new_ADXToolbar_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXToolbar_LayoutParams, initWithInt_withInt_, width, height)
}

ADXToolbar_LayoutParams *create_ADXToolbar_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXToolbar_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXToolbar_LayoutParams_initWithInt_withInt_withInt_(ADXToolbar_LayoutParams *self, jint width, jint height, jint gravity) {
  ADXToolbar_ActionBar_LayoutParams_initWithInt_withInt_(self, width, height);
  self->mViewType_ = ADXToolbar_LayoutParams_CUSTOM;
  self->gravity_ = gravity;
}

ADXToolbar_LayoutParams *new_ADXToolbar_LayoutParams_initWithInt_withInt_withInt_(jint width, jint height, jint gravity) {
  J2OBJC_NEW_IMPL(ADXToolbar_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

ADXToolbar_LayoutParams *create_ADXToolbar_LayoutParams_initWithInt_withInt_withInt_(jint width, jint height, jint gravity) {
  J2OBJC_CREATE_IMPL(ADXToolbar_LayoutParams, initWithInt_withInt_withInt_, width, height, gravity)
}

void ADXToolbar_LayoutParams_initWithADXToolbar_LayoutParams_(ADXToolbar_LayoutParams *self, ADXToolbar_LayoutParams *source) {
  ADXToolbar_ActionBar_LayoutParams_initWithADXToolbar_ActionBar_LayoutParams_(self, source);
  self->mViewType_ = ADXToolbar_LayoutParams_CUSTOM;
  self->mViewType_ = ((ADXToolbar_LayoutParams *) nil_chk(source))->mViewType_;
}

ADXToolbar_LayoutParams *new_ADXToolbar_LayoutParams_initWithADXToolbar_LayoutParams_(ADXToolbar_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXToolbar_LayoutParams, initWithADXToolbar_LayoutParams_, source)
}

ADXToolbar_LayoutParams *create_ADXToolbar_LayoutParams_initWithADXToolbar_LayoutParams_(ADXToolbar_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXToolbar_LayoutParams, initWithADXToolbar_LayoutParams_, source)
}

void ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_(ADXToolbar_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADXToolbar_ActionBar_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  self->mViewType_ = ADXToolbar_LayoutParams_CUSTOM;
}

ADXToolbar_LayoutParams *new_ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXToolbar_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXToolbar_LayoutParams *create_ADXToolbar_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXToolbar_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXToolbar_LayoutParams)

@implementation ADXToolbar_ActionBar

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXToolbar_ActionBar_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXToolbar;", "LADXToolbar_ActionBar_LayoutParams;" };
  static const J2ObjcClassInfo _ADXToolbar_ActionBar = { "ActionBar", "androidx.appcompat.widget", ptrTable, methods, NULL, 7, 0x9, 1, 0, 0, 1, -1, -1, -1 };
  return &_ADXToolbar_ActionBar;
}

@end

void ADXToolbar_ActionBar_init(ADXToolbar_ActionBar *self) {
  NSObject_init(self);
}

ADXToolbar_ActionBar *new_ADXToolbar_ActionBar_init() {
  J2OBJC_NEW_IMPL(ADXToolbar_ActionBar, init)
}

ADXToolbar_ActionBar *create_ADXToolbar_ActionBar_init() {
  J2OBJC_CREATE_IMPL(ADXToolbar_ActionBar, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXToolbar_ActionBar)
