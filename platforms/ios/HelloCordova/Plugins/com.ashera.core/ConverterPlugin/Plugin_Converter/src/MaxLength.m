//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\MaxLength.java
//

#include "BaseValidator.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "MaxLength.h"
#include "ResourceBundleUtils.h"
#include "Validation.h"
#include "java/lang/Integer.h"


@interface ASMaxLength () {
 @public
  jint mMaxLength_;
}

- (instancetype)initWithInt:(jint)maxLength;

@end

__attribute__((unused)) static void ASMaxLength_initWithInt_(ASMaxLength *self, jint maxLength);

__attribute__((unused)) static ASMaxLength *new_ASMaxLength_initWithInt_(jint maxLength) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASMaxLength *create_ASMaxLength_initWithInt_(jint maxLength);

@implementation ASMaxLength

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASMaxLength_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  return create_ASMaxLength_initWithInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(argument), 0)));
}

- (instancetype)initWithInt:(jint)maxLength {
  ASMaxLength_initWithInt_(self, maxLength);
  return self;
}

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/max_length_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
  return NSString_java_formatWithNSString_withNSObjectArray_(res, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mMaxLength_) } count:1 type:NSObject_class_()]);
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil) {
    text = @"";
  }
  return [text java_length] <= mMaxLength_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstanceWithNSStringArray:);
  methods[2].selector = @selector(initWithInt:);
  methods[3].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[4].selector = @selector(isValidWithNSString:withASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMaxLength_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "I", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;" };
  static const J2ObjcClassInfo _ASMaxLength = { "MaxLength", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 5, 1, -1, -1, -1, -1, -1 };
  return &_ASMaxLength;
}

@end

void ASMaxLength_init(ASMaxLength *self) {
  ASBaseValidator_init(self);
  self->mMaxLength_ = 0;
}

ASMaxLength *new_ASMaxLength_init() {
  J2OBJC_NEW_IMPL(ASMaxLength, init)
}

ASMaxLength *create_ASMaxLength_init() {
  J2OBJC_CREATE_IMPL(ASMaxLength, init)
}

void ASMaxLength_initWithInt_(ASMaxLength *self, jint maxLength) {
  ASBaseValidator_init(self);
  self->mMaxLength_ = maxLength;
}

ASMaxLength *new_ASMaxLength_initWithInt_(jint maxLength) {
  J2OBJC_NEW_IMPL(ASMaxLength, initWithInt_, maxLength)
}

ASMaxLength *create_ASMaxLength_initWithInt_(jint maxLength) {
  J2OBJC_CREATE_IMPL(ASMaxLength, initWithInt_, maxLength)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASMaxLength)
