//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\DiffUtil.java
//

#include "AdapterListUpdateCallback.h"
#include "BatchingListUpdateCallback.h"
#include "DiffUtil.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ListUpdateCallback.h"
#include "RecyclerView.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Math.h"
#include "java/util/ArrayDeque.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/Collection.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@class ADXDiffUtil_PostponedUpdate;
@protocol JavaUtilCollection;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilList;


#pragma clang diagnostic ignored "-Wprotocol"

@interface ADXDiffUtil ()

- (instancetype)init;

/*!
 @brief Finds a middle snake in the given range.
 */
+ (ADXDiffUtil_Snake *)midPointWithADXDiffUtil_Range:(ADXDiffUtil_Range *)range
                            withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)forward
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)backward;

+ (ADXDiffUtil_Snake *)forwardWithADXDiffUtil_Range:(ADXDiffUtil_Range *)range
                           withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                      withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)forward
                      withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)backward
                                            withInt:(jint)d;

+ (ADXDiffUtil_Snake *)backwardWithADXDiffUtil_Range:(ADXDiffUtil_Range *)range
                            withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)forward
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)backward
                                             withInt:(jint)d;

@end

inline id<JavaUtilComparator> ADXDiffUtil_get_DIAGONAL_COMPARATOR(void);
static id<JavaUtilComparator> ADXDiffUtil_DIAGONAL_COMPARATOR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDiffUtil, DIAGONAL_COMPARATOR, id<JavaUtilComparator>)

__attribute__((unused)) static void ADXDiffUtil_init(ADXDiffUtil *self);

__attribute__((unused)) static ADXDiffUtil *new_ADXDiffUtil_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXDiffUtil *create_ADXDiffUtil_init(void);

__attribute__((unused)) static ADXDiffUtil_Snake *ADXDiffUtil_midPointWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_(ADXDiffUtil_Range *range, ADXDiffUtil_Callback *cb, ADXDiffUtil_CenteredArray *forward, ADXDiffUtil_CenteredArray *backward);

__attribute__((unused)) static ADXDiffUtil_Snake *ADXDiffUtil_forwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(ADXDiffUtil_Range *range, ADXDiffUtil_Callback *cb, ADXDiffUtil_CenteredArray *forward, ADXDiffUtil_CenteredArray *backward, jint d);

__attribute__((unused)) static ADXDiffUtil_Snake *ADXDiffUtil_backwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(ADXDiffUtil_Range *range, ADXDiffUtil_Callback *cb, ADXDiffUtil_CenteredArray *forward, ADXDiffUtil_CenteredArray *backward, jint d);

@interface ADXDiffUtil_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(ADXDiffUtil_Diagonal *)o1
               withId:(ADXDiffUtil_Diagonal *)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXDiffUtil_1)

__attribute__((unused)) static void ADXDiffUtil_1_init(ADXDiffUtil_1 *self);

__attribute__((unused)) static ADXDiffUtil_1 *new_ADXDiffUtil_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXDiffUtil_1 *create_ADXDiffUtil_1_init(void);

@interface ADXDiffUtil_DiffResult () {
 @public
  id<JavaUtilList> mDiagonals_;
  IOSIntArray *mOldItemStatuses_;
  IOSIntArray *mNewItemStatuses_;
  ADXDiffUtil_Callback *mCallback_;
  jint mOldListSize_;
  jint mNewListSize_;
  jboolean mDetectMoves_;
}

/*!
 @brief Add edge diagonals so that we can iterate as long as there are diagonals w/o lots of
  null checks around
 */
- (void)addEdgeDiagonals;

/*!
 @brief Find position mapping from old list to new list.
 If moves are requested, we'll also try to do an n^2 search between additions and
  removals to find moves.
 */
- (void)findMatchingItems;

- (void)findMoveMatches;

/*!
 @brief Search the whole list to find the addition for the given removal of position posX
 @param posX position in the old list
 */
- (void)findMatchingAdditionWithInt:(jint)posX;

+ (ADXDiffUtil_PostponedUpdate *)getPostponedUpdateWithJavaUtilCollection:(id<JavaUtilCollection>)postponedUpdates
                                                                  withInt:(jint)posInList
                                                              withBoolean:(jboolean)removal;

@end

J2OBJC_FIELD_SETTER(ADXDiffUtil_DiffResult, mDiagonals_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXDiffUtil_DiffResult, mOldItemStatuses_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXDiffUtil_DiffResult, mNewItemStatuses_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXDiffUtil_DiffResult, mCallback_, ADXDiffUtil_Callback *)

/*!
 @brief While reading the flags below, keep in mind that when multiple items move in a list,
  Myers's may pick any of them as the anchor item and consider that one NOT_CHANGED while
  picking others as additions and removals.This is completely fine as we later detect
  all moves.
 <p>
  Below, when an item is mentioned to stay in the same "location", it means we won't
  dispatch a move/add/remove for it, it DOES NOT mean the item is still in the same
  position.
 */
inline jint ADXDiffUtil_DiffResult_get_FLAG_NOT_CHANGED(void);
#define ADXDiffUtil_DiffResult_FLAG_NOT_CHANGED 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_NOT_CHANGED, jint)

inline jint ADXDiffUtil_DiffResult_get_FLAG_CHANGED(void);
#define ADXDiffUtil_DiffResult_FLAG_CHANGED 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_CHANGED, jint)

inline jint ADXDiffUtil_DiffResult_get_FLAG_MOVED_CHANGED(void);
#define ADXDiffUtil_DiffResult_FLAG_MOVED_CHANGED 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_MOVED_CHANGED, jint)

inline jint ADXDiffUtil_DiffResult_get_FLAG_MOVED_NOT_CHANGED(void);
#define ADXDiffUtil_DiffResult_FLAG_MOVED_NOT_CHANGED 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_MOVED_NOT_CHANGED, jint)

inline jint ADXDiffUtil_DiffResult_get_FLAG_MOVED(void);
#define ADXDiffUtil_DiffResult_FLAG_MOVED 12
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_MOVED, jint)

inline jint ADXDiffUtil_DiffResult_get_FLAG_OFFSET(void);
#define ADXDiffUtil_DiffResult_FLAG_OFFSET 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_OFFSET, jint)

inline jint ADXDiffUtil_DiffResult_get_FLAG_MASK(void);
#define ADXDiffUtil_DiffResult_FLAG_MASK 15
J2OBJC_STATIC_FIELD_CONSTANT(ADXDiffUtil_DiffResult, FLAG_MASK, jint)

__attribute__((unused)) static void ADXDiffUtil_DiffResult_addEdgeDiagonals(ADXDiffUtil_DiffResult *self);

__attribute__((unused)) static void ADXDiffUtil_DiffResult_findMatchingItems(ADXDiffUtil_DiffResult *self);

__attribute__((unused)) static void ADXDiffUtil_DiffResult_findMoveMatches(ADXDiffUtil_DiffResult *self);

__attribute__((unused)) static void ADXDiffUtil_DiffResult_findMatchingAdditionWithInt_(ADXDiffUtil_DiffResult *self, jint posX);

__attribute__((unused)) static ADXDiffUtil_PostponedUpdate *ADXDiffUtil_DiffResult_getPostponedUpdateWithJavaUtilCollection_withInt_withBoolean_(id<JavaUtilCollection> postponedUpdates, jint posInList, jboolean removal);

/*!
 @brief Represents an update that we skipped because it was a move.
 <p>
  When an update is skipped, it is tracked as other updates are dispatched until the matching
  add/remove operation is found at which point the tracked position is used to dispatch the
  update.
 */
@interface ADXDiffUtil_PostponedUpdate : NSObject {
 @public
  /*!
   @brief position in the list that owns this item
   */
  jint posInOwnerList_;
  /*!
   @brief position wrt to the end of the list
   */
  jint currentPos_;
  /*!
   @brief true if this is a removal, false otherwise
   */
  jboolean removal_;
}

- (instancetype)initWithInt:(jint)posInOwnerList
                    withInt:(jint)currentPos
                withBoolean:(jboolean)removal;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXDiffUtil_PostponedUpdate)

__attribute__((unused)) static void ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(ADXDiffUtil_PostponedUpdate *self, jint posInOwnerList, jint currentPos, jboolean removal);

__attribute__((unused)) static ADXDiffUtil_PostponedUpdate *new_ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(jint posInOwnerList, jint currentPos, jboolean removal) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXDiffUtil_PostponedUpdate *create_ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(jint posInOwnerList, jint currentPos, jboolean removal);

J2OBJC_TYPE_LITERAL_HEADER(ADXDiffUtil_PostponedUpdate)

@interface ADXDiffUtil_CenteredArray () {
 @public
  IOSIntArray *mData_;
  jint mMid_;
}

@end

J2OBJC_FIELD_SETTER(ADXDiffUtil_CenteredArray, mData_, IOSIntArray *)

J2OBJC_INITIALIZED_DEFN(ADXDiffUtil)

@implementation ADXDiffUtil

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDiffUtil_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADXDiffUtil_DiffResult *)calculateDiffWithADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb {
  return ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_(cb);
}

+ (ADXDiffUtil_DiffResult *)calculateDiffWithADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                                                      withBoolean:(jboolean)detectMoves {
  return ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_withBoolean_(cb, detectMoves);
}

+ (ADXDiffUtil_Snake *)midPointWithADXDiffUtil_Range:(ADXDiffUtil_Range *)range
                            withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)forward
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)backward {
  return ADXDiffUtil_midPointWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_(range, cb, forward, backward);
}

+ (ADXDiffUtil_Snake *)forwardWithADXDiffUtil_Range:(ADXDiffUtil_Range *)range
                           withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                      withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)forward
                      withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)backward
                                            withInt:(jint)d {
  return ADXDiffUtil_forwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(range, cb, forward, backward, d);
}

+ (ADXDiffUtil_Snake *)backwardWithADXDiffUtil_Range:(ADXDiffUtil_Range *)range
                            withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)cb
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)forward
                       withADXDiffUtil_CenteredArray:(ADXDiffUtil_CenteredArray *)backward
                                             withInt:(jint)d {
  return ADXDiffUtil_backwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(range, cb, forward, backward, d);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_DiffResult;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_DiffResult;", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_Snake;", 0xa, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_Snake;", 0xa, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_Snake;", 0xa, 7, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(calculateDiffWithADXDiffUtil_Callback:);
  methods[2].selector = @selector(calculateDiffWithADXDiffUtil_Callback:withBoolean:);
  methods[3].selector = @selector(midPointWithADXDiffUtil_Range:withADXDiffUtil_Callback:withADXDiffUtil_CenteredArray:withADXDiffUtil_CenteredArray:);
  methods[4].selector = @selector(forwardWithADXDiffUtil_Range:withADXDiffUtil_Callback:withADXDiffUtil_CenteredArray:withADXDiffUtil_CenteredArray:withInt:);
  methods[5].selector = @selector(backwardWithADXDiffUtil_Range:withADXDiffUtil_Callback:withADXDiffUtil_CenteredArray:withADXDiffUtil_CenteredArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DIAGONAL_COMPARATOR", "LJavaUtilComparator;", .constantValue.asLong = 0, 0x1a, -1, 8, 9, -1 },
  };
  static const void *ptrTable[] = { "calculateDiff", "LADXDiffUtil_Callback;", "LADXDiffUtil_Callback;Z", "midPoint", "LADXDiffUtil_Range;LADXDiffUtil_Callback;LADXDiffUtil_CenteredArray;LADXDiffUtil_CenteredArray;", "forward", "LADXDiffUtil_Range;LADXDiffUtil_Callback;LADXDiffUtil_CenteredArray;LADXDiffUtil_CenteredArray;I", "backward", &ADXDiffUtil_DIAGONAL_COMPARATOR, "Ljava/util/Comparator<Landroidx/recyclerview/widget/DiffUtil$Diagonal;>;", "LADXDiffUtil_Callback;LADXDiffUtil_ItemCallback;LADXDiffUtil_Diagonal;LADXDiffUtil_Snake;LADXDiffUtil_Range;LADXDiffUtil_DiffResult;LADXDiffUtil_PostponedUpdate;LADXDiffUtil_CenteredArray;" };
  static const J2ObjcClassInfo _ADXDiffUtil = { "DiffUtil", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x1, 6, 1, -1, 10, -1, -1, -1 };
  return &_ADXDiffUtil;
}

+ (void)initialize {
  if (self == [ADXDiffUtil class]) {
    JreStrongAssignAndConsume(&ADXDiffUtil_DIAGONAL_COMPARATOR, new_ADXDiffUtil_1_init());
    J2OBJC_SET_INITIALIZED(ADXDiffUtil)
  }
}

@end

void ADXDiffUtil_init(ADXDiffUtil *self) {
  NSObject_init(self);
}

ADXDiffUtil *new_ADXDiffUtil_init() {
  J2OBJC_NEW_IMPL(ADXDiffUtil, init)
}

ADXDiffUtil *create_ADXDiffUtil_init() {
  J2OBJC_CREATE_IMPL(ADXDiffUtil, init)
}

ADXDiffUtil_DiffResult *ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_(ADXDiffUtil_Callback *cb) {
  ADXDiffUtil_initialize();
  return ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_withBoolean_(cb, true);
}

ADXDiffUtil_DiffResult *ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_withBoolean_(ADXDiffUtil_Callback *cb, jboolean detectMoves) {
  ADXDiffUtil_initialize();
  jint oldSize = [((ADXDiffUtil_Callback *) nil_chk(cb)) getOldListSize];
  jint newSize = [cb getNewListSize];
  id<JavaUtilList> diagonals = create_JavaUtilArrayList_init();
  id<JavaUtilList> stack = create_JavaUtilArrayList_init();
  [stack addWithId:create_ADXDiffUtil_Range_initWithInt_withInt_withInt_withInt_(0, oldSize, 0, newSize)];
  jint max = JreIntDiv((oldSize + newSize + 1), 2);
  ADXDiffUtil_CenteredArray *forward = create_ADXDiffUtil_CenteredArray_initWithInt_(max * 2 + 1);
  ADXDiffUtil_CenteredArray *backward = create_ADXDiffUtil_CenteredArray_initWithInt_(max * 2 + 1);
  id<JavaUtilList> rangePool = create_JavaUtilArrayList_init();
  while (![stack isEmpty]) {
    ADXDiffUtil_Range *range = [stack removeWithInt:[stack size] - 1];
    ADXDiffUtil_Snake *snake = ADXDiffUtil_midPointWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_(range, cb, forward, backward);
    if (snake != nil) {
      if ([snake diagonalSize] > 0) {
        [diagonals addWithId:[snake toDiagonal]];
      }
      ADXDiffUtil_Range *left = [rangePool isEmpty] ? create_ADXDiffUtil_Range_init() : [rangePool removeWithInt:[rangePool size] - 1];
      left->oldListStart_ = ((ADXDiffUtil_Range *) nil_chk(range))->oldListStart_;
      left->newListStart_ = range->newListStart_;
      left->oldListEnd_ = snake->startX_;
      left->newListEnd_ = snake->startY_;
      [stack addWithId:left];
      ADXDiffUtil_Range *right = range;
      right->oldListEnd_ = range->oldListEnd_;
      right->newListEnd_ = range->newListEnd_;
      right->oldListStart_ = snake->endX_;
      right->newListStart_ = snake->endY_;
      [stack addWithId:right];
    }
    else {
      [rangePool addWithId:range];
    }
  }
  JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(diagonals, ADXDiffUtil_DIAGONAL_COMPARATOR);
  return create_ADXDiffUtil_DiffResult_initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_(cb, diagonals, [forward backingData], [backward backingData], detectMoves);
}

ADXDiffUtil_Snake *ADXDiffUtil_midPointWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_(ADXDiffUtil_Range *range, ADXDiffUtil_Callback *cb, ADXDiffUtil_CenteredArray *forward, ADXDiffUtil_CenteredArray *backward) {
  ADXDiffUtil_initialize();
  if ([((ADXDiffUtil_Range *) nil_chk(range)) oldSize] < 1 || [range newSize] < 1) {
    return nil;
  }
  jint max = JreIntDiv(([range oldSize] + [range newSize] + 1), 2);
  [((ADXDiffUtil_CenteredArray *) nil_chk(forward)) setWithInt:1 withInt:range->oldListStart_];
  [((ADXDiffUtil_CenteredArray *) nil_chk(backward)) setWithInt:1 withInt:range->oldListEnd_];
  for (jint d = 0; d < max; d++) {
    ADXDiffUtil_Snake *snake = ADXDiffUtil_forwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(range, cb, forward, backward, d);
    if (snake != nil) {
      return snake;
    }
    snake = ADXDiffUtil_backwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(range, cb, forward, backward, d);
    if (snake != nil) {
      return snake;
    }
  }
  return nil;
}

ADXDiffUtil_Snake *ADXDiffUtil_forwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(ADXDiffUtil_Range *range, ADXDiffUtil_Callback *cb, ADXDiffUtil_CenteredArray *forward, ADXDiffUtil_CenteredArray *backward, jint d) {
  ADXDiffUtil_initialize();
  jboolean checkForSnake = JreIntMod(JavaLangMath_absWithInt_([((ADXDiffUtil_Range *) nil_chk(range)) oldSize] - [range newSize]), 2) == 1;
  jint delta = [range oldSize] - [range newSize];
  for (jint k = -d; k <= d; k += 2) {
    jint startX;
    jint startY;
    jint x;
    jint y;
    if (k == -d || (k != d && [((ADXDiffUtil_CenteredArray *) nil_chk(forward)) getWithInt:k + 1] > [forward getWithInt:k - 1])) {
      x = startX = [((ADXDiffUtil_CenteredArray *) nil_chk(forward)) getWithInt:k + 1];
    }
    else {
      startX = [((ADXDiffUtil_CenteredArray *) nil_chk(forward)) getWithInt:k - 1];
      x = startX + 1;
    }
    y = range->newListStart_ + (x - range->oldListStart_) - k;
    startY = (d == 0 || x != startX) ? y : y - 1;
    while (x < range->oldListEnd_ && y < range->newListEnd_ && [((ADXDiffUtil_Callback *) nil_chk(cb)) areItemsTheSameWithInt:x withInt:y]) {
      x++;
      y++;
    }
    [forward setWithInt:k withInt:x];
    if (checkForSnake) {
      jint backwardsK = delta - k;
      if (backwardsK >= -d + 1 && backwardsK <= d - 1 && [((ADXDiffUtil_CenteredArray *) nil_chk(backward)) getWithInt:backwardsK] <= x) {
        ADXDiffUtil_Snake *snake = create_ADXDiffUtil_Snake_init();
        snake->startX_ = startX;
        snake->startY_ = startY;
        snake->endX_ = x;
        snake->endY_ = y;
        snake->reverse_ = false;
        return snake;
      }
    }
  }
  return nil;
}

ADXDiffUtil_Snake *ADXDiffUtil_backwardWithADXDiffUtil_Range_withADXDiffUtil_Callback_withADXDiffUtil_CenteredArray_withADXDiffUtil_CenteredArray_withInt_(ADXDiffUtil_Range *range, ADXDiffUtil_Callback *cb, ADXDiffUtil_CenteredArray *forward, ADXDiffUtil_CenteredArray *backward, jint d) {
  ADXDiffUtil_initialize();
  jboolean checkForSnake = JreIntMod(([((ADXDiffUtil_Range *) nil_chk(range)) oldSize] - [range newSize]), 2) == 0;
  jint delta = [range oldSize] - [range newSize];
  for (jint k = -d; k <= d; k += 2) {
    jint startX;
    jint startY;
    jint x;
    jint y;
    if (k == -d || (k != d && [((ADXDiffUtil_CenteredArray *) nil_chk(backward)) getWithInt:k + 1] < [backward getWithInt:k - 1])) {
      x = startX = [((ADXDiffUtil_CenteredArray *) nil_chk(backward)) getWithInt:k + 1];
    }
    else {
      startX = [((ADXDiffUtil_CenteredArray *) nil_chk(backward)) getWithInt:k - 1];
      x = startX - 1;
    }
    y = range->newListEnd_ - ((range->oldListEnd_ - x) - k);
    startY = (d == 0 || x != startX) ? y : y + 1;
    while (x > range->oldListStart_ && y > range->newListStart_ && [((ADXDiffUtil_Callback *) nil_chk(cb)) areItemsTheSameWithInt:x - 1 withInt:y - 1]) {
      x--;
      y--;
    }
    [backward setWithInt:k withInt:x];
    if (checkForSnake) {
      jint forwardsK = delta - k;
      if (forwardsK >= -d && forwardsK <= d && [((ADXDiffUtil_CenteredArray *) nil_chk(forward)) getWithInt:forwardsK] >= x) {
        ADXDiffUtil_Snake *snake = create_ADXDiffUtil_Snake_init();
        snake->startX_ = x;
        snake->startY_ = y;
        snake->endX_ = startX;
        snake->endY_ = startY;
        snake->reverse_ = true;
        return snake;
      }
    }
  }
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil)

@implementation ADXDiffUtil_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDiffUtil_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(ADXDiffUtil_Diagonal *)o1
               withId:(ADXDiffUtil_Diagonal *)o2 {
  return ((ADXDiffUtil_Diagonal *) nil_chk(o1))->x_ - ((ADXDiffUtil_Diagonal *) nil_chk(o2))->x_;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LADXDiffUtil_Diagonal;LADXDiffUtil_Diagonal;", "LADXDiffUtil;", "Ljava/lang/Object;Ljava/util/Comparator<Landroidx/recyclerview/widget/DiffUtil$Diagonal;>;" };
  static const J2ObjcClassInfo _ADXDiffUtil_1 = { "", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, -1, 3, -1 };
  return &_ADXDiffUtil_1;
}

@end

void ADXDiffUtil_1_init(ADXDiffUtil_1 *self) {
  NSObject_init(self);
}

ADXDiffUtil_1 *new_ADXDiffUtil_1_init() {
  J2OBJC_NEW_IMPL(ADXDiffUtil_1, init)
}

ADXDiffUtil_1 *create_ADXDiffUtil_1_init() {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_1, init)
}

@implementation ADXDiffUtil_Callback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDiffUtil_Callback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getOldListSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getNewListSize {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)areItemsTheSameWithInt:(jint)oldItemPosition
                           withInt:(jint)newItemPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)areContentsTheSameWithInt:(jint)oldItemPosition
                              withInt:(jint)newItemPosition {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getChangePayloadWithInt:(jint)oldItemPosition
                      withInt:(jint)newItemPosition {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 3, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getOldListSize);
  methods[2].selector = @selector(getNewListSize);
  methods[3].selector = @selector(areItemsTheSameWithInt:withInt:);
  methods[4].selector = @selector(areContentsTheSameWithInt:withInt:);
  methods[5].selector = @selector(getChangePayloadWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "areItemsTheSame", "II", "areContentsTheSame", "getChangePayload", "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_Callback = { "Callback", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x409, 6, 0, 4, -1, -1, -1, -1 };
  return &_ADXDiffUtil_Callback;
}

@end

void ADXDiffUtil_Callback_init(ADXDiffUtil_Callback *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_Callback)

@implementation ADXDiffUtil_ItemCallback

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDiffUtil_ItemCallback_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)areItemsTheSameWithId:(id)oldItem
                           withId:(id)newItem {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)areContentsTheSameWithId:(id)oldItem
                              withId:(id)newItem {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)getChangePayloadWithId:(id)oldItem
                      withId:(id)newItem {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x401, 3, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(areItemsTheSameWithId:withId:);
  methods[2].selector = @selector(areContentsTheSameWithId:withId:);
  methods[3].selector = @selector(getChangePayloadWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "areItemsTheSame", "LNSObject;LNSObject;", "(TT;TT;)Z", "areContentsTheSame", "getChangePayload", "(TT;TT;)Ljava/lang/Object;", "LADXDiffUtil;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXDiffUtil_ItemCallback = { "ItemCallback", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x409, 4, 0, 6, -1, -1, 7, -1 };
  return &_ADXDiffUtil_ItemCallback;
}

@end

void ADXDiffUtil_ItemCallback_init(ADXDiffUtil_ItemCallback *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_ItemCallback)

@implementation ADXDiffUtil_Diagonal

- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)size {
  ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(self, x, y, size);
  return self;
}

- (jint)endX {
  return x_ + size_;
}

- (jint)endY {
  return y_ + size_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:);
  methods[1].selector = @selector(endX);
  methods[2].selector = @selector(endY);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "y_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "size_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "III", "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_Diagonal = { "Diagonal", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 3, 3, 1, -1, -1, -1, -1 };
  return &_ADXDiffUtil_Diagonal;
}

@end

void ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(ADXDiffUtil_Diagonal *self, jint x, jint y, jint size) {
  NSObject_init(self);
  self->x_ = x;
  self->y_ = y;
  self->size_ = size;
}

ADXDiffUtil_Diagonal *new_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(jint x, jint y, jint size) {
  J2OBJC_NEW_IMPL(ADXDiffUtil_Diagonal, initWithInt_withInt_withInt_, x, y, size)
}

ADXDiffUtil_Diagonal *create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(jint x, jint y, jint size) {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_Diagonal, initWithInt_withInt_withInt_, x, y, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_Diagonal)

@implementation ADXDiffUtil_Snake

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDiffUtil_Snake_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)hasAdditionOrRemoval {
  return endY_ - startY_ != endX_ - startX_;
}

- (jboolean)isAddition {
  return endY_ - startY_ > endX_ - startX_;
}

- (jint)diagonalSize {
  return JavaLangMath_minWithInt_withInt_(endX_ - startX_, endY_ - startY_);
}

- (ADXDiffUtil_Diagonal *)toDiagonal {
  if ([self hasAdditionOrRemoval]) {
    if (reverse_) {
      return create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(startX_, startY_, [self diagonalSize]);
    }
    else {
      if ([self isAddition]) {
        return create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(startX_, startY_ + 1, [self diagonalSize]);
      }
      else {
        return create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(startX_ + 1, startY_, [self diagonalSize]);
      }
    }
  }
  else {
    return create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(startX_, startY_, endX_ - startX_);
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_Diagonal;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hasAdditionOrRemoval);
  methods[2].selector = @selector(isAddition);
  methods[3].selector = @selector(diagonalSize);
  methods[4].selector = @selector(toDiagonal);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "startX_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "startY_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endX_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "endY_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "reverse_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_Snake = { "Snake", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 5, 5, 0, -1, -1, -1, -1 };
  return &_ADXDiffUtil_Snake;
}

@end

void ADXDiffUtil_Snake_init(ADXDiffUtil_Snake *self) {
  NSObject_init(self);
}

ADXDiffUtil_Snake *new_ADXDiffUtil_Snake_init() {
  J2OBJC_NEW_IMPL(ADXDiffUtil_Snake, init)
}

ADXDiffUtil_Snake *create_ADXDiffUtil_Snake_init() {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_Snake, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_Snake)

@implementation ADXDiffUtil_Range

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXDiffUtil_Range_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)oldListStart
                    withInt:(jint)oldListEnd
                    withInt:(jint)newListStart
                    withInt:(jint)newListEnd {
  ADXDiffUtil_Range_initWithInt_withInt_withInt_withInt_(self, oldListStart, oldListEnd, newListStart, newListEnd);
  return self;
}

- (jint)oldSize {
  return oldListEnd_ - oldListStart_;
}

- (jint)newSize {
  return newListEnd_ - newListStart_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(oldSize);
  methods[3].selector = @selector(newSize);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "oldListStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "oldListEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "newListStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "newListEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIII", "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_Range = { "Range", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 4, 4, 1, -1, -1, -1, -1 };
  return &_ADXDiffUtil_Range;
}

@end

void ADXDiffUtil_Range_init(ADXDiffUtil_Range *self) {
  NSObject_init(self);
}

ADXDiffUtil_Range *new_ADXDiffUtil_Range_init() {
  J2OBJC_NEW_IMPL(ADXDiffUtil_Range, init)
}

ADXDiffUtil_Range *create_ADXDiffUtil_Range_init() {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_Range, init)
}

void ADXDiffUtil_Range_initWithInt_withInt_withInt_withInt_(ADXDiffUtil_Range *self, jint oldListStart, jint oldListEnd, jint newListStart, jint newListEnd) {
  NSObject_init(self);
  self->oldListStart_ = oldListStart;
  self->oldListEnd_ = oldListEnd;
  self->newListStart_ = newListStart;
  self->newListEnd_ = newListEnd;
}

ADXDiffUtil_Range *new_ADXDiffUtil_Range_initWithInt_withInt_withInt_withInt_(jint oldListStart, jint oldListEnd, jint newListStart, jint newListEnd) {
  J2OBJC_NEW_IMPL(ADXDiffUtil_Range, initWithInt_withInt_withInt_withInt_, oldListStart, oldListEnd, newListStart, newListEnd)
}

ADXDiffUtil_Range *create_ADXDiffUtil_Range_initWithInt_withInt_withInt_withInt_(jint oldListStart, jint oldListEnd, jint newListStart, jint newListEnd) {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_Range, initWithInt_withInt_withInt_withInt_, oldListStart, oldListEnd, newListStart, newListEnd)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_Range)

@implementation ADXDiffUtil_DiffResult

- (instancetype)initWithADXDiffUtil_Callback:(ADXDiffUtil_Callback *)callback
                            withJavaUtilList:(id<JavaUtilList>)diagonals
                                withIntArray:(IOSIntArray *)oldItemStatuses
                                withIntArray:(IOSIntArray *)newItemStatuses
                                 withBoolean:(jboolean)detectMoves {
  ADXDiffUtil_DiffResult_initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_(self, callback, diagonals, oldItemStatuses, newItemStatuses, detectMoves);
  return self;
}

- (void)addEdgeDiagonals {
  ADXDiffUtil_DiffResult_addEdgeDiagonals(self);
}

- (void)findMatchingItems {
  ADXDiffUtil_DiffResult_findMatchingItems(self);
}

- (void)findMoveMatches {
  ADXDiffUtil_DiffResult_findMoveMatches(self);
}

- (void)findMatchingAdditionWithInt:(jint)posX {
  ADXDiffUtil_DiffResult_findMatchingAdditionWithInt_(self, posX);
}

- (jint)convertOldPositionToNewWithInt:(jint)oldListPosition {
  if (oldListPosition < 0 || oldListPosition >= mOldListSize_) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Index out of bounds - passed position = ", oldListPosition, @", old list size = ", mOldListSize_));
  }
  jint status = IOSIntArray_Get(nil_chk(mOldItemStatuses_), oldListPosition);
  if ((status & ADXDiffUtil_DiffResult_FLAG_MASK) == 0) {
    return ADXDiffUtil_DiffResult_NO_POSITION;
  }
  else {
    return JreRShift32(status, ADXDiffUtil_DiffResult_FLAG_OFFSET);
  }
}

- (jint)convertNewPositionToOldWithInt:(jint)newListPosition {
  if (newListPosition < 0 || newListPosition >= mNewListSize_) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I", @"Index out of bounds - passed position = ", newListPosition, @", new list size = ", mNewListSize_));
  }
  jint status = IOSIntArray_Get(nil_chk(mNewItemStatuses_), newListPosition);
  if ((status & ADXDiffUtil_DiffResult_FLAG_MASK) == 0) {
    return ADXDiffUtil_DiffResult_NO_POSITION;
  }
  else {
    return JreRShift32(status, ADXDiffUtil_DiffResult_FLAG_OFFSET);
  }
}

- (void)dispatchUpdatesToWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)adapter {
  [self dispatchUpdatesToWithADXListUpdateCallback:create_ADXAdapterListUpdateCallback_initWithADXRecyclerView_Adapter_(adapter)];
}

- (void)dispatchUpdatesToWithADXListUpdateCallback:(id<ADXListUpdateCallback>)updateCallback {
  ADXBatchingListUpdateCallback *batchingCallback;
  if ([updateCallback isKindOfClass:[ADXBatchingListUpdateCallback class]]) {
    batchingCallback = (ADXBatchingListUpdateCallback *) updateCallback;
  }
  else {
    batchingCallback = create_ADXBatchingListUpdateCallback_initWithADXListUpdateCallback_(updateCallback);
    updateCallback = batchingCallback;
  }
  jint currentListSize = mOldListSize_;
  id<JavaUtilCollection> postponedUpdates = create_JavaUtilArrayDeque_init();
  jint posX = mOldListSize_;
  jint posY = mNewListSize_;
  for (jint diagonalIndex = [((id<JavaUtilList>) nil_chk(mDiagonals_)) size] - 1; diagonalIndex >= 0; diagonalIndex--) {
    ADXDiffUtil_Diagonal *diagonal = [mDiagonals_ getWithInt:diagonalIndex];
    jint endX = [((ADXDiffUtil_Diagonal *) nil_chk(diagonal)) endX];
    jint endY = [diagonal endY];
    while (posX > endX) {
      posX--;
      jint status = IOSIntArray_Get(nil_chk(mOldItemStatuses_), posX);
      if ((status & ADXDiffUtil_DiffResult_FLAG_MOVED) != 0) {
        jint newPos = JreRShift32(status, ADXDiffUtil_DiffResult_FLAG_OFFSET);
        ADXDiffUtil_PostponedUpdate *postponedUpdate = ADXDiffUtil_DiffResult_getPostponedUpdateWithJavaUtilCollection_withInt_withBoolean_(postponedUpdates, newPos, false);
        if (postponedUpdate != nil) {
          jint updatedNewPos = currentListSize - postponedUpdate->currentPos_;
          [((ADXBatchingListUpdateCallback *) nil_chk(batchingCallback)) onMovedWithInt:posX withInt:updatedNewPos - 1];
          if ((status & ADXDiffUtil_DiffResult_FLAG_MOVED_CHANGED) != 0) {
            id changePayload = JreRetainedLocalValue([((ADXDiffUtil_Callback *) nil_chk(mCallback_)) getChangePayloadWithInt:posX withInt:newPos]);
            [batchingCallback onChangedWithInt:updatedNewPos - 1 withInt:1 withId:changePayload];
          }
        }
        else {
          [postponedUpdates addWithId:create_ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(posX, currentListSize - posX - 1, true)];
        }
      }
      else {
        [((ADXBatchingListUpdateCallback *) nil_chk(batchingCallback)) onRemovedWithInt:posX withInt:1];
        currentListSize--;
      }
    }
    while (posY > endY) {
      posY--;
      jint status = IOSIntArray_Get(nil_chk(mNewItemStatuses_), posY);
      if ((status & ADXDiffUtil_DiffResult_FLAG_MOVED) != 0) {
        jint oldPos = JreRShift32(status, ADXDiffUtil_DiffResult_FLAG_OFFSET);
        ADXDiffUtil_PostponedUpdate *postponedUpdate = ADXDiffUtil_DiffResult_getPostponedUpdateWithJavaUtilCollection_withInt_withBoolean_(postponedUpdates, oldPos, true);
        if (postponedUpdate == nil) {
          [postponedUpdates addWithId:create_ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(posY, currentListSize - posX, false)];
        }
        else {
          jint updatedOldPos = currentListSize - postponedUpdate->currentPos_ - 1;
          [((ADXBatchingListUpdateCallback *) nil_chk(batchingCallback)) onMovedWithInt:updatedOldPos withInt:posX];
          if ((status & ADXDiffUtil_DiffResult_FLAG_MOVED_CHANGED) != 0) {
            id changePayload = JreRetainedLocalValue([((ADXDiffUtil_Callback *) nil_chk(mCallback_)) getChangePayloadWithInt:oldPos withInt:posY]);
            [batchingCallback onChangedWithInt:posX withInt:1 withId:changePayload];
          }
        }
      }
      else {
        [((ADXBatchingListUpdateCallback *) nil_chk(batchingCallback)) onInsertedWithInt:posX withInt:1];
        currentListSize++;
      }
    }
    posX = diagonal->x_;
    posY = diagonal->y_;
    for (jint i = 0; i < diagonal->size_; i++) {
      if ((IOSIntArray_Get(nil_chk(mOldItemStatuses_), posX) & ADXDiffUtil_DiffResult_FLAG_MASK) == ADXDiffUtil_DiffResult_FLAG_CHANGED) {
        id changePayload = JreRetainedLocalValue([((ADXDiffUtil_Callback *) nil_chk(mCallback_)) getChangePayloadWithInt:posX withInt:posY]);
        [((ADXBatchingListUpdateCallback *) nil_chk(batchingCallback)) onChangedWithInt:posX withInt:1 withId:changePayload];
      }
      posX++;
      posY++;
    }
    posX = diagonal->x_;
    posY = diagonal->y_;
  }
  [((ADXBatchingListUpdateCallback *) nil_chk(batchingCallback)) dispatchLastEvent];
}

+ (ADXDiffUtil_PostponedUpdate *)getPostponedUpdateWithJavaUtilCollection:(id<JavaUtilCollection>)postponedUpdates
                                                                  withInt:(jint)posInList
                                                              withBoolean:(jboolean)removal {
  return ADXDiffUtil_DiffResult_getPostponedUpdateWithJavaUtilCollection_withInt_withBoolean_(postponedUpdates, posInList, removal);
}

- (void)dealloc {
  RELEASE_(mDiagonals_);
  RELEASE_(mOldItemStatuses_);
  RELEASE_(mNewItemStatuses_);
  RELEASE_(mCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_PostponedUpdate;", 0xa, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXDiffUtil_Callback:withJavaUtilList:withIntArray:withIntArray:withBoolean:);
  methods[1].selector = @selector(addEdgeDiagonals);
  methods[2].selector = @selector(findMatchingItems);
  methods[3].selector = @selector(findMoveMatches);
  methods[4].selector = @selector(findMatchingAdditionWithInt:);
  methods[5].selector = @selector(convertOldPositionToNewWithInt:);
  methods[6].selector = @selector(convertNewPositionToOldWithInt:);
  methods[7].selector = @selector(dispatchUpdatesToWithADXRecyclerView_Adapter:);
  methods[8].selector = @selector(dispatchUpdatesToWithADXListUpdateCallback:);
  methods[9].selector = @selector(getPostponedUpdateWithJavaUtilCollection:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_POSITION", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_NO_POSITION, 0x19, -1, -1, -1, -1 },
    { "FLAG_NOT_CHANGED", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_NOT_CHANGED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_CHANGED", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_CHANGED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_MOVED_CHANGED", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_MOVED_CHANGED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_MOVED_NOT_CHANGED", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_MOVED_NOT_CHANGED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_MOVED", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_MOVED, 0x1a, -1, -1, -1, -1 },
    { "FLAG_OFFSET", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_OFFSET, 0x1a, -1, -1, -1, -1 },
    { "FLAG_MASK", "I", .constantValue.asInt = ADXDiffUtil_DiffResult_FLAG_MASK, 0x1a, -1, -1, -1, -1 },
    { "mDiagonals_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 12, -1 },
    { "mOldItemStatuses_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNewItemStatuses_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mCallback_", "LADXDiffUtil_Callback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOldListSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNewListSize_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mDetectMoves_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXDiffUtil_Callback;LJavaUtilList;[I[IZ", "(Landroidx/recyclerview/widget/DiffUtil$Callback;Ljava/util/List<Landroidx/recyclerview/widget/DiffUtil$Diagonal;>;[I[IZ)V", "findMatchingAddition", "I", "convertOldPositionToNew", "convertNewPositionToOld", "dispatchUpdatesTo", "LADXRecyclerView_Adapter;", "LADXListUpdateCallback;", "getPostponedUpdate", "LJavaUtilCollection;IZ", "(Ljava/util/Collection<Landroidx/recyclerview/widget/DiffUtil$PostponedUpdate;>;IZ)Landroidx/recyclerview/widget/DiffUtil$PostponedUpdate;", "Ljava/util/List<Landroidx/recyclerview/widget/DiffUtil$Diagonal;>;", "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_DiffResult = { "DiffResult", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 10, 15, 13, -1, -1, -1, -1 };
  return &_ADXDiffUtil_DiffResult;
}

@end

void ADXDiffUtil_DiffResult_initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_(ADXDiffUtil_DiffResult *self, ADXDiffUtil_Callback *callback, id<JavaUtilList> diagonals, IOSIntArray *oldItemStatuses, IOSIntArray *newItemStatuses, jboolean detectMoves) {
  NSObject_init(self);
  JreStrongAssign(&self->mDiagonals_, diagonals);
  JreStrongAssign(&self->mOldItemStatuses_, oldItemStatuses);
  JreStrongAssign(&self->mNewItemStatuses_, newItemStatuses);
  JavaUtilArrays_fillWithIntArray_withInt_(self->mOldItemStatuses_, 0);
  JavaUtilArrays_fillWithIntArray_withInt_(self->mNewItemStatuses_, 0);
  JreStrongAssign(&self->mCallback_, callback);
  self->mOldListSize_ = [((ADXDiffUtil_Callback *) nil_chk(callback)) getOldListSize];
  self->mNewListSize_ = [callback getNewListSize];
  self->mDetectMoves_ = detectMoves;
  ADXDiffUtil_DiffResult_addEdgeDiagonals(self);
  ADXDiffUtil_DiffResult_findMatchingItems(self);
}

ADXDiffUtil_DiffResult *new_ADXDiffUtil_DiffResult_initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_(ADXDiffUtil_Callback *callback, id<JavaUtilList> diagonals, IOSIntArray *oldItemStatuses, IOSIntArray *newItemStatuses, jboolean detectMoves) {
  J2OBJC_NEW_IMPL(ADXDiffUtil_DiffResult, initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_, callback, diagonals, oldItemStatuses, newItemStatuses, detectMoves)
}

ADXDiffUtil_DiffResult *create_ADXDiffUtil_DiffResult_initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_(ADXDiffUtil_Callback *callback, id<JavaUtilList> diagonals, IOSIntArray *oldItemStatuses, IOSIntArray *newItemStatuses, jboolean detectMoves) {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_DiffResult, initWithADXDiffUtil_Callback_withJavaUtilList_withIntArray_withIntArray_withBoolean_, callback, diagonals, oldItemStatuses, newItemStatuses, detectMoves)
}

void ADXDiffUtil_DiffResult_addEdgeDiagonals(ADXDiffUtil_DiffResult *self) {
  ADXDiffUtil_Diagonal *first = [((id<JavaUtilList>) nil_chk(self->mDiagonals_)) isEmpty] ? nil : [self->mDiagonals_ getWithInt:0];
  if (first == nil || first->x_ != 0 || first->y_ != 0) {
    [self->mDiagonals_ addWithInt:0 withId:create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(0, 0, 0)];
  }
  [self->mDiagonals_ addWithId:create_ADXDiffUtil_Diagonal_initWithInt_withInt_withInt_(self->mOldListSize_, self->mNewListSize_, 0)];
}

void ADXDiffUtil_DiffResult_findMatchingItems(ADXDiffUtil_DiffResult *self) {
  for (ADXDiffUtil_Diagonal * __strong diagonal in nil_chk(self->mDiagonals_)) {
    for (jint offset = 0; offset < ((ADXDiffUtil_Diagonal *) nil_chk(diagonal))->size_; offset++) {
      jint posX = diagonal->x_ + offset;
      jint posY = diagonal->y_ + offset;
      jboolean theSame = [((ADXDiffUtil_Callback *) nil_chk(self->mCallback_)) areContentsTheSameWithInt:posX withInt:posY];
      jint changeFlag = theSame ? ADXDiffUtil_DiffResult_FLAG_NOT_CHANGED : ADXDiffUtil_DiffResult_FLAG_CHANGED;
      *IOSIntArray_GetRef(nil_chk(self->mOldItemStatuses_), posX) = (JreLShift32(posY, ADXDiffUtil_DiffResult_FLAG_OFFSET)) | changeFlag;
      *IOSIntArray_GetRef(nil_chk(self->mNewItemStatuses_), posY) = (JreLShift32(posX, ADXDiffUtil_DiffResult_FLAG_OFFSET)) | changeFlag;
    }
  }
  if (self->mDetectMoves_) {
    ADXDiffUtil_DiffResult_findMoveMatches(self);
  }
}

void ADXDiffUtil_DiffResult_findMoveMatches(ADXDiffUtil_DiffResult *self) {
  jint posX = 0;
  for (ADXDiffUtil_Diagonal * __strong diagonal in nil_chk(self->mDiagonals_)) {
    while (posX < ((ADXDiffUtil_Diagonal *) nil_chk(diagonal))->x_) {
      if (IOSIntArray_Get(nil_chk(self->mOldItemStatuses_), posX) == 0) {
        ADXDiffUtil_DiffResult_findMatchingAdditionWithInt_(self, posX);
      }
      posX++;
    }
    posX = [diagonal endX];
  }
}

void ADXDiffUtil_DiffResult_findMatchingAdditionWithInt_(ADXDiffUtil_DiffResult *self, jint posX) {
  jint posY = 0;
  jint diagonalsSize = [((id<JavaUtilList>) nil_chk(self->mDiagonals_)) size];
  for (jint i = 0; i < diagonalsSize; i++) {
    ADXDiffUtil_Diagonal *diagonal = [self->mDiagonals_ getWithInt:i];
    while (posY < ((ADXDiffUtil_Diagonal *) nil_chk(diagonal))->y_) {
      if (IOSIntArray_Get(nil_chk(self->mNewItemStatuses_), posY) == 0) {
        jboolean matching = [((ADXDiffUtil_Callback *) nil_chk(self->mCallback_)) areItemsTheSameWithInt:posX withInt:posY];
        if (matching) {
          jboolean contentsMatching = [self->mCallback_ areContentsTheSameWithInt:posX withInt:posY];
          jint changeFlag = contentsMatching ? ADXDiffUtil_DiffResult_FLAG_MOVED_NOT_CHANGED : ADXDiffUtil_DiffResult_FLAG_MOVED_CHANGED;
          *IOSIntArray_GetRef(nil_chk(self->mOldItemStatuses_), posX) = (JreLShift32(posY, ADXDiffUtil_DiffResult_FLAG_OFFSET)) | changeFlag;
          *IOSIntArray_GetRef(self->mNewItemStatuses_, posY) = (JreLShift32(posX, ADXDiffUtil_DiffResult_FLAG_OFFSET)) | changeFlag;
          return;
        }
      }
      posY++;
    }
    posY = [diagonal endY];
  }
}

ADXDiffUtil_PostponedUpdate *ADXDiffUtil_DiffResult_getPostponedUpdateWithJavaUtilCollection_withInt_withBoolean_(id<JavaUtilCollection> postponedUpdates, jint posInList, jboolean removal) {
  ADXDiffUtil_DiffResult_initialize();
  ADXDiffUtil_PostponedUpdate *postponedUpdate = nil;
  id<JavaUtilIterator> itr = JreRetainedLocalValue([((id<JavaUtilCollection>) nil_chk(postponedUpdates)) iterator]);
  while ([((id<JavaUtilIterator>) nil_chk(itr)) hasNext]) {
    ADXDiffUtil_PostponedUpdate *update = JreRetainedLocalValue([itr next]);
    if (((ADXDiffUtil_PostponedUpdate *) nil_chk(update))->posInOwnerList_ == posInList && update->removal_ == removal) {
      postponedUpdate = update;
      [itr remove];
      break;
    }
  }
  while ([itr hasNext]) {
    ADXDiffUtil_PostponedUpdate *update = JreRetainedLocalValue([itr next]);
    if (removal) {
      ((ADXDiffUtil_PostponedUpdate *) nil_chk(update))->currentPos_--;
    }
    else {
      ((ADXDiffUtil_PostponedUpdate *) nil_chk(update))->currentPos_++;
    }
  }
  return postponedUpdate;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_DiffResult)

@implementation ADXDiffUtil_PostponedUpdate

- (instancetype)initWithInt:(jint)posInOwnerList
                    withInt:(jint)currentPos
                withBoolean:(jboolean)removal {
  ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(self, posInOwnerList, currentPos, removal);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "posInOwnerList_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "currentPos_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "removal_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIZ", "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_PostponedUpdate = { "PostponedUpdate", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0xa, 1, 3, 1, -1, -1, -1, -1 };
  return &_ADXDiffUtil_PostponedUpdate;
}

@end

void ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(ADXDiffUtil_PostponedUpdate *self, jint posInOwnerList, jint currentPos, jboolean removal) {
  NSObject_init(self);
  self->posInOwnerList_ = posInOwnerList;
  self->currentPos_ = currentPos;
  self->removal_ = removal;
}

ADXDiffUtil_PostponedUpdate *new_ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(jint posInOwnerList, jint currentPos, jboolean removal) {
  J2OBJC_NEW_IMPL(ADXDiffUtil_PostponedUpdate, initWithInt_withInt_withBoolean_, posInOwnerList, currentPos, removal)
}

ADXDiffUtil_PostponedUpdate *create_ADXDiffUtil_PostponedUpdate_initWithInt_withInt_withBoolean_(jint posInOwnerList, jint currentPos, jboolean removal) {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_PostponedUpdate, initWithInt_withInt_withBoolean_, posInOwnerList, currentPos, removal)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_PostponedUpdate)

@implementation ADXDiffUtil_CenteredArray

- (instancetype)initWithInt:(jint)size {
  ADXDiffUtil_CenteredArray_initWithInt_(self, size);
  return self;
}

- (jint)getWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(mData_), index + mMid_);
}

- (IOSIntArray *)backingData {
  return mData_;
}

- (void)setWithInt:(jint)index
           withInt:(jint)value {
  *IOSIntArray_GetRef(nil_chk(mData_), index + mMid_) = value;
}

- (void)fillWithInt:(jint)value {
  JavaUtilArrays_fillWithIntArray_withInt_(mData_, value);
}

- (void)dealloc {
  RELEASE_(mData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 0, -1, -1, -1, -1 },
    { NULL, "[I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(backingData);
  methods[3].selector = @selector(setWithInt:withInt:);
  methods[4].selector = @selector(fillWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mData_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMid_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "get", "set", "II", "fill", "LADXDiffUtil;" };
  static const J2ObjcClassInfo _ADXDiffUtil_CenteredArray = { "CenteredArray", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 5, 2, 5, -1, -1, -1, -1 };
  return &_ADXDiffUtil_CenteredArray;
}

@end

void ADXDiffUtil_CenteredArray_initWithInt_(ADXDiffUtil_CenteredArray *self, jint size) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mData_, [IOSIntArray newArrayWithLength:size]);
  self->mMid_ = JreIntDiv(self->mData_->size_, 2);
}

ADXDiffUtil_CenteredArray *new_ADXDiffUtil_CenteredArray_initWithInt_(jint size) {
  J2OBJC_NEW_IMPL(ADXDiffUtil_CenteredArray, initWithInt_, size)
}

ADXDiffUtil_CenteredArray *create_ADXDiffUtil_CenteredArray_initWithInt_(jint size) {
  J2OBJC_CREATE_IMPL(ADXDiffUtil_CenteredArray, initWithInt_, size)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffUtil_CenteredArray)
