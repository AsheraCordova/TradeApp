//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLToken.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_CLToken")
#ifdef RESTRICT_CLToken
#define INCLUDE_ALL_CLToken 0
#else
#define INCLUDE_ALL_CLToken 1
#endif
#undef RESTRICT_CLToken

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXCLToken_) && (INCLUDE_ALL_CLToken || defined(INCLUDE_ADXCLToken))
#define ADXCLToken_

#define RESTRICT_CLElement 1
#define INCLUDE_ADXCLElement 1
#include "CLElement.h"

@class ADXCLToken_Type;
@class IOSCharArray;

@interface ADXCLToken : ADXCLElement {
 @public
  jint index_;
  ADXCLToken_Type *type_;
  IOSCharArray *tokenTrue_;
  IOSCharArray *tokenFalse_;
  IOSCharArray *tokenNull_;
}

#pragma mark Public

- (instancetype)initWithCharArray:(IOSCharArray *)content;

+ (ADXCLElement *)allocateWithCharArray:(IOSCharArray *)content OBJC_METHOD_FAMILY_NONE;

- (jboolean)getBoolean;

- (ADXCLToken_Type *)getType;

- (jboolean)isNull;

- (jboolean)validateWithChar:(jchar)c
                    withLong:(jlong)position;

#pragma mark Protected

- (NSString *)toFormattedJSONWithInt:(jint)indent
                             withInt:(jint)forceIndent;

- (NSString *)toJSON;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXCLToken)

J2OBJC_FIELD_SETTER(ADXCLToken, type_, ADXCLToken_Type *)
J2OBJC_FIELD_SETTER(ADXCLToken, tokenTrue_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ADXCLToken, tokenFalse_, IOSCharArray *)
J2OBJC_FIELD_SETTER(ADXCLToken, tokenNull_, IOSCharArray *)

FOUNDATION_EXPORT void ADXCLToken_initWithCharArray_(ADXCLToken *self, IOSCharArray *content);

FOUNDATION_EXPORT ADXCLToken *new_ADXCLToken_initWithCharArray_(IOSCharArray *content) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXCLToken *create_ADXCLToken_initWithCharArray_(IOSCharArray *content);

FOUNDATION_EXPORT ADXCLElement *ADXCLToken_allocateWithCharArray_(IOSCharArray *content);

J2OBJC_TYPE_LITERAL_HEADER(ADXCLToken)

@compatibility_alias AndroidxConstraintlayoutCoreParserCLToken ADXCLToken;

#endif

#if !defined (ADXCLToken_Type_) && (INCLUDE_ALL_CLToken || defined(INCLUDE_ADXCLToken_Type))
#define ADXCLToken_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ADXCLToken_Type_Enum) {
  ADXCLToken_Type_Enum_UNKNOWN = 0,
  ADXCLToken_Type_Enum_TRUE = 1,
  ADXCLToken_Type_Enum_FALSE = 2,
  ADXCLToken_Type_Enum_NULL = 3,
};

@interface ADXCLToken_Type : JavaLangEnum

#pragma mark Public

+ (ADXCLToken_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXCLToken_Type_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ADXCLToken_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXCLToken_Type *ADXCLToken_Type_values_[];

inline ADXCLToken_Type *ADXCLToken_Type_get_UNKNOWN(void);
J2OBJC_ENUM_CONSTANT(ADXCLToken_Type, UNKNOWN)

inline ADXCLToken_Type *ADXCLToken_Type_get_TRUE(void);
J2OBJC_ENUM_CONSTANT(ADXCLToken_Type, TRUE)

inline ADXCLToken_Type *ADXCLToken_Type_get_FALSE(void);
J2OBJC_ENUM_CONSTANT(ADXCLToken_Type, FALSE)

inline ADXCLToken_Type *ADXCLToken_Type_get_NULL(void);
J2OBJC_ENUM_CONSTANT(ADXCLToken_Type, NULL)

FOUNDATION_EXPORT IOSObjectArray *ADXCLToken_Type_values(void);

FOUNDATION_EXPORT ADXCLToken_Type *ADXCLToken_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXCLToken_Type *ADXCLToken_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXCLToken_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_CLToken")
