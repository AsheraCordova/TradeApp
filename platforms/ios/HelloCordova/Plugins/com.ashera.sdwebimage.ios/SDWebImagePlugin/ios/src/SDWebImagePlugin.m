//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSSDWebImagePlugin\src\main\java\com\ashera\sdwebimage\SDWebImagePlugin.java
//

#include "IImageDownloader.h"
#include "ITarget.h"
#include "ImageDownloaderFactory.h"
#include "J2ObjC_source.h"
#include "SDWebImagePlugin.h"

#import "SDWebImageManager.h"


@interface ASSDWebImagePlugin ()

+ (void)downloadUsingSDWebImageManagerWithNSString:(NSString *)imageURL
                                            withId:(id)error
                                     withASITarget:(id<ASITarget>)target
                   withASSDWebImagePlugin_MyBitmap:(ASSDWebImagePlugin_MyBitmap *)bitmap;

@end

__attribute__((unused)) static void ASSDWebImagePlugin_downloadUsingSDWebImageManagerWithNSString_withId_withASITarget_withASSDWebImagePlugin_MyBitmap_(NSString *imageURL, id error, id<ASITarget> target, ASSDWebImagePlugin_MyBitmap *bitmap);

@interface ASSDWebImagePlugin_MyBitmap () {
 @public
  id image_;
}

@end

J2OBJC_FIELD_SETTER(ASSDWebImagePlugin_MyBitmap, image_, id)

@interface ASSDWebImagePlugin_TargetImageDownloader : NSObject < ASIImageDownloader >

- (instancetype)init;

- (void)downloadWithId:(id)context
          withNSString:(NSString *)url
                withId:(id)placeholder
                withId:(id)error
         withASITarget:(id<ASITarget>)target;

@end

J2OBJC_EMPTY_STATIC_INIT(ASSDWebImagePlugin_TargetImageDownloader)

__attribute__((unused)) static void ASSDWebImagePlugin_TargetImageDownloader_init(ASSDWebImagePlugin_TargetImageDownloader *self);

__attribute__((unused)) static ASSDWebImagePlugin_TargetImageDownloader *new_ASSDWebImagePlugin_TargetImageDownloader_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASSDWebImagePlugin_TargetImageDownloader *create_ASSDWebImagePlugin_TargetImageDownloader_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASSDWebImagePlugin_TargetImageDownloader)

@implementation ASSDWebImagePlugin

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSDWebImagePlugin_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)downloadUsingSDWebImageManagerWithNSString:(NSString *)imageURL
                                            withId:(id)error
                                     withASITarget:(id<ASITarget>)target
                   withASSDWebImagePlugin_MyBitmap:(ASSDWebImagePlugin_MyBitmap *)bitmap {
  ASSDWebImagePlugin_downloadUsingSDWebImageManagerWithNSString_withId_withASITarget_withASSDWebImagePlugin_MyBitmap_(imageURL, error, target, bitmap);
}

+ (void)initPlugin {
  ASSDWebImagePlugin_initPlugin();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(downloadUsingSDWebImageManagerWithNSString:withId:withASITarget:withASSDWebImagePlugin_MyBitmap:);
  methods[2].selector = @selector(initPlugin);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "downloadUsingSDWebImageManager", "LNSString;LNSObject;LASITarget;LASSDWebImagePlugin_MyBitmap;", "LASSDWebImagePlugin_MyBitmap;LASSDWebImagePlugin_TargetImageDownloader;" };
  static const J2ObjcClassInfo _ASSDWebImagePlugin = { "SDWebImagePlugin", "com.ashera.sdwebimage", ptrTable, methods, NULL, 7, 0x1, 3, 0, -1, 2, -1, -1, -1 };
  return &_ASSDWebImagePlugin;
}

@end

void ASSDWebImagePlugin_init(ASSDWebImagePlugin *self) {
  NSObject_init(self);
}

ASSDWebImagePlugin *new_ASSDWebImagePlugin_init() {
  J2OBJC_NEW_IMPL(ASSDWebImagePlugin, init)
}

ASSDWebImagePlugin *create_ASSDWebImagePlugin_init() {
  J2OBJC_CREATE_IMPL(ASSDWebImagePlugin, init)
}

void ASSDWebImagePlugin_downloadUsingSDWebImageManagerWithNSString_withId_withASITarget_withASSDWebImagePlugin_MyBitmap_(NSString *imageURL, id error, id<ASITarget> target, ASSDWebImagePlugin_MyBitmap *bitmap) {
  ASSDWebImagePlugin_initialize();
  SDWebImageManager *manager = [SDWebImageManager sharedManager];
  [manager loadImageWithURL:[NSURL URLWithString:imageURL]
  options:0
  progress:^(NSInteger receivedSize, NSInteger expectedSize, NSURL * _Nullable targetURL) {
  }
  completed:^(UIImage * _Nullable image, NSData * _Nullable data, NSError * _Nullable error, SDImageCacheType cacheType, BOOL finished, NSURL * _Nullable imageURL) {
    if (error) {
      [target onBitmapFailedWithId: error];
    } else if (image) {
      [bitmap setImageWithId: image];
      [target onBitmapLoadedWithId: bitmap];
    }
  }
  ];
}

void ASSDWebImagePlugin_initPlugin() {
  ASSDWebImagePlugin_initialize();
  ASImageDownloaderFactory_register__WithASIImageDownloader_(new_ASSDWebImagePlugin_TargetImageDownloader_init());
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSDWebImagePlugin)

@implementation ASSDWebImagePlugin_MyBitmap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSDWebImagePlugin_MyBitmap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setImageWithId:(id)image {
  self->image_ = image;
}

- (jint)getRowBytes {
  return ASSDWebImagePlugin_MyBitmap_getImageWidthWithId_(image_) * 4;
}

+ (jint)getImageWidthWithId:(id)value {
  return ASSDWebImagePlugin_MyBitmap_getImageWidthWithId_(value);
}

+ (jint)getImageHeightWithId:(id)value {
  return ASSDWebImagePlugin_MyBitmap_getImageHeightWithId_(value);
}

- (jint)getHeight {
  return ASSDWebImagePlugin_MyBitmap_getImageHeightWithId_(image_);
}

- (id)getImage {
  return image_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setImageWithId:);
  methods[2].selector = @selector(getRowBytes);
  methods[3].selector = @selector(getImageWidthWithId:);
  methods[4].selector = @selector(getImageHeightWithId:);
  methods[5].selector = @selector(getHeight);
  methods[6].selector = @selector(getImage);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "image_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setImage", "LNSObject;", "getImageWidth", "getImageHeight", "LASSDWebImagePlugin;" };
  static const J2ObjcClassInfo _ASSDWebImagePlugin_MyBitmap = { "MyBitmap", "com.ashera.sdwebimage", ptrTable, methods, fields, 7, 0x8, 7, 1, 4, -1, -1, -1, -1 };
  return &_ASSDWebImagePlugin_MyBitmap;
}

@end

void ASSDWebImagePlugin_MyBitmap_init(ASSDWebImagePlugin_MyBitmap *self) {
  NSObject_init(self);
}

ASSDWebImagePlugin_MyBitmap *new_ASSDWebImagePlugin_MyBitmap_init() {
  J2OBJC_NEW_IMPL(ASSDWebImagePlugin_MyBitmap, init)
}

ASSDWebImagePlugin_MyBitmap *create_ASSDWebImagePlugin_MyBitmap_init() {
  J2OBJC_CREATE_IMPL(ASSDWebImagePlugin_MyBitmap, init)
}

jint ASSDWebImagePlugin_MyBitmap_getImageWidthWithId_(id value) {
  ASSDWebImagePlugin_MyBitmap_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.width;
}

jint ASSDWebImagePlugin_MyBitmap_getImageHeightWithId_(id value) {
  ASSDWebImagePlugin_MyBitmap_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.height;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSDWebImagePlugin_MyBitmap)

@implementation ASSDWebImagePlugin_TargetImageDownloader

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASSDWebImagePlugin_TargetImageDownloader_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)downloadWithId:(id)context
          withNSString:(NSString *)url
                withId:(id)placeholder
                withId:(id)error
         withASITarget:(id<ASITarget>)target {
  [((id<ASITarget>) nil_chk(target)) onPrepareLoadWithId:placeholder];
  ASSDWebImagePlugin_downloadUsingSDWebImageManagerWithNSString_withId_withASITarget_withASSDWebImagePlugin_MyBitmap_(url, error, target, new_ASSDWebImagePlugin_MyBitmap_init());
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(downloadWithId:withNSString:withId:withId:withASITarget:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "download", "LNSObject;LNSString;LNSObject;LNSObject;LASITarget;", "LASSDWebImagePlugin;" };
  static const J2ObjcClassInfo _ASSDWebImagePlugin_TargetImageDownloader = { "TargetImageDownloader", "com.ashera.sdwebimage", ptrTable, methods, NULL, 7, 0x1a, 2, 0, 2, -1, -1, -1, -1 };
  return &_ASSDWebImagePlugin_TargetImageDownloader;
}

@end

void ASSDWebImagePlugin_TargetImageDownloader_init(ASSDWebImagePlugin_TargetImageDownloader *self) {
  NSObject_init(self);
}

ASSDWebImagePlugin_TargetImageDownloader *new_ASSDWebImagePlugin_TargetImageDownloader_init() {
  J2OBJC_NEW_IMPL(ASSDWebImagePlugin_TargetImageDownloader, init)
}

ASSDWebImagePlugin_TargetImageDownloader *create_ASSDWebImagePlugin_TargetImageDownloader_init() {
  J2OBJC_CREATE_IMPL(ASSDWebImagePlugin_TargetImageDownloader, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSDWebImagePlugin_TargetImageDownloader)
