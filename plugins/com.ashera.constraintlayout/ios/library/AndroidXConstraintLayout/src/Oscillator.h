//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\Oscillator.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Oscillator")
#ifdef RESTRICT_Oscillator
#define INCLUDE_ALL_Oscillator 0
#else
#define INCLUDE_ALL_Oscillator 1
#endif
#undef RESTRICT_Oscillator

#if !defined (ADXOscillator_) && (INCLUDE_ALL_Oscillator || defined(INCLUDE_ADXOscillator))
#define ADXOscillator_

@class ADXMonotonicCurveFit;
@class IOSDoubleArray;
@class IOSFloatArray;

/*!
 @brief This generates variable frequency oscillation curves
 */
@interface ADXOscillator : NSObject {
 @public
  IOSFloatArray *mPeriod_;
  IOSDoubleArray *mPosition_;
  IOSDoubleArray *mArea_;
  NSString *mCustomType_;
  ADXMonotonicCurveFit *mCustomCurve_;
  jint mType_;
  jdouble PI2_;
}

#pragma mark Public

- (instancetype)init;

- (void)addPointWithDouble:(jdouble)position
                 withFloat:(jfloat)period;

- (jdouble)getSlopeWithDouble:(jdouble)time
                   withDouble:(jdouble)phase
                   withDouble:(jdouble)dphase;

- (jdouble)getValueWithDouble:(jdouble)time
                   withDouble:(jdouble)phase;

/*!
 @brief After adding point every thing must be normalized
 */
- (void)normalize;

- (void)setTypeWithInt:(jint)type
          withNSString:(NSString *)customType;

- (NSString *)description;

#pragma mark Package-Private

- (jdouble)getDPWithDouble:(jdouble)time;

- (jdouble)getPWithDouble:(jdouble)time;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXOscillator)

J2OBJC_FIELD_SETTER(ADXOscillator, mPeriod_, IOSFloatArray *)
J2OBJC_FIELD_SETTER(ADXOscillator, mPosition_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(ADXOscillator, mArea_, IOSDoubleArray *)
J2OBJC_FIELD_SETTER(ADXOscillator, mCustomType_, NSString *)
J2OBJC_FIELD_SETTER(ADXOscillator, mCustomCurve_, ADXMonotonicCurveFit *)

inline NSString *ADXOscillator_get_TAG(void);
inline NSString *ADXOscillator_set_TAG(NSString *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ADXOscillator_TAG;
J2OBJC_STATIC_FIELD_OBJ(ADXOscillator, TAG, NSString *)

inline jint ADXOscillator_get_SIN_WAVE(void);
#define ADXOscillator_SIN_WAVE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, SIN_WAVE, jint)

inline jint ADXOscillator_get_SQUARE_WAVE(void);
#define ADXOscillator_SQUARE_WAVE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, SQUARE_WAVE, jint)

inline jint ADXOscillator_get_TRIANGLE_WAVE(void);
#define ADXOscillator_TRIANGLE_WAVE 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, TRIANGLE_WAVE, jint)

inline jint ADXOscillator_get_SAW_WAVE(void);
#define ADXOscillator_SAW_WAVE 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, SAW_WAVE, jint)

inline jint ADXOscillator_get_REVERSE_SAW_WAVE(void);
#define ADXOscillator_REVERSE_SAW_WAVE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, REVERSE_SAW_WAVE, jint)

inline jint ADXOscillator_get_COS_WAVE(void);
#define ADXOscillator_COS_WAVE 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, COS_WAVE, jint)

inline jint ADXOscillator_get_BOUNCE(void);
#define ADXOscillator_BOUNCE 6
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, BOUNCE, jint)

inline jint ADXOscillator_get_CUSTOM(void);
#define ADXOscillator_CUSTOM 7
J2OBJC_STATIC_FIELD_CONSTANT(ADXOscillator, CUSTOM, jint)

FOUNDATION_EXPORT void ADXOscillator_init(ADXOscillator *self);

FOUNDATION_EXPORT ADXOscillator *new_ADXOscillator_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXOscillator *create_ADXOscillator_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXOscillator)

@compatibility_alias AndroidxConstraintlayoutCoreMotionUtilsOscillator ADXOscillator;

#endif

#pragma pop_macro("INCLUDE_ALL_Oscillator")
