//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\util\StateSet.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_StateSet")
#ifdef RESTRICT_StateSet
#define INCLUDE_ALL_StateSet 0
#else
#define INCLUDE_ALL_StateSet 1
#endif
#undef RESTRICT_StateSet

#if !defined (ADStateSet_) && (INCLUDE_ALL_StateSet || defined(INCLUDE_ADStateSet))
#define ADStateSet_

@class IOSIntArray;
@class IOSObjectArray;

@interface ADStateSet : NSObject

#pragma mark Public

- (instancetype)init;

+ (jboolean)containsAttributeWithIntArray2:(IOSObjectArray *)stateSpecs
                                   withInt:(jint)attr;

+ (IOSIntArray *)getWithInt:(jint)mask;

+ (jboolean)isWildCardWithIntArray:(IOSIntArray *)stateSetOrSpec;

/*!
 @brief Return whether the state matches the desired stateSpec.
 @param stateSpec an array of required (if positive) or         prohibited (if negative) 
 <code>android.view.View</code>  states.
 @param state a <code>android.view.View</code>  state
 */
+ (jboolean)stateSetMatchesWithIntArray:(IOSIntArray *)stateSpec
                                withInt:(jint)state;

+ (jboolean)stateSetMatchesWithIntArray:(IOSIntArray *)stateSpec
                           withIntArray:(IOSIntArray *)stateSet;

+ (IOSIntArray *)trimStateSetWithIntArray:(IOSIntArray *)states
                                  withInt:(jint)newSize;

@end

J2OBJC_STATIC_INIT(ADStateSet)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_WINDOW_FOCUSED(void);
#define ADStateSet_VIEW_STATE_WINDOW_FOCUSED 1
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_WINDOW_FOCUSED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_SELECTED(void);
#define ADStateSet_VIEW_STATE_SELECTED 2
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_SELECTED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_FOCUSED(void);
#define ADStateSet_VIEW_STATE_FOCUSED 4
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_FOCUSED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_ENABLED(void);
#define ADStateSet_VIEW_STATE_ENABLED 8
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_ENABLED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_PRESSED(void);
#define ADStateSet_VIEW_STATE_PRESSED 16
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_PRESSED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_ACTIVATED(void);
#define ADStateSet_VIEW_STATE_ACTIVATED 32
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_ACTIVATED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_ACCELERATED(void);
#define ADStateSet_VIEW_STATE_ACCELERATED 64
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_ACCELERATED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_HOVERED(void);
#define ADStateSet_VIEW_STATE_HOVERED 128
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_HOVERED, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_DRAG_CAN_ACCEPT(void);
#define ADStateSet_VIEW_STATE_DRAG_CAN_ACCEPT 256
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_DRAG_CAN_ACCEPT, jint)

/*!
 */
inline jint ADStateSet_get_VIEW_STATE_DRAG_HOVERED(void);
#define ADStateSet_VIEW_STATE_DRAG_HOVERED 512
J2OBJC_STATIC_FIELD_CONSTANT(ADStateSet, VIEW_STATE_DRAG_HOVERED, jint)

inline IOSIntArray *ADStateSet_get_ViewDrawableStates(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ADStateSet_ViewDrawableStates;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADStateSet, ViewDrawableStates, IOSIntArray *)

inline IOSIntArray *ADStateSet_get_VIEW_STATE_IDS(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSIntArray *ADStateSet_VIEW_STATE_IDS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADStateSet, VIEW_STATE_IDS, IOSIntArray *)

FOUNDATION_EXPORT void ADStateSet_init(ADStateSet *self);

FOUNDATION_EXPORT ADStateSet *new_ADStateSet_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADStateSet *create_ADStateSet_init(void);

FOUNDATION_EXPORT IOSIntArray *ADStateSet_getWithInt_(jint mask);

FOUNDATION_EXPORT jboolean ADStateSet_containsAttributeWithIntArray2_withInt_(IOSObjectArray *stateSpecs, jint attr);

FOUNDATION_EXPORT jboolean ADStateSet_stateSetMatchesWithIntArray_withIntArray_(IOSIntArray *stateSpec, IOSIntArray *stateSet);

FOUNDATION_EXPORT jboolean ADStateSet_stateSetMatchesWithIntArray_withInt_(IOSIntArray *stateSpec, jint state);

FOUNDATION_EXPORT jboolean ADStateSet_isWildCardWithIntArray_(IOSIntArray *stateSetOrSpec);

FOUNDATION_EXPORT IOSIntArray *ADStateSet_trimStateSetWithIntArray_withInt_(IOSIntArray *states, jint newSize);

J2OBJC_TYPE_LITERAL_HEADER(ADStateSet)

@compatibility_alias RAndroidUtilStateSet ADStateSet;

#endif

#pragma pop_macro("INCLUDE_ALL_StateSet")
