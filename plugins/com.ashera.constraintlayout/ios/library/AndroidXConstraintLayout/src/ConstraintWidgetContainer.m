//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\ConstraintWidgetContainer.java
//

#include "BasicMeasure.h"
#include "Cache.h"
#include "Chain.h"
#include "ChainHead.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "CoreBarrier.h"
#include "CoreGuideline.h"
#include "CoreVirtualLayout.h"
#include "DependencyGraph.h"
#include "Direct.h"
#include "Grouping.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "Metrics.h"
#include "Optimizer.h"
#include "SolverVariable.h"
#include "WidgetContainer.h"
#include "WidgetFrame.h"
#include "java/io/PrintStream.h"
#include "java/lang/Exception.h"
#include "java/lang/Math.h"
#include "java/lang/System.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashSet.h"
#include "java/util/List.h"

@class JavaLangRefWeakReference;


@interface ADXConstraintWidgetContainer () {
 @public
  jint pass_;
  jboolean mIsRtl_;
  jint mOptimizationLevel_;
  jboolean mWidthMeasuredTooSmall_;
  jboolean mHeightMeasuredTooSmall_;
  JavaLangRefWeakReference *verticalWrapMin_;
  JavaLangRefWeakReference *horizontalWrapMin_;
  JavaLangRefWeakReference *verticalWrapMax_;
  JavaLangRefWeakReference *horizontalWrapMax_;
}

- (void)addMinWrapWithADXConstraintAnchor:(ADXConstraintAnchor *)constraintAnchor
                    withADXSolverVariable:(ADXSolverVariable *)parentMin;

- (void)addMaxWrapWithADXConstraintAnchor:(ADXConstraintAnchor *)constraintAnchor
                    withADXSolverVariable:(ADXSolverVariable *)parentMax;

/*!
 @brief Reset the chains array.Need to be called before layout.
 */
- (void)resetChains;

/*!
 @brief Add a widget to the list of horizontal chains.The widget is the left-most widget
  of the chain which doesn't have a left dual connection.
 @param widget widget starting the chain
 */
- (void)addHorizontalChainWithADXConstraintWidget:(ADXConstraintWidget *)widget;

/*!
 @brief Add a widget to the list of vertical chains.The widget is the top-most widget
  of the chain which doesn't have a top dual connection.
 @param widget widget starting the chain
 */
- (void)addVerticalChainWithADXConstraintWidget:(ADXConstraintWidget *)widget;

@end

J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, verticalWrapMin_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, horizontalWrapMin_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, verticalWrapMax_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXConstraintWidgetContainer, horizontalWrapMax_, JavaLangRefWeakReference *)

inline jint ADXConstraintWidgetContainer_get_MAX_ITERATIONS(void);
#define ADXConstraintWidgetContainer_MAX_ITERATIONS 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidgetContainer, MAX_ITERATIONS, jint)

inline jboolean ADXConstraintWidgetContainer_get_DEBUG(void);
#define ADXConstraintWidgetContainer_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidgetContainer, DEBUG, jboolean)

inline jboolean ADXConstraintWidgetContainer_get_DEBUG_LAYOUT(void);
#define ADXConstraintWidgetContainer_DEBUG_LAYOUT false
J2OBJC_STATIC_FIELD_CONSTANT(ADXConstraintWidgetContainer, DEBUG_LAYOUT, jboolean)

__attribute__((unused)) static void ADXConstraintWidgetContainer_addMinWrapWithADXConstraintAnchor_withADXSolverVariable_(ADXConstraintWidgetContainer *self, ADXConstraintAnchor *constraintAnchor, ADXSolverVariable *parentMin);

__attribute__((unused)) static void ADXConstraintWidgetContainer_addMaxWrapWithADXConstraintAnchor_withADXSolverVariable_(ADXConstraintWidgetContainer *self, ADXConstraintAnchor *constraintAnchor, ADXSolverVariable *parentMax);

__attribute__((unused)) static void ADXConstraintWidgetContainer_resetChains(ADXConstraintWidgetContainer *self);

__attribute__((unused)) static void ADXConstraintWidgetContainer_addHorizontalChainWithADXConstraintWidget_(ADXConstraintWidgetContainer *self, ADXConstraintWidget *widget);

__attribute__((unused)) static void ADXConstraintWidgetContainer_addVerticalChainWithADXConstraintWidget_(ADXConstraintWidgetContainer *self, ADXConstraintWidget *widget);

jint ADXConstraintWidgetContainer_myCounter = 0;

@implementation ADXConstraintWidgetContainer

- (void)invalidateGraph {
  [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) invalidateGraph];
}

- (void)invalidateMeasures {
  [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) invalidateMeasures];
}

- (jboolean)directMeasureWithBoolean:(jboolean)optimizeWrap {
  return [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) directMeasureWithBoolean:optimizeWrap];
}

- (jboolean)directMeasureSetupWithBoolean:(jboolean)optimizeWrap {
  return [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) directMeasureSetupWithBoolean:optimizeWrap];
}

- (jboolean)directMeasureWithOrientationWithBoolean:(jboolean)optimizeWrap
                                            withInt:(jint)orientation {
  return [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) directMeasureWithOrientationWithBoolean:optimizeWrap withInt:orientation];
}

- (void)defineTerminalWidgets {
  [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) defineTerminalWidgetsWithADXConstraintWidget_DimensionBehaviour:[self getHorizontalDimensionBehaviour] withADXConstraintWidget_DimensionBehaviour:[self getVerticalDimensionBehaviour]];
}

- (jlong)measureWithInt:(jint)optimizationLevel
                withInt:(jint)widthMode
                withInt:(jint)widthSize
                withInt:(jint)heightMode
                withInt:(jint)heightSize
                withInt:(jint)lastMeasureWidth
                withInt:(jint)lastMeasureHeight
                withInt:(jint)paddingX
                withInt:(jint)paddingY {
  mPaddingLeft_ = paddingX;
  mPaddingTop_ = paddingY;
  return [((ADXBasicMeasure *) nil_chk(mBasicMeasureSolver_)) solverMeasureWithADXConstraintWidgetContainer:self withInt:optimizationLevel withInt:paddingX withInt:paddingY withInt:widthMode withInt:widthSize withInt:heightMode withInt:heightSize withInt:lastMeasureWidth withInt:lastMeasureHeight];
}

- (void)updateHierarchy {
  [((ADXBasicMeasure *) nil_chk(mBasicMeasureSolver_)) updateHierarchyWithADXConstraintWidgetContainer:self];
}

- (void)setMeasurerWithADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer {
  JreStrongAssign(&mMeasurer_, measurer);
  [((ADXDependencyGraph *) nil_chk(mDependencyGraph_)) setMeasurerWithADXBasicMeasure_Measurer:measurer];
}

- (id<ADXBasicMeasure_Measurer>)getMeasurer {
  return mMeasurer_;
}

- (void)fillMetricsWithADXMetrics:(ADXMetrics *)metrics {
  JreStrongAssign(&mMetrics_, metrics);
  [((ADXLinearSystem *) nil_chk(mSystem_)) fillMetricsWithADXMetrics:metrics];
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXConstraintWidgetContainer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)x
                    withInt:(jint)y
                    withInt:(jint)width
                    withInt:(jint)height {
  ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(self, x, y, width, height);
  return self;
}

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXConstraintWidgetContainer_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithNSString:(NSString *)debugName
                         withInt:(jint)width
                         withInt:(jint)height {
  ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(self, debugName, width, height);
  return self;
}

- (void)setOptimizationLevelWithInt:(jint)value {
  mOptimizationLevel_ = value;
  *JreLoadStaticRef(ADXLinearSystem, USE_DEPENDENCY_ORDERING) = [self optimizeForWithInt:ADXOptimizer_OPTIMIZATION_DEPENDENCY_ORDERING];
}

- (jint)getOptimizationLevel {
  return mOptimizationLevel_;
}

- (jboolean)optimizeForWithInt:(jint)feature {
  return (mOptimizationLevel_ & feature) == feature;
}

- (NSString *)getType {
  return @"ConstraintLayout";
}

- (void)reset {
  [((ADXLinearSystem *) nil_chk(mSystem_)) reset];
  mPaddingLeft_ = 0;
  mPaddingRight_ = 0;
  mPaddingTop_ = 0;
  mPaddingBottom_ = 0;
  mSkipSolver_ = false;
  [super reset];
}

- (jboolean)isWidthMeasuredTooSmall {
  return mWidthMeasuredTooSmall_;
}

- (jboolean)isHeightMeasuredTooSmall {
  return mHeightMeasuredTooSmall_;
}

- (void)addVerticalWrapMinVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)top {
  if (verticalWrapMin_ == nil || [verticalWrapMin_ get] == nil || [((ADXConstraintAnchor *) nil_chk(top)) getFinalValue] > [((ADXConstraintAnchor *) nil_chk([((JavaLangRefWeakReference *) nil_chk(verticalWrapMin_)) get])) getFinalValue]) {
    JreStrongAssignAndConsume(&verticalWrapMin_, new_JavaLangRefWeakReference_initWithId_(top));
  }
}

- (void)addHorizontalWrapMinVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)left {
  if (horizontalWrapMin_ == nil || [horizontalWrapMin_ get] == nil || [((ADXConstraintAnchor *) nil_chk(left)) getFinalValue] > [((ADXConstraintAnchor *) nil_chk([((JavaLangRefWeakReference *) nil_chk(horizontalWrapMin_)) get])) getFinalValue]) {
    JreStrongAssignAndConsume(&horizontalWrapMin_, new_JavaLangRefWeakReference_initWithId_(left));
  }
}

- (void)addVerticalWrapMaxVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)bottom {
  if (verticalWrapMax_ == nil || [verticalWrapMax_ get] == nil || [((ADXConstraintAnchor *) nil_chk(bottom)) getFinalValue] > [((ADXConstraintAnchor *) nil_chk([((JavaLangRefWeakReference *) nil_chk(verticalWrapMax_)) get])) getFinalValue]) {
    JreStrongAssignAndConsume(&verticalWrapMax_, new_JavaLangRefWeakReference_initWithId_(bottom));
  }
}

- (void)addHorizontalWrapMaxVariableWithADXConstraintAnchor:(ADXConstraintAnchor *)right {
  if (horizontalWrapMax_ == nil || [horizontalWrapMax_ get] == nil || [((ADXConstraintAnchor *) nil_chk(right)) getFinalValue] > [((ADXConstraintAnchor *) nil_chk([((JavaLangRefWeakReference *) nil_chk(horizontalWrapMax_)) get])) getFinalValue]) {
    JreStrongAssignAndConsume(&horizontalWrapMax_, new_JavaLangRefWeakReference_initWithId_(right));
  }
}

- (void)addMinWrapWithADXConstraintAnchor:(ADXConstraintAnchor *)constraintAnchor
                    withADXSolverVariable:(ADXSolverVariable *)parentMin {
  ADXConstraintWidgetContainer_addMinWrapWithADXConstraintAnchor_withADXSolverVariable_(self, constraintAnchor, parentMin);
}

- (void)addMaxWrapWithADXConstraintAnchor:(ADXConstraintAnchor *)constraintAnchor
                    withADXSolverVariable:(ADXSolverVariable *)parentMax {
  ADXConstraintWidgetContainer_addMaxWrapWithADXConstraintAnchor_withADXSolverVariable_(self, constraintAnchor, parentMax);
}

- (jboolean)addChildrenToSolverWithADXLinearSystem:(ADXLinearSystem *)system {
  jboolean optimize = [self optimizeForWithInt:ADXOptimizer_OPTIMIZATION_GRAPH];
  [self addToSolverWithADXLinearSystem:system withBoolean:optimize];
  jint count = [((JavaUtilArrayList *) nil_chk(mChildren_)) size];
  jboolean hasBarriers = false;
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
    [((ADXConstraintWidget *) nil_chk(widget)) setInBarrierWithInt:ADXConstraintWidget_HORIZONTAL withBoolean:false];
    [widget setInBarrierWithInt:ADXConstraintWidget_VERTICAL withBoolean:false];
    if ([widget isKindOfClass:[ADXCoreBarrier class]]) {
      hasBarriers = true;
    }
  }
  if (hasBarriers) {
    for (jint i = 0; i < count; i++) {
      ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
      if ([widget isKindOfClass:[ADXCoreBarrier class]]) {
        [((ADXCoreBarrier *) nil_chk(((ADXCoreBarrier *) widget))) markWidgets];
      }
    }
  }
  [((JavaUtilHashSet *) nil_chk(widgetsToAdd_)) clear];
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
    if ([((ADXConstraintWidget *) nil_chk(widget)) addFirst]) {
      if ([widget isKindOfClass:[ADXCoreVirtualLayout class]]) {
        [((JavaUtilHashSet *) nil_chk(widgetsToAdd_)) addWithId:widget];
      }
      else {
        [widget addToSolverWithADXLinearSystem:system withBoolean:optimize];
      }
    }
  }
  while ([((JavaUtilHashSet *) nil_chk(widgetsToAdd_)) size] > 0) {
    jint numLayouts = [((JavaUtilHashSet *) nil_chk(widgetsToAdd_)) size];
    ADXCoreVirtualLayout *layout = nil;
    for (ADXConstraintWidget * __strong widget in nil_chk(widgetsToAdd_)) {
      layout = (ADXCoreVirtualLayout *) cast_chk(widget, [ADXCoreVirtualLayout class]);
      if ([((ADXCoreVirtualLayout *) nil_chk(layout)) containsWithJavaUtilHashSet:widgetsToAdd_]) {
        [layout addToSolverWithADXLinearSystem:system withBoolean:optimize];
        [((JavaUtilHashSet *) nil_chk(widgetsToAdd_)) removeWithId:layout];
        break;
      }
    }
    if (numLayouts == [((JavaUtilHashSet *) nil_chk(widgetsToAdd_)) size]) {
      for (ADXConstraintWidget * __strong widget in nil_chk(widgetsToAdd_)) {
        [((ADXConstraintWidget *) nil_chk(widget)) addToSolverWithADXLinearSystem:system withBoolean:optimize];
      }
      [widgetsToAdd_ clear];
    }
  }
  if (JreLoadStatic(ADXLinearSystem, USE_DEPENDENCY_ORDERING)) {
    JavaUtilHashSet *widgetsToAdd = create_JavaUtilHashSet_init();
    for (jint i = 0; i < count; i++) {
      ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
      if (![((ADXConstraintWidget *) nil_chk(widget)) addFirst]) {
        [widgetsToAdd addWithId:widget];
      }
    }
    jint orientation = ADXConstraintWidget_VERTICAL;
    if ([self getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
      orientation = ADXConstraintWidget_HORIZONTAL;
    }
    [self addChildrenToSolverByDependencyWithADXConstraintWidgetContainer:self withADXLinearSystem:system withJavaUtilHashSet:widgetsToAdd withInt:orientation withBoolean:false];
    for (ADXConstraintWidget * __strong widget in widgetsToAdd) {
      ADXOptimizer_checkMatchParentWithADXConstraintWidgetContainer_withADXLinearSystem_withADXConstraintWidget_(self, system, widget);
      [((ADXConstraintWidget *) nil_chk(widget)) addToSolverWithADXLinearSystem:system withBoolean:optimize];
    }
  }
  else {
    for (jint i = 0; i < count; i++) {
      ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
      if ([widget isKindOfClass:[ADXConstraintWidgetContainer class]]) {
        ADXConstraintWidget_DimensionBehaviour *horizontalBehaviour = IOSObjectArray_Get(nil_chk(((ADXConstraintWidget *) nil_chk(widget))->mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL);
        ADXConstraintWidget_DimensionBehaviour *verticalBehaviour = IOSObjectArray_Get(widget->mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL);
        if (horizontalBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
          [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
        }
        if (verticalBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
          [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
        }
        [widget addToSolverWithADXLinearSystem:system withBoolean:optimize];
        if (horizontalBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
          [widget setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:horizontalBehaviour];
        }
        if (verticalBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
          [widget setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:verticalBehaviour];
        }
      }
      else {
        ADXOptimizer_checkMatchParentWithADXConstraintWidgetContainer_withADXLinearSystem_withADXConstraintWidget_(self, system, widget);
        if (!([((ADXConstraintWidget *) nil_chk(widget)) addFirst])) {
          [widget addToSolverWithADXLinearSystem:system withBoolean:optimize];
        }
      }
    }
  }
  if (mHorizontalChainsSize_ > 0) {
    ADXChain_applyChainConstraintsWithADXConstraintWidgetContainer_withADXLinearSystem_withJavaUtilArrayList_withInt_(self, system, nil, ADXConstraintWidget_HORIZONTAL);
  }
  if (mVerticalChainsSize_ > 0) {
    ADXChain_applyChainConstraintsWithADXConstraintWidgetContainer_withADXLinearSystem_withJavaUtilArrayList_withInt_(self, system, nil, ADXConstraintWidget_VERTICAL);
  }
  return true;
}

- (jboolean)updateChildrenFromSolverWithADXLinearSystem:(ADXLinearSystem *)system
                                       withBooleanArray:(IOSBooleanArray *)flags {
  *IOSBooleanArray_GetRef(nil_chk(flags), ADXOptimizer_FLAG_RECOMPUTE_BOUNDS) = false;
  jboolean optimize = [self optimizeForWithInt:ADXOptimizer_OPTIMIZATION_GRAPH];
  [self updateFromSolverWithADXLinearSystem:system withBoolean:optimize];
  jint count = [((JavaUtilArrayList *) nil_chk(mChildren_)) size];
  jboolean hasOverride = false;
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
    [((ADXConstraintWidget *) nil_chk(widget)) updateFromSolverWithADXLinearSystem:system withBoolean:optimize];
    if ([widget hasDimensionOverride]) {
      hasOverride = true;
    }
  }
  return hasOverride;
}

- (void)updateFromRunsWithBoolean:(jboolean)updateHorizontal
                      withBoolean:(jboolean)updateVertical {
  [super updateFromRunsWithBoolean:updateHorizontal withBoolean:updateVertical];
  jint count = [((JavaUtilArrayList *) nil_chk(mChildren_)) size];
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
    [((ADXConstraintWidget *) nil_chk(widget)) updateFromRunsWithBoolean:updateHorizontal withBoolean:updateVertical];
  }
}

- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom {
  mPaddingLeft_ = left;
  mPaddingTop_ = top;
  mPaddingRight_ = right;
  mPaddingBottom_ = bottom;
}

- (void)setRtlWithBoolean:(jboolean)isRtl {
  mIsRtl_ = isRtl;
}

- (jboolean)isRtl {
  return mIsRtl_;
}

+ (jboolean)measureWithInt:(jint)level
   withADXConstraintWidget:(ADXConstraintWidget *)widget
withADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer
withADXBasicMeasure_Measure:(ADXBasicMeasure_Measure *)measure
                   withInt:(jint)measureStrategy {
  return ADXConstraintWidgetContainer_measureWithInt_withADXConstraintWidget_withADXBasicMeasure_Measurer_withADXBasicMeasure_Measure_withInt_(level, widget, measurer, measure, measureStrategy);
}

- (void)layout {
  mX_ = 0;
  mY_ = 0;
  mWidthMeasuredTooSmall_ = false;
  mHeightMeasuredTooSmall_ = false;
  jint count = [((JavaUtilArrayList *) nil_chk(mChildren_)) size];
  jint preW = JavaLangMath_maxWithInt_withInt_(0, [self getWidth]);
  jint preH = JavaLangMath_maxWithInt_withInt_(0, [self getHeight]);
  ADXConstraintWidget_DimensionBehaviour *originalVerticalDimensionBehaviour = IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL);
  ADXConstraintWidget_DimensionBehaviour *originalHorizontalDimensionBehaviour = IOSObjectArray_Get(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_HORIZONTAL);
  if (mMetrics_ != nil) {
    mMetrics_->layouts_++;
  }
  jboolean wrap_override = false;
  if (pass_ == 0 && ADXOptimizer_enabledWithInt_withInt_(mOptimizationLevel_, ADXOptimizer_OPTIMIZATION_DIRECT)) {
    ADXDirect_solvingPassWithADXConstraintWidgetContainer_withADXBasicMeasure_Measurer_(self, [self getMeasurer]);
    for (jint i = 0; i < count; i++) {
      ADXConstraintWidget *child = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
      if ([((ADXConstraintWidget *) nil_chk(child)) isMeasureRequested] && !([child isKindOfClass:[ADXCoreGuideline class]]) && !([child isKindOfClass:[ADXCoreBarrier class]]) && !([child isKindOfClass:[ADXCoreVirtualLayout class]]) && !([child isInVirtualLayout])) {
        ADXConstraintWidget_DimensionBehaviour *widthBehavior = JreRetainedLocalValue([child getDimensionBehaviourWithInt:ADXConstraintWidget_HORIZONTAL]);
        ADXConstraintWidget_DimensionBehaviour *heightBehavior = JreRetainedLocalValue([child getDimensionBehaviourWithInt:ADXConstraintWidget_VERTICAL]);
        jboolean skip = widthBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && child->mMatchConstraintDefaultWidth_ != ADXConstraintWidget_MATCH_CONSTRAINT_WRAP && heightBehavior == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT) && child->mMatchConstraintDefaultHeight_ != ADXConstraintWidget_MATCH_CONSTRAINT_WRAP;
        if (!skip) {
          ADXBasicMeasure_Measure *measure = create_ADXBasicMeasure_Measure_init();
          ADXConstraintWidgetContainer_measureWithInt_withADXConstraintWidget_withADXBasicMeasure_Measurer_withADXBasicMeasure_Measure_withInt_(0, child, mMeasurer_, measure, JreLoadStatic(ADXBasicMeasure_Measure, SELF_DIMENSIONS));
        }
      }
    }
  }
  else {
  }
  if (count > 2 && (originalHorizontalDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || originalVerticalDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) && (ADXOptimizer_enabledWithInt_withInt_(mOptimizationLevel_, ADXOptimizer_OPTIMIZATION_GROUPING))) {
    if (ADXGrouping_simpleSolvingPassWithADXConstraintWidgetContainer_withADXBasicMeasure_Measurer_(self, [self getMeasurer])) {
      if (originalHorizontalDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
        if (preW < [self getWidth] && preW > 0) {
          [self setWidthWithInt:preW];
          mWidthMeasuredTooSmall_ = true;
        }
        else {
          preW = [self getWidth];
        }
      }
      if (originalVerticalDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
        if (preH < [self getHeight] && preH > 0) {
          [self setHeightWithInt:preH];
          mHeightMeasuredTooSmall_ = true;
        }
        else {
          preH = [self getHeight];
        }
      }
      wrap_override = true;
    }
  }
  jboolean useGraphOptimizer = [self optimizeForWithInt:ADXOptimizer_OPTIMIZATION_GRAPH] || [self optimizeForWithInt:ADXOptimizer_OPTIMIZATION_GRAPH_WRAP];
  ((ADXLinearSystem *) nil_chk(mSystem_))->graphOptimizer_ = false;
  mSystem_->newgraphOptimizer_ = false;
  if (mOptimizationLevel_ != ADXOptimizer_OPTIMIZATION_NONE && useGraphOptimizer) {
    mSystem_->newgraphOptimizer_ = true;
  }
  jint countSolve = 0;
  id<JavaUtilList> allChildren = mChildren_;
  jboolean hasWrapContent = [self getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || [self getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT);
  ADXConstraintWidgetContainer_resetChains(self);
  countSolve = 0;
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
    if ([widget isKindOfClass:[ADXWidgetContainer class]]) {
      [((ADXWidgetContainer *) nil_chk(((ADXWidgetContainer *) widget))) layout];
    }
  }
  jboolean optimize = [self optimizeForWithInt:ADXOptimizer_OPTIMIZATION_GRAPH];
  jboolean needsSolving = true;
  while (needsSolving) {
    countSolve++;
    @try {
      [((ADXLinearSystem *) nil_chk(mSystem_)) reset];
      ADXConstraintWidgetContainer_resetChains(self);
      {
        [self createObjectVariablesWithADXLinearSystem:mSystem_];
        for (jint i = 0; i < count; i++) {
          ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
          [((ADXConstraintWidget *) nil_chk(widget)) createObjectVariablesWithADXLinearSystem:mSystem_];
        }
      }
      needsSolving = [self addChildrenToSolverWithADXLinearSystem:mSystem_];
      if (verticalWrapMin_ != nil && [verticalWrapMin_ get] != nil) {
        ADXConstraintWidgetContainer_addMinWrapWithADXConstraintAnchor_withADXSolverVariable_(self, [verticalWrapMin_ get], [((ADXLinearSystem *) nil_chk(mSystem_)) createObjectVariableWithId:mTop_]);
        JreStrongAssign(&verticalWrapMin_, nil);
      }
      if (verticalWrapMax_ != nil && [verticalWrapMax_ get] != nil) {
        ADXConstraintWidgetContainer_addMaxWrapWithADXConstraintAnchor_withADXSolverVariable_(self, [verticalWrapMax_ get], [((ADXLinearSystem *) nil_chk(mSystem_)) createObjectVariableWithId:mBottom_]);
        JreStrongAssign(&verticalWrapMax_, nil);
      }
      if (horizontalWrapMin_ != nil && [horizontalWrapMin_ get] != nil) {
        ADXConstraintWidgetContainer_addMinWrapWithADXConstraintAnchor_withADXSolverVariable_(self, [horizontalWrapMin_ get], [((ADXLinearSystem *) nil_chk(mSystem_)) createObjectVariableWithId:mLeft_]);
        JreStrongAssign(&horizontalWrapMin_, nil);
      }
      if (horizontalWrapMax_ != nil && [horizontalWrapMax_ get] != nil) {
        ADXConstraintWidgetContainer_addMaxWrapWithADXConstraintAnchor_withADXSolverVariable_(self, [horizontalWrapMax_ get], [((ADXLinearSystem *) nil_chk(mSystem_)) createObjectVariableWithId:mRight_]);
        JreStrongAssign(&horizontalWrapMax_, nil);
      }
      if (needsSolving) {
        [((ADXLinearSystem *) nil_chk(mSystem_)) minimize];
      }
    }
    @catch (JavaLangException *e) {
      [e printStackTrace];
      [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@", @"EXCEPTION : ", e)];
    }
    if (needsSolving) {
      needsSolving = [self updateChildrenFromSolverWithADXLinearSystem:mSystem_ withBooleanArray:JreLoadStatic(ADXOptimizer, flags)];
    }
    else {
      [self updateFromSolverWithADXLinearSystem:mSystem_ withBoolean:optimize];
      for (jint i = 0; i < count; i++) {
        ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
        [((ADXConstraintWidget *) nil_chk(widget)) updateFromSolverWithADXLinearSystem:mSystem_ withBoolean:optimize];
      }
      needsSolving = false;
    }
    if (hasWrapContent && countSolve < ADXConstraintWidgetContainer_MAX_ITERATIONS && IOSBooleanArray_Get(nil_chk(JreLoadStatic(ADXOptimizer, flags)), ADXOptimizer_FLAG_RECOMPUTE_BOUNDS)) {
      jint maxX = 0;
      jint maxY = 0;
      for (jint i = 0; i < count; i++) {
        ADXConstraintWidget *widget = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i]);
        maxX = JavaLangMath_maxWithInt_withInt_(maxX, ((ADXConstraintWidget *) nil_chk(widget))->mX_ + [widget getWidth]);
        maxY = JavaLangMath_maxWithInt_withInt_(maxY, widget->mY_ + [widget getHeight]);
      }
      maxX = JavaLangMath_maxWithInt_withInt_(mMinWidth_, maxX);
      maxY = JavaLangMath_maxWithInt_withInt_(mMinHeight_, maxY);
      if (originalHorizontalDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
        if ([self getWidth] < maxX) {
          [self setWidthWithInt:maxX];
          IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
          wrap_override = true;
          needsSolving = true;
        }
      }
      if (originalVerticalDimensionBehaviour == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
        if ([self getHeight] < maxY) {
          [self setHeightWithInt:maxY];
          IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
          wrap_override = true;
          needsSolving = true;
        }
      }
    }
    {
      jint width = JavaLangMath_maxWithInt_withInt_(mMinWidth_, [self getWidth]);
      if (width > [self getWidth]) {
        [self setWidthWithInt:width];
        IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
        wrap_override = true;
        needsSolving = true;
      }
      jint height = JavaLangMath_maxWithInt_withInt_(mMinHeight_, [self getHeight]);
      if (height > [self getHeight]) {
        [self setHeightWithInt:height];
        IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
        wrap_override = true;
        needsSolving = true;
      }
      if (!wrap_override) {
        if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) && preW > 0) {
          if ([self getWidth] > preW) {
            mWidthMeasuredTooSmall_ = true;
            wrap_override = true;
            IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
            [self setWidthWithInt:preW];
            needsSolving = true;
          }
        }
        if (IOSObjectArray_Get(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) && preH > 0) {
          if ([self getHeight] > preH) {
            mHeightMeasuredTooSmall_ = true;
            wrap_override = true;
            IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
            [self setHeightWithInt:preH];
            needsSolving = true;
          }
        }
      }
      if (countSolve > ADXConstraintWidgetContainer_MAX_ITERATIONS) {
        needsSolving = false;
      }
    }
  }
  JreStrongAssign(&mChildren_, (JavaUtilArrayList *) cast_chk(allChildren, [JavaUtilArrayList class]));
  if (wrap_override) {
    IOSObjectArray_Set(nil_chk(mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL, originalHorizontalDimensionBehaviour);
    IOSObjectArray_Set(mListDimensionBehaviors_, ADXConstraintWidget_DIMENSION_VERTICAL, originalVerticalDimensionBehaviour);
  }
  [self resetSolverVariablesWithADXCache:[((ADXLinearSystem *) nil_chk(mSystem_)) getCache]];
}

- (jboolean)handlesInternalConstraints {
  return false;
}

- (JavaUtilArrayList *)getVerticalGuidelines {
  JavaUtilArrayList *guidelines = create_JavaUtilArrayList_init();
  for (jint i = 0, mChildrenSize = [((JavaUtilArrayList *) nil_chk(mChildren_)) size]; i < mChildrenSize; i++) {
    ADXConstraintWidget *widget = [((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i];
    if ([widget isKindOfClass:[ADXCoreGuideline class]]) {
      ADXCoreGuideline *guideline = (ADXCoreGuideline *) widget;
      if ([((ADXCoreGuideline *) nil_chk(guideline)) getOrientation] == ADXCoreGuideline_VERTICAL) {
        [guidelines addWithId:guideline];
      }
    }
  }
  return guidelines;
}

- (JavaUtilArrayList *)getHorizontalGuidelines {
  JavaUtilArrayList *guidelines = create_JavaUtilArrayList_init();
  for (jint i = 0, mChildrenSize = [((JavaUtilArrayList *) nil_chk(mChildren_)) size]; i < mChildrenSize; i++) {
    ADXConstraintWidget *widget = [((JavaUtilArrayList *) nil_chk(mChildren_)) getWithInt:i];
    if ([widget isKindOfClass:[ADXCoreGuideline class]]) {
      ADXCoreGuideline *guideline = (ADXCoreGuideline *) widget;
      if ([((ADXCoreGuideline *) nil_chk(guideline)) getOrientation] == ADXCoreGuideline_HORIZONTAL) {
        [guidelines addWithId:guideline];
      }
    }
  }
  return guidelines;
}

- (ADXLinearSystem *)getSystem {
  return mSystem_;
}

- (void)resetChains {
  ADXConstraintWidgetContainer_resetChains(self);
}

- (void)addChainWithADXConstraintWidget:(ADXConstraintWidget *)constraintWidget
                                withInt:(jint)type {
  ADXConstraintWidget *widget = JreRetainedLocalValue(constraintWidget);
  if (type == ADXConstraintWidget_HORIZONTAL) {
    ADXConstraintWidgetContainer_addHorizontalChainWithADXConstraintWidget_(self, widget);
  }
  else if (type == ADXConstraintWidget_VERTICAL) {
    ADXConstraintWidgetContainer_addVerticalChainWithADXConstraintWidget_(self, widget);
  }
}

- (void)addHorizontalChainWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  ADXConstraintWidgetContainer_addHorizontalChainWithADXConstraintWidget_(self, widget);
}

- (void)addVerticalChainWithADXConstraintWidget:(ADXConstraintWidget *)widget {
  ADXConstraintWidgetContainer_addVerticalChainWithADXConstraintWidget_(self, widget);
}

- (void)setPassWithInt:(jint)pass {
  self->pass_ = pass;
}

- (void)release__ {
  [self reset];
  JreStrongAssign(&mDependencyGraph_, nil);
  JreStrongAssign(&mBasicMeasureSolver_, nil);
  JreStrongAssign(&mSystem_, nil);
  JreStrongAssign(&mMeasurer_, nil);
  JreStrongAssign(&mVerticalChainsArray_, nil);
  JreStrongAssign(&mHorizontalChainsArray_, nil);
  JreStrongAssign(&frame_, nil);
  JreStrongAssign(&mCenter_, nil);
  JreStrongAssign(&mLeft_, nil);
  JreStrongAssign(&mRight_, nil);
  JreStrongAssign(&mTop_, nil);
  JreStrongAssign(&mBottom_, nil);
  JreStrongAssign(&mBaseline_, nil);
  JreStrongAssign(&mCenterX_, nil);
  JreStrongAssign(&mCenterY_, nil);
  JreStrongAssign(&mListAnchors_, nil);
  JreStrongAssign(&mAnchors_, nil);
}

- (void)dealloc {
  RELEASE_(mBasicMeasureSolver_);
  RELEASE_(mDependencyGraph_);
  RELEASE_(mMeasurer_);
  RELEASE_(mMetrics_);
  RELEASE_(mSystem_);
  RELEASE_(mVerticalChainsArray_);
  RELEASE_(mHorizontalChainsArray_);
  RELEASE_(verticalWrapMin_);
  RELEASE_(horizontalWrapMin_);
  RELEASE_(verticalWrapMax_);
  RELEASE_(horizontalWrapMax_);
  RELEASE_(widgetsToAdd_);
  RELEASE_(mMeasure_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LADXBasicMeasure_Measurer;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 11, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 12, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 5, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 34, -1, -1 },
    { NULL, "LADXLinearSystem;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 35, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(invalidateGraph);
  methods[1].selector = @selector(invalidateMeasures);
  methods[2].selector = @selector(directMeasureWithBoolean:);
  methods[3].selector = @selector(directMeasureSetupWithBoolean:);
  methods[4].selector = @selector(directMeasureWithOrientationWithBoolean:withInt:);
  methods[5].selector = @selector(defineTerminalWidgets);
  methods[6].selector = @selector(measureWithInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(updateHierarchy);
  methods[8].selector = @selector(setMeasurerWithADXBasicMeasure_Measurer:);
  methods[9].selector = @selector(getMeasurer);
  methods[10].selector = @selector(fillMetricsWithADXMetrics:);
  methods[11].selector = @selector(init);
  methods[12].selector = @selector(initWithInt:withInt:withInt:withInt:);
  methods[13].selector = @selector(initWithInt:withInt:);
  methods[14].selector = @selector(initWithNSString:withInt:withInt:);
  methods[15].selector = @selector(setOptimizationLevelWithInt:);
  methods[16].selector = @selector(getOptimizationLevel);
  methods[17].selector = @selector(optimizeForWithInt:);
  methods[18].selector = @selector(getType);
  methods[19].selector = @selector(reset);
  methods[20].selector = @selector(isWidthMeasuredTooSmall);
  methods[21].selector = @selector(isHeightMeasuredTooSmall);
  methods[22].selector = @selector(addVerticalWrapMinVariableWithADXConstraintAnchor:);
  methods[23].selector = @selector(addHorizontalWrapMinVariableWithADXConstraintAnchor:);
  methods[24].selector = @selector(addVerticalWrapMaxVariableWithADXConstraintAnchor:);
  methods[25].selector = @selector(addHorizontalWrapMaxVariableWithADXConstraintAnchor:);
  methods[26].selector = @selector(addMinWrapWithADXConstraintAnchor:withADXSolverVariable:);
  methods[27].selector = @selector(addMaxWrapWithADXConstraintAnchor:withADXSolverVariable:);
  methods[28].selector = @selector(addChildrenToSolverWithADXLinearSystem:);
  methods[29].selector = @selector(updateChildrenFromSolverWithADXLinearSystem:withBooleanArray:);
  methods[30].selector = @selector(updateFromRunsWithBoolean:withBoolean:);
  methods[31].selector = @selector(setPaddingWithInt:withInt:withInt:withInt:);
  methods[32].selector = @selector(setRtlWithBoolean:);
  methods[33].selector = @selector(isRtl);
  methods[34].selector = @selector(measureWithInt:withADXConstraintWidget:withADXBasicMeasure_Measurer:withADXBasicMeasure_Measure:withInt:);
  methods[35].selector = @selector(layout);
  methods[36].selector = @selector(handlesInternalConstraints);
  methods[37].selector = @selector(getVerticalGuidelines);
  methods[38].selector = @selector(getHorizontalGuidelines);
  methods[39].selector = @selector(getSystem);
  methods[40].selector = @selector(resetChains);
  methods[41].selector = @selector(addChainWithADXConstraintWidget:withInt:);
  methods[42].selector = @selector(addHorizontalChainWithADXConstraintWidget:);
  methods[43].selector = @selector(addVerticalChainWithADXConstraintWidget:);
  methods[44].selector = @selector(setPassWithInt:);
  methods[45].selector = @selector(release__);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MAX_ITERATIONS", "I", .constantValue.asInt = ADXConstraintWidgetContainer_MAX_ITERATIONS, 0x1a, -1, -1, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXConstraintWidgetContainer_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "DEBUG_LAYOUT", "Z", .constantValue.asBOOL = ADXConstraintWidgetContainer_DEBUG_LAYOUT, 0x1a, -1, -1, -1, -1 },
    { "DEBUG_GRAPH", "Z", .constantValue.asBOOL = ADXConstraintWidgetContainer_DEBUG_GRAPH, 0x18, -1, -1, -1, -1 },
    { "mBasicMeasureSolver_", "LADXBasicMeasure;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDependencyGraph_", "LADXDependencyGraph;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pass_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMeasurer_", "LADXBasicMeasure_Measurer;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mIsRtl_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMetrics_", "LADXMetrics;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSystem_", "LADXLinearSystem;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPaddingLeft_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPaddingTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPaddingRight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPaddingBottom_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalChainsSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVerticalChainsSize_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVerticalChainsArray_", "[LADXChainHead;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalChainsArray_", "[LADXChainHead;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mGroupsWrapOptimized_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mHorizontalWrapOptimized_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mVerticalWrapOptimized_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWrapFixedWidth_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWrapFixedHeight_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mOptimizationLevel_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSkipSolver_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWidthMeasuredTooSmall_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeightMeasuredTooSmall_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDebugSolverPassCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "verticalWrapMin_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "horizontalWrapMin_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "verticalWrapMax_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "horizontalWrapMax_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 42, -1 },
    { "widgetsToAdd_", "LJavaUtilHashSet;", .constantValue.asLong = 0, 0x0, -1, -1, 43, -1 },
    { "mMeasure_", "LADXBasicMeasure_Measure;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "myCounter", "I", .constantValue.asLong = 0, 0x8, -1, 44, -1, -1 },
  };
  static const void *ptrTable[] = { "directMeasure", "Z", "directMeasureSetup", "directMeasureWithOrientation", "ZI", "measure", "IIIIIIIII", "setMeasurer", "LADXBasicMeasure_Measurer;", "fillMetrics", "LADXMetrics;", "IIII", "II", "LNSString;II", "setOptimizationLevel", "I", "optimizeFor", "addVerticalWrapMinVariable", "LADXConstraintAnchor;", "addHorizontalWrapMinVariable", "addVerticalWrapMaxVariable", "addHorizontalWrapMaxVariable", "addMinWrap", "LADXConstraintAnchor;LADXSolverVariable;", "addMaxWrap", "addChildrenToSolver", "LADXLinearSystem;", "updateChildrenFromSolver", "LADXLinearSystem;[Z", "updateFromRuns", "ZZ", "setPadding", "setRtl", "ILADXConstraintWidget;LADXBasicMeasure_Measurer;LADXBasicMeasure_Measure;I", "()Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/CoreGuideline;>;", "addChain", "LADXConstraintWidget;I", "addHorizontalChain", "LADXConstraintWidget;", "addVerticalChain", "setPass", "release", "Ljava/lang/ref/WeakReference<Landroidx/constraintlayout/core/widgets/ConstraintAnchor;>;", "Ljava/util/HashSet<Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;", &ADXConstraintWidgetContainer_myCounter };
  static const J2ObjcClassInfo _ADXConstraintWidgetContainer = { "ConstraintWidgetContainer", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x1, 46, 36, -1, -1, -1, -1, -1 };
  return &_ADXConstraintWidgetContainer;
}

@end

void ADXConstraintWidgetContainer_init(ADXConstraintWidgetContainer *self) {
  ADXWidgetContainer_init(self);
  JreStrongAssignAndConsume(&self->mBasicMeasureSolver_, new_ADXBasicMeasure_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssignAndConsume(&self->mDependencyGraph_, new_ADXDependencyGraph_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssign(&self->mMeasurer_, nil);
  self->mIsRtl_ = false;
  JreStrongAssignAndConsume(&self->mSystem_, new_ADXLinearSystem_init());
  self->mHorizontalChainsSize_ = 0;
  self->mVerticalChainsSize_ = 0;
  JreStrongAssignAndConsume(&self->mVerticalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  JreStrongAssignAndConsume(&self->mHorizontalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  self->mGroupsWrapOptimized_ = false;
  self->mHorizontalWrapOptimized_ = false;
  self->mVerticalWrapOptimized_ = false;
  self->mWrapFixedWidth_ = 0;
  self->mWrapFixedHeight_ = 0;
  self->mOptimizationLevel_ = ADXOptimizer_OPTIMIZATION_STANDARD;
  self->mSkipSolver_ = false;
  self->mWidthMeasuredTooSmall_ = false;
  self->mHeightMeasuredTooSmall_ = false;
  self->mDebugSolverPassCount_ = 0;
  JreStrongAssign(&self->verticalWrapMin_, nil);
  JreStrongAssign(&self->horizontalWrapMin_, nil);
  JreStrongAssign(&self->verticalWrapMax_, nil);
  JreStrongAssign(&self->horizontalWrapMax_, nil);
  JreStrongAssignAndConsume(&self->widgetsToAdd_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mMeasure_, new_ADXBasicMeasure_Measure_init());
}

ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_init() {
  J2OBJC_NEW_IMPL(ADXConstraintWidgetContainer, init)
}

ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_init() {
  J2OBJC_CREATE_IMPL(ADXConstraintWidgetContainer, init)
}

void ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(ADXConstraintWidgetContainer *self, jint x, jint y, jint width, jint height) {
  ADXWidgetContainer_initWithInt_withInt_withInt_withInt_(self, x, y, width, height);
  JreStrongAssignAndConsume(&self->mBasicMeasureSolver_, new_ADXBasicMeasure_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssignAndConsume(&self->mDependencyGraph_, new_ADXDependencyGraph_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssign(&self->mMeasurer_, nil);
  self->mIsRtl_ = false;
  JreStrongAssignAndConsume(&self->mSystem_, new_ADXLinearSystem_init());
  self->mHorizontalChainsSize_ = 0;
  self->mVerticalChainsSize_ = 0;
  JreStrongAssignAndConsume(&self->mVerticalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  JreStrongAssignAndConsume(&self->mHorizontalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  self->mGroupsWrapOptimized_ = false;
  self->mHorizontalWrapOptimized_ = false;
  self->mVerticalWrapOptimized_ = false;
  self->mWrapFixedWidth_ = 0;
  self->mWrapFixedHeight_ = 0;
  self->mOptimizationLevel_ = ADXOptimizer_OPTIMIZATION_STANDARD;
  self->mSkipSolver_ = false;
  self->mWidthMeasuredTooSmall_ = false;
  self->mHeightMeasuredTooSmall_ = false;
  self->mDebugSolverPassCount_ = 0;
  JreStrongAssign(&self->verticalWrapMin_, nil);
  JreStrongAssign(&self->horizontalWrapMin_, nil);
  JreStrongAssign(&self->verticalWrapMax_, nil);
  JreStrongAssign(&self->horizontalWrapMax_, nil);
  JreStrongAssignAndConsume(&self->widgetsToAdd_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mMeasure_, new_ADXBasicMeasure_Measure_init());
}

ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidgetContainer, initWithInt_withInt_withInt_withInt_, x, y, width, height)
}

ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithInt_withInt_withInt_withInt_(jint x, jint y, jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidgetContainer, initWithInt_withInt_withInt_withInt_, x, y, width, height)
}

void ADXConstraintWidgetContainer_initWithInt_withInt_(ADXConstraintWidgetContainer *self, jint width, jint height) {
  ADXWidgetContainer_initWithInt_withInt_(self, width, height);
  JreStrongAssignAndConsume(&self->mBasicMeasureSolver_, new_ADXBasicMeasure_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssignAndConsume(&self->mDependencyGraph_, new_ADXDependencyGraph_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssign(&self->mMeasurer_, nil);
  self->mIsRtl_ = false;
  JreStrongAssignAndConsume(&self->mSystem_, new_ADXLinearSystem_init());
  self->mHorizontalChainsSize_ = 0;
  self->mVerticalChainsSize_ = 0;
  JreStrongAssignAndConsume(&self->mVerticalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  JreStrongAssignAndConsume(&self->mHorizontalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  self->mGroupsWrapOptimized_ = false;
  self->mHorizontalWrapOptimized_ = false;
  self->mVerticalWrapOptimized_ = false;
  self->mWrapFixedWidth_ = 0;
  self->mWrapFixedHeight_ = 0;
  self->mOptimizationLevel_ = ADXOptimizer_OPTIMIZATION_STANDARD;
  self->mSkipSolver_ = false;
  self->mWidthMeasuredTooSmall_ = false;
  self->mHeightMeasuredTooSmall_ = false;
  self->mDebugSolverPassCount_ = 0;
  JreStrongAssign(&self->verticalWrapMin_, nil);
  JreStrongAssign(&self->horizontalWrapMin_, nil);
  JreStrongAssign(&self->verticalWrapMax_, nil);
  JreStrongAssign(&self->horizontalWrapMax_, nil);
  JreStrongAssignAndConsume(&self->widgetsToAdd_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mMeasure_, new_ADXBasicMeasure_Measure_init());
}

ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidgetContainer, initWithInt_withInt_, width, height)
}

ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidgetContainer, initWithInt_withInt_, width, height)
}

void ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(ADXConstraintWidgetContainer *self, NSString *debugName, jint width, jint height) {
  ADXWidgetContainer_initWithInt_withInt_(self, width, height);
  JreStrongAssignAndConsume(&self->mBasicMeasureSolver_, new_ADXBasicMeasure_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssignAndConsume(&self->mDependencyGraph_, new_ADXDependencyGraph_initWithADXConstraintWidgetContainer_(self));
  JreStrongAssign(&self->mMeasurer_, nil);
  self->mIsRtl_ = false;
  JreStrongAssignAndConsume(&self->mSystem_, new_ADXLinearSystem_init());
  self->mHorizontalChainsSize_ = 0;
  self->mVerticalChainsSize_ = 0;
  JreStrongAssignAndConsume(&self->mVerticalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  JreStrongAssignAndConsume(&self->mHorizontalChainsArray_, [IOSObjectArray newArrayWithLength:4 type:ADXChainHead_class_()]);
  self->mGroupsWrapOptimized_ = false;
  self->mHorizontalWrapOptimized_ = false;
  self->mVerticalWrapOptimized_ = false;
  self->mWrapFixedWidth_ = 0;
  self->mWrapFixedHeight_ = 0;
  self->mOptimizationLevel_ = ADXOptimizer_OPTIMIZATION_STANDARD;
  self->mSkipSolver_ = false;
  self->mWidthMeasuredTooSmall_ = false;
  self->mHeightMeasuredTooSmall_ = false;
  self->mDebugSolverPassCount_ = 0;
  JreStrongAssign(&self->verticalWrapMin_, nil);
  JreStrongAssign(&self->horizontalWrapMin_, nil);
  JreStrongAssign(&self->verticalWrapMax_, nil);
  JreStrongAssign(&self->horizontalWrapMax_, nil);
  JreStrongAssignAndConsume(&self->widgetsToAdd_, new_JavaUtilHashSet_init());
  JreStrongAssignAndConsume(&self->mMeasure_, new_ADXBasicMeasure_Measure_init());
  [self setDebugNameWithNSString:debugName];
}

ADXConstraintWidgetContainer *new_ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(NSString *debugName, jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXConstraintWidgetContainer, initWithNSString_withInt_withInt_, debugName, width, height)
}

ADXConstraintWidgetContainer *create_ADXConstraintWidgetContainer_initWithNSString_withInt_withInt_(NSString *debugName, jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXConstraintWidgetContainer, initWithNSString_withInt_withInt_, debugName, width, height)
}

void ADXConstraintWidgetContainer_addMinWrapWithADXConstraintAnchor_withADXSolverVariable_(ADXConstraintWidgetContainer *self, ADXConstraintAnchor *constraintAnchor, ADXSolverVariable *parentMin) {
  ADXSolverVariable *variable = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(self->mSystem_)) createObjectVariableWithId:constraintAnchor]);
  jint wrapStrength = ADXSolverVariable_STRENGTH_EQUALITY;
  [((ADXLinearSystem *) nil_chk(self->mSystem_)) addGreaterThanWithADXSolverVariable:variable withADXSolverVariable:parentMin withInt:0 withInt:wrapStrength];
}

void ADXConstraintWidgetContainer_addMaxWrapWithADXConstraintAnchor_withADXSolverVariable_(ADXConstraintWidgetContainer *self, ADXConstraintAnchor *constraintAnchor, ADXSolverVariable *parentMax) {
  ADXSolverVariable *variable = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(self->mSystem_)) createObjectVariableWithId:constraintAnchor]);
  jint wrapStrength = ADXSolverVariable_STRENGTH_EQUALITY;
  [((ADXLinearSystem *) nil_chk(self->mSystem_)) addGreaterThanWithADXSolverVariable:parentMax withADXSolverVariable:variable withInt:0 withInt:wrapStrength];
}

jboolean ADXConstraintWidgetContainer_measureWithInt_withADXConstraintWidget_withADXBasicMeasure_Measurer_withADXBasicMeasure_Measure_withInt_(jint level, ADXConstraintWidget *widget, id<ADXBasicMeasure_Measurer> measurer, ADXBasicMeasure_Measure *measure, jint measureStrategy) {
  ADXConstraintWidgetContainer_initialize();
  if (measurer == nil) {
    return false;
  }
  if ([((ADXConstraintWidget *) nil_chk(widget)) getVisibility] == ADXConstraintWidget_GONE || [widget isKindOfClass:[ADXCoreGuideline class]] || [widget isKindOfClass:[ADXCoreBarrier class]]) {
    ((ADXBasicMeasure_Measure *) nil_chk(measure))->measuredWidth_ = 0;
    measure->measuredHeight_ = 0;
    return false;
  }
  JreStrongAssign(&((ADXBasicMeasure_Measure *) nil_chk(measure))->horizontalBehavior_, [widget getHorizontalDimensionBehaviour]);
  JreStrongAssign(&measure->verticalBehavior_, [widget getVerticalDimensionBehaviour]);
  measure->horizontalDimension_ = [widget getWidth];
  measure->verticalDimension_ = [widget getHeight];
  measure->measuredNeedsSolverPass_ = false;
  measure->measureStrategy_ = measureStrategy;
  jboolean horizontalMatchConstraints = measure->horizontalBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
  jboolean verticalMatchConstraints = measure->verticalBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_CONSTRAINT);
  jboolean horizontalUseRatio = horizontalMatchConstraints && widget->mDimensionRatio_ > 0;
  jboolean verticalUseRatio = verticalMatchConstraints && widget->mDimensionRatio_ > 0;
  if (horizontalMatchConstraints && [widget hasDanglingDimensionWithInt:ADXConstraintWidget_HORIZONTAL] && widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD && !horizontalUseRatio) {
    horizontalMatchConstraints = false;
    JreStrongAssign(&measure->horizontalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
    if (verticalMatchConstraints && widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      JreStrongAssign(&measure->horizontalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
    }
  }
  if (verticalMatchConstraints && [widget hasDanglingDimensionWithInt:ADXConstraintWidget_VERTICAL] && widget->mMatchConstraintDefaultHeight_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD && !verticalUseRatio) {
    verticalMatchConstraints = false;
    JreStrongAssign(&measure->verticalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
    if (horizontalMatchConstraints && widget->mMatchConstraintDefaultWidth_ == ADXConstraintWidget_MATCH_CONSTRAINT_SPREAD) {
      JreStrongAssign(&measure->verticalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
    }
  }
  if ([widget isResolvedHorizontally]) {
    horizontalMatchConstraints = false;
    JreStrongAssign(&measure->horizontalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
  }
  if ([widget isResolvedVertically]) {
    verticalMatchConstraints = false;
    JreStrongAssign(&measure->verticalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
  }
  if (horizontalUseRatio) {
    if (IOSIntArray_Get(nil_chk(widget->mResolvedMatchConstraintDefault_), ADXConstraintWidget_HORIZONTAL) == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED) {
      JreStrongAssign(&measure->horizontalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
    }
    else if (!verticalMatchConstraints) {
      jint measuredHeight;
      if (measure->verticalBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
        measuredHeight = measure->verticalDimension_;
      }
      else {
        JreStrongAssign(&measure->horizontalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
        [measurer measureWithADXConstraintWidget:widget withADXBasicMeasure_Measure:measure];
        measuredHeight = measure->measuredHeight_;
      }
      JreStrongAssign(&measure->horizontalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
      measure->horizontalDimension_ = JreFpToInt(([widget getDimensionRatio] * measuredHeight));
    }
  }
  if (verticalUseRatio) {
    if (IOSIntArray_Get(nil_chk(widget->mResolvedMatchConstraintDefault_), ADXConstraintWidget_VERTICAL) == ADXConstraintWidget_MATCH_CONSTRAINT_RATIO_RESOLVED) {
      JreStrongAssign(&measure->verticalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
    }
    else if (!horizontalMatchConstraints) {
      jint measuredWidth;
      if (measure->horizontalBehavior_ == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)) {
        measuredWidth = measure->horizontalDimension_;
      }
      else {
        JreStrongAssign(&measure->verticalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
        [measurer measureWithADXConstraintWidget:widget withADXBasicMeasure_Measure:measure];
        measuredWidth = measure->measuredWidth_;
      }
      JreStrongAssign(&measure->verticalBehavior_, JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED));
      if ([widget getDimensionRatioSide] == -1) {
        measure->verticalDimension_ = JreFpToInt((measuredWidth / [widget getDimensionRatio]));
      }
      else {
        measure->verticalDimension_ = JreFpToInt(([widget getDimensionRatio] * measuredWidth));
      }
    }
  }
  [measurer measureWithADXConstraintWidget:widget withADXBasicMeasure_Measure:measure];
  [widget setWidthWithInt:measure->measuredWidth_];
  [widget setHeightWithInt:measure->measuredHeight_];
  [widget setHasBaselineWithBoolean:measure->measuredHasBaseline_];
  [widget setBaselineDistanceWithInt:measure->measuredBaseline_];
  measure->measureStrategy_ = JreLoadStatic(ADXBasicMeasure_Measure, SELF_DIMENSIONS);
  return measure->measuredNeedsSolverPass_;
}

void ADXConstraintWidgetContainer_resetChains(ADXConstraintWidgetContainer *self) {
  self->mHorizontalChainsSize_ = 0;
  self->mVerticalChainsSize_ = 0;
}

void ADXConstraintWidgetContainer_addHorizontalChainWithADXConstraintWidget_(ADXConstraintWidgetContainer *self, ADXConstraintWidget *widget) {
  if (self->mHorizontalChainsSize_ + 1 >= ((IOSObjectArray *) nil_chk(self->mHorizontalChainsArray_))->size_) {
    JreStrongAssign(&self->mHorizontalChainsArray_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->mHorizontalChainsArray_, self->mHorizontalChainsArray_->size_ * 2));
  }
  IOSObjectArray_SetAndConsume(nil_chk(self->mHorizontalChainsArray_), self->mHorizontalChainsSize_, new_ADXChainHead_initWithADXConstraintWidget_withInt_withBoolean_(widget, ADXConstraintWidget_HORIZONTAL, [self isRtl]));
  self->mHorizontalChainsSize_++;
}

void ADXConstraintWidgetContainer_addVerticalChainWithADXConstraintWidget_(ADXConstraintWidgetContainer *self, ADXConstraintWidget *widget) {
  if (self->mVerticalChainsSize_ + 1 >= ((IOSObjectArray *) nil_chk(self->mVerticalChainsArray_))->size_) {
    JreStrongAssign(&self->mVerticalChainsArray_, JavaUtilArrays_copyOfWithNSObjectArray_withInt_(self->mVerticalChainsArray_, self->mVerticalChainsArray_->size_ * 2));
  }
  IOSObjectArray_SetAndConsume(nil_chk(self->mVerticalChainsArray_), self->mVerticalChainsSize_, new_ADXChainHead_initWithADXConstraintWidget_withInt_withBoolean_(widget, ADXConstraintWidget_VERTICAL, [self isRtl]));
  self->mVerticalChainsSize_++;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXConstraintWidgetContainer)
