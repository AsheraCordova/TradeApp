//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\CircularFlowImpl.java
//

#include "BaseWidget.h"
#include "CircularFlow.h"
#include "CircularFlowImpl.h"
#include "ConstraintReferencedIdsConverter.h"
#include "ConverterFactory.h"
#include "HasWidgets.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "View.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIView.h"


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASCircularFlowImpl () {
 @public
  ASCircularFlowImpl_CircularFlowCommandBuilder *builder_;
  ASCircularFlowImpl_CircularFlowBean *bean_;
}

- (void)setWidgetOnNativeClass;

- (void)setConstraintReferenced_idsWithId:(id)objValue;

- (id)getConstraintReferencedIds;

- (void)setViewCenterWithId:(id)objValue;

- (void)setAnglesWithId:(id)objValue;

- (void)setRadiusInDPWithId:(id)objValue;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)addViewToCircularFlowWithInt:(jint)viewId
                             withInt:(jint)radius
                           withFloat:(jfloat)angle;

- (void)updateAngleWithInt:(jint)viewId
                 withFloat:(jfloat)angle;

- (void)updateRadiusWithInt:(jint)viewId
                    withInt:(jint)radius;

- (void)updateReferenceWithInt:(jint)viewId
                       withInt:(jint)radius
                     withFloat:(jfloat)angle;

@end

J2OBJC_FIELD_SETTER(ASCircularFlowImpl, builder_, ASCircularFlowImpl_CircularFlowCommandBuilder *)
J2OBJC_FIELD_SETTER(ASCircularFlowImpl, bean_, ASCircularFlowImpl_CircularFlowBean *)

__attribute__((unused)) static void ASCircularFlowImpl_setWidgetOnNativeClass(ASCircularFlowImpl *self);

__attribute__((unused)) static void ASCircularFlowImpl_setConstraintReferenced_idsWithId_(ASCircularFlowImpl *self, id objValue);

__attribute__((unused)) static id ASCircularFlowImpl_getConstraintReferencedIds(ASCircularFlowImpl *self);

__attribute__((unused)) static void ASCircularFlowImpl_setViewCenterWithId_(ASCircularFlowImpl *self, id objValue);

__attribute__((unused)) static void ASCircularFlowImpl_setAnglesWithId_(ASCircularFlowImpl *self, id objValue);

__attribute__((unused)) static void ASCircularFlowImpl_setRadiusInDPWithId_(ASCircularFlowImpl *self, id objValue);

__attribute__((unused)) static void ASCircularFlowImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASCircularFlowImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASCircularFlowImpl_addViewToCircularFlowWithInt_withInt_withFloat_(ASCircularFlowImpl *self, jint viewId, jint radius, jfloat angle);

__attribute__((unused)) static void ASCircularFlowImpl_updateAngleWithInt_withFloat_(ASCircularFlowImpl *self, jint viewId, jfloat angle);

__attribute__((unused)) static void ASCircularFlowImpl_updateRadiusWithInt_withInt_(ASCircularFlowImpl *self, jint viewId, jint radius);

__attribute__((unused)) static void ASCircularFlowImpl_updateReferenceWithInt_withInt_withFloat_(ASCircularFlowImpl *self, jint viewId, jint radius, jfloat angle);

@interface ASCircularFlowImpl_CircularFlowExt () {
 @public
  __unsafe_unretained ASCircularFlowImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASCircularFlowImpl_CircularFlowExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASCircularFlowImpl_CircularFlowExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASCircularFlowImpl_CircularFlowCommandBuilder () {
 @public
  ASCircularFlowImpl *this$0_;
}

@end

@interface ASCircularFlowImpl_CircularFlowBean () {
 @public
  ASCircularFlowImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASCircularFlowImpl)

NSString *ASCircularFlowImpl_LOCAL_NAME = @"androidx.constraintlayout.helper.widget.CircularFlow";
NSString *ASCircularFlowImpl_GROUP_NAME = @"androidx.constraintlayout.helper.widget.CircularFlow";

@implementation ASCircularFlowImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"circularflow_radiusInDP"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"circularflow_angles"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"circularflow_viewCenter"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"circularflow_defaultRadius"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"circularflow_defaultAngle"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"constraint_referenced_ids"])) withTypeWithNSString:@"CircularFlowImpl.constraintReferencedIds"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"addViewToCircularFlow"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateReference"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateRadius"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateAngle"])) withTypeWithNSString:@"object"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASCircularFlowImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASCircularFlowImpl_CircularFlowExt *) nil_chk(((ASCircularFlowImpl_CircularFlowExt *) cast_chk(circularFlow_, [ASCircularFlowImpl_CircularFlowExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASCircularFlowImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  circularFlow_ = new_ASCircularFlowImpl_CircularFlowExt_initWithASCircularFlowImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASCircularFlowImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASCircularFlowImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"circularflow_radiusInDP", @"circularflow_angles", @"circularflow_viewCenter", @"circularflow_defaultRadius", @"circularflow_defaultAngle", @"constraint_referenced_ids", @"addViewToCircularFlow", @"updateReference", @"updateRadius", @"updateAngle" }, 10)) {
    case 0:
    {
      ASCircularFlowImpl_setRadiusInDPWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASCircularFlowImpl_setAnglesWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASCircularFlowImpl_setViewCenterWithId_(self, objValue);
    }
    break;
    case 3:
    {
      [((ADXCircularFlow *) nil_chk(circularFlow_)) setDefaultRadiusWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      [((ADXCircularFlow *) nil_chk(circularFlow_)) setDefaultAngleWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 5:
    {
      ASCircularFlowImpl_setConstraintReferenced_idsWithId_(self, objValue);
    }
    break;
    case 6:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
        id radius = [self quickConvertWithId:[data getWithId:@"radius"] withNSString:@"int"];
        id angle = [self quickConvertWithId:[data getWithId:@"angle"] withNSString:@"float"];
        ASCircularFlowImpl_addViewToCircularFlowWithInt_withInt_withFloat_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(radius, [JavaLangInteger class]))) intValue], [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(angle, [JavaLangFloat class]))) floatValue]);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
          id radius = [self quickConvertWithId:[data getWithId:@"radius"] withNSString:@"int"];
          id angle = [self quickConvertWithId:[data getWithId:@"angle"] withNSString:@"float"];
          ASCircularFlowImpl_addViewToCircularFlowWithInt_withInt_withFloat_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(radius, [JavaLangInteger class]))) intValue], [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(angle, [JavaLangFloat class]))) floatValue]);
        }
      }
    }
    break;
    case 7:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
        id radius = [self quickConvertWithId:[data getWithId:@"radius"] withNSString:@"int"];
        id angle = [self quickConvertWithId:[data getWithId:@"angle"] withNSString:@"float"];
        ASCircularFlowImpl_updateReferenceWithInt_withInt_withFloat_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(radius, [JavaLangInteger class]))) intValue], [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(angle, [JavaLangFloat class]))) floatValue]);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
          id radius = [self quickConvertWithId:[data getWithId:@"radius"] withNSString:@"int"];
          id angle = [self quickConvertWithId:[data getWithId:@"angle"] withNSString:@"float"];
          ASCircularFlowImpl_updateReferenceWithInt_withInt_withFloat_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(radius, [JavaLangInteger class]))) intValue], [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(angle, [JavaLangFloat class]))) floatValue]);
        }
      }
    }
    break;
    case 8:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
        id radius = [self quickConvertWithId:[data getWithId:@"radius"] withNSString:@"int"];
        ASCircularFlowImpl_updateRadiusWithInt_withInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(radius, [JavaLangInteger class]))) intValue]);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
          id radius = [self quickConvertWithId:[data getWithId:@"radius"] withNSString:@"int"];
          ASCircularFlowImpl_updateRadiusWithInt_withInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(radius, [JavaLangInteger class]))) intValue]);
        }
      }
    }
    break;
    case 9:
    {
      if ([JavaUtilMap_class_() isInstance:objValue]) {
        id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
        id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
        id angle = [self quickConvertWithId:[data getWithId:@"angle"] withNSString:@"float"];
        ASCircularFlowImpl_updateAngleWithInt_withFloat_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(angle, [JavaLangFloat class]))) floatValue]);
      }
      if ([JavaUtilList_class_() isInstance:objValue]) {
        id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
        for (id __strong object in nil_chk(list)) {
          id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
          id viewId = [self quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"viewId"] withNSString:@"id"];
          id angle = [self quickConvertWithId:[data getWithId:@"angle"] withNSString:@"float"];
          ASCircularFlowImpl_updateAngleWithInt_withFloat_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(viewId, [JavaLangInteger class]))) intValue], [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(angle, [JavaLangFloat class]))) floatValue]);
        }
      }
    }
    break;
    default:
    break;
  }
  ASCircularFlowImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"constraint_referenced_ids" }, 1)) {
    case 0:
    {
      return ASCircularFlowImpl_getConstraintReferencedIds(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return circularFlow_;
}

- (void)setConstraintReferenced_idsWithId:(id)objValue {
  ASCircularFlowImpl_setConstraintReferenced_idsWithId_(self, objValue);
}

- (id)getConstraintReferencedIds {
  return ASCircularFlowImpl_getConstraintReferencedIds(self);
}

- (void)setViewCenterWithId:(id)objValue {
  ASCircularFlowImpl_setViewCenterWithId_(self, objValue);
}

- (void)setAnglesWithId:(id)objValue {
  ASCircularFlowImpl_setAnglesWithId_(self, objValue);
}

- (void)setRadiusInDPWithId:(id)objValue {
  ASCircularFlowImpl_setRadiusInDPWithId_(self, objValue);
}

- (void)afterParentInit {
  [super afterParentInit];
  [((ADXCircularFlow *) nil_chk(circularFlow_)) onAttachedToWindow];
}

- (jboolean)isAfterParentInitRequired {
  return true;
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASCircularFlowImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)addViewToCircularFlowWithInt:(jint)viewId
                             withInt:(jint)radius
                           withFloat:(jfloat)angle {
  ASCircularFlowImpl_addViewToCircularFlowWithInt_withInt_withFloat_(self, viewId, radius, angle);
}

- (void)updateAngleWithInt:(jint)viewId
                 withFloat:(jfloat)angle {
  ASCircularFlowImpl_updateAngleWithInt_withFloat_(self, viewId, angle);
}

- (void)updateRadiusWithInt:(jint)viewId
                    withInt:(jint)radius {
  ASCircularFlowImpl_updateRadiusWithInt_withInt_(self, viewId, radius);
}

- (void)updateReferenceWithInt:(jint)viewId
                       withInt:(jint)radius
                     withFloat:(jfloat)angle {
  ASCircularFlowImpl_updateReferenceWithInt_withInt_withFloat_(self, viewId, radius, angle);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXCircularFlow *) nil_chk(circularFlow_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
    [self nativeRequestLayout];
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASCircularFlowImpl_CircularFlowBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASCircularFlowImpl_CircularFlowBean_initWithASCircularFlowImpl_(self);
  }
  return bean_;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASCircularFlowImpl_CircularFlowCommandBuilder_initWithASCircularFlowImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)nativeRequestLayout {
  [((id<ADViewParent>) nil_chk([((ADXCircularFlow *) nil_chk(circularFlow_)) getParent])) requestLayout];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 18, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 23, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 26, 27, -1, 28, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(setConstraintReferenced_idsWithId:);
  methods[10].selector = @selector(getConstraintReferencedIds);
  methods[11].selector = @selector(setViewCenterWithId:);
  methods[12].selector = @selector(setAnglesWithId:);
  methods[13].selector = @selector(setRadiusInDPWithId:);
  methods[14].selector = @selector(afterParentInit);
  methods[15].selector = @selector(isAfterParentInitRequired);
  methods[16].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(addViewToCircularFlowWithInt:withInt:withFloat:);
  methods[18].selector = @selector(updateAngleWithInt:withFloat:);
  methods[19].selector = @selector(updateRadiusWithInt:withInt:);
  methods[20].selector = @selector(updateReferenceWithInt:withInt:withFloat:);
  methods[21].selector = @selector(asNativeWidget);
  methods[22].selector = @selector(checkIosVersionWithNSString:);
  methods[23].selector = @selector(setIdWithNSString:);
  methods[24].selector = @selector(requestLayout);
  methods[25].selector = @selector(invalidate);
  methods[26].selector = @selector(getPluginWithNSString:);
  methods[27].selector = @selector(getBean);
  methods[28].selector = @selector(getBuilder);
  methods[29].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[30].selector = @selector(nativeRequestLayout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 29, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 30, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "circularFlow_", "LADXCircularFlow;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "builder_", "LASCircularFlowImpl_CircularFlowCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASCircularFlowImpl_CircularFlowBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setConstraintReferenced_ids", "LNSObject;", "setViewCenter", "setAngles", "setRadiusInDP", "postSetAttribute", "addViewToCircularFlow", "IIF", "updateAngle", "IF", "updateRadius", "updateReference", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", &ASCircularFlowImpl_LOCAL_NAME, &ASCircularFlowImpl_GROUP_NAME, "LASCircularFlowImpl_CircularFlowExt;LASCircularFlowImpl_CircularFlowCommandBuilder;LASCircularFlowImpl_CircularFlowBean;" };
  static const J2ObjcClassInfo _ASCircularFlowImpl = { "CircularFlowImpl", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 31, 6, -1, 31, -1, -1, -1 };
  return &_ASCircularFlowImpl;
}

+ (void)initialize {
  if (self == [ASCircularFlowImpl class]) {
    {
      ASConverterFactory_register__WithNSString_withASIConverter_(@"CircularFlowImpl.constraintReferencedIds", new_ASConstraintReferencedIdsConverter_init());
    }
    J2OBJC_SET_INITIALIZED(ASCircularFlowImpl)
  }
}

@end

void ASCircularFlowImpl_init(ASCircularFlowImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASCircularFlowImpl_GROUP_NAME, ASCircularFlowImpl_LOCAL_NAME);
}

ASCircularFlowImpl *new_ASCircularFlowImpl_init() {
  J2OBJC_NEW_IMPL(ASCircularFlowImpl, init)
}

ASCircularFlowImpl *create_ASCircularFlowImpl_init() {
  J2OBJC_CREATE_IMPL(ASCircularFlowImpl, init)
}

void ASCircularFlowImpl_setWidgetOnNativeClass(ASCircularFlowImpl *self) {
  ((ASUIView*) self.uiView).widget = self;
}

void ASCircularFlowImpl_setConstraintReferenced_idsWithId_(ASCircularFlowImpl *self, id objValue) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) setReferencedIdsWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class])];
}

id ASCircularFlowImpl_getConstraintReferencedIds(ASCircularFlowImpl *self) {
  return [((ADXCircularFlow *) nil_chk(self->circularFlow_)) getReferencedIds];
}

void ASCircularFlowImpl_setViewCenterWithId_(ASCircularFlowImpl *self, id objValue) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) setViewCenterWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASCircularFlowImpl_setAnglesWithId_(ASCircularFlowImpl *self, id objValue) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) setMyAnglesWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASCircularFlowImpl_setRadiusInDPWithId_(ASCircularFlowImpl *self, id objValue) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) setMyRadiusWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASCircularFlowImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASCircularFlowImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"circularflow_defaultRadius", @"circularflow_defaultAngle" }, 2)) {
    case 0:
    [((ADXCircularFlow *) nil_chk(self->circularFlow_)) setReferenceDefaultRadiusWithJavaLangInteger:(JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class])];
    break;
    case 1:
    [((ADXCircularFlow *) nil_chk(self->circularFlow_)) setReferenceDefaultAngleWithJavaLangFloat:(JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])];
    break;
  }
  if ([self isInitialised]) {
    [((ADXCircularFlow *) nil_chk(self->circularFlow_)) onAttachedToWindow];
  }
}

void ASCircularFlowImpl_addViewToCircularFlowWithInt_withInt_withFloat_(ASCircularFlowImpl *self, jint viewId, jint radius, jfloat angle) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) addViewToCircularFlowWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASHasWidgets>) nil_chk([self getParent])) findWidgetByIdWithNSString:ASIdGenerator_getNameWithInt_(viewId)])) asWidget], [ADView class]) withInt:radius withFloat:angle];
}

void ASCircularFlowImpl_updateAngleWithInt_withFloat_(ASCircularFlowImpl *self, jint viewId, jfloat angle) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) updateAngleWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASHasWidgets>) nil_chk([self getParent])) findWidgetByIdWithNSString:ASIdGenerator_getNameWithInt_(viewId)])) asWidget], [ADView class]) withFloat:angle];
}

void ASCircularFlowImpl_updateRadiusWithInt_withInt_(ASCircularFlowImpl *self, jint viewId, jint radius) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) updateRadiusWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASHasWidgets>) nil_chk([self getParent])) findWidgetByIdWithNSString:ASIdGenerator_getNameWithInt_(viewId)])) asWidget], [ADView class]) withInt:radius];
}

void ASCircularFlowImpl_updateReferenceWithInt_withInt_withFloat_(ASCircularFlowImpl *self, jint viewId, jint radius, jfloat angle) {
  [((ADXCircularFlow *) nil_chk(self->circularFlow_)) updateReferenceWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk([((id<ASHasWidgets>) nil_chk([self getParent])) findWidgetByIdWithNSString:ASIdGenerator_getNameWithInt_(viewId)])) asWidget], [ADView class]) withInt:radius withFloat:angle];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCircularFlowImpl)

@implementation ASCircularFlowImpl_CircularFlowExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASCircularFlowImpl:(ASCircularFlowImpl *)outer$ {
  ASCircularFlowImpl_CircularFlowExt_initWithASCircularFlowImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASCircularFlowImpl_CircularFlowExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASCircularFlowImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCircularFlowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASCircularFlowImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASCircularFlowImpl_CircularFlowExt = { "CircularFlowExt", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASCircularFlowImpl_CircularFlowExt;
}

@end

void ASCircularFlowImpl_CircularFlowExt_initWithASCircularFlowImpl_(ASCircularFlowImpl_CircularFlowExt *self, ASCircularFlowImpl *outer$) {
  self->this$0_ = outer$;
  ADXCircularFlow_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASCircularFlowImpl_CircularFlowExt *new_ASCircularFlowImpl_CircularFlowExt_initWithASCircularFlowImpl_(ASCircularFlowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASCircularFlowImpl_CircularFlowExt, initWithASCircularFlowImpl_, outer$)
}

ASCircularFlowImpl_CircularFlowExt *create_ASCircularFlowImpl_CircularFlowExt_initWithASCircularFlowImpl_(ASCircularFlowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASCircularFlowImpl_CircularFlowExt, initWithASCircularFlowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCircularFlowImpl_CircularFlowExt)

@implementation ASCircularFlowImpl_CircularFlowCommandBuilder

- (instancetype)initWithASCircularFlowImpl:(ASCircularFlowImpl *)outer$ {
  ASCircularFlowImpl_CircularFlowCommandBuilder_initWithASCircularFlowImpl_(self, outer$);
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)setCircularflow_radiusInDPWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"circularflow_radiusInDP"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)setCircularflow_anglesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"circularflow_angles"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)setCircularflow_viewCenterWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"circularflow_viewCenter"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)setCircularflow_defaultRadiusWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"circularflow_defaultRadius"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)setCircularflow_defaultAngleWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"circularflow_defaultAngle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)tryGetConstraint_referenced_ids {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getConstraint_referenced_ids {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)setConstraint_referenced_idsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)addViewToCircularFlowWithNSString:(NSString *)viewId
                                                                             withInt:(jint)radius
                                                                           withFloat:(jfloat)angle {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"addViewToCircularFlow"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"viewId" withId:viewId];
  (void) [wrapper putWithId:@"radius" withId:JavaLangInteger_valueOfWithInt_(radius)];
  (void) [wrapper putWithId:@"angle" withId:JavaLangFloat_valueOfWithFloat_(angle)];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)updateReferenceWithNSString:(NSString *)viewId
                                                                       withInt:(jint)radius
                                                                     withFloat:(jfloat)angle {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"updateReference"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"viewId" withId:viewId];
  (void) [wrapper putWithId:@"radius" withId:JavaLangInteger_valueOfWithInt_(radius)];
  (void) [wrapper putWithId:@"angle" withId:JavaLangFloat_valueOfWithFloat_(angle)];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)updateRadiusWithNSString:(NSString *)viewId
                                                                    withInt:(jint)radius {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"updateRadius"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"viewId" withId:viewId];
  (void) [wrapper putWithId:@"radius" withId:JavaLangInteger_valueOfWithInt_(radius)];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (ASCircularFlowImpl_CircularFlowCommandBuilder *)updateAngleWithNSString:(NSString *)viewId
                                                                 withFloat:(jfloat)angle {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"updateAngle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"viewId" withId:viewId];
  (void) [wrapper putWithId:@"angle" withId:JavaLangFloat_valueOfWithFloat_(angle)];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 13, 12, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LASCircularFlowImpl_CircularFlowCommandBuilder;", 0x1, 16, 17, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASCircularFlowImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setCircularflow_radiusInDPWithNSString:);
  methods[3].selector = @selector(setCircularflow_anglesWithNSString:);
  methods[4].selector = @selector(setCircularflow_viewCenterWithNSString:);
  methods[5].selector = @selector(setCircularflow_defaultRadiusWithNSString:);
  methods[6].selector = @selector(setCircularflow_defaultAngleWithFloat:);
  methods[7].selector = @selector(tryGetConstraint_referenced_ids);
  methods[8].selector = @selector(getConstraint_referenced_ids);
  methods[9].selector = @selector(setConstraint_referenced_idsWithNSString:);
  methods[10].selector = @selector(addViewToCircularFlowWithNSString:withInt:withFloat:);
  methods[11].selector = @selector(updateReferenceWithNSString:withInt:withFloat:);
  methods[12].selector = @selector(updateRadiusWithNSString:withInt:);
  methods[13].selector = @selector(updateAngleWithNSString:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCircularFlowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASCircularFlowImpl;", "execute", "Z", "setCircularflow_radiusInDP", "LNSString;", "setCircularflow_angles", "setCircularflow_viewCenter", "setCircularflow_defaultRadius", "setCircularflow_defaultAngle", "F", "setConstraint_referenced_ids", "addViewToCircularFlow", "LNSString;IF", "updateReference", "updateRadius", "LNSString;I", "updateAngle", "LNSString;F", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/constraintlayout/CircularFlowImpl$CircularFlowCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASCircularFlowImpl_CircularFlowCommandBuilder = { "CircularFlowCommandBuilder", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 14, 1, 0, -1, -1, 18, -1 };
  return &_ASCircularFlowImpl_CircularFlowCommandBuilder;
}

@end

void ASCircularFlowImpl_CircularFlowCommandBuilder_initWithASCircularFlowImpl_(ASCircularFlowImpl_CircularFlowCommandBuilder *self, ASCircularFlowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASCircularFlowImpl_CircularFlowCommandBuilder *new_ASCircularFlowImpl_CircularFlowCommandBuilder_initWithASCircularFlowImpl_(ASCircularFlowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASCircularFlowImpl_CircularFlowCommandBuilder, initWithASCircularFlowImpl_, outer$)
}

ASCircularFlowImpl_CircularFlowCommandBuilder *create_ASCircularFlowImpl_CircularFlowCommandBuilder_initWithASCircularFlowImpl_(ASCircularFlowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASCircularFlowImpl_CircularFlowCommandBuilder, initWithASCircularFlowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCircularFlowImpl_CircularFlowCommandBuilder)

@implementation ASCircularFlowImpl_CircularFlowBean

- (instancetype)initWithASCircularFlowImpl:(ASCircularFlowImpl *)outer$ {
  ASCircularFlowImpl_CircularFlowBean_initWithASCircularFlowImpl_(self, outer$);
  return self;
}

- (void)setCircularflow_radiusInDPWithNSString:(NSString *)value {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCircularflow_radiusInDPWithNSString:value])) executeWithBoolean:true];
}

- (void)setCircularflow_anglesWithNSString:(NSString *)value {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCircularflow_anglesWithNSString:value])) executeWithBoolean:true];
}

- (void)setCircularflow_viewCenterWithNSString:(NSString *)value {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCircularflow_viewCenterWithNSString:value])) executeWithBoolean:true];
}

- (void)setCircularflow_defaultRadiusWithNSString:(NSString *)value {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCircularflow_defaultRadiusWithNSString:value])) executeWithBoolean:true];
}

- (void)setCircularflow_defaultAngleWithFloat:(jfloat)value {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCircularflow_defaultAngleWithFloat:value])) executeWithBoolean:true];
}

- (id)getConstraint_referenced_ids {
  return [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetConstraint_referenced_ids])) executeWithBoolean:false])) getConstraint_referenced_ids];
}

- (void)setConstraint_referenced_idsWithNSString:(NSString *)value {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setConstraint_referenced_idsWithNSString:value])) executeWithBoolean:true];
}

- (void)addViewToCircularFlowWithNSString:(NSString *)viewId
                                  withInt:(jint)radius
                                withFloat:(jfloat)angle {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) addViewToCircularFlowWithNSString:viewId withInt:radius withFloat:angle])) executeWithBoolean:true];
}

- (void)updateReferenceWithNSString:(NSString *)viewId
                            withInt:(jint)radius
                          withFloat:(jfloat)angle {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) updateReferenceWithNSString:viewId withInt:radius withFloat:angle])) executeWithBoolean:true];
}

- (void)updateRadiusWithNSString:(NSString *)viewId
                         withInt:(jint)radius {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) updateRadiusWithNSString:viewId withInt:radius])) executeWithBoolean:true];
}

- (void)updateAngleWithNSString:(NSString *)viewId
                      withFloat:(jfloat)angle {
  (void) [((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([((ASCircularFlowImpl_CircularFlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) updateAngleWithNSString:viewId withFloat:angle])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASCircularFlowImpl:);
  methods[1].selector = @selector(setCircularflow_radiusInDPWithNSString:);
  methods[2].selector = @selector(setCircularflow_anglesWithNSString:);
  methods[3].selector = @selector(setCircularflow_viewCenterWithNSString:);
  methods[4].selector = @selector(setCircularflow_defaultRadiusWithNSString:);
  methods[5].selector = @selector(setCircularflow_defaultAngleWithFloat:);
  methods[6].selector = @selector(getConstraint_referenced_ids);
  methods[7].selector = @selector(setConstraint_referenced_idsWithNSString:);
  methods[8].selector = @selector(addViewToCircularFlowWithNSString:withInt:withFloat:);
  methods[9].selector = @selector(updateReferenceWithNSString:withInt:withFloat:);
  methods[10].selector = @selector(updateRadiusWithNSString:withInt:);
  methods[11].selector = @selector(updateAngleWithNSString:withFloat:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCircularFlowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASCircularFlowImpl;", "setCircularflow_radiusInDP", "LNSString;", "setCircularflow_angles", "setCircularflow_viewCenter", "setCircularflow_defaultRadius", "setCircularflow_defaultAngle", "F", "setConstraint_referenced_ids", "addViewToCircularFlow", "LNSString;IF", "updateReference", "updateRadius", "LNSString;I", "updateAngle", "LNSString;F" };
  static const J2ObjcClassInfo _ASCircularFlowImpl_CircularFlowBean = { "CircularFlowBean", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 12, 1, 0, -1, -1, -1, -1 };
  return &_ASCircularFlowImpl_CircularFlowBean;
}

@end

void ASCircularFlowImpl_CircularFlowBean_initWithASCircularFlowImpl_(ASCircularFlowImpl_CircularFlowBean *self, ASCircularFlowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASCircularFlowImpl_CircularFlowBean *new_ASCircularFlowImpl_CircularFlowBean_initWithASCircularFlowImpl_(ASCircularFlowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASCircularFlowImpl_CircularFlowBean, initWithASCircularFlowImpl_, outer$)
}

ASCircularFlowImpl_CircularFlowBean *create_ASCircularFlowImpl_CircularFlowBean_initWithASCircularFlowImpl_(ASCircularFlowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASCircularFlowImpl_CircularFlowBean, initWithASCircularFlowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCircularFlowImpl_CircularFlowBean)
