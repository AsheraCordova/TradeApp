//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\bus\CompositeHandler.java
//

#include "CompositeHandler.h"
#include "EventBusHandler.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"

@protocol JavaUtilList;


@interface ASCompositeHandler () {
 @public
  id<ASEventBusHandler_OnCompletedListener> _listener_;
  id<JavaUtilList> _handlers_;
  id<ASEventBusHandler_OnCompletedListener> _accumulator_;
}

@end

J2OBJC_FIELD_SETTER(ASCompositeHandler, _listener_, id<ASEventBusHandler_OnCompletedListener>)
J2OBJC_FIELD_SETTER(ASCompositeHandler, _handlers_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASCompositeHandler, _accumulator_, id<ASEventBusHandler_OnCompletedListener>)

@interface ASCompositeHandler_AccumulatingListener : NSObject < ASEventBusHandler_OnCompletedListener > {
 @public
  __unsafe_unretained ASCompositeHandler *this$0_;
  jint _size_;
  jint _accumulated_;
}

- (instancetype)initWithASCompositeHandler:(ASCompositeHandler *)outer$;

- (void)onCompleted;

@end

J2OBJC_EMPTY_STATIC_INIT(ASCompositeHandler_AccumulatingListener)

__attribute__((unused)) static void ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(ASCompositeHandler_AccumulatingListener *self, ASCompositeHandler *outer$);

__attribute__((unused)) static ASCompositeHandler_AccumulatingListener *new_ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(ASCompositeHandler *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASCompositeHandler_AccumulatingListener *create_ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(ASCompositeHandler *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASCompositeHandler_AccumulatingListener)

@implementation ASCompositeHandler

- (instancetype)initWithNSString:(NSString *)type
      withASEventBusHandlerArray:(IOSObjectArray *)handlers {
  ASCompositeHandler_initWithNSString_withASEventBusHandlerArray_(self, type, handlers);
  return self;
}

- (void)addWithASEventBusHandlerArray:(IOSObjectArray *)handler {
  [((id<JavaUtilList>) nil_chk(_handlers_)) addAllWithJavaUtilCollection:JavaUtilArrays_asListWithNSObjectArray_(handler)];
}

- (void)clearWithASEventBusHandler:(ASEventBusHandler *)handler {
  [((id<JavaUtilList>) nil_chk(_handlers_)) clear];
}

- (void)performWithId:(id)payload
withASEventBusHandler_OnCompletedListener:(id<ASEventBusHandler_OnCompletedListener>)listener {
  JreStrongAssign(&self->_listener_, listener);
  JreStrongAssignAndConsume(&self->_accumulator_, new_ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(self));
  [self doPerformWithId:payload];
}

- (void)doPerformWithId:(id)payload {
  for (ASEventBusHandler * __strong handler in nil_chk(_handlers_)) [((ASEventBusHandler *) nil_chk(handler)) performWithId:payload withASEventBusHandler_OnCompletedListener:self->_accumulator_];
}

- (void)removeWithASEventBusHandler:(ASEventBusHandler *)eventBusHandler {
  [((id<JavaUtilList>) nil_chk(_handlers_)) removeWithId:eventBusHandler];
}

- (id<JavaUtilList>)getHandlers {
  return _handlers_;
}

- (void)dealloc {
  RELEASE_(_listener_);
  RELEASE_(_handlers_);
  RELEASE_(_accumulator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x81, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:withASEventBusHandlerArray:);
  methods[1].selector = @selector(addWithASEventBusHandlerArray:);
  methods[2].selector = @selector(clearWithASEventBusHandler:);
  methods[3].selector = @selector(performWithId:withASEventBusHandler_OnCompletedListener:);
  methods[4].selector = @selector(doPerformWithId:);
  methods[5].selector = @selector(removeWithASEventBusHandler:);
  methods[6].selector = @selector(getHandlers);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "_listener_", "LASEventBusHandler_OnCompletedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_handlers_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "_accumulator_", "LASEventBusHandler_OnCompletedListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;[LASEventBusHandler;", "add", "[LASEventBusHandler;", "clear", "LASEventBusHandler;", "perform", "LNSObject;LASEventBusHandler_OnCompletedListener;", "doPerform", "LNSObject;", "remove", "()Ljava/util/List<Lcom/ashera/widget/bus/EventBusHandler;>;", "Ljava/util/List<Lcom/ashera/widget/bus/EventBusHandler;>;", "LASCompositeHandler_AccumulatingListener;" };
  static const J2ObjcClassInfo _ASCompositeHandler = { "CompositeHandler", "com.ashera.widget.bus", ptrTable, methods, fields, 7, 0x1, 7, 3, -1, 12, -1, -1, -1 };
  return &_ASCompositeHandler;
}

@end

void ASCompositeHandler_initWithNSString_withASEventBusHandlerArray_(ASCompositeHandler *self, NSString *type, IOSObjectArray *handlers) {
  ASEventBusHandler_initWithNSString_(self, type);
  JreStrongAssignAndConsume(&self->_handlers_, new_JavaUtilArrayList_init());
  [self addWithASEventBusHandlerArray:handlers];
}

ASCompositeHandler *new_ASCompositeHandler_initWithNSString_withASEventBusHandlerArray_(NSString *type, IOSObjectArray *handlers) {
  J2OBJC_NEW_IMPL(ASCompositeHandler, initWithNSString_withASEventBusHandlerArray_, type, handlers)
}

ASCompositeHandler *create_ASCompositeHandler_initWithNSString_withASEventBusHandlerArray_(NSString *type, IOSObjectArray *handlers) {
  J2OBJC_CREATE_IMPL(ASCompositeHandler, initWithNSString_withASEventBusHandlerArray_, type, handlers)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCompositeHandler)

@implementation ASCompositeHandler_AccumulatingListener

- (instancetype)initWithASCompositeHandler:(ASCompositeHandler *)outer$ {
  ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(self, outer$);
  return self;
}

- (void)onCompleted {
  ++_accumulated_;
  if (_accumulated_ >= _size_) [this$0_ completedWithASEventBusHandler_OnCompletedListener:this$0_->_listener_];
}

- (void)__javaClone:(ASCompositeHandler_AccumulatingListener *)original {
  [super __javaClone:original];
  [this$0_ release];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASCompositeHandler:);
  methods[1].selector = @selector(onCompleted);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASCompositeHandler;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "_size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "_accumulated_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASCompositeHandler;" };
  static const J2ObjcClassInfo _ASCompositeHandler_AccumulatingListener = { "AccumulatingListener", "com.ashera.widget.bus", ptrTable, methods, fields, 7, 0x2, 2, 3, 0, -1, -1, -1, -1 };
  return &_ASCompositeHandler_AccumulatingListener;
}

@end

void ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(ASCompositeHandler_AccumulatingListener *self, ASCompositeHandler *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->_size_ = [((id<JavaUtilList>) nil_chk(outer$->_handlers_)) size];
  self->_accumulated_ = 0;
}

ASCompositeHandler_AccumulatingListener *new_ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(ASCompositeHandler *outer$) {
  J2OBJC_NEW_IMPL(ASCompositeHandler_AccumulatingListener, initWithASCompositeHandler_, outer$)
}

ASCompositeHandler_AccumulatingListener *create_ASCompositeHandler_AccumulatingListener_initWithASCompositeHandler_(ASCompositeHandler *outer$) {
  J2OBJC_CREATE_IMPL(ASCompositeHandler_AccumulatingListener, initWithASCompositeHandler_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCompositeHandler_AccumulatingListener)
