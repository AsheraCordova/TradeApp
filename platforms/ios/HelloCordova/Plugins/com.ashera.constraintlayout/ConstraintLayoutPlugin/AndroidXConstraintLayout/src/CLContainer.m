//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\parser\CLContainer.java
//

#include "CLArray.h"
#include "CLContainer.h"
#include "CLElement.h"
#include "CLKey.h"
#include "CLNumber.h"
#include "CLObject.h"
#include "CLParser.h"
#include "CLParsingException.h"
#include "CLString.h"
#include "CLToken.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/PrintStream.h"
#include "java/lang/Float.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"


@implementation ADXCLContainer

- (instancetype)initWithCharArray:(IOSCharArray *)content {
  ADXCLContainer_initWithCharArray_(self, content);
  return self;
}

+ (ADXCLElement *)allocateWithCharArray:(IOSCharArray *)content {
  return ADXCLContainer_allocateWithCharArray_(content);
}

- (void)addWithADXCLElement:(ADXCLElement *)element {
  [((JavaUtilArrayList *) nil_chk(mElements_)) addWithId:element];
  if (JreLoadStatic(ADXCLParser, DEBUG)) {
    [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$@$@", @"added element ", element, @" to ", self)];
  }
}

- (NSString *)description {
  JavaLangStringBuilder *list = create_JavaLangStringBuilder_init();
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    if ([list java_length] > 0) {
      [list appendWithNSString:@"; "];
    }
    [list appendWithId:element];
  }
  return JreStrcat("$$@$", [super description], @" = <", list, @" >");
}

- (jint)size {
  return [((JavaUtilArrayList *) nil_chk(mElements_)) size];
}

- (JavaUtilArrayList *)names {
  JavaUtilArrayList *names = create_JavaUtilArrayList_init();
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    if ([element isKindOfClass:[ADXCLKey class]]) {
      ADXCLKey *key = (ADXCLKey *) element;
      [names addWithId:[((ADXCLKey *) nil_chk(key)) content]];
    }
  }
  return names;
}

- (jboolean)hasWithNSString:(NSString *)name {
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    if ([element isKindOfClass:[ADXCLKey class]]) {
      ADXCLKey *key = (ADXCLKey *) element;
      if ([((NSString *) nil_chk([((ADXCLKey *) nil_chk(key)) content])) isEqual:name]) {
        return true;
      }
    }
  }
  return false;
}

- (void)putWithNSString:(NSString *)name
       withADXCLElement:(ADXCLElement *)value {
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    ADXCLKey *key = (ADXCLKey *) cast_chk(element, [ADXCLKey class]);
    if ([((NSString *) nil_chk([((ADXCLKey *) nil_chk(key)) content])) isEqual:name]) {
      [key setWithADXCLElement:value];
      return;
    }
  }
  ADXCLKey *key = (ADXCLKey *) cast_chk(ADXCLKey_allocateWithNSString_withADXCLElement_(name, value), [ADXCLKey class]);
  [((JavaUtilArrayList *) nil_chk(mElements_)) addWithId:key];
}

- (void)putNumberWithNSString:(NSString *)name
                    withFloat:(jfloat)value {
  [self putWithNSString:name withADXCLElement:create_ADXCLNumber_initWithFloat_(value)];
}

- (void)removeWithNSString:(NSString *)name {
  JavaUtilArrayList *toRemove = create_JavaUtilArrayList_init();
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    ADXCLKey *key = (ADXCLKey *) cast_chk(element, [ADXCLKey class]);
    if ([((NSString *) nil_chk([((ADXCLKey *) nil_chk(key)) content])) isEqual:name]) {
      [toRemove addWithId:element];
    }
  }
  for (ADXCLElement * __strong element in toRemove) {
    [((JavaUtilArrayList *) nil_chk(mElements_)) removeWithId:element];
  }
}

- (ADXCLElement *)getWithNSString:(NSString *)name {
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    ADXCLKey *key = (ADXCLKey *) cast_chk(element, [ADXCLKey class]);
    if ([((NSString *) nil_chk([((ADXCLKey *) nil_chk(key)) content])) isEqual:name]) {
      return [key getValue];
    }
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$C", @"no element for key <", name, '>'), self);
}

- (jint)getIntWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getWithNSString:name]);
  if (element != nil) {
    return [element getInt];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$$$$@", @"no int found for key <", name, @">, found [", [((ADXCLElement *) nil_chk(element)) getStrClass], @"] : ", element), self);
}

- (jfloat)getFloatWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getWithNSString:name]);
  if (element != nil) {
    return [element getFloat];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$$$$@", @"no float found for key <", name, @">, found [", [((ADXCLElement *) nil_chk(element)) getStrClass], @"] : ", element), self);
}

- (ADXCLArray *)getArrayWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getWithNSString:name]);
  if ([element isKindOfClass:[ADXCLArray class]]) {
    return (ADXCLArray *) element;
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$$$$@", @"no array found for key <", name, @">, found [", [((ADXCLElement *) nil_chk(element)) getStrClass], @"] : ", element), self);
}

- (ADXCLObject *)getObjectWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getWithNSString:name]);
  if ([element isKindOfClass:[ADXCLObject class]]) {
    return (ADXCLObject *) element;
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$$$$@", @"no object found for key <", name, @">, found [", [((ADXCLElement *) nil_chk(element)) getStrClass], @"] : ", element), self);
}

- (NSString *)getStringWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getWithNSString:name]);
  if ([element isKindOfClass:[ADXCLString class]]) {
    return [((ADXCLElement *) nil_chk(element)) content];
  }
  NSString *strClass = nil;
  if (element != nil) {
    strClass = [element getStrClass];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$$$$@", @"no string found for key <", name, @">, found [", strClass, @"] : ", element), self);
}

- (jboolean)getBooleanWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getWithNSString:name]);
  if ([element isKindOfClass:[ADXCLToken class]]) {
    return [((ADXCLToken *) nil_chk(((ADXCLToken *) element))) getBoolean];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$$$$$@", @"no boolean found for key <", name, @">, found [", [((ADXCLElement *) nil_chk(element)) getStrClass], @"] : ", element), self);
}

- (ADXCLElement *)getOrNullWithNSString:(NSString *)name {
  for (ADXCLElement * __strong element in nil_chk(mElements_)) {
    ADXCLKey *key = (ADXCLKey *) cast_chk(element, [ADXCLKey class]);
    if ([((NSString *) nil_chk([((ADXCLKey *) nil_chk(key)) content])) isEqual:name]) {
      return [key getValue];
    }
  }
  return nil;
}

- (ADXCLObject *)getObjectOrNullWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getOrNullWithNSString:name]);
  if ([element isKindOfClass:[ADXCLObject class]]) {
    return (ADXCLObject *) element;
  }
  return nil;
}

- (ADXCLArray *)getArrayOrNullWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getOrNullWithNSString:name]);
  if ([element isKindOfClass:[ADXCLArray class]]) {
    return (ADXCLArray *) element;
  }
  return nil;
}

- (NSString *)getStringOrNullWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getOrNullWithNSString:name]);
  if ([element isKindOfClass:[ADXCLString class]]) {
    return [((ADXCLElement *) nil_chk(element)) content];
  }
  return nil;
}

- (jfloat)getFloatOrNaNWithNSString:(NSString *)name {
  ADXCLElement *element = JreRetainedLocalValue([self getOrNullWithNSString:name]);
  if ([element isKindOfClass:[ADXCLNumber class]]) {
    return [((ADXCLElement *) nil_chk(element)) getFloat];
  }
  return JavaLangFloat_NaN;
}

- (ADXCLElement *)getWithInt:(jint)index {
  if (index >= 0 && index < [((JavaUtilArrayList *) nil_chk(mElements_)) size]) {
    return [((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:index];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no element at index ", index), self);
}

- (jint)getIntWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getWithInt:index]);
  if (element != nil) {
    return [element getInt];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no int at index ", index), self);
}

- (jfloat)getFloatWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getWithInt:index]);
  if (element != nil) {
    return [element getFloat];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no float at index ", index), self);
}

- (ADXCLArray *)getArrayWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getWithInt:index]);
  if ([element isKindOfClass:[ADXCLArray class]]) {
    return (ADXCLArray *) element;
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no array at index ", index), self);
}

- (ADXCLObject *)getObjectWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getWithInt:index]);
  if ([element isKindOfClass:[ADXCLObject class]]) {
    return (ADXCLObject *) element;
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no object at index ", index), self);
}

- (NSString *)getStringWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getWithInt:index]);
  if ([element isKindOfClass:[ADXCLString class]]) {
    return [((ADXCLElement *) nil_chk(element)) content];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no string at index ", index), self);
}

- (jboolean)getBooleanWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getWithInt:index]);
  if ([element isKindOfClass:[ADXCLToken class]]) {
    return [((ADXCLToken *) nil_chk(((ADXCLToken *) element))) getBoolean];
  }
  @throw create_ADXCLParsingException_initWithNSString_withADXCLElement_(JreStrcat("$I", @"no boolean at index ", index), self);
}

- (ADXCLElement *)getOrNullWithInt:(jint)index {
  if (index >= 0 && index < [((JavaUtilArrayList *) nil_chk(mElements_)) size]) {
    return [((JavaUtilArrayList *) nil_chk(mElements_)) getWithInt:index];
  }
  return nil;
}

- (NSString *)getStringOrNullWithInt:(jint)index {
  ADXCLElement *element = JreRetainedLocalValue([self getOrNullWithInt:index]);
  if ([element isKindOfClass:[ADXCLString class]]) {
    return [((ADXCLElement *) nil_chk(element)) content];
  }
  return nil;
}

- (void)dealloc {
  RELEASE_(mElements_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x9, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilArrayList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x1, 13, 7, 14, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 7, 14, -1, -1, -1 },
    { NULL, "F", 0x1, 16, 7, 14, -1, -1, -1 },
    { NULL, "LADXCLArray;", 0x1, 17, 7, 14, -1, -1, -1 },
    { NULL, "LADXCLObject;", 0x1, 18, 7, 14, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 7, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 7, 14, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x1, 21, 7, -1, -1, -1, -1 },
    { NULL, "LADXCLObject;", 0x1, 22, 7, -1, -1, -1, -1 },
    { NULL, "LADXCLArray;", 0x1, 23, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 7, -1, -1, -1, -1 },
    { NULL, "F", 0x1, 25, 7, -1, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x1, 13, 26, 14, -1, -1, -1 },
    { NULL, "I", 0x1, 15, 26, 14, -1, -1, -1 },
    { NULL, "F", 0x1, 16, 26, 14, -1, -1, -1 },
    { NULL, "LADXCLArray;", 0x1, 17, 26, 14, -1, -1, -1 },
    { NULL, "LADXCLObject;", 0x1, 18, 26, 14, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, 26, 14, -1, -1, -1 },
    { NULL, "Z", 0x1, 20, 26, 14, -1, -1, -1 },
    { NULL, "LADXCLElement;", 0x1, 21, 26, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 24, 26, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithCharArray:);
  methods[1].selector = @selector(allocateWithCharArray:);
  methods[2].selector = @selector(addWithADXCLElement:);
  methods[3].selector = @selector(description);
  methods[4].selector = @selector(size);
  methods[5].selector = @selector(names);
  methods[6].selector = @selector(hasWithNSString:);
  methods[7].selector = @selector(putWithNSString:withADXCLElement:);
  methods[8].selector = @selector(putNumberWithNSString:withFloat:);
  methods[9].selector = @selector(removeWithNSString:);
  methods[10].selector = @selector(getWithNSString:);
  methods[11].selector = @selector(getIntWithNSString:);
  methods[12].selector = @selector(getFloatWithNSString:);
  methods[13].selector = @selector(getArrayWithNSString:);
  methods[14].selector = @selector(getObjectWithNSString:);
  methods[15].selector = @selector(getStringWithNSString:);
  methods[16].selector = @selector(getBooleanWithNSString:);
  methods[17].selector = @selector(getOrNullWithNSString:);
  methods[18].selector = @selector(getObjectOrNullWithNSString:);
  methods[19].selector = @selector(getArrayOrNullWithNSString:);
  methods[20].selector = @selector(getStringOrNullWithNSString:);
  methods[21].selector = @selector(getFloatOrNaNWithNSString:);
  methods[22].selector = @selector(getWithInt:);
  methods[23].selector = @selector(getIntWithInt:);
  methods[24].selector = @selector(getFloatWithInt:);
  methods[25].selector = @selector(getArrayWithInt:);
  methods[26].selector = @selector(getObjectWithInt:);
  methods[27].selector = @selector(getStringWithInt:);
  methods[28].selector = @selector(getBooleanWithInt:);
  methods[29].selector = @selector(getOrNullWithInt:);
  methods[30].selector = @selector(getStringOrNullWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mElements_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 27, -1 },
  };
  static const void *ptrTable[] = { "[C", "allocate", "add", "LADXCLElement;", "toString", "()Ljava/util/ArrayList<Ljava/lang/String;>;", "has", "LNSString;", "put", "LNSString;LADXCLElement;", "putNumber", "LNSString;F", "remove", "get", "LADXCLParsingException;", "getInt", "getFloat", "getArray", "getObject", "getString", "getBoolean", "getOrNull", "getObjectOrNull", "getArrayOrNull", "getStringOrNull", "getFloatOrNaN", "I", "Ljava/util/ArrayList<Landroidx/constraintlayout/core/parser/CLElement;>;" };
  static const J2ObjcClassInfo _ADXCLContainer = { "CLContainer", "androidx.constraintlayout.core.parser", ptrTable, methods, fields, 7, 0x1, 31, 1, -1, -1, -1, -1, -1 };
  return &_ADXCLContainer;
}

@end

void ADXCLContainer_initWithCharArray_(ADXCLContainer *self, IOSCharArray *content) {
  ADXCLElement_initWithCharArray_(self, content);
  JreStrongAssignAndConsume(&self->mElements_, new_JavaUtilArrayList_init());
}

ADXCLContainer *new_ADXCLContainer_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_NEW_IMPL(ADXCLContainer, initWithCharArray_, content)
}

ADXCLContainer *create_ADXCLContainer_initWithCharArray_(IOSCharArray *content) {
  J2OBJC_CREATE_IMPL(ADXCLContainer, initWithCharArray_, content)
}

ADXCLElement *ADXCLContainer_allocateWithCharArray_(IOSCharArray *content) {
  ADXCLContainer_initialize();
  return create_ADXCLContainer_initWithCharArray_(content);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCLContainer)
