//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\text\TextDirectionHeuristics.java
//

#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "TextDirectionHeuristic.h"
#include "TextDirectionHeuristics.h"
#include "TextUtils.h"
#include "View.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/nio/CharBuffer.h"
#include "java/util/Locale.h"

@protocol ADTextDirectionHeuristics_TextDirectionAlgorithm;
@protocol JavaLangCharSequence;


@interface ADTextDirectionHeuristics ()

+ (jint)isRtlCodePointWithInt:(jint)codePoint;

@end

/*!
 @brief State constants for taking care about true / false / unknown
 */
inline jint ADTextDirectionHeuristics_get_STATE_TRUE(void);
#define ADTextDirectionHeuristics_STATE_TRUE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADTextDirectionHeuristics, STATE_TRUE, jint)

inline jint ADTextDirectionHeuristics_get_STATE_FALSE(void);
#define ADTextDirectionHeuristics_STATE_FALSE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTextDirectionHeuristics, STATE_FALSE, jint)

inline jint ADTextDirectionHeuristics_get_STATE_UNKNOWN(void);
#define ADTextDirectionHeuristics_STATE_UNKNOWN 2
J2OBJC_STATIC_FIELD_CONSTANT(ADTextDirectionHeuristics, STATE_UNKNOWN, jint)

__attribute__((unused)) static jint ADTextDirectionHeuristics_isRtlCodePointWithInt_(jint codePoint);

/*!
 @brief Computes the text direction based on an algorithm.Subclasses implement 
 <code>defaultIsRtl</code> to handle cases where the algorithm cannot determine the
  direction from the text alone.
 */
@interface ADTextDirectionHeuristics_TextDirectionHeuristicImpl : NSObject < ADTextDirectionHeuristic > {
 @public
  id<ADTextDirectionHeuristics_TextDirectionAlgorithm> mAlgorithm_;
}

- (instancetype)initWithADTextDirectionHeuristics_TextDirectionAlgorithm:(id<ADTextDirectionHeuristics_TextDirectionAlgorithm>)algorithm;

/*!
 @brief Return true if the default text direction is rtl.
 */
- (jboolean)defaultIsRtl;

- (jboolean)isRtlWithCharArray:(IOSCharArray *)array
                       withInt:(jint)start
                       withInt:(jint)count;

- (jboolean)isRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                  withInt:(jint)start
                                  withInt:(jint)count;

- (jboolean)doCheckWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withInt:(jint)start
                                    withInt:(jint)count;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextDirectionHeuristics_TextDirectionHeuristicImpl)

J2OBJC_FIELD_SETTER(ADTextDirectionHeuristics_TextDirectionHeuristicImpl, mAlgorithm_, id<ADTextDirectionHeuristics_TextDirectionAlgorithm>)

__attribute__((unused)) static void ADTextDirectionHeuristics_TextDirectionHeuristicImpl_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_(ADTextDirectionHeuristics_TextDirectionHeuristicImpl *self, id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm);

__attribute__((unused)) static jboolean ADTextDirectionHeuristics_TextDirectionHeuristicImpl_doCheckWithJavaLangCharSequence_withInt_withInt_(ADTextDirectionHeuristics_TextDirectionHeuristicImpl *self, id<JavaLangCharSequence> cs, jint start, jint count);

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics_TextDirectionHeuristicImpl)

@interface ADTextDirectionHeuristics_TextDirectionHeuristicInternal : ADTextDirectionHeuristics_TextDirectionHeuristicImpl {
 @public
  jboolean mDefaultIsRtl_;
}

- (instancetype)initWithADTextDirectionHeuristics_TextDirectionAlgorithm:(id<ADTextDirectionHeuristics_TextDirectionAlgorithm>)algorithm
                                                             withBoolean:(jboolean)defaultIsRtl;

- (jboolean)defaultIsRtl;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextDirectionHeuristics_TextDirectionHeuristicInternal)

__attribute__((unused)) static void ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(ADTextDirectionHeuristics_TextDirectionHeuristicInternal *self, id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm, jboolean defaultIsRtl);

__attribute__((unused)) static ADTextDirectionHeuristics_TextDirectionHeuristicInternal *new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm, jboolean defaultIsRtl) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADTextDirectionHeuristics_TextDirectionHeuristicInternal *create_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm, jboolean defaultIsRtl);

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics_TextDirectionHeuristicInternal)

/*!
 @brief Interface for an algorithm to guess the direction of a paragraph of text.
 */
@protocol ADTextDirectionHeuristics_TextDirectionAlgorithm < JavaObject >

/*!
 @brief Returns whether the range of text is RTL according to the algorithm.
 */
- (jint)checkRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                 withInt:(jint)start
                                 withInt:(jint)count;

@end

@interface ADTextDirectionHeuristics_TextDirectionAlgorithm : NSObject

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextDirectionHeuristics_TextDirectionAlgorithm)

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics_TextDirectionAlgorithm)

/*!
 @brief Algorithm that uses the first strong directional character to determine the paragraph
  direction.This is the standard Unicode Bidirectional Algorithm (steps P2 and P3), with the
  exception that if no strong character is found, UNKNOWN is returned.
 */
@interface ADTextDirectionHeuristics_FirstStrong : NSObject < ADTextDirectionHeuristics_TextDirectionAlgorithm >

- (jint)checkRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                 withInt:(jint)start
                                 withInt:(jint)count;

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ADTextDirectionHeuristics_FirstStrong)

inline ADTextDirectionHeuristics_FirstStrong *ADTextDirectionHeuristics_FirstStrong_get_INSTANCE(void);
static ADTextDirectionHeuristics_FirstStrong *ADTextDirectionHeuristics_FirstStrong_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics_FirstStrong, INSTANCE, ADTextDirectionHeuristics_FirstStrong *)

__attribute__((unused)) static void ADTextDirectionHeuristics_FirstStrong_init(ADTextDirectionHeuristics_FirstStrong *self);

__attribute__((unused)) static ADTextDirectionHeuristics_FirstStrong *new_ADTextDirectionHeuristics_FirstStrong_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADTextDirectionHeuristics_FirstStrong *create_ADTextDirectionHeuristics_FirstStrong_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics_FirstStrong)

/*!
 @brief Algorithm that uses the presence of any strong directional character of the type indicated
  in the constructor parameter to determine the direction of text.
 Characters inside isolate pairs are skipped.
 */
@interface ADTextDirectionHeuristics_AnyStrong : NSObject < ADTextDirectionHeuristics_TextDirectionAlgorithm > {
 @public
  jboolean mLookForRtl_;
}

- (jint)checkRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                 withInt:(jint)start
                                 withInt:(jint)count;

- (instancetype)initWithBoolean:(jboolean)lookForRtl;

@end

J2OBJC_STATIC_INIT(ADTextDirectionHeuristics_AnyStrong)

inline ADTextDirectionHeuristics_AnyStrong *ADTextDirectionHeuristics_AnyStrong_get_INSTANCE_RTL(void);
static ADTextDirectionHeuristics_AnyStrong *ADTextDirectionHeuristics_AnyStrong_INSTANCE_RTL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics_AnyStrong, INSTANCE_RTL, ADTextDirectionHeuristics_AnyStrong *)

inline ADTextDirectionHeuristics_AnyStrong *ADTextDirectionHeuristics_AnyStrong_get_INSTANCE_LTR(void);
static ADTextDirectionHeuristics_AnyStrong *ADTextDirectionHeuristics_AnyStrong_INSTANCE_LTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics_AnyStrong, INSTANCE_LTR, ADTextDirectionHeuristics_AnyStrong *)

__attribute__((unused)) static void ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(ADTextDirectionHeuristics_AnyStrong *self, jboolean lookForRtl);

__attribute__((unused)) static ADTextDirectionHeuristics_AnyStrong *new_ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(jboolean lookForRtl) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADTextDirectionHeuristics_AnyStrong *create_ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(jboolean lookForRtl);

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics_AnyStrong)

/*!
 @brief Algorithm that uses the Locale direction to force the direction of a paragraph.
 */
@interface ADTextDirectionHeuristics_TextDirectionHeuristicLocale : ADTextDirectionHeuristics_TextDirectionHeuristicImpl

- (instancetype)init;

- (jboolean)defaultIsRtl;

@end

J2OBJC_STATIC_INIT(ADTextDirectionHeuristics_TextDirectionHeuristicLocale)

inline ADTextDirectionHeuristics_TextDirectionHeuristicLocale *ADTextDirectionHeuristics_TextDirectionHeuristicLocale_get_INSTANCE(void);
static ADTextDirectionHeuristics_TextDirectionHeuristicLocale *ADTextDirectionHeuristics_TextDirectionHeuristicLocale_INSTANCE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics_TextDirectionHeuristicLocale, INSTANCE, ADTextDirectionHeuristics_TextDirectionHeuristicLocale *)

__attribute__((unused)) static void ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init(ADTextDirectionHeuristics_TextDirectionHeuristicLocale *self);

__attribute__((unused)) static ADTextDirectionHeuristics_TextDirectionHeuristicLocale *new_ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADTextDirectionHeuristics_TextDirectionHeuristicLocale *create_ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics_TextDirectionHeuristicLocale)

J2OBJC_INITIALIZED_DEFN(ADTextDirectionHeuristics)

id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_LTR;
id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_RTL;
id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_FIRSTSTRONG_LTR;
id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_FIRSTSTRONG_RTL;
id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_ANYRTL_LTR;
id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_LOCALE;

@implementation ADTextDirectionHeuristics

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTextDirectionHeuristics_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)isRtlCodePointWithInt:(jint)codePoint {
  return ADTextDirectionHeuristics_isRtlCodePointWithInt_(codePoint);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isRtlCodePointWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LTR", "LADTextDirectionHeuristic;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
    { "RTL", "LADTextDirectionHeuristic;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "FIRSTSTRONG_LTR", "LADTextDirectionHeuristic;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "FIRSTSTRONG_RTL", "LADTextDirectionHeuristic;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
    { "ANYRTL_LTR", "LADTextDirectionHeuristic;", .constantValue.asLong = 0, 0x19, -1, 6, -1, -1 },
    { "LOCALE", "LADTextDirectionHeuristic;", .constantValue.asLong = 0, 0x19, -1, 7, -1, -1 },
    { "STATE_TRUE", "I", .constantValue.asInt = ADTextDirectionHeuristics_STATE_TRUE, 0x1a, -1, -1, -1, -1 },
    { "STATE_FALSE", "I", .constantValue.asInt = ADTextDirectionHeuristics_STATE_FALSE, 0x1a, -1, -1, -1, -1 },
    { "STATE_UNKNOWN", "I", .constantValue.asInt = ADTextDirectionHeuristics_STATE_UNKNOWN, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isRtlCodePoint", "I", &ADTextDirectionHeuristics_LTR, &ADTextDirectionHeuristics_RTL, &ADTextDirectionHeuristics_FIRSTSTRONG_LTR, &ADTextDirectionHeuristics_FIRSTSTRONG_RTL, &ADTextDirectionHeuristics_ANYRTL_LTR, &ADTextDirectionHeuristics_LOCALE, "LADTextDirectionHeuristics_TextDirectionHeuristicImpl;LADTextDirectionHeuristics_TextDirectionHeuristicInternal;LADTextDirectionHeuristics_TextDirectionAlgorithm;LADTextDirectionHeuristics_FirstStrong;LADTextDirectionHeuristics_AnyStrong;LADTextDirectionHeuristics_TextDirectionHeuristicLocale;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics = { "TextDirectionHeuristics", "r.android.text", ptrTable, methods, fields, 7, 0x1, 2, 9, -1, 8, -1, -1, -1 };
  return &_ADTextDirectionHeuristics;
}

+ (void)initialize {
  if (self == [ADTextDirectionHeuristics class]) {
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_LTR, new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(nil, false));
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_RTL, new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(nil, true));
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_FIRSTSTRONG_LTR, new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(JreLoadStatic(ADTextDirectionHeuristics_FirstStrong, INSTANCE), false));
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_FIRSTSTRONG_RTL, new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(JreLoadStatic(ADTextDirectionHeuristics_FirstStrong, INSTANCE), true));
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_ANYRTL_LTR, new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(JreLoadStatic(ADTextDirectionHeuristics_AnyStrong, INSTANCE_RTL), false));
    JreStrongAssign(&ADTextDirectionHeuristics_LOCALE, JreLoadStatic(ADTextDirectionHeuristics_TextDirectionHeuristicLocale, INSTANCE));
    J2OBJC_SET_INITIALIZED(ADTextDirectionHeuristics)
  }
}

@end

void ADTextDirectionHeuristics_init(ADTextDirectionHeuristics *self) {
  NSObject_init(self);
}

ADTextDirectionHeuristics *new_ADTextDirectionHeuristics_init() {
  J2OBJC_NEW_IMPL(ADTextDirectionHeuristics, init)
}

ADTextDirectionHeuristics *create_ADTextDirectionHeuristics_init() {
  J2OBJC_CREATE_IMPL(ADTextDirectionHeuristics, init)
}

jint ADTextDirectionHeuristics_isRtlCodePointWithInt_(jint codePoint) {
  ADTextDirectionHeuristics_initialize();
  switch (JavaLangCharacter_getDirectionalityWithInt_(codePoint)) {
    case JavaLangCharacter_DIRECTIONALITY_LEFT_TO_RIGHT:
    return ADTextDirectionHeuristics_STATE_FALSE;
    case JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT:
    case JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC:
    return ADTextDirectionHeuristics_STATE_TRUE;
    case JavaLangCharacter_DIRECTIONALITY_UNDEFINED:
    if (((jint) 0x0590 <= codePoint && codePoint <= (jint) 0x08FF) || ((jint) 0xFB1D <= codePoint && codePoint <= (jint) 0xFDCF) || ((jint) 0xFDF0 <= codePoint && codePoint <= (jint) 0xFDFF) || ((jint) 0xFE70 <= codePoint && codePoint <= (jint) 0xFEFF) || ((jint) 0x10800 <= codePoint && codePoint <= (jint) 0x10FFF) || ((jint) 0x1E800 <= codePoint && codePoint <= (jint) 0x1EFFF)) {
      return ADTextDirectionHeuristics_STATE_TRUE;
    }
    else if (((jint) 0x2065 <= codePoint && codePoint <= (jint) 0x2069) || ((jint) 0xFFF0 <= codePoint && codePoint <= (jint) 0xFFF8) || ((jint) 0xE0000 <= codePoint && codePoint <= (jint) 0xE0FFF) || ((jint) 0xFDD0 <= codePoint && codePoint <= (jint) 0xFDEF) || ((codePoint & (jint) 0xFFFE) == (jint) 0xFFFE) || ((jint) 0x20A0 <= codePoint && codePoint <= (jint) 0x20CF) || ((jint) 0xD800 <= codePoint && codePoint <= (jint) 0xDFFF)) {
      return ADTextDirectionHeuristics_STATE_UNKNOWN;
    }
    else {
      return ADTextDirectionHeuristics_STATE_FALSE;
    }
    default:
    return ADTextDirectionHeuristics_STATE_UNKNOWN;
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics)

@implementation ADTextDirectionHeuristics_TextDirectionHeuristicImpl

- (instancetype)initWithADTextDirectionHeuristics_TextDirectionAlgorithm:(id<ADTextDirectionHeuristics_TextDirectionAlgorithm>)algorithm {
  ADTextDirectionHeuristics_TextDirectionHeuristicImpl_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_(self, algorithm);
  return self;
}

- (jboolean)defaultIsRtl {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)isRtlWithCharArray:(IOSCharArray *)array
                       withInt:(jint)start
                       withInt:(jint)count {
  return [self isRtlWithJavaLangCharSequence:JavaNioCharBuffer_wrapWithCharArray_(array) withInt:start withInt:count];
}

- (jboolean)isRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                  withInt:(jint)start
                                  withInt:(jint)count {
  if (cs == nil || start < 0 || count < 0 || [cs java_length] - count < start) {
    @throw create_JavaLangIllegalArgumentException_init();
  }
  if (mAlgorithm_ == nil) {
    return [self defaultIsRtl];
  }
  return ADTextDirectionHeuristics_TextDirectionHeuristicImpl_doCheckWithJavaLangCharSequence_withInt_withInt_(self, cs, start, count);
}

- (jboolean)doCheckWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                    withInt:(jint)start
                                    withInt:(jint)count {
  return ADTextDirectionHeuristics_TextDirectionHeuristicImpl_doCheckWithJavaLangCharSequence_withInt_withInt_(self, cs, start, count);
}

- (void)dealloc {
  RELEASE_(mAlgorithm_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x404, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADTextDirectionHeuristics_TextDirectionAlgorithm:);
  methods[1].selector = @selector(defaultIsRtl);
  methods[2].selector = @selector(isRtlWithCharArray:withInt:withInt:);
  methods[3].selector = @selector(isRtlWithJavaLangCharSequence:withInt:withInt:);
  methods[4].selector = @selector(doCheckWithJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mAlgorithm_", "LADTextDirectionHeuristics_TextDirectionAlgorithm;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADTextDirectionHeuristics_TextDirectionAlgorithm;", "isRtl", "[CII", "LJavaLangCharSequence;II", "doCheck", "LADTextDirectionHeuristics;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics_TextDirectionHeuristicImpl = { "TextDirectionHeuristicImpl", "r.android.text", ptrTable, methods, fields, 7, 0x40a, 5, 1, 5, -1, -1, -1, -1 };
  return &_ADTextDirectionHeuristics_TextDirectionHeuristicImpl;
}

@end

void ADTextDirectionHeuristics_TextDirectionHeuristicImpl_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_(ADTextDirectionHeuristics_TextDirectionHeuristicImpl *self, id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm) {
  NSObject_init(self);
  JreStrongAssign(&self->mAlgorithm_, algorithm);
}

jboolean ADTextDirectionHeuristics_TextDirectionHeuristicImpl_doCheckWithJavaLangCharSequence_withInt_withInt_(ADTextDirectionHeuristics_TextDirectionHeuristicImpl *self, id<JavaLangCharSequence> cs, jint start, jint count) {
  switch ([((id<ADTextDirectionHeuristics_TextDirectionAlgorithm>) nil_chk(self->mAlgorithm_)) checkRtlWithJavaLangCharSequence:cs withInt:start withInt:count]) {
    case ADTextDirectionHeuristics_STATE_TRUE:
    return true;
    case ADTextDirectionHeuristics_STATE_FALSE:
    return false;
    default:
    return [self defaultIsRtl];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics_TextDirectionHeuristicImpl)

@implementation ADTextDirectionHeuristics_TextDirectionHeuristicInternal

- (instancetype)initWithADTextDirectionHeuristics_TextDirectionAlgorithm:(id<ADTextDirectionHeuristics_TextDirectionAlgorithm>)algorithm
                                                             withBoolean:(jboolean)defaultIsRtl {
  ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(self, algorithm, defaultIsRtl);
  return self;
}

- (jboolean)defaultIsRtl {
  return mDefaultIsRtl_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADTextDirectionHeuristics_TextDirectionAlgorithm:withBoolean:);
  methods[1].selector = @selector(defaultIsRtl);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDefaultIsRtl_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADTextDirectionHeuristics_TextDirectionAlgorithm;Z", "LADTextDirectionHeuristics;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics_TextDirectionHeuristicInternal = { "TextDirectionHeuristicInternal", "r.android.text", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_ADTextDirectionHeuristics_TextDirectionHeuristicInternal;
}

@end

void ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(ADTextDirectionHeuristics_TextDirectionHeuristicInternal *self, id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm, jboolean defaultIsRtl) {
  ADTextDirectionHeuristics_TextDirectionHeuristicImpl_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_(self, algorithm);
  self->mDefaultIsRtl_ = defaultIsRtl;
}

ADTextDirectionHeuristics_TextDirectionHeuristicInternal *new_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm, jboolean defaultIsRtl) {
  J2OBJC_NEW_IMPL(ADTextDirectionHeuristics_TextDirectionHeuristicInternal, initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_, algorithm, defaultIsRtl)
}

ADTextDirectionHeuristics_TextDirectionHeuristicInternal *create_ADTextDirectionHeuristics_TextDirectionHeuristicInternal_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_(id<ADTextDirectionHeuristics_TextDirectionAlgorithm> algorithm, jboolean defaultIsRtl) {
  J2OBJC_CREATE_IMPL(ADTextDirectionHeuristics_TextDirectionHeuristicInternal, initWithADTextDirectionHeuristics_TextDirectionAlgorithm_withBoolean_, algorithm, defaultIsRtl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics_TextDirectionHeuristicInternal)

@implementation ADTextDirectionHeuristics_TextDirectionAlgorithm

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkRtlWithJavaLangCharSequence:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "checkRtl", "LJavaLangCharSequence;II", "LADTextDirectionHeuristics;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics_TextDirectionAlgorithm = { "TextDirectionAlgorithm", "r.android.text", ptrTable, methods, NULL, 7, 0x60a, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADTextDirectionHeuristics_TextDirectionAlgorithm;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics_TextDirectionAlgorithm)

J2OBJC_INITIALIZED_DEFN(ADTextDirectionHeuristics_FirstStrong)

@implementation ADTextDirectionHeuristics_FirstStrong

- (jint)checkRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                 withInt:(jint)start
                                 withInt:(jint)count {
  jint result = ADTextDirectionHeuristics_STATE_UNKNOWN;
  jint openIsolateCount = 0;
  for (jint cp, i = start, end = start + count; i < end && result == ADTextDirectionHeuristics_STATE_UNKNOWN; i += JavaLangCharacter_charCountWithInt_(cp)) {
    cp = JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(cs, i);
    if ((jint) 0x2066 <= cp && cp <= (jint) 0x2068) {
      openIsolateCount += 1;
    }
    else if (cp == (jint) 0x2069) {
      if (openIsolateCount > 0) openIsolateCount -= 1;
    }
    else if (openIsolateCount == 0) {
      result = ADTextDirectionHeuristics_isRtlCodePointWithInt_(cp);
    }
  }
  return result;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTextDirectionHeuristics_FirstStrong_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkRtlWithJavaLangCharSequence:withInt:withInt:);
  methods[1].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LADTextDirectionHeuristics_FirstStrong;", .constantValue.asLong = 0, 0x19, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "checkRtl", "LJavaLangCharSequence;II", &ADTextDirectionHeuristics_FirstStrong_INSTANCE, "LADTextDirectionHeuristics;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics_FirstStrong = { "FirstStrong", "r.android.text", ptrTable, methods, fields, 7, 0xa, 2, 1, 3, -1, -1, -1, -1 };
  return &_ADTextDirectionHeuristics_FirstStrong;
}

+ (void)initialize {
  if (self == [ADTextDirectionHeuristics_FirstStrong class]) {
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_FirstStrong_INSTANCE, new_ADTextDirectionHeuristics_FirstStrong_init());
    J2OBJC_SET_INITIALIZED(ADTextDirectionHeuristics_FirstStrong)
  }
}

@end

void ADTextDirectionHeuristics_FirstStrong_init(ADTextDirectionHeuristics_FirstStrong *self) {
  NSObject_init(self);
}

ADTextDirectionHeuristics_FirstStrong *new_ADTextDirectionHeuristics_FirstStrong_init() {
  J2OBJC_NEW_IMPL(ADTextDirectionHeuristics_FirstStrong, init)
}

ADTextDirectionHeuristics_FirstStrong *create_ADTextDirectionHeuristics_FirstStrong_init() {
  J2OBJC_CREATE_IMPL(ADTextDirectionHeuristics_FirstStrong, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics_FirstStrong)

J2OBJC_INITIALIZED_DEFN(ADTextDirectionHeuristics_AnyStrong)

@implementation ADTextDirectionHeuristics_AnyStrong

- (jint)checkRtlWithJavaLangCharSequence:(id<JavaLangCharSequence>)cs
                                 withInt:(jint)start
                                 withInt:(jint)count {
  jboolean haveUnlookedFor = false;
  jint openIsolateCount = 0;
  for (jint cp, i = start, end = start + count; i < end; i += JavaLangCharacter_charCountWithInt_(cp)) {
    cp = JavaLangCharacter_codePointAtWithJavaLangCharSequence_withInt_(cs, i);
    if ((jint) 0x2066 <= cp && cp <= (jint) 0x2068) {
      openIsolateCount += 1;
    }
    else if (cp == (jint) 0x2069) {
      if (openIsolateCount > 0) openIsolateCount -= 1;
    }
    else if (openIsolateCount == 0) {
      switch (ADTextDirectionHeuristics_isRtlCodePointWithInt_(cp)) {
        case ADTextDirectionHeuristics_STATE_TRUE:
        if (mLookForRtl_) {
          return ADTextDirectionHeuristics_STATE_TRUE;
        }
        haveUnlookedFor = true;
        break;
        case ADTextDirectionHeuristics_STATE_FALSE:
        if (!mLookForRtl_) {
          return ADTextDirectionHeuristics_STATE_FALSE;
        }
        haveUnlookedFor = true;
        break;
        default:
        break;
      }
    }
  }
  if (haveUnlookedFor) {
    return mLookForRtl_ ? ADTextDirectionHeuristics_STATE_FALSE : ADTextDirectionHeuristics_STATE_TRUE;
  }
  return ADTextDirectionHeuristics_STATE_UNKNOWN;
}

- (instancetype)initWithBoolean:(jboolean)lookForRtl {
  ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(self, lookForRtl);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(checkRtlWithJavaLangCharSequence:withInt:withInt:);
  methods[1].selector = @selector(initWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLookForRtl_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "INSTANCE_RTL", "LADTextDirectionHeuristics_AnyStrong;", .constantValue.asLong = 0, 0x19, -1, 3, -1, -1 },
    { "INSTANCE_LTR", "LADTextDirectionHeuristics_AnyStrong;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "checkRtl", "LJavaLangCharSequence;II", "Z", &ADTextDirectionHeuristics_AnyStrong_INSTANCE_RTL, &ADTextDirectionHeuristics_AnyStrong_INSTANCE_LTR, "LADTextDirectionHeuristics;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics_AnyStrong = { "AnyStrong", "r.android.text", ptrTable, methods, fields, 7, 0xa, 2, 3, 5, -1, -1, -1, -1 };
  return &_ADTextDirectionHeuristics_AnyStrong;
}

+ (void)initialize {
  if (self == [ADTextDirectionHeuristics_AnyStrong class]) {
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_AnyStrong_INSTANCE_RTL, new_ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(true));
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_AnyStrong_INSTANCE_LTR, new_ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(false));
    J2OBJC_SET_INITIALIZED(ADTextDirectionHeuristics_AnyStrong)
  }
}

@end

void ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(ADTextDirectionHeuristics_AnyStrong *self, jboolean lookForRtl) {
  NSObject_init(self);
  self->mLookForRtl_ = lookForRtl;
}

ADTextDirectionHeuristics_AnyStrong *new_ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(jboolean lookForRtl) {
  J2OBJC_NEW_IMPL(ADTextDirectionHeuristics_AnyStrong, initWithBoolean_, lookForRtl)
}

ADTextDirectionHeuristics_AnyStrong *create_ADTextDirectionHeuristics_AnyStrong_initWithBoolean_(jboolean lookForRtl) {
  J2OBJC_CREATE_IMPL(ADTextDirectionHeuristics_AnyStrong, initWithBoolean_, lookForRtl)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics_AnyStrong)

J2OBJC_INITIALIZED_DEFN(ADTextDirectionHeuristics_TextDirectionHeuristicLocale)

@implementation ADTextDirectionHeuristics_TextDirectionHeuristicLocale

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)defaultIsRtl {
  jint dir = ADTextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(JavaUtilLocale_getDefault());
  return dir == ADView_LAYOUT_DIRECTION_RTL;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(defaultIsRtl);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "INSTANCE", "LADTextDirectionHeuristics_TextDirectionHeuristicLocale;", .constantValue.asLong = 0, 0x19, -1, 0, -1, -1 },
  };
  static const void *ptrTable[] = { &ADTextDirectionHeuristics_TextDirectionHeuristicLocale_INSTANCE, "LADTextDirectionHeuristics;" };
  static const J2ObjcClassInfo _ADTextDirectionHeuristics_TextDirectionHeuristicLocale = { "TextDirectionHeuristicLocale", "r.android.text", ptrTable, methods, fields, 7, 0xa, 2, 1, 1, -1, -1, -1, -1 };
  return &_ADTextDirectionHeuristics_TextDirectionHeuristicLocale;
}

+ (void)initialize {
  if (self == [ADTextDirectionHeuristics_TextDirectionHeuristicLocale class]) {
    JreStrongAssignAndConsume(&ADTextDirectionHeuristics_TextDirectionHeuristicLocale_INSTANCE, new_ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init());
    J2OBJC_SET_INITIALIZED(ADTextDirectionHeuristics_TextDirectionHeuristicLocale)
  }
}

@end

void ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init(ADTextDirectionHeuristics_TextDirectionHeuristicLocale *self) {
  ADTextDirectionHeuristics_TextDirectionHeuristicImpl_initWithADTextDirectionHeuristics_TextDirectionAlgorithm_(self, nil);
}

ADTextDirectionHeuristics_TextDirectionHeuristicLocale *new_ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init() {
  J2OBJC_NEW_IMPL(ADTextDirectionHeuristics_TextDirectionHeuristicLocale, init)
}

ADTextDirectionHeuristics_TextDirectionHeuristicLocale *create_ADTextDirectionHeuristics_TextDirectionHeuristicLocale_init() {
  J2OBJC_CREATE_IMPL(ADTextDirectionHeuristics_TextDirectionHeuristicLocale, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextDirectionHeuristics_TextDirectionHeuristicLocale)
