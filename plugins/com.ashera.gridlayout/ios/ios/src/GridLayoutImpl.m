//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXGridlayoutPlugin\src\main\java\com\ashera\gridlayout\GridLayoutImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "ConverterFactory.h"
#include "Gravity.h"
#include "GridLayout.h"
#include "GridLayoutImpl.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetAttributeMap.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Exception.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/regex/Pattern.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASGridLayoutImpl () {
 @public
  id uiView_;
  ADXGridLayout *gridLayout_;
  ASGridLayoutImpl_GridLayoutCommandBuilder *builder_;
  ASGridLayoutImpl_GridLayoutBean *bean_;
  ASGridLayoutImpl_GridLayoutCommandParamsBuilder *paramsBuilder_;
  ASGridLayoutImpl_GridLayoutParamsBean *paramsBean_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADXGridLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

@end

J2OBJC_FIELD_SETTER(ASGridLayoutImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASGridLayoutImpl, gridLayout_, ADXGridLayout *)
J2OBJC_FIELD_SETTER(ASGridLayoutImpl, builder_, ASGridLayoutImpl_GridLayoutCommandBuilder *)
J2OBJC_FIELD_SETTER(ASGridLayoutImpl, bean_, ASGridLayoutImpl_GridLayoutBean *)
J2OBJC_FIELD_SETTER(ASGridLayoutImpl, paramsBuilder_, ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASGridLayoutImpl, paramsBean_, ASGridLayoutImpl_GridLayoutParamsBean *)

__attribute__((unused)) static void ASGridLayoutImpl_setWidgetOnNativeClass(ASGridLayoutImpl *self);

__attribute__((unused)) static void ASGridLayoutImpl_createLayoutParamsWithADView_(ASGridLayoutImpl *self, ADView *view);

__attribute__((unused)) static ADXGridLayout_LayoutParams *ASGridLayoutImpl_getLayoutParamsWithADView_(ASGridLayoutImpl *self, ADView *view);

@interface ASGridLayoutImpl_AlignmentMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASGridLayoutImpl_AlignmentMode, mapping_, id<JavaUtilMap>)

@interface ASGridLayoutImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASGridLayoutImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASGridLayoutImpl_GridLayoutExt () {
 @public
  __unsafe_unretained ASGridLayoutImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASGridLayoutImpl_GridLayoutExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASGridLayoutImpl_GridLayoutExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASGridLayoutImpl_GridLayoutCommandBuilder () {
 @public
  ASGridLayoutImpl *this$0_;
}

@end

@interface ASGridLayoutImpl_GridLayoutBean () {
 @public
  ASGridLayoutImpl *this$0_;
}

@end

@interface ASGridLayoutImpl_GridLayoutParamsBean () {
 @public
  ASGridLayoutImpl *this$0_;
}

@end

NSString *ASGridLayoutImpl_LOCAL_NAME = @"androidx.gridlayout.widget.GridLayout";
NSString *ASGridLayoutImpl_GROUP_NAME = @"GridLayout";

@implementation ASGridLayoutImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.gridlayout.widget.GridLayout.alignmentMode", new_ASGridLayoutImpl_AlignmentMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"alignmentMode"])) withTypeWithNSString:@"androidx.gridlayout.widget.GridLayout.alignmentMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"columnCount"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"columnOrderPreserved"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.gridlayout.widget.GridLayout.orientation", new_ASGridLayoutImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"orientation"])) withTypeWithNSString:@"androidx.gridlayout.widget.GridLayout.orientation"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rowCount"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rowOrderPreserved"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"useDefaultMargins"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_column"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_columnSpan"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_columnWeight"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_row"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_rowSpan"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_rowWeight"])) withTypeWithNSString:@"int"])) forChild]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layout_gravity"])) withTypeWithNSString:@"gravity"])) forChild]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASGridLayoutImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASGridLayoutImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASGridLayoutImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASGridLayoutImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  gridLayout_ = new_ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASGridLayoutImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASGridLayoutImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return gridLayout_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ADXGridLayout *) nil_chk(gridLayout_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ADXGridLayout *) nil_chk(gridLayout_)) getChildCount]) {
    [((ADXGridLayout *) nil_chk(gridLayout_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASGridLayoutImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ADXGridLayout *) nil_chk(gridLayout_)) addViewWithADView:view];
    }
    else {
      [((ADXGridLayout *) nil_chk(gridLayout_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASGridLayoutImpl_createLayoutParamsWithADView_(self, view);
}

- (ADXGridLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASGridLayoutImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXGridLayout_LayoutParams *layoutParams = ASGridLayoutImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height", @"layout_column", @"layout_columnSpan", @"layout_columnWeight", @"layout_row", @"layout_rowSpan", @"layout_rowWeight", @"layout_gravity" }, 9)) {
    case 0:
    ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 2:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->columnSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"column"];
    }
    break;
    case 3:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->columnSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"column"];
    }
    break;
    case 4:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->columnSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"column"];
    }
    break;
    case 5:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->rowSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"row"];
    }
    break;
    case 6:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->rowSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"row"];
    }
    break;
    case 7:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->rowSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"row"];
    }
    break;
    case 8:
    {
      ((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->columnSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"column"];
      layoutParams->rowSpec_ = [self getSpecWithASIWidget:w withASWidgetAttributeMap:[w getAttributes] withNSString:@"row"];
    }
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADXGridLayout_LayoutParams *layoutParams = ASGridLayoutImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADXGridLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASGridLayoutImpl_GridLayoutExt *) nil_chk(((ASGridLayoutImpl_GridLayoutExt *) cast_chk(gridLayout_, [ASGridLayoutImpl_GridLayoutExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"alignmentMode", @"columnCount", @"columnOrderPreserved", @"orientation", @"rowCount", @"rowOrderPreserved", @"useDefaultMargins" }, 7)) {
    case 0:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setAlignmentModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
      }
    }
    break;
    case 1:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setColumnCountWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
      }
    }
    break;
    case 2:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setColumnOrderPreservedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    case 3:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setOrientationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
      }
    }
    break;
    case 4:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setRowCountWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
      }
    }
    break;
    case 5:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setRowOrderPreservedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    case 6:
    {
      {
        [((ADXGridLayout *) nil_chk(gridLayout_)) setUseDefaultMarginsWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"alignmentMode", @"columnCount", @"columnOrderPreserved", @"orientation", @"rowCount", @"rowOrderPreserved", @"useDefaultMargins" }, 7)) {
    case 0:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADXGridLayout *) nil_chk(gridLayout_)) getAlignmentMode]);
      }
    }
    case 1:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADXGridLayout *) nil_chk(gridLayout_)) getColumnCount]);
      }
    }
    case 2:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADXGridLayout *) nil_chk(gridLayout_)) isColumnOrderPreserved]);
      }
    }
    case 3:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADXGridLayout *) nil_chk(gridLayout_)) getOrientation]);
      }
    }
    case 4:
    {
      {
        return JavaLangInteger_valueOfWithInt_([((ADXGridLayout *) nil_chk(gridLayout_)) getRowCount]);
      }
    }
    case 5:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADXGridLayout *) nil_chk(gridLayout_)) isRowOrderPreserved]);
      }
    }
    case 6:
    {
      {
        return JavaLangBoolean_valueOfWithBoolean_([((ADXGridLayout *) nil_chk(gridLayout_)) getUseDefaultMargins]);
      }
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (ADXGridLayout_Spec *)getSpecWithNSString:(NSString *)str {
  ADXGridLayout_Spec *spec = nil;
  if (str != nil) {
    JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_(@"\\s*,\\s*");
    IOSObjectArray *columnDefs = [((JavaUtilRegexPattern *) nil_chk(pattern)) splitWithJavaLangCharSequence:str];
    if (((IOSObjectArray *) nil_chk(columnDefs))->size_ == 1) {
      spec = ADXGridLayout_specWithInt_withInt_withFloat_([self convertStringTointWithNSString:IOSObjectArray_Get(columnDefs, 0)], 1, 1);
    }
    else if (columnDefs->size_ == 2) {
      spec = ADXGridLayout_specWithInt_withInt_withFloat_([self convertStringTointWithNSString:IOSObjectArray_Get(columnDefs, 0)], [self convertStringTointWithNSString:IOSObjectArray_Get(columnDefs, 1)], 0);
    }
    else if (columnDefs->size_ == 3) {
      spec = ADXGridLayout_specWithInt_withInt_withFloat_([self convertStringTointWithNSString:IOSObjectArray_Get(columnDefs, 0)], [self convertStringTointWithNSString:IOSObjectArray_Get(columnDefs, 1)], [self convertStringTointWithNSString:IOSObjectArray_Get(columnDefs, 2)]);
    }
  }
  return spec;
}

- (jint)convertStringTointWithNSString:(NSString *)str {
  @try {
    return [((JavaLangInteger *) nil_chk(JavaLangInteger_valueOfWithNSString_(str))) intValue];
  }
  @catch (JavaLangException *e) {
    return 0;
  }
}

- (ADXGridLayout_Spec *)getSpecWithASIWidget:(id<ASIWidget>)w
                    withASWidgetAttributeMap:(ASWidgetAttributeMap *)attributes
                                withNSString:(NSString *)columnRow {
  ADXGridLayout_Spec *spec = nil;
  jint column = ASGridLayoutImpl_DEFAULT_COLUMN;
  jint colSpan = ASGridLayoutImpl_DEFAULT_SPAN_SIZE;
  jfloat colWeight = ASGridLayoutImpl_DEFAULT_WEIGHT;
  jint gravity = ASGridLayoutImpl_DEFAULT_GRAVITY;
  if ([((ASWidgetAttributeMap *) nil_chk(attributes)) containsKeyWithId:JreStrcat("$$", @"layout_", columnRow)]) {
    column = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"int"))) convertFromWithId:[((id<ASIWidget>) nil_chk(w)) getAttributeValueWithNSString:JreStrcat("$$", @"layout_", columnRow)] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  }
  if ([attributes containsKeyWithId:JreStrcat("$$$", @"layout_", columnRow, @"Span")]) {
    colSpan = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"int"))) convertFromWithId:[((id<ASIWidget>) nil_chk(w)) getAttributeValueWithNSString:JreStrcat("$$$", @"layout_", columnRow, @"Span")] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  }
  if ([attributes containsKeyWithId:JreStrcat("$$$", @"layout_", columnRow, @"Weight")]) {
    colWeight = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"float"))) convertFromWithId:[((id<ASIWidget>) nil_chk(w)) getAttributeValueWithNSString:JreStrcat("$$$", @"layout_", columnRow, @"Weight")] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangFloat class]))) floatValue];
  }
  if ([attributes containsKeyWithId:@"layout_gravity"]) {
    gravity = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"gravity"))) convertFromWithId:[((id<ASIWidget>) nil_chk(w)) getAttributeValueWithNSString:@"layout_gravity"] withJavaUtilMap:nil withASIFragment:fragment_], [JavaLangInteger class]))) intValue];
  }
  spec = ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_withFloat_(column, colSpan, [self getAlignmentWithInt:gravity withBoolean:[((NSString *) nil_chk(columnRow)) isEqual:@"column"]], colWeight);
  return spec;
}

- (ADXGridLayout_Alignment *)getAlignmentWithInt:(jint)gravity
                                     withBoolean:(jboolean)horizontal {
  jint mask = horizontal ? ADGravity_HORIZONTAL_GRAVITY_MASK : ADGravity_VERTICAL_GRAVITY_MASK;
  jint shift = horizontal ? ADGravity_AXIS_X_SHIFT : ADGravity_AXIS_Y_SHIFT;
  jint flags = JreRShift32((gravity & mask), shift);
  switch (flags) {
    case (ADGravity_AXIS_SPECIFIED | ADGravity_AXIS_PULL_BEFORE):
    return horizontal ? JreLoadStatic(ADXGridLayout, LEFT) : JreLoadStatic(ADXGridLayout, TOP);
    case (ADGravity_AXIS_SPECIFIED | ADGravity_AXIS_PULL_AFTER):
    return horizontal ? JreLoadStatic(ADXGridLayout, RIGHT) : JreLoadStatic(ADXGridLayout, BOTTOM);
    case (ADGravity_AXIS_SPECIFIED | ADGravity_AXIS_PULL_BEFORE | ADGravity_AXIS_PULL_AFTER):
    return JreLoadStatic(ADXGridLayout, FILL);
    case ADGravity_AXIS_SPECIFIED:
    return JreLoadStatic(ADXGridLayout, CENTER);
    case (ADGravity_AXIS_SPECIFIED | ADGravity_AXIS_PULL_BEFORE | ADGravity_RELATIVE_LAYOUT_DIRECTION):
    return JreLoadStatic(ADXGridLayout, START);
    case (ADGravity_AXIS_SPECIFIED | ADGravity_AXIS_PULL_AFTER | ADGravity_RELATIVE_LAYOUT_DIRECTION):
    return JreLoadStatic(ADXGridLayout, END);
    default:
    return JreLoadStatic(ADXGridLayout, TOP);
  }
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXGridLayout *) nil_chk(gridLayout_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASGridLayoutImpl_GridLayoutBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASGridLayoutImpl_GridLayoutBean_initWithASGridLayoutImpl_(self);
  }
  return bean_;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASGridLayoutImpl_GridLayoutCommandBuilder_initWithASGridLayoutImpl_(self);
  }
  return builder_;
}

- (ASGridLayoutImpl_GridLayoutParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASGridLayoutImpl_GridLayoutParamsBean_initWithASGridLayoutImpl_(self);
  }
  return paramsBean_;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASGridLayoutImpl_GridLayoutCommandParamsBuilder_initWithASGridLayoutImpl_(self);
  }
  return paramsBuilder_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, 27, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x1, 28, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 29, 1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x1, 28, 30, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Alignment;", 0x0, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[21].selector = @selector(requestLayout);
  methods[22].selector = @selector(invalidate);
  methods[23].selector = @selector(getSpecWithNSString:);
  methods[24].selector = @selector(convertStringTointWithNSString:);
  methods[25].selector = @selector(getSpecWithASIWidget:withASWidgetAttributeMap:withNSString:);
  methods[26].selector = @selector(getAlignmentWithInt:withBoolean:);
  methods[27].selector = @selector(setIdWithNSString:);
  methods[28].selector = @selector(getPluginWithNSString:);
  methods[29].selector = @selector(getBean);
  methods[30].selector = @selector(getBuilder);
  methods[31].selector = @selector(getParamsBean);
  methods[32].selector = @selector(getParamsBuilder);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 35, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 36, -1, -1 },
    { "gridLayout_", "LADXGridLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "UNDEFINED", "I", .constantValue.asInt = ASGridLayoutImpl_UNDEFINED, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_COLUMN", "I", .constantValue.asInt = ASGridLayoutImpl_DEFAULT_COLUMN, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_SPAN_SIZE", "I", .constantValue.asInt = ASGridLayoutImpl_DEFAULT_SPAN_SIZE, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_WEIGHT", "F", .constantValue.asFloat = ASGridLayoutImpl_DEFAULT_WEIGHT, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_GRAVITY", "I", .constantValue.asInt = ASGridLayoutImpl_DEFAULT_GRAVITY, 0x19, -1, -1, -1, -1 },
    { "builder_", "LASGridLayoutImpl_GridLayoutCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASGridLayoutImpl_GridLayoutBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASGridLayoutImpl_GridLayoutParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "getSpec", "convertStringToint", "LASIWidget;LASWidgetAttributeMap;LNSString;", "getAlignment", "IZ", "setId", "getPlugin", &ASGridLayoutImpl_LOCAL_NAME, &ASGridLayoutImpl_GROUP_NAME, "LASGridLayoutImpl_AlignmentMode;LASGridLayoutImpl_Orientation;LASGridLayoutImpl_GridLayoutExt;LASGridLayoutImpl_GridLayoutCommandBuilder;LASGridLayoutImpl_GridLayoutBean;LASGridLayoutImpl_GridLayoutParamsBean;LASGridLayoutImpl_GridLayoutCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASGridLayoutImpl = { "GridLayoutImpl", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x1, 33, 13, -1, 37, -1, -1, -1 };
  return &_ASGridLayoutImpl;
}

@end

void ASGridLayoutImpl_init(ASGridLayoutImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASGridLayoutImpl_GROUP_NAME, ASGridLayoutImpl_LOCAL_NAME);
}

ASGridLayoutImpl *new_ASGridLayoutImpl_init() {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl, init)
}

ASGridLayoutImpl *create_ASGridLayoutImpl_init() {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl, init)
}

void ASGridLayoutImpl_initWithNSString_(ASGridLayoutImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASGridLayoutImpl_GROUP_NAME, localname);
}

ASGridLayoutImpl *new_ASGridLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl, initWithNSString_, localname)
}

ASGridLayoutImpl *create_ASGridLayoutImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl, initWithNSString_, localname)
}

void ASGridLayoutImpl_initWithNSString_withNSString_(ASGridLayoutImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASGridLayoutImpl *new_ASGridLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

ASGridLayoutImpl *create_ASGridLayoutImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASGridLayoutImpl_setWidgetOnNativeClass(ASGridLayoutImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASGridLayoutImpl_createLayoutParamsWithADView_(ASGridLayoutImpl *self, ADView *view) {
  ADXGridLayout_LayoutParams *layoutParams = (ADXGridLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayout_LayoutParams class]);
  layoutParams = (ADXGridLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADXGridLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADXGridLayout_LayoutParams_init();
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADXGridLayout_LayoutParams *ASGridLayoutImpl_getLayoutParamsWithADView_(ASGridLayoutImpl *self, ADView *view) {
  return (ADXGridLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXGridLayout_LayoutParams class]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl)

@implementation ASGridLayoutImpl_AlignmentMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASGridLayoutImpl_AlignmentMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASGridLayoutImpl;" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_AlignmentMode = { "AlignmentMode", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASGridLayoutImpl_AlignmentMode;
}

@end

void ASGridLayoutImpl_AlignmentMode_init(ASGridLayoutImpl_AlignmentMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"alignBounds" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"alignMargins" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASGridLayoutImpl_AlignmentMode *new_ASGridLayoutImpl_AlignmentMode_init() {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_AlignmentMode, init)
}

ASGridLayoutImpl_AlignmentMode *create_ASGridLayoutImpl_AlignmentMode_init() {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_AlignmentMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_AlignmentMode)

@implementation ASGridLayoutImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASGridLayoutImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASGridLayoutImpl;" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_Orientation = { "Orientation", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASGridLayoutImpl_Orientation;
}

@end

void ASGridLayoutImpl_Orientation_init(ASGridLayoutImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASGridLayoutImpl_Orientation *new_ASGridLayoutImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_Orientation, init)
}

ASGridLayoutImpl_Orientation *create_ASGridLayoutImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_Orientation)

@implementation ASGridLayoutImpl_GridLayoutExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASGridLayoutImpl:(ASGridLayoutImpl *)outer$ {
  ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASGridLayoutImpl_GridLayoutExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASGridLayoutImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGridLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASGridLayoutImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_GridLayoutExt = { "GridLayoutExt", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASGridLayoutImpl_GridLayoutExt;
}

@end

void ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(ASGridLayoutImpl_GridLayoutExt *self, ASGridLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ADXGridLayout_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASGridLayoutImpl_GridLayoutExt *new_ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_GridLayoutExt, initWithASGridLayoutImpl_, outer$)
}

ASGridLayoutImpl_GridLayoutExt *create_ASGridLayoutImpl_GridLayoutExt_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_GridLayoutExt, initWithASGridLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_GridLayoutExt)

@implementation ASGridLayoutImpl_GridLayoutCommandBuilder

- (instancetype)initWithASGridLayoutImpl:(ASGridLayoutImpl *)outer$ {
  ASGridLayoutImpl_GridLayoutCommandBuilder_initWithASGridLayoutImpl_(self, outer$);
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetAlignmentMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"alignmentMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAlignmentMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"alignmentMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setAlignmentModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"alignmentMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetColumnCount {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"columnCount"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getColumnCount {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"columnCount"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setColumnCountWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"columnCount"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetColumnOrderPreserved {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"columnOrderPreserved"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isColumnOrderPreserved {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"columnOrderPreserved"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setColumnOrderPreservedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"columnOrderPreserved"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetOrientation {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getOrientation {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setOrientationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetRowCount {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rowCount"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getRowCount {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rowCount"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setRowCountWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rowCount"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetRowOrderPreserved {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rowOrderPreserved"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isRowOrderPreserved {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rowOrderPreserved"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setRowOrderPreservedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rowOrderPreserved"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)tryGetUseDefaultMargins {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"useDefaultMargins"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isUseDefaultMargins {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"useDefaultMargins"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASGridLayoutImpl_GridLayoutCommandBuilder *)setUseDefaultMarginsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"useDefaultMargins"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandBuilder;", 0x1, 11, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASGridLayoutImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetAlignmentMode);
  methods[3].selector = @selector(getAlignmentMode);
  methods[4].selector = @selector(setAlignmentModeWithNSString:);
  methods[5].selector = @selector(tryGetColumnCount);
  methods[6].selector = @selector(getColumnCount);
  methods[7].selector = @selector(setColumnCountWithInt:);
  methods[8].selector = @selector(tryGetColumnOrderPreserved);
  methods[9].selector = @selector(isColumnOrderPreserved);
  methods[10].selector = @selector(setColumnOrderPreservedWithBoolean:);
  methods[11].selector = @selector(tryGetOrientation);
  methods[12].selector = @selector(getOrientation);
  methods[13].selector = @selector(setOrientationWithNSString:);
  methods[14].selector = @selector(tryGetRowCount);
  methods[15].selector = @selector(getRowCount);
  methods[16].selector = @selector(setRowCountWithInt:);
  methods[17].selector = @selector(tryGetRowOrderPreserved);
  methods[18].selector = @selector(isRowOrderPreserved);
  methods[19].selector = @selector(setRowOrderPreservedWithBoolean:);
  methods[20].selector = @selector(tryGetUseDefaultMargins);
  methods[21].selector = @selector(isUseDefaultMargins);
  methods[22].selector = @selector(setUseDefaultMarginsWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGridLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASGridLayoutImpl;", "execute", "Z", "setAlignmentMode", "LNSString;", "setColumnCount", "I", "setColumnOrderPreserved", "setOrientation", "setRowCount", "setRowOrderPreserved", "setUseDefaultMargins", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/gridlayout/GridLayoutImpl$GridLayoutCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_GridLayoutCommandBuilder = { "GridLayoutCommandBuilder", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x1, 23, 1, 0, -1, -1, 12, -1 };
  return &_ASGridLayoutImpl_GridLayoutCommandBuilder;
}

@end

void ASGridLayoutImpl_GridLayoutCommandBuilder_initWithASGridLayoutImpl_(ASGridLayoutImpl_GridLayoutCommandBuilder *self, ASGridLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASGridLayoutImpl_GridLayoutCommandBuilder *new_ASGridLayoutImpl_GridLayoutCommandBuilder_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_GridLayoutCommandBuilder, initWithASGridLayoutImpl_, outer$)
}

ASGridLayoutImpl_GridLayoutCommandBuilder *create_ASGridLayoutImpl_GridLayoutCommandBuilder_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_GridLayoutCommandBuilder, initWithASGridLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_GridLayoutCommandBuilder)

@implementation ASGridLayoutImpl_GridLayoutBean

- (instancetype)initWithASGridLayoutImpl:(ASGridLayoutImpl *)outer$ {
  ASGridLayoutImpl_GridLayoutBean_initWithASGridLayoutImpl_(self, outer$);
  return self;
}

- (id)getAlignmentMode {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAlignmentMode])) executeWithBoolean:false])) getAlignmentMode];
}

- (void)setAlignmentModeWithNSString:(NSString *)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAlignmentModeWithNSString:value])) executeWithBoolean:true];
}

- (id)getColumnCount {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetColumnCount])) executeWithBoolean:false])) getColumnCount];
}

- (void)setColumnCountWithInt:(jint)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setColumnCountWithInt:value])) executeWithBoolean:true];
}

- (id)isColumnOrderPreserved {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetColumnOrderPreserved])) executeWithBoolean:false])) isColumnOrderPreserved];
}

- (void)setColumnOrderPreservedWithBoolean:(jboolean)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setColumnOrderPreservedWithBoolean:value])) executeWithBoolean:true];
}

- (id)getOrientation {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetOrientation])) executeWithBoolean:false])) getOrientation];
}

- (void)setOrientationWithNSString:(NSString *)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOrientationWithNSString:value])) executeWithBoolean:true];
}

- (id)getRowCount {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetRowCount])) executeWithBoolean:false])) getRowCount];
}

- (void)setRowCountWithInt:(jint)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setRowCountWithInt:value])) executeWithBoolean:true];
}

- (id)isRowOrderPreserved {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetRowOrderPreserved])) executeWithBoolean:false])) isRowOrderPreserved];
}

- (void)setRowOrderPreservedWithBoolean:(jboolean)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setRowOrderPreservedWithBoolean:value])) executeWithBoolean:true];
}

- (id)isUseDefaultMargins {
  return [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetUseDefaultMargins])) executeWithBoolean:false])) isUseDefaultMargins];
}

- (void)setUseDefaultMarginsWithBoolean:(jboolean)value {
  (void) [((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setUseDefaultMarginsWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASGridLayoutImpl:);
  methods[1].selector = @selector(getAlignmentMode);
  methods[2].selector = @selector(setAlignmentModeWithNSString:);
  methods[3].selector = @selector(getColumnCount);
  methods[4].selector = @selector(setColumnCountWithInt:);
  methods[5].selector = @selector(isColumnOrderPreserved);
  methods[6].selector = @selector(setColumnOrderPreservedWithBoolean:);
  methods[7].selector = @selector(getOrientation);
  methods[8].selector = @selector(setOrientationWithNSString:);
  methods[9].selector = @selector(getRowCount);
  methods[10].selector = @selector(setRowCountWithInt:);
  methods[11].selector = @selector(isRowOrderPreserved);
  methods[12].selector = @selector(setRowOrderPreservedWithBoolean:);
  methods[13].selector = @selector(isUseDefaultMargins);
  methods[14].selector = @selector(setUseDefaultMarginsWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGridLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASGridLayoutImpl;", "setAlignmentMode", "LNSString;", "setColumnCount", "I", "setColumnOrderPreserved", "Z", "setOrientation", "setRowCount", "setRowOrderPreserved", "setUseDefaultMargins" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_GridLayoutBean = { "GridLayoutBean", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x1, 15, 1, 0, -1, -1, -1, -1 };
  return &_ASGridLayoutImpl_GridLayoutBean;
}

@end

void ASGridLayoutImpl_GridLayoutBean_initWithASGridLayoutImpl_(ASGridLayoutImpl_GridLayoutBean *self, ASGridLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASGridLayoutImpl_GridLayoutBean *new_ASGridLayoutImpl_GridLayoutBean_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_GridLayoutBean, initWithASGridLayoutImpl_, outer$)
}

ASGridLayoutImpl_GridLayoutBean *create_ASGridLayoutImpl_GridLayoutBean_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_GridLayoutBean, initWithASGridLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_GridLayoutBean)

@implementation ASGridLayoutImpl_GridLayoutParamsBean

- (instancetype)initWithASGridLayoutImpl:(ASGridLayoutImpl *)outer$ {
  ASGridLayoutImpl_GridLayoutParamsBean_initWithASGridLayoutImpl_(self, outer$);
  return self;
}

- (void)setLayoutColumnWithASIWidget:(id<ASIWidget>)w
                             withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutColumnWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutColumnSpanWithASIWidget:(id<ASIWidget>)w
                                 withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutColumnSpanWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutColumnWeightWithASIWidget:(id<ASIWidget>)w
                                   withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutColumnWeightWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutRowWithASIWidget:(id<ASIWidget>)w
                          withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutRowWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutRowSpanWithASIWidget:(id<ASIWidget>)w
                              withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutRowSpanWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutRowWeightWithASIWidget:(id<ASIWidget>)w
                                withInt:(jint)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutRowWeightWithInt:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

- (void)setLayoutGravityWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)value {
  id<JavaUtilMap> layoutParams = new_JavaUtilHashMap_init();
  (void) [layoutParams putWithId:@"layoutParams" withId:[((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([((ASGridLayoutImpl_GridLayoutCommandParamsBuilder *) nil_chk([this$0_ getParamsBuilder])) reset])) setLayoutGravityWithNSString:value])) getCommand]];
  [((id<ASIWidget>) nil_chk(w)) executeCommandWithJavaUtilMap:layoutParams withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
  [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASGridLayoutImpl:);
  methods[1].selector = @selector(setLayoutColumnWithASIWidget:withInt:);
  methods[2].selector = @selector(setLayoutColumnSpanWithASIWidget:withInt:);
  methods[3].selector = @selector(setLayoutColumnWeightWithASIWidget:withInt:);
  methods[4].selector = @selector(setLayoutRowWithASIWidget:withInt:);
  methods[5].selector = @selector(setLayoutRowSpanWithASIWidget:withInt:);
  methods[6].selector = @selector(setLayoutRowWeightWithASIWidget:withInt:);
  methods[7].selector = @selector(setLayoutGravityWithASIWidget:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASGridLayoutImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASGridLayoutImpl;", "setLayoutColumn", "LASIWidget;I", "setLayoutColumnSpan", "setLayoutColumnWeight", "setLayoutRow", "setLayoutRowSpan", "setLayoutRowWeight", "setLayoutGravity", "LASIWidget;LNSString;" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_GridLayoutParamsBean = { "GridLayoutParamsBean", "com.ashera.gridlayout", ptrTable, methods, fields, 7, 0x1, 8, 1, 0, -1, -1, -1, -1 };
  return &_ASGridLayoutImpl_GridLayoutParamsBean;
}

@end

void ASGridLayoutImpl_GridLayoutParamsBean_initWithASGridLayoutImpl_(ASGridLayoutImpl_GridLayoutParamsBean *self, ASGridLayoutImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASGridLayoutImpl_GridLayoutParamsBean *new_ASGridLayoutImpl_GridLayoutParamsBean_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_GridLayoutParamsBean, initWithASGridLayoutImpl_, outer$)
}

ASGridLayoutImpl_GridLayoutParamsBean *create_ASGridLayoutImpl_GridLayoutParamsBean_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_GridLayoutParamsBean, initWithASGridLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_GridLayoutParamsBean)

@implementation ASGridLayoutImpl_GridLayoutCommandParamsBuilder

- (instancetype)initWithASGridLayoutImpl:(ASGridLayoutImpl *)outer$ {
  ASGridLayoutImpl_GridLayoutCommandParamsBuilder_initWithASGridLayoutImpl_(self, outer$);
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutColumnWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_column"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutColumnSpanWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_columnSpan"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutColumnWeightWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_columnWeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutRowWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_row"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutRowSpanWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_rowSpan"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutRowWeightWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_rowWeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASGridLayoutImpl_GridLayoutCommandParamsBuilder *)setLayoutGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layout_gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASGridLayoutImpl_GridLayoutCommandParamsBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASGridLayoutImpl:);
  methods[1].selector = @selector(setLayoutColumnWithInt:);
  methods[2].selector = @selector(setLayoutColumnSpanWithInt:);
  methods[3].selector = @selector(setLayoutColumnWeightWithInt:);
  methods[4].selector = @selector(setLayoutRowWithInt:);
  methods[5].selector = @selector(setLayoutRowSpanWithInt:);
  methods[6].selector = @selector(setLayoutRowWeightWithInt:);
  methods[7].selector = @selector(setLayoutGravityWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASGridLayoutImpl;", "setLayoutColumn", "I", "setLayoutColumnSpan", "setLayoutColumnWeight", "setLayoutRow", "setLayoutRowSpan", "setLayoutRowWeight", "setLayoutGravity", "LNSString;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/gridlayout/GridLayoutImpl$GridLayoutCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASGridLayoutImpl_GridLayoutCommandParamsBuilder = { "GridLayoutCommandParamsBuilder", "com.ashera.gridlayout", ptrTable, methods, NULL, 7, 0x1, 8, 0, 0, -1, -1, 10, -1 };
  return &_ASGridLayoutImpl_GridLayoutCommandParamsBuilder;
}

@end

void ASGridLayoutImpl_GridLayoutCommandParamsBuilder_initWithASGridLayoutImpl_(ASGridLayoutImpl_GridLayoutCommandParamsBuilder *self, ASGridLayoutImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASGridLayoutImpl_GridLayoutCommandParamsBuilder *new_ASGridLayoutImpl_GridLayoutCommandParamsBuilder_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_NEW_IMPL(ASGridLayoutImpl_GridLayoutCommandParamsBuilder, initWithASGridLayoutImpl_, outer$)
}

ASGridLayoutImpl_GridLayoutCommandParamsBuilder *create_ASGridLayoutImpl_GridLayoutCommandParamsBuilder_initWithASGridLayoutImpl_(ASGridLayoutImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASGridLayoutImpl_GridLayoutCommandParamsBuilder, initWithASGridLayoutImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASGridLayoutImpl_GridLayoutCommandParamsBuilder)
