//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\state\helpers\BarrierReference.java
//

#include "BarrierReference.h"
#include "ConstraintReference.h"
#include "CoreBarrier.h"
#include "HelperReference.h"
#include "HelperWidget.h"
#include "J2ObjC_source.h"
#include "State.h"


@interface ADXBarrierReference () {
 @public
  ADXState_Direction *mDirection_;
  jint mMargin_;
  ADXCoreBarrier *mBarrierWidget_;
}

@end

J2OBJC_FIELD_SETTER(ADXBarrierReference, mDirection_, ADXState_Direction *)
J2OBJC_FIELD_SETTER(ADXBarrierReference, mBarrierWidget_, ADXCoreBarrier *)

@implementation ADXBarrierReference

- (instancetype)initWithADXState:(ADXState *)state {
  ADXBarrierReference_initWithADXState_(self, state);
  return self;
}

- (void)setBarrierDirectionWithADXState_Direction:(ADXState_Direction *)barrierDirection {
  JreStrongAssign(&mDirection_, barrierDirection);
}

- (ADXConstraintReference *)marginWithId:(id)value {
  [self marginWithInt:[((ADXState *) nil_chk(mState_HelperReference_)) convertDimensionWithId:value]];
  return self;
}

- (ADXConstraintReference *)marginWithInt:(jint)value {
  mMargin_ = value;
  return self;
}

- (ADXHelperWidget *)getHelperWidget {
  if (mBarrierWidget_ == nil) {
    JreStrongAssignAndConsume(&mBarrierWidget_, new_ADXCoreBarrier_init());
  }
  return mBarrierWidget_;
}

- (void)apply {
  [self getHelperWidget];
  jint direction = ADXCoreBarrier_LEFT;
  switch ([mDirection_ ordinal]) {
    case ADXState_Direction_Enum_LEFT:
    case ADXState_Direction_Enum_START:
    {
    }
    break;
    case ADXState_Direction_Enum_RIGHT:
    case ADXState_Direction_Enum_END:
    {
      direction = ADXCoreBarrier_RIGHT;
    }
    break;
    case ADXState_Direction_Enum_TOP:
    {
      direction = ADXCoreBarrier_TOP;
    }
    break;
    case ADXState_Direction_Enum_BOTTOM:
    {
      direction = ADXCoreBarrier_BOTTOM;
    }
  }
  [((ADXCoreBarrier *) nil_chk(mBarrierWidget_)) setBarrierTypeWithInt:direction];
  [((ADXCoreBarrier *) nil_chk(mBarrierWidget_)) setMarginWithInt:mMargin_];
}

- (void)dealloc {
  RELEASE_(mDirection_);
  RELEASE_(mBarrierWidget_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXConstraintReference;", 0x1, 3, 5, -1, -1, -1, -1 },
    { NULL, "LADXHelperWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXState:);
  methods[1].selector = @selector(setBarrierDirectionWithADXState_Direction:);
  methods[2].selector = @selector(marginWithId:);
  methods[3].selector = @selector(marginWithInt:);
  methods[4].selector = @selector(getHelperWidget);
  methods[5].selector = @selector(apply);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDirection_", "LADXState_Direction;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMargin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBarrierWidget_", "LADXCoreBarrier;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXState;", "setBarrierDirection", "LADXState_Direction;", "margin", "LNSObject;", "I" };
  static const J2ObjcClassInfo _ADXBarrierReference = { "BarrierReference", "androidx.constraintlayout.core.state.helpers", ptrTable, methods, fields, 7, 0x1, 6, 3, -1, -1, -1, -1, -1 };
  return &_ADXBarrierReference;
}

@end

void ADXBarrierReference_initWithADXState_(ADXBarrierReference *self, ADXState *state) {
  ADXHelperReference_initWithADXState_withADXState_Helper_(self, state, JreLoadEnum(ADXState_Helper, BARRIER));
}

ADXBarrierReference *new_ADXBarrierReference_initWithADXState_(ADXState *state) {
  J2OBJC_NEW_IMPL(ADXBarrierReference, initWithADXState_, state)
}

ADXBarrierReference *create_ADXBarrierReference_initWithADXState_(ADXState *state) {
  J2OBJC_CREATE_IMPL(ADXBarrierReference, initWithADXState_, state)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXBarrierReference)
