//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\RecyclerView.java
//

#include "AdapterHelper.h"
#include "ChildHelper.h"
#include "Context.h"
#include "GapWorker.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Log.h"
#include "Parcelable.h"
#include "Rect.h"
#include "RectF.h"
#include "RecyclerView.h"
#include "SparseArray.h"
#include "TraceCompat.h"
#include "View.h"
#include "ViewBoundsCheck.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewInfoStore.h"
#include "ViewParent.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/List.h"

@class ADXRecyclerView_RecyclerViewDataObserver;
@protocol JavaLangRunnable;
@protocol JavaUtilList;


@interface ADXRecyclerView () {
 @public
  ADXRecyclerView_RecyclerViewDataObserver *mObserver_;
  jint mInterceptRequestLayoutDepth_;
  jboolean mIgnoreMotionEventTillDown_;
  jint mEatenAccessibilityChangeFlags_;
  id<JavaUtilList> mOnChildAttachStateListeners_;
  jint mLayoutOrScrollCounter_;
  jint mDispatchScrollCounter_;
  jint mScrollState_;
  jint mScrollPointerId_;
  jint mInitialTouchX_;
  jint mInitialTouchY_;
  jint mLastTouchX_;
  jint mLastTouchY_;
  jint mTouchSlop_RecyclerView_;
  jint mMinFlingVelocity_;
  jint mMaxFlingVelocity_;
  jboolean mPreserveFocusAfterLayout_;
  ADXRecyclerView_OnScrollListener *mScrollListener_;
  id<JavaUtilList> mScrollListeners_;
  IOSIntArray *mMinMaxLayoutPositions_;
  ADXRecyclerView_NestedScrollingChildHelper *mScrollingChildHelper_;
  IOSIntArray *mScrollOffset_;
  IOSIntArray *mNestedOffsets_;
  id<JavaLangRunnable> mItemAnimatorRunner_;
  jboolean mLastAutoMeasureSkippedDueToExact_;
  jint mLastAutoMeasureNonExactMeasuredWidth_;
  jint mLastAutoMeasureNonExactMeasuredHeight_;
  id<ADXViewInfoStore_ProcessCallback> mViewInfoProcessCallback_;
}

- (void)initChildrenHelper OBJC_METHOD_FAMILY_NONE;

- (void)setAdapterInternalWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)adapter
                                          withBoolean:(jboolean)compatibleWithPrevious
                                          withBoolean:(jboolean)removeAndRecycleViews;

- (void)addAnimatingViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder;

- (jboolean)hasUpdatedView;

- (void)processAdapterUpdatesAndSetAnimationFlags;

- (void)dispatchLayoutStep1;

- (void)dispatchLayoutStep2;

- (void)dispatchLayoutStep3;

- (void)handleMissingPreInfoForChangeErrorWithLong:(jlong)key
                    withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                    withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)oldChangeViewHolder;

- (void)findMinMaxChildLayoutPositionsWithIntArray:(IOSIntArray *)into;

- (jboolean)didChildRangeChangeWithInt:(jint)minPositionPreLayout
                               withInt:(jint)maxPositionPreLayout;

- (void)animateChangeWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)oldHolder
                     withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)newHolder
    withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
    withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo
                                        withBoolean:(jboolean)oldHolderDisappearing
                                        withBoolean:(jboolean)newHolderDisappearing;

- (ADXRecyclerView_NestedScrollingChildHelper *)getScrollingChildHelper;

- (void)dispatchContentChangedIfNecessary;

- (jboolean)predictiveItemAnimationsEnabled;

- (void)saveFocusInfo;

- (void)recoverFocusFromState;

- (void)resetFocusInfo;

- (jint)getScrollY;

- (jint)getScrollX;

- (void)onScrollChangedWithInt:(jint)scrollX
                       withInt:(jint)scrollY
                       withInt:(jint)i
                       withInt:(jint)j;

- (void)onScrolledWithInt:(jint)hresult
                  withInt:(jint)vresult;

- (void)pullGlowsWithFloat:(jfloat)x
                 withFloat:(jfloat)overscrollX
                 withFloat:(jfloat)y
                 withFloat:(jfloat)overscrollY;

@end

J2OBJC_FIELD_SETTER(ADXRecyclerView, mObserver_, ADXRecyclerView_RecyclerViewDataObserver *)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mOnChildAttachStateListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mScrollListener_, ADXRecyclerView_OnScrollListener *)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mScrollListeners_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mMinMaxLayoutPositions_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mScrollingChildHelper_, ADXRecyclerView_NestedScrollingChildHelper *)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mScrollOffset_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mNestedOffsets_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mItemAnimatorRunner_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ADXRecyclerView, mViewInfoProcessCallback_, id<ADXViewInfoStore_ProcessCallback>)

inline jboolean ADXRecyclerView_get_FORCE_ABS_FOCUS_SEARCH_DIRECTION(void);
#define ADXRecyclerView_FORCE_ABS_FOCUS_SEARCH_DIRECTION false
J2OBJC_STATIC_FIELD_CONSTANT(ADXRecyclerView, FORCE_ABS_FOCUS_SEARCH_DIRECTION, jboolean)

inline jboolean ADXRecyclerView_get_IGNORE_DETACHED_FOCUSED_CHILD(void);
#define ADXRecyclerView_IGNORE_DETACHED_FOCUSED_CHILD false
J2OBJC_STATIC_FIELD_CONSTANT(ADXRecyclerView, IGNORE_DETACHED_FOCUSED_CHILD, jboolean)

inline NSString *ADXRecyclerView_get_TRACE_ON_LAYOUT_TAG(void);
static NSString *ADXRecyclerView_TRACE_ON_LAYOUT_TAG = @"RV OnLayout";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXRecyclerView, TRACE_ON_LAYOUT_TAG, NSString *)

inline NSString *ADXRecyclerView_get_TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG(void);
static NSString *ADXRecyclerView_TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG = @"RV FullInvalidate";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXRecyclerView, TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG, NSString *)

inline NSString *ADXRecyclerView_get_TRACE_HANDLE_ADAPTER_UPDATES_TAG(void);
static NSString *ADXRecyclerView_TRACE_HANDLE_ADAPTER_UPDATES_TAG = @"RV PartialInvalidate";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXRecyclerView, TRACE_HANDLE_ADAPTER_UPDATES_TAG, NSString *)

inline jint ADXRecyclerView_get_INVALID_POINTER(void);
#define ADXRecyclerView_INVALID_POINTER -1
J2OBJC_STATIC_FIELD_CONSTANT(ADXRecyclerView, INVALID_POINTER, jint)

__attribute__((unused)) static void ADXRecyclerView_initChildrenHelper(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_setAdapterInternalWithADXRecyclerView_Adapter_withBoolean_withBoolean_(ADXRecyclerView *self, ADXRecyclerView_Adapter *adapter, jboolean compatibleWithPrevious, jboolean removeAndRecycleViews);

__attribute__((unused)) static void ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(ADXRecyclerView *self, ADXRecyclerView_ViewHolder *viewHolder);

__attribute__((unused)) static jboolean ADXRecyclerView_hasUpdatedView(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_suppressLayoutWithBoolean_(ADXRecyclerView *self, jboolean suppress);

__attribute__((unused)) static void ADXRecyclerView_processAdapterUpdatesAndSetAnimationFlags(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_dispatchLayoutStep1(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_dispatchLayoutStep2(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_dispatchLayoutStep3(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_handleMissingPreInfoForChangeErrorWithLong_withADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_(ADXRecyclerView *self, jlong key, ADXRecyclerView_ViewHolder *holder, ADXRecyclerView_ViewHolder *oldChangeViewHolder);

__attribute__((unused)) static void ADXRecyclerView_findMinMaxChildLayoutPositionsWithIntArray_(ADXRecyclerView *self, IOSIntArray *into);

__attribute__((unused)) static jboolean ADXRecyclerView_didChildRangeChangeWithInt_withInt_(ADXRecyclerView *self, jint minPositionPreLayout, jint maxPositionPreLayout);

__attribute__((unused)) static void ADXRecyclerView_animateChangeWithADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withBoolean_withBoolean_(ADXRecyclerView *self, ADXRecyclerView_ViewHolder *oldHolder, ADXRecyclerView_ViewHolder *newHolder, ADXRecyclerView_ItemAnimator_ItemHolderInfo *preInfo, ADXRecyclerView_ItemAnimator_ItemHolderInfo *postInfo, jboolean oldHolderDisappearing, jboolean newHolderDisappearing);

__attribute__((unused)) static void ADXRecyclerView_dispatchNestedScrollWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(ADXRecyclerView *self, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, IOSIntArray *offsetInWindow, jint type, IOSIntArray *consumed);

__attribute__((unused)) static ADXRecyclerView_NestedScrollingChildHelper *ADXRecyclerView_getScrollingChildHelper(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_dispatchContentChangedIfNecessary(ADXRecyclerView *self);

__attribute__((unused)) static jboolean ADXRecyclerView_predictiveItemAnimationsEnabled(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_saveFocusInfo(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_recoverFocusFromState(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_resetFocusInfo(ADXRecyclerView *self);

__attribute__((unused)) static jint ADXRecyclerView_getScrollY(ADXRecyclerView *self);

__attribute__((unused)) static jint ADXRecyclerView_getScrollX(ADXRecyclerView *self);

__attribute__((unused)) static void ADXRecyclerView_onScrollChangedWithInt_withInt_withInt_withInt_(ADXRecyclerView *self, jint scrollX, jint scrollY, jint i, jint j);

__attribute__((unused)) static void ADXRecyclerView_onScrolledWithInt_withInt_(ADXRecyclerView *self, jint hresult, jint vresult);

__attribute__((unused)) static void ADXRecyclerView_fillRemainingScrollValuesWithADXRecyclerView_State_(ADXRecyclerView *self, ADXRecyclerView_State *state);

__attribute__((unused)) static void ADXRecyclerView_pullGlowsWithFloat_withFloat_withFloat_withFloat_(ADXRecyclerView *self, jfloat x, jfloat overscrollX, jfloat y, jfloat overscrollY);

@interface ADXRecyclerView_1 : NSObject < JavaLangRunnable > {
 @public
  ADXRecyclerView *this$0_;
}

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_1)

__attribute__((unused)) static void ADXRecyclerView_1_initWithADXRecyclerView_(ADXRecyclerView_1 *self, ADXRecyclerView *outer$);

__attribute__((unused)) static ADXRecyclerView_1 *new_ADXRecyclerView_1_initWithADXRecyclerView_(ADXRecyclerView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_1 *create_ADXRecyclerView_1_initWithADXRecyclerView_(ADXRecyclerView *outer$);

@interface ADXRecyclerView_2 : NSObject < ADXViewInfoStore_ProcessCallback > {
 @public
  ADXRecyclerView *this$0_;
}

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$;

- (void)processDisappearedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
         withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info
         withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo;

- (void)processAppearedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info;

- (void)processPersistentWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo;

- (void)unusedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_2)

__attribute__((unused)) static void ADXRecyclerView_2_initWithADXRecyclerView_(ADXRecyclerView_2 *self, ADXRecyclerView *outer$);

__attribute__((unused)) static ADXRecyclerView_2 *new_ADXRecyclerView_2_initWithADXRecyclerView_(ADXRecyclerView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_2 *create_ADXRecyclerView_2_initWithADXRecyclerView_(ADXRecyclerView *outer$);

@interface ADXRecyclerView_3 : NSObject < ADXChildHelper_Callback > {
 @public
  ADXRecyclerView *this$0_;
}

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$;

- (jint)getChildCount;

- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index;

- (jint)indexOfChildWithADView:(ADView *)view;

- (void)removeViewAtWithInt:(jint)index;

- (ADView *)getChildAtWithInt:(jint)offset;

- (void)removeAllViews;

- (ADXRecyclerView_ViewHolder *)getChildViewHolderWithADView:(ADView *)view;

- (void)attachViewToParentWithADView:(ADView *)child
                             withInt:(jint)index
        withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams;

- (void)detachViewFromParentWithInt:(jint)offset;

- (void)onEnteredHiddenStateWithADView:(ADView *)child;

- (void)onLeftHiddenStateWithADView:(ADView *)child;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_3)

__attribute__((unused)) static void ADXRecyclerView_3_initWithADXRecyclerView_(ADXRecyclerView_3 *self, ADXRecyclerView *outer$);

__attribute__((unused)) static ADXRecyclerView_3 *new_ADXRecyclerView_3_initWithADXRecyclerView_(ADXRecyclerView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_3 *create_ADXRecyclerView_3_initWithADXRecyclerView_(ADXRecyclerView *outer$);

@interface ADXRecyclerView_4 : NSObject < ADXAdapterHelper_Callback > {
 @public
  ADXRecyclerView *this$0_;
}

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$;

- (ADXRecyclerView_ViewHolder *)findViewHolderWithInt:(jint)position;

- (void)offsetPositionsForRemovingInvisibleWithInt:(jint)start
                                           withInt:(jint)count;

- (void)offsetPositionsForRemovingLaidOutOrNewViewWithInt:(jint)positionStart
                                                  withInt:(jint)itemCount;

- (void)markViewHoldersUpdatedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payload;

- (void)onDispatchFirstPassWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)dispatchUpdateWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)onDispatchSecondPassWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op;

- (void)offsetPositionsForAddWithInt:(jint)positionStart
                             withInt:(jint)itemCount;

- (void)offsetPositionsForMoveWithInt:(jint)from
                              withInt:(jint)to;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_4)

__attribute__((unused)) static void ADXRecyclerView_4_initWithADXRecyclerView_(ADXRecyclerView_4 *self, ADXRecyclerView *outer$);

__attribute__((unused)) static ADXRecyclerView_4 *new_ADXRecyclerView_4_initWithADXRecyclerView_(ADXRecyclerView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_4 *create_ADXRecyclerView_4_initWithADXRecyclerView_(ADXRecyclerView *outer$);

@interface ADXRecyclerView_RecyclerViewDataObserver : ADXRecyclerView_AdapterDataObserver {
 @public
  ADXRecyclerView *this$0_;
}

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$;

- (void)onChanged;

- (void)onItemRangeChangedWithInt:(jint)positionStart
                          withInt:(jint)itemCount
                           withId:(id)payload;

- (void)onItemRangeInsertedWithInt:(jint)positionStart
                           withInt:(jint)itemCount;

- (void)onItemRangeRemovedWithInt:(jint)positionStart
                          withInt:(jint)itemCount;

- (void)onItemRangeMovedWithInt:(jint)fromPosition
                        withInt:(jint)toPosition
                        withInt:(jint)itemCount;

- (void)triggerUpdateProcessor;

- (void)onStateRestorationPolicyChanged;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_RecyclerViewDataObserver)

__attribute__((unused)) static void ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(ADXRecyclerView_RecyclerViewDataObserver *self, ADXRecyclerView *outer$);

__attribute__((unused)) static ADXRecyclerView_RecyclerViewDataObserver *new_ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(ADXRecyclerView *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_RecyclerViewDataObserver *create_ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(ADXRecyclerView *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADXRecyclerView_RecyclerViewDataObserver)

@interface ADXRecyclerView_RecycledViewPool () {
 @public
  jint mAttachCount_;
}

- (ADXRecyclerView_RecycledViewPool_ScrapData *)getScrapDataForTypeWithInt:(jint)viewType;

@end

inline jint ADXRecyclerView_RecycledViewPool_get_DEFAULT_MAX_SCRAP(void);
#define ADXRecyclerView_RecycledViewPool_DEFAULT_MAX_SCRAP 5
J2OBJC_STATIC_FIELD_CONSTANT(ADXRecyclerView_RecycledViewPool, DEFAULT_MAX_SCRAP, jint)

__attribute__((unused)) static ADXRecyclerView_RecycledViewPool_ScrapData *ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(ADXRecyclerView_RecycledViewPool *self, jint viewType);

@interface ADXRecyclerView_Recycler () {
 @public
  ADXRecyclerView *this$0_;
  id<JavaUtilList> mUnmodifiableAttachedScrap_;
  jint mRequestedCacheMax_;
  ADXRecyclerView_ViewCacheExtension *mViewCacheExtension_;
}

- (jboolean)tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                                              withInt:(jint)offsetPosition
                                                              withInt:(jint)position
                                                             withLong:(jlong)deadlineNs;

- (void)invalidateDisplayListIntWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

- (void)invalidateDisplayListIntWithADViewGroup:(ADViewGroup *)viewGroup
                                    withBoolean:(jboolean)invalidateThis;

@end

J2OBJC_FIELD_SETTER(ADXRecyclerView_Recycler, mUnmodifiableAttachedScrap_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ADXRecyclerView_Recycler, mViewCacheExtension_, ADXRecyclerView_ViewCacheExtension *)

__attribute__((unused)) static jboolean ADXRecyclerView_Recycler_tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder_withInt_withInt_withLong_(ADXRecyclerView_Recycler *self, ADXRecyclerView_ViewHolder *holder, jint offsetPosition, jint position, jlong deadlineNs);

__attribute__((unused)) static void ADXRecyclerView_Recycler_invalidateDisplayListIntWithADXRecyclerView_ViewHolder_(ADXRecyclerView_Recycler *self, ADXRecyclerView_ViewHolder *holder);

__attribute__((unused)) static void ADXRecyclerView_Recycler_invalidateDisplayListIntWithADViewGroup_withBoolean_(ADXRecyclerView_Recycler *self, ADViewGroup *viewGroup, jboolean invalidateThis);

@interface ADXRecyclerView_Adapter () {
 @public
  ADXRecyclerView_AdapterDataObservable *mObservable_;
  jboolean mHasStableIds_;
}

@end

J2OBJC_FIELD_SETTER(ADXRecyclerView_Adapter, mObservable_, ADXRecyclerView_AdapterDataObservable *)

__attribute__((unused)) static ADXRecyclerView_ViewHolder *ADXRecyclerView_Adapter_createViewHolderWithADViewGroup_withInt_(ADXRecyclerView_Adapter *self, ADViewGroup *parent, jint viewType);

__attribute__((unused)) static void ADXRecyclerView_Adapter_bindViewHolderWithADXRecyclerView_ViewHolder_withInt_(ADXRecyclerView_Adapter *self, ADXRecyclerView_ViewHolder *holder, jint position);

__attribute__((unused)) static jboolean ADXRecyclerView_Adapter_hasStableIds(ADXRecyclerView_Adapter *self);

__attribute__((unused)) static jboolean ADXRecyclerView_Adapter_hasObservers(ADXRecyclerView_Adapter *self);

__attribute__((unused)) static void ADXRecyclerView_Adapter_StateRestorationPolicy_initWithNSString_withInt_(ADXRecyclerView_Adapter_StateRestorationPolicy *self, NSString *__name, jint __ordinal);

@interface ADXRecyclerView_LayoutManager () {
 @public
  id<ADXViewBoundsCheck_Callback> mHorizontalBoundCheckCallback_;
  id<ADXViewBoundsCheck_Callback> mVerticalBoundCheckCallback_;
  jboolean mMeasurementCacheEnabled_;
  jboolean mItemPrefetchEnabled_;
  jint mWidthMode_;
  jint mHeightMode_;
  jint mWidth_;
  jint mHeight_;
}

- (void)addViewIntWithADView:(ADView *)child
                     withInt:(jint)index
                 withBoolean:(jboolean)disappearing;

- (void)detachViewInternalWithInt:(jint)index
                       withADView:(ADView *)view;

- (void)scrapOrRecycleViewWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                               withInt:(jint)index
                                            withADView:(ADView *)view;

+ (jboolean)isMeasurementUpToDateWithInt:(jint)childSize
                                 withInt:(jint)spec
                                 withInt:(jint)dimension;

@end

J2OBJC_FIELD_SETTER(ADXRecyclerView_LayoutManager, mHorizontalBoundCheckCallback_, id<ADXViewBoundsCheck_Callback>)
J2OBJC_FIELD_SETTER(ADXRecyclerView_LayoutManager, mVerticalBoundCheckCallback_, id<ADXViewBoundsCheck_Callback>)

__attribute__((unused)) static void ADXRecyclerView_LayoutManager_addViewIntWithADView_withInt_withBoolean_(ADXRecyclerView_LayoutManager *self, ADView *child, jint index, jboolean disappearing);

__attribute__((unused)) static void ADXRecyclerView_LayoutManager_detachViewInternalWithInt_withADView_(ADXRecyclerView_LayoutManager *self, jint index, ADView *view);

__attribute__((unused)) static void ADXRecyclerView_LayoutManager_scrapOrRecycleViewWithADXRecyclerView_Recycler_withInt_withADView_(ADXRecyclerView_LayoutManager *self, ADXRecyclerView_Recycler *recycler, jint index, ADView *view);

__attribute__((unused)) static jboolean ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_(jint childSize, jint spec, jint dimension);

@interface ADXRecyclerView_LayoutManager_1 : NSObject < ADXViewBoundsCheck_Callback > {
 @public
  ADXRecyclerView_LayoutManager *this$0_;
}

- (instancetype)initWithADXRecyclerView_LayoutManager:(ADXRecyclerView_LayoutManager *)outer$;

- (ADView *)getChildAtWithInt:(jint)index;

- (jint)getParentStart;

- (jint)getParentEnd;

- (jint)getChildStartWithADView:(ADView *)view;

- (jint)getChildEndWithADView:(ADView *)view;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_LayoutManager_1)

__attribute__((unused)) static void ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager_1 *self, ADXRecyclerView_LayoutManager *outer$);

__attribute__((unused)) static ADXRecyclerView_LayoutManager_1 *new_ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_LayoutManager_1 *create_ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$);

@interface ADXRecyclerView_LayoutManager_2 : NSObject < ADXViewBoundsCheck_Callback > {
 @public
  ADXRecyclerView_LayoutManager *this$0_;
}

- (instancetype)initWithADXRecyclerView_LayoutManager:(ADXRecyclerView_LayoutManager *)outer$;

- (ADView *)getChildAtWithInt:(jint)index;

- (jint)getParentStart;

- (jint)getParentEnd;

- (jint)getChildStartWithADView:(ADView *)view;

- (jint)getChildEndWithADView:(ADView *)view;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXRecyclerView_LayoutManager_2)

__attribute__((unused)) static void ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager_2 *self, ADXRecyclerView_LayoutManager *outer$);

__attribute__((unused)) static ADXRecyclerView_LayoutManager_2 *new_ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXRecyclerView_LayoutManager_2 *create_ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$);

@interface ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry : NSObject

@end

@interface ADXRecyclerView_RecyclerListener : NSObject

@end

@interface ADXRecyclerView_OnChildAttachStateChangeListener : NSObject

@end

@interface ADXRecyclerView_ViewHolder () {
 @public
  jint mIsRecyclableCount_;
  jint mWasImportantForAccessibilityBeforeHidden_;
}

- (void)createPayloadsIfNeeded;

@end

inline id<JavaUtilList> ADXRecyclerView_ViewHolder_get_FULLUPDATE_PAYLOADS(void);
static id<JavaUtilList> ADXRecyclerView_ViewHolder_FULLUPDATE_PAYLOADS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXRecyclerView_ViewHolder, FULLUPDATE_PAYLOADS, id<JavaUtilList>)

__attribute__((unused)) static jint ADXRecyclerView_ViewHolder_getLayoutPosition(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static jint ADXRecyclerView_ViewHolder_getBindingAdapterPosition(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static jint ADXRecyclerView_ViewHolder_getAbsoluteAdapterPosition(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static jint ADXRecyclerView_ViewHolder_getOldPosition(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static jlong ADXRecyclerView_ViewHolder_getItemId(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static jint ADXRecyclerView_ViewHolder_getItemViewType(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static void ADXRecyclerView_ViewHolder_createPayloadsIfNeeded(ADXRecyclerView_ViewHolder *self);

__attribute__((unused)) static void ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(ADXRecyclerView_ViewHolder *self, jboolean recyclable);

__attribute__((unused)) static jboolean ADXRecyclerView_ViewHolder_isRecyclable(ADXRecyclerView_ViewHolder *self);

@interface ADXRecyclerView_State () {
 @public
  ADSparseArray *mData_;
}

@end

J2OBJC_FIELD_SETTER(ADXRecyclerView_State, mData_, ADSparseArray *)

@interface ADXRecyclerView_ItemAnimator () {
 @public
  jlong mAddDuration_;
  jlong mRemoveDuration_;
  jlong mMoveDuration_;
  jlong mChangeDuration_;
}

@end

NSString *ADXRecyclerView_TAG = @"RecyclerView";
NSString *ADXRecyclerView_TRACE_SCROLL_TAG = @"RV Scroll";
NSString *ADXRecyclerView_TRACE_BIND_VIEW_TAG = @"RV OnBindView";
NSString *ADXRecyclerView_TRACE_PREFETCH_TAG = @"RV Prefetch";
NSString *ADXRecyclerView_TRACE_NESTED_PREFETCH_TAG = @"RV Nested Prefetch";
NSString *ADXRecyclerView_TRACE_CREATE_VIEW_TAG = @"RV CreateView";

@implementation ADXRecyclerView

- (NSString *)exceptionLabel {
  return JreStrcat("C$$@$@$@", ' ', [super description], @", adapter:", mAdapter_, @", layout:", mLayout_, @", context:", [self getContext]);
}

- (void)initChildrenHelper {
  ADXRecyclerView_initChildrenHelper(self);
}

- (void)initAdapterManager {
  JreStrongAssignAndConsume(&mAdapterHelper_, new_ADXAdapterHelper_initPackagePrivateWithADXAdapterHelper_Callback_(create_ADXRecyclerView_4_initWithADXRecyclerView_(self)));
}

- (void)setAdapterWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)adapter {
  [self setLayoutFrozenWithBoolean:false];
  ADXRecyclerView_setAdapterInternalWithADXRecyclerView_Adapter_withBoolean_withBoolean_(self, adapter, false, true);
  [self processDataSetCompletelyChangedWithBoolean:false];
  [self requestLayout];
}

- (void)removeAndRecycleViews {
  if (mItemAnimator_ != nil) {
    [mItemAnimator_ endAnimations];
  }
  if (mLayout_ != nil) {
    [mLayout_ removeAndRecycleAllViewsWithADXRecyclerView_Recycler:mRecycler_];
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) removeAndRecycleScrapIntWithADXRecyclerView_Recycler:mRecycler_];
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) clear];
}

- (void)setAdapterInternalWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)adapter
                                          withBoolean:(jboolean)compatibleWithPrevious
                                          withBoolean:(jboolean)removeAndRecycleViews {
  ADXRecyclerView_setAdapterInternalWithADXRecyclerView_Adapter_withBoolean_withBoolean_(self, adapter, compatibleWithPrevious, removeAndRecycleViews);
}

- (ADXRecyclerView_Adapter *)getAdapter {
  return mAdapter_;
}

- (void)setLayoutManagerWithADXRecyclerView_LayoutManager:(ADXRecyclerView_LayoutManager *)layout {
  if (layout == mLayout_) {
    return;
  }
  [self stopScroll];
  if (mLayout_ != nil) {
    if (mItemAnimator_ != nil) {
      [mItemAnimator_ endAnimations];
    }
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) removeAndRecycleAllViewsWithADXRecyclerView_Recycler:mRecycler_];
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) removeAndRecycleScrapIntWithADXRecyclerView_Recycler:mRecycler_];
    [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) clear];
    if (mIsAttached_) {
      [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) dispatchDetachedFromWindowWithADXRecyclerView:self withADXRecyclerView_Recycler:mRecycler_];
    }
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setRecyclerViewWithADXRecyclerView:nil];
    JreStrongAssign(&mLayout_, nil);
  }
  else {
    [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) clear];
  }
  [((ADXChildHelper *) nil_chk(mChildHelper_)) removeAllViewsUnfiltered];
  JreStrongAssign(&mLayout_, layout);
  if (layout != nil) {
    if (layout->mRecyclerView_ != nil) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$$", @"LayoutManager ", layout, @" is already attached to a RecyclerView:", [layout->mRecyclerView_ exceptionLabel]));
    }
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setRecyclerViewWithADXRecyclerView:self];
    if (mIsAttached_) {
      [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) dispatchAttachedToWindowWithADXRecyclerView:self];
    }
  }
  [mRecycler_ updateViewCacheSize];
  [self requestLayout];
}

- (void)addAnimatingViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(self, viewHolder);
}

- (ADXRecyclerView_LayoutManager *)getLayoutManager {
  return mLayout_;
}

- (ADXRecyclerView_RecycledViewPool *)getRecycledViewPool {
  return [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) getRecycledViewPool];
}

- (jint)getScrollState {
  return mScrollState_;
}

- (void)addItemDecorationWithADXRecyclerView_ItemDecoration:(ADXRecyclerView_ItemDecoration *)decor
                                                    withInt:(jint)index {
  if (mLayout_ != nil) {
    [mLayout_ assertNotInLayoutOrScrollWithNSString:@"Cannot add item decoration during a scroll  or layout"];
  }
  if ([((JavaUtilArrayList *) nil_chk(mItemDecorations_)) isEmpty]) {
    [self setWillNotDrawWithBoolean:false];
  }
  if (index < 0) {
    [mItemDecorations_ addWithId:decor];
  }
  else {
    [mItemDecorations_ addWithInt:index withId:decor];
  }
  [self markItemDecorInsetsDirty];
  [self requestLayout];
}

- (void)addItemDecorationWithADXRecyclerView_ItemDecoration:(ADXRecyclerView_ItemDecoration *)decor {
  [self addItemDecorationWithADXRecyclerView_ItemDecoration:decor withInt:-1];
}

- (void)setOnScrollListenerWithADXRecyclerView_OnScrollListener:(ADXRecyclerView_OnScrollListener *)listener {
  JreStrongAssign(&mScrollListener_, listener);
}

- (void)scrollToPositionWithInt:(jint)position {
  if (mLayoutSuppressed_) {
    return;
  }
  [self stopScroll];
  if (mLayout_ == nil) {
    ADLog_eWithNSString_withNSString_(ADXRecyclerView_TAG, @"Cannot scroll to position a LayoutManager set. Call setLayoutManager with a non-null argument.");
    return;
  }
  [mLayout_ scrollToPositionWithInt:position];
  [self awakenScrollBars];
}

- (void)scrollByWithInt:(jint)x
                withInt:(jint)y {
  if (mLayout_ == nil) {
    ADLog_eWithNSString_withNSString_(ADXRecyclerView_TAG, @"Cannot scroll without a LayoutManager set. Call setLayoutManager with a non-null argument.");
    return;
  }
  if (mLayoutSuppressed_) {
    return;
  }
  jboolean canScrollHorizontal = [mLayout_ canScrollHorizontally];
  jboolean canScrollVertical = [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) canScrollVertically];
  if (canScrollHorizontal || canScrollVertical) {
    [self scrollByInternalWithInt:canScrollHorizontal ? x : 0 withInt:canScrollVertical ? y : 0 withADView_MotionEvent:nil withInt:ADXRecyclerView_TYPE_TOUCH];
  }
}

- (void)scrollStepWithInt:(jint)dx
                  withInt:(jint)dy
             withIntArray:(IOSIntArray *)consumed {
  [self startInterceptRequestLayout];
  [self onEnterLayoutOrScroll];
  ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_SCROLL_TAG);
  ADXRecyclerView_fillRemainingScrollValuesWithADXRecyclerView_State_(self, mState_);
  jint consumedX = 0;
  jint consumedY = 0;
  if (dx != 0) {
    consumedX = [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) scrollHorizontallyByWithInt:dx withADXRecyclerView_Recycler:mRecycler_ withADXRecyclerView_State:mState_];
  }
  if (dy != 0) {
    consumedY = [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) scrollVerticallyByWithInt:dy withADXRecyclerView_Recycler:mRecycler_ withADXRecyclerView_State:mState_];
  }
  ADXTraceCompat_endSection();
  [self repositionShadowingViews];
  [self onExitLayoutOrScroll];
  [self stopInterceptRequestLayoutWithBoolean:false];
  if (consumed != nil) {
    *IOSIntArray_GetRef(consumed, 0) = consumedX;
    *IOSIntArray_GetRef(consumed, 1) = consumedY;
  }
}

- (void)consumePendingUpdateOperations {
  if (!mFirstLayoutComplete_ || mDataSetHasChangedAfterLayout_) {
    ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG);
    [self dispatchLayout];
    ADXTraceCompat_endSection();
    return;
  }
  if (![((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) hasPendingUpdates]) {
    return;
  }
  if ([((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) hasAnyUpdateTypesWithInt:ADXAdapterHelper_UpdateOp_UPDATE] && ![((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) hasAnyUpdateTypesWithInt:ADXAdapterHelper_UpdateOp_ADD | ADXAdapterHelper_UpdateOp_REMOVE | ADXAdapterHelper_UpdateOp_MOVE]) {
    ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_HANDLE_ADAPTER_UPDATES_TAG);
    [self startInterceptRequestLayout];
    [self onEnterLayoutOrScroll];
    [((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) preProcess];
    if (!mLayoutWasDefered_) {
      if (ADXRecyclerView_hasUpdatedView(self)) {
        [self dispatchLayout];
      }
      else {
        [((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) consumePostponedUpdates];
      }
    }
    [self stopInterceptRequestLayoutWithBoolean:true];
    [self onExitLayoutOrScroll];
    ADXTraceCompat_endSection();
  }
  else if ([((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) hasPendingUpdates]) {
    ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG);
    [self dispatchLayout];
    ADXTraceCompat_endSection();
  }
}

- (jboolean)hasUpdatedView {
  return ADXRecyclerView_hasUpdatedView(self);
}

- (jboolean)scrollByInternalWithInt:(jint)x
                            withInt:(jint)y
             withADView_MotionEvent:(ADView_MotionEvent *)ev
                            withInt:(jint)type {
  jint unconsumedX = 0;
  jint unconsumedY = 0;
  jint consumedX = 0;
  jint consumedY = 0;
  [self consumePendingUpdateOperations];
  if (mAdapter_ != nil) {
    *IOSIntArray_GetRef(nil_chk(mReusableIntPair_), 0) = 0;
    *IOSIntArray_GetRef(mReusableIntPair_, 1) = 0;
    [self scrollStepWithInt:x withInt:y withIntArray:mReusableIntPair_];
    consumedX = IOSIntArray_Get(mReusableIntPair_, 0);
    consumedY = IOSIntArray_Get(mReusableIntPair_, 1);
    unconsumedX = x - consumedX;
    unconsumedY = y - consumedY;
  }
  if (![((JavaUtilArrayList *) nil_chk(mItemDecorations_)) isEmpty]) {
    [self invalidate];
  }
  *IOSIntArray_GetRef(nil_chk(mReusableIntPair_), 0) = 0;
  *IOSIntArray_GetRef(mReusableIntPair_, 1) = 0;
  ADXRecyclerView_dispatchNestedScrollWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(self, consumedX, consumedY, unconsumedX, unconsumedY, mScrollOffset_, type, mReusableIntPair_);
  unconsumedX -= IOSIntArray_Get(mReusableIntPair_, 0);
  unconsumedY -= IOSIntArray_Get(mReusableIntPair_, 1);
  jboolean consumedNestedScroll = IOSIntArray_Get(mReusableIntPair_, 0) != 0 || IOSIntArray_Get(mReusableIntPair_, 1) != 0;
  mLastTouchX_ -= IOSIntArray_Get(nil_chk(mScrollOffset_), 0);
  mLastTouchY_ -= IOSIntArray_Get(mScrollOffset_, 1);
  *IOSIntArray_GetRef(nil_chk(mNestedOffsets_), 0) += IOSIntArray_Get(mScrollOffset_, 0);
  *IOSIntArray_GetRef(mNestedOffsets_, 1) += IOSIntArray_Get(mScrollOffset_, 1);
  if ([self getOverScrollMode] != ADView_OVER_SCROLL_NEVER) {
    if (ev != nil && !ADXRecyclerView_MotionEventCompat_isFromSourceWithADView_MotionEvent_withInt_(ev, ADXRecyclerView_InputDevice_SOURCE_MOUSE)) {
      ADXRecyclerView_pullGlowsWithFloat_withFloat_withFloat_withFloat_(self, [ev getX], unconsumedX, [ev getY], unconsumedY);
    }
    [self considerReleasingGlowsOnScrollWithInt:x withInt:y];
  }
  if (consumedX != 0 || consumedY != 0) {
    [self dispatchOnScrolledWithInt:consumedX withInt:consumedY];
  }
  if (![self awakenScrollBars]) {
    [self invalidate];
  }
  return consumedNestedScroll || consumedX != 0 || consumedY != 0;
}

- (jint)computeHorizontalScrollOffset {
  if (mLayout_ == nil) {
    return 0;
  }
  return [mLayout_ canScrollHorizontally] ? [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) computeHorizontalScrollOffsetWithADXRecyclerView_State:mState_] : 0;
}

- (jint)computeHorizontalScrollExtent {
  if (mLayout_ == nil) {
    return 0;
  }
  return [mLayout_ canScrollHorizontally] ? [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) computeHorizontalScrollExtentWithADXRecyclerView_State:mState_] : 0;
}

- (jint)computeHorizontalScrollRange {
  if (mLayout_ == nil) {
    return 0;
  }
  return [mLayout_ canScrollHorizontally] ? [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) computeHorizontalScrollRangeWithADXRecyclerView_State:mState_] : 0;
}

- (jint)computeVerticalScrollOffset {
  if (mLayout_ == nil) {
    return 0;
  }
  return [mLayout_ canScrollVertically] ? [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) computeVerticalScrollOffsetWithADXRecyclerView_State:mState_] : 0;
}

- (jint)computeVerticalScrollExtent {
  if (mLayout_ == nil) {
    return 0;
  }
  return [mLayout_ canScrollVertically] ? [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) computeVerticalScrollExtentWithADXRecyclerView_State:mState_] : 0;
}

- (jint)computeVerticalScrollRange {
  if (mLayout_ == nil) {
    return 0;
  }
  return [mLayout_ canScrollVertically] ? [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) computeVerticalScrollRangeWithADXRecyclerView_State:mState_] : 0;
}

- (void)startInterceptRequestLayout {
  mInterceptRequestLayoutDepth_++;
  if (mInterceptRequestLayoutDepth_ == 1 && !mLayoutSuppressed_) {
    mLayoutWasDefered_ = false;
  }
}

- (void)stopInterceptRequestLayoutWithBoolean:(jboolean)performLayoutChildren {
  if (mInterceptRequestLayoutDepth_ < 1) {
    mInterceptRequestLayoutDepth_ = 1;
  }
  if (!performLayoutChildren && !mLayoutSuppressed_) {
    mLayoutWasDefered_ = false;
  }
  if (mInterceptRequestLayoutDepth_ == 1) {
    if (performLayoutChildren && mLayoutWasDefered_ && !mLayoutSuppressed_ && mLayout_ != nil && mAdapter_ != nil) {
      [self dispatchLayout];
    }
    if (!mLayoutSuppressed_) {
      mLayoutWasDefered_ = false;
    }
  }
  mInterceptRequestLayoutDepth_--;
}

- (void)suppressLayoutWithBoolean:(jboolean)suppress {
  ADXRecyclerView_suppressLayoutWithBoolean_(self, suppress);
}

- (void)setLayoutFrozenWithBoolean:(jboolean)frozen {
  ADXRecyclerView_suppressLayoutWithBoolean_(self, frozen);
}

- (void)assertInLayoutOrScrollWithNSString:(NSString *)message {
  if (![self isComputingLayout]) {
    if (message == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Cannot call this method unless RecyclerView is computing a layout or scrolling", [self exceptionLabel]));
    }
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", message, [self exceptionLabel]));
  }
}

- (void)assertNotInLayoutOrScrollWithNSString:(NSString *)message {
  if ([self isComputingLayout]) {
    if (message == nil) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$", @"Cannot call this method while RecyclerView is computing a layout or scrolling", [self exceptionLabel]));
    }
    @throw create_JavaLangIllegalStateException_initWithNSString_(message);
  }
  if (mDispatchScrollCounter_ > 0) {
    ADLog_wWithNSString_withNSString_withJavaLangThrowable_(ADXRecyclerView_TAG, @"Cannot call this method in a scroll callback. Scroll callbacks mightbe run during a measure & layout pass where you cannot change theRecyclerView data. Any method call that might change the structureof the RecyclerView or the adapter contents should be postponed tothe next frame.", create_JavaLangIllegalStateException_initWithNSString_([self exceptionLabel]));
  }
}

- (void)onMeasureWithInt:(jint)widthSpec
                 withInt:(jint)heightSpec {
  if (mLayout_ == nil) {
    [self defaultOnMeasureWithInt:widthSpec withInt:heightSpec];
    return;
  }
  if ([mLayout_ isAutoMeasureEnabled]) {
    jint widthMode = ADView_MeasureSpec_getModeWithInt_(widthSpec);
    jint heightMode = ADView_MeasureSpec_getModeWithInt_(heightSpec);
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) onMeasureWithADXRecyclerView_Recycler:mRecycler_ withADXRecyclerView_State:mState_ withInt:widthSpec withInt:heightSpec];
    mLastAutoMeasureSkippedDueToExact_ = (widthMode == ADView_MeasureSpec_EXACTLY && heightMode == ADView_MeasureSpec_EXACTLY);
    if (mLastAutoMeasureSkippedDueToExact_ || mAdapter_ == nil) {
      return;
    }
    if (((ADXRecyclerView_State *) nil_chk(mState_))->mLayoutStep_ == ADXRecyclerView_State_STEP_START) {
      ADXRecyclerView_dispatchLayoutStep1(self);
    }
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setMeasureSpecsWithInt:widthSpec withInt:heightSpec];
    mState_->mIsMeasuring_ = true;
    ADXRecyclerView_dispatchLayoutStep2(self);
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setMeasuredDimensionFromChildrenWithInt:widthSpec withInt:heightSpec];
    if ([((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) shouldMeasureTwice]) {
      [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setMeasureSpecsWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredWidth], ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([self getMeasuredHeight], ADView_MeasureSpec_EXACTLY)];
      mState_->mIsMeasuring_ = true;
      ADXRecyclerView_dispatchLayoutStep2(self);
      [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setMeasuredDimensionFromChildrenWithInt:widthSpec withInt:heightSpec];
    }
    mLastAutoMeasureNonExactMeasuredWidth_ = [self getMeasuredWidth];
    mLastAutoMeasureNonExactMeasuredHeight_ = [self getMeasuredHeight];
  }
  else {
    if (mHasFixedSize_) {
      [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) onMeasureWithADXRecyclerView_Recycler:mRecycler_ withADXRecyclerView_State:mState_ withInt:widthSpec withInt:heightSpec];
      return;
    }
    if (mAdapterUpdateDuringMeasure_) {
      [self startInterceptRequestLayout];
      [self onEnterLayoutOrScroll];
      ADXRecyclerView_processAdapterUpdatesAndSetAnimationFlags(self);
      [self onExitLayoutOrScroll];
      if (((ADXRecyclerView_State *) nil_chk(mState_))->mRunPredictiveAnimations_) {
        mState_->mInPreLayout_ = true;
      }
      else {
        [((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) consumeUpdatesInOnePass];
        mState_->mInPreLayout_ = false;
      }
      mAdapterUpdateDuringMeasure_ = false;
      [self stopInterceptRequestLayoutWithBoolean:false];
    }
    else if (((ADXRecyclerView_State *) nil_chk(mState_))->mRunPredictiveAnimations_) {
      [self setMeasuredDimensionWithInt:[self getMeasuredWidth] withInt:[self getMeasuredHeight]];
      return;
    }
    if (mAdapter_ != nil) {
      mState_->mItemCount_ = [mAdapter_ getItemCount];
    }
    else {
      mState_->mItemCount_ = 0;
    }
    [self startInterceptRequestLayout];
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) onMeasureWithADXRecyclerView_Recycler:mRecycler_ withADXRecyclerView_State:mState_ withInt:widthSpec withInt:heightSpec];
    [self stopInterceptRequestLayoutWithBoolean:false];
    mState_->mInPreLayout_ = false;
  }
}

- (void)defaultOnMeasureWithInt:(jint)widthSpec
                        withInt:(jint)heightSpec {
  jint width = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(widthSpec, [self getPaddingLeft] + [self getPaddingRight], ADXViewCompat_getMinimumWidthWithADView_(self));
  jint height = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(heightSpec, [self getPaddingTop] + [self getPaddingBottom], ADXViewCompat_getMinimumHeightWithADView_(self));
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (void)onEnterLayoutOrScroll {
  mLayoutOrScrollCounter_++;
}

- (void)onExitLayoutOrScroll {
  [self onExitLayoutOrScrollWithBoolean:true];
}

- (void)onExitLayoutOrScrollWithBoolean:(jboolean)enableChangeEvents {
  mLayoutOrScrollCounter_--;
  if (mLayoutOrScrollCounter_ < 1) {
    mLayoutOrScrollCounter_ = 0;
    if (enableChangeEvents) {
      ADXRecyclerView_dispatchContentChangedIfNecessary(self);
      [self dispatchPendingImportantForAccessibilityChanges];
    }
  }
}

- (jboolean)isComputingLayout {
  return mLayoutOrScrollCounter_ > 0;
}

- (void)processAdapterUpdatesAndSetAnimationFlags {
  ADXRecyclerView_processAdapterUpdatesAndSetAnimationFlags(self);
}

- (void)dispatchLayout {
  if (mAdapter_ == nil) {
    ADLog_wWithNSString_withNSString_(ADXRecyclerView_TAG, @"No adapter attached; skipping layout");
    return;
  }
  if (mLayout_ == nil) {
    ADLog_eWithNSString_withNSString_(ADXRecyclerView_TAG, @"No layout manager attached; skipping layout");
    return;
  }
  ((ADXRecyclerView_State *) nil_chk(mState_))->mIsMeasuring_ = false;
  jboolean needsRemeasureDueToExactSkip = mLastAutoMeasureSkippedDueToExact_ && (mLastAutoMeasureNonExactMeasuredWidth_ != [self getWidth] || mLastAutoMeasureNonExactMeasuredHeight_ != [self getHeight]);
  mLastAutoMeasureNonExactMeasuredWidth_ = 0;
  mLastAutoMeasureNonExactMeasuredHeight_ = 0;
  mLastAutoMeasureSkippedDueToExact_ = false;
  if (mState_->mLayoutStep_ == ADXRecyclerView_State_STEP_START) {
    ADXRecyclerView_dispatchLayoutStep1(self);
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setExactMeasureSpecsFromWithADXRecyclerView:self];
    ADXRecyclerView_dispatchLayoutStep2(self);
  }
  else if ([((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) hasUpdates] || needsRemeasureDueToExactSkip || [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) getWidth] != [self getWidth] || [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) getHeight] != [self getHeight]) {
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setExactMeasureSpecsFromWithADXRecyclerView:self];
    ADXRecyclerView_dispatchLayoutStep2(self);
  }
  else {
    [((ADXRecyclerView_LayoutManager *) nil_chk(mLayout_)) setExactMeasureSpecsFromWithADXRecyclerView:self];
  }
  ADXRecyclerView_dispatchLayoutStep3(self);
}

- (void)dispatchLayoutStep1 {
  ADXRecyclerView_dispatchLayoutStep1(self);
}

- (void)dispatchLayoutStep2 {
  ADXRecyclerView_dispatchLayoutStep2(self);
}

- (void)dispatchLayoutStep3 {
  ADXRecyclerView_dispatchLayoutStep3(self);
}

- (void)handleMissingPreInfoForChangeErrorWithLong:(jlong)key
                    withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                    withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)oldChangeViewHolder {
  ADXRecyclerView_handleMissingPreInfoForChangeErrorWithLong_withADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_(self, key, holder, oldChangeViewHolder);
}

- (void)recordAnimationInfoIfBouncedHiddenViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
                             withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)animationInfo {
  [((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder)) setFlagsWithInt:0 withInt:ADXRecyclerView_ViewHolder_FLAG_BOUNCED_FROM_HIDDEN_LIST];
  if (((ADXRecyclerView_State *) nil_chk(mState_))->mTrackOldChangeHolders_ && [viewHolder isUpdated] && ![viewHolder isRemoved] && ![viewHolder shouldIgnore]) {
    jlong key = [self getChangedHolderKeyWithADXRecyclerView_ViewHolder:viewHolder];
    [((ADXViewInfoStore *) nil_chk(mViewInfoStore_)) addToOldChangeHoldersWithLong:key withADXRecyclerView_ViewHolder:viewHolder];
  }
  [((ADXViewInfoStore *) nil_chk(mViewInfoStore_)) addToPreLayoutWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
}

- (void)findMinMaxChildLayoutPositionsWithIntArray:(IOSIntArray *)into {
  ADXRecyclerView_findMinMaxChildLayoutPositionsWithIntArray_(self, into);
}

- (jboolean)didChildRangeChangeWithInt:(jint)minPositionPreLayout
                               withInt:(jint)maxPositionPreLayout {
  return ADXRecyclerView_didChildRangeChangeWithInt_withInt_(self, minPositionPreLayout, maxPositionPreLayout);
}

- (void)removeDetachedViewWithADView:(ADView *)child
                         withBoolean:(jboolean)animate {
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  if (vh != nil) {
    if ([vh isTmpDetached]) {
      [vh clearTmpDetachFlag];
    }
    else if (![vh shouldIgnore]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Called removeDetachedView with a view which is not flagged as tmp detached.", vh, [self exceptionLabel]));
    }
  }
  [self dispatchChildDetachedWithADView:child];
}

- (jlong)getChangedHolderKeyWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  return ADXRecyclerView_Adapter_hasStableIds(nil_chk(mAdapter_)) ? ADXRecyclerView_ViewHolder_getItemId(nil_chk(holder)) : ((ADXRecyclerView_ViewHolder *) nil_chk(holder))->mPosition_;
}

- (void)animateAppearanceWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)itemHolder
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preLayoutInfo
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postLayoutInfo {
  ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(nil_chk(itemHolder), false);
  if ([((ADXRecyclerView_ItemAnimator *) nil_chk(mItemAnimator_)) animateAppearanceWithADXRecyclerView_ViewHolder:itemHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:preLayoutInfo withADXRecyclerView_ItemAnimator_ItemHolderInfo:postLayoutInfo]) {
    [self postAnimationRunner];
  }
}

- (void)animateDisappearanceWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
           withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preLayoutInfo
           withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postLayoutInfo {
  ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(self, holder);
  ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(nil_chk(holder), false);
  if ([((ADXRecyclerView_ItemAnimator *) nil_chk(mItemAnimator_)) animateDisappearanceWithADXRecyclerView_ViewHolder:holder withADXRecyclerView_ItemAnimator_ItemHolderInfo:preLayoutInfo withADXRecyclerView_ItemAnimator_ItemHolderInfo:postLayoutInfo]) {
    [self postAnimationRunner];
  }
}

- (void)animateChangeWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)oldHolder
                     withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)newHolder
    withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
    withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo
                                        withBoolean:(jboolean)oldHolderDisappearing
                                        withBoolean:(jboolean)newHolderDisappearing {
  ADXRecyclerView_animateChangeWithADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withBoolean_withBoolean_(self, oldHolder, newHolder, preInfo, postInfo, oldHolderDisappearing, newHolderDisappearing);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_ON_LAYOUT_TAG);
  [self dispatchLayout];
  ADXTraceCompat_endSection();
  mFirstLayoutComplete_ = true;
}

- (void)markItemDecorInsetsDirty {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i];
    ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mInsetsDirty_ = true;
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) markItemDecorInsetsDirty];
}

- (void)saveOldPositions {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (![((ADXRecyclerView_ViewHolder *) nil_chk(holder)) shouldIgnore]) {
      [holder saveOldPosition];
    }
  }
}

- (void)clearOldPositions {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (![((ADXRecyclerView_ViewHolder *) nil_chk(holder)) shouldIgnore]) {
      [holder clearOldPosition];
    }
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) clearOldPositions];
}

- (void)offsetPositionRecordsForMoveWithInt:(jint)from
                                    withInt:(jint)to {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  jint start;
  jint end;
  jint inBetweenOffset;
  if (from < to) {
    start = from;
    end = to;
    inBetweenOffset = -1;
  }
  else {
    start = to;
    end = from;
    inBetweenOffset = 1;
  }
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (holder == nil || holder->mPosition_ < start || holder->mPosition_ > end) {
      continue;
    }
    if (holder->mPosition_ == from) {
      [holder offsetPositionWithInt:to - from withBoolean:false];
    }
    else {
      [holder offsetPositionWithInt:inBetweenOffset withBoolean:false];
    }
    ((ADXRecyclerView_State *) nil_chk(mState_))->mStructureChanged_ = true;
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) offsetPositionRecordsForMoveWithInt:from withInt:to];
  [self requestLayout];
}

- (void)offsetPositionRecordsForInsertWithInt:(jint)positionStart
                                      withInt:(jint)itemCount {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (holder != nil && ![holder shouldIgnore] && holder->mPosition_ >= positionStart) {
      [holder offsetPositionWithInt:itemCount withBoolean:false];
      ((ADXRecyclerView_State *) nil_chk(mState_))->mStructureChanged_ = true;
    }
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) offsetPositionRecordsForInsertWithInt:positionStart withInt:itemCount];
  [self requestLayout];
}

- (void)offsetPositionRecordsForRemoveWithInt:(jint)positionStart
                                      withInt:(jint)itemCount
                                  withBoolean:(jboolean)applyToPreLayout {
  jint positionEnd = positionStart + itemCount;
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (holder != nil && ![holder shouldIgnore]) {
      if (holder->mPosition_ >= positionEnd) {
        [holder offsetPositionWithInt:-itemCount withBoolean:applyToPreLayout];
        ((ADXRecyclerView_State *) nil_chk(mState_))->mStructureChanged_ = true;
      }
      else if (holder->mPosition_ >= positionStart) {
        [holder flagRemovedAndOffsetPositionWithInt:positionStart - 1 withInt:-itemCount withBoolean:applyToPreLayout];
        ((ADXRecyclerView_State *) nil_chk(mState_))->mStructureChanged_ = true;
      }
    }
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) offsetPositionRecordsForRemoveWithInt:positionStart withInt:itemCount withBoolean:applyToPreLayout];
  [self requestLayout];
}

- (void)viewRangeUpdateWithInt:(jint)positionStart
                       withInt:(jint)itemCount
                        withId:(id)payload {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  jint positionEnd = positionStart + itemCount;
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i];
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
    if (holder == nil || [holder shouldIgnore]) {
      continue;
    }
    if (holder->mPosition_ >= positionStart && holder->mPosition_ < positionEnd) {
      [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_UPDATE];
      [holder addChangePayloadWithId:payload];
      ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mInsetsDirty_ = true;
    }
  }
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) viewRangeUpdateWithInt:positionStart withInt:itemCount];
}

- (jboolean)canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  return mItemAnimator_ == nil || [mItemAnimator_ canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:viewHolder withJavaUtilList:[((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder)) getUnmodifiedPayloads]];
}

- (void)processDataSetCompletelyChangedWithBoolean:(jboolean)dispatchItemsChanged {
  mDispatchItemsChangedEvent_ |= dispatchItemsChanged;
  mDataSetHasChangedAfterLayout_ = true;
  [self markKnownViewsInvalid];
}

- (void)markKnownViewsInvalid {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (holder != nil && ![holder shouldIgnore]) {
      [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_UPDATE | ADXRecyclerView_ViewHolder_FLAG_INVALID];
    }
  }
  [self markItemDecorInsetsDirty];
  [((ADXRecyclerView_Recycler *) nil_chk(mRecycler_)) markKnownViewsInvalid];
}

- (ADXRecyclerView_ViewHolder *)getChildViewHolderWithADView:(ADView *)child {
  id<ADViewParent> parent = [((ADView *) nil_chk(child)) getParent];
  if (parent != nil && parent != self) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$@", @"View ", child, @" is not a direct child of ", self));
  }
  return ADXRecyclerView_getChildViewHolderIntWithADView_(child);
}

- (ADView *)findContainingItemViewWithADView:(ADView *)view {
  id<ADViewParent> parent = JreRetainedLocalValue([((ADView *) nil_chk(view)) getParent]);
  while (parent != nil && parent != self && [parent isKindOfClass:[ADView class]]) {
    view = (ADView *) cast_chk(parent, [ADView class]);
    parent = [view getParent];
  }
  return parent == self ? view : nil;
}

+ (ADXRecyclerView_ViewHolder *)getChildViewHolderIntWithADView:(ADView *)child {
  return ADXRecyclerView_getChildViewHolderIntWithADView_(child);
}

- (ADXRecyclerView_ViewHolder *)findViewHolderForPositionWithInt:(jint)position {
  return [self findViewHolderForPositionWithInt:position withBoolean:false];
}

- (ADXRecyclerView_ViewHolder *)findViewHolderForPositionWithInt:(jint)position
                                                     withBoolean:(jboolean)checkNewPosition {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildCount];
  ADXRecyclerView_ViewHolder *hidden = nil;
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(mChildHelper_)) getUnfilteredChildAtWithInt:i]);
    if (holder != nil && ![holder isRemoved]) {
      if (checkNewPosition) {
        if (holder->mPosition_ != position) {
          continue;
        }
      }
      else if (ADXRecyclerView_ViewHolder_getLayoutPosition(holder) != position) {
        continue;
      }
      if ([((ADXChildHelper *) nil_chk(mChildHelper_)) isHiddenWithADView:holder->itemView_]) {
        hidden = holder;
      }
      else {
        return holder;
      }
    }
  }
  return hidden;
}

- (void)offsetChildrenVerticalWithInt:(jint)dy {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getChildCount];
  for (jint i = 0; i < childCount; i++) {
    [((ADView *) nil_chk([((ADXChildHelper *) nil_chk(mChildHelper_)) getChildAtWithInt:i])) offsetTopAndBottomWithInt:dy];
  }
}

- (void)onChildAttachedToWindowWithADView:(ADView *)child {
}

- (void)onChildDetachedFromWindowWithADView:(ADView *)child {
}

- (void)offsetChildrenHorizontalWithInt:(jint)dx {
  jint childCount = [((ADXChildHelper *) nil_chk(mChildHelper_)) getChildCount];
  for (jint i = 0; i < childCount; i++) {
    [((ADView *) nil_chk([((ADXChildHelper *) nil_chk(mChildHelper_)) getChildAtWithInt:i])) offsetLeftAndRightWithInt:dx];
  }
}

+ (void)getDecoratedBoundsWithMarginsIntWithADView:(ADView *)view
                                        withADRect:(ADRect *)outBounds {
  ADXRecyclerView_getDecoratedBoundsWithMarginsIntWithADView_withADRect_(view, outBounds);
}

- (ADRect *)getItemDecorInsetsForChildWithADView:(ADView *)child {
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  if (!((ADXRecyclerView_LayoutParams *) nil_chk(lp))->mInsetsDirty_) {
    return lp->mDecorInsets_;
  }
  if ([((ADXRecyclerView_State *) nil_chk(mState_)) isPreLayout] && ([lp isItemChanged] || [lp isViewInvalid])) {
    return lp->mDecorInsets_;
  }
  ADRect *insets = lp->mDecorInsets_;
  [((ADRect *) nil_chk(insets)) setWithInt:0 withInt:0 withInt:0 withInt:0];
  jint decorCount = [((JavaUtilArrayList *) nil_chk(mItemDecorations_)) size];
  for (jint i = 0; i < decorCount; i++) {
    [((ADRect *) nil_chk(mTempRect_)) setWithInt:0 withInt:0 withInt:0 withInt:0];
    [((ADXRecyclerView_ItemDecoration *) nil_chk([mItemDecorations_ getWithInt:i])) getItemOffsetsWithADRect:mTempRect_ withADView:child withADXRecyclerView:self withADXRecyclerView_State:mState_];
    insets->left_ += mTempRect_->left_;
    insets->top_ += mTempRect_->top_;
    insets->right_ += mTempRect_->right_;
    insets->bottom_ += mTempRect_->bottom_;
  }
  lp->mInsetsDirty_ = false;
  return insets;
}

- (void)dispatchOnScrolledWithInt:(jint)hresult
                          withInt:(jint)vresult {
  mDispatchScrollCounter_++;
  jint scrollX = ADXRecyclerView_getScrollX(self);
  jint scrollY = ADXRecyclerView_getScrollY(self);
  ADXRecyclerView_onScrollChangedWithInt_withInt_withInt_withInt_(self, scrollX, scrollY, scrollX - hresult, scrollY - vresult);
  ADXRecyclerView_onScrolledWithInt_withInt_(self, hresult, vresult);
  if (mScrollListener_ != nil) {
    [mScrollListener_ onScrolledWithADXRecyclerView:self withInt:hresult withInt:vresult];
  }
  if (mScrollListeners_ != nil) {
    for (jint i = [mScrollListeners_ size] - 1; i >= 0; i--) {
      [((ADXRecyclerView_OnScrollListener *) nil_chk([((id<JavaUtilList>) nil_chk(mScrollListeners_)) getWithInt:i])) onScrolledWithADXRecyclerView:self withInt:hresult withInt:vresult];
    }
  }
  mDispatchScrollCounter_--;
}

- (jboolean)hasPendingAdapterUpdates {
  return !mFirstLayoutComplete_ || mDataSetHasChangedAfterLayout_ || [((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) hasPendingUpdates];
}

- (void)repositionShadowingViews {
  jint count = [((ADXChildHelper *) nil_chk(mChildHelper_)) getChildCount];
  for (jint i = 0; i < count; i++) {
    ADView *view = JreRetainedLocalValue([((ADXChildHelper *) nil_chk(mChildHelper_)) getChildAtWithInt:i]);
    ADXRecyclerView_ViewHolder *holder = JreRetainedLocalValue([self getChildViewHolderWithADView:view]);
    if (holder != nil && holder->mShadowingHolder_ != nil) {
      ADView *shadowingView = JreRetainedLocalValue(holder->mShadowingHolder_->itemView_);
      jint left = [((ADView *) nil_chk(view)) getLeft];
      jint top = [view getTop];
      if (left != [((ADView *) nil_chk(shadowingView)) getLeft] || top != [shadowingView getTop]) {
        [shadowingView layoutWithInt:left withInt:top withInt:left + [shadowingView getWidth] withInt:top + [shadowingView getHeight]];
      }
    }
  }
}

+ (ADXRecyclerView *)findNestedRecyclerViewWithADView:(ADView *)view {
  return ADXRecyclerView_findNestedRecyclerViewWithADView_(view);
}

+ (void)clearNestedRecyclerViewIfNotNestedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  ADXRecyclerView_clearNestedRecyclerViewIfNotNestedWithADXRecyclerView_ViewHolder_(holder);
}

- (jlong)getNanoTime {
  {
    return JavaLangSystem_nanoTime();
  }
}

- (void)dispatchChildDetachedWithADView:(ADView *)child {
  ADXRecyclerView_ViewHolder *viewHolder = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  [self onChildDetachedFromWindowWithADView:child];
  if (mAdapter_ != nil && viewHolder != nil) {
    [mAdapter_ onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:viewHolder];
  }
  if (mOnChildAttachStateListeners_ != nil) {
    jint cnt = [mOnChildAttachStateListeners_ size];
    for (jint i = cnt - 1; i >= 0; i--) {
      [((id<ADXRecyclerView_OnChildAttachStateChangeListener>) nil_chk([((id<JavaUtilList>) nil_chk(mOnChildAttachStateListeners_)) getWithInt:i])) onChildViewDetachedFromWindowWithADView:child];
    }
  }
}

- (void)dispatchChildAttachedWithADView:(ADView *)child {
  ADXRecyclerView_ViewHolder *viewHolder = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  [self onChildAttachedToWindowWithADView:child];
  if (mAdapter_ != nil && viewHolder != nil) {
    [mAdapter_ onViewAttachedToWindowWithADXRecyclerView_ViewHolder:viewHolder];
  }
  if (mOnChildAttachStateListeners_ != nil) {
    jint cnt = [mOnChildAttachStateListeners_ size];
    for (jint i = cnt - 1; i >= 0; i--) {
      [((id<ADXRecyclerView_OnChildAttachStateChangeListener>) nil_chk([((id<JavaUtilList>) nil_chk(mOnChildAttachStateListeners_)) getWithInt:i])) onChildViewAttachedToWindowWithADView:child];
    }
  }
}

- (jint)getAdapterPositionInRecyclerViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder)) hasAnyOfTheFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_INVALID | ADXRecyclerView_ViewHolder_FLAG_REMOVED | ADXRecyclerView_ViewHolder_FLAG_ADAPTER_POSITION_UNKNOWN] || ![viewHolder isBound]) {
    return ADXRecyclerView_NO_POSITION;
  }
  return [((ADXAdapterHelper *) nil_chk(mAdapterHelper_)) applyPendingUpdatesToPositionWithInt:viewHolder->mPosition_];
}

- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow {
  return [((ADXRecyclerView_NestedScrollingChildHelper *) nil_chk(ADXRecyclerView_getScrollingChildHelper(self))) dispatchNestedScrollWithInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withIntArray:offsetInWindow];
}

- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow
                                withInt:(jint)type {
  return [((ADXRecyclerView_NestedScrollingChildHelper *) nil_chk(ADXRecyclerView_getScrollingChildHelper(self))) dispatchNestedScrollWithInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withIntArray:offsetInWindow withInt:type];
}

- (void)dispatchNestedScrollWithInt:(jint)dxConsumed
                            withInt:(jint)dyConsumed
                            withInt:(jint)dxUnconsumed
                            withInt:(jint)dyUnconsumed
                       withIntArray:(IOSIntArray *)offsetInWindow
                            withInt:(jint)type
                       withIntArray:(IOSIntArray *)consumed {
  ADXRecyclerView_dispatchNestedScrollWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(self, dxConsumed, dyConsumed, dxUnconsumed, dyUnconsumed, offsetInWindow, type, consumed);
}

- (ADXRecyclerView_NestedScrollingChildHelper *)getScrollingChildHelper {
  return ADXRecyclerView_getScrollingChildHelper(self);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dispatchPendingImportantForAccessibilityChanges {
}

- (void)dispatchContentChangedIfNecessary {
  ADXRecyclerView_dispatchContentChangedIfNecessary(self);
}

- (jboolean)predictiveItemAnimationsEnabled {
  return ADXRecyclerView_predictiveItemAnimationsEnabled(self);
}

- (void)saveFocusInfo {
  ADXRecyclerView_saveFocusInfo(self);
}

- (void)postAnimationRunner {
}

- (void)recoverFocusFromState {
  ADXRecyclerView_recoverFocusFromState(self);
}

- (void)resetFocusInfo {
  ADXRecyclerView_resetFocusInfo(self);
}

- (jint)getScrollY {
  return ADXRecyclerView_getScrollY(self);
}

- (jint)getScrollX {
  return ADXRecyclerView_getScrollX(self);
}

- (void)onScrollChangedWithInt:(jint)scrollX
                       withInt:(jint)scrollY
                       withInt:(jint)i
                       withInt:(jint)j {
  ADXRecyclerView_onScrollChangedWithInt_withInt_withInt_withInt_(self, scrollX, scrollY, i, j);
}

- (void)onScrolledWithInt:(jint)hresult
                  withInt:(jint)vresult {
  ADXRecyclerView_onScrolledWithInt_withInt_(self, hresult, vresult);
}

- (void)fillRemainingScrollValuesWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADXRecyclerView_fillRemainingScrollValuesWithADXRecyclerView_State_(self, state);
}

- (jboolean)isAccessibilityEnabled {
  return false;
}

- (void)postWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
}

- (jlong)getDrawingTime {
  return 0;
}

- (void)stopScroll {
}

- (void)registerObserverWithADXRecyclerView_AdapterDataObserver:(ADXRecyclerView_AdapterDataObserver *)observer {
}

- (jboolean)awakenScrollBars {
  return false;
}

- (void)considerReleasingGlowsOnScrollWithInt:(jint)dx
                                      withInt:(jint)dy {
}

- (void)pullGlowsWithFloat:(jfloat)x
                 withFloat:(jfloat)overscrollX
                 withFloat:(jfloat)y
                 withFloat:(jfloat)overscrollY {
  ADXRecyclerView_pullGlowsWithFloat_withFloat_withFloat_withFloat_(self, x, overscrollX, y, overscrollY);
}

- (jint)getOverScrollMode {
  return ADView_OVER_SCROLL_NEVER;
}

- (void)dealloc {
  RELEASE_(mObserver_);
  RELEASE_(mRecycler_);
  RELEASE_(mAdapterHelper_);
  RELEASE_(mChildHelper_);
  RELEASE_(mViewInfoStore_);
  RELEASE_(mTempRect_);
  RELEASE_(mTempRectF_);
  RELEASE_(mAdapter_);
  RELEASE_(mLayout_);
  RELEASE_(mRecyclerListener_);
  RELEASE_(mRecyclerListeners_);
  RELEASE_(mItemDecorations_);
  RELEASE_(mOnChildAttachStateListeners_);
  RELEASE_(mPrefetchRegistry_);
  RELEASE_(mState_);
  RELEASE_(mScrollListener_);
  RELEASE_(mScrollListeners_);
  RELEASE_(mMinMaxLayoutPositions_);
  RELEASE_(mScrollingChildHelper_);
  RELEASE_(mScrollOffset_);
  RELEASE_(mNestedOffsets_);
  RELEASE_(mReusableIntPair_);
  RELEASE_(mItemAnimatorRunner_);
  RELEASE_(mViewInfoProcessCallback_);
  RELEASE_(mPendingSavedState_);
  RELEASE_(mItemAnimator_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_Adapter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_LayoutManager;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_RecycledViewPool;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 19, 20, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 23, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 28, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 29, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 22, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 37, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 38, 39, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 40, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 45, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 48, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 49, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 52, 53, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 54, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 55, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x1, 56, 57, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 58, 57, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x8, 59, 57, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x1, 60, 14, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x0, 60, 61, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 66, 67, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x0, 68, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 69, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView;", 0x8, 70, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 71, 7, -1, -1, -1, -1 },
    { NULL, "J", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 72, 57, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 73, 57, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 74, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 75, 76, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 75, 77, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 75, 78, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_NestedScrollingChildHelper;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 82, 83, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 85, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 86, 87, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 88, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 90, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(exceptionLabel);
  methods[1].selector = @selector(initChildrenHelper);
  methods[2].selector = @selector(initAdapterManager);
  methods[3].selector = @selector(setAdapterWithADXRecyclerView_Adapter:);
  methods[4].selector = @selector(removeAndRecycleViews);
  methods[5].selector = @selector(setAdapterInternalWithADXRecyclerView_Adapter:withBoolean:withBoolean:);
  methods[6].selector = @selector(getAdapter);
  methods[7].selector = @selector(setLayoutManagerWithADXRecyclerView_LayoutManager:);
  methods[8].selector = @selector(addAnimatingViewWithADXRecyclerView_ViewHolder:);
  methods[9].selector = @selector(getLayoutManager);
  methods[10].selector = @selector(getRecycledViewPool);
  methods[11].selector = @selector(getScrollState);
  methods[12].selector = @selector(addItemDecorationWithADXRecyclerView_ItemDecoration:withInt:);
  methods[13].selector = @selector(addItemDecorationWithADXRecyclerView_ItemDecoration:);
  methods[14].selector = @selector(setOnScrollListenerWithADXRecyclerView_OnScrollListener:);
  methods[15].selector = @selector(scrollToPositionWithInt:);
  methods[16].selector = @selector(scrollByWithInt:withInt:);
  methods[17].selector = @selector(scrollStepWithInt:withInt:withIntArray:);
  methods[18].selector = @selector(consumePendingUpdateOperations);
  methods[19].selector = @selector(hasUpdatedView);
  methods[20].selector = @selector(scrollByInternalWithInt:withInt:withADView_MotionEvent:withInt:);
  methods[21].selector = @selector(computeHorizontalScrollOffset);
  methods[22].selector = @selector(computeHorizontalScrollExtent);
  methods[23].selector = @selector(computeHorizontalScrollRange);
  methods[24].selector = @selector(computeVerticalScrollOffset);
  methods[25].selector = @selector(computeVerticalScrollExtent);
  methods[26].selector = @selector(computeVerticalScrollRange);
  methods[27].selector = @selector(startInterceptRequestLayout);
  methods[28].selector = @selector(stopInterceptRequestLayoutWithBoolean:);
  methods[29].selector = @selector(suppressLayoutWithBoolean:);
  methods[30].selector = @selector(setLayoutFrozenWithBoolean:);
  methods[31].selector = @selector(assertInLayoutOrScrollWithNSString:);
  methods[32].selector = @selector(assertNotInLayoutOrScrollWithNSString:);
  methods[33].selector = @selector(onMeasureWithInt:withInt:);
  methods[34].selector = @selector(defaultOnMeasureWithInt:withInt:);
  methods[35].selector = @selector(onEnterLayoutOrScroll);
  methods[36].selector = @selector(onExitLayoutOrScroll);
  methods[37].selector = @selector(onExitLayoutOrScrollWithBoolean:);
  methods[38].selector = @selector(isComputingLayout);
  methods[39].selector = @selector(processAdapterUpdatesAndSetAnimationFlags);
  methods[40].selector = @selector(dispatchLayout);
  methods[41].selector = @selector(dispatchLayoutStep1);
  methods[42].selector = @selector(dispatchLayoutStep2);
  methods[43].selector = @selector(dispatchLayoutStep3);
  methods[44].selector = @selector(handleMissingPreInfoForChangeErrorWithLong:withADXRecyclerView_ViewHolder:withADXRecyclerView_ViewHolder:);
  methods[45].selector = @selector(recordAnimationInfoIfBouncedHiddenViewWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[46].selector = @selector(findMinMaxChildLayoutPositionsWithIntArray:);
  methods[47].selector = @selector(didChildRangeChangeWithInt:withInt:);
  methods[48].selector = @selector(removeDetachedViewWithADView:withBoolean:);
  methods[49].selector = @selector(getChangedHolderKeyWithADXRecyclerView_ViewHolder:);
  methods[50].selector = @selector(animateAppearanceWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[51].selector = @selector(animateDisappearanceWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[52].selector = @selector(animateChangeWithADXRecyclerView_ViewHolder:withADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withBoolean:withBoolean:);
  methods[53].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[54].selector = @selector(markItemDecorInsetsDirty);
  methods[55].selector = @selector(saveOldPositions);
  methods[56].selector = @selector(clearOldPositions);
  methods[57].selector = @selector(offsetPositionRecordsForMoveWithInt:withInt:);
  methods[58].selector = @selector(offsetPositionRecordsForInsertWithInt:withInt:);
  methods[59].selector = @selector(offsetPositionRecordsForRemoveWithInt:withInt:withBoolean:);
  methods[60].selector = @selector(viewRangeUpdateWithInt:withInt:withId:);
  methods[61].selector = @selector(canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:);
  methods[62].selector = @selector(processDataSetCompletelyChangedWithBoolean:);
  methods[63].selector = @selector(markKnownViewsInvalid);
  methods[64].selector = @selector(getChildViewHolderWithADView:);
  methods[65].selector = @selector(findContainingItemViewWithADView:);
  methods[66].selector = @selector(getChildViewHolderIntWithADView:);
  methods[67].selector = @selector(findViewHolderForPositionWithInt:);
  methods[68].selector = @selector(findViewHolderForPositionWithInt:withBoolean:);
  methods[69].selector = @selector(offsetChildrenVerticalWithInt:);
  methods[70].selector = @selector(onChildAttachedToWindowWithADView:);
  methods[71].selector = @selector(onChildDetachedFromWindowWithADView:);
  methods[72].selector = @selector(offsetChildrenHorizontalWithInt:);
  methods[73].selector = @selector(getDecoratedBoundsWithMarginsIntWithADView:withADRect:);
  methods[74].selector = @selector(getItemDecorInsetsForChildWithADView:);
  methods[75].selector = @selector(dispatchOnScrolledWithInt:withInt:);
  methods[76].selector = @selector(hasPendingAdapterUpdates);
  methods[77].selector = @selector(repositionShadowingViews);
  methods[78].selector = @selector(findNestedRecyclerViewWithADView:);
  methods[79].selector = @selector(clearNestedRecyclerViewIfNotNestedWithADXRecyclerView_ViewHolder:);
  methods[80].selector = @selector(getNanoTime);
  methods[81].selector = @selector(dispatchChildDetachedWithADView:);
  methods[82].selector = @selector(dispatchChildAttachedWithADView:);
  methods[83].selector = @selector(getAdapterPositionInRecyclerViewWithADXRecyclerView_ViewHolder:);
  methods[84].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:);
  methods[85].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:withInt:);
  methods[86].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:withInt:withIntArray:);
  methods[87].selector = @selector(getScrollingChildHelper);
  methods[88].selector = @selector(init);
  methods[89].selector = @selector(dispatchPendingImportantForAccessibilityChanges);
  methods[90].selector = @selector(dispatchContentChangedIfNecessary);
  methods[91].selector = @selector(predictiveItemAnimationsEnabled);
  methods[92].selector = @selector(saveFocusInfo);
  methods[93].selector = @selector(postAnimationRunner);
  methods[94].selector = @selector(recoverFocusFromState);
  methods[95].selector = @selector(resetFocusInfo);
  methods[96].selector = @selector(getScrollY);
  methods[97].selector = @selector(getScrollX);
  methods[98].selector = @selector(onScrollChangedWithInt:withInt:withInt:withInt:);
  methods[99].selector = @selector(onScrolledWithInt:withInt:);
  methods[100].selector = @selector(fillRemainingScrollValuesWithADXRecyclerView_State:);
  methods[101].selector = @selector(isAccessibilityEnabled);
  methods[102].selector = @selector(postWithJavaLangRunnable:);
  methods[103].selector = @selector(getDrawingTime);
  methods[104].selector = @selector(stopScroll);
  methods[105].selector = @selector(registerObserverWithADXRecyclerView_AdapterDataObserver:);
  methods[106].selector = @selector(awakenScrollBars);
  methods[107].selector = @selector(considerReleasingGlowsOnScrollWithInt:withInt:);
  methods[108].selector = @selector(pullGlowsWithFloat:withFloat:withFloat:withFloat:);
  methods[109].selector = @selector(getOverScrollMode);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 91, -1, -1 },
    { "DEBUG", "Z", .constantValue.asBOOL = ADXRecyclerView_DEBUG, 0x18, -1, -1, -1, -1 },
    { "VERBOSE_TRACING", "Z", .constantValue.asBOOL = ADXRecyclerView_VERBOSE_TRACING, 0x18, -1, -1, -1, -1 },
    { "FORCE_INVALIDATE_DISPLAY_LIST", "Z", .constantValue.asBOOL = ADXRecyclerView_FORCE_INVALIDATE_DISPLAY_LIST, 0x18, -1, -1, -1, -1 },
    { "ALLOW_SIZE_IN_UNSPECIFIED_SPEC", "Z", .constantValue.asBOOL = ADXRecyclerView_ALLOW_SIZE_IN_UNSPECIFIED_SPEC, 0x18, -1, -1, -1, -1 },
    { "POST_UPDATES_ON_ANIMATION", "Z", .constantValue.asBOOL = ADXRecyclerView_POST_UPDATES_ON_ANIMATION, 0x18, -1, -1, -1, -1 },
    { "ALLOW_THREAD_GAP_WORK", "Z", .constantValue.asBOOL = ADXRecyclerView_ALLOW_THREAD_GAP_WORK, 0x18, -1, -1, -1, -1 },
    { "FORCE_ABS_FOCUS_SEARCH_DIRECTION", "Z", .constantValue.asBOOL = ADXRecyclerView_FORCE_ABS_FOCUS_SEARCH_DIRECTION, 0x1a, -1, -1, -1, -1 },
    { "IGNORE_DETACHED_FOCUSED_CHILD", "Z", .constantValue.asBOOL = ADXRecyclerView_IGNORE_DETACHED_FOCUSED_CHILD, 0x1a, -1, -1, -1, -1 },
    { "DISPATCH_TEMP_DETACH", "Z", .constantValue.asBOOL = ADXRecyclerView_DISPATCH_TEMP_DETACH, 0x18, -1, -1, -1, -1 },
    { "HORIZONTAL", "I", .constantValue.asInt = ADXRecyclerView_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXRecyclerView_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_ORIENTATION", "I", .constantValue.asInt = ADXRecyclerView_DEFAULT_ORIENTATION, 0x18, -1, -1, -1, -1 },
    { "NO_POSITION", "I", .constantValue.asInt = ADXRecyclerView_NO_POSITION, 0x19, -1, -1, -1, -1 },
    { "INVALID_TYPE", "I", .constantValue.asInt = ADXRecyclerView_INVALID_TYPE, 0x19, -1, -1, -1, -1 },
    { "TOUCH_SLOP_DEFAULT", "I", .constantValue.asInt = ADXRecyclerView_TOUCH_SLOP_DEFAULT, 0x19, -1, -1, -1, -1 },
    { "TOUCH_SLOP_PAGING", "I", .constantValue.asInt = ADXRecyclerView_TOUCH_SLOP_PAGING, 0x19, -1, -1, -1, -1 },
    { "UNDEFINED_DURATION", "I", .constantValue.asInt = ADXRecyclerView_UNDEFINED_DURATION, 0x19, -1, -1, -1, -1 },
    { "MAX_SCROLL_DURATION", "I", .constantValue.asInt = ADXRecyclerView_MAX_SCROLL_DURATION, 0x18, -1, -1, -1, -1 },
    { "TRACE_SCROLL_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 92, -1, -1 },
    { "TRACE_ON_LAYOUT_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 93, -1, -1 },
    { "TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 94, -1, -1 },
    { "TRACE_HANDLE_ADAPTER_UPDATES_TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 95, -1, -1 },
    { "TRACE_BIND_VIEW_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 96, -1, -1 },
    { "TRACE_PREFETCH_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 97, -1, -1 },
    { "TRACE_NESTED_PREFETCH_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 98, -1, -1 },
    { "TRACE_CREATE_VIEW_TAG", "LNSString;", .constantValue.asLong = 0, 0x18, -1, 99, -1, -1 },
    { "mObserver_", "LADXRecyclerView_RecyclerViewDataObserver;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mRecycler_", "LADXRecyclerView_Recycler;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mAdapterHelper_", "LADXAdapterHelper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mChildHelper_", "LADXChildHelper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mViewInfoStore_", "LADXViewInfoStore;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mClipToPadding_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTempRect_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mTempRectF_", "LADRectF;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mAdapter_", "LADXRecyclerView_Adapter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayout_", "LADXRecyclerView_LayoutManager;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRecyclerListener_", "LADXRecyclerView_RecyclerListener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRecyclerListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 100, -1 },
    { "mItemDecorations_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 101, -1 },
    { "mIsAttached_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHasFixedSize_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEnableFastScroller_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFirstLayoutComplete_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInterceptRequestLayoutDepth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLayoutWasDefered_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutSuppressed_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIgnoreMotionEventTillDown_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEatenAccessibilityChangeFlags_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAdapterUpdateDuringMeasure_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOnChildAttachStateListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 102, -1 },
    { "mDataSetHasChangedAfterLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDispatchItemsChangedEvent_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutOrScrollCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDispatchScrollCounter_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "INVALID_POINTER", "I", .constantValue.asInt = ADXRecyclerView_INVALID_POINTER, 0x1a, -1, -1, -1, -1 },
    { "SCROLL_STATE_IDLE", "I", .constantValue.asInt = ADXRecyclerView_SCROLL_STATE_IDLE, 0x19, -1, -1, -1, -1 },
    { "SCROLL_STATE_DRAGGING", "I", .constantValue.asInt = ADXRecyclerView_SCROLL_STATE_DRAGGING, 0x19, -1, -1, -1, -1 },
    { "SCROLL_STATE_SETTLING", "I", .constantValue.asInt = ADXRecyclerView_SCROLL_STATE_SETTLING, 0x19, -1, -1, -1, -1 },
    { "FOREVER_NS", "J", .constantValue.asLong = ADXRecyclerView_FOREVER_NS, 0x18, -1, -1, -1, -1 },
    { "mScrollState_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrollPointerId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialTouchX_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInitialTouchY_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastTouchX_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastTouchY_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_RecyclerView_", "I", .constantValue.asLong = 0, 0x2, 103, -1, -1, -1 },
    { "mMinFlingVelocity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMaxFlingVelocity_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPreserveFocusAfterLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPrefetchRegistry_", "LADXGapWorker_LayoutPrefetchRegistryImpl;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mState_", "LADXRecyclerView_State;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mScrollListener_", "LADXRecyclerView_OnScrollListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrollListeners_", "LJavaUtilList;", .constantValue.asLong = 0, 0x2, -1, -1, 104, -1 },
    { "mItemsAddedOrRemoved_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mItemsChanged_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPostedAnimatorRunner_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMinMaxLayoutPositions_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mScrollingChildHelper_", "LADXRecyclerView_NestedScrollingChildHelper;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrollOffset_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mNestedOffsets_", "[I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mReusableIntPair_", "[I", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mItemAnimatorRunner_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastAutoMeasureSkippedDueToExact_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastAutoMeasureNonExactMeasuredWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastAutoMeasureNonExactMeasuredHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mViewInfoProcessCallback_", "LADXViewInfoStore_ProcessCallback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mPendingSavedState_", "LADXRecyclerView_SavedState;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "TYPE_TOUCH", "I", .constantValue.asInt = ADXRecyclerView_TYPE_TOUCH, 0x19, -1, -1, -1, -1 },
    { "mItemAnimator_", "LADXRecyclerView_ItemAnimator;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAdapter", "LADXRecyclerView_Adapter;", "setAdapterInternal", "LADXRecyclerView_Adapter;ZZ", "setLayoutManager", "LADXRecyclerView_LayoutManager;", "addAnimatingView", "LADXRecyclerView_ViewHolder;", "addItemDecoration", "LADXRecyclerView_ItemDecoration;I", "LADXRecyclerView_ItemDecoration;", "setOnScrollListener", "LADXRecyclerView_OnScrollListener;", "scrollToPosition", "I", "scrollBy", "II", "scrollStep", "II[I", "scrollByInternal", "IILADView_MotionEvent;I", "stopInterceptRequestLayout", "Z", "suppressLayout", "setLayoutFrozen", "assertInLayoutOrScroll", "LNSString;", "assertNotInLayoutOrScroll", "onMeasure", "defaultOnMeasure", "onExitLayoutOrScroll", "handleMissingPreInfoForChangeError", "JLADXRecyclerView_ViewHolder;LADXRecyclerView_ViewHolder;", "recordAnimationInfoIfBouncedHiddenView", "LADXRecyclerView_ViewHolder;LADXRecyclerView_ItemAnimator_ItemHolderInfo;", "findMinMaxChildLayoutPositions", "[I", "didChildRangeChange", "removeDetachedView", "LADView;Z", "getChangedHolderKey", "animateAppearance", "LADXRecyclerView_ViewHolder;LADXRecyclerView_ItemAnimator_ItemHolderInfo;LADXRecyclerView_ItemAnimator_ItemHolderInfo;", "animateDisappearance", "animateChange", "LADXRecyclerView_ViewHolder;LADXRecyclerView_ViewHolder;LADXRecyclerView_ItemAnimator_ItemHolderInfo;LADXRecyclerView_ItemAnimator_ItemHolderInfo;ZZ", "onLayout", "ZIIII", "offsetPositionRecordsForMove", "offsetPositionRecordsForInsert", "offsetPositionRecordsForRemove", "IIZ", "viewRangeUpdate", "IILNSObject;", "canReuseUpdatedViewHolder", "processDataSetCompletelyChanged", "getChildViewHolder", "LADView;", "findContainingItemView", "getChildViewHolderInt", "findViewHolderForPosition", "IZ", "offsetChildrenVertical", "onChildAttachedToWindow", "onChildDetachedFromWindow", "offsetChildrenHorizontal", "getDecoratedBoundsWithMarginsInt", "LADView;LADRect;", "getItemDecorInsetsForChild", "dispatchOnScrolled", "findNestedRecyclerView", "clearNestedRecyclerViewIfNotNested", "dispatchChildDetached", "dispatchChildAttached", "getAdapterPositionInRecyclerView", "dispatchNestedScroll", "IIII[I", "IIII[II", "IIII[II[I", "onScrollChanged", "IIII", "onScrolled", "fillRemainingScrollValues", "LADXRecyclerView_State;", "post", "LJavaLangRunnable;", "registerObserver", "LADXRecyclerView_AdapterDataObserver;", "considerReleasingGlowsOnScroll", "pullGlows", "FFFF", &ADXRecyclerView_TAG, &ADXRecyclerView_TRACE_SCROLL_TAG, &ADXRecyclerView_TRACE_ON_LAYOUT_TAG, &ADXRecyclerView_TRACE_ON_DATA_SET_CHANGE_LAYOUT_TAG, &ADXRecyclerView_TRACE_HANDLE_ADAPTER_UPDATES_TAG, &ADXRecyclerView_TRACE_BIND_VIEW_TAG, &ADXRecyclerView_TRACE_PREFETCH_TAG, &ADXRecyclerView_TRACE_NESTED_PREFETCH_TAG, &ADXRecyclerView_TRACE_CREATE_VIEW_TAG, "Ljava/util/List<Landroidx/recyclerview/widget/RecyclerView$RecyclerListener;>;", "Ljava/util/ArrayList<Landroidx/recyclerview/widget/RecyclerView$ItemDecoration;>;", "Ljava/util/List<Landroidx/recyclerview/widget/RecyclerView$OnChildAttachStateChangeListener;>;", "mTouchSlop", "Ljava/util/List<Landroidx/recyclerview/widget/RecyclerView$OnScrollListener;>;", "LADXRecyclerView_RecyclerViewDataObserver;LADXRecyclerView_RecycledViewPool;LADXRecyclerView_Recycler;LADXRecyclerView_ViewCacheExtension;LADXRecyclerView_Adapter;LADXRecyclerView_LayoutManager;LADXRecyclerView_ItemDecoration;LADXRecyclerView_OnScrollListener;LADXRecyclerView_RecyclerListener;LADXRecyclerView_OnChildAttachStateChangeListener;LADXRecyclerView_ViewHolder;LADXRecyclerView_LayoutParams;LADXRecyclerView_AdapterDataObserver;LADXRecyclerView_AdapterDataObservable;LADXRecyclerView_State;LADXRecyclerView_ItemAnimator;LADXRecyclerView_SavedState;LADXRecyclerView_Observable;LADXRecyclerView_MotionEventCompat;LADXRecyclerView_InputDevice;LADXRecyclerView_NestedScrollingChildHelper;" };
  static const J2ObjcClassInfo _ADXRecyclerView = { "RecyclerView", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x1, 110, 90, -1, 105, -1, -1, -1 };
  return &_ADXRecyclerView;
}

@end

void ADXRecyclerView_initChildrenHelper(ADXRecyclerView *self) {
  JreStrongAssignAndConsume(&self->mChildHelper_, new_ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(create_ADXRecyclerView_3_initWithADXRecyclerView_(self)));
}

void ADXRecyclerView_setAdapterInternalWithADXRecyclerView_Adapter_withBoolean_withBoolean_(ADXRecyclerView *self, ADXRecyclerView_Adapter *adapter, jboolean compatibleWithPrevious, jboolean removeAndRecycleViews) {
  if (self->mAdapter_ != nil) {
    [self->mAdapter_ unregisterAdapterDataObserverWithADXRecyclerView_AdapterDataObserver:self->mObserver_];
    [((ADXRecyclerView_Adapter *) nil_chk(self->mAdapter_)) onDetachedFromRecyclerViewWithADXRecyclerView:self];
  }
  if (!compatibleWithPrevious || removeAndRecycleViews) {
    [self removeAndRecycleViews];
  }
  [((ADXAdapterHelper *) nil_chk(self->mAdapterHelper_)) reset];
  ADXRecyclerView_Adapter *oldAdapter = self->mAdapter_;
  JreStrongAssign(&self->mAdapter_, adapter);
  if (adapter != nil) {
    [adapter registerAdapterDataObserverWithADXRecyclerView_AdapterDataObserver:self->mObserver_];
    [adapter onAttachedToRecyclerViewWithADXRecyclerView:self];
  }
  if (self->mLayout_ != nil) {
    [self->mLayout_ onAdapterChangedWithADXRecyclerView_Adapter:oldAdapter withADXRecyclerView_Adapter:self->mAdapter_];
  }
  [((ADXRecyclerView_Recycler *) nil_chk(self->mRecycler_)) onAdapterChangedWithADXRecyclerView_Adapter:oldAdapter withADXRecyclerView_Adapter:self->mAdapter_ withBoolean:compatibleWithPrevious];
  ((ADXRecyclerView_State *) nil_chk(self->mState_))->mStructureChanged_ = true;
}

void ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(ADXRecyclerView *self, ADXRecyclerView_ViewHolder *viewHolder) {
  ADView *view = ((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder))->itemView_;
  jboolean alreadyParented = [((ADView *) nil_chk(view)) getParent] == self;
  [((ADXRecyclerView_Recycler *) nil_chk(self->mRecycler_)) unscrapViewWithADXRecyclerView_ViewHolder:[self getChildViewHolderWithADView:view]];
  if ([viewHolder isTmpDetached]) {
    [((ADXChildHelper *) nil_chk(self->mChildHelper_)) attachViewToParentWithADView:view withInt:-1 withADViewGroup_LayoutParams:[view getLayoutParams] withBoolean:true];
  }
  else if (!alreadyParented) {
    [((ADXChildHelper *) nil_chk(self->mChildHelper_)) addViewWithADView:view withBoolean:true];
  }
  else {
    [((ADXChildHelper *) nil_chk(self->mChildHelper_)) hideWithADView:view];
  }
}

jboolean ADXRecyclerView_hasUpdatedView(ADXRecyclerView *self) {
  jint childCount = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildAtWithInt:i]);
    if (holder == nil || [holder shouldIgnore]) {
      continue;
    }
    if ([holder isUpdated]) {
      return true;
    }
  }
  return false;
}

void ADXRecyclerView_suppressLayoutWithBoolean_(ADXRecyclerView *self, jboolean suppress) {
  if (suppress != self->mLayoutSuppressed_) {
    [self assertNotInLayoutOrScrollWithNSString:@"Do not suppressLayout in layout or scroll"];
    if (!suppress) {
      self->mLayoutSuppressed_ = false;
      if (self->mLayoutWasDefered_ && self->mLayout_ != nil && self->mAdapter_ != nil) {
        [self requestLayout];
      }
      self->mLayoutWasDefered_ = false;
    }
    else {
      self->mLayoutSuppressed_ = true;
      self->mIgnoreMotionEventTillDown_ = true;
      [self stopScroll];
    }
  }
}

void ADXRecyclerView_processAdapterUpdatesAndSetAnimationFlags(ADXRecyclerView *self) {
  if (self->mDataSetHasChangedAfterLayout_) {
    [((ADXAdapterHelper *) nil_chk(self->mAdapterHelper_)) reset];
    if (self->mDispatchItemsChangedEvent_) {
      [((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_)) onItemsChangedWithADXRecyclerView:self];
    }
  }
  if (ADXRecyclerView_predictiveItemAnimationsEnabled(self)) {
    [((ADXAdapterHelper *) nil_chk(self->mAdapterHelper_)) preProcess];
  }
  else {
    [((ADXAdapterHelper *) nil_chk(self->mAdapterHelper_)) consumeUpdatesInOnePass];
  }
  jboolean animationTypeSupported = self->mItemsAddedOrRemoved_ || self->mItemsChanged_;
  ((ADXRecyclerView_State *) nil_chk(self->mState_))->mRunSimpleAnimations_ = (self->mFirstLayoutComplete_ && self->mItemAnimator_ != nil && (self->mDataSetHasChangedAfterLayout_ || animationTypeSupported || ((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_))->mRequestedSimpleAnimations_) && (!self->mDataSetHasChangedAfterLayout_ || ADXRecyclerView_Adapter_hasStableIds(nil_chk(self->mAdapter_))));
  self->mState_->mRunPredictiveAnimations_ = (self->mState_->mRunSimpleAnimations_ && animationTypeSupported && !self->mDataSetHasChangedAfterLayout_ && ADXRecyclerView_predictiveItemAnimationsEnabled(self));
}

void ADXRecyclerView_dispatchLayoutStep1(ADXRecyclerView *self) {
  [((ADXRecyclerView_State *) nil_chk(self->mState_)) assertLayoutStepWithInt:ADXRecyclerView_State_STEP_START];
  ADXRecyclerView_fillRemainingScrollValuesWithADXRecyclerView_State_(self, self->mState_);
  self->mState_->mIsMeasuring_ = false;
  [self startInterceptRequestLayout];
  [((ADXViewInfoStore *) nil_chk(self->mViewInfoStore_)) clear];
  [self onEnterLayoutOrScroll];
  ADXRecyclerView_processAdapterUpdatesAndSetAnimationFlags(self);
  ADXRecyclerView_saveFocusInfo(self);
  self->mState_->mTrackOldChangeHolders_ = (self->mState_->mRunSimpleAnimations_ && self->mItemsChanged_);
  self->mItemsAddedOrRemoved_ = self->mItemsChanged_ = false;
  self->mState_->mInPreLayout_ = self->mState_->mRunPredictiveAnimations_;
  self->mState_->mItemCount_ = [((ADXRecyclerView_Adapter *) nil_chk(self->mAdapter_)) getItemCount];
  ADXRecyclerView_findMinMaxChildLayoutPositionsWithIntArray_(self, self->mMinMaxLayoutPositions_);
  if (self->mState_->mRunSimpleAnimations_) {
    jint count = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount];
    for (jint i = 0; i < count; ++i) {
      ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildAtWithInt:i]);
      if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) shouldIgnore] || ([holder isInvalid] && !ADXRecyclerView_Adapter_hasStableIds(nil_chk(self->mAdapter_)))) {
        continue;
      }
      ADXRecyclerView_ItemAnimator_ItemHolderInfo *animationInfo = [((ADXRecyclerView_ItemAnimator *) nil_chk(self->mItemAnimator_)) recordPreLayoutInformationWithADXRecyclerView_State:self->mState_ withADXRecyclerView_ViewHolder:holder withInt:ADXRecyclerView_ItemAnimator_buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder_(holder) withJavaUtilList:[holder getUnmodifiedPayloads]];
      [self->mViewInfoStore_ addToPreLayoutWithADXRecyclerView_ViewHolder:holder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
      if (self->mState_->mTrackOldChangeHolders_ && [holder isUpdated] && ![holder isRemoved] && ![holder shouldIgnore] && ![holder isInvalid]) {
        jlong key = [self getChangedHolderKeyWithADXRecyclerView_ViewHolder:holder];
        [self->mViewInfoStore_ addToOldChangeHoldersWithLong:key withADXRecyclerView_ViewHolder:holder];
      }
    }
  }
  if (self->mState_->mRunPredictiveAnimations_) {
    [self saveOldPositions];
    jboolean didStructureChange = self->mState_->mStructureChanged_;
    self->mState_->mStructureChanged_ = false;
    [((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_)) onLayoutChildrenWithADXRecyclerView_Recycler:self->mRecycler_ withADXRecyclerView_State:self->mState_];
    self->mState_->mStructureChanged_ = didStructureChange;
    for (jint i = 0; i < [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount]; ++i) {
      ADView *child = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildAtWithInt:i];
      ADXRecyclerView_ViewHolder *viewHolder = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
      if ([((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder)) shouldIgnore]) {
        continue;
      }
      if (![self->mViewInfoStore_ isInPreLayoutWithADXRecyclerView_ViewHolder:viewHolder]) {
        jint flags = ADXRecyclerView_ItemAnimator_buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder_(viewHolder);
        jboolean wasHidden = [viewHolder hasAnyOfTheFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_BOUNCED_FROM_HIDDEN_LIST];
        if (!wasHidden) {
          flags |= ADXRecyclerView_ItemAnimator_FLAG_APPEARED_IN_PRE_LAYOUT;
        }
        ADXRecyclerView_ItemAnimator_ItemHolderInfo *animationInfo = [((ADXRecyclerView_ItemAnimator *) nil_chk(self->mItemAnimator_)) recordPreLayoutInformationWithADXRecyclerView_State:self->mState_ withADXRecyclerView_ViewHolder:viewHolder withInt:flags withJavaUtilList:[viewHolder getUnmodifiedPayloads]];
        if (wasHidden) {
          [self recordAnimationInfoIfBouncedHiddenViewWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
        }
        else {
          [self->mViewInfoStore_ addToAppearedInPreLayoutHoldersWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
        }
      }
    }
    [self clearOldPositions];
  }
  else {
    [self clearOldPositions];
  }
  [self onExitLayoutOrScroll];
  [self stopInterceptRequestLayoutWithBoolean:false];
  self->mState_->mLayoutStep_ = ADXRecyclerView_State_STEP_LAYOUT;
}

void ADXRecyclerView_dispatchLayoutStep2(ADXRecyclerView *self) {
  [self startInterceptRequestLayout];
  [self onEnterLayoutOrScroll];
  [((ADXRecyclerView_State *) nil_chk(self->mState_)) assertLayoutStepWithInt:ADXRecyclerView_State_STEP_LAYOUT | ADXRecyclerView_State_STEP_ANIMATIONS];
  [((ADXAdapterHelper *) nil_chk(self->mAdapterHelper_)) consumeUpdatesInOnePass];
  self->mState_->mItemCount_ = [((ADXRecyclerView_Adapter *) nil_chk(self->mAdapter_)) getItemCount];
  self->mState_->mDeletedInvisibleItemCountSincePreviousLayout_ = 0;
  self->mState_->mInPreLayout_ = false;
  [((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_)) onLayoutChildrenWithADXRecyclerView_Recycler:self->mRecycler_ withADXRecyclerView_State:self->mState_];
  self->mState_->mStructureChanged_ = false;
  self->mState_->mRunSimpleAnimations_ = (self->mState_->mRunSimpleAnimations_ && self->mItemAnimator_ != nil);
  self->mState_->mLayoutStep_ = ADXRecyclerView_State_STEP_ANIMATIONS;
  [self onExitLayoutOrScroll];
  [self stopInterceptRequestLayoutWithBoolean:false];
}

void ADXRecyclerView_dispatchLayoutStep3(ADXRecyclerView *self) {
  [((ADXRecyclerView_State *) nil_chk(self->mState_)) assertLayoutStepWithInt:ADXRecyclerView_State_STEP_ANIMATIONS];
  [self startInterceptRequestLayout];
  [self onEnterLayoutOrScroll];
  self->mState_->mLayoutStep_ = ADXRecyclerView_State_STEP_START;
  if (self->mState_->mRunSimpleAnimations_) {
    for (jint i = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount] - 1; i >= 0; i--) {
      ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildAtWithInt:i]);
      if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) shouldIgnore]) {
        continue;
      }
      jlong key = [self getChangedHolderKeyWithADXRecyclerView_ViewHolder:holder];
      ADXRecyclerView_ItemAnimator_ItemHolderInfo *animationInfo = [((ADXRecyclerView_ItemAnimator *) nil_chk(self->mItemAnimator_)) recordPostLayoutInformationWithADXRecyclerView_State:self->mState_ withADXRecyclerView_ViewHolder:holder];
      ADXRecyclerView_ViewHolder *oldChangeViewHolder = JreRetainedLocalValue([((ADXViewInfoStore *) nil_chk(self->mViewInfoStore_)) getFromOldChangeHoldersWithLong:key]);
      if (oldChangeViewHolder != nil && ![oldChangeViewHolder shouldIgnore]) {
        jboolean oldDisappearing = [self->mViewInfoStore_ isDisappearingWithADXRecyclerView_ViewHolder:oldChangeViewHolder];
        jboolean newDisappearing = [self->mViewInfoStore_ isDisappearingWithADXRecyclerView_ViewHolder:holder];
        if (oldDisappearing && oldChangeViewHolder == holder) {
          [self->mViewInfoStore_ addToPostLayoutWithADXRecyclerView_ViewHolder:holder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
        }
        else {
          ADXRecyclerView_ItemAnimator_ItemHolderInfo *preInfo = [self->mViewInfoStore_ popFromPreLayoutWithADXRecyclerView_ViewHolder:oldChangeViewHolder];
          [self->mViewInfoStore_ addToPostLayoutWithADXRecyclerView_ViewHolder:holder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
          ADXRecyclerView_ItemAnimator_ItemHolderInfo *postInfo = JreRetainedLocalValue([self->mViewInfoStore_ popFromPostLayoutWithADXRecyclerView_ViewHolder:holder]);
          if (preInfo == nil) {
            ADXRecyclerView_handleMissingPreInfoForChangeErrorWithLong_withADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_(self, key, holder, oldChangeViewHolder);
          }
          else {
            ADXRecyclerView_animateChangeWithADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withBoolean_withBoolean_(self, oldChangeViewHolder, holder, preInfo, postInfo, oldDisappearing, newDisappearing);
          }
        }
      }
      else {
        [self->mViewInfoStore_ addToPostLayoutWithADXRecyclerView_ViewHolder:holder withADXRecyclerView_ItemAnimator_ItemHolderInfo:animationInfo];
      }
    }
    [((ADXViewInfoStore *) nil_chk(self->mViewInfoStore_)) processWithADXViewInfoStore_ProcessCallback:self->mViewInfoProcessCallback_];
  }
  [((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_)) removeAndRecycleScrapIntWithADXRecyclerView_Recycler:self->mRecycler_];
  self->mState_->mPreviousLayoutItemCount_ = self->mState_->mItemCount_;
  self->mDataSetHasChangedAfterLayout_ = false;
  self->mDispatchItemsChangedEvent_ = false;
  self->mState_->mRunSimpleAnimations_ = false;
  self->mState_->mRunPredictiveAnimations_ = false;
  ((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_))->mRequestedSimpleAnimations_ = false;
  if (((ADXRecyclerView_Recycler *) nil_chk(self->mRecycler_))->mChangedScrap_ != nil) {
    [self->mRecycler_->mChangedScrap_ clear];
  }
  if (((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_))->mPrefetchMaxObservedInInitialPrefetch_) {
    self->mLayout_->mPrefetchMaxCountObserved_ = 0;
    self->mLayout_->mPrefetchMaxObservedInInitialPrefetch_ = false;
    [self->mRecycler_ updateViewCacheSize];
  }
  [((ADXRecyclerView_LayoutManager *) nil_chk(self->mLayout_)) onLayoutCompletedWithADXRecyclerView_State:self->mState_];
  [self onExitLayoutOrScroll];
  [self stopInterceptRequestLayoutWithBoolean:false];
  [((ADXViewInfoStore *) nil_chk(self->mViewInfoStore_)) clear];
  if (ADXRecyclerView_didChildRangeChangeWithInt_withInt_(self, IOSIntArray_Get(nil_chk(self->mMinMaxLayoutPositions_), 0), IOSIntArray_Get(self->mMinMaxLayoutPositions_, 1))) {
    [self dispatchOnScrolledWithInt:0 withInt:0];
  }
  ADXRecyclerView_recoverFocusFromState(self);
  ADXRecyclerView_resetFocusInfo(self);
}

void ADXRecyclerView_handleMissingPreInfoForChangeErrorWithLong_withADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_(ADXRecyclerView *self, jlong key, ADXRecyclerView_ViewHolder *holder, ADXRecyclerView_ViewHolder *oldChangeViewHolder) {
  jint childCount = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *view = JreRetainedLocalValue([((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildAtWithInt:i]);
    ADXRecyclerView_ViewHolder *other = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
    if (other == holder) {
      continue;
    }
    jlong otherKey = [self getChangedHolderKeyWithADXRecyclerView_ViewHolder:other];
    if (otherKey == key) {
      if (self->mAdapter_ != nil && ADXRecyclerView_Adapter_hasStableIds(self->mAdapter_)) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Two different ViewHolders have the same stable ID. Stable IDs in your adapter MUST BE unique and SHOULD NOT change.\n ViewHolder 1:", other, @" \n View Holder 2:", holder, [self exceptionLabel]));
      }
      else {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$@$", @"Two different ViewHolders have the same change ID. This might happen due to inconsistent Adapter update events or if the LayoutManager lays out the same View multiple times.\n ViewHolder 1:", other, @" \n View Holder 2:", holder, [self exceptionLabel]));
      }
    }
  }
  ADLog_eWithNSString_withNSString_(ADXRecyclerView_TAG, JreStrcat("$@$@$", @"Problem while matching changed view holders with the newones. The pre-layout information for the change holder ", oldChangeViewHolder, @" cannot be found but it is necessary for ", holder, [self exceptionLabel]));
}

void ADXRecyclerView_findMinMaxChildLayoutPositionsWithIntArray_(ADXRecyclerView *self, IOSIntArray *into) {
  jint count = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount];
  if (count == 0) {
    *IOSIntArray_GetRef(nil_chk(into), 0) = ADXRecyclerView_NO_POSITION;
    *IOSIntArray_GetRef(into, 1) = ADXRecyclerView_NO_POSITION;
    return;
  }
  jint minPositionPreLayout = JavaLangInteger_MAX_VALUE;
  jint maxPositionPreLayout = JavaLangInteger_MIN_VALUE;
  for (jint i = 0; i < count; ++i) {
    ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_([((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildAtWithInt:i]);
    if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) shouldIgnore]) {
      continue;
    }
    jint pos = ADXRecyclerView_ViewHolder_getLayoutPosition(holder);
    if (pos < minPositionPreLayout) {
      minPositionPreLayout = pos;
    }
    if (pos > maxPositionPreLayout) {
      maxPositionPreLayout = pos;
    }
  }
  *IOSIntArray_GetRef(nil_chk(into), 0) = minPositionPreLayout;
  *IOSIntArray_GetRef(into, 1) = maxPositionPreLayout;
}

jboolean ADXRecyclerView_didChildRangeChangeWithInt_withInt_(ADXRecyclerView *self, jint minPositionPreLayout, jint maxPositionPreLayout) {
  ADXRecyclerView_findMinMaxChildLayoutPositionsWithIntArray_(self, self->mMinMaxLayoutPositions_);
  return IOSIntArray_Get(nil_chk(self->mMinMaxLayoutPositions_), 0) != minPositionPreLayout || IOSIntArray_Get(self->mMinMaxLayoutPositions_, 1) != maxPositionPreLayout;
}

void ADXRecyclerView_animateChangeWithADXRecyclerView_ViewHolder_withADXRecyclerView_ViewHolder_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withADXRecyclerView_ItemAnimator_ItemHolderInfo_withBoolean_withBoolean_(ADXRecyclerView *self, ADXRecyclerView_ViewHolder *oldHolder, ADXRecyclerView_ViewHolder *newHolder, ADXRecyclerView_ItemAnimator_ItemHolderInfo *preInfo, ADXRecyclerView_ItemAnimator_ItemHolderInfo *postInfo, jboolean oldHolderDisappearing, jboolean newHolderDisappearing) {
  ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(nil_chk(oldHolder), false);
  if (oldHolderDisappearing) {
    ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(self, oldHolder);
  }
  if (oldHolder != newHolder) {
    if (newHolderDisappearing) {
      ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(self, newHolder);
    }
    JreStrongAssign(&oldHolder->mShadowedHolder_, newHolder);
    ADXRecyclerView_addAnimatingViewWithADXRecyclerView_ViewHolder_(self, oldHolder);
    [((ADXRecyclerView_Recycler *) nil_chk(self->mRecycler_)) unscrapViewWithADXRecyclerView_ViewHolder:oldHolder];
    ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(nil_chk(newHolder), false);
    JreStrongAssign(&newHolder->mShadowingHolder_, oldHolder);
  }
  if ([((ADXRecyclerView_ItemAnimator *) nil_chk(self->mItemAnimator_)) animateChangeWithADXRecyclerView_ViewHolder:oldHolder withADXRecyclerView_ViewHolder:newHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:preInfo withADXRecyclerView_ItemAnimator_ItemHolderInfo:postInfo]) {
    [self postAnimationRunner];
  }
}

ADXRecyclerView_ViewHolder *ADXRecyclerView_getChildViewHolderIntWithADView_(ADView *child) {
  ADXRecyclerView_initialize();
  if (child == nil) {
    return nil;
  }
  return ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([child getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mViewHolder_;
}

void ADXRecyclerView_getDecoratedBoundsWithMarginsIntWithADView_withADRect_(ADView *view, ADRect *outBounds) {
  ADXRecyclerView_initialize();
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  ADRect *insets = ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->mDecorInsets_;
  [((ADRect *) nil_chk(outBounds)) setWithInt:[view getLeft] - ((ADRect *) nil_chk(insets))->left_ - lp->leftMargin_ withInt:[view getTop] - insets->top_ - lp->topMargin_ withInt:[view getRight] + insets->right_ + lp->rightMargin_ withInt:[view getBottom] + insets->bottom_ + lp->bottomMargin_];
}

ADXRecyclerView *ADXRecyclerView_findNestedRecyclerViewWithADView_(ADView *view) {
  ADXRecyclerView_initialize();
  if (!([view isKindOfClass:[ADViewGroup class]])) {
    return nil;
  }
  if ([view isKindOfClass:[ADXRecyclerView class]]) {
    return (ADXRecyclerView *) view;
  }
  ADViewGroup *parent = (ADViewGroup *) cast_chk(view, [ADViewGroup class]);
  jint count = [((ADViewGroup *) nil_chk(parent)) getChildCount];
  for (jint i = 0; i < count; i++) {
    ADView *child = [parent getChildAtWithInt:i];
    ADXRecyclerView *descendant = ADXRecyclerView_findNestedRecyclerViewWithADView_(child);
    if (descendant != nil) {
      return descendant;
    }
  }
  return nil;
}

void ADXRecyclerView_clearNestedRecyclerViewIfNotNestedWithADXRecyclerView_ViewHolder_(ADXRecyclerView_ViewHolder *holder) {
  ADXRecyclerView_initialize();
  if (((ADXRecyclerView_ViewHolder *) nil_chk(holder))->mNestedRecyclerView_ != nil) {
    ADView *item = JreRetainedLocalValue([holder->mNestedRecyclerView_ get]);
    while (item != nil) {
      if (item == holder->itemView_) {
        return;
      }
      id<ADViewParent> parent = JreRetainedLocalValue([item getParent]);
      if ([parent isKindOfClass:[ADView class]]) {
        item = (ADView *) parent;
      }
      else {
        item = nil;
      }
    }
    JreStrongAssign(&holder->mNestedRecyclerView_, nil);
  }
}

void ADXRecyclerView_dispatchNestedScrollWithInt_withInt_withInt_withInt_withIntArray_withInt_withIntArray_(ADXRecyclerView *self, jint dxConsumed, jint dyConsumed, jint dxUnconsumed, jint dyUnconsumed, IOSIntArray *offsetInWindow, jint type, IOSIntArray *consumed) {
  [((ADXRecyclerView_NestedScrollingChildHelper *) nil_chk(ADXRecyclerView_getScrollingChildHelper(self))) dispatchNestedScrollWithInt:dxConsumed withInt:dyConsumed withInt:dxUnconsumed withInt:dyUnconsumed withIntArray:offsetInWindow withInt:type withIntArray:consumed];
}

ADXRecyclerView_NestedScrollingChildHelper *ADXRecyclerView_getScrollingChildHelper(ADXRecyclerView *self) {
  if (self->mScrollingChildHelper_ == nil) {
    JreStrongAssignAndConsume(&self->mScrollingChildHelper_, new_ADXRecyclerView_NestedScrollingChildHelper_initWithADView_(self));
  }
  return self->mScrollingChildHelper_;
}

void ADXRecyclerView_init(ADXRecyclerView *self) {
  ADViewGroup_init(self);
  JreStrongAssignAndConsume(&self->mObserver_, new_ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(self));
  JreStrongAssignAndConsume(&self->mRecycler_, new_ADXRecyclerView_Recycler_initWithADXRecyclerView_(self));
  JreStrongAssignAndConsume(&self->mViewInfoStore_, new_ADXViewInfoStore_initPackagePrivate());
  JreStrongAssignAndConsume(&self->mTempRect_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mTempRectF_, new_ADRectF_init());
  JreStrongAssignAndConsume(&self->mRecyclerListeners_, new_JavaUtilArrayList_init());
  JreStrongAssignAndConsume(&self->mItemDecorations_, new_JavaUtilArrayList_init());
  self->mInterceptRequestLayoutDepth_ = 0;
  self->mDataSetHasChangedAfterLayout_ = false;
  self->mDispatchItemsChangedEvent_ = false;
  self->mLayoutOrScrollCounter_ = 0;
  self->mDispatchScrollCounter_ = 0;
  self->mScrollState_ = ADXRecyclerView_SCROLL_STATE_IDLE;
  self->mScrollPointerId_ = ADXRecyclerView_INVALID_POINTER;
  self->mPreserveFocusAfterLayout_ = true;
  JreStrongAssignAndConsume(&self->mPrefetchRegistry_, new_ADXGapWorker_LayoutPrefetchRegistryImpl_init());
  JreStrongAssignAndConsume(&self->mState_, new_ADXRecyclerView_State_init());
  self->mItemsAddedOrRemoved_ = false;
  self->mItemsChanged_ = false;
  self->mPostedAnimatorRunner_ = false;
  JreStrongAssignAndConsume(&self->mMinMaxLayoutPositions_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mScrollOffset_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mNestedOffsets_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mReusableIntPair_, [IOSIntArray newArrayWithLength:2]);
  JreStrongAssignAndConsume(&self->mItemAnimatorRunner_, new_ADXRecyclerView_1_initWithADXRecyclerView_(self));
  self->mLastAutoMeasureNonExactMeasuredWidth_ = 0;
  self->mLastAutoMeasureNonExactMeasuredHeight_ = 0;
  JreStrongAssignAndConsume(&self->mViewInfoProcessCallback_, new_ADXRecyclerView_2_initWithADXRecyclerView_(self));
  self->mMaxFlingVelocity_ = 0;
  self->mMinFlingVelocity_ = 0;
  [self initAdapterManager];
  ADXRecyclerView_initChildrenHelper(self);
}

ADXRecyclerView *new_ADXRecyclerView_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView, init)
}

ADXRecyclerView *create_ADXRecyclerView_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView, init)
}

void ADXRecyclerView_dispatchContentChangedIfNecessary(ADXRecyclerView *self) {
}

jboolean ADXRecyclerView_predictiveItemAnimationsEnabled(ADXRecyclerView *self) {
  return false;
}

void ADXRecyclerView_saveFocusInfo(ADXRecyclerView *self) {
}

void ADXRecyclerView_recoverFocusFromState(ADXRecyclerView *self) {
}

void ADXRecyclerView_resetFocusInfo(ADXRecyclerView *self) {
}

jint ADXRecyclerView_getScrollY(ADXRecyclerView *self) {
  return 0;
}

jint ADXRecyclerView_getScrollX(ADXRecyclerView *self) {
  return 0;
}

void ADXRecyclerView_onScrollChangedWithInt_withInt_withInt_withInt_(ADXRecyclerView *self, jint scrollX, jint scrollY, jint i, jint j) {
}

void ADXRecyclerView_onScrolledWithInt_withInt_(ADXRecyclerView *self, jint hresult, jint vresult) {
}

void ADXRecyclerView_fillRemainingScrollValuesWithADXRecyclerView_State_(ADXRecyclerView *self, ADXRecyclerView_State *state) {
}

void ADXRecyclerView_pullGlowsWithFloat_withFloat_withFloat_withFloat_(ADXRecyclerView *self, jfloat x, jfloat overscrollX, jfloat y, jfloat overscrollY) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView)

@implementation ADXRecyclerView_1

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$ {
  ADXRecyclerView_1_initWithADXRecyclerView_(self, outer$);
  return self;
}

- (void)run {
  if (this$0_->mItemAnimator_ != nil) {
    [this$0_->mItemAnimator_ runPendingAnimations];
  }
  this$0_->mPostedAnimatorRunner_ = false;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView:);
  methods[1].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_1 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_1;
}

@end

void ADXRecyclerView_1_initWithADXRecyclerView_(ADXRecyclerView_1 *self, ADXRecyclerView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXRecyclerView_1 *new_ADXRecyclerView_1_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_1, initWithADXRecyclerView_, outer$)
}

ADXRecyclerView_1 *create_ADXRecyclerView_1_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_1, initWithADXRecyclerView_, outer$)
}

@implementation ADXRecyclerView_2

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$ {
  ADXRecyclerView_2_initWithADXRecyclerView_(self, outer$);
  return self;
}

- (void)processDisappearedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
         withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info
         withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo {
  [((ADXRecyclerView_Recycler *) nil_chk(this$0_->mRecycler_)) unscrapViewWithADXRecyclerView_ViewHolder:viewHolder];
  [this$0_ animateDisappearanceWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:info withADXRecyclerView_ItemAnimator_ItemHolderInfo:postInfo];
}

- (void)processAppearedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info {
  [this$0_ animateAppearanceWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:preInfo withADXRecyclerView_ItemAnimator_ItemHolderInfo:info];
}

- (void)processPersistentWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo {
  ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(nil_chk(viewHolder), false);
  if (this$0_->mDataSetHasChangedAfterLayout_) {
    if ([((ADXRecyclerView_ItemAnimator *) nil_chk(this$0_->mItemAnimator_)) animateChangeWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:preInfo withADXRecyclerView_ItemAnimator_ItemHolderInfo:postInfo]) {
      [this$0_ postAnimationRunner];
    }
  }
  else if ([((ADXRecyclerView_ItemAnimator *) nil_chk(this$0_->mItemAnimator_)) animatePersistenceWithADXRecyclerView_ViewHolder:viewHolder withADXRecyclerView_ItemAnimator_ItemHolderInfo:preInfo withADXRecyclerView_ItemAnimator_ItemHolderInfo:postInfo]) {
    [this$0_ postAnimationRunner];
  }
}

- (void)unusedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  [((ADXRecyclerView_LayoutManager *) nil_chk(this$0_->mLayout_)) removeAndRecycleViewWithADView:((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder))->itemView_ withADXRecyclerView_Recycler:this$0_->mRecycler_];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView:);
  methods[1].selector = @selector(processDisappearedWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[2].selector = @selector(processAppearedWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[3].selector = @selector(processPersistentWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[4].selector = @selector(unusedWithADXRecyclerView_ViewHolder:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;", "processDisappeared", "LADXRecyclerView_ViewHolder;LADXRecyclerView_ItemAnimator_ItemHolderInfo;LADXRecyclerView_ItemAnimator_ItemHolderInfo;", "processAppeared", "processPersistent", "unused", "LADXRecyclerView_ViewHolder;" };
  static const J2ObjcClassInfo _ADXRecyclerView_2 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8010, 5, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_2;
}

@end

void ADXRecyclerView_2_initWithADXRecyclerView_(ADXRecyclerView_2 *self, ADXRecyclerView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXRecyclerView_2 *new_ADXRecyclerView_2_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_2, initWithADXRecyclerView_, outer$)
}

ADXRecyclerView_2 *create_ADXRecyclerView_2_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_2, initWithADXRecyclerView_, outer$)
}

@implementation ADXRecyclerView_3

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$ {
  ADXRecyclerView_3_initWithADXRecyclerView_(self, outer$);
  return self;
}

- (jint)getChildCount {
  return [this$0_ getChildCount];
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index {
  [this$0_ addViewWithADView:child withInt:index];
  [this$0_ dispatchChildAttachedWithADView:child];
}

- (jint)indexOfChildWithADView:(ADView *)view {
  return [this$0_ indexOfChildWithADView:view];
}

- (void)removeViewAtWithInt:(jint)index {
  ADView *child = [this$0_ getChildAtWithInt:index];
  if (child != nil) {
    [this$0_ dispatchChildDetachedWithADView:child];
  }
  [this$0_ removeViewAtWithInt:index];
}

- (ADView *)getChildAtWithInt:(jint)offset {
  return [this$0_ getChildAtWithInt:offset];
}

- (void)removeAllViews {
  jint count = [self getChildCount];
  for (jint i = 0; i < count; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    [this$0_ dispatchChildDetachedWithADView:child];
  }
  [this$0_ removeAllViews];
}

- (ADXRecyclerView_ViewHolder *)getChildViewHolderWithADView:(ADView *)view {
  return ADXRecyclerView_getChildViewHolderIntWithADView_(view);
}

- (void)attachViewToParentWithADView:(ADView *)child
                             withInt:(jint)index
        withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams {
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  if (vh != nil) {
    if (![vh isTmpDetached] && ![vh shouldIgnore]) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Called attach on a child which is not detached: ", vh, [this$0_ exceptionLabel]));
    }
    [vh clearTmpDetachFlag];
  }
  [this$0_ attachViewToParentWithADView:child withInt:index withADViewGroup_LayoutParams:layoutParams];
}

- (void)detachViewFromParentWithInt:(jint)offset {
  ADView *view = [self getChildAtWithInt:offset];
  if (view != nil) {
    ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
    if (vh != nil) {
      if ([vh isTmpDetached] && ![vh shouldIgnore]) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"called detach on an already detached child ", vh, [this$0_ exceptionLabel]));
      }
      [vh addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_TMP_DETACHED];
    }
  }
  [this$0_ detachViewFromParentWithInt:offset];
}

- (void)onEnteredHiddenStateWithADView:(ADView *)child {
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  if (vh != nil) {
    [vh onEnteredHiddenStateWithADXRecyclerView:this$0_];
  }
}

- (void)onLeftHiddenStateWithADView:(ADView *)child {
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  if (vh != nil) {
    [vh onLeftHiddenStateWithADXRecyclerView:this$0_];
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 7, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView:);
  methods[1].selector = @selector(getChildCount);
  methods[2].selector = @selector(addViewWithADView:withInt:);
  methods[3].selector = @selector(indexOfChildWithADView:);
  methods[4].selector = @selector(removeViewAtWithInt:);
  methods[5].selector = @selector(getChildAtWithInt:);
  methods[6].selector = @selector(removeAllViews);
  methods[7].selector = @selector(getChildViewHolderWithADView:);
  methods[8].selector = @selector(attachViewToParentWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[9].selector = @selector(detachViewFromParentWithInt:);
  methods[10].selector = @selector(onEnteredHiddenStateWithADView:);
  methods[11].selector = @selector(onLeftHiddenStateWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;", "addView", "LADView;I", "indexOfChild", "LADView;", "removeViewAt", "I", "getChildAt", "getChildViewHolder", "attachViewToParent", "LADView;ILADViewGroup_LayoutParams;", "detachViewFromParent", "onEnteredHiddenState", "onLeftHiddenState", "initChildrenHelper" };
  static const J2ObjcClassInfo _ADXRecyclerView_3 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8010, 12, 1, 0, -1, 14, -1, -1 };
  return &_ADXRecyclerView_3;
}

@end

void ADXRecyclerView_3_initWithADXRecyclerView_(ADXRecyclerView_3 *self, ADXRecyclerView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXRecyclerView_3 *new_ADXRecyclerView_3_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_3, initWithADXRecyclerView_, outer$)
}

ADXRecyclerView_3 *create_ADXRecyclerView_3_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_3, initWithADXRecyclerView_, outer$)
}

@implementation ADXRecyclerView_4

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$ {
  ADXRecyclerView_4_initWithADXRecyclerView_(self, outer$);
  return self;
}

- (ADXRecyclerView_ViewHolder *)findViewHolderWithInt:(jint)position {
  ADXRecyclerView_ViewHolder *vh = [this$0_ findViewHolderForPositionWithInt:position withBoolean:true];
  if (vh == nil) {
    return nil;
  }
  if ([((ADXChildHelper *) nil_chk(this$0_->mChildHelper_)) isHiddenWithADView:vh->itemView_]) {
    return nil;
  }
  return vh;
}

- (void)offsetPositionsForRemovingInvisibleWithInt:(jint)start
                                           withInt:(jint)count {
  [this$0_ offsetPositionRecordsForRemoveWithInt:start withInt:count withBoolean:true];
  this$0_->mItemsAddedOrRemoved_ = true;
  ((ADXRecyclerView_State *) nil_chk(this$0_->mState_))->mDeletedInvisibleItemCountSincePreviousLayout_ += count;
}

- (void)offsetPositionsForRemovingLaidOutOrNewViewWithInt:(jint)positionStart
                                                  withInt:(jint)itemCount {
  [this$0_ offsetPositionRecordsForRemoveWithInt:positionStart withInt:itemCount withBoolean:false];
  this$0_->mItemsAddedOrRemoved_ = true;
}

- (void)markViewHoldersUpdatedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payload {
  [this$0_ viewRangeUpdateWithInt:positionStart withInt:itemCount withId:payload];
  this$0_->mItemsChanged_ = true;
}

- (void)onDispatchFirstPassWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  [self dispatchUpdateWithADXAdapterHelper_UpdateOp:op];
}

- (void)dispatchUpdateWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  switch (((ADXAdapterHelper_UpdateOp *) nil_chk(op))->cmd_) {
    case ADXAdapterHelper_UpdateOp_ADD:
    [((ADXRecyclerView_LayoutManager *) nil_chk(this$0_->mLayout_)) onItemsAddedWithADXRecyclerView:this$0_ withInt:op->positionStart_ withInt:op->itemCount_];
    break;
    case ADXAdapterHelper_UpdateOp_REMOVE:
    [((ADXRecyclerView_LayoutManager *) nil_chk(this$0_->mLayout_)) onItemsRemovedWithADXRecyclerView:this$0_ withInt:op->positionStart_ withInt:op->itemCount_];
    break;
    case ADXAdapterHelper_UpdateOp_UPDATE:
    [((ADXRecyclerView_LayoutManager *) nil_chk(this$0_->mLayout_)) onItemsUpdatedWithADXRecyclerView:this$0_ withInt:op->positionStart_ withInt:op->itemCount_ withId:op->payload_];
    break;
    case ADXAdapterHelper_UpdateOp_MOVE:
    [((ADXRecyclerView_LayoutManager *) nil_chk(this$0_->mLayout_)) onItemsMovedWithADXRecyclerView:this$0_ withInt:op->positionStart_ withInt:op->itemCount_ withInt:1];
    break;
  }
}

- (void)onDispatchSecondPassWithADXAdapterHelper_UpdateOp:(ADXAdapterHelper_UpdateOp *)op {
  [self dispatchUpdateWithADXAdapterHelper_UpdateOp:op];
}

- (void)offsetPositionsForAddWithInt:(jint)positionStart
                             withInt:(jint)itemCount {
  [this$0_ offsetPositionRecordsForInsertWithInt:positionStart withInt:itemCount];
  this$0_->mItemsAddedOrRemoved_ = true;
}

- (void)offsetPositionsForMoveWithInt:(jint)from
                              withInt:(jint)to {
  [this$0_ offsetPositionRecordsForMoveWithInt:from withInt:to];
  this$0_->mItemsAddedOrRemoved_ = true;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView:);
  methods[1].selector = @selector(findViewHolderWithInt:);
  methods[2].selector = @selector(offsetPositionsForRemovingInvisibleWithInt:withInt:);
  methods[3].selector = @selector(offsetPositionsForRemovingLaidOutOrNewViewWithInt:withInt:);
  methods[4].selector = @selector(markViewHoldersUpdatedWithInt:withInt:withId:);
  methods[5].selector = @selector(onDispatchFirstPassWithADXAdapterHelper_UpdateOp:);
  methods[6].selector = @selector(dispatchUpdateWithADXAdapterHelper_UpdateOp:);
  methods[7].selector = @selector(onDispatchSecondPassWithADXAdapterHelper_UpdateOp:);
  methods[8].selector = @selector(offsetPositionsForAddWithInt:withInt:);
  methods[9].selector = @selector(offsetPositionsForMoveWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;", "findViewHolder", "I", "offsetPositionsForRemovingInvisible", "II", "offsetPositionsForRemovingLaidOutOrNewView", "markViewHoldersUpdated", "IILNSObject;", "onDispatchFirstPass", "LADXAdapterHelper_UpdateOp;", "dispatchUpdate", "onDispatchSecondPass", "offsetPositionsForAdd", "offsetPositionsForMove", "initAdapterManager" };
  static const J2ObjcClassInfo _ADXRecyclerView_4 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8010, 10, 1, 0, -1, 14, -1, -1 };
  return &_ADXRecyclerView_4;
}

@end

void ADXRecyclerView_4_initWithADXRecyclerView_(ADXRecyclerView_4 *self, ADXRecyclerView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXRecyclerView_4 *new_ADXRecyclerView_4_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_4, initWithADXRecyclerView_, outer$)
}

ADXRecyclerView_4 *create_ADXRecyclerView_4_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_4, initWithADXRecyclerView_, outer$)
}

@implementation ADXRecyclerView_AdapterDataObserver

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_AdapterDataObserver_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onChanged {
}

- (void)onItemRangeChangedWithInt:(jint)positionStart
                          withInt:(jint)itemCount {
}

- (void)onItemRangeChangedWithInt:(jint)positionStart
                          withInt:(jint)itemCount
                           withId:(id)payload {
  [self onItemRangeChangedWithInt:positionStart withInt:itemCount];
}

- (void)onItemRangeInsertedWithInt:(jint)positionStart
                           withInt:(jint)itemCount {
}

- (void)onItemRangeRemovedWithInt:(jint)positionStart
                          withInt:(jint)itemCount {
}

- (void)onItemRangeMovedWithInt:(jint)fromPosition
                        withInt:(jint)toPosition
                        withInt:(jint)itemCount {
}

- (void)onStateRestorationPolicyChanged {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onItemRangeChangedWithInt:withInt:);
  methods[3].selector = @selector(onItemRangeChangedWithInt:withInt:withId:);
  methods[4].selector = @selector(onItemRangeInsertedWithInt:withInt:);
  methods[5].selector = @selector(onItemRangeRemovedWithInt:withInt:);
  methods[6].selector = @selector(onItemRangeMovedWithInt:withInt:withInt:);
  methods[7].selector = @selector(onStateRestorationPolicyChanged);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onItemRangeChanged", "II", "IILNSObject;", "onItemRangeInserted", "onItemRangeRemoved", "onItemRangeMoved", "III", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_AdapterDataObserver = { "AdapterDataObserver", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x409, 8, 0, 7, -1, -1, -1, -1 };
  return &_ADXRecyclerView_AdapterDataObserver;
}

@end

void ADXRecyclerView_AdapterDataObserver_init(ADXRecyclerView_AdapterDataObserver *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_AdapterDataObserver)

@implementation ADXRecyclerView_RecyclerViewDataObserver

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$ {
  ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(self, outer$);
  return self;
}

- (void)onChanged {
  [this$0_ assertNotInLayoutOrScrollWithNSString:nil];
  ((ADXRecyclerView_State *) nil_chk(this$0_->mState_))->mStructureChanged_ = true;
  [this$0_ processDataSetCompletelyChangedWithBoolean:true];
  if (![((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) hasPendingUpdates]) {
    [this$0_ requestLayout];
  }
}

- (void)onItemRangeChangedWithInt:(jint)positionStart
                          withInt:(jint)itemCount
                           withId:(id)payload {
  [this$0_ assertNotInLayoutOrScrollWithNSString:nil];
  if ([((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) onItemRangeChangedWithInt:positionStart withInt:itemCount withId:payload]) {
    [self triggerUpdateProcessor];
  }
}

- (void)onItemRangeInsertedWithInt:(jint)positionStart
                           withInt:(jint)itemCount {
  [this$0_ assertNotInLayoutOrScrollWithNSString:nil];
  if ([((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) onItemRangeInsertedWithInt:positionStart withInt:itemCount]) {
    [self triggerUpdateProcessor];
  }
}

- (void)onItemRangeRemovedWithInt:(jint)positionStart
                          withInt:(jint)itemCount {
  [this$0_ assertNotInLayoutOrScrollWithNSString:nil];
  if ([((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) onItemRangeRemovedWithInt:positionStart withInt:itemCount]) {
    [self triggerUpdateProcessor];
  }
}

- (void)onItemRangeMovedWithInt:(jint)fromPosition
                        withInt:(jint)toPosition
                        withInt:(jint)itemCount {
  [this$0_ assertNotInLayoutOrScrollWithNSString:nil];
  if ([((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) onItemRangeMovedWithInt:fromPosition withInt:toPosition withInt:itemCount]) {
    [self triggerUpdateProcessor];
  }
}

- (void)triggerUpdateProcessor {
  if (this$0_->mHasFixedSize_ && this$0_->mIsAttached_) {
  }
  else {
    this$0_->mAdapterUpdateDuringMeasure_ = true;
    [this$0_ requestLayout];
  }
}

- (void)onStateRestorationPolicyChanged {
  if (this$0_->mPendingSavedState_ == nil) {
    return;
  }
  ADXRecyclerView_Adapter *adapter = JreRetainedLocalValue(this$0_->mAdapter_);
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView:);
  methods[1].selector = @selector(onChanged);
  methods[2].selector = @selector(onItemRangeChangedWithInt:withInt:withId:);
  methods[3].selector = @selector(onItemRangeInsertedWithInt:withInt:);
  methods[4].selector = @selector(onItemRangeRemovedWithInt:withInt:);
  methods[5].selector = @selector(onItemRangeMovedWithInt:withInt:withInt:);
  methods[6].selector = @selector(triggerUpdateProcessor);
  methods[7].selector = @selector(onStateRestorationPolicyChanged);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;", "onItemRangeChanged", "IILNSObject;", "onItemRangeInserted", "II", "onItemRangeRemoved", "onItemRangeMoved", "III" };
  static const J2ObjcClassInfo _ADXRecyclerView_RecyclerViewDataObserver = { "RecyclerViewDataObserver", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x2, 8, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_RecyclerViewDataObserver;
}

@end

void ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(ADXRecyclerView_RecyclerViewDataObserver *self, ADXRecyclerView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  ADXRecyclerView_AdapterDataObserver_init(self);
}

ADXRecyclerView_RecyclerViewDataObserver *new_ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_RecyclerViewDataObserver, initWithADXRecyclerView_, outer$)
}

ADXRecyclerView_RecyclerViewDataObserver *create_ADXRecyclerView_RecyclerViewDataObserver_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_RecyclerViewDataObserver, initWithADXRecyclerView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_RecyclerViewDataObserver)

@implementation ADXRecyclerView_RecycledViewPool

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_RecycledViewPool_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)clear {
  for (jint i = 0; i < [((ADSparseArray *) nil_chk(mScrap_)) size]; i++) {
    ADXRecyclerView_RecycledViewPool_ScrapData *data = JreRetainedLocalValue([((ADSparseArray *) nil_chk(mScrap_)) valueAtWithInt:i]);
    [((JavaUtilArrayList *) nil_chk(((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(data))->mScrapHeap_)) clear];
  }
}

- (void)setMaxRecycledViewsWithInt:(jint)viewType
                           withInt:(jint)max {
  ADXRecyclerView_RecycledViewPool_ScrapData *scrapData = ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType);
  ((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(scrapData))->mMaxScrap_ = max;
  JavaUtilArrayList *scrapHeap = scrapData->mScrapHeap_;
  while ([((JavaUtilArrayList *) nil_chk(scrapHeap)) size] > max) {
    [scrapHeap removeWithInt:[scrapHeap size] - 1];
  }
}

- (jint)getRecycledViewCountWithInt:(jint)viewType {
  return [((JavaUtilArrayList *) nil_chk(((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType)))->mScrapHeap_)) size];
}

- (ADXRecyclerView_ViewHolder *)getRecycledViewWithInt:(jint)viewType {
  ADXRecyclerView_RecycledViewPool_ScrapData *scrapData = [((ADSparseArray *) nil_chk(mScrap_)) getWithInt:viewType];
  if (scrapData != nil && ![((JavaUtilArrayList *) nil_chk(scrapData->mScrapHeap_)) isEmpty]) {
    JavaUtilArrayList *scrapHeap = scrapData->mScrapHeap_;
    for (jint i = [((JavaUtilArrayList *) nil_chk(scrapHeap)) size] - 1; i >= 0; i--) {
      if (![((ADXRecyclerView_ViewHolder *) nil_chk([scrapHeap getWithInt:i])) isAttachedToTransitionOverlay]) {
        return [scrapHeap removeWithInt:i];
      }
    }
  }
  return nil;
}

- (jint)size {
  jint count = 0;
  for (jint i = 0; i < [((ADSparseArray *) nil_chk(mScrap_)) size]; i++) {
    JavaUtilArrayList *viewHolders = JreRetainedLocalValue(((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk([((ADSparseArray *) nil_chk(mScrap_)) valueAtWithInt:i]))->mScrapHeap_);
    if (viewHolders != nil) {
      count += [viewHolders size];
    }
  }
  return count;
}

- (void)putRecycledViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)scrap {
  jint viewType = ADXRecyclerView_ViewHolder_getItemViewType(nil_chk(scrap));
  JavaUtilArrayList *scrapHeap = ((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType)))->mScrapHeap_;
  if (((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk([((ADSparseArray *) nil_chk(mScrap_)) getWithInt:viewType]))->mMaxScrap_ <= [((JavaUtilArrayList *) nil_chk(scrapHeap)) size]) {
    return;
  }
  [scrap resetInternal];
  [scrapHeap addWithId:scrap];
}

- (jlong)runningAverageWithLong:(jlong)oldAverage
                       withLong:(jlong)newValue {
  if (oldAverage == 0) {
    return newValue;
  }
  return (JreLongDiv(oldAverage, 4) * 3) + (JreLongDiv(newValue, 4));
}

- (void)factorInCreateTimeWithInt:(jint)viewType
                         withLong:(jlong)createTimeNs {
  ADXRecyclerView_RecycledViewPool_ScrapData *scrapData = ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType);
  ((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(scrapData))->mCreateRunningAverageNs_ = [self runningAverageWithLong:scrapData->mCreateRunningAverageNs_ withLong:createTimeNs];
}

- (void)factorInBindTimeWithInt:(jint)viewType
                       withLong:(jlong)bindTimeNs {
  ADXRecyclerView_RecycledViewPool_ScrapData *scrapData = ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType);
  ((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(scrapData))->mBindRunningAverageNs_ = [self runningAverageWithLong:scrapData->mBindRunningAverageNs_ withLong:bindTimeNs];
}

- (jboolean)willCreateInTimeWithInt:(jint)viewType
                           withLong:(jlong)approxCurrentNs
                           withLong:(jlong)deadlineNs {
  jlong expectedDurationNs = ((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType)))->mCreateRunningAverageNs_;
  return expectedDurationNs == 0 || (approxCurrentNs + expectedDurationNs < deadlineNs);
}

- (jboolean)willBindInTimeWithInt:(jint)viewType
                         withLong:(jlong)approxCurrentNs
                         withLong:(jlong)deadlineNs {
  jlong expectedDurationNs = ((ADXRecyclerView_RecycledViewPool_ScrapData *) nil_chk(ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType)))->mBindRunningAverageNs_;
  return expectedDurationNs == 0 || (approxCurrentNs + expectedDurationNs < deadlineNs);
}

- (void)attach {
  mAttachCount_++;
}

- (void)detach {
  mAttachCount_--;
}

- (void)onAdapterChangedWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)oldAdapter
                        withADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)newAdapter
                                        withBoolean:(jboolean)compatibleWithPrevious {
  if (oldAdapter != nil) {
    [self detach];
  }
  if (!compatibleWithPrevious && mAttachCount_ == 0) {
    [self clear];
  }
  if (newAdapter != nil) {
    [self attach];
  }
}

- (ADXRecyclerView_RecycledViewPool_ScrapData *)getScrapDataForTypeWithInt:(jint)viewType {
  return ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(self, viewType);
}

- (void)dealloc {
  RELEASE_(mScrap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "J", 0x0, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 11, 10, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_RecycledViewPool_ScrapData;", 0x2, 17, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(setMaxRecycledViewsWithInt:withInt:);
  methods[3].selector = @selector(getRecycledViewCountWithInt:);
  methods[4].selector = @selector(getRecycledViewWithInt:);
  methods[5].selector = @selector(size);
  methods[6].selector = @selector(putRecycledViewWithADXRecyclerView_ViewHolder:);
  methods[7].selector = @selector(runningAverageWithLong:withLong:);
  methods[8].selector = @selector(factorInCreateTimeWithInt:withLong:);
  methods[9].selector = @selector(factorInBindTimeWithInt:withLong:);
  methods[10].selector = @selector(willCreateInTimeWithInt:withLong:withLong:);
  methods[11].selector = @selector(willBindInTimeWithInt:withLong:withLong:);
  methods[12].selector = @selector(attach);
  methods[13].selector = @selector(detach);
  methods[14].selector = @selector(onAdapterChangedWithADXRecyclerView_Adapter:withADXRecyclerView_Adapter:withBoolean:);
  methods[15].selector = @selector(getScrapDataForTypeWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_MAX_SCRAP", "I", .constantValue.asInt = ADXRecyclerView_RecycledViewPool_DEFAULT_MAX_SCRAP, 0x1a, -1, -1, -1, -1 },
    { "mScrap_", "LADSparseArray;", .constantValue.asLong = 0, 0x0, -1, -1, 18, -1 },
    { "mAttachCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxRecycledViews", "II", "getRecycledViewCount", "I", "getRecycledView", "putRecycledView", "LADXRecyclerView_ViewHolder;", "runningAverage", "JJ", "factorInCreateTime", "IJ", "factorInBindTime", "willCreateInTime", "IJJ", "willBindInTime", "onAdapterChanged", "LADXRecyclerView_Adapter;LADXRecyclerView_Adapter;Z", "getScrapDataForType", "Lr/android/util/SparseArray<Landroidx/recyclerview/widget/RecyclerView$RecycledViewPool$ScrapData;>;", "LADXRecyclerView;", "LADXRecyclerView_RecycledViewPool_ScrapData;" };
  static const J2ObjcClassInfo _ADXRecyclerView_RecycledViewPool = { "RecycledViewPool", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 16, 3, 19, 20, -1, -1, -1 };
  return &_ADXRecyclerView_RecycledViewPool;
}

@end

void ADXRecyclerView_RecycledViewPool_init(ADXRecyclerView_RecycledViewPool *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mScrap_, new_ADSparseArray_init());
  self->mAttachCount_ = 0;
}

ADXRecyclerView_RecycledViewPool *new_ADXRecyclerView_RecycledViewPool_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_RecycledViewPool, init)
}

ADXRecyclerView_RecycledViewPool *create_ADXRecyclerView_RecycledViewPool_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_RecycledViewPool, init)
}

ADXRecyclerView_RecycledViewPool_ScrapData *ADXRecyclerView_RecycledViewPool_getScrapDataForTypeWithInt_(ADXRecyclerView_RecycledViewPool *self, jint viewType) {
  ADXRecyclerView_RecycledViewPool_ScrapData *scrapData = JreRetainedLocalValue([((ADSparseArray *) nil_chk(self->mScrap_)) getWithInt:viewType]);
  if (scrapData == nil) {
    scrapData = create_ADXRecyclerView_RecycledViewPool_ScrapData_init();
    [((ADSparseArray *) nil_chk(self->mScrap_)) putWithInt:viewType withId:scrapData];
  }
  return scrapData;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_RecycledViewPool)

@implementation ADXRecyclerView_RecycledViewPool_ScrapData

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_RecycledViewPool_ScrapData_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mScrapHeap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mScrapHeap_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 0, -1 },
    { "mMaxScrap_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCreateRunningAverageNs_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBindRunningAverageNs_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "Ljava/util/ArrayList<Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;", "LADXRecyclerView_RecycledViewPool;" };
  static const J2ObjcClassInfo _ADXRecyclerView_RecycledViewPool_ScrapData = { "ScrapData", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 1, 4, 1, -1, -1, -1, -1 };
  return &_ADXRecyclerView_RecycledViewPool_ScrapData;
}

@end

void ADXRecyclerView_RecycledViewPool_ScrapData_init(ADXRecyclerView_RecycledViewPool_ScrapData *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mScrapHeap_, new_JavaUtilArrayList_init());
  self->mMaxScrap_ = ADXRecyclerView_RecycledViewPool_DEFAULT_MAX_SCRAP;
  self->mCreateRunningAverageNs_ = 0;
  self->mBindRunningAverageNs_ = 0;
}

ADXRecyclerView_RecycledViewPool_ScrapData *new_ADXRecyclerView_RecycledViewPool_ScrapData_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_RecycledViewPool_ScrapData, init)
}

ADXRecyclerView_RecycledViewPool_ScrapData *create_ADXRecyclerView_RecycledViewPool_ScrapData_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_RecycledViewPool_ScrapData, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_RecycledViewPool_ScrapData)

@implementation ADXRecyclerView_Recycler

- (instancetype)initWithADXRecyclerView:(ADXRecyclerView *)outer$ {
  ADXRecyclerView_Recycler_initWithADXRecyclerView_(self, outer$);
  return self;
}

- (void)clear {
  [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) clear];
  [self recycleAndClearCachedViews];
}

- (void)setViewCacheSizeWithInt:(jint)viewCount {
  mRequestedCacheMax_ = viewCount;
  [self updateViewCacheSize];
}

- (void)updateViewCacheSize {
  jint extraCache = this$0_->mLayout_ != nil ? this$0_->mLayout_->mPrefetchMaxCountObserved_ : 0;
  mViewCacheMax_ = mRequestedCacheMax_ + extraCache;
  for (jint i = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size] - 1; i >= 0 && [mCachedViews_ size] > mViewCacheMax_; i--) {
    [self recycleCachedViewAtWithInt:i];
  }
}

- (id<JavaUtilList>)getScrapList {
  return mUnmodifiableAttachedScrap_;
}

- (jboolean)validateViewHolderForOffsetPositionWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) isRemoved]) {
    return [((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) isPreLayout];
  }
  if (holder->mPosition_ < 0 || holder->mPosition_ >= [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemCount]) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$@$", @"Inconsistency detected. Invalid view holder adapter position", holder, [this$0_ exceptionLabel]));
  }
  if (![((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) isPreLayout]) {
    jint type = [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemViewTypeWithInt:holder->mPosition_];
    if (type != ADXRecyclerView_ViewHolder_getItemViewType(holder)) {
      return false;
    }
  }
  if (ADXRecyclerView_Adapter_hasStableIds(nil_chk(this$0_->mAdapter_))) {
    return ADXRecyclerView_ViewHolder_getItemId(holder) == [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemIdWithInt:holder->mPosition_];
  }
  return true;
}

- (jboolean)tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                                              withInt:(jint)offsetPosition
                                                              withInt:(jint)position
                                                             withLong:(jlong)deadlineNs {
  return ADXRecyclerView_Recycler_tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder_withInt_withInt_withLong_(self, holder, offsetPosition, position, deadlineNs);
}

- (void)bindViewToPositionWithADView:(ADView *)view
                             withInt:(jint)position {
  ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  if (holder == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"The view does not have a ViewHolder. You cannot pass arbitrary views to this method, they should be created by the Adapter", [this$0_ exceptionLabel]));
  }
  jint offsetPosition = [((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) findPositionOffsetWithInt:position];
  if (offsetPosition < 0 || offsetPosition >= [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemCount]) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$I$", @"Inconsistency detected. Invalid item position ", position, @"(offset:", offsetPosition, @").state:", [((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) getItemCount], [this$0_ exceptionLabel]));
  }
  ADXRecyclerView_Recycler_tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder_withInt_withInt_withLong_(self, holder, offsetPosition, position, ADXRecyclerView_FOREVER_NS);
  ADViewGroup_LayoutParams *lp = [((ADView *) nil_chk(holder->itemView_)) getLayoutParams];
  ADXRecyclerView_LayoutParams *rvLayoutParams;
  if (lp == nil) {
    rvLayoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([this$0_ generateDefaultLayoutParams], [ADXRecyclerView_LayoutParams class]);
    [holder->itemView_ setLayoutParamsWithADViewGroup_LayoutParams:rvLayoutParams];
  }
  else if (![this$0_ checkLayoutParamsWithADViewGroup_LayoutParams:lp]) {
    rvLayoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([this$0_ generateLayoutParamsWithADViewGroup_LayoutParams:lp], [ADXRecyclerView_LayoutParams class]);
    [holder->itemView_ setLayoutParamsWithADViewGroup_LayoutParams:rvLayoutParams];
  }
  else {
    rvLayoutParams = (ADXRecyclerView_LayoutParams *) cast_chk(lp, [ADXRecyclerView_LayoutParams class]);
  }
  ((ADXRecyclerView_LayoutParams *) nil_chk(rvLayoutParams))->mInsetsDirty_ = true;
  JreStrongAssign(&rvLayoutParams->mViewHolder_, holder);
  rvLayoutParams->mPendingInvalidate_ = ([holder->itemView_ getParent] == nil);
}

- (jint)convertPreLayoutPositionToPostLayoutWithInt:(jint)position {
  if (position < 0 || position >= [((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) getItemCount]) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$", @"invalid position ", position, @". State item count is ", [((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) getItemCount], [this$0_ exceptionLabel]));
  }
  if (![((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) isPreLayout]) {
    return position;
  }
  return [((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) findPositionOffsetWithInt:position];
}

- (ADView *)getViewForPositionWithInt:(jint)position {
  return [self getViewForPositionWithInt:position withBoolean:false];
}

- (ADView *)getViewForPositionWithInt:(jint)position
                          withBoolean:(jboolean)dryRun {
  return ((ADXRecyclerView_ViewHolder *) nil_chk([self tryGetViewHolderForPositionByDeadlineWithInt:position withBoolean:dryRun withLong:ADXRecyclerView_FOREVER_NS]))->itemView_;
}

- (ADXRecyclerView_ViewHolder *)tryGetViewHolderForPositionByDeadlineWithInt:(jint)position
                                                                 withBoolean:(jboolean)dryRun
                                                                    withLong:(jlong)deadlineNs {
  if (position < 0 || position >= [((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) getItemCount]) {
    @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$ICI$I$", @"Invalid item position ", position, '(', position, @"). Item count:", [((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) getItemCount], [this$0_ exceptionLabel]));
  }
  jboolean fromScrapOrHiddenOrCache = false;
  ADXRecyclerView_ViewHolder *holder = nil;
  if ([((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) isPreLayout]) {
    holder = [self getChangedScrapViewForPositionWithInt:position];
    fromScrapOrHiddenOrCache = (holder != nil);
  }
  if (holder == nil) {
    holder = [self getScrapOrHiddenOrCachedHolderForPositionWithInt:position withBoolean:dryRun];
    if (holder != nil) {
      if (![self validateViewHolderForOffsetPositionWithADXRecyclerView_ViewHolder:holder]) {
        if (!dryRun) {
          [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_INVALID];
          if ([holder isScrap]) {
            [this$0_ removeDetachedViewWithADView:holder->itemView_ withBoolean:false];
            [holder unScrap];
          }
          else if ([holder wasReturnedFromScrap]) {
            [holder clearReturnedFromScrapFlag];
          }
          [self recycleViewHolderInternalWithADXRecyclerView_ViewHolder:holder];
        }
        holder = nil;
      }
      else {
        fromScrapOrHiddenOrCache = true;
      }
    }
  }
  if (holder == nil) {
    jint offsetPosition = [((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) findPositionOffsetWithInt:position];
    if (offsetPosition < 0 || offsetPosition >= [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemCount]) {
      @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$I$", @"Inconsistency detected. Invalid item position ", position, @"(offset:", offsetPosition, @").state:", [this$0_->mState_ getItemCount], [this$0_ exceptionLabel]));
    }
    jint type = [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemViewTypeWithInt:offsetPosition];
    if (ADXRecyclerView_Adapter_hasStableIds(nil_chk(this$0_->mAdapter_))) {
      holder = [self getScrapOrCachedViewForIdWithLong:[((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemIdWithInt:offsetPosition] withInt:type withBoolean:dryRun];
      if (holder != nil) {
        holder->mPosition_ = offsetPosition;
        fromScrapOrHiddenOrCache = true;
      }
    }
    if (holder == nil && mViewCacheExtension_ != nil) {
      ADView *view = [mViewCacheExtension_ getViewForPositionAndTypeWithADXRecyclerView_Recycler:self withInt:position withInt:type];
      if (view != nil) {
        holder = [this$0_ getChildViewHolderWithADView:view];
        if (holder == nil) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"getViewForPositionAndType returned a view which does not have a ViewHolder", [this$0_ exceptionLabel]));
        }
        else if ([holder shouldIgnore]) {
          @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"getViewForPositionAndType returned a view that is ignored. You must call stopIgnoring before returning this view.", [this$0_ exceptionLabel]));
        }
      }
    }
    if (holder == nil) {
      holder = [((ADXRecyclerView_RecycledViewPool *) nil_chk([self getRecycledViewPool])) getRecycledViewWithInt:type];
      if (holder != nil) {
        [holder resetInternal];
      }
    }
    if (holder == nil) {
      jlong start = [this$0_ getNanoTime];
      if (deadlineNs != ADXRecyclerView_FOREVER_NS && ![((ADXRecyclerView_RecycledViewPool *) nil_chk(mRecyclerPool_)) willCreateInTimeWithInt:type withLong:start withLong:deadlineNs]) {
        return nil;
      }
      holder = ADXRecyclerView_Adapter_createViewHolderWithADViewGroup_withInt_(nil_chk(this$0_->mAdapter_), this$0_, type);
      {
        ADXRecyclerView *innerView = ADXRecyclerView_findNestedRecyclerViewWithADView_(((ADXRecyclerView_ViewHolder *) nil_chk(holder))->itemView_);
        if (innerView != nil) {
          JreStrongAssignAndConsume(&holder->mNestedRecyclerView_, new_JavaLangRefWeakReference_initWithId_(innerView));
        }
      }
      jlong end = [this$0_ getNanoTime];
      [((ADXRecyclerView_RecycledViewPool *) nil_chk(mRecyclerPool_)) factorInCreateTimeWithInt:type withLong:end - start];
    }
  }
  if (fromScrapOrHiddenOrCache && ![this$0_->mState_ isPreLayout] && [holder hasAnyOfTheFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_BOUNCED_FROM_HIDDEN_LIST]) {
    [holder setFlagsWithInt:0 withInt:ADXRecyclerView_ViewHolder_FLAG_BOUNCED_FROM_HIDDEN_LIST];
    if (this$0_->mState_->mRunSimpleAnimations_) {
      jint changeFlags = ADXRecyclerView_ItemAnimator_buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder_(holder);
      changeFlags |= ADXRecyclerView_ItemAnimator_FLAG_APPEARED_IN_PRE_LAYOUT;
      ADXRecyclerView_ItemAnimator_ItemHolderInfo *info = [((ADXRecyclerView_ItemAnimator *) nil_chk(this$0_->mItemAnimator_)) recordPreLayoutInformationWithADXRecyclerView_State:this$0_->mState_ withADXRecyclerView_ViewHolder:holder withInt:changeFlags withJavaUtilList:[holder getUnmodifiedPayloads]];
      [this$0_ recordAnimationInfoIfBouncedHiddenViewWithADXRecyclerView_ViewHolder:holder withADXRecyclerView_ItemAnimator_ItemHolderInfo:info];
    }
  }
  jboolean bound = false;
  if ([this$0_->mState_ isPreLayout] && [holder isBound]) {
    holder->mPreLayoutPosition_ = position;
  }
  else if (![holder isBound] || [holder needsUpdate] || [holder isInvalid]) {
    jint offsetPosition = [((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) findPositionOffsetWithInt:position];
    bound = ADXRecyclerView_Recycler_tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder_withInt_withInt_withLong_(self, holder, offsetPosition, position, deadlineNs);
  }
  ADViewGroup_LayoutParams *lp = [((ADView *) nil_chk(holder->itemView_)) getLayoutParams];
  ADXRecyclerView_LayoutParams *rvLayoutParams;
  if (lp == nil) {
    rvLayoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([this$0_ generateDefaultLayoutParams], [ADXRecyclerView_LayoutParams class]);
    [holder->itemView_ setLayoutParamsWithADViewGroup_LayoutParams:rvLayoutParams];
  }
  else if (![this$0_ checkLayoutParamsWithADViewGroup_LayoutParams:lp]) {
    rvLayoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([this$0_ generateLayoutParamsWithADViewGroup_LayoutParams:lp], [ADXRecyclerView_LayoutParams class]);
    [holder->itemView_ setLayoutParamsWithADViewGroup_LayoutParams:rvLayoutParams];
  }
  else {
    rvLayoutParams = (ADXRecyclerView_LayoutParams *) cast_chk(lp, [ADXRecyclerView_LayoutParams class]);
  }
  JreStrongAssign(&((ADXRecyclerView_LayoutParams *) nil_chk(rvLayoutParams))->mViewHolder_, holder);
  rvLayoutParams->mPendingInvalidate_ = (fromScrapOrHiddenOrCache && bound);
  return holder;
}

- (void)invalidateDisplayListIntWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  ADXRecyclerView_Recycler_invalidateDisplayListIntWithADXRecyclerView_ViewHolder_(self, holder);
}

- (void)invalidateDisplayListIntWithADViewGroup:(ADViewGroup *)viewGroup
                                    withBoolean:(jboolean)invalidateThis {
  ADXRecyclerView_Recycler_invalidateDisplayListIntWithADViewGroup_withBoolean_(self, viewGroup, invalidateThis);
}

- (void)recycleViewWithADView:(ADView *)view {
  ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) isTmpDetached]) {
    [this$0_ removeDetachedViewWithADView:view withBoolean:false];
  }
  if ([holder isScrap]) {
    [holder unScrap];
  }
  else if ([holder wasReturnedFromScrap]) {
    [holder clearReturnedFromScrapFlag];
  }
  [self recycleViewHolderInternalWithADXRecyclerView_ViewHolder:holder];
  if (this$0_->mItemAnimator_ != nil && !ADXRecyclerView_ViewHolder_isRecyclable(holder)) {
    [this$0_->mItemAnimator_ endAnimationWithADXRecyclerView_ViewHolder:holder];
  }
}

- (void)recycleAndClearCachedViews {
  jint count = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = count - 1; i >= 0; i--) {
    [self recycleCachedViewAtWithInt:i];
  }
  [mCachedViews_ clear];
  {
    [((ADXGapWorker_LayoutPrefetchRegistryImpl *) nil_chk(this$0_->mPrefetchRegistry_)) clearPrefetchPositions];
  }
}

- (void)recycleCachedViewAtWithInt:(jint)cachedViewIndex {
  ADXRecyclerView_ViewHolder *viewHolder = JreRetainedLocalValue([((JavaUtilArrayList *) nil_chk(mCachedViews_)) getWithInt:cachedViewIndex]);
  [self addViewHolderToRecycledViewPoolWithADXRecyclerView_ViewHolder:viewHolder withBoolean:true];
  [mCachedViews_ removeWithInt:cachedViewIndex];
}

- (void)recycleViewHolderInternalWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) isScrap] || [((ADView *) nil_chk(holder->itemView_)) getParent] != nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$Z$Z$", @"Scrapped or attached views may not be recycled. isScrap:", [holder isScrap], @" isAttached:", ([((ADView *) nil_chk(holder->itemView_)) getParent] != nil), [this$0_ exceptionLabel]));
  }
  if ([holder isTmpDetached]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@$", @"Tmp detached view should be removed from RecyclerView before it can be recycled: ", holder, [this$0_ exceptionLabel]));
  }
  if ([holder shouldIgnore]) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Trying to recycle an ignored view holder. You should first call stopIgnoringView(view) before calling recycle.", [this$0_ exceptionLabel]));
  }
  jboolean transientStatePreventsRecycling = [holder doesTransientStatePreventRecycling];
  jboolean forceRecycle = this$0_->mAdapter_ != nil && transientStatePreventsRecycling && [this$0_->mAdapter_ onFailedToRecycleViewWithADXRecyclerView_ViewHolder:holder];
  jboolean cached = false;
  jboolean recycled = false;
  if (forceRecycle || ADXRecyclerView_ViewHolder_isRecyclable(holder)) {
    if (mViewCacheMax_ > 0 && ![holder hasAnyOfTheFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_INVALID | ADXRecyclerView_ViewHolder_FLAG_REMOVED | ADXRecyclerView_ViewHolder_FLAG_UPDATE | ADXRecyclerView_ViewHolder_FLAG_ADAPTER_POSITION_UNKNOWN]) {
      jint cachedViewSize = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
      if (cachedViewSize >= mViewCacheMax_ && cachedViewSize > 0) {
        [self recycleCachedViewAtWithInt:0];
        cachedViewSize--;
      }
      jint targetCacheIndex = cachedViewSize;
      if (cachedViewSize > 0 && ![((ADXGapWorker_LayoutPrefetchRegistryImpl *) nil_chk(this$0_->mPrefetchRegistry_)) lastPrefetchIncludedPositionWithInt:holder->mPosition_]) {
        jint cacheIndex = cachedViewSize - 1;
        while (cacheIndex >= 0) {
          jint cachedPos = ((ADXRecyclerView_ViewHolder *) nil_chk([mCachedViews_ getWithInt:cacheIndex]))->mPosition_;
          if (![((ADXGapWorker_LayoutPrefetchRegistryImpl *) nil_chk(this$0_->mPrefetchRegistry_)) lastPrefetchIncludedPositionWithInt:cachedPos]) {
            break;
          }
          cacheIndex--;
        }
        targetCacheIndex = cacheIndex + 1;
      }
      [mCachedViews_ addWithInt:targetCacheIndex withId:holder];
      cached = true;
    }
    if (!cached) {
      [self addViewHolderToRecycledViewPoolWithADXRecyclerView_ViewHolder:holder withBoolean:true];
      recycled = true;
    }
  }
  else {
  }
  [((ADXViewInfoStore *) nil_chk(this$0_->mViewInfoStore_)) removeViewHolderWithADXRecyclerView_ViewHolder:holder];
  if (!cached && !recycled && transientStatePreventsRecycling) {
    JreStrongAssign(&holder->mBindingAdapter_, nil);
    JreStrongAssign(&holder->mOwnerRecyclerView_, nil);
  }
}

- (void)addViewHolderToRecycledViewPoolWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                                          withBoolean:(jboolean)dispatchRecycled {
  ADXRecyclerView_clearNestedRecyclerViewIfNotNestedWithADXRecyclerView_ViewHolder_(holder);
  ADView *itemView = JreRetainedLocalValue(((ADXRecyclerView_ViewHolder *) nil_chk(holder))->itemView_);
  if (dispatchRecycled) {
    [self dispatchViewRecycledWithADXRecyclerView_ViewHolder:holder];
  }
  JreStrongAssign(&holder->mBindingAdapter_, nil);
  JreStrongAssign(&holder->mOwnerRecyclerView_, nil);
  [((ADXRecyclerView_RecycledViewPool *) nil_chk([self getRecycledViewPool])) putRecycledViewWithADXRecyclerView_ViewHolder:holder];
}

- (void)quickRecycleScrapViewWithADView:(ADView *)view {
  ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  JreStrongAssign(&((ADXRecyclerView_ViewHolder *) nil_chk(holder))->mScrapContainer_, nil);
  holder->mInChangeScrap_ = false;
  [holder clearReturnedFromScrapFlag];
  [self recycleViewHolderInternalWithADXRecyclerView_ViewHolder:holder];
}

- (void)scrapViewWithADView:(ADView *)view {
  ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) hasAnyOfTheFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_REMOVED | ADXRecyclerView_ViewHolder_FLAG_INVALID] || ![holder isUpdated] || [this$0_ canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:holder]) {
    if ([holder isInvalid] && ![holder isRemoved] && !ADXRecyclerView_Adapter_hasStableIds(nil_chk(this$0_->mAdapter_))) {
      @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"Called scrap view with an invalid view. Invalid views cannot be reused from scrap, they should rebound from recycler pool.", [this$0_ exceptionLabel]));
    }
    [holder setScrapContainerWithADXRecyclerView_Recycler:self withBoolean:false];
    [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) addWithId:holder];
  }
  else {
    if (mChangedScrap_ == nil) {
      JreStrongAssignAndConsume(&mChangedScrap_, new_JavaUtilArrayList_init());
    }
    [holder setScrapContainerWithADXRecyclerView_Recycler:self withBoolean:true];
    [((JavaUtilArrayList *) nil_chk(mChangedScrap_)) addWithId:holder];
  }
}

- (void)unscrapViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  if (((ADXRecyclerView_ViewHolder *) nil_chk(holder))->mInChangeScrap_) {
    [((JavaUtilArrayList *) nil_chk(mChangedScrap_)) removeWithId:holder];
  }
  else {
    [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) removeWithId:holder];
  }
  JreStrongAssign(&holder->mScrapContainer_, nil);
  holder->mInChangeScrap_ = false;
  [holder clearReturnedFromScrapFlag];
}

- (jint)getScrapCount {
  return [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) size];
}

- (ADView *)getScrapViewAtWithInt:(jint)index {
  return ((ADXRecyclerView_ViewHolder *) nil_chk([((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) getWithInt:index]))->itemView_;
}

- (void)clearScrap {
  [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) clear];
  if (mChangedScrap_ != nil) {
    [mChangedScrap_ clear];
  }
}

- (ADXRecyclerView_ViewHolder *)getChangedScrapViewForPositionWithInt:(jint)position {
  jint changedScrapSize;
  if (mChangedScrap_ == nil || (changedScrapSize = [mChangedScrap_ size]) == 0) {
    return nil;
  }
  for (jint i = 0; i < changedScrapSize; i++) {
    ADXRecyclerView_ViewHolder *holder = [((JavaUtilArrayList *) nil_chk(mChangedScrap_)) getWithInt:i];
    if (![((ADXRecyclerView_ViewHolder *) nil_chk(holder)) wasReturnedFromScrap] && ADXRecyclerView_ViewHolder_getLayoutPosition(holder) == position) {
      [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP];
      return holder;
    }
  }
  if (ADXRecyclerView_Adapter_hasStableIds(nil_chk(this$0_->mAdapter_))) {
    jint offsetPosition = [((ADXAdapterHelper *) nil_chk(this$0_->mAdapterHelper_)) findPositionOffsetWithInt:position];
    if (offsetPosition > 0 && offsetPosition < [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemCount]) {
      jlong id_ = [((ADXRecyclerView_Adapter *) nil_chk(this$0_->mAdapter_)) getItemIdWithInt:offsetPosition];
      for (jint i = 0; i < changedScrapSize; i++) {
        ADXRecyclerView_ViewHolder *holder = [((JavaUtilArrayList *) nil_chk(mChangedScrap_)) getWithInt:i];
        if (![((ADXRecyclerView_ViewHolder *) nil_chk(holder)) wasReturnedFromScrap] && ADXRecyclerView_ViewHolder_getItemId(holder) == id_) {
          [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP];
          return holder;
        }
      }
    }
  }
  return nil;
}

- (ADXRecyclerView_ViewHolder *)getScrapOrHiddenOrCachedHolderForPositionWithInt:(jint)position
                                                                     withBoolean:(jboolean)dryRun {
  jint scrapCount = [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) size];
  for (jint i = 0; i < scrapCount; i++) {
    ADXRecyclerView_ViewHolder *holder = [mAttachedScrap_ getWithInt:i];
    if (![((ADXRecyclerView_ViewHolder *) nil_chk(holder)) wasReturnedFromScrap] && ADXRecyclerView_ViewHolder_getLayoutPosition(holder) == position && ![holder isInvalid] && (((ADXRecyclerView_State *) nil_chk(this$0_->mState_))->mInPreLayout_ || ![holder isRemoved])) {
      [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP];
      return holder;
    }
  }
  if (!dryRun) {
    ADView *view = JreRetainedLocalValue([((ADXChildHelper *) nil_chk(this$0_->mChildHelper_)) findHiddenNonRemovedViewWithInt:position]);
    if (view != nil) {
      ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
      [((ADXChildHelper *) nil_chk(this$0_->mChildHelper_)) unhideWithADView:view];
      jint layoutIndex = [((ADXChildHelper *) nil_chk(this$0_->mChildHelper_)) indexOfChildWithADView:view];
      if (layoutIndex == ADXRecyclerView_NO_POSITION) {
        @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$@$", @"layout index should not be -1 after unhiding a view:", vh, [this$0_ exceptionLabel]));
      }
      [((ADXChildHelper *) nil_chk(this$0_->mChildHelper_)) detachViewFromParentWithInt:layoutIndex];
      [self scrapViewWithADView:view];
      [((ADXRecyclerView_ViewHolder *) nil_chk(vh)) addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP | ADXRecyclerView_ViewHolder_FLAG_BOUNCED_FROM_HIDDEN_LIST];
      return vh;
    }
  }
  jint cacheSize = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = 0; i < cacheSize; i++) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (![((ADXRecyclerView_ViewHolder *) nil_chk(holder)) isInvalid] && ADXRecyclerView_ViewHolder_getLayoutPosition(holder) == position && ![holder isAttachedToTransitionOverlay]) {
      if (!dryRun) {
        [mCachedViews_ removeWithInt:i];
      }
      return holder;
    }
  }
  return nil;
}

- (ADXRecyclerView_ViewHolder *)getScrapOrCachedViewForIdWithLong:(jlong)id_
                                                          withInt:(jint)type
                                                      withBoolean:(jboolean)dryRun {
  jint count = [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) size];
  for (jint i = count - 1; i >= 0; i--) {
    ADXRecyclerView_ViewHolder *holder = [mAttachedScrap_ getWithInt:i];
    if (ADXRecyclerView_ViewHolder_getItemId(nil_chk(holder)) == id_ && ![holder wasReturnedFromScrap]) {
      if (type == ADXRecyclerView_ViewHolder_getItemViewType(holder)) {
        [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP];
        if ([holder isRemoved]) {
          if (![((ADXRecyclerView_State *) nil_chk(this$0_->mState_)) isPreLayout]) {
            [holder setFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_UPDATE withInt:ADXRecyclerView_ViewHolder_FLAG_UPDATE | ADXRecyclerView_ViewHolder_FLAG_INVALID | ADXRecyclerView_ViewHolder_FLAG_REMOVED];
          }
        }
        return holder;
      }
      else if (!dryRun) {
        [mAttachedScrap_ removeWithInt:i];
        [this$0_ removeDetachedViewWithADView:holder->itemView_ withBoolean:false];
        [self quickRecycleScrapViewWithADView:holder->itemView_];
      }
    }
  }
  jint cacheSize = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = cacheSize - 1; i >= 0; i--) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (ADXRecyclerView_ViewHolder_getItemId(nil_chk(holder)) == id_ && ![holder isAttachedToTransitionOverlay]) {
      if (type == ADXRecyclerView_ViewHolder_getItemViewType(holder)) {
        if (!dryRun) {
          [mCachedViews_ removeWithInt:i];
        }
        return holder;
      }
      else if (!dryRun) {
        [self recycleCachedViewAtWithInt:i];
        return nil;
      }
    }
  }
  return nil;
}

- (void)dispatchViewRecycledWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  if (this$0_->mRecyclerListener_ != nil) {
    [this$0_->mRecyclerListener_ onViewRecycledWithADXRecyclerView_ViewHolder:holder];
  }
  jint listenerCount = [((id<JavaUtilList>) nil_chk(this$0_->mRecyclerListeners_)) size];
  for (jint i = 0; i < listenerCount; i++) {
    [((id<ADXRecyclerView_RecyclerListener>) nil_chk([this$0_->mRecyclerListeners_ getWithInt:i])) onViewRecycledWithADXRecyclerView_ViewHolder:holder];
  }
  if (this$0_->mAdapter_ != nil) {
    [this$0_->mAdapter_ onViewRecycledWithADXRecyclerView_ViewHolder:holder];
  }
  if (this$0_->mState_ != nil) {
    [((ADXViewInfoStore *) nil_chk(this$0_->mViewInfoStore_)) removeViewHolderWithADXRecyclerView_ViewHolder:holder];
  }
}

- (void)onAdapterChangedWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)oldAdapter
                        withADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)newAdapter
                                        withBoolean:(jboolean)compatibleWithPrevious {
  [self clear];
  [((ADXRecyclerView_RecycledViewPool *) nil_chk([self getRecycledViewPool])) onAdapterChangedWithADXRecyclerView_Adapter:oldAdapter withADXRecyclerView_Adapter:newAdapter withBoolean:compatibleWithPrevious];
}

- (void)offsetPositionRecordsForMoveWithInt:(jint)from
                                    withInt:(jint)to {
  jint start;
  jint end;
  jint inBetweenOffset;
  if (from < to) {
    start = from;
    end = to;
    inBetweenOffset = -1;
  }
  else {
    start = to;
    end = from;
    inBetweenOffset = 1;
  }
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = 0; i < cachedCount; i++) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (holder == nil || holder->mPosition_ < start || holder->mPosition_ > end) {
      continue;
    }
    if (holder->mPosition_ == from) {
      [holder offsetPositionWithInt:to - from withBoolean:false];
    }
    else {
      [holder offsetPositionWithInt:inBetweenOffset withBoolean:false];
    }
  }
}

- (void)offsetPositionRecordsForInsertWithInt:(jint)insertedAt
                                      withInt:(jint)count {
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = 0; i < cachedCount; i++) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (holder != nil && holder->mPosition_ >= insertedAt) {
      [holder offsetPositionWithInt:count withBoolean:false];
    }
  }
}

- (void)offsetPositionRecordsForRemoveWithInt:(jint)removedFrom
                                      withInt:(jint)count
                                  withBoolean:(jboolean)applyToPreLayout {
  jint removedEnd = removedFrom + count;
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = cachedCount - 1; i >= 0; i--) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (holder != nil) {
      if (holder->mPosition_ >= removedEnd) {
        [holder offsetPositionWithInt:-count withBoolean:applyToPreLayout];
      }
      else if (holder->mPosition_ >= removedFrom) {
        [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_REMOVED];
        [self recycleCachedViewAtWithInt:i];
      }
    }
  }
}

- (void)setViewCacheExtensionWithADXRecyclerView_ViewCacheExtension:(ADXRecyclerView_ViewCacheExtension *)extension {
  JreStrongAssign(&mViewCacheExtension_, extension);
}

- (void)setRecycledViewPoolWithADXRecyclerView_RecycledViewPool:(ADXRecyclerView_RecycledViewPool *)pool {
  if (mRecyclerPool_ != nil) {
    [mRecyclerPool_ detach];
  }
  JreStrongAssign(&mRecyclerPool_, pool);
  if (mRecyclerPool_ != nil && [this$0_ getAdapter] != nil) {
    [mRecyclerPool_ attach];
  }
}

- (ADXRecyclerView_RecycledViewPool *)getRecycledViewPool {
  if (mRecyclerPool_ == nil) {
    JreStrongAssignAndConsume(&mRecyclerPool_, new_ADXRecyclerView_RecycledViewPool_init());
  }
  return mRecyclerPool_;
}

- (void)viewRangeUpdateWithInt:(jint)positionStart
                       withInt:(jint)itemCount {
  jint positionEnd = positionStart + itemCount;
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = cachedCount - 1; i >= 0; i--) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (holder == nil) {
      continue;
    }
    jint pos = holder->mPosition_;
    if (pos >= positionStart && pos < positionEnd) {
      [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_UPDATE];
      [self recycleCachedViewAtWithInt:i];
    }
  }
}

- (void)markKnownViewsInvalid {
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = 0; i < cachedCount; i++) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    if (holder != nil) {
      [holder addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_UPDATE | ADXRecyclerView_ViewHolder_FLAG_INVALID];
      [holder addChangePayloadWithId:nil];
    }
  }
  if (this$0_->mAdapter_ == nil || !ADXRecyclerView_Adapter_hasStableIds(this$0_->mAdapter_)) {
    [self recycleAndClearCachedViews];
  }
}

- (void)clearOldPositions {
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = 0; i < cachedCount; i++) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    [((ADXRecyclerView_ViewHolder *) nil_chk(holder)) clearOldPosition];
  }
  jint scrapCount = [((JavaUtilArrayList *) nil_chk(mAttachedScrap_)) size];
  for (jint i = 0; i < scrapCount; i++) {
    [((ADXRecyclerView_ViewHolder *) nil_chk([mAttachedScrap_ getWithInt:i])) clearOldPosition];
  }
  if (mChangedScrap_ != nil) {
    jint changedScrapCount = [mChangedScrap_ size];
    for (jint i = 0; i < changedScrapCount; i++) {
      [((ADXRecyclerView_ViewHolder *) nil_chk([((JavaUtilArrayList *) nil_chk(mChangedScrap_)) getWithInt:i])) clearOldPosition];
    }
  }
}

- (void)markItemDecorInsetsDirty {
  jint cachedCount = [((JavaUtilArrayList *) nil_chk(mCachedViews_)) size];
  for (jint i = 0; i < cachedCount; i++) {
    ADXRecyclerView_ViewHolder *holder = [mCachedViews_ getWithInt:i];
    ADXRecyclerView_LayoutParams *layoutParams = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(((ADXRecyclerView_ViewHolder *) nil_chk(holder))->itemView_)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
    if (layoutParams != nil) {
      layoutParams->mInsetsDirty_ = true;
    }
  }
}

- (void)dealloc {
  RELEASE_(this$0_);
  RELEASE_(mAttachedScrap_);
  RELEASE_(mChangedScrap_);
  RELEASE_(mCachedViews_);
  RELEASE_(mUnmodifiableAttachedScrap_);
  RELEASE_(mRecyclerPool_);
  RELEASE_(mViewCacheExtension_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "Z", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 21, 22, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 23, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 25, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x0, 27, 2, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x0, 28, 12, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x0, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 31, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 34, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 36, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 41, 42, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_RecycledViewPool;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 43, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView:);
  methods[1].selector = @selector(clear);
  methods[2].selector = @selector(setViewCacheSizeWithInt:);
  methods[3].selector = @selector(updateViewCacheSize);
  methods[4].selector = @selector(getScrapList);
  methods[5].selector = @selector(validateViewHolderForOffsetPositionWithADXRecyclerView_ViewHolder:);
  methods[6].selector = @selector(tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder:withInt:withInt:withLong:);
  methods[7].selector = @selector(bindViewToPositionWithADView:withInt:);
  methods[8].selector = @selector(convertPreLayoutPositionToPostLayoutWithInt:);
  methods[9].selector = @selector(getViewForPositionWithInt:);
  methods[10].selector = @selector(getViewForPositionWithInt:withBoolean:);
  methods[11].selector = @selector(tryGetViewHolderForPositionByDeadlineWithInt:withBoolean:withLong:);
  methods[12].selector = @selector(invalidateDisplayListIntWithADXRecyclerView_ViewHolder:);
  methods[13].selector = @selector(invalidateDisplayListIntWithADViewGroup:withBoolean:);
  methods[14].selector = @selector(recycleViewWithADView:);
  methods[15].selector = @selector(recycleAndClearCachedViews);
  methods[16].selector = @selector(recycleCachedViewAtWithInt:);
  methods[17].selector = @selector(recycleViewHolderInternalWithADXRecyclerView_ViewHolder:);
  methods[18].selector = @selector(addViewHolderToRecycledViewPoolWithADXRecyclerView_ViewHolder:withBoolean:);
  methods[19].selector = @selector(quickRecycleScrapViewWithADView:);
  methods[20].selector = @selector(scrapViewWithADView:);
  methods[21].selector = @selector(unscrapViewWithADXRecyclerView_ViewHolder:);
  methods[22].selector = @selector(getScrapCount);
  methods[23].selector = @selector(getScrapViewAtWithInt:);
  methods[24].selector = @selector(clearScrap);
  methods[25].selector = @selector(getChangedScrapViewForPositionWithInt:);
  methods[26].selector = @selector(getScrapOrHiddenOrCachedHolderForPositionWithInt:withBoolean:);
  methods[27].selector = @selector(getScrapOrCachedViewForIdWithLong:withInt:withBoolean:);
  methods[28].selector = @selector(dispatchViewRecycledWithADXRecyclerView_ViewHolder:);
  methods[29].selector = @selector(onAdapterChangedWithADXRecyclerView_Adapter:withADXRecyclerView_Adapter:withBoolean:);
  methods[30].selector = @selector(offsetPositionRecordsForMoveWithInt:withInt:);
  methods[31].selector = @selector(offsetPositionRecordsForInsertWithInt:withInt:);
  methods[32].selector = @selector(offsetPositionRecordsForRemoveWithInt:withInt:withBoolean:);
  methods[33].selector = @selector(setViewCacheExtensionWithADXRecyclerView_ViewCacheExtension:);
  methods[34].selector = @selector(setRecycledViewPoolWithADXRecyclerView_RecycledViewPool:);
  methods[35].selector = @selector(getRecycledViewPool);
  methods[36].selector = @selector(viewRangeUpdateWithInt:withInt:);
  methods[37].selector = @selector(markKnownViewsInvalid);
  methods[38].selector = @selector(clearOldPositions);
  methods[39].selector = @selector(markItemDecorInsetsDirty);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "mAttachedScrap_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 44, -1 },
    { "mChangedScrap_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 44, -1 },
    { "mCachedViews_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x10, -1, -1, 44, -1 },
    { "mUnmodifiableAttachedScrap_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 45, -1 },
    { "mRequestedCacheMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mViewCacheMax_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRecyclerPool_", "LADXRecyclerView_RecycledViewPool;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mViewCacheExtension_", "LADXRecyclerView_ViewCacheExtension;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DEFAULT_CACHE_SIZE", "I", .constantValue.asInt = ADXRecyclerView_Recycler_DEFAULT_CACHE_SIZE, 0x18, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;", "setViewCacheSize", "I", "()Ljava/util/List<Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;", "validateViewHolderForOffsetPosition", "LADXRecyclerView_ViewHolder;", "tryBindViewHolderByDeadline", "LADXRecyclerView_ViewHolder;IIJ", "bindViewToPosition", "LADView;I", "convertPreLayoutPositionToPostLayout", "getViewForPosition", "IZ", "tryGetViewHolderForPositionByDeadline", "IZJ", "invalidateDisplayListInt", "LADViewGroup;Z", "recycleView", "LADView;", "recycleCachedViewAt", "recycleViewHolderInternal", "addViewHolderToRecycledViewPool", "LADXRecyclerView_ViewHolder;Z", "quickRecycleScrapView", "scrapView", "unscrapView", "getScrapViewAt", "getChangedScrapViewForPosition", "getScrapOrHiddenOrCachedHolderForPosition", "getScrapOrCachedViewForId", "JIZ", "dispatchViewRecycled", "onAdapterChanged", "LADXRecyclerView_Adapter;LADXRecyclerView_Adapter;Z", "offsetPositionRecordsForMove", "II", "offsetPositionRecordsForInsert", "offsetPositionRecordsForRemove", "IIZ", "setViewCacheExtension", "LADXRecyclerView_ViewCacheExtension;", "setRecycledViewPool", "LADXRecyclerView_RecycledViewPool;", "viewRangeUpdate", "Ljava/util/ArrayList<Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;", "Ljava/util/List<Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;" };
  static const J2ObjcClassInfo _ADXRecyclerView_Recycler = { "Recycler", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x11, 40, 10, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_Recycler;
}

@end

void ADXRecyclerView_Recycler_initWithADXRecyclerView_(ADXRecyclerView_Recycler *self, ADXRecyclerView *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mAttachedScrap_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mChangedScrap_, nil);
  JreStrongAssignAndConsume(&self->mCachedViews_, new_JavaUtilArrayList_init());
  JreStrongAssign(&self->mUnmodifiableAttachedScrap_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(self->mAttachedScrap_));
  self->mRequestedCacheMax_ = ADXRecyclerView_Recycler_DEFAULT_CACHE_SIZE;
  self->mViewCacheMax_ = ADXRecyclerView_Recycler_DEFAULT_CACHE_SIZE;
}

ADXRecyclerView_Recycler *new_ADXRecyclerView_Recycler_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_Recycler, initWithADXRecyclerView_, outer$)
}

ADXRecyclerView_Recycler *create_ADXRecyclerView_Recycler_initWithADXRecyclerView_(ADXRecyclerView *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_Recycler, initWithADXRecyclerView_, outer$)
}

jboolean ADXRecyclerView_Recycler_tryBindViewHolderByDeadlineWithADXRecyclerView_ViewHolder_withInt_withInt_withLong_(ADXRecyclerView_Recycler *self, ADXRecyclerView_ViewHolder *holder, jint offsetPosition, jint position, jlong deadlineNs) {
  JreStrongAssign(&((ADXRecyclerView_ViewHolder *) nil_chk(holder))->mBindingAdapter_, nil);
  JreStrongAssign(&holder->mOwnerRecyclerView_, self->this$0_);
  jint viewType = ADXRecyclerView_ViewHolder_getItemViewType(holder);
  jlong startBindNs = [self->this$0_ getNanoTime];
  if (deadlineNs != ADXRecyclerView_FOREVER_NS && ![((ADXRecyclerView_RecycledViewPool *) nil_chk(self->mRecyclerPool_)) willBindInTimeWithInt:viewType withLong:startBindNs withLong:deadlineNs]) {
    return false;
  }
  ADXRecyclerView_Adapter_bindViewHolderWithADXRecyclerView_ViewHolder_withInt_(nil_chk(self->this$0_->mAdapter_), holder, offsetPosition);
  jlong endBindNs = [self->this$0_ getNanoTime];
  [((ADXRecyclerView_RecycledViewPool *) nil_chk(self->mRecyclerPool_)) factorInBindTimeWithInt:ADXRecyclerView_ViewHolder_getItemViewType(holder) withLong:endBindNs - startBindNs];
  if ([((ADXRecyclerView_State *) nil_chk(self->this$0_->mState_)) isPreLayout]) {
    holder->mPreLayoutPosition_ = position;
  }
  return true;
}

void ADXRecyclerView_Recycler_invalidateDisplayListIntWithADXRecyclerView_ViewHolder_(ADXRecyclerView_Recycler *self, ADXRecyclerView_ViewHolder *holder) {
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder))->itemView_ isKindOfClass:[ADViewGroup class]]) {
    ADXRecyclerView_Recycler_invalidateDisplayListIntWithADViewGroup_withBoolean_(self, (ADViewGroup *) holder->itemView_, false);
  }
}

void ADXRecyclerView_Recycler_invalidateDisplayListIntWithADViewGroup_withBoolean_(ADXRecyclerView_Recycler *self, ADViewGroup *viewGroup, jboolean invalidateThis) {
  for (jint i = [((ADViewGroup *) nil_chk(viewGroup)) getChildCount] - 1; i >= 0; i--) {
    ADView *view = [viewGroup getChildAtWithInt:i];
    if ([view isKindOfClass:[ADViewGroup class]]) {
      ADXRecyclerView_Recycler_invalidateDisplayListIntWithADViewGroup_withBoolean_(self, (ADViewGroup *) view, true);
    }
  }
  if (!invalidateThis) {
    return;
  }
  if ([viewGroup getVisibility] == ADView_INVISIBLE) {
    [viewGroup setVisibilityWithInt:ADView_VISIBLE];
    [viewGroup setVisibilityWithInt:ADView_INVISIBLE];
  }
  else {
    jint visibility = [viewGroup getVisibility];
    [viewGroup setVisibilityWithInt:ADView_INVISIBLE];
    [viewGroup setVisibilityWithInt:visibility];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_Recycler)

@implementation ADXRecyclerView_ViewCacheExtension

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_ViewCacheExtension_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADView *)getViewForPositionAndTypeWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                                          withInt:(jint)position
                                                          withInt:(jint)type {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getViewForPositionAndTypeWithADXRecyclerView_Recycler:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getViewForPositionAndType", "LADXRecyclerView_Recycler;II", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_ViewCacheExtension = { "ViewCacheExtension", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x409, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADXRecyclerView_ViewCacheExtension;
}

@end

void ADXRecyclerView_ViewCacheExtension_init(ADXRecyclerView_ViewCacheExtension *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_ViewCacheExtension)

@implementation ADXRecyclerView_Adapter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_Adapter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADXRecyclerView_ViewHolder *)onCreateViewHolderWithADViewGroup:(ADViewGroup *)parent
                                                          withInt:(jint)viewType {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)onBindViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                               withInt:(jint)position {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onBindViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                               withInt:(jint)position
                                      withJavaUtilList:(id<JavaUtilList>)payloads {
  [self onBindViewHolderWithADXRecyclerView_ViewHolder:holder withInt:position];
}

- (jint)findRelativeAdapterPositionInWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)adapter
                                  withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
                                                         withInt:(jint)localPosition {
  if (adapter == self) {
    return localPosition;
  }
  return ADXRecyclerView_NO_POSITION;
}

- (ADXRecyclerView_ViewHolder *)createViewHolderWithADViewGroup:(ADViewGroup *)parent
                                                        withInt:(jint)viewType {
  return ADXRecyclerView_Adapter_createViewHolderWithADViewGroup_withInt_(self, parent, viewType);
}

- (void)bindViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                             withInt:(jint)position {
  ADXRecyclerView_Adapter_bindViewHolderWithADXRecyclerView_ViewHolder_withInt_(self, holder, position);
}

- (jint)getItemViewTypeWithInt:(jint)position {
  return 0;
}

- (void)setHasStableIdsWithBoolean:(jboolean)hasStableIds {
  if (ADXRecyclerView_Adapter_hasObservers(self)) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"Cannot change whether this adapter has stable IDs while the adapter has registered observers.");
  }
  mHasStableIds_ = hasStableIds;
}

- (jlong)getItemIdWithInt:(jint)position {
  return ADView_NO_ID;
}

- (jint)getItemCount {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)hasStableIds {
  return ADXRecyclerView_Adapter_hasStableIds(self);
}

- (void)onViewRecycledWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
}

- (jboolean)onFailedToRecycleViewWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  return false;
}

- (void)onViewAttachedToWindowWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
}

- (void)onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
}

- (jboolean)hasObservers {
  return ADXRecyclerView_Adapter_hasObservers(self);
}

- (void)registerAdapterDataObserverWithADXRecyclerView_AdapterDataObserver:(ADXRecyclerView_AdapterDataObserver *)observer {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) registerObserverWithId:observer];
}

- (void)unregisterAdapterDataObserverWithADXRecyclerView_AdapterDataObserver:(ADXRecyclerView_AdapterDataObserver *)observer {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) unregisterObserverWithId:observer];
}

- (void)onAttachedToRecyclerViewWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
}

- (void)onDetachedFromRecyclerViewWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
}

- (void)notifyDataSetChanged {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyChanged];
}

- (void)notifyItemChangedWithInt:(jint)position {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeChangedWithInt:position withInt:1];
}

- (void)notifyItemChangedWithInt:(jint)position
                          withId:(id)payload {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeChangedWithInt:position withInt:1 withId:payload];
}

- (void)notifyItemRangeChangedWithInt:(jint)positionStart
                              withInt:(jint)itemCount {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeChangedWithInt:positionStart withInt:itemCount];
}

- (void)notifyItemRangeChangedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payload {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeChangedWithInt:positionStart withInt:itemCount withId:payload];
}

- (void)notifyItemInsertedWithInt:(jint)position {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeInsertedWithInt:position withInt:1];
}

- (void)notifyItemMovedWithInt:(jint)fromPosition
                       withInt:(jint)toPosition {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemMovedWithInt:fromPosition withInt:toPosition];
}

- (void)notifyItemRangeInsertedWithInt:(jint)positionStart
                               withInt:(jint)itemCount {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeInsertedWithInt:positionStart withInt:itemCount];
}

- (void)notifyItemRemovedWithInt:(jint)position {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeRemovedWithInt:position withInt:1];
}

- (void)notifyItemRangeRemovedWithInt:(jint)positionStart
                              withInt:(jint)itemCount {
  [((ADXRecyclerView_AdapterDataObservable *) nil_chk(mObservable_)) notifyItemRangeRemovedWithInt:positionStart withInt:itemCount];
}

- (void)dealloc {
  RELEASE_(mObservable_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x401, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x401, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x1, 3, 6, -1, 7, -1, -1 },
    { NULL, "I", 0x1, 8, 9, -1, 10, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x11, 11, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x11, 12, 4, -1, 5, -1, -1 },
    { NULL, "I", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "J", 0x1, 17, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x1, 21, 19, -1, 22, -1, -1 },
    { NULL, "V", 0x1, 23, 19, -1, 20, -1, -1 },
    { NULL, "V", 0x1, 24, 19, -1, 20, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 31, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 33, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 36, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 37, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 38, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 39, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 40, 34, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onCreateViewHolderWithADViewGroup:withInt:);
  methods[2].selector = @selector(onBindViewHolderWithADXRecyclerView_ViewHolder:withInt:);
  methods[3].selector = @selector(onBindViewHolderWithADXRecyclerView_ViewHolder:withInt:withJavaUtilList:);
  methods[4].selector = @selector(findRelativeAdapterPositionInWithADXRecyclerView_Adapter:withADXRecyclerView_ViewHolder:withInt:);
  methods[5].selector = @selector(createViewHolderWithADViewGroup:withInt:);
  methods[6].selector = @selector(bindViewHolderWithADXRecyclerView_ViewHolder:withInt:);
  methods[7].selector = @selector(getItemViewTypeWithInt:);
  methods[8].selector = @selector(setHasStableIdsWithBoolean:);
  methods[9].selector = @selector(getItemIdWithInt:);
  methods[10].selector = @selector(getItemCount);
  methods[11].selector = @selector(hasStableIds);
  methods[12].selector = @selector(onViewRecycledWithADXRecyclerView_ViewHolder:);
  methods[13].selector = @selector(onFailedToRecycleViewWithADXRecyclerView_ViewHolder:);
  methods[14].selector = @selector(onViewAttachedToWindowWithADXRecyclerView_ViewHolder:);
  methods[15].selector = @selector(onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:);
  methods[16].selector = @selector(hasObservers);
  methods[17].selector = @selector(registerAdapterDataObserverWithADXRecyclerView_AdapterDataObserver:);
  methods[18].selector = @selector(unregisterAdapterDataObserverWithADXRecyclerView_AdapterDataObserver:);
  methods[19].selector = @selector(onAttachedToRecyclerViewWithADXRecyclerView:);
  methods[20].selector = @selector(onDetachedFromRecyclerViewWithADXRecyclerView:);
  methods[21].selector = @selector(notifyDataSetChanged);
  methods[22].selector = @selector(notifyItemChangedWithInt:);
  methods[23].selector = @selector(notifyItemChangedWithInt:withId:);
  methods[24].selector = @selector(notifyItemRangeChangedWithInt:withInt:);
  methods[25].selector = @selector(notifyItemRangeChangedWithInt:withInt:withId:);
  methods[26].selector = @selector(notifyItemInsertedWithInt:);
  methods[27].selector = @selector(notifyItemMovedWithInt:withInt:);
  methods[28].selector = @selector(notifyItemRangeInsertedWithInt:withInt:);
  methods[29].selector = @selector(notifyItemRemovedWithInt:);
  methods[30].selector = @selector(notifyItemRangeRemovedWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mObservable_", "LADXRecyclerView_AdapterDataObservable;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mHasStableIds_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "onCreateViewHolder", "LADViewGroup;I", "(Lr/android/view/ViewGroup;I)TVH;", "onBindViewHolder", "LADXRecyclerView_ViewHolder;I", "(TVH;I)V", "LADXRecyclerView_ViewHolder;ILJavaUtilList;", "(TVH;ILjava/util/List<Ljava/lang/Object;>;)V", "findRelativeAdapterPositionIn", "LADXRecyclerView_Adapter;LADXRecyclerView_ViewHolder;I", "(Landroidx/recyclerview/widget/RecyclerView$Adapter<+Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;Landroidx/recyclerview/widget/RecyclerView$ViewHolder;I)I", "createViewHolder", "bindViewHolder", "getItemViewType", "I", "setHasStableIds", "Z", "getItemId", "onViewRecycled", "LADXRecyclerView_ViewHolder;", "(TVH;)V", "onFailedToRecycleView", "(TVH;)Z", "onViewAttachedToWindow", "onViewDetachedFromWindow", "registerAdapterDataObserver", "LADXRecyclerView_AdapterDataObserver;", "unregisterAdapterDataObserver", "onAttachedToRecyclerView", "LADXRecyclerView;", "onDetachedFromRecyclerView", "notifyItemChanged", "ILNSObject;", "notifyItemRangeChanged", "II", "IILNSObject;", "notifyItemInserted", "notifyItemMoved", "notifyItemRangeInserted", "notifyItemRemoved", "notifyItemRangeRemoved", "LADXRecyclerView_Adapter_StateRestorationPolicy;", "<VH:Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXRecyclerView_Adapter = { "Adapter", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x409, 31, 2, 29, 41, -1, 42, -1 };
  return &_ADXRecyclerView_Adapter;
}

@end

void ADXRecyclerView_Adapter_init(ADXRecyclerView_Adapter *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mObservable_, new_ADXRecyclerView_AdapterDataObservable_init());
  self->mHasStableIds_ = false;
}

ADXRecyclerView_ViewHolder *ADXRecyclerView_Adapter_createViewHolderWithADViewGroup_withInt_(ADXRecyclerView_Adapter *self, ADViewGroup *parent, jint viewType) {
  @try {
    ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_CREATE_VIEW_TAG);
    ADXRecyclerView_ViewHolder *holder = [self onCreateViewHolderWithADViewGroup:parent withInt:viewType];
    if ([((ADView *) nil_chk(((ADXRecyclerView_ViewHolder *) nil_chk(holder))->itemView_)) getParent] != nil) {
    }
    holder->mItemViewType_ = viewType;
    return holder;
  }
  @finally {
    ADXTraceCompat_endSection();
  }
}

void ADXRecyclerView_Adapter_bindViewHolderWithADXRecyclerView_ViewHolder_withInt_(ADXRecyclerView_Adapter *self, ADXRecyclerView_ViewHolder *holder, jint position) {
  jboolean rootBind = ((ADXRecyclerView_ViewHolder *) nil_chk(holder))->mBindingAdapter_ == nil;
  if (rootBind) {
    holder->mPosition_ = position;
    if (ADXRecyclerView_Adapter_hasStableIds(self)) {
      holder->mItemId_ = [self getItemIdWithInt:position];
    }
    [holder setFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_BOUND withInt:ADXRecyclerView_ViewHolder_FLAG_BOUND | ADXRecyclerView_ViewHolder_FLAG_UPDATE | ADXRecyclerView_ViewHolder_FLAG_INVALID | ADXRecyclerView_ViewHolder_FLAG_ADAPTER_POSITION_UNKNOWN];
    ADXTraceCompat_beginSectionWithNSString_(ADXRecyclerView_TRACE_BIND_VIEW_TAG);
  }
  JreStrongAssign(&holder->mBindingAdapter_, self);
  [self onBindViewHolderWithADXRecyclerView_ViewHolder:holder withInt:position withJavaUtilList:[holder getUnmodifiedPayloads]];
  if (rootBind) {
    [holder clearPayload];
    ADViewGroup_LayoutParams *layoutParams = [((ADView *) nil_chk(holder->itemView_)) getLayoutParams];
    if ([layoutParams isKindOfClass:[ADXRecyclerView_LayoutParams class]]) {
      ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) layoutParams)))->mInsetsDirty_ = true;
    }
    ADXTraceCompat_endSection();
  }
}

jboolean ADXRecyclerView_Adapter_hasStableIds(ADXRecyclerView_Adapter *self) {
  return self->mHasStableIds_;
}

jboolean ADXRecyclerView_Adapter_hasObservers(ADXRecyclerView_Adapter *self) {
  return [((ADXRecyclerView_AdapterDataObservable *) nil_chk(self->mObservable_)) hasObservers];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_Adapter)

J2OBJC_INITIALIZED_DEFN(ADXRecyclerView_Adapter_StateRestorationPolicy)

ADXRecyclerView_Adapter_StateRestorationPolicy *ADXRecyclerView_Adapter_StateRestorationPolicy_values_[3];

@implementation ADXRecyclerView_Adapter_StateRestorationPolicy

+ (IOSObjectArray *)values {
  return ADXRecyclerView_Adapter_StateRestorationPolicy_values();
}

+ (ADXRecyclerView_Adapter_StateRestorationPolicy *)valueOfWithNSString:(NSString *)name {
  return ADXRecyclerView_Adapter_StateRestorationPolicy_valueOfWithNSString_(name);
}

- (ADXRecyclerView_Adapter_StateRestorationPolicy_Enum)toNSEnum {
  return (ADXRecyclerView_Adapter_StateRestorationPolicy_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXRecyclerView_Adapter_StateRestorationPolicy;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_Adapter_StateRestorationPolicy;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ALLOW", "LADXRecyclerView_Adapter_StateRestorationPolicy;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "PREVENT_WHEN_EMPTY", "LADXRecyclerView_Adapter_StateRestorationPolicy;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "PREVENT", "LADXRecyclerView_Adapter_StateRestorationPolicy;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXRecyclerView_Adapter_StateRestorationPolicy, ALLOW), &JreEnum(ADXRecyclerView_Adapter_StateRestorationPolicy, PREVENT_WHEN_EMPTY), &JreEnum(ADXRecyclerView_Adapter_StateRestorationPolicy, PREVENT), "LADXRecyclerView_Adapter;", "Ljava/lang/Enum<Landroidx/recyclerview/widget/RecyclerView$Adapter$StateRestorationPolicy;>;" };
  static const J2ObjcClassInfo _ADXRecyclerView_Adapter_StateRestorationPolicy = { "StateRestorationPolicy", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_ADXRecyclerView_Adapter_StateRestorationPolicy;
}

+ (void)initialize {
  if (self == [ADXRecyclerView_Adapter_StateRestorationPolicy class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(ADXRecyclerView_Adapter_StateRestorationPolicy_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXRecyclerView_Adapter_StateRestorationPolicy_initWithNSString_withInt_(e, JreEnumConstantName(ADXRecyclerView_Adapter_StateRestorationPolicy_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXRecyclerView_Adapter_StateRestorationPolicy)
  }
}

@end

void ADXRecyclerView_Adapter_StateRestorationPolicy_initWithNSString_withInt_(ADXRecyclerView_Adapter_StateRestorationPolicy *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXRecyclerView_Adapter_StateRestorationPolicy_values() {
  ADXRecyclerView_Adapter_StateRestorationPolicy_initialize();
  return [IOSObjectArray arrayWithObjects:ADXRecyclerView_Adapter_StateRestorationPolicy_values_ count:3 type:ADXRecyclerView_Adapter_StateRestorationPolicy_class_()];
}

ADXRecyclerView_Adapter_StateRestorationPolicy *ADXRecyclerView_Adapter_StateRestorationPolicy_valueOfWithNSString_(NSString *name) {
  ADXRecyclerView_Adapter_StateRestorationPolicy_initialize();
  for (int i = 0; i < 3; i++) {
    ADXRecyclerView_Adapter_StateRestorationPolicy *e = ADXRecyclerView_Adapter_StateRestorationPolicy_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXRecyclerView_Adapter_StateRestorationPolicy *ADXRecyclerView_Adapter_StateRestorationPolicy_fromOrdinal(NSUInteger ordinal) {
  ADXRecyclerView_Adapter_StateRestorationPolicy_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ADXRecyclerView_Adapter_StateRestorationPolicy_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_Adapter_StateRestorationPolicy)

@implementation ADXRecyclerView_LayoutManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_LayoutManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setRecyclerViewWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
  if (recyclerView == nil) {
    JreStrongAssign(&mRecyclerView_, nil);
    JreStrongAssign(&mChildHelper_, nil);
    mWidth_ = 0;
    mHeight_ = 0;
  }
  else {
    JreStrongAssign(&mRecyclerView_, recyclerView);
    JreStrongAssign(&mChildHelper_, recyclerView->mChildHelper_);
    mWidth_ = [recyclerView getWidth];
    mHeight_ = [recyclerView getHeight];
  }
  mWidthMode_ = ADView_MeasureSpec_EXACTLY;
  mHeightMode_ = ADView_MeasureSpec_EXACTLY;
}

- (void)setMeasureSpecsWithInt:(jint)wSpec
                       withInt:(jint)hSpec {
  mWidth_ = ADView_MeasureSpec_getSizeWithInt_(wSpec);
  mWidthMode_ = ADView_MeasureSpec_getModeWithInt_(wSpec);
  mHeight_ = ADView_MeasureSpec_getSizeWithInt_(hSpec);
  mHeightMode_ = ADView_MeasureSpec_getModeWithInt_(hSpec);
}

- (void)setMeasuredDimensionFromChildrenWithInt:(jint)widthSpec
                                        withInt:(jint)heightSpec {
  jint count = [self getChildCount];
  if (count == 0) {
    [((ADXRecyclerView *) nil_chk(mRecyclerView_)) defaultOnMeasureWithInt:widthSpec withInt:heightSpec];
    return;
  }
  jint minX = JavaLangInteger_MAX_VALUE;
  jint minY = JavaLangInteger_MAX_VALUE;
  jint maxX = JavaLangInteger_MIN_VALUE;
  jint maxY = JavaLangInteger_MIN_VALUE;
  for (jint i = 0; i < count; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADRect *bounds = ((ADXRecyclerView *) nil_chk(mRecyclerView_))->mTempRect_;
    [self getDecoratedBoundsWithMarginsWithADView:child withADRect:bounds];
    if (((ADRect *) nil_chk(bounds))->left_ < minX) {
      minX = bounds->left_;
    }
    if (bounds->right_ > maxX) {
      maxX = bounds->right_;
    }
    if (bounds->top_ < minY) {
      minY = bounds->top_;
    }
    if (bounds->bottom_ > maxY) {
      maxY = bounds->bottom_;
    }
  }
  [((ADRect *) nil_chk(((ADXRecyclerView *) nil_chk(mRecyclerView_))->mTempRect_)) setWithInt:minX withInt:minY withInt:maxX withInt:maxY];
  [self setMeasuredDimensionWithADRect:((ADXRecyclerView *) nil_chk(mRecyclerView_))->mTempRect_ withInt:widthSpec withInt:heightSpec];
}

- (void)setMeasuredDimensionWithADRect:(ADRect *)childrenBounds
                               withInt:(jint)wSpec
                               withInt:(jint)hSpec {
  jint usedWidth = [((ADRect *) nil_chk(childrenBounds)) width] + [self getPaddingLeft] + [self getPaddingRight];
  jint usedHeight = [childrenBounds height] + [self getPaddingTop] + [self getPaddingBottom];
  jint width = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(wSpec, usedWidth, [self getMinimumWidth]);
  jint height = ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(hSpec, usedHeight, [self getMinimumHeight]);
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (void)requestLayout {
  if (mRecyclerView_ != nil) {
    [mRecyclerView_ requestLayout];
  }
}

- (void)assertInLayoutOrScrollWithNSString:(NSString *)message {
  if (mRecyclerView_ != nil) {
    [mRecyclerView_ assertInLayoutOrScrollWithNSString:message];
  }
}

+ (jint)chooseSizeWithInt:(jint)spec
                  withInt:(jint)desired
                  withInt:(jint)min {
  return ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(spec, desired, min);
}

- (void)assertNotInLayoutOrScrollWithNSString:(NSString *)message {
  if (mRecyclerView_ != nil) {
    [mRecyclerView_ assertNotInLayoutOrScrollWithNSString:message];
  }
}

- (void)setAutoMeasureEnabledWithBoolean:(jboolean)enabled {
  mAutoMeasure_ = enabled;
}

- (jboolean)isAutoMeasureEnabled {
  return mAutoMeasure_;
}

- (jboolean)supportsPredictiveItemAnimations {
  return false;
}

- (void)setItemPrefetchEnabledWithBoolean:(jboolean)enabled {
  if (enabled != mItemPrefetchEnabled_) {
    mItemPrefetchEnabled_ = enabled;
    mPrefetchMaxCountObserved_ = 0;
    if (mRecyclerView_ != nil) {
      [((ADXRecyclerView_Recycler *) nil_chk(mRecyclerView_->mRecycler_)) updateViewCacheSize];
    }
  }
}

- (jboolean)isItemPrefetchEnabled {
  return mItemPrefetchEnabled_;
}

- (void)collectAdjacentPrefetchPositionsWithInt:(jint)dx
                                        withInt:(jint)dy
                      withADXRecyclerView_State:(ADXRecyclerView_State *)state
withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:(id<ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry>)layoutPrefetchRegistry {
}

- (void)collectInitialPrefetchPositionsWithInt:(jint)adapterItemCount
withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:(id<ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry>)layoutPrefetchRegistry {
}

- (void)dispatchAttachedToWindowWithADXRecyclerView:(ADXRecyclerView *)view {
  mIsAttachedToWindow_ = true;
  [self onAttachedToWindowWithADXRecyclerView:view];
}

- (void)dispatchDetachedFromWindowWithADXRecyclerView:(ADXRecyclerView *)view
                         withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  mIsAttachedToWindow_ = false;
  [self onDetachedFromWindowWithADXRecyclerView:view withADXRecyclerView_Recycler:recycler];
}

- (jboolean)isAttachedToWindow {
  return mIsAttachedToWindow_;
}

- (void)postOnAnimationWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  if (mRecyclerView_ != nil) {
  }
}

- (jboolean)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)action {
  if (mRecyclerView_ != nil) {
  }
  return false;
}

- (void)onAttachedToWindowWithADXRecyclerView:(ADXRecyclerView *)view {
}

- (void)onDetachedFromWindowWithADXRecyclerView:(ADXRecyclerView *)view {
}

- (void)onDetachedFromWindowWithADXRecyclerView:(ADXRecyclerView *)view
                   withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  [self onDetachedFromWindowWithADXRecyclerView:view];
}

- (jboolean)getClipToPadding {
  return mRecyclerView_ != nil && mRecyclerView_->mClipToPadding_;
}

- (void)onLayoutChildrenWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                           withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  ADLog_eWithNSString_withNSString_(ADXRecyclerView_TAG, @"You must override onLayoutChildren(Recycler recycler, State state) ");
}

- (void)onLayoutCompletedWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
}

- (ADXRecyclerView_LayoutParams *)generateDefaultLayoutParams {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)checkLayoutParamsWithADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)lp {
  return lp != nil;
}

- (jint)scrollHorizontallyByWithInt:(jint)dx
       withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
          withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jint)scrollVerticallyByWithInt:(jint)dy
     withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
        withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jboolean)canScrollHorizontally {
  return false;
}

- (jboolean)canScrollVertically {
  return false;
}

- (void)scrollToPositionWithInt:(jint)position {
}

- (void)smoothScrollToPositionWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                        withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                          withInt:(jint)position {
  ADLog_eWithNSString_withNSString_(ADXRecyclerView_TAG, @"You must override smoothScrollToPosition to support smooth scrolling");
}

- (jint)getLayoutDirection {
  return ADXViewCompat_getLayoutDirectionWithADView_(mRecyclerView_);
}

- (void)endAnimationWithADView:(ADView *)view {
  if (((ADXRecyclerView *) nil_chk(mRecyclerView_))->mItemAnimator_ != nil) {
    [mRecyclerView_->mItemAnimator_ endAnimationWithADXRecyclerView_ViewHolder:ADXRecyclerView_getChildViewHolderIntWithADView_(view)];
  }
}

- (void)addDisappearingViewWithADView:(ADView *)child {
  [self addDisappearingViewWithADView:child withInt:-1];
}

- (void)addDisappearingViewWithADView:(ADView *)child
                              withInt:(jint)index {
  ADXRecyclerView_LayoutManager_addViewIntWithADView_withInt_withBoolean_(self, child, index, true);
}

- (void)addViewWithADView:(ADView *)child {
  [self addViewWithADView:child withInt:-1];
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index {
  ADXRecyclerView_LayoutManager_addViewIntWithADView_withInt_withBoolean_(self, child, index, false);
}

- (void)addViewIntWithADView:(ADView *)child
                     withInt:(jint)index
                 withBoolean:(jboolean)disappearing {
  ADXRecyclerView_LayoutManager_addViewIntWithADView_withInt_withBoolean_(self, child, index, disappearing);
}

- (void)removeViewWithADView:(ADView *)child {
  [((ADXChildHelper *) nil_chk(mChildHelper_)) removeViewWithADView:child];
}

- (void)removeViewAtWithInt:(jint)index {
  ADView *child = [self getChildAtWithInt:index];
  if (child != nil) {
    [((ADXChildHelper *) nil_chk(mChildHelper_)) removeViewAtWithInt:index];
  }
}

- (void)removeAllViews {
  jint childCount = [self getChildCount];
  for (jint i = childCount - 1; i >= 0; i--) {
    [((ADXChildHelper *) nil_chk(mChildHelper_)) removeViewAtWithInt:i];
  }
}

- (jint)getBaseline {
  return -1;
}

- (jint)getPositionWithADView:(ADView *)view {
  return [((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class])))) getViewLayoutPosition];
}

- (jint)getItemViewTypeWithADView:(ADView *)view {
  return ADXRecyclerView_ViewHolder_getItemViewType(nil_chk(ADXRecyclerView_getChildViewHolderIntWithADView_(view)));
}

- (ADView *)findContainingItemViewWithADView:(ADView *)view {
  if (mRecyclerView_ == nil) {
    return nil;
  }
  ADView *found = JreRetainedLocalValue([mRecyclerView_ findContainingItemViewWithADView:view]);
  if (found == nil) {
    return nil;
  }
  if ([((ADXChildHelper *) nil_chk(mChildHelper_)) isHiddenWithADView:found]) {
    return nil;
  }
  return found;
}

- (ADView *)findViewByPositionWithInt:(jint)position {
  jint childCount = [self getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = JreRetainedLocalValue([self getChildAtWithInt:i]);
    ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
    if (vh == nil) {
      continue;
    }
    if (ADXRecyclerView_ViewHolder_getLayoutPosition(vh) == position && ![vh shouldIgnore] && ([((ADXRecyclerView_State *) nil_chk(((ADXRecyclerView *) nil_chk(mRecyclerView_))->mState_)) isPreLayout] || ![vh isRemoved])) {
      return child;
    }
  }
  return nil;
}

- (void)detachViewWithADView:(ADView *)child {
  jint ind = [((ADXChildHelper *) nil_chk(mChildHelper_)) indexOfChildWithADView:child];
  if (ind >= 0) {
    ADXRecyclerView_LayoutManager_detachViewInternalWithInt_withADView_(self, ind, child);
  }
}

- (void)detachViewAtWithInt:(jint)index {
  ADXRecyclerView_LayoutManager_detachViewInternalWithInt_withADView_(self, index, [self getChildAtWithInt:index]);
}

- (void)detachViewInternalWithInt:(jint)index
                       withADView:(ADView *)view {
  ADXRecyclerView_LayoutManager_detachViewInternalWithInt_withADView_(self, index, view);
}

- (void)attachViewWithADView:(ADView *)child
                     withInt:(jint)index
withADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)lp {
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(vh)) isRemoved]) {
    [((ADXViewInfoStore *) nil_chk(((ADXRecyclerView *) nil_chk(mRecyclerView_))->mViewInfoStore_)) addToDisappearedInLayoutWithADXRecyclerView_ViewHolder:vh];
  }
  else {
    [((ADXViewInfoStore *) nil_chk(((ADXRecyclerView *) nil_chk(mRecyclerView_))->mViewInfoStore_)) removeFromDisappearedInLayoutWithADXRecyclerView_ViewHolder:vh];
  }
  [((ADXChildHelper *) nil_chk(mChildHelper_)) attachViewToParentWithADView:child withInt:index withADViewGroup_LayoutParams:lp withBoolean:[vh isRemoved]];
}

- (void)attachViewWithADView:(ADView *)child
                     withInt:(jint)index {
  [self attachViewWithADView:child withInt:index withADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class])];
}

- (void)attachViewWithADView:(ADView *)child {
  [self attachViewWithADView:child withInt:-1];
}

- (void)removeDetachedViewWithADView:(ADView *)child {
  [((ADXRecyclerView *) nil_chk(mRecyclerView_)) removeDetachedViewWithADView:child withBoolean:false];
}

- (void)moveViewWithInt:(jint)fromIndex
                withInt:(jint)toIndex {
  ADView *view = JreRetainedLocalValue([self getChildAtWithInt:fromIndex]);
  if (view == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$I$", @"Cannot move a child from non-existing index:", fromIndex, [((ADXRecyclerView *) nil_chk(mRecyclerView_)) description]));
  }
  [self detachViewAtWithInt:fromIndex];
  [self attachViewWithADView:view withInt:toIndex];
}

- (void)detachAndScrapViewWithADView:(ADView *)child
        withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  jint index = [((ADXChildHelper *) nil_chk(mChildHelper_)) indexOfChildWithADView:child];
  ADXRecyclerView_LayoutManager_scrapOrRecycleViewWithADXRecyclerView_Recycler_withInt_withADView_(self, recycler, index, child);
}

- (void)detachAndScrapViewAtWithInt:(jint)index
       withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  ADView *child = [self getChildAtWithInt:index];
  ADXRecyclerView_LayoutManager_scrapOrRecycleViewWithADXRecyclerView_Recycler_withInt_withADView_(self, recycler, index, child);
}

- (void)removeAndRecycleViewWithADView:(ADView *)child
          withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  [self removeViewWithADView:child];
  [((ADXRecyclerView_Recycler *) nil_chk(recycler)) recycleViewWithADView:child];
}

- (void)removeAndRecycleViewAtWithInt:(jint)index
         withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  ADView *view = [self getChildAtWithInt:index];
  [self removeViewAtWithInt:index];
  [((ADXRecyclerView_Recycler *) nil_chk(recycler)) recycleViewWithADView:view];
}

- (jint)getChildCount {
  return mChildHelper_ != nil ? [mChildHelper_ getChildCount] : 0;
}

- (ADView *)getChildAtWithInt:(jint)index {
  return mChildHelper_ != nil ? [mChildHelper_ getChildAtWithInt:index] : nil;
}

- (jint)getWidthMode {
  return mWidthMode_;
}

- (jint)getHeightMode {
  return mHeightMode_;
}

- (jint)getWidth {
  return mWidth_;
}

- (jint)getHeight {
  return mHeight_;
}

- (jint)getPaddingLeft {
  return mRecyclerView_ != nil ? [mRecyclerView_ getPaddingLeft] : 0;
}

- (jint)getPaddingTop {
  return mRecyclerView_ != nil ? [mRecyclerView_ getPaddingTop] : 0;
}

- (jint)getPaddingRight {
  return mRecyclerView_ != nil ? [mRecyclerView_ getPaddingRight] : 0;
}

- (jint)getPaddingBottom {
  return mRecyclerView_ != nil ? [mRecyclerView_ getPaddingBottom] : 0;
}

- (jint)getPaddingStart {
  return mRecyclerView_ != nil ? ADXViewCompat_getPaddingStartWithADViewGroup_(mRecyclerView_) : 0;
}

- (jint)getPaddingEnd {
  return mRecyclerView_ != nil ? ADXViewCompat_getPaddingEndWithADViewGroup_(mRecyclerView_) : 0;
}

- (jboolean)isFocused {
  return mRecyclerView_ != nil && [mRecyclerView_ isFocused];
}

- (jboolean)hasFocus {
  return mRecyclerView_ != nil && [mRecyclerView_ hasFocus];
}

- (jint)getItemCount {
  ADXRecyclerView_Adapter *a = mRecyclerView_ != nil ? [mRecyclerView_ getAdapter] : nil;
  return a != nil ? [a getItemCount] : 0;
}

- (void)offsetChildrenHorizontalWithInt:(jint)dx {
  if (mRecyclerView_ != nil) {
    [mRecyclerView_ offsetChildrenHorizontalWithInt:dx];
  }
}

- (void)offsetChildrenVerticalWithInt:(jint)dy {
  if (mRecyclerView_ != nil) {
    [mRecyclerView_ offsetChildrenVerticalWithInt:dy];
  }
}

- (void)ignoreViewWithADView:(ADView *)view {
  if ([((ADView *) nil_chk(view)) getParent] != mRecyclerView_ || [((ADXRecyclerView *) nil_chk(mRecyclerView_)) indexOfChildWithADView:view] == -1) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"View should be fully attached to be ignored", [((ADXRecyclerView *) nil_chk(mRecyclerView_)) exceptionLabel]));
  }
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  [((ADXRecyclerView_ViewHolder *) nil_chk(vh)) addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_IGNORE];
  [((ADXViewInfoStore *) nil_chk(((ADXRecyclerView *) nil_chk(mRecyclerView_))->mViewInfoStore_)) removeViewHolderWithADXRecyclerView_ViewHolder:vh];
}

- (void)stopIgnoringViewWithADView:(ADView *)view {
  ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  [((ADXRecyclerView_ViewHolder *) nil_chk(vh)) stopIgnoring];
  [vh resetInternal];
  [vh addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_INVALID];
}

- (void)detachAndScrapAttachedViewsWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  jint childCount = [self getChildCount];
  for (jint i = childCount - 1; i >= 0; i--) {
    ADView *v = [self getChildAtWithInt:i];
    ADXRecyclerView_LayoutManager_scrapOrRecycleViewWithADXRecyclerView_Recycler_withInt_withADView_(self, recycler, i, v);
  }
}

- (void)scrapOrRecycleViewWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                               withInt:(jint)index
                                            withADView:(ADView *)view {
  ADXRecyclerView_LayoutManager_scrapOrRecycleViewWithADXRecyclerView_Recycler_withInt_withADView_(self, recycler, index, view);
}

- (void)removeAndRecycleScrapIntWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  jint scrapCount = [((ADXRecyclerView_Recycler *) nil_chk(recycler)) getScrapCount];
  for (jint i = scrapCount - 1; i >= 0; i--) {
    ADView *scrap = [recycler getScrapViewAtWithInt:i];
    ADXRecyclerView_ViewHolder *vh = ADXRecyclerView_getChildViewHolderIntWithADView_(scrap);
    if ([((ADXRecyclerView_ViewHolder *) nil_chk(vh)) shouldIgnore]) {
      continue;
    }
    ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(vh, false);
    if ([vh isTmpDetached]) {
      [((ADXRecyclerView *) nil_chk(mRecyclerView_)) removeDetachedViewWithADView:scrap withBoolean:false];
    }
    if (((ADXRecyclerView *) nil_chk(mRecyclerView_))->mItemAnimator_ != nil) {
      [mRecyclerView_->mItemAnimator_ endAnimationWithADXRecyclerView_ViewHolder:vh];
    }
    ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(vh, true);
    [recycler quickRecycleScrapViewWithADView:scrap];
  }
  [recycler clearScrap];
  if (scrapCount > 0) {
    [((ADXRecyclerView *) nil_chk(mRecyclerView_)) invalidate];
  }
}

- (void)measureChildWithADView:(ADView *)child
                       withInt:(jint)widthUsed
                       withInt:(jint)heightUsed {
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  ADRect *insets = [((ADXRecyclerView *) nil_chk(mRecyclerView_)) getItemDecorInsetsForChildWithADView:child];
  widthUsed += ((ADRect *) nil_chk(insets))->left_ + insets->right_;
  heightUsed += insets->top_ + insets->bottom_;
  jint widthSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getWidth], [self getWidthMode], [self getPaddingLeft] + [self getPaddingRight] + widthUsed, ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->width_, [self canScrollHorizontally]);
  jint heightSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getHeight], [self getHeightMode], [self getPaddingTop] + [self getPaddingBottom] + heightUsed, lp->height_, [self canScrollVertically]);
  if ([self shouldMeasureChildWithADView:child withInt:widthSpec withInt:heightSpec withADXRecyclerView_LayoutParams:lp]) {
    [child measureWithInt:widthSpec withInt:heightSpec];
  }
}

- (jboolean)shouldReMeasureChildWithADView:(ADView *)child
                                   withInt:(jint)widthSpec
                                   withInt:(jint)heightSpec
          withADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)lp {
  return !mMeasurementCacheEnabled_ || !ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_([((ADView *) nil_chk(child)) getMeasuredWidth], widthSpec, ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->width_) || !ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_([child getMeasuredHeight], heightSpec, lp->height_);
}

- (jboolean)shouldMeasureChildWithADView:(ADView *)child
                                 withInt:(jint)widthSpec
                                 withInt:(jint)heightSpec
        withADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)lp {
  return [((ADView *) nil_chk(child)) isLayoutRequested] || !mMeasurementCacheEnabled_ || !ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_([child getWidth], widthSpec, ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->width_) || !ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_([child getHeight], heightSpec, lp->height_);
}

- (jboolean)isMeasurementCacheEnabled {
  return mMeasurementCacheEnabled_;
}

- (void)setMeasurementCacheEnabledWithBoolean:(jboolean)measurementCacheEnabled {
  mMeasurementCacheEnabled_ = measurementCacheEnabled;
}

+ (jboolean)isMeasurementUpToDateWithInt:(jint)childSize
                                 withInt:(jint)spec
                                 withInt:(jint)dimension {
  return ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_(childSize, spec, dimension);
}

- (void)measureChildWithMarginsWithADView:(ADView *)child
                                  withInt:(jint)widthUsed
                                  withInt:(jint)heightUsed {
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  ADRect *insets = [((ADXRecyclerView *) nil_chk(mRecyclerView_)) getItemDecorInsetsForChildWithADView:child];
  widthUsed += ((ADRect *) nil_chk(insets))->left_ + insets->right_;
  heightUsed += insets->top_ + insets->bottom_;
  jint widthSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getWidth], [self getWidthMode], [self getPaddingLeft] + [self getPaddingRight] + ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->leftMargin_ + lp->rightMargin_ + widthUsed, lp->width_, [self canScrollHorizontally]);
  jint heightSpec = ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_([self getHeight], [self getHeightMode], [self getPaddingTop] + [self getPaddingBottom] + lp->topMargin_ + lp->bottomMargin_ + heightUsed, lp->height_, [self canScrollVertically]);
  if ([self shouldMeasureChildWithADView:child withInt:widthSpec withInt:heightSpec withADXRecyclerView_LayoutParams:lp]) {
    [child measureWithInt:widthSpec withInt:heightSpec];
  }
}

+ (jint)getChildMeasureSpecWithInt:(jint)parentSize
                           withInt:(jint)padding
                           withInt:(jint)childDimension
                       withBoolean:(jboolean)canScroll {
  return ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withBoolean_(parentSize, padding, childDimension, canScroll);
}

+ (jint)getChildMeasureSpecWithInt:(jint)parentSize
                           withInt:(jint)parentMode
                           withInt:(jint)padding
                           withInt:(jint)childDimension
                       withBoolean:(jboolean)canScroll {
  return ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(parentSize, parentMode, padding, childDimension, canScroll);
}

- (jint)getDecoratedMeasuredWidthWithADView:(ADView *)child {
  ADRect *insets = ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_;
  return [child getMeasuredWidth] + ((ADRect *) nil_chk(insets))->left_ + insets->right_;
}

- (jint)getDecoratedMeasuredHeightWithADView:(ADView *)child {
  ADRect *insets = ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_;
  return [child getMeasuredHeight] + ((ADRect *) nil_chk(insets))->top_ + insets->bottom_;
}

- (void)layoutDecoratedWithADView:(ADView *)child
                          withInt:(jint)left
                          withInt:(jint)top
                          withInt:(jint)right
                          withInt:(jint)bottom {
  ADRect *insets = ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_;
  [child layoutWithInt:left + ((ADRect *) nil_chk(insets))->left_ withInt:top + insets->top_ withInt:right - insets->right_ withInt:bottom - insets->bottom_];
}

- (void)layoutDecoratedWithMarginsWithADView:(ADView *)child
                                     withInt:(jint)left
                                     withInt:(jint)top
                                     withInt:(jint)right
                                     withInt:(jint)bottom {
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  ADRect *insets = ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->mDecorInsets_;
  [child layoutWithInt:left + ((ADRect *) nil_chk(insets))->left_ + lp->leftMargin_ withInt:top + insets->top_ + lp->topMargin_ withInt:right - insets->right_ - lp->rightMargin_ withInt:bottom - insets->bottom_ - lp->bottomMargin_];
}

- (void)getTransformedBoundingBoxWithADView:(ADView *)child
                                withBoolean:(jboolean)includeDecorInsets
                                 withADRect:(ADRect *)outArg {
  if (includeDecorInsets) {
    ADRect *insets = JreRetainedLocalValue(((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_);
    [((ADRect *) nil_chk(outArg)) setWithInt:-((ADRect *) nil_chk(insets))->left_ withInt:-insets->top_ withInt:[child getWidth] + insets->right_ withInt:[child getHeight] + insets->bottom_];
  }
  else {
    [((ADRect *) nil_chk(outArg)) setWithInt:0 withInt:0 withInt:[((ADView *) nil_chk(child)) getWidth] withInt:[child getHeight]];
  }
  if (mRecyclerView_ != nil) {
  }
  [outArg offsetWithInt:[child getLeft] withInt:[child getTop]];
}

- (void)getDecoratedBoundsWithMarginsWithADView:(ADView *)view
                                     withADRect:(ADRect *)outBounds {
  ADXRecyclerView_getDecoratedBoundsWithMarginsIntWithADView_withADRect_(view, outBounds);
}

- (jint)getDecoratedLeftWithADView:(ADView *)child {
  return [((ADView *) nil_chk(child)) getLeft] - [self getLeftDecorationWidthWithADView:child];
}

- (jint)getDecoratedTopWithADView:(ADView *)child {
  return [((ADView *) nil_chk(child)) getTop] - [self getTopDecorationHeightWithADView:child];
}

- (jint)getDecoratedRightWithADView:(ADView *)child {
  return [((ADView *) nil_chk(child)) getRight] + [self getRightDecorationWidthWithADView:child];
}

- (jint)getDecoratedBottomWithADView:(ADView *)child {
  return [((ADView *) nil_chk(child)) getBottom] + [self getBottomDecorationHeightWithADView:child];
}

- (void)calculateItemDecorationsForChildWithADView:(ADView *)child
                                        withADRect:(ADRect *)outRect {
  if (mRecyclerView_ == nil) {
    [((ADRect *) nil_chk(outRect)) setWithInt:0 withInt:0 withInt:0 withInt:0];
    return;
  }
  ADRect *insets = JreRetainedLocalValue([mRecyclerView_ getItemDecorInsetsForChildWithADView:child]);
  [((ADRect *) nil_chk(outRect)) setWithADRect:insets];
}

- (jint)getTopDecorationHeightWithADView:(ADView *)child {
  return ((ADRect *) nil_chk(((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_))->top_;
}

- (jint)getBottomDecorationHeightWithADView:(ADView *)child {
  return ((ADRect *) nil_chk(((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_))->bottom_;
}

- (jint)getLeftDecorationWidthWithADView:(ADView *)child {
  return ((ADRect *) nil_chk(((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_))->left_;
}

- (jint)getRightDecorationWidthWithADView:(ADView *)child {
  return ((ADRect *) nil_chk(((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mDecorInsets_))->right_;
}

- (ADView *)onFocusSearchFailedWithADView:(ADView *)focused
                                  withInt:(jint)direction
             withADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return nil;
}

- (ADView *)onInterceptFocusSearchWithADView:(ADView *)focused
                                     withInt:(jint)direction {
  return nil;
}

- (void)onAdapterChangedWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)oldAdapter
                        withADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)newAdapter {
}

- (jboolean)onAddFocusablesWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                         withJavaUtilArrayList:(JavaUtilArrayList *)views
                                       withInt:(jint)direction
                                       withInt:(jint)focusableMode {
  return false;
}

- (void)onItemsChangedWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
}

- (void)onItemsAddedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                withInt:(jint)positionStart
                                withInt:(jint)itemCount {
}

- (void)onItemsRemovedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount {
}

- (void)onItemsUpdatedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount {
}

- (void)onItemsUpdatedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount
                                   withId:(id)payload {
  [self onItemsUpdatedWithADXRecyclerView:recyclerView withInt:positionStart withInt:itemCount];
}

- (void)onItemsMovedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                withInt:(jint)from
                                withInt:(jint)to
                                withInt:(jint)itemCount {
}

- (jint)computeHorizontalScrollExtentWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jint)computeHorizontalScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jint)computeHorizontalScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jint)computeVerticalScrollExtentWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jint)computeVerticalScrollOffsetWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (jint)computeVerticalScrollRangeWithADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return 0;
}

- (void)onMeasureWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                    withADXRecyclerView_State:(ADXRecyclerView_State *)state
                                      withInt:(jint)widthSpec
                                      withInt:(jint)heightSpec {
  [((ADXRecyclerView *) nil_chk(mRecyclerView_)) defaultOnMeasureWithInt:widthSpec withInt:heightSpec];
}

- (void)setMeasuredDimensionWithInt:(jint)widthSize
                            withInt:(jint)heightSize {
  [((ADXRecyclerView *) nil_chk(mRecyclerView_)) setMeasuredDimensionWithInt:widthSize withInt:heightSize];
}

- (jint)getMinimumWidth {
  return ADXViewCompat_getMinimumWidthWithADView_(mRecyclerView_);
}

- (jint)getMinimumHeight {
  return ADXViewCompat_getMinimumHeightWithADView_(mRecyclerView_);
}

- (id<ADParcelable>)onSaveInstanceState {
  return nil;
}

- (void)onRestoreInstanceStateWithADParcelable:(id<ADParcelable>)state {
}

- (void)onScrollStateChangedWithInt:(jint)state {
}

- (void)removeAndRecycleAllViewsWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler {
  for (jint i = [self getChildCount] - 1; i >= 0; i--) {
    ADView *view = [self getChildAtWithInt:i];
    if (![((ADXRecyclerView_ViewHolder *) nil_chk(ADXRecyclerView_getChildViewHolderIntWithADView_(view))) shouldIgnore]) {
      [self removeAndRecycleViewAtWithInt:i withADXRecyclerView_Recycler:recycler];
    }
  }
}

- (void)requestSimpleAnimationsInNextLayout {
  mRequestedSimpleAnimations_ = true;
}

- (jint)getRowCountForAccessibilityWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                      withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return -1;
}

- (jint)getColumnCountForAccessibilityWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                         withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return -1;
}

- (jboolean)isLayoutHierarchicalWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                   withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  return false;
}

- (void)setExactMeasureSpecsFromWithADXRecyclerView:(ADXRecyclerView *)recyclerView {
  [self setMeasureSpecsWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([((ADXRecyclerView *) nil_chk(recyclerView)) getWidth], ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_([recyclerView getHeight], ADView_MeasureSpec_EXACTLY)];
}

- (jboolean)shouldMeasureTwice {
  return false;
}

- (jboolean)hasFlexibleChildInBothOrientations {
  jint childCount = [self getChildCount];
  for (jint i = 0; i < childCount; i++) {
    ADView *child = [self getChildAtWithInt:i];
    ADViewGroup_LayoutParams *lp = [((ADView *) nil_chk(child)) getLayoutParams];
    if (((ADViewGroup_LayoutParams *) nil_chk(lp))->width_ < 0 && lp->height_ < 0) {
      return true;
    }
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mChildHelper_);
  RELEASE_(mRecyclerView_);
  RELEASE_(mHorizontalBoundCheckCallback_);
  RELEASE_(mVerticalBoundCheckCallback_);
  RELEASE_(mHorizontalBoundCheck_);
  RELEASE_(mVerticalBoundCheck_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 14, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_LayoutParams;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 31, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 33, 34, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 35, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 49, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 50, 41, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 51, 41, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 52, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 56, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 58, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 64, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 64, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 67, 37, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 76, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 78, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 79, 80, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 81, 80, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 13, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 83, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 78, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 85, 86, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 85, 87, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 88, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 89, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 90, 91, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 91, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 94, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 96, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 97, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 98, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 99, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 100, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 101, 96, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 102, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 103, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 104, 41, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 105, 41, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 106, 107, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 108, 43, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 109, 110, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 111, 112, -1, 113, -1, -1 },
    { NULL, "V", 0x1, 114, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 115, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 117, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 118, 116, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 118, 119, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 120, 121, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 122, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 123, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 124, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 125, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 126, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 127, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 128, 129, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADParcelable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 130, 131, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 132, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 133, 73, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 134, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 135, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 136, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 137, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setRecyclerViewWithADXRecyclerView:);
  methods[2].selector = @selector(setMeasureSpecsWithInt:withInt:);
  methods[3].selector = @selector(setMeasuredDimensionFromChildrenWithInt:withInt:);
  methods[4].selector = @selector(setMeasuredDimensionWithADRect:withInt:withInt:);
  methods[5].selector = @selector(requestLayout);
  methods[6].selector = @selector(assertInLayoutOrScrollWithNSString:);
  methods[7].selector = @selector(chooseSizeWithInt:withInt:withInt:);
  methods[8].selector = @selector(assertNotInLayoutOrScrollWithNSString:);
  methods[9].selector = @selector(setAutoMeasureEnabledWithBoolean:);
  methods[10].selector = @selector(isAutoMeasureEnabled);
  methods[11].selector = @selector(supportsPredictiveItemAnimations);
  methods[12].selector = @selector(setItemPrefetchEnabledWithBoolean:);
  methods[13].selector = @selector(isItemPrefetchEnabled);
  methods[14].selector = @selector(collectAdjacentPrefetchPositionsWithInt:withInt:withADXRecyclerView_State:withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:);
  methods[15].selector = @selector(collectInitialPrefetchPositionsWithInt:withADXRecyclerView_LayoutManager_LayoutPrefetchRegistry:);
  methods[16].selector = @selector(dispatchAttachedToWindowWithADXRecyclerView:);
  methods[17].selector = @selector(dispatchDetachedFromWindowWithADXRecyclerView:withADXRecyclerView_Recycler:);
  methods[18].selector = @selector(isAttachedToWindow);
  methods[19].selector = @selector(postOnAnimationWithJavaLangRunnable:);
  methods[20].selector = @selector(removeCallbacksWithJavaLangRunnable:);
  methods[21].selector = @selector(onAttachedToWindowWithADXRecyclerView:);
  methods[22].selector = @selector(onDetachedFromWindowWithADXRecyclerView:);
  methods[23].selector = @selector(onDetachedFromWindowWithADXRecyclerView:withADXRecyclerView_Recycler:);
  methods[24].selector = @selector(getClipToPadding);
  methods[25].selector = @selector(onLayoutChildrenWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[26].selector = @selector(onLayoutCompletedWithADXRecyclerView_State:);
  methods[27].selector = @selector(generateDefaultLayoutParams);
  methods[28].selector = @selector(checkLayoutParamsWithADXRecyclerView_LayoutParams:);
  methods[29].selector = @selector(scrollHorizontallyByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[30].selector = @selector(scrollVerticallyByWithInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[31].selector = @selector(canScrollHorizontally);
  methods[32].selector = @selector(canScrollVertically);
  methods[33].selector = @selector(scrollToPositionWithInt:);
  methods[34].selector = @selector(smoothScrollToPositionWithADXRecyclerView:withADXRecyclerView_State:withInt:);
  methods[35].selector = @selector(getLayoutDirection);
  methods[36].selector = @selector(endAnimationWithADView:);
  methods[37].selector = @selector(addDisappearingViewWithADView:);
  methods[38].selector = @selector(addDisappearingViewWithADView:withInt:);
  methods[39].selector = @selector(addViewWithADView:);
  methods[40].selector = @selector(addViewWithADView:withInt:);
  methods[41].selector = @selector(addViewIntWithADView:withInt:withBoolean:);
  methods[42].selector = @selector(removeViewWithADView:);
  methods[43].selector = @selector(removeViewAtWithInt:);
  methods[44].selector = @selector(removeAllViews);
  methods[45].selector = @selector(getBaseline);
  methods[46].selector = @selector(getPositionWithADView:);
  methods[47].selector = @selector(getItemViewTypeWithADView:);
  methods[48].selector = @selector(findContainingItemViewWithADView:);
  methods[49].selector = @selector(findViewByPositionWithInt:);
  methods[50].selector = @selector(detachViewWithADView:);
  methods[51].selector = @selector(detachViewAtWithInt:);
  methods[52].selector = @selector(detachViewInternalWithInt:withADView:);
  methods[53].selector = @selector(attachViewWithADView:withInt:withADXRecyclerView_LayoutParams:);
  methods[54].selector = @selector(attachViewWithADView:withInt:);
  methods[55].selector = @selector(attachViewWithADView:);
  methods[56].selector = @selector(removeDetachedViewWithADView:);
  methods[57].selector = @selector(moveViewWithInt:withInt:);
  methods[58].selector = @selector(detachAndScrapViewWithADView:withADXRecyclerView_Recycler:);
  methods[59].selector = @selector(detachAndScrapViewAtWithInt:withADXRecyclerView_Recycler:);
  methods[60].selector = @selector(removeAndRecycleViewWithADView:withADXRecyclerView_Recycler:);
  methods[61].selector = @selector(removeAndRecycleViewAtWithInt:withADXRecyclerView_Recycler:);
  methods[62].selector = @selector(getChildCount);
  methods[63].selector = @selector(getChildAtWithInt:);
  methods[64].selector = @selector(getWidthMode);
  methods[65].selector = @selector(getHeightMode);
  methods[66].selector = @selector(getWidth);
  methods[67].selector = @selector(getHeight);
  methods[68].selector = @selector(getPaddingLeft);
  methods[69].selector = @selector(getPaddingTop);
  methods[70].selector = @selector(getPaddingRight);
  methods[71].selector = @selector(getPaddingBottom);
  methods[72].selector = @selector(getPaddingStart);
  methods[73].selector = @selector(getPaddingEnd);
  methods[74].selector = @selector(isFocused);
  methods[75].selector = @selector(hasFocus);
  methods[76].selector = @selector(getItemCount);
  methods[77].selector = @selector(offsetChildrenHorizontalWithInt:);
  methods[78].selector = @selector(offsetChildrenVerticalWithInt:);
  methods[79].selector = @selector(ignoreViewWithADView:);
  methods[80].selector = @selector(stopIgnoringViewWithADView:);
  methods[81].selector = @selector(detachAndScrapAttachedViewsWithADXRecyclerView_Recycler:);
  methods[82].selector = @selector(scrapOrRecycleViewWithADXRecyclerView_Recycler:withInt:withADView:);
  methods[83].selector = @selector(removeAndRecycleScrapIntWithADXRecyclerView_Recycler:);
  methods[84].selector = @selector(measureChildWithADView:withInt:withInt:);
  methods[85].selector = @selector(shouldReMeasureChildWithADView:withInt:withInt:withADXRecyclerView_LayoutParams:);
  methods[86].selector = @selector(shouldMeasureChildWithADView:withInt:withInt:withADXRecyclerView_LayoutParams:);
  methods[87].selector = @selector(isMeasurementCacheEnabled);
  methods[88].selector = @selector(setMeasurementCacheEnabledWithBoolean:);
  methods[89].selector = @selector(isMeasurementUpToDateWithInt:withInt:withInt:);
  methods[90].selector = @selector(measureChildWithMarginsWithADView:withInt:withInt:);
  methods[91].selector = @selector(getChildMeasureSpecWithInt:withInt:withInt:withBoolean:);
  methods[92].selector = @selector(getChildMeasureSpecWithInt:withInt:withInt:withInt:withBoolean:);
  methods[93].selector = @selector(getDecoratedMeasuredWidthWithADView:);
  methods[94].selector = @selector(getDecoratedMeasuredHeightWithADView:);
  methods[95].selector = @selector(layoutDecoratedWithADView:withInt:withInt:withInt:withInt:);
  methods[96].selector = @selector(layoutDecoratedWithMarginsWithADView:withInt:withInt:withInt:withInt:);
  methods[97].selector = @selector(getTransformedBoundingBoxWithADView:withBoolean:withADRect:);
  methods[98].selector = @selector(getDecoratedBoundsWithMarginsWithADView:withADRect:);
  methods[99].selector = @selector(getDecoratedLeftWithADView:);
  methods[100].selector = @selector(getDecoratedTopWithADView:);
  methods[101].selector = @selector(getDecoratedRightWithADView:);
  methods[102].selector = @selector(getDecoratedBottomWithADView:);
  methods[103].selector = @selector(calculateItemDecorationsForChildWithADView:withADRect:);
  methods[104].selector = @selector(getTopDecorationHeightWithADView:);
  methods[105].selector = @selector(getBottomDecorationHeightWithADView:);
  methods[106].selector = @selector(getLeftDecorationWidthWithADView:);
  methods[107].selector = @selector(getRightDecorationWidthWithADView:);
  methods[108].selector = @selector(onFocusSearchFailedWithADView:withInt:withADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[109].selector = @selector(onInterceptFocusSearchWithADView:withInt:);
  methods[110].selector = @selector(onAdapterChangedWithADXRecyclerView_Adapter:withADXRecyclerView_Adapter:);
  methods[111].selector = @selector(onAddFocusablesWithADXRecyclerView:withJavaUtilArrayList:withInt:withInt:);
  methods[112].selector = @selector(onItemsChangedWithADXRecyclerView:);
  methods[113].selector = @selector(onItemsAddedWithADXRecyclerView:withInt:withInt:);
  methods[114].selector = @selector(onItemsRemovedWithADXRecyclerView:withInt:withInt:);
  methods[115].selector = @selector(onItemsUpdatedWithADXRecyclerView:withInt:withInt:);
  methods[116].selector = @selector(onItemsUpdatedWithADXRecyclerView:withInt:withInt:withId:);
  methods[117].selector = @selector(onItemsMovedWithADXRecyclerView:withInt:withInt:withInt:);
  methods[118].selector = @selector(computeHorizontalScrollExtentWithADXRecyclerView_State:);
  methods[119].selector = @selector(computeHorizontalScrollOffsetWithADXRecyclerView_State:);
  methods[120].selector = @selector(computeHorizontalScrollRangeWithADXRecyclerView_State:);
  methods[121].selector = @selector(computeVerticalScrollExtentWithADXRecyclerView_State:);
  methods[122].selector = @selector(computeVerticalScrollOffsetWithADXRecyclerView_State:);
  methods[123].selector = @selector(computeVerticalScrollRangeWithADXRecyclerView_State:);
  methods[124].selector = @selector(onMeasureWithADXRecyclerView_Recycler:withADXRecyclerView_State:withInt:withInt:);
  methods[125].selector = @selector(setMeasuredDimensionWithInt:withInt:);
  methods[126].selector = @selector(getMinimumWidth);
  methods[127].selector = @selector(getMinimumHeight);
  methods[128].selector = @selector(onSaveInstanceState);
  methods[129].selector = @selector(onRestoreInstanceStateWithADParcelable:);
  methods[130].selector = @selector(onScrollStateChangedWithInt:);
  methods[131].selector = @selector(removeAndRecycleAllViewsWithADXRecyclerView_Recycler:);
  methods[132].selector = @selector(requestSimpleAnimationsInNextLayout);
  methods[133].selector = @selector(getRowCountForAccessibilityWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[134].selector = @selector(getColumnCountForAccessibilityWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[135].selector = @selector(isLayoutHierarchicalWithADXRecyclerView_Recycler:withADXRecyclerView_State:);
  methods[136].selector = @selector(setExactMeasureSpecsFromWithADXRecyclerView:);
  methods[137].selector = @selector(shouldMeasureTwice);
  methods[138].selector = @selector(hasFlexibleChildInBothOrientations);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mChildHelper_", "LADXChildHelper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRecyclerView_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHorizontalBoundCheckCallback_", "LADXViewBoundsCheck_Callback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mVerticalBoundCheckCallback_", "LADXViewBoundsCheck_Callback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mHorizontalBoundCheck_", "LADXViewBoundsCheck;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVerticalBoundCheck_", "LADXViewBoundsCheck;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRequestedSimpleAnimations_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIsAttachedToWindow_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAutoMeasure_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMeasurementCacheEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mItemPrefetchEnabled_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPrefetchMaxCountObserved_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPrefetchMaxObservedInInitialPrefetch_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWidthMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeightMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setRecyclerView", "LADXRecyclerView;", "setMeasureSpecs", "II", "setMeasuredDimensionFromChildren", "setMeasuredDimension", "LADRect;II", "assertInLayoutOrScroll", "LNSString;", "chooseSize", "III", "assertNotInLayoutOrScroll", "setAutoMeasureEnabled", "Z", "setItemPrefetchEnabled", "collectAdjacentPrefetchPositions", "IILADXRecyclerView_State;LADXRecyclerView_LayoutManager_LayoutPrefetchRegistry;", "collectInitialPrefetchPositions", "ILADXRecyclerView_LayoutManager_LayoutPrefetchRegistry;", "dispatchAttachedToWindow", "dispatchDetachedFromWindow", "LADXRecyclerView;LADXRecyclerView_Recycler;", "postOnAnimation", "LJavaLangRunnable;", "removeCallbacks", "onAttachedToWindow", "onDetachedFromWindow", "onLayoutChildren", "LADXRecyclerView_Recycler;LADXRecyclerView_State;", "onLayoutCompleted", "LADXRecyclerView_State;", "checkLayoutParams", "LADXRecyclerView_LayoutParams;", "scrollHorizontallyBy", "ILADXRecyclerView_Recycler;LADXRecyclerView_State;", "scrollVerticallyBy", "scrollToPosition", "I", "smoothScrollToPosition", "LADXRecyclerView;LADXRecyclerView_State;I", "endAnimation", "LADView;", "addDisappearingView", "LADView;I", "addView", "addViewInt", "LADView;IZ", "removeView", "removeViewAt", "getPosition", "getItemViewType", "findContainingItemView", "findViewByPosition", "detachView", "detachViewAt", "detachViewInternal", "ILADView;", "attachView", "LADView;ILADXRecyclerView_LayoutParams;", "removeDetachedView", "moveView", "detachAndScrapView", "LADView;LADXRecyclerView_Recycler;", "detachAndScrapViewAt", "ILADXRecyclerView_Recycler;", "removeAndRecycleView", "removeAndRecycleViewAt", "getChildAt", "offsetChildrenHorizontal", "offsetChildrenVertical", "ignoreView", "stopIgnoringView", "detachAndScrapAttachedViews", "LADXRecyclerView_Recycler;", "scrapOrRecycleView", "LADXRecyclerView_Recycler;ILADView;", "removeAndRecycleScrapInt", "measureChild", "LADView;II", "shouldReMeasureChild", "LADView;IILADXRecyclerView_LayoutParams;", "shouldMeasureChild", "setMeasurementCacheEnabled", "isMeasurementUpToDate", "measureChildWithMargins", "getChildMeasureSpec", "IIIZ", "IIIIZ", "getDecoratedMeasuredWidth", "getDecoratedMeasuredHeight", "layoutDecorated", "LADView;IIII", "layoutDecoratedWithMargins", "getTransformedBoundingBox", "LADView;ZLADRect;", "getDecoratedBoundsWithMargins", "LADView;LADRect;", "getDecoratedLeft", "getDecoratedTop", "getDecoratedRight", "getDecoratedBottom", "calculateItemDecorationsForChild", "getTopDecorationHeight", "getBottomDecorationHeight", "getLeftDecorationWidth", "getRightDecorationWidth", "onFocusSearchFailed", "LADView;ILADXRecyclerView_Recycler;LADXRecyclerView_State;", "onInterceptFocusSearch", "onAdapterChanged", "LADXRecyclerView_Adapter;LADXRecyclerView_Adapter;", "onAddFocusables", "LADXRecyclerView;LJavaUtilArrayList;II", "(Landroidx/recyclerview/widget/RecyclerView;Ljava/util/ArrayList<Lr/android/view/View;>;II)Z", "onItemsChanged", "onItemsAdded", "LADXRecyclerView;II", "onItemsRemoved", "onItemsUpdated", "LADXRecyclerView;IILNSObject;", "onItemsMoved", "LADXRecyclerView;III", "computeHorizontalScrollExtent", "computeHorizontalScrollOffset", "computeHorizontalScrollRange", "computeVerticalScrollExtent", "computeVerticalScrollOffset", "computeVerticalScrollRange", "onMeasure", "LADXRecyclerView_Recycler;LADXRecyclerView_State;II", "onRestoreInstanceState", "LADParcelable;", "onScrollStateChanged", "removeAndRecycleAllViews", "getRowCountForAccessibility", "getColumnCountForAccessibility", "isLayoutHierarchical", "setExactMeasureSpecsFrom", "LADXRecyclerView_LayoutManager_LayoutPrefetchRegistry;" };
  static const J2ObjcClassInfo _ADXRecyclerView_LayoutManager = { "LayoutManager", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x409, 139, 17, 1, 138, -1, -1, -1 };
  return &_ADXRecyclerView_LayoutManager;
}

@end

void ADXRecyclerView_LayoutManager_init(ADXRecyclerView_LayoutManager *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mHorizontalBoundCheckCallback_, new_ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(self));
  JreStrongAssignAndConsume(&self->mVerticalBoundCheckCallback_, new_ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(self));
  JreStrongAssignAndConsume(&self->mHorizontalBoundCheck_, new_ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(self->mHorizontalBoundCheckCallback_));
  JreStrongAssignAndConsume(&self->mVerticalBoundCheck_, new_ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(self->mVerticalBoundCheckCallback_));
  self->mRequestedSimpleAnimations_ = false;
  self->mIsAttachedToWindow_ = false;
  self->mAutoMeasure_ = false;
  self->mMeasurementCacheEnabled_ = true;
  self->mItemPrefetchEnabled_ = true;
}

jint ADXRecyclerView_LayoutManager_chooseSizeWithInt_withInt_withInt_(jint spec, jint desired, jint min) {
  ADXRecyclerView_LayoutManager_initialize();
  jint mode = ADView_MeasureSpec_getModeWithInt_(spec);
  jint size = ADView_MeasureSpec_getSizeWithInt_(spec);
  switch (mode) {
    case ADView_MeasureSpec_EXACTLY:
    return size;
    case ADView_MeasureSpec_AT_MOST:
    return JavaLangMath_minWithInt_withInt_(size, JavaLangMath_maxWithInt_withInt_(desired, min));
    case ADView_MeasureSpec_UNSPECIFIED:
    default:
    return JavaLangMath_maxWithInt_withInt_(desired, min);
  }
}

void ADXRecyclerView_LayoutManager_addViewIntWithADView_withInt_withBoolean_(ADXRecyclerView_LayoutManager *self, ADView *child, jint index, jboolean disappearing) {
  ADXRecyclerView_ViewHolder *holder = ADXRecyclerView_getChildViewHolderIntWithADView_(child);
  if (disappearing || [((ADXRecyclerView_ViewHolder *) nil_chk(holder)) isRemoved]) {
    [((ADXViewInfoStore *) nil_chk(((ADXRecyclerView *) nil_chk(self->mRecyclerView_))->mViewInfoStore_)) addToDisappearedInLayoutWithADXRecyclerView_ViewHolder:holder];
  }
  else {
    [((ADXViewInfoStore *) nil_chk(((ADXRecyclerView *) nil_chk(self->mRecyclerView_))->mViewInfoStore_)) removeFromDisappearedInLayoutWithADXRecyclerView_ViewHolder:holder];
  }
  ADXRecyclerView_LayoutParams *lp = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(child)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) wasReturnedFromScrap] || [holder isScrap]) {
    if ([holder isScrap]) {
      [holder unScrap];
    }
    else {
      [holder clearReturnedFromScrapFlag];
    }
    [((ADXChildHelper *) nil_chk(self->mChildHelper_)) attachViewToParentWithADView:child withInt:index withADViewGroup_LayoutParams:[child getLayoutParams] withBoolean:false];
  }
  else if ([child getParent] == self->mRecyclerView_) {
    jint currentIndex = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) indexOfChildWithADView:child];
    if (index == -1) {
      index = [((ADXChildHelper *) nil_chk(self->mChildHelper_)) getChildCount];
    }
    if (currentIndex == -1) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$", @"Added View has RecyclerView as parent but view is not a real child. Unfiltered index:", [((ADXRecyclerView *) nil_chk(self->mRecyclerView_)) indexOfChildWithADView:child], [((ADXRecyclerView *) nil_chk(self->mRecyclerView_)) exceptionLabel]));
    }
    if (currentIndex != index) {
      [((ADXRecyclerView_LayoutManager *) nil_chk(((ADXRecyclerView *) nil_chk(self->mRecyclerView_))->mLayout_)) moveViewWithInt:currentIndex withInt:index];
    }
  }
  else {
    [((ADXChildHelper *) nil_chk(self->mChildHelper_)) addViewWithADView:child withInt:index withBoolean:false];
    ((ADXRecyclerView_LayoutParams *) nil_chk(lp))->mInsetsDirty_ = true;
  }
  if (((ADXRecyclerView_LayoutParams *) nil_chk(lp))->mPendingInvalidate_) {
    [((ADView *) nil_chk(holder->itemView_)) invalidate];
    lp->mPendingInvalidate_ = false;
  }
}

void ADXRecyclerView_LayoutManager_detachViewInternalWithInt_withADView_(ADXRecyclerView_LayoutManager *self, jint index, ADView *view) {
  [((ADXChildHelper *) nil_chk(self->mChildHelper_)) detachViewFromParentWithInt:index];
}

void ADXRecyclerView_LayoutManager_scrapOrRecycleViewWithADXRecyclerView_Recycler_withInt_withADView_(ADXRecyclerView_LayoutManager *self, ADXRecyclerView_Recycler *recycler, jint index, ADView *view) {
  ADXRecyclerView_ViewHolder *viewHolder = ADXRecyclerView_getChildViewHolderIntWithADView_(view);
  if ([((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder)) shouldIgnore]) {
    return;
  }
  if ([viewHolder isInvalid] && ![viewHolder isRemoved] && !ADXRecyclerView_Adapter_hasStableIds(nil_chk(((ADXRecyclerView *) nil_chk(self->mRecyclerView_))->mAdapter_))) {
    [self removeViewAtWithInt:index];
    [((ADXRecyclerView_Recycler *) nil_chk(recycler)) recycleViewHolderInternalWithADXRecyclerView_ViewHolder:viewHolder];
  }
  else {
    [self detachViewAtWithInt:index];
    [((ADXRecyclerView_Recycler *) nil_chk(recycler)) scrapViewWithADView:view];
    [((ADXViewInfoStore *) nil_chk(((ADXRecyclerView *) nil_chk(self->mRecyclerView_))->mViewInfoStore_)) onViewDetachedWithADXRecyclerView_ViewHolder:viewHolder];
  }
}

jboolean ADXRecyclerView_LayoutManager_isMeasurementUpToDateWithInt_withInt_withInt_(jint childSize, jint spec, jint dimension) {
  ADXRecyclerView_LayoutManager_initialize();
  jint specMode = ADView_MeasureSpec_getModeWithInt_(spec);
  jint specSize = ADView_MeasureSpec_getSizeWithInt_(spec);
  if (dimension > 0 && childSize != dimension) {
    return false;
  }
  switch (specMode) {
    case ADView_MeasureSpec_UNSPECIFIED:
    return true;
    case ADView_MeasureSpec_AT_MOST:
    return specSize >= childSize;
    case ADView_MeasureSpec_EXACTLY:
    return specSize == childSize;
  }
  return false;
}

jint ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withBoolean_(jint parentSize, jint padding, jint childDimension, jboolean canScroll) {
  ADXRecyclerView_LayoutManager_initialize();
  jint size = JavaLangMath_maxWithInt_withInt_(0, parentSize - padding);
  jint resultSize = 0;
  jint resultMode = 0;
  if (canScroll) {
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else {
      resultSize = 0;
      resultMode = ADView_MeasureSpec_UNSPECIFIED;
    }
  }
  else {
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_MATCH_PARENT) {
      resultSize = size;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      resultSize = size;
      resultMode = ADView_MeasureSpec_AT_MOST;
    }
  }
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(resultSize, resultMode);
}

jint ADXRecyclerView_LayoutManager_getChildMeasureSpecWithInt_withInt_withInt_withInt_withBoolean_(jint parentSize, jint parentMode, jint padding, jint childDimension, jboolean canScroll) {
  ADXRecyclerView_LayoutManager_initialize();
  jint size = JavaLangMath_maxWithInt_withInt_(0, parentSize - padding);
  jint resultSize = 0;
  jint resultMode = 0;
  if (canScroll) {
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_MATCH_PARENT) {
      switch (parentMode) {
        case ADView_MeasureSpec_AT_MOST:
        case ADView_MeasureSpec_EXACTLY:
        resultSize = size;
        resultMode = parentMode;
        break;
        case ADView_MeasureSpec_UNSPECIFIED:
        resultSize = 0;
        resultMode = ADView_MeasureSpec_UNSPECIFIED;
        break;
      }
    }
    else if (childDimension == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      resultSize = 0;
      resultMode = ADView_MeasureSpec_UNSPECIFIED;
    }
  }
  else {
    if (childDimension >= 0) {
      resultSize = childDimension;
      resultMode = ADView_MeasureSpec_EXACTLY;
    }
    else if (childDimension == ADViewGroup_LayoutParams_MATCH_PARENT) {
      resultSize = size;
      resultMode = parentMode;
    }
    else if (childDimension == ADViewGroup_LayoutParams_WRAP_CONTENT) {
      resultSize = size;
      if (parentMode == ADView_MeasureSpec_AT_MOST || parentMode == ADView_MeasureSpec_EXACTLY) {
        resultMode = ADView_MeasureSpec_AT_MOST;
      }
      else {
        resultMode = ADView_MeasureSpec_UNSPECIFIED;
      }
    }
  }
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(resultSize, resultMode);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_LayoutManager)

@implementation ADXRecyclerView_LayoutManager_1

- (instancetype)initWithADXRecyclerView_LayoutManager:(ADXRecyclerView_LayoutManager *)outer$ {
  ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(self, outer$);
  return self;
}

- (ADView *)getChildAtWithInt:(jint)index {
  return [this$0_ getChildAtWithInt:index];
}

- (jint)getParentStart {
  return [this$0_ getPaddingLeft];
}

- (jint)getParentEnd {
  return [this$0_ getWidth] - [this$0_ getPaddingRight];
}

- (jint)getChildStartWithADView:(ADView *)view {
  ADXRecyclerView_LayoutParams *params = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  return [this$0_ getDecoratedLeftWithADView:view] - ((ADXRecyclerView_LayoutParams *) nil_chk(params))->leftMargin_;
}

- (jint)getChildEndWithADView:(ADView *)view {
  ADXRecyclerView_LayoutParams *params = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  return [this$0_ getDecoratedRightWithADView:view] + ((ADXRecyclerView_LayoutParams *) nil_chk(params))->rightMargin_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView_LayoutManager:);
  methods[1].selector = @selector(getChildAtWithInt:);
  methods[2].selector = @selector(getParentStart);
  methods[3].selector = @selector(getParentEnd);
  methods[4].selector = @selector(getChildStartWithADView:);
  methods[5].selector = @selector(getChildEndWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView_LayoutManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView_LayoutManager;", "getChildAt", "I", "getChildStart", "LADView;", "getChildEnd" };
  static const J2ObjcClassInfo _ADXRecyclerView_LayoutManager_1 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8010, 6, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_LayoutManager_1;
}

@end

void ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager_1 *self, ADXRecyclerView_LayoutManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXRecyclerView_LayoutManager_1 *new_ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_LayoutManager_1, initWithADXRecyclerView_LayoutManager_, outer$)
}

ADXRecyclerView_LayoutManager_1 *create_ADXRecyclerView_LayoutManager_1_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_LayoutManager_1, initWithADXRecyclerView_LayoutManager_, outer$)
}

@implementation ADXRecyclerView_LayoutManager_2

- (instancetype)initWithADXRecyclerView_LayoutManager:(ADXRecyclerView_LayoutManager *)outer$ {
  ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(self, outer$);
  return self;
}

- (ADView *)getChildAtWithInt:(jint)index {
  return [this$0_ getChildAtWithInt:index];
}

- (jint)getParentStart {
  return [this$0_ getPaddingTop];
}

- (jint)getParentEnd {
  return [this$0_ getHeight] - [this$0_ getPaddingBottom];
}

- (jint)getChildStartWithADView:(ADView *)view {
  ADXRecyclerView_LayoutParams *params = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  return [this$0_ getDecoratedTopWithADView:view] - ((ADXRecyclerView_LayoutParams *) nil_chk(params))->topMargin_;
}

- (jint)getChildEndWithADView:(ADView *)view {
  ADXRecyclerView_LayoutParams *params = (ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class]);
  return [this$0_ getDecoratedBottomWithADView:view] + ((ADXRecyclerView_LayoutParams *) nil_chk(params))->bottomMargin_;
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 5, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXRecyclerView_LayoutManager:);
  methods[1].selector = @selector(getChildAtWithInt:);
  methods[2].selector = @selector(getParentStart);
  methods[3].selector = @selector(getParentEnd);
  methods[4].selector = @selector(getChildStartWithADView:);
  methods[5].selector = @selector(getChildEndWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXRecyclerView_LayoutManager;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView_LayoutManager;", "getChildAt", "I", "getChildStart", "LADView;", "getChildEnd" };
  static const J2ObjcClassInfo _ADXRecyclerView_LayoutManager_2 = { "", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8010, 6, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_LayoutManager_2;
}

@end

void ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager_2 *self, ADXRecyclerView_LayoutManager *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXRecyclerView_LayoutManager_2 *new_ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_LayoutManager_2, initWithADXRecyclerView_LayoutManager_, outer$)
}

ADXRecyclerView_LayoutManager_2 *create_ADXRecyclerView_LayoutManager_2_initWithADXRecyclerView_LayoutManager_(ADXRecyclerView_LayoutManager *outer$) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_LayoutManager_2, initWithADXRecyclerView_LayoutManager_, outer$)
}

@implementation ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(addPositionWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addPosition", "II", "LADXRecyclerView_LayoutManager;" };
  static const J2ObjcClassInfo _ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry = { "LayoutPrefetchRegistry", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXRecyclerView_LayoutManager_LayoutPrefetchRegistry)

@implementation ADXRecyclerView_ItemDecoration

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_ItemDecoration_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)getItemOffsetsWithADRect:(ADRect *)outRect
                         withInt:(jint)itemPosition
             withADXRecyclerView:(ADXRecyclerView *)parent {
  [((ADRect *) nil_chk(outRect)) setWithInt:0 withInt:0 withInt:0 withInt:0];
}

- (void)getItemOffsetsWithADRect:(ADRect *)outRect
                      withADView:(ADView *)view
             withADXRecyclerView:(ADXRecyclerView *)parent
       withADXRecyclerView_State:(ADXRecyclerView_State *)state {
  [self getItemOffsetsWithADRect:outRect withInt:[((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADXRecyclerView_LayoutParams class])))) getViewLayoutPosition] withADXRecyclerView:parent];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getItemOffsetsWithADRect:withInt:withADXRecyclerView:);
  methods[2].selector = @selector(getItemOffsetsWithADRect:withADView:withADXRecyclerView:withADXRecyclerView_State:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getItemOffsets", "LADRect;ILADXRecyclerView;", "LADRect;LADView;LADXRecyclerView;LADXRecyclerView_State;", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_ItemDecoration = { "ItemDecoration", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x409, 3, 0, 3, -1, -1, -1, -1 };
  return &_ADXRecyclerView_ItemDecoration;
}

@end

void ADXRecyclerView_ItemDecoration_init(ADXRecyclerView_ItemDecoration *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_ItemDecoration)

@implementation ADXRecyclerView_OnScrollListener

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_OnScrollListener_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onScrollStateChangedWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                                        withInt:(jint)newState {
}

- (void)onScrolledWithADXRecyclerView:(ADXRecyclerView *)recyclerView
                              withInt:(jint)dx
                              withInt:(jint)dy {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(onScrollStateChangedWithADXRecyclerView:withInt:);
  methods[2].selector = @selector(onScrolledWithADXRecyclerView:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onScrollStateChanged", "LADXRecyclerView;I", "onScrolled", "LADXRecyclerView;II", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_OnScrollListener = { "OnScrollListener", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x409, 3, 0, 4, -1, -1, -1, -1 };
  return &_ADXRecyclerView_OnScrollListener;
}

@end

void ADXRecyclerView_OnScrollListener_init(ADXRecyclerView_OnScrollListener *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_OnScrollListener)

@implementation ADXRecyclerView_RecyclerListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onViewRecycledWithADXRecyclerView_ViewHolder:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onViewRecycled", "LADXRecyclerView_ViewHolder;", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_RecyclerListener = { "RecyclerListener", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADXRecyclerView_RecyclerListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXRecyclerView_RecyclerListener)

@implementation ADXRecyclerView_OnChildAttachStateChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onChildViewAttachedToWindowWithADView:);
  methods[1].selector = @selector(onChildViewDetachedFromWindowWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onChildViewAttachedToWindow", "LADView;", "onChildViewDetachedFromWindow", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_OnChildAttachStateChangeListener = { "OnChildAttachStateChangeListener", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x609, 2, 0, 3, -1, -1, -1, -1 };
  return &_ADXRecyclerView_OnChildAttachStateChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXRecyclerView_OnChildAttachStateChangeListener)

J2OBJC_INITIALIZED_DEFN(ADXRecyclerView_ViewHolder)

@implementation ADXRecyclerView_ViewHolder

- (instancetype)initWithADView:(ADView *)itemView {
  ADXRecyclerView_ViewHolder_initWithADView_(self, itemView);
  return self;
}

- (void)flagRemovedAndOffsetPositionWithInt:(jint)mNewPosition
                                    withInt:(jint)offset
                                withBoolean:(jboolean)applyToPreLayout {
  [self addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_REMOVED];
  [self offsetPositionWithInt:offset withBoolean:applyToPreLayout];
  mPosition_ = mNewPosition;
}

- (void)offsetPositionWithInt:(jint)offset
                  withBoolean:(jboolean)applyToPreLayout {
  if (mOldPosition_ == ADXRecyclerView_NO_POSITION) {
    mOldPosition_ = mPosition_;
  }
  if (mPreLayoutPosition_ == ADXRecyclerView_NO_POSITION) {
    mPreLayoutPosition_ = mPosition_;
  }
  if (applyToPreLayout) {
    mPreLayoutPosition_ += offset;
  }
  mPosition_ += offset;
  if ([((ADView *) nil_chk(itemView_)) getLayoutParams] != nil) {
    ((ADXRecyclerView_LayoutParams *) nil_chk(((ADXRecyclerView_LayoutParams *) cast_chk([itemView_ getLayoutParams], [ADXRecyclerView_LayoutParams class]))))->mInsetsDirty_ = true;
  }
}

- (void)clearOldPosition {
  mOldPosition_ = ADXRecyclerView_NO_POSITION;
  mPreLayoutPosition_ = ADXRecyclerView_NO_POSITION;
}

- (void)saveOldPosition {
  if (mOldPosition_ == ADXRecyclerView_NO_POSITION) {
    mOldPosition_ = mPosition_;
  }
}

- (jboolean)shouldIgnore {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_IGNORE) != 0;
}

- (jint)getPosition {
  return mPreLayoutPosition_ == ADXRecyclerView_NO_POSITION ? mPosition_ : mPreLayoutPosition_;
}

- (jint)getLayoutPosition {
  return ADXRecyclerView_ViewHolder_getLayoutPosition(self);
}

- (jint)getAdapterPosition {
  return ADXRecyclerView_ViewHolder_getBindingAdapterPosition(self);
}

- (jint)getBindingAdapterPosition {
  return ADXRecyclerView_ViewHolder_getBindingAdapterPosition(self);
}

- (jint)getAbsoluteAdapterPosition {
  return ADXRecyclerView_ViewHolder_getAbsoluteAdapterPosition(self);
}

- (ADXRecyclerView_Adapter *)getBindingAdapter {
  return mBindingAdapter_;
}

- (jint)getOldPosition {
  return ADXRecyclerView_ViewHolder_getOldPosition(self);
}

- (jlong)getItemId {
  return ADXRecyclerView_ViewHolder_getItemId(self);
}

- (jint)getItemViewType {
  return ADXRecyclerView_ViewHolder_getItemViewType(self);
}

- (jboolean)isScrap {
  return mScrapContainer_ != nil;
}

- (void)unScrap {
  [((ADXRecyclerView_Recycler *) nil_chk(mScrapContainer_)) unscrapViewWithADXRecyclerView_ViewHolder:self];
}

- (jboolean)wasReturnedFromScrap {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP) != 0;
}

- (void)clearReturnedFromScrapFlag {
  mFlags_ = mFlags_ & ~ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP;
}

- (void)clearTmpDetachFlag {
  mFlags_ = mFlags_ & ~ADXRecyclerView_ViewHolder_FLAG_TMP_DETACHED;
}

- (void)stopIgnoring {
  mFlags_ = mFlags_ & ~ADXRecyclerView_ViewHolder_FLAG_IGNORE;
}

- (void)setScrapContainerWithADXRecyclerView_Recycler:(ADXRecyclerView_Recycler *)recycler
                                          withBoolean:(jboolean)isChangeScrap {
  JreStrongAssign(&mScrapContainer_, recycler);
  mInChangeScrap_ = isChangeScrap;
}

- (jboolean)isInvalid {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_INVALID) != 0;
}

- (jboolean)needsUpdate {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_UPDATE) != 0;
}

- (jboolean)isBound {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_BOUND) != 0;
}

- (jboolean)isRemoved {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_REMOVED) != 0;
}

- (jboolean)hasAnyOfTheFlagsWithInt:(jint)flags {
  return (mFlags_ & flags) != 0;
}

- (jboolean)isTmpDetached {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_TMP_DETACHED) != 0;
}

- (jboolean)isAttachedToTransitionOverlay {
  return [((ADView *) nil_chk(itemView_)) getParent] != nil && [itemView_ getParent] != mOwnerRecyclerView_;
}

- (jboolean)isAdapterPositionUnknown {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_ADAPTER_POSITION_UNKNOWN) != 0 || [self isInvalid];
}

- (void)setFlagsWithInt:(jint)flags
                withInt:(jint)mask {
  mFlags_ = (mFlags_ & ~mask) | (flags & mask);
}

- (void)addFlagsWithInt:(jint)flags {
  mFlags_ |= flags;
}

- (void)addChangePayloadWithId:(id)payload {
  if (payload == nil) {
    [self addFlagsWithInt:ADXRecyclerView_ViewHolder_FLAG_ADAPTER_FULLUPDATE];
  }
  else if ((mFlags_ & ADXRecyclerView_ViewHolder_FLAG_ADAPTER_FULLUPDATE) == 0) {
    ADXRecyclerView_ViewHolder_createPayloadsIfNeeded(self);
    [((id<JavaUtilList>) nil_chk(mPayloads_)) addWithId:payload];
  }
}

- (void)createPayloadsIfNeeded {
  ADXRecyclerView_ViewHolder_createPayloadsIfNeeded(self);
}

- (void)clearPayload {
  if (mPayloads_ != nil) {
    [mPayloads_ clear];
  }
  mFlags_ = mFlags_ & ~ADXRecyclerView_ViewHolder_FLAG_ADAPTER_FULLUPDATE;
}

- (id<JavaUtilList>)getUnmodifiedPayloads {
  if ((mFlags_ & ADXRecyclerView_ViewHolder_FLAG_ADAPTER_FULLUPDATE) == 0) {
    if (mPayloads_ == nil || [mPayloads_ size] == 0) {
      return ADXRecyclerView_ViewHolder_FULLUPDATE_PAYLOADS;
    }
    return mUnmodifiedPayloads_;
  }
  else {
    return ADXRecyclerView_ViewHolder_FULLUPDATE_PAYLOADS;
  }
}

- (void)resetInternal {
  mFlags_ = 0;
  mPosition_ = ADXRecyclerView_NO_POSITION;
  mOldPosition_ = ADXRecyclerView_NO_POSITION;
  mItemId_ = ADView_NO_ID;
  mPreLayoutPosition_ = ADXRecyclerView_NO_POSITION;
  mIsRecyclableCount_ = 0;
  JreStrongAssign(&mShadowedHolder_, nil);
  JreStrongAssign(&mShadowingHolder_, nil);
  [self clearPayload];
  mWasImportantForAccessibilityBeforeHidden_ = ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_AUTO;
  mPendingAccessibilityState_ = ADXRecyclerView_ViewHolder_PENDING_ACCESSIBILITY_STATE_NOT_SET;
  ADXRecyclerView_clearNestedRecyclerViewIfNotNestedWithADXRecyclerView_ViewHolder_(self);
}

- (void)onEnteredHiddenStateWithADXRecyclerView:(ADXRecyclerView *)parent {
  if (mPendingAccessibilityState_ != ADXRecyclerView_ViewHolder_PENDING_ACCESSIBILITY_STATE_NOT_SET) {
    mWasImportantForAccessibilityBeforeHidden_ = mPendingAccessibilityState_;
  }
  else {
    mWasImportantForAccessibilityBeforeHidden_ = ADXViewCompat_getImportantForAccessibilityWithADView_(itemView_);
  }
}

- (void)onLeftHiddenStateWithADXRecyclerView:(ADXRecyclerView *)parent {
  mWasImportantForAccessibilityBeforeHidden_ = ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_AUTO;
}

- (NSString *)description {
  NSString *className_ = [[self java_getClass] getSimpleName];
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(JreStrcat("$C$$I$J$I$I", className_, '{', JavaLangInteger_toHexStringWithInt_(((jint) [self hash])), @" position=", mPosition_, @" id=", mItemId_, @", oldPos=", mOldPosition_, @", pLpos:", mPreLayoutPosition_));
  if ([self isScrap]) {
    [((JavaLangStringBuilder *) nil_chk([sb appendWithNSString:@" scrap "])) appendWithNSString:mInChangeScrap_ ? @"[changeScrap]" : @"[attachedScrap]"];
  }
  if ([self isInvalid]) [sb appendWithNSString:@" invalid"];
  if (![self isBound]) [sb appendWithNSString:@" unbound"];
  if ([self needsUpdate]) [sb appendWithNSString:@" update"];
  if ([self isRemoved]) [sb appendWithNSString:@" removed"];
  if ([self shouldIgnore]) [sb appendWithNSString:@" ignored"];
  if ([self isTmpDetached]) [sb appendWithNSString:@" tmpDetached"];
  if (!ADXRecyclerView_ViewHolder_isRecyclable(self)) [sb appendWithNSString:JreStrcat("$IC", @" not recyclable(", mIsRecyclableCount_, ')')];
  if ([self isAdapterPositionUnknown]) [sb appendWithNSString:@" undefined adapter position"];
  if ([((ADView *) nil_chk(itemView_)) getParent] == nil) [sb appendWithNSString:@" no parent"];
  [sb appendWithNSString:@"}"];
  return [sb description];
}

- (void)setIsRecyclableWithBoolean:(jboolean)recyclable {
  ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(self, recyclable);
}

- (jboolean)isRecyclable {
  return ADXRecyclerView_ViewHolder_isRecyclable(self);
}

- (jboolean)shouldBeKeptAsChild {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_NOT_RECYCLABLE) != 0;
}

- (jboolean)doesTransientStatePreventRecycling {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_NOT_RECYCLABLE) == 0 && ADXViewCompat_hasTransientStateWithADView_(itemView_);
}

- (jboolean)isUpdated {
  return (mFlags_ & ADXRecyclerView_ViewHolder_FLAG_UPDATE) != 0;
}

- (void)dealloc {
  RELEASE_(itemView_);
  RELEASE_(mNestedRecyclerView_);
  RELEASE_(mShadowedHolder_);
  RELEASE_(mShadowingHolder_);
  RELEASE_(mPayloads_);
  RELEASE_(mUnmodifiedPayloads_);
  RELEASE_(mScrapContainer_);
  RELEASE_(mOwnerRecyclerView_);
  RELEASE_(mBindingAdapter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_Adapter;", 0x11, -1, -1, -1, 5, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 12, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x0, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 19, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(flagRemovedAndOffsetPositionWithInt:withInt:withBoolean:);
  methods[2].selector = @selector(offsetPositionWithInt:withBoolean:);
  methods[3].selector = @selector(clearOldPosition);
  methods[4].selector = @selector(saveOldPosition);
  methods[5].selector = @selector(shouldIgnore);
  methods[6].selector = @selector(getPosition);
  methods[7].selector = @selector(getLayoutPosition);
  methods[8].selector = @selector(getAdapterPosition);
  methods[9].selector = @selector(getBindingAdapterPosition);
  methods[10].selector = @selector(getAbsoluteAdapterPosition);
  methods[11].selector = @selector(getBindingAdapter);
  methods[12].selector = @selector(getOldPosition);
  methods[13].selector = @selector(getItemId);
  methods[14].selector = @selector(getItemViewType);
  methods[15].selector = @selector(isScrap);
  methods[16].selector = @selector(unScrap);
  methods[17].selector = @selector(wasReturnedFromScrap);
  methods[18].selector = @selector(clearReturnedFromScrapFlag);
  methods[19].selector = @selector(clearTmpDetachFlag);
  methods[20].selector = @selector(stopIgnoring);
  methods[21].selector = @selector(setScrapContainerWithADXRecyclerView_Recycler:withBoolean:);
  methods[22].selector = @selector(isInvalid);
  methods[23].selector = @selector(needsUpdate);
  methods[24].selector = @selector(isBound);
  methods[25].selector = @selector(isRemoved);
  methods[26].selector = @selector(hasAnyOfTheFlagsWithInt:);
  methods[27].selector = @selector(isTmpDetached);
  methods[28].selector = @selector(isAttachedToTransitionOverlay);
  methods[29].selector = @selector(isAdapterPositionUnknown);
  methods[30].selector = @selector(setFlagsWithInt:withInt:);
  methods[31].selector = @selector(addFlagsWithInt:);
  methods[32].selector = @selector(addChangePayloadWithId:);
  methods[33].selector = @selector(createPayloadsIfNeeded);
  methods[34].selector = @selector(clearPayload);
  methods[35].selector = @selector(getUnmodifiedPayloads);
  methods[36].selector = @selector(resetInternal);
  methods[37].selector = @selector(onEnteredHiddenStateWithADXRecyclerView:);
  methods[38].selector = @selector(onLeftHiddenStateWithADXRecyclerView:);
  methods[39].selector = @selector(description);
  methods[40].selector = @selector(setIsRecyclableWithBoolean:);
  methods[41].selector = @selector(isRecyclable);
  methods[42].selector = @selector(shouldBeKeptAsChild);
  methods[43].selector = @selector(doesTransientStatePreventRecycling);
  methods[44].selector = @selector(isUpdated);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "itemView_", "LADView;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "mNestedRecyclerView_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x0, -1, -1, 22, -1 },
    { "mPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOldPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mItemId_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mItemViewType_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPreLayoutPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mShadowedHolder_", "LADXRecyclerView_ViewHolder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mShadowingHolder_", "LADXRecyclerView_ViewHolder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "FLAG_BOUND", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_BOUND, 0x18, -1, -1, -1, -1 },
    { "FLAG_UPDATE", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_UPDATE, 0x18, -1, -1, -1, -1 },
    { "FLAG_INVALID", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_INVALID, 0x18, -1, -1, -1, -1 },
    { "FLAG_REMOVED", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_REMOVED, 0x18, -1, -1, -1, -1 },
    { "FLAG_NOT_RECYCLABLE", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_NOT_RECYCLABLE, 0x18, -1, -1, -1, -1 },
    { "FLAG_RETURNED_FROM_SCRAP", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_RETURNED_FROM_SCRAP, 0x18, -1, -1, -1, -1 },
    { "FLAG_IGNORE", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_IGNORE, 0x18, -1, -1, -1, -1 },
    { "FLAG_TMP_DETACHED", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_TMP_DETACHED, 0x18, -1, -1, -1, -1 },
    { "FLAG_ADAPTER_POSITION_UNKNOWN", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_ADAPTER_POSITION_UNKNOWN, 0x18, -1, -1, -1, -1 },
    { "FLAG_ADAPTER_FULLUPDATE", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_ADAPTER_FULLUPDATE, 0x18, -1, -1, -1, -1 },
    { "FLAG_MOVED", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_MOVED, 0x18, -1, -1, -1, -1 },
    { "FLAG_APPEARED_IN_PRE_LAYOUT", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_APPEARED_IN_PRE_LAYOUT, 0x18, -1, -1, -1, -1 },
    { "PENDING_ACCESSIBILITY_STATE_NOT_SET", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_PENDING_ACCESSIBILITY_STATE_NOT_SET, 0x18, -1, -1, -1, -1 },
    { "FLAG_BOUNCED_FROM_HIDDEN_LIST", "I", .constantValue.asInt = ADXRecyclerView_ViewHolder_FLAG_BOUNCED_FROM_HIDDEN_LIST, 0x18, -1, -1, -1, -1 },
    { "mFlags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "FULLUPDATE_PAYLOADS", "LJavaUtilList;", .constantValue.asLong = 0, 0x1a, -1, 23, 24, -1 },
    { "mPayloads_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 24, -1 },
    { "mUnmodifiedPayloads_", "LJavaUtilList;", .constantValue.asLong = 0, 0x0, -1, -1, 24, -1 },
    { "mIsRecyclableCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mScrapContainer_", "LADXRecyclerView_Recycler;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInChangeScrap_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWasImportantForAccessibilityBeforeHidden_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mPendingAccessibilityState_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOwnerRecyclerView_", "LADXRecyclerView;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mBindingAdapter_", "LADXRecyclerView_Adapter;", .constantValue.asLong = 0, 0x0, -1, -1, 25, -1 },
  };
  static const void *ptrTable[] = { "LADView;", "flagRemovedAndOffsetPosition", "IIZ", "offsetPosition", "IZ", "()Landroidx/recyclerview/widget/RecyclerView$Adapter<+Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;", "setScrapContainer", "LADXRecyclerView_Recycler;Z", "hasAnyOfTheFlags", "I", "setFlags", "II", "addFlags", "addChangePayload", "LNSObject;", "()Ljava/util/List<Ljava/lang/Object;>;", "onEnteredHiddenState", "LADXRecyclerView;", "onLeftHiddenState", "toString", "setIsRecyclable", "Z", "Ljava/lang/ref/WeakReference<Landroidx/recyclerview/widget/RecyclerView;>;", &ADXRecyclerView_ViewHolder_FULLUPDATE_PAYLOADS, "Ljava/util/List<Ljava/lang/Object;>;", "Landroidx/recyclerview/widget/RecyclerView$Adapter<+Landroidx/recyclerview/widget/RecyclerView$ViewHolder;>;" };
  static const J2ObjcClassInfo _ADXRecyclerView_ViewHolder = { "ViewHolder", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x409, 45, 34, 17, -1, -1, -1, -1 };
  return &_ADXRecyclerView_ViewHolder;
}

+ (void)initialize {
  if (self == [ADXRecyclerView_ViewHolder class]) {
    JreStrongAssign(&ADXRecyclerView_ViewHolder_FULLUPDATE_PAYLOADS, JavaUtilCollections_emptyList());
    J2OBJC_SET_INITIALIZED(ADXRecyclerView_ViewHolder)
  }
}

@end

void ADXRecyclerView_ViewHolder_initWithADView_(ADXRecyclerView_ViewHolder *self, ADView *itemView) {
  NSObject_init(self);
  self->mPosition_ = ADXRecyclerView_NO_POSITION;
  self->mOldPosition_ = ADXRecyclerView_NO_POSITION;
  self->mItemId_ = ADView_NO_ID;
  self->mItemViewType_ = ADXRecyclerView_INVALID_TYPE;
  self->mPreLayoutPosition_ = ADXRecyclerView_NO_POSITION;
  JreStrongAssign(&self->mShadowedHolder_, nil);
  JreStrongAssign(&self->mShadowingHolder_, nil);
  JreStrongAssign(&self->mPayloads_, nil);
  JreStrongAssign(&self->mUnmodifiedPayloads_, nil);
  self->mIsRecyclableCount_ = 0;
  JreStrongAssign(&self->mScrapContainer_, nil);
  self->mInChangeScrap_ = false;
  self->mWasImportantForAccessibilityBeforeHidden_ = ADXViewCompat_IMPORTANT_FOR_ACCESSIBILITY_AUTO;
  self->mPendingAccessibilityState_ = ADXRecyclerView_ViewHolder_PENDING_ACCESSIBILITY_STATE_NOT_SET;
  if (itemView == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"itemView may not be null");
  }
  JreStrongAssign(&self->itemView_, itemView);
}

jint ADXRecyclerView_ViewHolder_getLayoutPosition(ADXRecyclerView_ViewHolder *self) {
  return self->mPreLayoutPosition_ == ADXRecyclerView_NO_POSITION ? self->mPosition_ : self->mPreLayoutPosition_;
}

jint ADXRecyclerView_ViewHolder_getBindingAdapterPosition(ADXRecyclerView_ViewHolder *self) {
  if (self->mBindingAdapter_ == nil) {
    return ADXRecyclerView_NO_POSITION;
  }
  if (self->mOwnerRecyclerView_ == nil) {
    return ADXRecyclerView_NO_POSITION;
  }
  ADXRecyclerView_Adapter *rvAdapter = JreRetainedLocalValue([self->mOwnerRecyclerView_ getAdapter]);
  if (rvAdapter == nil) {
    return ADXRecyclerView_NO_POSITION;
  }
  jint globalPosition = [((ADXRecyclerView *) nil_chk(self->mOwnerRecyclerView_)) getAdapterPositionInRecyclerViewWithADXRecyclerView_ViewHolder:self];
  if (globalPosition == ADXRecyclerView_NO_POSITION) {
    return ADXRecyclerView_NO_POSITION;
  }
  return [rvAdapter findRelativeAdapterPositionInWithADXRecyclerView_Adapter:self->mBindingAdapter_ withADXRecyclerView_ViewHolder:self withInt:globalPosition];
}

jint ADXRecyclerView_ViewHolder_getAbsoluteAdapterPosition(ADXRecyclerView_ViewHolder *self) {
  if (self->mOwnerRecyclerView_ == nil) {
    return ADXRecyclerView_NO_POSITION;
  }
  return [self->mOwnerRecyclerView_ getAdapterPositionInRecyclerViewWithADXRecyclerView_ViewHolder:self];
}

jint ADXRecyclerView_ViewHolder_getOldPosition(ADXRecyclerView_ViewHolder *self) {
  return self->mOldPosition_;
}

jlong ADXRecyclerView_ViewHolder_getItemId(ADXRecyclerView_ViewHolder *self) {
  return self->mItemId_;
}

jint ADXRecyclerView_ViewHolder_getItemViewType(ADXRecyclerView_ViewHolder *self) {
  return self->mItemViewType_;
}

void ADXRecyclerView_ViewHolder_createPayloadsIfNeeded(ADXRecyclerView_ViewHolder *self) {
  if (self->mPayloads_ == nil) {
    JreStrongAssignAndConsume(&self->mPayloads_, new_JavaUtilArrayList_init());
    JreStrongAssign(&self->mUnmodifiedPayloads_, JavaUtilCollections_unmodifiableListWithJavaUtilList_(self->mPayloads_));
  }
}

void ADXRecyclerView_ViewHolder_setIsRecyclableWithBoolean_(ADXRecyclerView_ViewHolder *self, jboolean recyclable) {
  self->mIsRecyclableCount_ = recyclable ? self->mIsRecyclableCount_ - 1 : self->mIsRecyclableCount_ + 1;
  if (self->mIsRecyclableCount_ < 0) {
    self->mIsRecyclableCount_ = 0;
    ADLog_eWithNSString_withNSString_(ADView_VIEW_LOG_TAG, JreStrcat("$@", @"isRecyclable decremented below 0: unmatched pair of setIsRecyable() calls for ", self));
  }
  else if (!recyclable && self->mIsRecyclableCount_ == 1) {
    self->mFlags_ |= ADXRecyclerView_ViewHolder_FLAG_NOT_RECYCLABLE;
  }
  else if (recyclable && self->mIsRecyclableCount_ == 0) {
    self->mFlags_ &= ~ADXRecyclerView_ViewHolder_FLAG_NOT_RECYCLABLE;
  }
}

jboolean ADXRecyclerView_ViewHolder_isRecyclable(ADXRecyclerView_ViewHolder *self) {
  return (self->mFlags_ & ADXRecyclerView_ViewHolder_FLAG_NOT_RECYCLABLE) == 0 && !ADXViewCompat_hasTransientStateWithADView_(self->itemView_);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_ViewHolder)

@implementation ADXRecyclerView_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height {
  ADXRecyclerView_LayoutParams_initWithInt_withInt_(self, width, height);
  return self;
}

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)source {
  ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  return self;
}

- (instancetype)initWithADXRecyclerView_LayoutParams:(ADXRecyclerView_LayoutParams *)source {
  ADXRecyclerView_LayoutParams_initWithADXRecyclerView_LayoutParams_(self, source);
  return self;
}

- (jboolean)isViewInvalid {
  return [((ADXRecyclerView_ViewHolder *) nil_chk(mViewHolder_)) isInvalid];
}

- (jboolean)isItemRemoved {
  return [((ADXRecyclerView_ViewHolder *) nil_chk(mViewHolder_)) isRemoved];
}

- (jboolean)isItemChanged {
  return [((ADXRecyclerView_ViewHolder *) nil_chk(mViewHolder_)) isUpdated];
}

- (jint)getViewLayoutPosition {
  return ADXRecyclerView_ViewHolder_getLayoutPosition(nil_chk(mViewHolder_));
}

- (void)dealloc {
  RELEASE_(mViewHolder_);
  RELEASE_(mDecorInsets_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[2].selector = @selector(initWithADXRecyclerView_LayoutParams:);
  methods[3].selector = @selector(isViewInvalid);
  methods[4].selector = @selector(isItemRemoved);
  methods[5].selector = @selector(isItemChanged);
  methods[6].selector = @selector(getViewLayoutPosition);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mViewHolder_", "LADXRecyclerView_ViewHolder;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDecorInsets_", "LADRect;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mInsetsDirty_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPendingInvalidate_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "LADViewGroup_LayoutParams;", "LADXRecyclerView_LayoutParams;", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_LayoutParams = { "LayoutParams", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 7, 4, 3, -1, -1, -1, -1 };
  return &_ADXRecyclerView_LayoutParams;
}

@end

void ADXRecyclerView_LayoutParams_initWithInt_withInt_(ADXRecyclerView_LayoutParams *self, jint width, jint height) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  JreStrongAssignAndConsume(&self->mDecorInsets_, new_ADRect_init());
  self->mInsetsDirty_ = true;
  self->mPendingInvalidate_ = false;
}

ADXRecyclerView_LayoutParams *new_ADXRecyclerView_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_LayoutParams, initWithInt_withInt_, width, height)
}

ADXRecyclerView_LayoutParams *create_ADXRecyclerView_LayoutParams_initWithInt_withInt_(jint width, jint height) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_LayoutParams, initWithInt_withInt_, width, height)
}

void ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(ADXRecyclerView_LayoutParams *self, ADViewGroup_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  JreStrongAssignAndConsume(&self->mDecorInsets_, new_ADRect_init());
  self->mInsetsDirty_ = true;
  self->mPendingInvalidate_ = false;
}

ADXRecyclerView_LayoutParams *new_ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

ADXRecyclerView_LayoutParams *create_ADXRecyclerView_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_LayoutParams, initWithADViewGroup_LayoutParams_, source)
}

void ADXRecyclerView_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *self, ADXRecyclerView_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, source);
  JreStrongAssignAndConsume(&self->mDecorInsets_, new_ADRect_init());
  self->mInsetsDirty_ = true;
  self->mPendingInvalidate_ = false;
}

ADXRecyclerView_LayoutParams *new_ADXRecyclerView_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_LayoutParams, initWithADXRecyclerView_LayoutParams_, source)
}

ADXRecyclerView_LayoutParams *create_ADXRecyclerView_LayoutParams_initWithADXRecyclerView_LayoutParams_(ADXRecyclerView_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_LayoutParams, initWithADXRecyclerView_LayoutParams_, source)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_LayoutParams)

@implementation ADXRecyclerView_Observable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_Observable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)unregisterObserverWithId:(id)observer {
  [((JavaUtilArrayList *) nil_chk(mObservers_)) removeWithId:observer];
}

- (void)registerObserverWithId:(id)observer {
  [((JavaUtilArrayList *) nil_chk(mObservers_)) addWithId:observer];
}

- (void)dealloc {
  RELEASE_(mObservers_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unregisterObserverWithId:);
  methods[2].selector = @selector(registerObserverWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mObservers_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x14, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "unregisterObserver", "LNSObject;", "(TT;)V", "registerObserver", "Ljava/util/ArrayList<TT;>;", "LADXRecyclerView;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXRecyclerView_Observable = { "Observable", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 3, 1, 5, -1, -1, 6, -1 };
  return &_ADXRecyclerView_Observable;
}

@end

void ADXRecyclerView_Observable_init(ADXRecyclerView_Observable *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->mObservers_, new_JavaUtilArrayList_init());
}

ADXRecyclerView_Observable *new_ADXRecyclerView_Observable_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_Observable, init)
}

ADXRecyclerView_Observable *create_ADXRecyclerView_Observable_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_Observable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_Observable)

@implementation ADXRecyclerView_AdapterDataObservable

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_AdapterDataObservable_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jboolean)hasObservers {
  return ![((JavaUtilArrayList *) nil_chk(mObservers_)) isEmpty];
}

- (void)notifyChanged {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
    [((ADXRecyclerView_AdapterDataObserver *) nil_chk([mObservers_ getWithInt:i])) onChanged];
  }
}

- (void)notifyStateRestorationPolicyChanged {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
    [((ADXRecyclerView_AdapterDataObserver *) nil_chk([mObservers_ getWithInt:i])) onStateRestorationPolicyChanged];
  }
}

- (void)notifyItemRangeChangedWithInt:(jint)positionStart
                              withInt:(jint)itemCount {
  [self notifyItemRangeChangedWithInt:positionStart withInt:itemCount withId:nil];
}

- (void)notifyItemRangeChangedWithInt:(jint)positionStart
                              withInt:(jint)itemCount
                               withId:(id)payload {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
    [((ADXRecyclerView_AdapterDataObserver *) nil_chk([mObservers_ getWithInt:i])) onItemRangeChangedWithInt:positionStart withInt:itemCount withId:payload];
  }
}

- (void)notifyItemRangeInsertedWithInt:(jint)positionStart
                               withInt:(jint)itemCount {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
    [((ADXRecyclerView_AdapterDataObserver *) nil_chk([mObservers_ getWithInt:i])) onItemRangeInsertedWithInt:positionStart withInt:itemCount];
  }
}

- (void)notifyItemRangeRemovedWithInt:(jint)positionStart
                              withInt:(jint)itemCount {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
    [((ADXRecyclerView_AdapterDataObserver *) nil_chk([mObservers_ getWithInt:i])) onItemRangeRemovedWithInt:positionStart withInt:itemCount];
  }
}

- (void)notifyItemMovedWithInt:(jint)fromPosition
                       withInt:(jint)toPosition {
  for (jint i = [((JavaUtilArrayList *) nil_chk(mObservers_)) size] - 1; i >= 0; i--) {
    [((ADXRecyclerView_AdapterDataObserver *) nil_chk([mObservers_ getWithInt:i])) onItemRangeMovedWithInt:fromPosition withInt:toPosition withInt:1];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(hasObservers);
  methods[2].selector = @selector(notifyChanged);
  methods[3].selector = @selector(notifyStateRestorationPolicyChanged);
  methods[4].selector = @selector(notifyItemRangeChangedWithInt:withInt:);
  methods[5].selector = @selector(notifyItemRangeChangedWithInt:withInt:withId:);
  methods[6].selector = @selector(notifyItemRangeInsertedWithInt:withInt:);
  methods[7].selector = @selector(notifyItemRangeRemovedWithInt:withInt:);
  methods[8].selector = @selector(notifyItemMovedWithInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "notifyItemRangeChanged", "II", "IILNSObject;", "notifyItemRangeInserted", "notifyItemRangeRemoved", "notifyItemMoved", "LADXRecyclerView;", "Landroidx/recyclerview/widget/RecyclerView$Observable<Landroidx/recyclerview/widget/RecyclerView$AdapterDataObserver;>;" };
  static const J2ObjcClassInfo _ADXRecyclerView_AdapterDataObservable = { "AdapterDataObservable", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x8, 9, 0, 6, -1, -1, 7, -1 };
  return &_ADXRecyclerView_AdapterDataObservable;
}

@end

void ADXRecyclerView_AdapterDataObservable_init(ADXRecyclerView_AdapterDataObservable *self) {
  ADXRecyclerView_Observable_init(self);
}

ADXRecyclerView_AdapterDataObservable *new_ADXRecyclerView_AdapterDataObservable_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_AdapterDataObservable, init)
}

ADXRecyclerView_AdapterDataObservable *create_ADXRecyclerView_AdapterDataObservable_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_AdapterDataObservable, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_AdapterDataObservable)

@implementation ADXRecyclerView_State

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_State_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)assertLayoutStepWithInt:(jint)accepted {
  if ((accepted & mLayoutStep_) == 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$$$$", @"Layout state should be one of ", JavaLangInteger_toBinaryStringWithInt_(accepted), @" but it is ", JavaLangInteger_toBinaryStringWithInt_(mLayoutStep_)));
  }
}

- (void)prepareForNestedPrefetchWithADXRecyclerView_Adapter:(ADXRecyclerView_Adapter *)adapter {
  mLayoutStep_ = ADXRecyclerView_State_STEP_START;
  mItemCount_ = [((ADXRecyclerView_Adapter *) nil_chk(adapter)) getItemCount];
  mInPreLayout_ = false;
  mTrackOldChangeHolders_ = false;
  mIsMeasuring_ = false;
}

- (jboolean)isMeasuring {
  return mIsMeasuring_;
}

- (jboolean)isPreLayout {
  return mInPreLayout_;
}

- (jboolean)willRunPredictiveAnimations {
  return mRunPredictiveAnimations_;
}

- (jboolean)willRunSimpleAnimations {
  return mRunSimpleAnimations_;
}

- (void)removeWithInt:(jint)resourceId {
  if (mData_ == nil) {
    return;
  }
  [mData_ removeWithInt:resourceId];
}

- (id)getWithInt:(jint)resourceId {
  if (mData_ == nil) {
    return nil;
  }
  return [mData_ getWithInt:resourceId];
}

- (void)putWithInt:(jint)resourceId
            withId:(id)data {
  if (mData_ == nil) {
    JreStrongAssignAndConsume(&mData_, new_ADSparseArray_init());
  }
  [mData_ putWithInt:resourceId withId:data];
}

- (jint)getTargetScrollPosition {
  return mTargetPosition_;
}

- (jboolean)hasTargetScrollPosition {
  return mTargetPosition_ != ADXRecyclerView_NO_POSITION;
}

- (jboolean)didStructureChange {
  return mStructureChanged_;
}

- (jint)getItemCount {
  return mInPreLayout_ ? (mPreviousLayoutItemCount_ - mDeletedInvisibleItemCountSincePreviousLayout_) : mItemCount_;
}

- (jint)getRemainingScrollHorizontal {
  return mRemainingScrollHorizontal_;
}

- (jint)getRemainingScrollVertical {
  return mRemainingScrollVertical_;
}

- (NSString *)description {
  return JreStrcat("$I$@$I$Z$I$I$Z$Z$Z$ZC", @"State{mTargetPosition=", mTargetPosition_, @", mData=", mData_, @", mItemCount=", mItemCount_, @", mIsMeasuring=", mIsMeasuring_, @", mPreviousLayoutItemCount=", mPreviousLayoutItemCount_, @", mDeletedInvisibleItemCountSincePreviousLayout=", mDeletedInvisibleItemCountSincePreviousLayout_, @", mStructureChanged=", mStructureChanged_, @", mInPreLayout=", mInPreLayout_, @", mRunSimpleAnimations=", mRunSimpleAnimations_, @", mRunPredictiveAnimations=", mRunPredictiveAnimations_, '}');
}

- (void)dealloc {
  RELEASE_(mData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 1, -1, 6, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 9, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(assertLayoutStepWithInt:);
  methods[2].selector = @selector(prepareForNestedPrefetchWithADXRecyclerView_Adapter:);
  methods[3].selector = @selector(isMeasuring);
  methods[4].selector = @selector(isPreLayout);
  methods[5].selector = @selector(willRunPredictiveAnimations);
  methods[6].selector = @selector(willRunSimpleAnimations);
  methods[7].selector = @selector(removeWithInt:);
  methods[8].selector = @selector(getWithInt:);
  methods[9].selector = @selector(putWithInt:withId:);
  methods[10].selector = @selector(getTargetScrollPosition);
  methods[11].selector = @selector(hasTargetScrollPosition);
  methods[12].selector = @selector(didStructureChange);
  methods[13].selector = @selector(getItemCount);
  methods[14].selector = @selector(getRemainingScrollHorizontal);
  methods[15].selector = @selector(getRemainingScrollVertical);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "STEP_START", "I", .constantValue.asInt = ADXRecyclerView_State_STEP_START, 0x18, -1, -1, -1, -1 },
    { "STEP_LAYOUT", "I", .constantValue.asInt = ADXRecyclerView_State_STEP_LAYOUT, 0x18, -1, -1, -1, -1 },
    { "STEP_ANIMATIONS", "I", .constantValue.asInt = ADXRecyclerView_State_STEP_ANIMATIONS, 0x18, -1, -1, -1, -1 },
    { "mTargetPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mData_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 10, -1 },
    { "mPreviousLayoutItemCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDeletedInvisibleItemCountSincePreviousLayout_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutStep_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mItemCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mStructureChanged_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mInPreLayout_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTrackOldChangeHolders_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mIsMeasuring_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRunSimpleAnimations_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRunPredictiveAnimations_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFocusedItemPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFocusedSubChildId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRemainingScrollHorizontal_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRemainingScrollVertical_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "assertLayoutStep", "I", "prepareForNestedPrefetch", "LADXRecyclerView_Adapter;", "remove", "get", "<T:Ljava/lang/Object;>(I)TT;", "put", "ILNSObject;", "toString", "Lr/android/util/SparseArray<Ljava/lang/Object;>;", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_State = { "State", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 17, 19, 11, -1, -1, -1, -1 };
  return &_ADXRecyclerView_State;
}

@end

void ADXRecyclerView_State_init(ADXRecyclerView_State *self) {
  NSObject_init(self);
  self->mTargetPosition_ = ADXRecyclerView_NO_POSITION;
  self->mPreviousLayoutItemCount_ = 0;
  self->mDeletedInvisibleItemCountSincePreviousLayout_ = 0;
  self->mLayoutStep_ = ADXRecyclerView_State_STEP_START;
  self->mItemCount_ = 0;
  self->mStructureChanged_ = false;
  self->mInPreLayout_ = false;
  self->mTrackOldChangeHolders_ = false;
  self->mIsMeasuring_ = false;
  self->mRunSimpleAnimations_ = false;
  self->mRunPredictiveAnimations_ = false;
}

ADXRecyclerView_State *new_ADXRecyclerView_State_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_State, init)
}

ADXRecyclerView_State *create_ADXRecyclerView_State_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_State, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_State)

@implementation ADXRecyclerView_ItemAnimator

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_ItemAnimator_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jlong)getMoveDuration {
  return mMoveDuration_;
}

- (void)setMoveDurationWithLong:(jlong)moveDuration {
  mMoveDuration_ = moveDuration;
}

- (jlong)getAddDuration {
  return mAddDuration_;
}

- (void)setAddDurationWithLong:(jlong)addDuration {
  mAddDuration_ = addDuration;
}

- (jlong)getRemoveDuration {
  return mRemoveDuration_;
}

- (void)setRemoveDurationWithLong:(jlong)removeDuration {
  mRemoveDuration_ = removeDuration;
}

- (jlong)getChangeDuration {
  return mChangeDuration_;
}

- (void)setChangeDurationWithLong:(jlong)changeDuration {
  mChangeDuration_ = changeDuration;
}

- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)recordPreLayoutInformationWithADXRecyclerView_State:(ADXRecyclerView_State *)state
                                                                      withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
                                                                                             withInt:(jint)changeFlags
                                                                                    withJavaUtilList:(id<JavaUtilList>)payloads {
  return [((ADXRecyclerView_ItemAnimator_ItemHolderInfo *) nil_chk([self obtainHolderInfo])) setFromWithADXRecyclerView_ViewHolder:viewHolder];
}

- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)recordPostLayoutInformationWithADXRecyclerView_State:(ADXRecyclerView_State *)state
                                                                       withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  return [((ADXRecyclerView_ItemAnimator_ItemHolderInfo *) nil_chk([self obtainHolderInfo])) setFromWithADXRecyclerView_ViewHolder:viewHolder];
}

- (jboolean)animateDisappearanceWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
               withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preLayoutInfo
               withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postLayoutInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)animateAppearanceWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
            withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preLayoutInfo
            withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postLayoutInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)animatePersistenceWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
             withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preLayoutInfo
             withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postLayoutInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jboolean)animateChangeWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)oldHolder
                         withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)newHolder
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preLayoutInfo
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postLayoutInfo {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (jint)buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  return ADXRecyclerView_ItemAnimator_buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder_(viewHolder);
}

- (void)runPendingAnimations {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)endAnimationWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)item {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)endAnimations {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)onAnimationFinishedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
}

- (void)onAnimationStartedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
}

- (jboolean)canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder {
  return true;
}

- (jboolean)canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
                                                   withJavaUtilList:(id<JavaUtilList>)payloads {
  return [self canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:viewHolder];
}

- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)obtainHolderInfo {
  return create_ADXRecyclerView_ItemAnimator_ItemHolderInfo_init();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ItemAnimator_ItemHolderInfo;", 0x1, 5, 6, -1, 7, -1, -1 },
    { NULL, "LADXRecyclerView_ItemAnimator_ItemHolderInfo;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 10, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 12, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 13, 11, -1, -1, -1, -1 },
    { NULL, "Z", 0x401, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 18, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 22, -1, 23, -1, -1 },
    { NULL, "LADXRecyclerView_ItemAnimator_ItemHolderInfo;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMoveDuration);
  methods[2].selector = @selector(setMoveDurationWithLong:);
  methods[3].selector = @selector(getAddDuration);
  methods[4].selector = @selector(setAddDurationWithLong:);
  methods[5].selector = @selector(getRemoveDuration);
  methods[6].selector = @selector(setRemoveDurationWithLong:);
  methods[7].selector = @selector(getChangeDuration);
  methods[8].selector = @selector(setChangeDurationWithLong:);
  methods[9].selector = @selector(recordPreLayoutInformationWithADXRecyclerView_State:withADXRecyclerView_ViewHolder:withInt:withJavaUtilList:);
  methods[10].selector = @selector(recordPostLayoutInformationWithADXRecyclerView_State:withADXRecyclerView_ViewHolder:);
  methods[11].selector = @selector(animateDisappearanceWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[12].selector = @selector(animateAppearanceWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[13].selector = @selector(animatePersistenceWithADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[14].selector = @selector(animateChangeWithADXRecyclerView_ViewHolder:withADXRecyclerView_ViewHolder:withADXRecyclerView_ItemAnimator_ItemHolderInfo:withADXRecyclerView_ItemAnimator_ItemHolderInfo:);
  methods[15].selector = @selector(buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder:);
  methods[16].selector = @selector(runPendingAnimations);
  methods[17].selector = @selector(endAnimationWithADXRecyclerView_ViewHolder:);
  methods[18].selector = @selector(endAnimations);
  methods[19].selector = @selector(onAnimationFinishedWithADXRecyclerView_ViewHolder:);
  methods[20].selector = @selector(onAnimationStartedWithADXRecyclerView_ViewHolder:);
  methods[21].selector = @selector(canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:);
  methods[22].selector = @selector(canReuseUpdatedViewHolderWithADXRecyclerView_ViewHolder:withJavaUtilList:);
  methods[23].selector = @selector(obtainHolderInfo);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FLAG_CHANGED", "I", .constantValue.asInt = ADXRecyclerView_ItemAnimator_FLAG_CHANGED, 0x19, -1, -1, -1, -1 },
    { "FLAG_REMOVED", "I", .constantValue.asInt = ADXRecyclerView_ItemAnimator_FLAG_REMOVED, 0x19, -1, -1, -1, -1 },
    { "FLAG_INVALIDATED", "I", .constantValue.asInt = ADXRecyclerView_ItemAnimator_FLAG_INVALIDATED, 0x19, -1, -1, -1, -1 },
    { "FLAG_MOVED", "I", .constantValue.asInt = ADXRecyclerView_ItemAnimator_FLAG_MOVED, 0x19, -1, -1, -1, -1 },
    { "FLAG_APPEARED_IN_PRE_LAYOUT", "I", .constantValue.asInt = ADXRecyclerView_ItemAnimator_FLAG_APPEARED_IN_PRE_LAYOUT, 0x19, -1, -1, -1, -1 },
    { "mAddDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRemoveDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMoveDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mChangeDuration_", "J", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMoveDuration", "J", "setAddDuration", "setRemoveDuration", "setChangeDuration", "recordPreLayoutInformation", "LADXRecyclerView_State;LADXRecyclerView_ViewHolder;ILJavaUtilList;", "(Landroidx/recyclerview/widget/RecyclerView$State;Landroidx/recyclerview/widget/RecyclerView$ViewHolder;ILjava/util/List<Ljava/lang/Object;>;)Landroidx/recyclerview/widget/RecyclerView$ItemAnimator$ItemHolderInfo;", "recordPostLayoutInformation", "LADXRecyclerView_State;LADXRecyclerView_ViewHolder;", "animateDisappearance", "LADXRecyclerView_ViewHolder;LADXRecyclerView_ItemAnimator_ItemHolderInfo;LADXRecyclerView_ItemAnimator_ItemHolderInfo;", "animateAppearance", "animatePersistence", "animateChange", "LADXRecyclerView_ViewHolder;LADXRecyclerView_ViewHolder;LADXRecyclerView_ItemAnimator_ItemHolderInfo;LADXRecyclerView_ItemAnimator_ItemHolderInfo;", "buildAdapterChangeFlagsForAnimations", "LADXRecyclerView_ViewHolder;", "endAnimation", "onAnimationFinished", "onAnimationStarted", "canReuseUpdatedViewHolder", "LADXRecyclerView_ViewHolder;LJavaUtilList;", "(Landroidx/recyclerview/widget/RecyclerView$ViewHolder;Ljava/util/List<Ljava/lang/Object;>;)Z", "LADXRecyclerView;", "LADXRecyclerView_ItemAnimator_ItemHolderInfo;" };
  static const J2ObjcClassInfo _ADXRecyclerView_ItemAnimator = { "ItemAnimator", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x409, 24, 9, 24, 25, -1, -1, -1 };
  return &_ADXRecyclerView_ItemAnimator;
}

@end

void ADXRecyclerView_ItemAnimator_init(ADXRecyclerView_ItemAnimator *self) {
  NSObject_init(self);
  self->mAddDuration_ = 120;
  self->mRemoveDuration_ = 120;
  self->mMoveDuration_ = 250;
  self->mChangeDuration_ = 250;
}

jint ADXRecyclerView_ItemAnimator_buildAdapterChangeFlagsForAnimationsWithADXRecyclerView_ViewHolder_(ADXRecyclerView_ViewHolder *viewHolder) {
  ADXRecyclerView_ItemAnimator_initialize();
  jint flags = ((ADXRecyclerView_ViewHolder *) nil_chk(viewHolder))->mFlags_ & (ADXRecyclerView_ItemAnimator_FLAG_INVALIDATED | ADXRecyclerView_ItemAnimator_FLAG_REMOVED | ADXRecyclerView_ItemAnimator_FLAG_CHANGED);
  if ([viewHolder isInvalid]) {
    return ADXRecyclerView_ItemAnimator_FLAG_INVALIDATED;
  }
  if ((flags & ADXRecyclerView_ItemAnimator_FLAG_INVALIDATED) == 0) {
    jint oldPos = ADXRecyclerView_ViewHolder_getOldPosition(viewHolder);
    jint pos = ADXRecyclerView_ViewHolder_getAbsoluteAdapterPosition(viewHolder);
    if (oldPos != ADXRecyclerView_NO_POSITION && pos != ADXRecyclerView_NO_POSITION && oldPos != pos) {
      flags |= ADXRecyclerView_ItemAnimator_FLAG_MOVED;
    }
  }
  return flags;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_ItemAnimator)

@implementation ADXRecyclerView_ItemAnimator_ItemHolderInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_ItemAnimator_ItemHolderInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)setFromWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder {
  return [self setFromWithADXRecyclerView_ViewHolder:holder withInt:0];
}

- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)setFromWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                                                                               withInt:(jint)flags {
  ADView *view = ((ADXRecyclerView_ViewHolder *) nil_chk(holder))->itemView_;
  self->left_ = [((ADView *) nil_chk(view)) getLeft];
  self->top_ = [view getTop];
  self->right_ = [view getRight];
  self->bottom_ = [view getBottom];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ItemAnimator_ItemHolderInfo;", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ItemAnimator_ItemHolderInfo;", 0x1, 0, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setFromWithADXRecyclerView_ViewHolder:);
  methods[2].selector = @selector(setFromWithADXRecyclerView_ViewHolder:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "left_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "top_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "right_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bottom_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "changeFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setFrom", "LADXRecyclerView_ViewHolder;", "LADXRecyclerView_ViewHolder;I", "LADXRecyclerView_ItemAnimator;" };
  static const J2ObjcClassInfo _ADXRecyclerView_ItemAnimator_ItemHolderInfo = { "ItemHolderInfo", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 3, 5, 3, -1, -1, -1, -1 };
  return &_ADXRecyclerView_ItemAnimator_ItemHolderInfo;
}

@end

void ADXRecyclerView_ItemAnimator_ItemHolderInfo_init(ADXRecyclerView_ItemAnimator_ItemHolderInfo *self) {
  NSObject_init(self);
}

ADXRecyclerView_ItemAnimator_ItemHolderInfo *new_ADXRecyclerView_ItemAnimator_ItemHolderInfo_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_ItemAnimator_ItemHolderInfo, init)
}

ADXRecyclerView_ItemAnimator_ItemHolderInfo *create_ADXRecyclerView_ItemAnimator_ItemHolderInfo_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_ItemAnimator_ItemHolderInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_ItemAnimator_ItemHolderInfo)

@implementation ADXRecyclerView_SavedState

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_SavedState_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mLayoutState_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mLayoutState_", "LADParcelable;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_SavedState = { "SavedState", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x9, 1, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_SavedState;
}

@end

void ADXRecyclerView_SavedState_init(ADXRecyclerView_SavedState *self) {
  NSObject_init(self);
}

ADXRecyclerView_SavedState *new_ADXRecyclerView_SavedState_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_SavedState, init)
}

ADXRecyclerView_SavedState *create_ADXRecyclerView_SavedState_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_SavedState, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_SavedState)

@implementation ADXRecyclerView_MotionEventCompat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_MotionEventCompat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isFromSourceWithADView_MotionEvent:(ADView_MotionEvent *)ev
                                       withInt:(jint)source {
  return ADXRecyclerView_MotionEventCompat_isFromSourceWithADView_MotionEvent_withInt_(ev, source);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isFromSourceWithADView_MotionEvent:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "isFromSource", "LADView_MotionEvent;I", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_MotionEventCompat = { "MotionEventCompat", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADXRecyclerView_MotionEventCompat;
}

@end

void ADXRecyclerView_MotionEventCompat_init(ADXRecyclerView_MotionEventCompat *self) {
  NSObject_init(self);
}

ADXRecyclerView_MotionEventCompat *new_ADXRecyclerView_MotionEventCompat_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_MotionEventCompat, init)
}

ADXRecyclerView_MotionEventCompat *create_ADXRecyclerView_MotionEventCompat_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_MotionEventCompat, init)
}

jboolean ADXRecyclerView_MotionEventCompat_isFromSourceWithADView_MotionEvent_withInt_(ADView_MotionEvent *ev, jint source) {
  ADXRecyclerView_MotionEventCompat_initialize();
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_MotionEventCompat)

@implementation ADXRecyclerView_InputDevice

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXRecyclerView_InputDevice_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SOURCE_MOUSE", "I", .constantValue.asInt = ADXRecyclerView_InputDevice_SOURCE_MOUSE, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_InputDevice = { "InputDevice", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 1, 1, 0, -1, -1, -1, -1 };
  return &_ADXRecyclerView_InputDevice;
}

@end

void ADXRecyclerView_InputDevice_init(ADXRecyclerView_InputDevice *self) {
  NSObject_init(self);
}

ADXRecyclerView_InputDevice *new_ADXRecyclerView_InputDevice_init() {
  J2OBJC_NEW_IMPL(ADXRecyclerView_InputDevice, init)
}

ADXRecyclerView_InputDevice *create_ADXRecyclerView_InputDevice_init() {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_InputDevice, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_InputDevice)

@implementation ADXRecyclerView_NestedScrollingChildHelper

- (instancetype)initWithADView:(ADView *)view {
  ADXRecyclerView_NestedScrollingChildHelper_initWithADView_(self, view);
  return self;
}

- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow {
  return false;
}

- (void)dispatchNestedScrollWithInt:(jint)dxConsumed
                            withInt:(jint)dyConsumed
                            withInt:(jint)dxUnconsumed
                            withInt:(jint)dyUnconsumed
                       withIntArray:(IOSIntArray *)offsetInWindow
                            withInt:(jint)type
                       withIntArray:(IOSIntArray *)consumed {
}

- (jboolean)dispatchNestedScrollWithInt:(jint)dxConsumed
                                withInt:(jint)dyConsumed
                                withInt:(jint)dxUnconsumed
                                withInt:(jint)dyUnconsumed
                           withIntArray:(IOSIntArray *)offsetInWindow
                                withInt:(jint)type {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:);
  methods[2].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:withInt:withIntArray:);
  methods[3].selector = @selector(dispatchNestedScrollWithInt:withInt:withInt:withInt:withIntArray:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADView;", "dispatchNestedScroll", "IIII[I", "IIII[II[I", "IIII[II", "LADXRecyclerView;" };
  static const J2ObjcClassInfo _ADXRecyclerView_NestedScrollingChildHelper = { "NestedScrollingChildHelper", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x8, 4, 0, 5, -1, -1, -1, -1 };
  return &_ADXRecyclerView_NestedScrollingChildHelper;
}

@end

void ADXRecyclerView_NestedScrollingChildHelper_initWithADView_(ADXRecyclerView_NestedScrollingChildHelper *self, ADView *view) {
  NSObject_init(self);
}

ADXRecyclerView_NestedScrollingChildHelper *new_ADXRecyclerView_NestedScrollingChildHelper_initWithADView_(ADView *view) {
  J2OBJC_NEW_IMPL(ADXRecyclerView_NestedScrollingChildHelper, initWithADView_, view)
}

ADXRecyclerView_NestedScrollingChildHelper *create_ADXRecyclerView_NestedScrollingChildHelper_initWithADView_(ADView *view) {
  J2OBJC_CREATE_IMPL(ADXRecyclerView_NestedScrollingChildHelper, initWithADView_, view)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRecyclerView_NestedScrollingChildHelper)
