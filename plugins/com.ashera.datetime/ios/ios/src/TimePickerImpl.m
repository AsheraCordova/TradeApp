//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSDateTimePlugin\src\main\java\com\ashera\datetime\TimePickerImpl.java
//

#include "BaseHasWidgets.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Editable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FormElement.h"
#include "FrameLayout.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "TextWatcher.h"
#include "TimePicker.h"
#include "TimePickerImpl.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DateFormat.h"
#include "java/text/SimpleDateFormat.h"
#include "java/util/Calendar.h"
#include "java/util/Date.h"
#include "java/util/GregorianCalendar.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"
#include "HasLifeCycleDecorators.h"

@class JavaTextDateFormat;
@protocol JavaLangCharSequence;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASTimePickerImpl () {
 @public
  id uiView_;
  ASTimePicker *timePicker_;
  jint hour_;
  jint minute_;
  JavaTextDateFormat *timeFormat_;
  ASBaseHasWidgets *datePickerWidget_;
  id<ASIWidget> editText_;
  ASTimePickerImpl_TimePickerCommandBuilder *builder_;
  ASTimePickerImpl_TimePickerBean *bean_;
  ASTimePickerImpl_TimePickerCommandParamsBuilder *paramsBuilder_;
  ASTimePickerImpl_TimePickerParamsBean *paramsBean_;
  id datepicker_;
}

- (void)setWidgetOnNativeClass;

- (void)createLayoutParamsWithADView:(ADView *)view;

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view;

- (void)setHintWithASWidgetAttribute:(ASWidgetAttribute *)key
                        withNSString:(NSString *)strValue
                              withId:(id)objValue
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (id)getHintWithASWidgetAttribute:(ASWidgetAttribute *)key
         withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setMyTextWithASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue
             withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (id)getMyTextWithASWidgetAttribute:(ASWidgetAttribute *)key
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setOnAfterTextChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                     withNSString:(NSString *)strValue
                                           withId:(id)objValue
                        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setBeforeOnTextChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                      withNSString:(NSString *)strValue
                                            withId:(id)objValue
                         withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setOnTextChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                withNSString:(NSString *)strValue
                                      withId:(id)objValue
                   withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)showClearButtonWithId:(id)objValue;

- (void)setTimeFormatWithId:(id)objValue;

- (void)setNow;

- (void)setTimeWithInt:(jint)hour
               withInt:(jint)minute;

- (void)setTimeFormatWithJavaTextDateFormat:(JavaTextDateFormat *)timeFormat;

- (void)updateText;

- (void)setHintTextFormatWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setOnClickListenerWithASIWidget:(id<ASIWidget>)clearButton
             withADView_OnClickListener:(id<ADView_OnClickListener>)onClickListener;

- (void)setErrorWithNSString:(NSString *)message;

@end

J2OBJC_FIELD_SETTER(ASTimePickerImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, timePicker_, ASTimePicker *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, timeFormat_, JavaTextDateFormat *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, datePickerWidget_, ASBaseHasWidgets *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, editText_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, builder_, ASTimePickerImpl_TimePickerCommandBuilder *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, bean_, ASTimePickerImpl_TimePickerBean *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, paramsBuilder_, ASTimePickerImpl_TimePickerCommandParamsBuilder *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, paramsBean_, ASTimePickerImpl_TimePickerParamsBean *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl, datepicker_, id)

inline NSString *ASTimePickerImpl_get_DISPLAY_FORMAT(void);
static NSString *ASTimePickerImpl_DISPLAY_FORMAT = @"HH:mm";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASTimePickerImpl, DISPLAY_FORMAT, NSString *)

__attribute__((unused)) static void ASTimePickerImpl_setWidgetOnNativeClass(ASTimePickerImpl *self);

__attribute__((unused)) static void ASTimePickerImpl_createLayoutParamsWithADView_(ASTimePickerImpl *self, ADView *view);

__attribute__((unused)) static ADFrameLayout_LayoutParams *ASTimePickerImpl_getLayoutParamsWithADView_(ASTimePickerImpl *self, ADView *view);

__attribute__((unused)) static void ASTimePickerImpl_setHintWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static id ASTimePickerImpl_getHintWithASWidgetAttribute_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTimePickerImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTimePickerImpl_setMyTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static id ASTimePickerImpl_getMyTextWithASWidgetAttribute_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTimePickerImpl_setOnAfterTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTimePickerImpl_setBeforeOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTimePickerImpl_setOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASTimePickerImpl_showClearButtonWithId_(ASTimePickerImpl *self, id objValue);

__attribute__((unused)) static void ASTimePickerImpl_setTimeFormatWithId_(ASTimePickerImpl *self, id objValue);

__attribute__((unused)) static void ASTimePickerImpl_setNow(ASTimePickerImpl *self);

__attribute__((unused)) static void ASTimePickerImpl_setTimeWithInt_withInt_(ASTimePickerImpl *self, jint hour, jint minute);

__attribute__((unused)) static void ASTimePickerImpl_setTimeFormatWithJavaTextDateFormat_(ASTimePickerImpl *self, JavaTextDateFormat *timeFormat);

__attribute__((unused)) static void ASTimePickerImpl_updateText(ASTimePickerImpl *self);

__attribute__((unused)) static void ASTimePickerImpl_setHintTextFormatWithId_(ASTimePickerImpl *self, id objValue);

__attribute__((unused)) static void ASTimePickerImpl_nativeCreateWithJavaUtilMap_(ASTimePickerImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASTimePickerImpl_setOnClickListenerWithASIWidget_withADView_OnClickListener_(ASTimePickerImpl *self, id<ASIWidget> clearButton, id<ADView_OnClickListener> onClickListener);

__attribute__((unused)) static void ASTimePickerImpl_setErrorWithNSString_(ASTimePickerImpl *self, NSString *message);

@interface ASTimePickerImpl_TimePickerExt () {
 @public
  __unsafe_unretained ASTimePickerImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASTimePickerImpl_TimePickerExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl_TimePickerExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASTimePickerImpl_1 : NSObject < ADView_OnClickListener > {
 @public
  ASTimePickerImpl *this$0_;
}

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTimePickerImpl_1)

__attribute__((unused)) static void ASTimePickerImpl_1_initWithASTimePickerImpl_(ASTimePickerImpl_1 *self, ASTimePickerImpl *outer$);

__attribute__((unused)) static ASTimePickerImpl_1 *new_ASTimePickerImpl_1_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTimePickerImpl_1 *create_ASTimePickerImpl_1_initWithASTimePickerImpl_(ASTimePickerImpl *outer$);

@interface ASTimePickerImpl_TextChangedListener : NSObject < ADTextWatcher, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s;

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after;

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count;

- (id<JavaUtilMap>)getOnTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                           withInt:(jint)start
                                                           withInt:(jint)before
                                                           withInt:(jint)count;

- (id<JavaUtilMap>)getOnbeforeTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                                 withInt:(jint)start
                                                                 withInt:(jint)count
                                                                 withInt:(jint)after;

- (id<JavaUtilMap>)getOnafterTextChangeEventObjWithADEditable:(id<ADEditable>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ASTimePickerImpl_TextChangedListener)

J2OBJC_FIELD_SETTER(ASTimePickerImpl_TextChangedListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASTimePickerImpl_TextChangedListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl_TextChangedListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASTimePickerImpl_TextChangedListener, action_, NSString *)

__attribute__((unused)) static void ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(ASTimePickerImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASTimePickerImpl_TextChangedListener *new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTimePickerImpl_TextChangedListener *create_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(ASTimePickerImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASTimePickerImpl_TextChangedListener *new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASTimePickerImpl_TextChangedListener *create_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASTimePickerImpl_TextChangedListener)

@interface ASTimePickerImpl_TimePickerCommandBuilder () {
 @public
  ASTimePickerImpl *this$0_;
}

@end

@interface ASTimePickerImpl_TimePickerBean () {
 @public
  ASTimePickerImpl *this$0_;
}

@end

NSString *ASTimePickerImpl_LOCAL_NAME = @"com.ashera.datetime.TimePicker";
NSString *ASTimePickerImpl_GROUP_NAME = @"com.ashera.datetime.TimePicker";

@implementation ASTimePickerImpl

@synthesize uiView = uiView_;
@synthesize datepicker = datepicker_;

- (void)loadAttributesWithNSString:(NSString *)localName {
  ASViewGroupImpl_register__WithNSString_(localName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onbeforeTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onafterTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"timeFormat"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"showClearButton"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintTextFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTimePickerImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithNSString:(NSString *)localname {
  ASTimePickerImpl_initWithNSString_(self, localname);
  return self;
}

- (instancetype)initWithNSString:(NSString *)groupName
                    withNSString:(NSString *)localname {
  ASTimePickerImpl_initWithNSString_withNSString_(self, groupName, localname);
  return self;
}

- (id<ASIWidget>)newInstance {
  return new_ASTimePickerImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  timePicker_ = new_ASTimePickerImpl_TimePickerExt_initWithASTimePickerImpl_(self);
  ASTimePickerImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewGroupImpl_registerCommandConveterWithASIWidget_(self);
  ASTimePickerImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASTimePickerImpl_setWidgetOnNativeClass(self);
}

- (id)asWidget {
  return timePicker_;
}

- (jboolean)removeWithASIWidget:(id<ASIWidget>)w {
  jboolean remove = [super removeWithASIWidget:w];
  [((ASTimePicker *) nil_chk(timePicker_)) removeViewWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])];
  ASViewGroupImpl_nativeRemoveViewWithASIWidget_(w);
  return remove;
}

- (jboolean)removeWithInt:(jint)index {
  id<ASIWidget> widget = [((id<JavaUtilList>) nil_chk(widgets_)) getWithInt:index];
  jboolean remove = [super removeWithInt:index];
  if (index + 1 <= [((ASTimePicker *) nil_chk(timePicker_)) getChildCount]) {
    [((ASTimePicker *) nil_chk(timePicker_)) removeViewAtWithInt:index];
    ASViewGroupImpl_nativeRemoveViewWithASIWidget_(widget);
  }
  return remove;
}

- (void)addWithASIWidget:(id<ASIWidget>)w
                 withInt:(jint)index {
  if (index != -2) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ASTimePickerImpl_createLayoutParamsWithADView_(self, view);
    if (index == -1) {
      [((ASTimePicker *) nil_chk(timePicker_)) addViewWithADView:view];
    }
    else {
      [((ASTimePicker *) nil_chk(timePicker_)) addViewWithADView:view withInt:index];
    }
  }
  ASViewGroupImpl_nativeAddViewWithId_withId_([self asNativeWidget], [((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  [super addWithASIWidget:w withInt:index];
}

- (void)createLayoutParamsWithADView:(ADView *)view {
  ASTimePickerImpl_createLayoutParamsWithADView_(self, view);
}

- (ADFrameLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)view {
  return ASTimePickerImpl_getLayoutParamsWithADView_(self, view);
}

- (void)setChildAttributeWithASIWidget:(id<ASIWidget>)w
                 withASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASTimePickerImpl_getLayoutParamsWithADView_(self, view);
  ASViewGroupImpl_setChildAttributeWithASIWidget_withASWidgetAttribute_withId_withId_(w, key, objValue, layoutParams);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    case 1:
    ((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
    break;
    default:
    break;
  }
  [((ADView *) nil_chk(view)) setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
}

- (id)getChildAttributeWithASIWidget:(id<ASIWidget>)w
               withASWidgetAttribute:(ASWidgetAttribute *)key {
  id attributeValue = ASViewGroupImpl_getChildAttributeWithASIWidget_withASWidgetAttribute_(w, key);
  if (attributeValue != nil) {
    return attributeValue;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADFrameLayout_LayoutParams *layoutParams = ASTimePickerImpl_getLayoutParamsWithADView_(self, view);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"layout_width", @"layout_height" }, 2)) {
    case 0:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->width_);
    case 1:
    return JavaLangInteger_valueOfWithInt_(((ADFrameLayout_LayoutParams *) nil_chk(layoutParams))->height_);
  }
  return nil;
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASTimePickerImpl_TimePickerExt *) nil_chk(((ASTimePickerImpl_TimePickerExt *) cast_chk(timePicker_, [ASTimePickerImpl_TimePickerExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewGroupImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"onTextChange", @"onbeforeTextChange", @"onafterTextChange", @"timeFormat", @"hint", @"text", @"showClearButton", @"hintTextFormat" }, 8)) {
    case 0:
    {
      ASTimePickerImpl_setOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 1:
    {
      ASTimePickerImpl_setBeforeOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 2:
    {
      ASTimePickerImpl_setOnAfterTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 3:
    {
      ASTimePickerImpl_setTimeFormatWithId_(self, objValue);
    }
    break;
    case 4:
    {
      ASTimePickerImpl_setHintWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 5:
    {
      ASTimePickerImpl_setMyTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
    }
    break;
    case 6:
    {
      ASTimePickerImpl_showClearButtonWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASTimePickerImpl_setHintTextFormatWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASTimePickerImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id attributeValue = ASViewGroupImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  id nativeWidget = [self asNativeWidget];
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"hint", @"text" }, 2)) {
    case 0:
    {
      return ASTimePickerImpl_getHintWithASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
    }
    case 1:
    {
      return ASTimePickerImpl_getMyTextWithASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
    }
  }
  return nil;
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)setHintWithASWidgetAttribute:(ASWidgetAttribute *)key
                        withNSString:(NSString *)strValue
                              withId:(id)objValue
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTimePickerImpl_setHintWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getHintWithASWidgetAttribute:(ASWidgetAttribute *)key
         withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASTimePickerImpl_getHintWithASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
}

- (NSString *)getTextEntered {
  if ([ASFormElement_class_() isInstance:editText_]) {
    return [((id<ASFormElement>) nil_chk(((id<ASFormElement>) cast_check(editText_, ASFormElement_class_())))) getTextEntered];
  }
  return nil;
}

- (jboolean)isViewVisible {
  return [((ASTimePicker *) nil_chk(timePicker_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
  if ([ASFormElement_class_() isInstance:editText_]) {
    [((id<ASFormElement>) nil_chk(((id<ASFormElement>) cast_check(editText_, ASFormElement_class_())))) focus];
  }
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTimePickerImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setMyTextWithASWidgetAttribute:(ASWidgetAttribute *)key
                          withNSString:(NSString *)strValue
                                withId:(id)objValue
             withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTimePickerImpl_setMyTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getMyTextWithASWidgetAttribute:(ASWidgetAttribute *)key
           withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASTimePickerImpl_getMyTextWithASWidgetAttribute_withASILifeCycleDecorator_(self, key, decorator);
}

- (void)setOnAfterTextChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                     withNSString:(NSString *)strValue
                                           withId:(id)objValue
                        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTimePickerImpl_setOnAfterTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setBeforeOnTextChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                      withNSString:(NSString *)strValue
                                            withId:(id)objValue
                         withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTimePickerImpl_setBeforeOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setOnTextChangeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                withNSString:(NSString *)strValue
                                      withId:(id)objValue
                   withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASTimePickerImpl_setOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)showClearButtonWithId:(id)objValue {
  ASTimePickerImpl_showClearButtonWithId_(self, objValue);
}

- (void)initTimePicker {
  timeFormat_ = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_(ASTimePickerImpl_DISPLAY_FORMAT, JavaUtilLocale_getDefault());
  id<ASIWidget> pickerTemplate = (id<ASIWidget>) cast_check([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(@"template"))) convertFromWithId:@"@layout/timepicker" withJavaUtilMap:nil withASIFragment:fragment_], ASIWidget_class_());
  datePickerWidget_ = (ASBaseHasWidgets *) cast_chk([((id<ASIWidget>) nil_chk(pickerTemplate)) loadLazyWidgetsWithASHasWidgets:self], [ASBaseHasWidgets class]);
  editText_ = [((ASBaseHasWidgets *) nil_chk(datePickerWidget_)) findWidgetByIdWithNSString:@"@+id/editText"];
  id<ASIWidget> clearButton = [self findWidgetByIdWithNSString:@"@+id/clearButton"];
  ASTimePickerImpl_setOnClickListenerWithASIWidget_withADView_OnClickListener_(self, clearButton, new_ASTimePickerImpl_1_initWithASTimePickerImpl_(self));
}

- (void)setTimeFormatWithId:(id)objValue {
  ASTimePickerImpl_setTimeFormatWithId_(self, objValue);
}

- (void)setNow {
  ASTimePickerImpl_setNow(self);
}

- (void)setTimeWithInt:(jint)hour
               withInt:(jint)minute {
  ASTimePickerImpl_setTimeWithInt_withInt_(self, hour, minute);
}

- (void)setTimeFormatWithJavaTextDateFormat:(JavaTextDateFormat *)timeFormat {
  ASTimePickerImpl_setTimeFormatWithJavaTextDateFormat_(self, timeFormat);
}

- (void)updateText {
  ASTimePickerImpl_updateText(self);
}

- (void)resetError {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASTimePickerImpl_setErrorWithNSString_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASTimePickerImpl_setErrorWithNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (void)setHintTextFormatWithId:(id)objValue {
  ASTimePickerImpl_setHintTextFormatWithId_(self, objValue);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASTimePicker *) nil_chk(timePicker_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASTimePickerImpl_TimePickerBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASTimePickerImpl_TimePickerBean_initWithASTimePickerImpl_(self);
  }
  return bean_;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASTimePickerImpl_TimePickerCommandBuilder_initWithASTimePickerImpl_(self);
  }
  return builder_;
}

- (ASTimePickerImpl_TimePickerParamsBean *)getParamsBean {
  if (paramsBean_ == nil) {
    paramsBean_ = new_ASTimePickerImpl_TimePickerParamsBean_initWithASTimePickerImpl_(self);
  }
  return paramsBean_;
}

- (ASTimePickerImpl_TimePickerCommandParamsBuilder *)getParamsBuilder {
  if (paramsBuilder_ == nil) {
    paramsBuilder_ = new_ASTimePickerImpl_TimePickerCommandParamsBuilder_initWithASTimePickerImpl_(self);
  }
  return paramsBuilder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASTimePickerImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)nativeCreateView {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
  
  UIDatePicker *datepicker = [UIDatePicker new];
  if (@available(iOS 13.4, *)) {
    [datepicker setPreferredDatePickerStyle:UIDatePickerStyleWheels];
  }
  [datepicker setDatePickerMode:UIDatePickerModeTime];
  [datepicker addTarget:self action:@selector(dateIsChanged:) forControlEvents:UIControlEventValueChanged];
  datepicker_= datepicker;
}

- (void)dateIsChanged:(id)sender{
  NSDate *myDate = ((UIDatePicker*)datepicker_).date;
  NSDateComponents *components = [[NSCalendar currentCalendar] components:NSHourCalendarUnit | NSMinuteCalendarUnit fromDate:myDate];
  [self setTimeWithInt:[components hour] withInt:[components minute]];
}

- (void)setOnClickListenerWithASIWidget:(id<ASIWidget>)clearButton
             withADView_OnClickListener:(id<ADView_OnClickListener>)onClickListener {
  ASTimePickerImpl_setOnClickListenerWithASIWidget_withADView_OnClickListener_(self, clearButton, onClickListener);
}

- (void)setErrorWithNSString:(NSString *)message {
  ASTimePickerImpl_setErrorWithNSString_(self, message);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, 5, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LADFrameLayout_LayoutParams;", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 24, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 26, 23, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 29, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 41, 1, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerParamsBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandParamsBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, 44, -1, -1 },
    { NULL, "V", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 46, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(initWithNSString:);
  methods[3].selector = @selector(initWithNSString:withNSString:);
  methods[4].selector = @selector(newInstance);
  methods[5].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[6].selector = @selector(setWidgetOnNativeClass);
  methods[7].selector = @selector(asWidget);
  methods[8].selector = @selector(removeWithASIWidget:);
  methods[9].selector = @selector(removeWithInt:);
  methods[10].selector = @selector(addWithASIWidget:withInt:);
  methods[11].selector = @selector(createLayoutParamsWithADView:);
  methods[12].selector = @selector(getLayoutParamsWithADView:);
  methods[13].selector = @selector(setChildAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:);
  methods[14].selector = @selector(getChildAttributeWithASIWidget:withASWidgetAttribute:);
  methods[15].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[16].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[17].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[18].selector = @selector(asNativeWidget);
  methods[19].selector = @selector(checkIosVersionWithNSString:);
  methods[20].selector = @selector(requestLayout);
  methods[21].selector = @selector(invalidate);
  methods[22].selector = @selector(setHintWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[23].selector = @selector(getHintWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[24].selector = @selector(getTextEntered);
  methods[25].selector = @selector(isViewVisible);
  methods[26].selector = @selector(focus);
  methods[27].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[28].selector = @selector(setMyTextWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[29].selector = @selector(getMyTextWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[30].selector = @selector(setOnAfterTextChangeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[31].selector = @selector(setBeforeOnTextChangeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[32].selector = @selector(setOnTextChangeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[33].selector = @selector(showClearButtonWithId:);
  methods[34].selector = @selector(initTimePicker);
  methods[35].selector = @selector(setTimeFormatWithId:);
  methods[36].selector = @selector(setNow);
  methods[37].selector = @selector(setTimeWithInt:withInt:);
  methods[38].selector = @selector(setTimeFormatWithJavaTextDateFormat:);
  methods[39].selector = @selector(updateText);
  methods[40].selector = @selector(resetError);
  methods[41].selector = @selector(showErrorWithNSString:);
  methods[42].selector = @selector(setHintTextFormatWithId:);
  methods[43].selector = @selector(setIdWithNSString:);
  methods[44].selector = @selector(getPluginWithNSString:);
  methods[45].selector = @selector(getBean);
  methods[46].selector = @selector(getBuilder);
  methods[47].selector = @selector(getParamsBean);
  methods[48].selector = @selector(getParamsBuilder);
  methods[49].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[50].selector = @selector(nativeCreateView);
  methods[51].selector = @selector(setOnClickListenerWithASIWidget:withADView_OnClickListener:);
  methods[52].selector = @selector(setErrorWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 48, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 49, -1, -1 },
    { "timePicker_", "LASTimePicker;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hour_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "minute_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timeFormat_", "LJavaTextDateFormat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "datePickerWidget_", "LASBaseHasWidgets;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DISPLAY_FORMAT", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 50, -1, -1 },
    { "editText_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASTimePickerImpl_TimePickerCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASTimePickerImpl_TimePickerBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBuilder_", "LASTimePickerImpl_TimePickerCommandParamsBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paramsBean_", "LASTimePickerImpl_TimePickerParamsBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "datepicker_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "LNSString;LNSString;", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "remove", "LASIWidget;", "I", "add", "LASIWidget;I", "createLayoutParams", "LADView;", "getLayoutParams", "setChildAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;", "getChildAttribute", "LASIWidget;LASWidgetAttribute;", "updateMeasuredDimension", "II", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setHint", "getHint", "postSetAttribute", "setMyText", "getMyText", "setOnAfterTextChange", "setBeforeOnTextChange", "setOnTextChange", "showClearButton", "LNSObject;", "setTimeFormat", "setTime", "LJavaTextDateFormat;", "showError", "setHintTextFormat", "setId", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setOnClickListener", "LASIWidget;LADView_OnClickListener;", "setError", &ASTimePickerImpl_LOCAL_NAME, &ASTimePickerImpl_GROUP_NAME, &ASTimePickerImpl_DISPLAY_FORMAT, "LASTimePickerImpl_TimePickerExt;LASTimePickerImpl_TextChangedListener;LASTimePickerImpl_TimePickerCommandBuilder;LASTimePickerImpl_TimePickerBean;LASTimePickerImpl_TimePickerParamsBean;LASTimePickerImpl_TimePickerCommandParamsBuilder;" };
  static const J2ObjcClassInfo _ASTimePickerImpl = { "TimePickerImpl", "com.ashera.datetime", ptrTable, methods, fields, 7, 0x1, 53, 15, -1, 51, -1, -1, -1 };
  return &_ASTimePickerImpl;
}

@end

void ASTimePickerImpl_init(ASTimePickerImpl *self) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTimePickerImpl_GROUP_NAME, ASTimePickerImpl_LOCAL_NAME);
}

ASTimePickerImpl *new_ASTimePickerImpl_init() {
  J2OBJC_NEW_IMPL(ASTimePickerImpl, init)
}

ASTimePickerImpl *create_ASTimePickerImpl_init() {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl, init)
}

void ASTimePickerImpl_initWithNSString_(ASTimePickerImpl *self, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, ASTimePickerImpl_GROUP_NAME, localname);
}

ASTimePickerImpl *new_ASTimePickerImpl_initWithNSString_(NSString *localname) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl, initWithNSString_, localname)
}

ASTimePickerImpl *create_ASTimePickerImpl_initWithNSString_(NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl, initWithNSString_, localname)
}

void ASTimePickerImpl_initWithNSString_withNSString_(ASTimePickerImpl *self, NSString *groupName, NSString *localname) {
  ASBaseHasWidgets_initWithNSString_withNSString_(self, groupName, localname);
}

ASTimePickerImpl *new_ASTimePickerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl, initWithNSString_withNSString_, groupName, localname)
}

ASTimePickerImpl *create_ASTimePickerImpl_initWithNSString_withNSString_(NSString *groupName, NSString *localname) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl, initWithNSString_withNSString_, groupName, localname)
}

void ASTimePickerImpl_setWidgetOnNativeClass(ASTimePickerImpl *self) {
  ((ASUIView*) [self asNativeWidget]).widget = self;
}

void ASTimePickerImpl_createLayoutParamsWithADView_(ASTimePickerImpl *self, ADView *view) {
  ADFrameLayout_LayoutParams *layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
  layoutParams = (ADFrameLayout_LayoutParams *) cast_chk([view getLayoutParams], [ADFrameLayout_LayoutParams class]);
  if (layoutParams == nil) {
    layoutParams = new_ADFrameLayout_LayoutParams_initWithInt_withInt_(-2, -2);
    [view setLayoutParamsWithADViewGroup_LayoutParams:layoutParams];
  }
  else {
    layoutParams->height_ = -2;
    layoutParams->width_ = -2;
  }
}

ADFrameLayout_LayoutParams *ASTimePickerImpl_getLayoutParamsWithADView_(ASTimePickerImpl *self, ADView *view) {
  return (ADFrameLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(view)) getLayoutParams], [ADFrameLayout_LayoutParams class]);
}

void ASTimePickerImpl_setHintWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
}

id ASTimePickerImpl_getHintWithASWidgetAttribute_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  return [((id<ASIWidget>) nil_chk(self->editText_)) getAttributeWithASWidgetAttribute:key withASILifeCycleDecorator:decorator];
}

void ASTimePickerImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"validationErrorDisplayType" }, 1)) {
    case 0:
    if ([ASFormElement_class_() isInstance:self->editText_]) {
      [((id<ASFormElement>) nil_chk(((id<ASFormElement>) cast_check(self->editText_, ASFormElement_class_())))) setValidationErrorDisplayTypeWithInt:[self getValidationErrorDisplayType]];
    }
    break;
    default:
    break;
  }
}

void ASTimePickerImpl_setMyTextWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
}

id ASTimePickerImpl_getMyTextWithASWidgetAttribute_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  return [((id<ASIWidget>) nil_chk(self->editText_)) getAttributeWithASWidgetAttribute:key withASILifeCycleDecorator:decorator];
}

void ASTimePickerImpl_setOnAfterTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onafterTextChange") withASILifeCycleDecorator:decorator];
}

void ASTimePickerImpl_setBeforeOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onbeforeTextChange") withASILifeCycleDecorator:decorator];
}

void ASTimePickerImpl_setOnTextChangeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASTimePickerImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(self, strValue, @"onTextChange") withASILifeCycleDecorator:decorator];
}

void ASTimePickerImpl_showClearButtonWithId_(ASTimePickerImpl *self, id objValue) {
  id<ASIWidget> clearButton = [self findWidgetByIdWithNSString:@"@+id/clearButton"];
  jint visibility = ADView_VISIBLE;
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    visibility = ADView_VISIBLE;
  }
  else {
    visibility = ADView_GONE;
  }
  [((id<ASIWidget>) nil_chk(clearButton)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([clearButton getLocalName], @"visibility") withId:JavaLangInteger_valueOfWithInt_(visibility) withBoolean:true];
}

void ASTimePickerImpl_setTimeFormatWithId_(ASTimePickerImpl *self, id objValue) {
  self->timeFormat_ = new_JavaTextSimpleDateFormat_initWithNSString_withJavaUtilLocale_((NSString *) cast_chk(objValue, [NSString class]), JavaUtilLocale_getDefault());
}

void ASTimePickerImpl_setNow(ASTimePickerImpl *self) {
  JavaUtilCalendar *c = JavaUtilCalendar_getInstance();
  ASTimePickerImpl_setTimeWithInt_withInt_(self, [((JavaUtilCalendar *) nil_chk(c)) getWithInt:JavaUtilCalendar_HOUR_OF_DAY], [c getWithInt:JavaUtilCalendar_MINUTE]);
}

void ASTimePickerImpl_setTimeWithInt_withInt_(ASTimePickerImpl *self, jint hour, jint minute) {
  self->hour_ = hour;
  self->minute_ = minute;
  ASTimePickerImpl_updateText(self);
}

void ASTimePickerImpl_setTimeFormatWithJavaTextDateFormat_(ASTimePickerImpl *self, JavaTextDateFormat *timeFormat) {
  self->timeFormat_ = timeFormat;
  ASTimePickerImpl_updateText(self);
}

void ASTimePickerImpl_updateText(ASTimePickerImpl *self) {
  if (self->hour_ == -1 || self->minute_ == -1) {
    [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([self->editText_ getLocalName], @"text") withId:@"" withBoolean:true];
  }
  else {
    JavaUtilCalendar *cal = new_JavaUtilGregorianCalendar_initWithInt_withInt_withInt_withInt_withInt_(0, 0, 0, self->hour_, self->minute_);
    [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([self->editText_ getLocalName], @"text") withId:[((JavaTextDateFormat *) nil_chk(self->timeFormat_)) formatWithJavaUtilDate:[cal getTime]] withBoolean:true];
  }
}

void ASTimePickerImpl_setHintTextFormatWithId_(ASTimePickerImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"hint" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hintTextFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

void ASTimePickerImpl_nativeCreateWithJavaUtilMap_(ASTimePickerImpl *self, id<JavaUtilMap> params) {
  [self nativeCreateView];
  [self initTimePicker];
  [((id<ASIWidget>) nil_chk(self->editText_)) setAttributeWithASWidgetAttribute:ASWidgetFactory_getAttributeWithNSString_withNSString_([self->editText_ getLocalName], @"iosInputView") withId:self->datepicker_ withBoolean:true];
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hint" } count:1 type:NSString_class_()]];
}

void ASTimePickerImpl_setOnClickListenerWithASIWidget_withADView_OnClickListener_(ASTimePickerImpl *self, id<ASIWidget> clearButton, id<ADView_OnClickListener> onClickListener) {
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(clearButton, @"click", [((id<ASIWidget>) nil_chk(clearButton)) asNativeWidget], onClickListener);
}

void ASTimePickerImpl_setErrorWithNSString_(ASTimePickerImpl *self, NSString *message) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl)

@implementation ASTimePickerImpl_TimePickerExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$ {
  ASTimePickerImpl_TimePickerExt_initWithASTimePickerImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASTimePickerImpl_TimePickerExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASTimePickerImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTimePickerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASTimePickerImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASTimePickerImpl_TimePickerExt = { "TimePickerExt", "com.ashera.datetime", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASTimePickerImpl_TimePickerExt;
}

@end

void ASTimePickerImpl_TimePickerExt_initWithASTimePickerImpl_(ASTimePickerImpl_TimePickerExt *self, ASTimePickerImpl *outer$) {
  self->this$0_ = outer$;
  ASTimePicker_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASTimePickerImpl_TimePickerExt *new_ASTimePickerImpl_TimePickerExt_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TimePickerExt, initWithASTimePickerImpl_, outer$)
}

ASTimePickerImpl_TimePickerExt *create_ASTimePickerImpl_TimePickerExt_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TimePickerExt, initWithASTimePickerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl_TimePickerExt)

@implementation ASTimePickerImpl_1

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$ {
  ASTimePickerImpl_1_initWithASTimePickerImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  ASTimePickerImpl_setTimeWithInt_withInt_(this$0_, -1, -1);
  
  ;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTimePickerImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTimePickerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTimePickerImpl;", "onClick", "LADView;", "initTimePicker" };
  static const J2ObjcClassInfo _ASTimePickerImpl_1 = { "", "com.ashera.datetime", ptrTable, methods, fields, 7, 0x8010, 2, 1, 0, -1, 3, -1, -1 };
  return &_ASTimePickerImpl_1;
}

@end

void ASTimePickerImpl_1_initWithASTimePickerImpl_(ASTimePickerImpl_1 *self, ASTimePickerImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASTimePickerImpl_1 *new_ASTimePickerImpl_1_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_1, initWithASTimePickerImpl_, outer$)
}

ASTimePickerImpl_1 *create_ASTimePickerImpl_1_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_1, initWithASTimePickerImpl_, outer$)
}

@implementation ASTimePickerImpl_TextChangedListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s {
  if (action_ == nil || [action_ isEqual:@"onafterTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onafterTextChange"];
    id<JavaUtilMap> obj = [self getOnafterTextChangeEventObjWithADEditable:s];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after {
  if (action_ == nil || [action_ isEqual:@"onbeforeTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onbeforeTextChange"];
    id<JavaUtilMap> obj = [self getOnbeforeTextChangeEventObjWithJavaLangCharSequence:s withInt:start withInt:count withInt:after];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s, JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(count), JavaLangInteger_valueOfWithInt_(after) } count:4 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count {
  if (action_ == nil || [action_ isEqual:@"onTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTextChange"];
    id<JavaUtilMap> obj = [self getOnTextChangeEventObjWithJavaLangCharSequence:s withInt:start withInt:before withInt:count];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s, JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(before), JavaLangInteger_valueOfWithInt_(count) } count:4 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                           withInt:(jint)start
                                                           withInt:(jint)before
                                                           withInt:(jint)count {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"textchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"s", NSString_java_valueOf_(s));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"start", JavaLangInteger_valueOfWithInt_(start));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"before", JavaLangInteger_valueOfWithInt_(before));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"count", JavaLangInteger_valueOfWithInt_(count));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnbeforeTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                                 withInt:(jint)start
                                                                 withInt:(jint)count
                                                                 withInt:(jint)after {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"beforetextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"s", NSString_java_valueOf_(s));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"start", JavaLangInteger_valueOfWithInt_(start));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"count", JavaLangInteger_valueOfWithInt_(count));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"after", JavaLangInteger_valueOfWithInt_(after));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onbeforeTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnafterTextChangeEventObjWithADEditable:(id<ADEditable>)s {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"aftertextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onafterTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 10, 3, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(afterTextChangedWithADEditable:);
  methods[4].selector = @selector(beforeTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[5].selector = @selector(onTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[6].selector = @selector(getOnTextChangeEventObjWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[7].selector = @selector(getOnbeforeTextChangeEventObjWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[8].selector = @selector(getOnafterTextChangeEventObjWithADEditable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "afterTextChanged", "LADEditable;", "beforeTextChanged", "LJavaLangCharSequence;III", "onTextChanged", "getOnTextChangeEventObj", "(Ljava/lang/CharSequence;III)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnbeforeTextChangeEventObj", "getOnafterTextChangeEventObj", "(Lr/android/text/Editable;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASTimePickerImpl;" };
  static const J2ObjcClassInfo _ASTimePickerImpl_TextChangedListener = { "TextChangedListener", "com.ashera.datetime", ptrTable, methods, fields, 7, 0xa, 9, 4, 12, -1, -1, -1, -1 };
  return &_ASTimePickerImpl_TextChangedListener;
}

@end

void ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(ASTimePickerImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASTimePickerImpl_TextChangedListener *new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TextChangedListener, initWithASIWidget_withNSString_, w, strValue)
}

ASTimePickerImpl_TextChangedListener *create_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TextChangedListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(ASTimePickerImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASTimePickerImpl_TextChangedListener *new_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TextChangedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASTimePickerImpl_TextChangedListener *create_ASTimePickerImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TextChangedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl_TextChangedListener)

@implementation ASTimePickerImpl_TimePickerCommandBuilder

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$ {
  ASTimePickerImpl_TimePickerCommandBuilder_initWithASTimePickerImpl_(self, outer$);
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setOnTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setOnbeforeTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onbeforeTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setOnafterTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onafterTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setTimeFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"timeFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)tryGetHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)tryGetText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)showClearButtonWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"showClearButton"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASTimePickerImpl_TimePickerCommandBuilder *)setHintTextFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LASTimePickerImpl_TimePickerCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTimePickerImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setOnTextChangeWithNSString:);
  methods[3].selector = @selector(setOnbeforeTextChangeWithNSString:);
  methods[4].selector = @selector(setOnafterTextChangeWithNSString:);
  methods[5].selector = @selector(setTimeFormatWithNSString:);
  methods[6].selector = @selector(tryGetHint);
  methods[7].selector = @selector(getHint);
  methods[8].selector = @selector(setHintWithNSString:);
  methods[9].selector = @selector(tryGetText);
  methods[10].selector = @selector(getText);
  methods[11].selector = @selector(setTextWithNSString:);
  methods[12].selector = @selector(showClearButtonWithBoolean:);
  methods[13].selector = @selector(setHintTextFormatWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTimePickerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTimePickerImpl;", "execute", "Z", "setOnTextChange", "LNSString;", "setOnbeforeTextChange", "setOnafterTextChange", "setTimeFormat", "setHint", "setText", "showClearButton", "setHintTextFormat", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandBuilder<Lcom/ashera/datetime/TimePickerImpl$TimePickerCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASTimePickerImpl_TimePickerCommandBuilder = { "TimePickerCommandBuilder", "com.ashera.datetime", ptrTable, methods, fields, 7, 0x1, 14, 1, 0, -1, -1, 12, -1 };
  return &_ASTimePickerImpl_TimePickerCommandBuilder;
}

@end

void ASTimePickerImpl_TimePickerCommandBuilder_initWithASTimePickerImpl_(ASTimePickerImpl_TimePickerCommandBuilder *self, ASTimePickerImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupCommandBuilder_init(self);
}

ASTimePickerImpl_TimePickerCommandBuilder *new_ASTimePickerImpl_TimePickerCommandBuilder_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TimePickerCommandBuilder, initWithASTimePickerImpl_, outer$)
}

ASTimePickerImpl_TimePickerCommandBuilder *create_ASTimePickerImpl_TimePickerCommandBuilder_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TimePickerCommandBuilder, initWithASTimePickerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl_TimePickerCommandBuilder)

@implementation ASTimePickerImpl_TimePickerBean

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$ {
  ASTimePickerImpl_TimePickerBean_initWithASTimePickerImpl_(self, outer$);
  return self;
}

- (void)setOnTextChangeWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnbeforeTextChangeWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnbeforeTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnafterTextChangeWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnafterTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setTimeFormatWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTimeFormatWithNSString:value])) executeWithBoolean:true];
}

- (id)getHint {
  return [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHint])) executeWithBoolean:false])) getHint];
}

- (void)setHintWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintWithNSString:value])) executeWithBoolean:true];
}

- (id)getText {
  return [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetText])) executeWithBoolean:false])) getText];
}

- (void)setTextWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextWithNSString:value])) executeWithBoolean:true];
}

- (void)showClearButtonWithBoolean:(jboolean)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) showClearButtonWithBoolean:value])) executeWithBoolean:true];
}

- (void)setHintTextFormatWithNSString:(NSString *)value {
  (void) [((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([((ASTimePickerImpl_TimePickerCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintTextFormatWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTimePickerImpl:);
  methods[1].selector = @selector(setOnTextChangeWithNSString:);
  methods[2].selector = @selector(setOnbeforeTextChangeWithNSString:);
  methods[3].selector = @selector(setOnafterTextChangeWithNSString:);
  methods[4].selector = @selector(setTimeFormatWithNSString:);
  methods[5].selector = @selector(getHint);
  methods[6].selector = @selector(setHintWithNSString:);
  methods[7].selector = @selector(getText);
  methods[8].selector = @selector(setTextWithNSString:);
  methods[9].selector = @selector(showClearButtonWithBoolean:);
  methods[10].selector = @selector(setHintTextFormatWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASTimePickerImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASTimePickerImpl;", "setOnTextChange", "LNSString;", "setOnbeforeTextChange", "setOnafterTextChange", "setTimeFormat", "setHint", "setText", "showClearButton", "Z", "setHintTextFormat" };
  static const J2ObjcClassInfo _ASTimePickerImpl_TimePickerBean = { "TimePickerBean", "com.ashera.datetime", ptrTable, methods, fields, 7, 0x1, 11, 1, 0, -1, -1, -1, -1 };
  return &_ASTimePickerImpl_TimePickerBean;
}

@end

void ASTimePickerImpl_TimePickerBean_initWithASTimePickerImpl_(ASTimePickerImpl_TimePickerBean *self, ASTimePickerImpl *outer$) {
  self->this$0_ = outer$;
  ASViewGroupImpl_ViewGroupBean_initWithASIWidget_(self, outer$);
}

ASTimePickerImpl_TimePickerBean *new_ASTimePickerImpl_TimePickerBean_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TimePickerBean, initWithASTimePickerImpl_, outer$)
}

ASTimePickerImpl_TimePickerBean *create_ASTimePickerImpl_TimePickerBean_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TimePickerBean, initWithASTimePickerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl_TimePickerBean)

@implementation ASTimePickerImpl_TimePickerParamsBean

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$ {
  ASTimePickerImpl_TimePickerParamsBean_initWithASTimePickerImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTimePickerImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTimePickerImpl;" };
  static const J2ObjcClassInfo _ASTimePickerImpl_TimePickerParamsBean = { "TimePickerParamsBean", "com.ashera.datetime", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, -1, -1 };
  return &_ASTimePickerImpl_TimePickerParamsBean;
}

@end

void ASTimePickerImpl_TimePickerParamsBean_initWithASTimePickerImpl_(ASTimePickerImpl_TimePickerParamsBean *self, ASTimePickerImpl *outer$) {
  ASViewGroupImpl_ViewGroupParamsBean_init(self);
}

ASTimePickerImpl_TimePickerParamsBean *new_ASTimePickerImpl_TimePickerParamsBean_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TimePickerParamsBean, initWithASTimePickerImpl_, outer$)
}

ASTimePickerImpl_TimePickerParamsBean *create_ASTimePickerImpl_TimePickerParamsBean_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TimePickerParamsBean, initWithASTimePickerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl_TimePickerParamsBean)

@implementation ASTimePickerImpl_TimePickerCommandParamsBuilder

- (instancetype)initWithASTimePickerImpl:(ASTimePickerImpl *)outer$ {
  ASTimePickerImpl_TimePickerCommandParamsBuilder_initWithASTimePickerImpl_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASTimePickerImpl:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LASTimePickerImpl;", "Lcom/ashera/layout/ViewGroupImpl$ViewGroupCommandParamsBuilder<Lcom/ashera/datetime/TimePickerImpl$TimePickerCommandParamsBuilder;>;" };
  static const J2ObjcClassInfo _ASTimePickerImpl_TimePickerCommandParamsBuilder = { "TimePickerCommandParamsBuilder", "com.ashera.datetime", ptrTable, methods, NULL, 7, 0x1, 1, 0, 0, -1, -1, 1, -1 };
  return &_ASTimePickerImpl_TimePickerCommandParamsBuilder;
}

@end

void ASTimePickerImpl_TimePickerCommandParamsBuilder_initWithASTimePickerImpl_(ASTimePickerImpl_TimePickerCommandParamsBuilder *self, ASTimePickerImpl *outer$) {
  ASViewGroupImpl_ViewGroupCommandParamsBuilder_init(self);
}

ASTimePickerImpl_TimePickerCommandParamsBuilder *new_ASTimePickerImpl_TimePickerCommandParamsBuilder_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_NEW_IMPL(ASTimePickerImpl_TimePickerCommandParamsBuilder, initWithASTimePickerImpl_, outer$)
}

ASTimePickerImpl_TimePickerCommandParamsBuilder *create_ASTimePickerImpl_TimePickerCommandParamsBuilder_initWithASTimePickerImpl_(ASTimePickerImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASTimePickerImpl_TimePickerCommandParamsBuilder, initWithASTimePickerImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTimePickerImpl_TimePickerCommandParamsBuilder)
