//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Log.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Log")
#ifdef RESTRICT_Log
#define INCLUDE_ALL_Log 0
#else
#define INCLUDE_ALL_Log 1
#endif
#undef RESTRICT_Log

#if !defined (ADLog_) && (INCLUDE_ALL_Log || defined(INCLUDE_ADLog))
#define ADLog_

@class JavaLangThrowable;

@interface ADLog : NSObject

#pragma mark Public

- (instancetype)init;

+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)string;

+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e;

+ (void)eWithNSString:(NSString *)viewLogTag
         withNSString:(NSString *)string;

+ (void)eWithNSString:(NSString *)viewLogTag
         withNSString:(NSString *)string
withJavaLangThrowable:(JavaLangThrowable *)e;

+ (void)iWithNSString:(NSString *)string
         withNSString:(NSString *)string2;

+ (void)iWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e;

+ (jboolean)isLoggableWithNSString:(NSString *)tag
                           withInt:(jint)debug2;

+ (void)vWithNSString:(NSString *)tag
         withNSString:(NSString *)s;

+ (void)vWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e;

+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)format;

+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e;

+ (void)wWithNSString:(NSString *)tag
withJavaLangThrowable:(JavaLangThrowable *)e;

@end

J2OBJC_EMPTY_STATIC_INIT(ADLog)

inline jint ADLog_get_DEBUG(void);
#define ADLog_DEBUG 0
J2OBJC_STATIC_FIELD_CONSTANT(ADLog, DEBUG, jint)

inline jint ADLog_get_VERBOSE(void);
#define ADLog_VERBOSE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADLog, VERBOSE, jint)

inline jint ADLog_get_INFO(void);
#define ADLog_INFO 0
J2OBJC_STATIC_FIELD_CONSTANT(ADLog, INFO, jint)

inline jint ADLog_get_WARN(void);
#define ADLog_WARN 0
J2OBJC_STATIC_FIELD_CONSTANT(ADLog, WARN, jint)

inline jint ADLog_get_ERROR(void);
#define ADLog_ERROR 0
J2OBJC_STATIC_FIELD_CONSTANT(ADLog, ERROR, jint)

FOUNDATION_EXPORT void ADLog_init(ADLog *self);

FOUNDATION_EXPORT ADLog *new_ADLog_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADLog *create_ADLog_init(void);

FOUNDATION_EXPORT jboolean ADLog_isLoggableWithNSString_withInt_(NSString *tag, jint debug2);

FOUNDATION_EXPORT void ADLog_dWithNSString_withNSString_(NSString *tag, NSString *string);

FOUNDATION_EXPORT void ADLog_eWithNSString_withNSString_withJavaLangThrowable_(NSString *viewLogTag, NSString *string, JavaLangThrowable *e);

FOUNDATION_EXPORT void ADLog_eWithNSString_withNSString_(NSString *viewLogTag, NSString *string);

FOUNDATION_EXPORT void ADLog_iWithNSString_withNSString_(NSString *string, NSString *string2);

FOUNDATION_EXPORT void ADLog_vWithNSString_withNSString_(NSString *tag, NSString *s);

FOUNDATION_EXPORT void ADLog_vWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e);

FOUNDATION_EXPORT void ADLog_dWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e);

FOUNDATION_EXPORT void ADLog_wWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *e);

FOUNDATION_EXPORT void ADLog_wWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e);

FOUNDATION_EXPORT void ADLog_wWithNSString_withNSString_(NSString *tag, NSString *format);

FOUNDATION_EXPORT void ADLog_iWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e);

J2OBJC_TYPE_LITERAL_HEADER(ADLog)

@compatibility_alias RAndroidUtilLog ADLog;

#endif

#pragma pop_macro("INCLUDE_ALL_Log")
