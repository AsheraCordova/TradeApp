//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ViewImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "BaseHasWidgets.h"
#include "BaseWidget.h"
#include "Chronometer.h"
#include "Color.h"
#include "ColorStateList.h"
#include "ConverterFactory.h"
#include "CssDataHolder.h"
#include "CssTree.h"
#include "Drawable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "Field.h"
#include "Form.h"
#include "FormElement.h"
#include "HasWidgets.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IMaxDimension.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "LayoutNativeVars.h"
#include "MenuItem.h"
#include "PluginInvoker.h"
#include "SimpleWrapableView.h"
#include "StateListDrawable.h"
#include "StringUtils.h"
#include "StyleSheet.h"
#include "Validation.h"
#include "ValidationErrorLabel.h"
#include "ValidatorFactory.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetAttributeValue.h"
#include "WidgetFactory.h"
#include "java/io/PrintStream.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Collections.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

#include <UIKit/UIKit.h>
#include "ASUIView.h"

#include "ASUITapGestureRecognizer.h"
#include "ASUILongTapGestureRecognizer.h"

@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;
@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASViewImpl ()

- (instancetype)init;

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

+ (id)getModelSyncEventsWithASIWidget:(id<ASIWidget>)w;

+ (void)setModelSyncEventsWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)strValue
                                 withId:(id)objValue
                             withADView:(ADView *)view;

+ (void)setModelParamWithASIWidget:(id<ASIWidget>)w
                      withNSString:(NSString *)strValue
                            withId:(id)objValue
                        withADView:(ADView *)view;

+ (void)setModelPojoToUiWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view;

+ (void)setModelUiToPojoWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view;

+ (void)notifyDataSetChangedWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue;

+ (void)updateModelDataWithASIWidget:(id<ASIWidget>)w
                              withId:(id)expression
                              withId:(id)payload;

+ (id)getModelUiToPojoWithASIWidget:(id<ASIWidget>)w;

+ (id)getModelPojoToUiWithASIWidget:(id<ASIWidget>)w;

+ (id)getModelParamWithASIWidget:(id<ASIWidget>)w;

+ (void)setModelPojoToUiParamsWithASIWidget:(id<ASIWidget>)w
                                     withId:(id)objValue;

+ (void)setModelUiToPojoEventIdsWithASIWidget:(id<ASIWidget>)w
                                       withId:(id)objValue;

+ (void)setZIndexWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setSelectedWithId:(id)objValue
               withADView:(ADView *)view;

+ (id)getSelectedWithASIWidget:(id<ASIWidget>)w
                    withADView:(ADView *)view;

+ (void)setInvalidateOnFrameChangeWithASIWidget:(id<ASIWidget>)w
                                         withId:(id)objValue;

+ (void)setBackgroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view;

+ (void)setForegroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view;

+ (void)validateFormWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (id)getValidateFormResultWithASIWidget:(id<ASIWidget>)w;

+ (void)setValidationWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue;

+ (void)setTypeWithASIWidget:(id<ASIWidget>)w
                withNSString:(NSString *)value
                      withId:(id)objValue;

+ (void)setPatternWithASIWidget:(id<ASIWidget>)w
                         withId:(id)objValue;

+ (void)setMaxWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue;

+ (void)setMinWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue;

+ (void)setMaxlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setMinlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setRequiredWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (void)setCustomErrorMessageKeysWithASIWidget:(id<ASIWidget>)w
                                        withId:(id)objValue;

+ (void)setCustomErrorMessageValuesWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue;

+ (void)setValidationErrorDisplayWithASIWidget:(id<ASIWidget>)w
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue;

+ (void)setErrorStyleWithASIWidget:(id<ASIWidget>)w
                        withADView:(ADView *)view
                            withId:(id)objValue;

+ (void)setStyleWithASIWidget:(id<ASIWidget>)w
                   withADView:(ADView *)view
                       withId:(id)objValue;

+ (id)getLayoutDirectionWithASIWidget:(id<ASIWidget>)w;

+ (void)setTextAlignmentWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (void)setTextDirectionWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (id)getTextAlignmentWithASIWidget:(id<ASIWidget>)w;

+ (id)getTextDirectionWithASIWidget:(id<ASIWidget>)w;

+ (void)setBgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)uiview
                             withId:(id)objValue;

+ (void)setBackgroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeView
                            withId:(id)objValue
                       withBoolean:(jboolean)stateChange;

+ (void)updateWidthAndHeightWithASIWidget:(id<ASIWidget>)w
                  withADStateListDrawable:(ADStateListDrawable *)background
                                   withId:(id)value
                             withNSString:(NSString *)type
                             withNSString:(NSString *)conveterType;

+ (jboolean)isResizableImageWithId:(id)obj;

+ (void)clearBgColorWithId:(id)view
                    withId:(id)value;

+ (void)nativeSetBgColorWithId:(id)view
                        withId:(id)value;

+ (void)setOnClickWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue;

+ (void)setMinHeightWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setMinWidthWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (id)getMinHeightWithASIWidget:(id<ASIWidget>)w;

+ (id)getMinWidthWithASIWidget:(id<ASIWidget>)w;

+ (jboolean)isNativeRtlSupported;

+ (void)setBackgroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue;

+ (void)setBackgroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue;

+ (void)setForegroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue;

+ (void)setForegroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue;

+ (void)setForegroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue;

+ (void)setFgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeWidget
                             withId:(id)objValue;

+ (id)getVisibilityWithASIWidget:(id<ASIWidget>)w;

+ (void)setLongClickableWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue;

+ (id)getLongClickableWithASIWidget:(id<ASIWidget>)w;

+ (id)getClickableWithId:(id)nativeWidget;

+ (jboolean)nativeGetClickableWithId:(id)view;

+ (void)setClickableWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
                           withId:(id)objValue;

+ (void)nativeSetClickableWithId:(id)view
                     withBoolean:(jboolean)clickable;

+ (void)setOnLongClickWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeView
                             withId:(id)objValue;

+ (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue;

+ (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue;

+ (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue;

+ (void)setScaleYWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setScaleXWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue;

+ (void)setRotationYWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setRotationXWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue;

+ (void)setRotationWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue;

+ (id)getTranslationXWithASIWidget:(id<ASIWidget>)w;

+ (id)getTransformPivotYWithASIWidget:(id<ASIWidget>)w;

+ (id)getTransformPivotXWithASIWidget:(id<ASIWidget>)w;

+ (id)getScaleYWithASIWidget:(id<ASIWidget>)w;

+ (id)getScaleXWithASIWidget:(id<ASIWidget>)w;

+ (id)getRotationYWithASIWidget:(id<ASIWidget>)w;

+ (id)getRotationXWithASIWidget:(id<ASIWidget>)w;

+ (id)getRotationWithASIWidget:(id<ASIWidget>)w;

+ (id)getTranslationZWithASIWidget:(id<ASIWidget>)w;

+ (id)getTranslationYWithASIWidget:(id<ASIWidget>)w;

+ (id)getForegroundTintWithASIWidget:(id<ASIWidget>)w;

+ (id)getForegroundTintModeWithASIWidget:(id<ASIWidget>)w;

+ (id)getBackgroundTintModeWithASIWidget:(id<ASIWidget>)w;

+ (id)getBackgroundTintWithASIWidget:(id<ASIWidget>)w;

+ (void)invalidateWithASIWidget:(id<ASIWidget>)w;

+ (jboolean)isMirrorSupported;

+ (void)setOnTouchWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue;

+ (void)setOnDragWithASIWidget:(id<ASIWidget>)w
                        withId:(id)nativeView
                        withId:(id)objValue;

+ (void)setAsDragSourceWithASIWidget:(id<ASIWidget>)w
                              withId:(id)nativeWidget
                              withId:(id)objValue;

+ (id)getClipDataWithADView_DragEvent:(ADView_DragEvent *)event;

+ (id)getForegroundWithASIWidget:(id<ASIWidget>)w;

+ (id)getBackgroundWithASIWidget:(id<ASIWidget>)w;

+ (void)setOnKeyWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue;

+ (void)setLayerCornerRadiusWithId:(id)nativeWidget
                            withId:(id)objValue;

+ (void)nativeSetLayerCornerRadiusWithId:(id)nativeWidget
                               withFloat:(jfloat)value;

+ (void)setLayerBorderColorWithId:(id)nativeWidget
                           withId:(id)objValue;

+ (void)nativeLayerBorderColorWithId:(id)nativeWidget
                              withId:(id)value;

+ (void)setLayerBorderWidthWithId:(id)nativeWidget
                           withId:(id)objValue;

+ (void)nativeLayerBorderWidthWithId:(id)nativeWidget
                           withFloat:(jfloat)value;

+ (void)setLayerMasksToBoundsWithId:(id)nativeWidget
                             withId:(id)objValue;

+ (void)nativeLayerBMasksToBoundsWithId:(id)nativeWidget
                            withBoolean:(jboolean)value;

+ (void)nativeBringToFrontWithJavaUtilList:(id<JavaUtilList>)widgets;

@end

__attribute__((unused)) static void ASViewImpl_init(ASViewImpl *self);

__attribute__((unused)) static ASViewImpl *new_ASViewImpl_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl *create_ASViewImpl_init(void);

__attribute__((unused)) static void ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, id nativeWidget, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static id ASViewImpl_getModelSyncEventsWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_updateModelDataWithASIWidget_withId_withId_(id<ASIWidget> w, id expression, id payload);

__attribute__((unused)) static id ASViewImpl_getModelUiToPojoWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getModelPojoToUiWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getModelParamWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setZIndexWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setSelectedWithId_withADView_(id objValue, ADView *view);

__attribute__((unused)) static id ASViewImpl_getSelectedWithASIWidget_withADView_(id<ASIWidget> w, ADView *view);

__attribute__((unused)) static void ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view);

__attribute__((unused)) static void ASViewImpl_validateFormWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getValidateFormResultWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setValidationWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTypeWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *value, id objValue);

__attribute__((unused)) static void ASViewImpl_setPatternWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMaxWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMaxlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRequiredWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *strValue, id objValue);

__attribute__((unused)) static void ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue);

__attribute__((unused)) static void ASViewImpl_setStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue);

__attribute__((unused)) static id ASViewImpl_getLayoutDirectionWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setTextAlignmentWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTextDirectionWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getTextAlignmentWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTextDirectionWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id uiview, id objValue);

__attribute__((unused)) static void ASViewImpl_setBackgroundWithASIWidget_withId_withId_withBoolean_(id<ASIWidget> w, id nativeView, id objValue, jboolean stateChange);

__attribute__((unused)) static void ASViewImpl_updateWidthAndHeightWithASIWidget_withADStateListDrawable_withId_withNSString_withNSString_(id<ASIWidget> w, ADStateListDrawable *background, id value, NSString *type, NSString *conveterType);

__attribute__((unused)) static jboolean ASViewImpl_isResizableImageWithId_(id obj);

__attribute__((unused)) static void ASViewImpl_clearBgColorWithId_withId_(id view, id value);

__attribute__((unused)) static void ASViewImpl_nativeSetBgColorWithId_withId_(id view, id value);

__attribute__((unused)) static void ASViewImpl_setOnClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinHeightWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setMinWidthWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getMinHeightWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getMinWidthWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static jboolean ASViewImpl_isNativeRtlSupported(void);

__attribute__((unused)) static void ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setBackgroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setForegroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setForegroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setForegroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static id ASViewImpl_getVisibilityWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setLongClickableWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getLongClickableWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getClickableWithId_(id nativeWidget);

__attribute__((unused)) static jboolean ASViewImpl_nativeGetClickableWithId_(id view);

__attribute__((unused)) static void ASViewImpl_setClickableWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeSetClickableWithId_withBoolean_(id view, jboolean clickable);

__attribute__((unused)) static void ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setTranslationXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTranslationYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTranslationZWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTransformPivotYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setTransformPivotXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setScaleYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setScaleXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRotationYWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRotationXWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setRotationWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static id ASViewImpl_getTranslationXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTransformPivotYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTransformPivotXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getScaleYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getScaleXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRotationYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRotationXWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getRotationWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTranslationZWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getTranslationYWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getForegroundTintWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getForegroundTintModeWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getBackgroundTintModeWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getBackgroundTintWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_invalidateWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static jboolean ASViewImpl_isMirrorSupported(void);

__attribute__((unused)) static void ASViewImpl_setOnTouchWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setOnDragWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue);

__attribute__((unused)) static void ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue);

__attribute__((unused)) static id ASViewImpl_getClipDataWithADView_DragEvent_(ADView_DragEvent *event);

__attribute__((unused)) static id ASViewImpl_getForegroundWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static id ASViewImpl_getBackgroundWithASIWidget_(id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_setOnKeyWithASIWidget_withId_(id<ASIWidget> w, id objValue);

__attribute__((unused)) static void ASViewImpl_setLayerCornerRadiusWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(id nativeWidget, jfloat value);

__attribute__((unused)) static void ASViewImpl_setLayerBorderColorWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeLayerBorderColorWithId_withId_(id nativeWidget, id value);

__attribute__((unused)) static void ASViewImpl_setLayerBorderWidthWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(id nativeWidget, jfloat value);

__attribute__((unused)) static void ASViewImpl_setLayerMasksToBoundsWithId_withId_(id nativeWidget, id objValue);

__attribute__((unused)) static void ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(id nativeWidget, jboolean value);

__attribute__((unused)) static void ASViewImpl_nativeBringToFrontWithJavaUtilList_(id<JavaUtilList> widgets);

@interface ASViewImpl_IosAccessibilityTraits () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_IosAccessibilityTraits, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_BackgroundRepeat () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_BackgroundRepeat, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_BackgroundTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_BackgroundTintMode, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_ForegroundRepeat () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ForegroundRepeat, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_ForegroundTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ForegroundTintMode, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_Visibility () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_Visibility, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_LayoutDirection () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_LayoutDirection, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_TextDirection () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_TextDirection, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_TextAlignment () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_TextAlignment, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_Vtype () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_Vtype, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_ValidationErrorDisplay () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ValidationErrorDisplay, mapping_, id<JavaUtilMap>)

@interface ASViewImpl_1 : NSObject < JavaUtilComparator >

- (instancetype)init;

- (jint)compareWithId:(id<ASIWidget>)arg0
               withId:(id<ASIWidget>)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_1)

__attribute__((unused)) static void ASViewImpl_1_init(ASViewImpl_1 *self);

__attribute__((unused)) static ASViewImpl_1 *new_ASViewImpl_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_1 *create_ASViewImpl_1_init(void);

@interface ASViewImpl_OnClickListener : NSObject < ADView_OnClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnClickListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnClickListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnClickListener)

@interface ASViewImpl_OnTouchListener : NSObject < ADView_OnTouchListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onTouchWithADView:(ADView *)v
       withADView_MotionEvent:(ADView_MotionEvent *)event;

- (id<JavaUtilMap>)getOnTouchEventObjWithADView:(ADView *)v
                         withADView_MotionEvent:(ADView_MotionEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnTouchListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnTouchListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnTouchListener)

@interface ASViewImpl_OnLongClickListener : NSObject < ADView_OnLongClickListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onLongClickWithADView:(ADView *)v;

- (id<JavaUtilMap>)getOnLongClickEventObjWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnLongClickListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnLongClickListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnLongClickListener)

@interface ASViewImpl_OnDragListener : NSObject < ADView_OnDragListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onDragWithADView:(ADView *)v
        withADView_DragEvent:(ADView_DragEvent *)event;

- (id<JavaUtilMap>)getOnDragEventObjWithADView:(ADView *)v
                          withADView_DragEvent:(ADView_DragEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnDragListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnDragListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnDragListener)

@interface ASViewImpl_OnKeyListener : NSObject < ADView_OnKeyListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onKeyWithADView:(ADView *)v
                    withInt:(jint)keyCode
             withADKeyEvent:(ADKeyEvent *)event;

- (id<JavaUtilMap>)getOnKeyEventObjWithADView:(ADView *)v
                                      withInt:(jint)keyCode
                               withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASViewImpl_OnKeyListener)

J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASViewImpl_OnKeyListener, action_, NSString *)

__attribute__((unused)) static void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASViewImpl_OnKeyListener)

@interface ASViewImpl_ViewCommandBuilderInternal () {
 @public
  id<ASIWidget> widget_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ViewCommandBuilderInternal, widget_, id<ASIWidget>)

@interface ASViewImpl_ViewBean () {
 @public
  ASViewImpl_ViewCommandBuilderInternal *commandBuilder_;
}

- (ASViewImpl_ViewCommandBuilderInternal *)getBuilder;

@end

J2OBJC_FIELD_SETTER(ASViewImpl_ViewBean, commandBuilder_, ASViewImpl_ViewCommandBuilderInternal *)

__attribute__((unused)) static ASViewImpl_ViewCommandBuilderInternal *ASViewImpl_ViewBean_getBuilder(ASViewImpl_ViewBean *self);

@interface ASViewImpl_UIControlEventTouchDelegate () {
 @public
  __unsafe_unretained id<ASIWidget> widget_;
  id<ADView_OnTouchListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UIControlEventTouchDelegate, listener_, id<ADView_OnTouchListener>)

@interface ASViewImpl_UILongTapGestureRecognizerDelegate () {
 @public
  __unsafe_unretained id<ASIWidget> widget_;
  id<ADView_OnLongClickListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UILongTapGestureRecognizerDelegate, listener_, id<ADView_OnLongClickListener>)

@interface ASViewImpl_UITapGestureRecognizerDelegate () {
 @public
  __unsafe_unretained id<ASIWidget> widget_;
  id<ADView_OnClickListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UITapGestureRecognizerDelegate, listener_, id<ADView_OnClickListener>)

@interface ASViewImpl_UIDragInteractionDelegate () {
 @public
  id<ASIWidget> widget_;
  NSString *eventArgs_;
}

- (id)getEventObjWithASIWidget:(id<ASIWidget>)w;

- (void)sendEventWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)action
             withBoolean:(jboolean)dragCanAccept;

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UIDragInteractionDelegate, widget_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASViewImpl_UIDragInteractionDelegate, eventArgs_, NSString *)

__attribute__((unused)) static id ASViewImpl_UIDragInteractionDelegate_getEventObjWithASIWidget_(ASViewImpl_UIDragInteractionDelegate *self, id<ASIWidget> w);

__attribute__((unused)) static void ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(ASViewImpl_UIDragInteractionDelegate *self, jint x, jint y, jint action, jboolean dragCanAccept);

@interface ASViewImpl_UIDropInteractionDelegate () {
 @public
  __unsafe_unretained id<ASIWidget> widget_;
  id<ADView_OnDragListener> listener_;
}

@end

J2OBJC_FIELD_SETTER(ASViewImpl_UIDropInteractionDelegate, listener_, id<ADView_OnDragListener>)

@implementation ASViewImpl

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)register__WithNSString:(NSString *)localName {
  ASViewImpl_register__WithNSString_(localName);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, key, strValue, objValue, decorator);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
         withASSimpleWrapableView:(ASSimpleWrapableView *)wrapperView
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, wrapperView, key, strValue, objValue, decorator);
}

+ (void)setAttributeWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
            withASWidgetAttribute:(ASWidgetAttribute *)key
                     withNSString:(NSString *)strValue
                           withId:(id)objValue
        withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, nativeWidget, key, strValue, objValue, decorator);
}

+ (id)getAttributeWithASIWidget:(id<ASIWidget>)w
          withASWidgetAttribute:(ASWidgetAttribute *)key
      withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASViewImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(w, key, decorator);
}

+ (id)getAttributeWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeWidget
          withASWidgetAttribute:(ASWidgetAttribute *)key
      withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  return ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(w, nativeWidget, key, decorator);
}

+ (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ASViewImpl_checkIosVersionWithNSString_(v);
}

+ (void)setPaddingWithId:(id)objValue
              withADView:(ADView *)view {
  ASViewImpl_setPaddingWithId_withADView_(objValue, view);
}

+ (void)setPaddingLeftWithId:(id)objValue
                  withADView:(ADView *)view {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, view);
}

+ (void)setPaddingRightWithId:(id)objValue
                   withADView:(ADView *)view {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, view);
}

+ (void)setPaddingTopWithId:(id)objValue
                 withADView:(ADView *)view {
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, view);
}

+ (void)setPaddingBottomWithId:(id)objValue
                    withADView:(ADView *)view {
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, view);
}

+ (id)getPaddingTopWithASIWidget:(id<ASIWidget>)w
                      withADView:(ADView *)view {
  return ASViewImpl_getPaddingTopWithASIWidget_withADView_(w, view);
}

+ (id)getPaddingBottomWithASIWidget:(id<ASIWidget>)w
                         withADView:(ADView *)view {
  return ASViewImpl_getPaddingBottomWithASIWidget_withADView_(w, view);
}

+ (id)getPaddingLeftWithASIWidget:(id<ASIWidget>)w
                       withADView:(ADView *)view {
  return ASViewImpl_getPaddingLeftWithASIWidget_withADView_(w, view);
}

+ (id)getPaddingRightWithASIWidget:(id<ASIWidget>)w
                        withADView:(ADView *)view {
  return ASViewImpl_getPaddingRightWithASIWidget_withADView_(w, view);
}

+ (void)setPaddingHorizontalWithId:(id)objValue
                        withADView:(ADView *)view {
  ASViewImpl_setPaddingHorizontalWithId_withADView_(objValue, view);
}

+ (void)setPaddingVerticalWithId:(id)objValue
                      withADView:(ADView *)view {
  ASViewImpl_setPaddingVerticalWithId_withADView_(objValue, view);
}

+ (void)setIdWithASIWidget:(id<ASIWidget>)w
              withNSString:(NSString *)strValue
                    withId:(id)objValue
                withADView:(ADView *)view {
  ASViewImpl_setIdWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (id)getModelSyncEventsWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelSyncEventsWithASIWidget_(w);
}

+ (void)setModelSyncEventsWithASIWidget:(id<ASIWidget>)w
                           withNSString:(NSString *)strValue
                                 withId:(id)objValue
                             withADView:(ADView *)view {
  ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setModelParamWithASIWidget:(id<ASIWidget>)w
                      withNSString:(NSString *)strValue
                            withId:(id)objValue
                        withADView:(ADView *)view {
  ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setModelPojoToUiWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view {
  ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setModelUiToPojoWithASIWidget:(id<ASIWidget>)w
                         withNSString:(NSString *)strValue
                               withId:(id)objValue
                           withADView:(ADView *)view {
  ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)notifyDataSetChangedWithASIWidget:(id<ASIWidget>)w
                                   withId:(id)objValue {
  ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(w, objValue);
}

+ (void)updateModelDataWithASIWidget:(id<ASIWidget>)w
                              withId:(id)expression
                              withId:(id)payload {
  ASViewImpl_updateModelDataWithASIWidget_withId_withId_(w, expression, payload);
}

+ (id)getModelUiToPojoWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelUiToPojoWithASIWidget_(w);
}

+ (id)getModelPojoToUiWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelPojoToUiWithASIWidget_(w);
}

+ (id)getModelParamWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getModelParamWithASIWidget_(w);
}

+ (void)setModelPojoToUiParamsWithASIWidget:(id<ASIWidget>)w
                                     withId:(id)objValue {
  ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(w, objValue);
}

+ (void)refreshUiFromModelWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_refreshUiFromModelWithASIWidget_withId_(w, objValue);
}

+ (void)refreshUiFromModelWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue
                            withBoolean:(jboolean)remeasure {
  ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w, objValue, remeasure);
}

+ (void)setModelUiToPojoEventIdsWithASIWidget:(id<ASIWidget>)w
                                       withId:(id)objValue {
  ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(w, objValue);
}

+ (void)setZIndexWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setZIndexWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxHeightWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMaxHeightWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxWidthWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setMaxWidthWithASIWidget_withId_(w, objValue);
}

+ (id)getMaxWidthWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMaxWidthWithASIWidget_(w);
}

+ (id)getMaxHeightWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMaxHeightWithASIWidget_(w);
}

+ (void)setSelectedWithId:(id)objValue
               withADView:(ADView *)view {
  ASViewImpl_setSelectedWithId_withADView_(objValue, view);
}

+ (id)getSelectedWithASIWidget:(id<ASIWidget>)w
                    withADView:(ADView *)view {
  return ASViewImpl_getSelectedWithASIWidget_withADView_(w, view);
}

+ (void)setInvalidateOnFrameChangeWithASIWidget:(id<ASIWidget>)w
                                         withId:(id)objValue {
  ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(w, objValue);
}

+ (void)setBackgroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view {
  ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)setForegroundRepeatWithASIWidget:(id<ASIWidget>)w
                            withNSString:(NSString *)strValue
                                  withId:(id)objValue
                              withADView:(ADView *)view {
  ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
             withADView_MotionEvent:(ADView_MotionEvent *)event {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADView_MotionEvent_(obj, event);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                     withADKeyEvent:(ADKeyEvent *)event {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(obj, event);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
               withADView_DragEvent:(ADView_DragEvent *)event {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADView_DragEvent_(obj, event);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                  withADChronometer:(ADChronometer *)chronometer
                    withASIFragment:(id<ASIFragment>)fragment {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADChronometer_withASIFragment_(obj, chronometer, fragment);
}

+ (void)validateFormWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_validateFormWithASIWidget_withId_(w, objValue);
}

+ (id)getValidateFormResultWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getValidateFormResultWithASIWidget_(w);
}

+ (void)setValidationWithASIWidget:(id<ASIWidget>)w
                            withId:(id)objValue {
  ASViewImpl_setValidationWithASIWidget_withId_(w, objValue);
}

+ (id<JavaUtilList>)getFormsWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getFormsWithASIWidget_(w);
}

+ (void)setTypeWithASIWidget:(id<ASIWidget>)w
                withNSString:(NSString *)value
                      withId:(id)objValue {
  ASViewImpl_setTypeWithASIWidget_withNSString_withId_(w, value, objValue);
}

+ (void)setPatternWithASIWidget:(id<ASIWidget>)w
                         withId:(id)objValue {
  ASViewImpl_setPatternWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue {
  ASViewImpl_setMaxWithASIWidget_withId_(w, objValue);
}

+ (void)setMinWithASIWidget:(id<ASIWidget>)w
                     withId:(id)objValue {
  ASViewImpl_setMinWithASIWidget_withId_(w, objValue);
}

+ (void)setMaxlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMaxlengthWithASIWidget_withId_(w, objValue);
}

+ (void)setMinlengthWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMinlengthWithASIWidget_withId_(w, objValue);
}

+ (void)setRequiredWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setRequiredWithASIWidget_withId_(w, objValue);
}

+ (void)addValidatorWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)validationName
                withNSStringArray:(IOSObjectArray *)params {
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, validationName, params);
}

+ (void)setCustomErrorMessageKeysWithASIWidget:(id<ASIWidget>)w
                                        withId:(id)objValue {
  ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(w, objValue);
}

+ (void)setCustomErrorMessageValuesWithASIWidget:(id<ASIWidget>)w
                                          withId:(id)objValue {
  ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(w, objValue);
}

+ (void)setValidationErrorDisplayWithASIWidget:(id<ASIWidget>)w
                                  withNSString:(NSString *)strValue
                                        withId:(id)objValue {
  ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(w, strValue, objValue);
}

+ (void)setErrorStyleWithASIWidget:(id<ASIWidget>)w
                        withADView:(ADView *)view
                            withId:(id)objValue {
  ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(w, view, objValue);
}

+ (void)setStyleWithASIWidget:(id<ASIWidget>)w
                   withADView:(ADView *)view
                       withId:(id)objValue {
  ASViewImpl_setStyleWithASIWidget_withADView_withId_(w, view, objValue);
}

+ (void)setStyleWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue {
  ASViewImpl_setStyleWithASIWidget_withId_(w, objValue);
}

+ (void)setMessageOnLabelWithASIWidget:(id<ASIWidget>)w
                          withNSString:(NSString *)message {
  ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(w, message);
}

+ (void)setLayoutDirectionWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_setLayoutDirectionWithASIWidget_withId_(w, objValue);
}

+ (id)getLayoutDirectionWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getLayoutDirectionWithASIWidget_(w);
}

+ (void)setTextAlignmentWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewImpl_setTextAlignmentWithASIWidget_withId_(w, objValue);
}

+ (void)setTextDirectionWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewImpl_setTextDirectionWithASIWidget_withId_(w, objValue);
}

+ (id)getTextAlignmentWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTextAlignmentWithASIWidget_(w);
}

+ (id)getTextDirectionWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTextDirectionWithASIWidget_(w);
}

+ (jboolean)isRTLLayoutDirectionWithASIWidget:(id<ASIWidget>)widget {
  return ASViewImpl_isRTLLayoutDirectionWithASIWidget_(widget);
}

+ (void)drawableStateChangedWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_drawableStateChangedWithASIWidget_(w);
}

+ (id)getColorWithId:(id)objValue {
  return ASViewImpl_getColorWithId_(objValue);
}

+ (void)setDrawableBoundsWithASIWidget:(id<ASIWidget>)widget
                               withInt:(jint)l
                               withInt:(jint)t
                               withInt:(jint)r
                               withInt:(jint)b {
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(widget, l, t, r, b);
}

+ (void)redrawDrawablesWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_redrawDrawablesWithASIWidget_(w);
}

+ (void)setBackgroundColorWithId:(id)nativeWidget
                          withId:(id)value {
  ASViewImpl_setBackgroundColorWithId_withId_(nativeWidget, value);
}

+ (id)getBackgroundColorWithId:(id)uiView {
  return ASViewImpl_getBackgroundColorWithId_(uiView);
}

+ (void)setIsHiddenWithId:(id)nativeWidget
                   withId:(id)value {
  ASViewImpl_setIsHiddenWithId_withId_(nativeWidget, value);
}

+ (id)getIsHiddenWithId:(id)uiView {
  return ASViewImpl_getIsHiddenWithId_(uiView);
}

+ (void)setAlphaWithId:(id)nativeWidget
                withId:(id)value {
  ASViewImpl_setAlphaWithId_withId_(nativeWidget, value);
}

+ (id)getAlphaWithId:(id)uiView {
  return ASViewImpl_getAlphaWithId_(uiView);
}

+ (void)setIsOpaqueWithId:(id)nativeWidget
                   withId:(id)value {
  ASViewImpl_setIsOpaqueWithId_withId_(nativeWidget, value);
}

+ (id)getIsOpaqueWithId:(id)uiView {
  return ASViewImpl_getIsOpaqueWithId_(uiView);
}

+ (void)setTintColorWithId:(id)nativeWidget
                    withId:(id)value {
  ASViewImpl_setTintColorWithId_withId_(nativeWidget, value);
}

+ (id)getTintColorWithId:(id)uiView {
  return ASViewImpl_getTintColorWithId_(uiView);
}

+ (void)setClipsToBoundsWithId:(id)nativeWidget
                        withId:(id)value {
  ASViewImpl_setClipsToBoundsWithId_withId_(nativeWidget, value);
}

+ (id)getClipsToBoundsWithId:(id)uiView {
  return ASViewImpl_getClipsToBoundsWithId_(uiView);
}

+ (void)setClearsContextBeforeDrawingWithId:(id)nativeWidget
                                     withId:(id)value {
  ASViewImpl_setClearsContextBeforeDrawingWithId_withId_(nativeWidget, value);
}

+ (id)getClearsContextBeforeDrawingWithId:(id)uiView {
  return ASViewImpl_getClearsContextBeforeDrawingWithId_(uiView);
}

+ (void)setIsUserInteractionEnabledWithId:(id)nativeWidget
                                   withId:(id)value {
  ASViewImpl_setIsUserInteractionEnabledWithId_withId_(nativeWidget, value);
}

+ (id)getIsUserInteractionEnabledWithId:(id)uiView {
  return ASViewImpl_getIsUserInteractionEnabledWithId_(uiView);
}

+ (void)setIsMultipleTouchEnabledWithId:(id)nativeWidget
                                 withId:(id)value {
  ASViewImpl_setIsMultipleTouchEnabledWithId_withId_(nativeWidget, value);
}

+ (id)getIsMultipleTouchEnabledWithId:(id)uiView {
  return ASViewImpl_getIsMultipleTouchEnabledWithId_(uiView);
}

+ (void)setIsExclusiveTouchWithId:(id)nativeWidget
                           withId:(id)value {
  ASViewImpl_setIsExclusiveTouchWithId_withId_(nativeWidget, value);
}

+ (id)getIsExclusiveTouchWithId:(id)uiView {
  return ASViewImpl_getIsExclusiveTouchWithId_(uiView);
}

+ (void)setPreservesSuperviewLayoutMarginsWithId:(id)nativeWidget
                                          withId:(id)value {
  ASViewImpl_setPreservesSuperviewLayoutMarginsWithId_withId_(nativeWidget, value);
}

+ (id)getPreservesSuperviewLayoutMarginsWithId:(id)uiView {
  return ASViewImpl_getPreservesSuperviewLayoutMarginsWithId_(uiView);
}

+ (void)setInsetsLayoutMarginsFromSafeAreaWithId:(id)nativeWidget
                                          withId:(id)value {
  ASViewImpl_setInsetsLayoutMarginsFromSafeAreaWithId_withId_(nativeWidget, value);
}

+ (id)getInsetsLayoutMarginsFromSafeAreaWithId:(id)uiView {
  return ASViewImpl_getInsetsLayoutMarginsFromSafeAreaWithId_(uiView);
}

+ (void)setAutoresizesSubviewsWithId:(id)nativeWidget
                              withId:(id)value {
  ASViewImpl_setAutoresizesSubviewsWithId_withId_(nativeWidget, value);
}

+ (id)getAutoresizesSubviewsWithId:(id)uiView {
  return ASViewImpl_getAutoresizesSubviewsWithId_(uiView);
}

+ (void)setTranslatesAutoresizingMaskIntoConstraintsWithId:(id)nativeWidget
                                                    withId:(id)value {
  ASViewImpl_setTranslatesAutoresizingMaskIntoConstraintsWithId_withId_(nativeWidget, value);
}

+ (id)getTranslatesAutoresizingMaskIntoConstraintsWithId:(id)uiView {
  return ASViewImpl_getTranslatesAutoresizingMaskIntoConstraintsWithId_(uiView);
}

+ (void)setContentScaleFactorWithId:(id)nativeWidget
                             withId:(id)value {
  ASViewImpl_setContentScaleFactorWithId_withId_(nativeWidget, value);
}

+ (id)getContentScaleFactorWithId:(id)uiView {
  return ASViewImpl_getContentScaleFactorWithId_(uiView);
}

+ (id)getIsFocusedWithId:(id)uiView {
  return ASViewImpl_getIsFocusedWithId_(uiView);
}

+ (void)setRestorationIdentifierWithId:(id)nativeWidget
                                withId:(id)value {
  ASViewImpl_setRestorationIdentifierWithId_withId_(nativeWidget, value);
}

+ (id)getRestorationIdentifierWithId:(id)uiView {
  return ASViewImpl_getRestorationIdentifierWithId_(uiView);
}

+ (void)setTagWithId:(id)nativeWidget
              withId:(id)value {
  ASViewImpl_setTagWithId_withId_(nativeWidget, value);
}

+ (id)getTagWithId:(id)uiView {
  return ASViewImpl_getTagWithId_(uiView);
}

+ (void)setAccessibilityIgnoresInvertColorsWithId:(id)nativeWidget
                                           withId:(id)value {
  ASViewImpl_setAccessibilityIgnoresInvertColorsWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityIgnoresInvertColorsWithId:(id)uiView {
  return ASViewImpl_getAccessibilityIgnoresInvertColorsWithId_(uiView);
}

+ (void)setLargeContentImageWithId:(id)nativeWidget
                            withId:(id)value {
  ASViewImpl_setLargeContentImageWithId_withId_(nativeWidget, value);
}

+ (id)getLargeContentImageWithId:(id)uiView {
  return ASViewImpl_getLargeContentImageWithId_(uiView);
}

+ (void)setLargeContentTitleWithId:(id)nativeWidget
                            withId:(id)value {
  ASViewImpl_setLargeContentTitleWithId_withId_(nativeWidget, value);
}

+ (id)getLargeContentTitleWithId:(id)uiView {
  return ASViewImpl_getLargeContentTitleWithId_(uiView);
}

+ (void)setScalesLargeContentImageWithId:(id)nativeWidget
                                  withId:(id)value {
  ASViewImpl_setScalesLargeContentImageWithId_withId_(nativeWidget, value);
}

+ (id)getScalesLargeContentImageWithId:(id)uiView {
  return ASViewImpl_getScalesLargeContentImageWithId_(uiView);
}

+ (void)setShowsLargeContentViewerWithId:(id)nativeWidget
                                  withId:(id)value {
  ASViewImpl_setShowsLargeContentViewerWithId_withId_(nativeWidget, value);
}

+ (id)getShowsLargeContentViewerWithId:(id)uiView {
  return ASViewImpl_getShowsLargeContentViewerWithId_(uiView);
}

+ (void)setIsAccessibilityElementWithId:(id)nativeWidget
                                 withId:(id)value {
  ASViewImpl_setIsAccessibilityElementWithId_withId_(nativeWidget, value);
}

+ (id)getIsAccessibilityElementWithId:(id)uiView {
  return ASViewImpl_getIsAccessibilityElementWithId_(uiView);
}

+ (void)setAccessibilityLabelWithId:(id)nativeWidget
                             withId:(id)value {
  ASViewImpl_setAccessibilityLabelWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityLabelWithId:(id)uiView {
  return ASViewImpl_getAccessibilityLabelWithId_(uiView);
}

+ (void)setAccessibilityHintWithId:(id)nativeWidget
                            withId:(id)value {
  ASViewImpl_setAccessibilityHintWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityHintWithId:(id)uiView {
  return ASViewImpl_getAccessibilityHintWithId_(uiView);
}

+ (void)setAccessibilityValueWithId:(id)nativeWidget
                             withId:(id)value {
  ASViewImpl_setAccessibilityValueWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityValueWithId:(id)uiView {
  return ASViewImpl_getAccessibilityValueWithId_(uiView);
}

+ (void)setAccessibilityTraitsWithId:(id)nativeWidget
                              withId:(id)value {
  ASViewImpl_setAccessibilityTraitsWithId_withId_(nativeWidget, value);
}

+ (id)getAccessibilityTraitsWithId:(id)uiView {
  return ASViewImpl_getAccessibilityTraitsWithId_(uiView);
}

+ (void)nativeMakeFrameWithId:(id)uiView
                      withInt:(jint)l
                      withInt:(jint)t
                      withInt:(jint)r
                      withInt:(jint)b
                      withInt:(jint)height {
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_(uiView, l, t, r, b, height);
}

+ (void)updateBoundsWithId:(id)objview
                   withInt:(jint)x
                   withInt:(jint)y
                   withInt:(jint)width
                   withInt:(jint)height {
  ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(objview, x, y, width, height);
}

+ (id)getFirstChildOrSelfWithId:(id)objview {
  return ASViewImpl_getFirstChildOrSelfWithId_(objview);
}

+ (void)nativeMakeFrameForHorizontalScrollViewWithId:(id)uiView
                                             withInt:(jint)l
                                             withInt:(jint)t
                                             withInt:(jint)r
                                             withInt:(jint)b
                                             withInt:(jint)width {
  ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_(uiView, l, t, r, b, width);
}

+ (void)nativeMakeFrameWithId:(id)uiView
                      withInt:(jint)l
                      withInt:(jint)t
                      withInt:(jint)r
                      withInt:(jint)b {
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(uiView, l, t, r, b);
}

+ (jboolean)isRTLLayoutWithASIWidget:(id<ASIWidget>)widget {
  return ASViewImpl_isRTLLayoutWithASIWidget_(widget);
}

+ (jboolean)isRTLLayout {
  return ASViewImpl_isRTLLayout();
}

+ (void)setBgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)uiview
                             withId:(id)objValue {
  ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(w, uiview, objValue);
}

+ (void)setBackgroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setBackgroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)setBackgroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeView
                            withId:(id)objValue
                       withBoolean:(jboolean)stateChange {
  ASViewImpl_setBackgroundWithASIWidget_withId_withId_withBoolean_(w, nativeView, objValue, stateChange);
}

+ (void)updateWidthAndHeightWithASIWidget:(id<ASIWidget>)w
                  withADStateListDrawable:(ADStateListDrawable *)background
                                   withId:(id)value
                             withNSString:(NSString *)type
                             withNSString:(NSString *)conveterType {
  ASViewImpl_updateWidthAndHeightWithASIWidget_withADStateListDrawable_withId_withNSString_withNSString_(w, background, value, type, conveterType);
}

+ (void)setBgDrawabeOnViewWithInt:(jint)width
                          withInt:(jint)height
                       withADView:(ADView *)view {
  ASViewImpl_setBgDrawabeOnViewWithInt_withInt_withADView_(width, height, view);
}

+ (jboolean)isColorWithId:(id)value {
  return ASViewImpl_isColorWithId_(value);
}

+ (jboolean)isResizableImageWithId:(id)obj {
  return ASViewImpl_isResizableImageWithId_(obj);
}

+ (jboolean)isImageWithId:(id)value {
  return ASViewImpl_isImageWithId_(value);
}

+ (jint)getImageWidthWithId:(id)value {
  return ASViewImpl_getImageWidthWithId_(value);
}

+ (jint)getImageHeightWithId:(id)value {
  return ASViewImpl_getImageHeightWithId_(value);
}

+ (void)clearBgColorWithId:(id)view
                    withId:(id)value {
  ASViewImpl_clearBgColorWithId_withId_(view, value);
}

+ (void)nativeSetBgColorWithId:(id)view
                        withId:(id)value {
  ASViewImpl_nativeSetBgColorWithId_withId_(view, value);
}

+ (void)setOnClickWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue {
  ASViewImpl_setOnClickWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)setOnClickWithASIWidget:(id<ASIWidget>)w
                   withNSString:(NSString *)id_
                         withId:(id)nativeView
     withADView_OnClickListener:(id<ADView_OnClickListener>)onClickListener {
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(w, id_, nativeView, onClickListener);
}

+ (void)setMinHeightWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setMinHeightWithASIWidget_withId_(w, objValue);
}

+ (void)setMinWidthWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setMinWidthWithASIWidget_withId_(w, objValue);
}

+ (id)getMinHeightWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMinHeightWithASIWidget_(w);
}

+ (id)getMinWidthWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getMinWidthWithASIWidget_(w);
}

+ (void)registerCommandConveterWithASIWidget:(id<ASIWidget>)widget {
  ASViewImpl_registerCommandConveterWithASIWidget_(widget);
}

+ (jboolean)isNativeRtlSupported {
  return ASViewImpl_isNativeRtlSupported();
}

+ (id)getParentWithASIWidget:(id<ASIWidget>)widget {
  return ASViewImpl_getParentWithASIWidget_(widget);
}

+ (void)setBackgroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue {
  ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(w, objValue);
}

+ (void)setBackgroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue {
  ASViewImpl_setBackgroundTintWithASIWidget_withId_(w, objValue);
}

+ (void)setForegroundTintModeWithASIWidget:(id<ASIWidget>)w
                                    withId:(id)objValue {
  ASViewImpl_setForegroundTintModeWithASIWidget_withId_(w, objValue);
}

+ (void)setForegroundTintWithASIWidget:(id<ASIWidget>)w
                                withId:(id)objValue {
  ASViewImpl_setForegroundTintWithASIWidget_withId_(w, objValue);
}

+ (void)setForegroundWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)setFgOnControlWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeWidget
                             withId:(id)objValue {
  ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)setVisibilityWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setVisibilityWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)nativeSetVisibilityWithId:(id)view
                      withBoolean:(jboolean)hidden {
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_(view, hidden);
}

+ (id)getVisibilityWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getVisibilityWithASIWidget_(w);
}

+ (void)setLongClickableWithASIWidget:(id<ASIWidget>)w
                               withId:(id)objValue {
  ASViewImpl_setLongClickableWithASIWidget_withId_(w, objValue);
}

+ (id)getLongClickableWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getLongClickableWithASIWidget_(w);
}

+ (id)getClickableWithId:(id)nativeWidget {
  return ASViewImpl_getClickableWithId_(nativeWidget);
}

+ (jboolean)nativeGetClickableWithId:(id)view {
  return ASViewImpl_nativeGetClickableWithId_(view);
}

+ (void)setClickableWithASIWidget:(id<ASIWidget>)w
                           withId:(id)nativeWidget
                           withId:(id)objValue {
  ASViewImpl_setClickableWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (void)nativeSetClickableWithId:(id)view
                     withBoolean:(jboolean)clickable {
  ASViewImpl_nativeSetClickableWithId_withBoolean_(view, clickable);
}

+ (void)setOnLongClickWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeView
                             withId:(id)objValue {
  ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)setOnLongClickWithASIWidget:(id<ASIWidget>)w
                             withId:(id)nativeView
     withADView_OnLongClickListener:(id<ADView_OnLongClickListener>)listener {
  ASViewImpl_setOnLongClickWithASIWidget_withId_withADView_OnLongClickListener_(w, nativeView, listener);
}

+ (void)setTranslationXWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewImpl_setTranslationXWithASIWidget_withId_(w, objValue);
}

+ (void)setTranslationYWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewImpl_setTranslationYWithASIWidget_withId_(w, objValue);
}

+ (void)setTranslationZWithASIWidget:(id<ASIWidget>)w
                              withId:(id)objValue {
  ASViewImpl_setTranslationZWithASIWidget_withId_(w, objValue);
}

+ (void)setTransformPivotYWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_setTransformPivotYWithASIWidget_withId_(w, objValue);
}

+ (void)setTransformPivotXWithASIWidget:(id<ASIWidget>)w
                                 withId:(id)objValue {
  ASViewImpl_setTransformPivotXWithASIWidget_withId_(w, objValue);
}

+ (void)setScaleYWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setScaleYWithASIWidget_withId_(w, objValue);
}

+ (void)setScaleXWithASIWidget:(id<ASIWidget>)w
                        withId:(id)objValue {
  ASViewImpl_setScaleXWithASIWidget_withId_(w, objValue);
}

+ (void)setRotationYWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setRotationYWithASIWidget_withId_(w, objValue);
}

+ (void)setRotationXWithASIWidget:(id<ASIWidget>)w
                           withId:(id)objValue {
  ASViewImpl_setRotationXWithASIWidget_withId_(w, objValue);
}

+ (void)setRotationWithASIWidget:(id<ASIWidget>)w
                          withId:(id)objValue {
  ASViewImpl_setRotationWithASIWidget_withId_(w, objValue);
}

+ (id)getTranslationXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTranslationXWithASIWidget_(w);
}

+ (id)getTransformPivotYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTransformPivotYWithASIWidget_(w);
}

+ (id)getTransformPivotXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTransformPivotXWithASIWidget_(w);
}

+ (id)getScaleYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getScaleYWithASIWidget_(w);
}

+ (id)getScaleXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getScaleXWithASIWidget_(w);
}

+ (id)getRotationYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRotationYWithASIWidget_(w);
}

+ (id)getRotationXWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRotationXWithASIWidget_(w);
}

+ (id)getRotationWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getRotationWithASIWidget_(w);
}

+ (id)getTranslationZWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTranslationZWithASIWidget_(w);
}

+ (id)getTranslationYWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getTranslationYWithASIWidget_(w);
}

+ (id)getForegroundTintWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getForegroundTintWithASIWidget_(w);
}

+ (id)getForegroundTintModeWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getForegroundTintModeWithASIWidget_(w);
}

+ (id)getBackgroundTintModeWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBackgroundTintModeWithASIWidget_(w);
}

+ (id)getBackgroundTintWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBackgroundTintWithASIWidget_(w);
}

+ (void)requestLayoutWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_requestLayoutWithASIWidget_(w);
}

+ (void)invalidateWithASIWidget:(id<ASIWidget>)w {
  ASViewImpl_invalidateWithASIWidget_(w);
}

+ (void)requestLayoutWithASIWidget:(id<ASIWidget>)w
                            withId:(id)nativeView {
  ASViewImpl_requestLayoutWithASIWidget_withId_(w, nativeView);
}

+ (void)invalidateWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView {
  ASViewImpl_invalidateWithASIWidget_withId_(w, nativeView);
}

+ (void)nativeRequestLayoutWithId:(id)view {
  ASViewImpl_nativeRequestLayoutWithId_(view);
}

+ (void)nativeInvalidateWithId:(id)view {
  ASViewImpl_nativeInvalidateWithId_(view);
}

+ (void)setKeepScreenOnWithId:(id)nativeWidget
                       withId:(id)value {
  ASViewImpl_setKeepScreenOnWithId_withId_(nativeWidget, value);
}

+ (id)getKeepScreenOnWithId:(id)uiView {
  return ASViewImpl_getKeepScreenOnWithId_(uiView);
}

+ (jboolean)isMirrorSupported {
  return ASViewImpl_isMirrorSupported();
}

+ (void)setOnTouchWithASIWidget:(id<ASIWidget>)w
                         withId:(id)nativeView
                         withId:(id)objValue {
  ASViewImpl_setOnTouchWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)startDragWithASIWidget:(id<ASIWidget>)w
                  withNSString:(NSString *)eventData {
  ASViewImpl_startDragWithASIWidget_withNSString_(w, eventData);
}

+ (void)setOnDragWithASIWidget:(id<ASIWidget>)w
                        withId:(id)nativeView
                        withId:(id)objValue {
  ASViewImpl_setOnDragWithASIWidget_withId_withId_(w, nativeView, objValue);
}

+ (void)setAsDragSourceWithASIWidget:(id<ASIWidget>)w
                              withId:(id)nativeWidget
                              withId:(id)objValue {
  ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

+ (id)getClipDataWithADView_DragEvent:(ADView_DragEvent *)event {
  return ASViewImpl_getClipDataWithADView_DragEvent_(event);
}

+ (id)getForegroundWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getForegroundWithASIWidget_(w);
}

+ (id)getBackgroundWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_getBackgroundWithASIWidget_(w);
}

+ (void)setOnKeyWithASIWidget:(id<ASIWidget>)w
                       withId:(id)objValue {
  ASViewImpl_setOnKeyWithASIWidget_withId_(w, objValue);
}

+ (void)setLayerCornerRadiusWithId:(id)nativeWidget
                            withId:(id)objValue {
  ASViewImpl_setLayerCornerRadiusWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeSetLayerCornerRadiusWithId:(id)nativeWidget
                               withFloat:(jfloat)value {
  ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(nativeWidget, value);
}

+ (void)setLayerBorderColorWithId:(id)nativeWidget
                           withId:(id)objValue {
  ASViewImpl_setLayerBorderColorWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeLayerBorderColorWithId:(id)nativeWidget
                              withId:(id)value {
  ASViewImpl_nativeLayerBorderColorWithId_withId_(nativeWidget, value);
}

+ (void)setLayerBorderWidthWithId:(id)nativeWidget
                           withId:(id)objValue {
  ASViewImpl_setLayerBorderWidthWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeLayerBorderWidthWithId:(id)nativeWidget
                           withFloat:(jfloat)value {
  ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(nativeWidget, value);
}

+ (void)setLayerMasksToBoundsWithId:(id)nativeWidget
                             withId:(id)objValue {
  ASViewImpl_setLayerMasksToBoundsWithId_withId_(nativeWidget, objValue);
}

+ (void)nativeLayerBMasksToBoundsWithId:(id)nativeWidget
                            withBoolean:(jboolean)value {
  ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(nativeWidget, value);
}

+ (void)nativeBringToFrontWithJavaUtilList:(id<JavaUtilList>)widgets {
  ASViewImpl_nativeBringToFrontWithJavaUtilList_(widgets);
}

+ (void)nativeBringToFrontWithId:(id)nativeWidget {
  ASViewImpl_nativeBringToFrontWithId_(nativeWidget);
}

+ (void)addEventInfoWithJavaUtilMap:(id<JavaUtilMap>)obj
                     withADMenuItem:(id<ADMenuItem>)item {
  ASViewImpl_addEventInfoWithJavaUtilMap_withADMenuItem_(obj, item);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 4, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 2, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 6, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 9, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 12, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 13, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 14, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 15, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 16, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 18, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 19, 17, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 20, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 21, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 22, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 27, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 28, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 29, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 30, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 33, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 35, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 36, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 37, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 38, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 39, 40, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 41, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 42, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 43, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 44, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 45, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 46, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 47, 11, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 48, 17, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 49, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 50, 24, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 51, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 53, -1, 54, -1, -1 },
    { NULL, "V", 0x9, 52, 55, -1, 56, -1, -1 },
    { NULL, "V", 0x9, 52, 57, -1, 58, -1, -1 },
    { NULL, "V", 0x9, 52, 59, -1, 60, -1, -1 },
    { NULL, "V", 0xa, 61, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 62, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 63, 32, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x9, 64, 26, -1, 65, -1, -1 },
    { NULL, "V", 0xa, 66, 67, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 68, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 69, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 70, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 71, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 72, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 73, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 74, 75, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 76, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 77, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 78, 67, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 79, 80, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 81, 80, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 81, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 82, 83, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 84, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 85, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 86, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 87, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 88, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 89, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 90, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 91, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 92, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 94, 95, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 96, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 97, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 99, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 100, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 101, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 102, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 103, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 104, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 105, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 106, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 107, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 108, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 109, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 110, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 111, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 112, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 113, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 114, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 115, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 116, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 117, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 118, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 119, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 120, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 121, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 122, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 123, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 124, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 125, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 126, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 127, 93, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 128, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 129, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 130, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 131, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 132, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 133, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 134, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 135, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 136, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 137, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 138, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 139, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 140, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 141, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 142, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 143, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 144, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 145, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 146, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 147, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 148, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 149, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 150, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 151, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 152, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 153, 154, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 155, 156, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 157, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 158, 154, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 153, 156, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 159, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 160, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 161, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 161, 162, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 163, 164, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 165, 166, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 167, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 168, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 169, 93, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 170, 93, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 171, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 172, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 173, 98, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 174, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 174, 175, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 176, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 177, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 178, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 179, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 180, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x9, 181, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 182, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 183, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 184, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 185, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 186, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 187, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 188, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 189, 190, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 191, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 192, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 193, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 194, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0x10a, 195, 93, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 196, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 197, 190, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 198, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 198, 199, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 200, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 201, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 202, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 203, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 204, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 205, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 206, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 207, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 208, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 209, 32, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 210, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 211, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 212, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 213, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 214, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 215, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 216, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 217, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 218, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 219, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 220, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 221, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 222, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 223, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 224, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 225, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 224, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 225, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 226, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 227, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x109, 228, 98, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x109, 229, 93, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 230, 34, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 231, 83, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 232, 34, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 233, 34, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 234, 235, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 236, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0xa, 237, 26, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 238, 32, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 239, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 240, 241, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 242, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 243, 98, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 244, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 245, 241, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 246, 98, -1, -1, -1, -1 },
    { NULL, "V", 0x10a, 247, 190, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 248, 249, -1, 250, -1, -1 },
    { NULL, "V", 0x109, 248, 93, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 52, 251, -1, 252, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(register__WithNSString:);
  methods[2].selector = @selector(setAttributeWithASIWidget:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[3].selector = @selector(setAttributeWithASIWidget:withASSimpleWrapableView:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[4].selector = @selector(setAttributeWithASIWidget:withId:withASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[5].selector = @selector(getAttributeWithASIWidget:withASWidgetAttribute:withASILifeCycleDecorator:);
  methods[6].selector = @selector(getAttributeWithASIWidget:withId:withASWidgetAttribute:withASILifeCycleDecorator:);
  methods[7].selector = @selector(checkIosVersionWithNSString:);
  methods[8].selector = @selector(setPaddingWithId:withADView:);
  methods[9].selector = @selector(setPaddingLeftWithId:withADView:);
  methods[10].selector = @selector(setPaddingRightWithId:withADView:);
  methods[11].selector = @selector(setPaddingTopWithId:withADView:);
  methods[12].selector = @selector(setPaddingBottomWithId:withADView:);
  methods[13].selector = @selector(getPaddingTopWithASIWidget:withADView:);
  methods[14].selector = @selector(getPaddingBottomWithASIWidget:withADView:);
  methods[15].selector = @selector(getPaddingLeftWithASIWidget:withADView:);
  methods[16].selector = @selector(getPaddingRightWithASIWidget:withADView:);
  methods[17].selector = @selector(setPaddingHorizontalWithId:withADView:);
  methods[18].selector = @selector(setPaddingVerticalWithId:withADView:);
  methods[19].selector = @selector(setIdWithASIWidget:withNSString:withId:withADView:);
  methods[20].selector = @selector(getModelSyncEventsWithASIWidget:);
  methods[21].selector = @selector(setModelSyncEventsWithASIWidget:withNSString:withId:withADView:);
  methods[22].selector = @selector(setModelParamWithASIWidget:withNSString:withId:withADView:);
  methods[23].selector = @selector(setModelPojoToUiWithASIWidget:withNSString:withId:withADView:);
  methods[24].selector = @selector(setModelUiToPojoWithASIWidget:withNSString:withId:withADView:);
  methods[25].selector = @selector(notifyDataSetChangedWithASIWidget:withId:);
  methods[26].selector = @selector(updateModelDataWithASIWidget:withId:withId:);
  methods[27].selector = @selector(getModelUiToPojoWithASIWidget:);
  methods[28].selector = @selector(getModelPojoToUiWithASIWidget:);
  methods[29].selector = @selector(getModelParamWithASIWidget:);
  methods[30].selector = @selector(setModelPojoToUiParamsWithASIWidget:withId:);
  methods[31].selector = @selector(refreshUiFromModelWithASIWidget:withId:);
  methods[32].selector = @selector(refreshUiFromModelWithASIWidget:withId:withBoolean:);
  methods[33].selector = @selector(setModelUiToPojoEventIdsWithASIWidget:withId:);
  methods[34].selector = @selector(setZIndexWithASIWidget:withId:);
  methods[35].selector = @selector(setMaxHeightWithASIWidget:withId:);
  methods[36].selector = @selector(setMaxWidthWithASIWidget:withId:);
  methods[37].selector = @selector(getMaxWidthWithASIWidget:);
  methods[38].selector = @selector(getMaxHeightWithASIWidget:);
  methods[39].selector = @selector(setSelectedWithId:withADView:);
  methods[40].selector = @selector(getSelectedWithASIWidget:withADView:);
  methods[41].selector = @selector(setInvalidateOnFrameChangeWithASIWidget:withId:);
  methods[42].selector = @selector(setBackgroundRepeatWithASIWidget:withNSString:withId:withADView:);
  methods[43].selector = @selector(setForegroundRepeatWithASIWidget:withNSString:withId:withADView:);
  methods[44].selector = @selector(addEventInfoWithJavaUtilMap:withADView_MotionEvent:);
  methods[45].selector = @selector(addEventInfoWithJavaUtilMap:withADKeyEvent:);
  methods[46].selector = @selector(addEventInfoWithJavaUtilMap:withADView_DragEvent:);
  methods[47].selector = @selector(addEventInfoWithJavaUtilMap:withADChronometer:withASIFragment:);
  methods[48].selector = @selector(validateFormWithASIWidget:withId:);
  methods[49].selector = @selector(getValidateFormResultWithASIWidget:);
  methods[50].selector = @selector(setValidationWithASIWidget:withId:);
  methods[51].selector = @selector(getFormsWithASIWidget:);
  methods[52].selector = @selector(setTypeWithASIWidget:withNSString:withId:);
  methods[53].selector = @selector(setPatternWithASIWidget:withId:);
  methods[54].selector = @selector(setMaxWithASIWidget:withId:);
  methods[55].selector = @selector(setMinWithASIWidget:withId:);
  methods[56].selector = @selector(setMaxlengthWithASIWidget:withId:);
  methods[57].selector = @selector(setMinlengthWithASIWidget:withId:);
  methods[58].selector = @selector(setRequiredWithASIWidget:withId:);
  methods[59].selector = @selector(addValidatorWithASIWidget:withNSString:withNSStringArray:);
  methods[60].selector = @selector(setCustomErrorMessageKeysWithASIWidget:withId:);
  methods[61].selector = @selector(setCustomErrorMessageValuesWithASIWidget:withId:);
  methods[62].selector = @selector(setValidationErrorDisplayWithASIWidget:withNSString:withId:);
  methods[63].selector = @selector(setErrorStyleWithASIWidget:withADView:withId:);
  methods[64].selector = @selector(setStyleWithASIWidget:withADView:withId:);
  methods[65].selector = @selector(setStyleWithASIWidget:withId:);
  methods[66].selector = @selector(setMessageOnLabelWithASIWidget:withNSString:);
  methods[67].selector = @selector(setLayoutDirectionWithASIWidget:withId:);
  methods[68].selector = @selector(getLayoutDirectionWithASIWidget:);
  methods[69].selector = @selector(setTextAlignmentWithASIWidget:withId:);
  methods[70].selector = @selector(setTextDirectionWithASIWidget:withId:);
  methods[71].selector = @selector(getTextAlignmentWithASIWidget:);
  methods[72].selector = @selector(getTextDirectionWithASIWidget:);
  methods[73].selector = @selector(isRTLLayoutDirectionWithASIWidget:);
  methods[74].selector = @selector(drawableStateChangedWithASIWidget:);
  methods[75].selector = @selector(getColorWithId:);
  methods[76].selector = @selector(setDrawableBoundsWithASIWidget:withInt:withInt:withInt:withInt:);
  methods[77].selector = @selector(redrawDrawablesWithASIWidget:);
  methods[78].selector = @selector(setBackgroundColorWithId:withId:);
  methods[79].selector = @selector(getBackgroundColorWithId:);
  methods[80].selector = @selector(setIsHiddenWithId:withId:);
  methods[81].selector = @selector(getIsHiddenWithId:);
  methods[82].selector = @selector(setAlphaWithId:withId:);
  methods[83].selector = @selector(getAlphaWithId:);
  methods[84].selector = @selector(setIsOpaqueWithId:withId:);
  methods[85].selector = @selector(getIsOpaqueWithId:);
  methods[86].selector = @selector(setTintColorWithId:withId:);
  methods[87].selector = @selector(getTintColorWithId:);
  methods[88].selector = @selector(setClipsToBoundsWithId:withId:);
  methods[89].selector = @selector(getClipsToBoundsWithId:);
  methods[90].selector = @selector(setClearsContextBeforeDrawingWithId:withId:);
  methods[91].selector = @selector(getClearsContextBeforeDrawingWithId:);
  methods[92].selector = @selector(setIsUserInteractionEnabledWithId:withId:);
  methods[93].selector = @selector(getIsUserInteractionEnabledWithId:);
  methods[94].selector = @selector(setIsMultipleTouchEnabledWithId:withId:);
  methods[95].selector = @selector(getIsMultipleTouchEnabledWithId:);
  methods[96].selector = @selector(setIsExclusiveTouchWithId:withId:);
  methods[97].selector = @selector(getIsExclusiveTouchWithId:);
  methods[98].selector = @selector(setPreservesSuperviewLayoutMarginsWithId:withId:);
  methods[99].selector = @selector(getPreservesSuperviewLayoutMarginsWithId:);
  methods[100].selector = @selector(setInsetsLayoutMarginsFromSafeAreaWithId:withId:);
  methods[101].selector = @selector(getInsetsLayoutMarginsFromSafeAreaWithId:);
  methods[102].selector = @selector(setAutoresizesSubviewsWithId:withId:);
  methods[103].selector = @selector(getAutoresizesSubviewsWithId:);
  methods[104].selector = @selector(setTranslatesAutoresizingMaskIntoConstraintsWithId:withId:);
  methods[105].selector = @selector(getTranslatesAutoresizingMaskIntoConstraintsWithId:);
  methods[106].selector = @selector(setContentScaleFactorWithId:withId:);
  methods[107].selector = @selector(getContentScaleFactorWithId:);
  methods[108].selector = @selector(getIsFocusedWithId:);
  methods[109].selector = @selector(setRestorationIdentifierWithId:withId:);
  methods[110].selector = @selector(getRestorationIdentifierWithId:);
  methods[111].selector = @selector(setTagWithId:withId:);
  methods[112].selector = @selector(getTagWithId:);
  methods[113].selector = @selector(setAccessibilityIgnoresInvertColorsWithId:withId:);
  methods[114].selector = @selector(getAccessibilityIgnoresInvertColorsWithId:);
  methods[115].selector = @selector(setLargeContentImageWithId:withId:);
  methods[116].selector = @selector(getLargeContentImageWithId:);
  methods[117].selector = @selector(setLargeContentTitleWithId:withId:);
  methods[118].selector = @selector(getLargeContentTitleWithId:);
  methods[119].selector = @selector(setScalesLargeContentImageWithId:withId:);
  methods[120].selector = @selector(getScalesLargeContentImageWithId:);
  methods[121].selector = @selector(setShowsLargeContentViewerWithId:withId:);
  methods[122].selector = @selector(getShowsLargeContentViewerWithId:);
  methods[123].selector = @selector(setIsAccessibilityElementWithId:withId:);
  methods[124].selector = @selector(getIsAccessibilityElementWithId:);
  methods[125].selector = @selector(setAccessibilityLabelWithId:withId:);
  methods[126].selector = @selector(getAccessibilityLabelWithId:);
  methods[127].selector = @selector(setAccessibilityHintWithId:withId:);
  methods[128].selector = @selector(getAccessibilityHintWithId:);
  methods[129].selector = @selector(setAccessibilityValueWithId:withId:);
  methods[130].selector = @selector(getAccessibilityValueWithId:);
  methods[131].selector = @selector(setAccessibilityTraitsWithId:withId:);
  methods[132].selector = @selector(getAccessibilityTraitsWithId:);
  methods[133].selector = @selector(nativeMakeFrameWithId:withInt:withInt:withInt:withInt:withInt:);
  methods[134].selector = @selector(updateBoundsWithId:withInt:withInt:withInt:withInt:);
  methods[135].selector = @selector(getFirstChildOrSelfWithId:);
  methods[136].selector = @selector(nativeMakeFrameForHorizontalScrollViewWithId:withInt:withInt:withInt:withInt:withInt:);
  methods[137].selector = @selector(nativeMakeFrameWithId:withInt:withInt:withInt:withInt:);
  methods[138].selector = @selector(isRTLLayoutWithASIWidget:);
  methods[139].selector = @selector(isRTLLayout);
  methods[140].selector = @selector(setBgOnControlWithASIWidget:withId:withId:);
  methods[141].selector = @selector(setBackgroundWithASIWidget:withId:withId:);
  methods[142].selector = @selector(setBackgroundWithASIWidget:withId:withId:withBoolean:);
  methods[143].selector = @selector(updateWidthAndHeightWithASIWidget:withADStateListDrawable:withId:withNSString:withNSString:);
  methods[144].selector = @selector(setBgDrawabeOnViewWithInt:withInt:withADView:);
  methods[145].selector = @selector(isColorWithId:);
  methods[146].selector = @selector(isResizableImageWithId:);
  methods[147].selector = @selector(isImageWithId:);
  methods[148].selector = @selector(getImageWidthWithId:);
  methods[149].selector = @selector(getImageHeightWithId:);
  methods[150].selector = @selector(clearBgColorWithId:withId:);
  methods[151].selector = @selector(nativeSetBgColorWithId:withId:);
  methods[152].selector = @selector(setOnClickWithASIWidget:withId:withId:);
  methods[153].selector = @selector(setOnClickWithASIWidget:withNSString:withId:withADView_OnClickListener:);
  methods[154].selector = @selector(setMinHeightWithASIWidget:withId:);
  methods[155].selector = @selector(setMinWidthWithASIWidget:withId:);
  methods[156].selector = @selector(getMinHeightWithASIWidget:);
  methods[157].selector = @selector(getMinWidthWithASIWidget:);
  methods[158].selector = @selector(registerCommandConveterWithASIWidget:);
  methods[159].selector = @selector(isNativeRtlSupported);
  methods[160].selector = @selector(getParentWithASIWidget:);
  methods[161].selector = @selector(setBackgroundTintModeWithASIWidget:withId:);
  methods[162].selector = @selector(setBackgroundTintWithASIWidget:withId:);
  methods[163].selector = @selector(setForegroundTintModeWithASIWidget:withId:);
  methods[164].selector = @selector(setForegroundTintWithASIWidget:withId:);
  methods[165].selector = @selector(setForegroundWithASIWidget:withId:withId:);
  methods[166].selector = @selector(setFgOnControlWithASIWidget:withId:withId:);
  methods[167].selector = @selector(setVisibilityWithASIWidget:withId:withId:);
  methods[168].selector = @selector(nativeSetVisibilityWithId:withBoolean:);
  methods[169].selector = @selector(getVisibilityWithASIWidget:);
  methods[170].selector = @selector(setLongClickableWithASIWidget:withId:);
  methods[171].selector = @selector(getLongClickableWithASIWidget:);
  methods[172].selector = @selector(getClickableWithId:);
  methods[173].selector = @selector(nativeGetClickableWithId:);
  methods[174].selector = @selector(setClickableWithASIWidget:withId:withId:);
  methods[175].selector = @selector(nativeSetClickableWithId:withBoolean:);
  methods[176].selector = @selector(setOnLongClickWithASIWidget:withId:withId:);
  methods[177].selector = @selector(setOnLongClickWithASIWidget:withId:withADView_OnLongClickListener:);
  methods[178].selector = @selector(setTranslationXWithASIWidget:withId:);
  methods[179].selector = @selector(setTranslationYWithASIWidget:withId:);
  methods[180].selector = @selector(setTranslationZWithASIWidget:withId:);
  methods[181].selector = @selector(setTransformPivotYWithASIWidget:withId:);
  methods[182].selector = @selector(setTransformPivotXWithASIWidget:withId:);
  methods[183].selector = @selector(setScaleYWithASIWidget:withId:);
  methods[184].selector = @selector(setScaleXWithASIWidget:withId:);
  methods[185].selector = @selector(setRotationYWithASIWidget:withId:);
  methods[186].selector = @selector(setRotationXWithASIWidget:withId:);
  methods[187].selector = @selector(setRotationWithASIWidget:withId:);
  methods[188].selector = @selector(getTranslationXWithASIWidget:);
  methods[189].selector = @selector(getTransformPivotYWithASIWidget:);
  methods[190].selector = @selector(getTransformPivotXWithASIWidget:);
  methods[191].selector = @selector(getScaleYWithASIWidget:);
  methods[192].selector = @selector(getScaleXWithASIWidget:);
  methods[193].selector = @selector(getRotationYWithASIWidget:);
  methods[194].selector = @selector(getRotationXWithASIWidget:);
  methods[195].selector = @selector(getRotationWithASIWidget:);
  methods[196].selector = @selector(getTranslationZWithASIWidget:);
  methods[197].selector = @selector(getTranslationYWithASIWidget:);
  methods[198].selector = @selector(getForegroundTintWithASIWidget:);
  methods[199].selector = @selector(getForegroundTintModeWithASIWidget:);
  methods[200].selector = @selector(getBackgroundTintModeWithASIWidget:);
  methods[201].selector = @selector(getBackgroundTintWithASIWidget:);
  methods[202].selector = @selector(requestLayoutWithASIWidget:);
  methods[203].selector = @selector(invalidateWithASIWidget:);
  methods[204].selector = @selector(requestLayoutWithASIWidget:withId:);
  methods[205].selector = @selector(invalidateWithASIWidget:withId:);
  methods[206].selector = @selector(nativeRequestLayoutWithId:);
  methods[207].selector = @selector(nativeInvalidateWithId:);
  methods[208].selector = @selector(setKeepScreenOnWithId:withId:);
  methods[209].selector = @selector(getKeepScreenOnWithId:);
  methods[210].selector = @selector(isMirrorSupported);
  methods[211].selector = @selector(setOnTouchWithASIWidget:withId:withId:);
  methods[212].selector = @selector(startDragWithASIWidget:withNSString:);
  methods[213].selector = @selector(setOnDragWithASIWidget:withId:withId:);
  methods[214].selector = @selector(setAsDragSourceWithASIWidget:withId:withId:);
  methods[215].selector = @selector(getClipDataWithADView_DragEvent:);
  methods[216].selector = @selector(getForegroundWithASIWidget:);
  methods[217].selector = @selector(getBackgroundWithASIWidget:);
  methods[218].selector = @selector(setOnKeyWithASIWidget:withId:);
  methods[219].selector = @selector(setLayerCornerRadiusWithId:withId:);
  methods[220].selector = @selector(nativeSetLayerCornerRadiusWithId:withFloat:);
  methods[221].selector = @selector(setLayerBorderColorWithId:withId:);
  methods[222].selector = @selector(nativeLayerBorderColorWithId:withId:);
  methods[223].selector = @selector(setLayerBorderWidthWithId:withId:);
  methods[224].selector = @selector(nativeLayerBorderWidthWithId:withFloat:);
  methods[225].selector = @selector(setLayerMasksToBoundsWithId:withId:);
  methods[226].selector = @selector(nativeLayerBMasksToBoundsWithId:withBoolean:);
  methods[227].selector = @selector(nativeBringToFrontWithJavaUtilList:);
  methods[228].selector = @selector(nativeBringToFrontWithId:);
  methods[229].selector = @selector(addEventInfoWithJavaUtilMap:withADMenuItem:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "register", "LNSString;", "setAttribute", "LASIWidget;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "LASIWidget;LASSimpleWrapableView;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "LASIWidget;LNSObject;LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASIWidget;LASWidgetAttribute;LASILifeCycleDecorator;", "LASIWidget;LNSObject;LASWidgetAttribute;LASILifeCycleDecorator;", "checkIosVersion", "setPadding", "LNSObject;LADView;", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "getPaddingTop", "LASIWidget;LADView;", "getPaddingBottom", "getPaddingLeft", "getPaddingRight", "setPaddingHorizontal", "setPaddingVertical", "setId", "LASIWidget;LNSString;LNSObject;LADView;", "getModelSyncEvents", "LASIWidget;", "setModelSyncEvents", "setModelParam", "setModelPojoToUi", "setModelUiToPojo", "notifyDataSetChanged", "LASIWidget;LNSObject;", "updateModelData", "LASIWidget;LNSObject;LNSObject;", "getModelUiToPojo", "getModelPojoToUi", "getModelParam", "setModelPojoToUiParams", "refreshUiFromModel", "LASIWidget;LNSObject;Z", "setModelUiToPojoEventIds", "setZIndex", "setMaxHeight", "setMaxWidth", "getMaxWidth", "getMaxHeight", "setSelected", "getSelected", "setInvalidateOnFrameChange", "setBackgroundRepeat", "setForegroundRepeat", "addEventInfo", "LJavaUtilMap;LADView_MotionEvent;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/View$MotionEvent;)V", "LJavaUtilMap;LADKeyEvent;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/KeyEvent;)V", "LJavaUtilMap;LADView_DragEvent;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/View$DragEvent;)V", "LJavaUtilMap;LADChronometer;LASIFragment;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/widget/Chronometer;Lcom/ashera/core/IFragment;)V", "validateForm", "getValidateFormResult", "setValidation", "getForms", "(Lcom/ashera/widget/IWidget;)Ljava/util/List<Lcom/ashera/validations/Form;>;", "setType", "LASIWidget;LNSString;LNSObject;", "setPattern", "setMax", "setMin", "setMaxlength", "setMinlength", "setRequired", "addValidator", "LASIWidget;LNSString;[LNSString;", "setCustomErrorMessageKeys", "setCustomErrorMessageValues", "setValidationErrorDisplay", "setErrorStyle", "LASIWidget;LADView;LNSObject;", "setStyle", "setMessageOnLabel", "LASIWidget;LNSString;", "setLayoutDirection", "getLayoutDirection", "setTextAlignment", "setTextDirection", "getTextAlignment", "getTextDirection", "isRTLLayoutDirection", "drawableStateChanged", "getColor", "LNSObject;", "setDrawableBounds", "LASIWidget;IIII", "redrawDrawables", "setBackgroundColor", "LNSObject;LNSObject;", "getBackgroundColor", "setIsHidden", "getIsHidden", "setAlpha", "getAlpha", "setIsOpaque", "getIsOpaque", "setTintColor", "getTintColor", "setClipsToBounds", "getClipsToBounds", "setClearsContextBeforeDrawing", "getClearsContextBeforeDrawing", "setIsUserInteractionEnabled", "getIsUserInteractionEnabled", "setIsMultipleTouchEnabled", "getIsMultipleTouchEnabled", "setIsExclusiveTouch", "getIsExclusiveTouch", "setPreservesSuperviewLayoutMargins", "getPreservesSuperviewLayoutMargins", "setInsetsLayoutMarginsFromSafeArea", "getInsetsLayoutMarginsFromSafeArea", "setAutoresizesSubviews", "getAutoresizesSubviews", "setTranslatesAutoresizingMaskIntoConstraints", "getTranslatesAutoresizingMaskIntoConstraints", "setContentScaleFactor", "getContentScaleFactor", "getIsFocused", "setRestorationIdentifier", "getRestorationIdentifier", "setTag", "getTag", "setAccessibilityIgnoresInvertColors", "getAccessibilityIgnoresInvertColors", "setLargeContentImage", "getLargeContentImage", "setLargeContentTitle", "getLargeContentTitle", "setScalesLargeContentImage", "getScalesLargeContentImage", "setShowsLargeContentViewer", "getShowsLargeContentViewer", "setIsAccessibilityElement", "getIsAccessibilityElement", "setAccessibilityLabel", "getAccessibilityLabel", "setAccessibilityHint", "getAccessibilityHint", "setAccessibilityValue", "getAccessibilityValue", "setAccessibilityTraits", "getAccessibilityTraits", "nativeMakeFrame", "LNSObject;IIIII", "updateBounds", "LNSObject;IIII", "getFirstChildOrSelf", "nativeMakeFrameForHorizontalScrollView", "isRTLLayout", "setBgOnControl", "setBackground", "LASIWidget;LNSObject;LNSObject;Z", "updateWidthAndHeight", "LASIWidget;LADStateListDrawable;LNSObject;LNSString;LNSString;", "setBgDrawabeOnView", "IILADView;", "isColor", "isResizableImage", "isImage", "getImageWidth", "getImageHeight", "clearBgColor", "nativeSetBgColor", "setOnClick", "LASIWidget;LNSString;LNSObject;LADView_OnClickListener;", "setMinHeight", "setMinWidth", "getMinHeight", "getMinWidth", "registerCommandConveter", "getParent", "setBackgroundTintMode", "setBackgroundTint", "setForegroundTintMode", "setForegroundTint", "setForeground", "setFgOnControl", "setVisibility", "nativeSetVisibility", "LNSObject;Z", "getVisibility", "setLongClickable", "getLongClickable", "getClickable", "nativeGetClickable", "setClickable", "nativeSetClickable", "setOnLongClick", "LASIWidget;LNSObject;LADView_OnLongClickListener;", "setTranslationX", "setTranslationY", "setTranslationZ", "setTransformPivotY", "setTransformPivotX", "setScaleY", "setScaleX", "setRotationY", "setRotationX", "setRotation", "getTranslationX", "getTransformPivotY", "getTransformPivotX", "getScaleY", "getScaleX", "getRotationY", "getRotationX", "getRotation", "getTranslationZ", "getTranslationY", "getForegroundTint", "getForegroundTintMode", "getBackgroundTintMode", "getBackgroundTint", "requestLayout", "invalidate", "nativeRequestLayout", "nativeInvalidate", "setKeepScreenOn", "getKeepScreenOn", "setOnTouch", "startDrag", "setOnDrag", "setAsDragSource", "getClipData", "LADView_DragEvent;", "getForeground", "getBackground", "setOnKey", "setLayerCornerRadius", "nativeSetLayerCornerRadius", "LNSObject;F", "setLayerBorderColor", "nativeLayerBorderColor", "setLayerBorderWidth", "nativeLayerBorderWidth", "setLayerMasksToBounds", "nativeLayerBMasksToBounds", "nativeBringToFront", "LJavaUtilList;", "(Ljava/util/List<Lcom/ashera/widget/IWidget;>;)V", "LJavaUtilMap;LADMenuItem;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lr/android/view/MenuItem;)V", "LASViewImpl_IosAccessibilityTraits;LASViewImpl_BackgroundRepeat;LASViewImpl_BackgroundTintMode;LASViewImpl_ForegroundRepeat;LASViewImpl_ForegroundTintMode;LASViewImpl_Visibility;LASViewImpl_LayoutDirection;LASViewImpl_TextDirection;LASViewImpl_TextAlignment;LASViewImpl_Vtype;LASViewImpl_ValidationErrorDisplay;LASViewImpl_OnClickListener;LASViewImpl_OnTouchListener;LASViewImpl_OnLongClickListener;LASViewImpl_OnDragListener;LASViewImpl_OnKeyListener;LASViewImpl_ViewCommandBuilder;LASViewImpl_ViewCommandBuilderInternal;LASViewImpl_ViewBean;LASViewImpl_UIControlEventTouchDelegate;LASViewImpl_UILongTapGestureRecognizerDelegate;LASViewImpl_UITapGestureRecognizerDelegate;LASViewImpl_UIDragInteractionDelegate;LASViewImpl_UIDropInteractionDelegate;" };
  static const J2ObjcClassInfo _ASViewImpl = { "ViewImpl", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x1, 230, 0, -1, 253, -1, -1, -1 };
  return &_ASViewImpl;
}

@end

void ASViewImpl_init(ASViewImpl *self) {
  NSObject_init(self);
}

ASViewImpl *new_ASViewImpl_init() {
  J2OBJC_NEW_IMPL(ASViewImpl, init)
}

ASViewImpl *create_ASViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl, init)
}

void ASViewImpl_register__WithNSString_(NSString *localName) {
  ASViewImpl_initialize();
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosBackgroundColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsHidden"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAlpha"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsOpaque"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTintColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClipsToBounds"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsContextBeforeDrawing"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsUserInteractionEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsMultipleTouchEnabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsExclusiveTouch"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosPreservesSuperviewLayoutMargins"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInsetsLayoutMarginsFromSafeArea"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAutoresizesSubviews"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTranslatesAutoresizingMaskIntoConstraints"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosContentScaleFactor"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsFocused"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosRestorationIdentifier"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTag"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityIgnoresInvertColors"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLargeContentImage"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLargeContentTitle"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosScalesLargeContentImage"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosShowsLargeContentViewer"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsAccessibilityElement"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"focusable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityLabel"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityHint"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"contentDescription"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityValue"])) withTypeWithNSString:@"resourcestring"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.iosAccessibilityTraits", new_ASViewImpl_IosAccessibilityTraits_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAccessibilityTraits"])) withTypeWithNSString:@"View.iosAccessibilityTraits"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"id"])) withTypeWithNSString:@"id"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelSyncEvents"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelParam"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelPojoToUi"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelUiToPojo"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelPojoToUiParams"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"refreshUiFromModel"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"modelUiToPojoEventIds"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"updateModelData"])) withTypeWithNSString:@"object"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"notifyDataSetChanged"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"background"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.backgroundRepeat", new_ASViewImpl_BackgroundRepeat_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundRepeat"])) withTypeWithNSString:@"View.backgroundRepeat"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTouch"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"attributeUnderTest"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundTint"])) withTypeWithNSString:@"colorstate"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.backgroundTintMode", new_ASViewImpl_BackgroundTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"backgroundTintMode"])) withTypeWithNSString:@"View.backgroundTintMode"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foreground"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.foregroundRepeat", new_ASViewImpl_ForegroundRepeat_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundRepeat"])) withTypeWithNSString:@"View.foregroundRepeat"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundTint"])) withTypeWithNSString:@"colorstate"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.foregroundTintMode", new_ASViewImpl_ForegroundTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundTintMode"])) withTypeWithNSString:@"View.foregroundTintMode"])) withOrderWithInt:-10])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.visibility", new_ASViewImpl_Visibility_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"visibility"])) withTypeWithNSString:@"View.visibility"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"alpha"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onLongClick"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"longClickable"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"clickable"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"translationX"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"translationY"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"translationZ"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rotation"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rotationX"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"rotationY"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scaleX"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scaleY"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transformPivotX"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"transformPivotY"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"invalidate"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"requestLayout"])) withTypeWithNSString:@"nil"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"keepScreenOn"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.layoutDirection", new_ASViewImpl_LayoutDirection_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"layoutDirection"])) withTypeWithNSString:@"View.layoutDirection"])) beforeChildAdd]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.textDirection", new_ASViewImpl_TextDirection_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textDirection"])) withTypeWithNSString:@"View.textDirection"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.textAlignment", new_ASViewImpl_TextAlignment_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAlignment"])) withTypeWithNSString:@"View.textAlignment"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onDrag"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"asDragSource"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"duplicateParentState"])) withTypeWithNSString:@"boolean"])) beforeChildAdd]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"foregroundGravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onKey"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerBorderWidth"])) withTypeWithNSString:@"dimensionfloat"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerBorderColor"])) withTypeWithNSString:@"color"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerCornerRadius"])) withTypeWithNSString:@"dimensionfloat"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosLayerMasksToBounds"])) withTypeWithNSString:@"boolean"])) withSimpleWrapableViewStrategyWithInt:ASIWidget_APPLY_TO_VIEW_HOLDER]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"zIndex"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selected"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:10]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"style"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"errorStyle"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"validateForm"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"validation"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_required"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_minlength"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_maxlength"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_min"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_max"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_pattern"])) withTypeWithNSString:@"resourcestring"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.vtype", new_ASViewImpl_Vtype_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"v_type"])) withTypeWithNSString:@"View.vtype"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"View.validationErrorDisplay", new_ASViewImpl_ValidationErrorDisplay_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"validationErrorDisplayType"])) withTypeWithNSString:@"View.validationErrorDisplay"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"customErrorMessageValues"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"customErrorMessageKeys"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"invalidateOnFrameChange"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"formGroupId"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enableFeatures"])) withTypeWithNSString:@"string"]);
  id<JavaUtilList> attributables = ASWidgetFactory_getAttributablesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"View", localName } count:2 type:NSString_class_()]);
  if (attributables != nil) {
    for (id<ASIAttributable> __strong attributable in attributables) {
      [((id<ASIAttributable>) nil_chk(attributable)) loadAttributesWithNSString:localName];
    }
  }
}

void ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [((id<ASIWidget>) nil_chk(w)) asNativeWidget], key, strValue, objValue, decorator);
}

void ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, ASSimpleWrapableView *wrapperView, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  if ([((ASSimpleWrapableView *) nil_chk(wrapperView)) isViewWrapped] && [((ASWidgetAttribute *) nil_chk(key)) getSimpleWrapableViewStrategy] != 0) {
    if (([((ASWidgetAttribute *) nil_chk(key)) getSimpleWrapableViewStrategy] & ASIWidget_APPLY_TO_VIEW_WRAPPER) != 0) {
      ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [wrapperView getWrappedView], key, strValue, objValue, decorator);
    }
    if (([key getSimpleWrapableViewStrategy] & ASIWidget_APPLY_TO_VIEW_HOLDER) != 0) {
      ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [wrapperView getWrapperViewHolder], key, strValue, objValue, decorator);
    }
    if ((([key getSimpleWrapableViewStrategy] & ASIWidget_APPLY_TO_FOREGROUND) != 0) && [wrapperView getForeground] != nil) {
      ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [wrapperView getForeground], key, strValue, objValue, decorator);
    }
  }
  else {
    ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(w, [((id<ASIWidget>) nil_chk(w)) asNativeWidget], key, strValue, objValue, decorator);
  }
}

void ASViewImpl_setAttributeWithASIWidget_withId_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(id<ASIWidget> w, id nativeWidget, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  {
    id<JavaUtilList> attributables;
    switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosBackgroundColor", @"iosIsHidden", @"iosAlpha", @"iosIsOpaque", @"iosTintColor", @"iosClipsToBounds", @"iosClearsContextBeforeDrawing", @"iosIsUserInteractionEnabled", @"iosIsMultipleTouchEnabled", @"iosIsExclusiveTouch", @"iosPreservesSuperviewLayoutMargins", @"iosInsetsLayoutMarginsFromSafeArea", @"iosAutoresizesSubviews", @"iosTranslatesAutoresizingMaskIntoConstraints", @"iosContentScaleFactor", @"iosRestorationIdentifier", @"iosTag", @"iosAccessibilityIgnoresInvertColors", @"iosLargeContentImage", @"iosLargeContentTitle", @"iosScalesLargeContentImage", @"iosShowsLargeContentViewer", @"focusable", @"iosIsAccessibilityElement", @"iosAccessibilityLabel", @"contentDescription", @"iosAccessibilityHint", @"iosAccessibilityValue", @"iosAccessibilityTraits", @"id", @"modelSyncEvents", @"modelParam", @"modelPojoToUi", @"modelUiToPojo", @"modelPojoToUiParams", @"refreshUiFromModel", @"modelUiToPojoEventIds", @"updateModelData", @"notifyDataSetChanged", @"background", @"backgroundRepeat", @"onClick", @"onTouch", @"minWidth", @"minHeight", @"attributeUnderTest", @"backgroundTint", @"backgroundTintMode", @"foreground", @"foregroundRepeat", @"foregroundTint", @"foregroundTintMode", @"visibility", @"alpha", @"onLongClick", @"longClickable", @"clickable", @"translationX", @"translationY", @"translationZ", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY", @"invalidate", @"requestLayout", @"keepScreenOn", @"layoutDirection", @"textDirection", @"textAlignment", @"onDrag", @"asDragSource", @"enabled", @"duplicateParentState", @"foregroundGravity", @"onKey", @"iosLayerBorderWidth", @"iosLayerBorderColor", @"iosLayerCornerRadius", @"iosLayerMasksToBounds", @"zIndex", @"maxWidth", @"maxHeight", @"selected", @"style", @"errorStyle", @"validateForm", @"validation", @"v_required", @"v_minlength", @"v_maxlength", @"v_min", @"v_max", @"v_pattern", @"v_type", @"validationErrorDisplayType", @"customErrorMessageValues", @"customErrorMessageKeys", @"invalidateOnFrameChange" }, 102)) {
      case 0:
      {
        ASViewImpl_setBackgroundColorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 1:
      {
        ASViewImpl_setIsHiddenWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 2:
      {
        ASViewImpl_setAlphaWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 3:
      {
        ASViewImpl_setIsOpaqueWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 4:
      {
        ASViewImpl_setTintColorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 5:
      {
        ASViewImpl_setClipsToBoundsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 6:
      {
        ASViewImpl_setClearsContextBeforeDrawingWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 7:
      {
        ASViewImpl_setIsUserInteractionEnabledWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 8:
      {
        ASViewImpl_setIsMultipleTouchEnabledWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 9:
      {
        ASViewImpl_setIsExclusiveTouchWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 10:
      {
        ASViewImpl_setPreservesSuperviewLayoutMarginsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 11:
      {
        ASViewImpl_setInsetsLayoutMarginsFromSafeAreaWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 12:
      {
        ASViewImpl_setAutoresizesSubviewsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 13:
      {
        ASViewImpl_setTranslatesAutoresizingMaskIntoConstraintsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 14:
      {
        ASViewImpl_setContentScaleFactorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 15:
      {
        ASViewImpl_setRestorationIdentifierWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 16:
      {
        ASViewImpl_setTagWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 17:
      {
        ASViewImpl_setAccessibilityIgnoresInvertColorsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 18:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setLargeContentImageWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 19:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setLargeContentTitleWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 20:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setScalesLargeContentImageWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 21:
      {
        if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
          ASViewImpl_setShowsLargeContentViewerWithId_withId_(nativeWidget, objValue);
        }
      }
      break;
      case 22:
      case 23:
      {
        ASViewImpl_setIsAccessibilityElementWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 24:
      {
        ASViewImpl_setAccessibilityLabelWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 25:
      case 26:
      {
        ASViewImpl_setAccessibilityHintWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 27:
      {
        ASViewImpl_setAccessibilityValueWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 28:
      {
        ASViewImpl_setAccessibilityTraitsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 29:
      {
        ASViewImpl_setIdWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 30:
      {
        ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 31:
      {
        ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 32:
      {
        ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 33:
      {
        ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 34:
      {
        ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(w, objValue);
      }
      break;
      case 35:
      {
        ASViewImpl_refreshUiFromModelWithASIWidget_withId_(w, objValue);
      }
      break;
      case 36:
      {
        ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(w, objValue);
      }
      break;
      case 37:
      {
        if ([JavaUtilMap_class_() isInstance:objValue]) {
          id<JavaUtilMap> data = ((id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_()));
          id expression = [w quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"expression"] withNSString:@"string"];
          id payload = [w quickConvertWithId:[data getWithId:@"payload"] withNSString:@"object"];
          ASViewImpl_updateModelDataWithASIWidget_withId_withId_(w, expression, payload);
        }
        if ([JavaUtilList_class_() isInstance:objValue]) {
          id<JavaUtilList> list = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
          for (id __strong object in nil_chk(list)) {
            id<JavaUtilMap> data = ASPluginInvoker_getMapWithId_(object);
            id expression = [w quickConvertWithId:[((id<JavaUtilMap>) nil_chk(data)) getWithId:@"expression"] withNSString:@"string"];
            id payload = [w quickConvertWithId:[data getWithId:@"payload"] withNSString:@"object"];
            ASViewImpl_updateModelDataWithASIWidget_withId_withId_(w, expression, payload);
          }
        }
      }
      break;
      case 38:
      {
        ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(w, objValue);
      }
      break;
      case 39:
      {
        ASViewImpl_setBackgroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 40:
      {
        ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 41:
      {
        ASViewImpl_setOnClickWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 42:
      {
        ASViewImpl_setOnTouchWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 43:
      {
        ASViewImpl_setMinWidthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 44:
      {
        ASViewImpl_setMinHeightWithASIWidget_withId_(w, objValue);
      }
      break;
      case 45:
      {
      }
      break;
      case 46:
      {
        ASViewImpl_setBackgroundTintWithASIWidget_withId_(w, objValue);
      }
      break;
      case 47:
      {
        ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(w, objValue);
      }
      break;
      case 48:
      {
        ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 49:
      {
        ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(w, strValue, objValue, view);
      }
      break;
      case 50:
      {
        ASViewImpl_setForegroundTintWithASIWidget_withId_(w, objValue);
      }
      break;
      case 51:
      {
        ASViewImpl_setForegroundTintModeWithASIWidget_withId_(w, objValue);
      }
      break;
      case 52:
      {
        ASViewImpl_setVisibilityWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 53:
      {
        ASViewImpl_setAlphaWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 54:
      {
        ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 55:
      {
        ASViewImpl_setLongClickableWithASIWidget_withId_(w, objValue);
      }
      break;
      case 56:
      {
        ASViewImpl_setClickableWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 57:
      {
        ASViewImpl_setTranslationXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 58:
      {
        ASViewImpl_setTranslationYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 59:
      {
        ASViewImpl_setTranslationZWithASIWidget_withId_(w, objValue);
      }
      break;
      case 60:
      {
        ASViewImpl_setRotationWithASIWidget_withId_(w, objValue);
      }
      break;
      case 61:
      {
        ASViewImpl_setRotationXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 62:
      {
        ASViewImpl_setRotationYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 63:
      {
        ASViewImpl_setScaleXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 64:
      {
        ASViewImpl_setScaleYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 65:
      {
        ASViewImpl_setTransformPivotXWithASIWidget_withId_(w, objValue);
      }
      break;
      case 66:
      {
        ASViewImpl_setTransformPivotYWithASIWidget_withId_(w, objValue);
      }
      break;
      case 67:
      {
        ASViewImpl_invalidateWithASIWidget_(w);
      }
      break;
      case 68:
      {
        ASViewImpl_requestLayoutWithASIWidget_(w);
      }
      break;
      case 69:
      {
        ASViewImpl_setKeepScreenOnWithId_withId_(w, objValue);
      }
      break;
      case 70:
      {
        ASViewImpl_setLayoutDirectionWithASIWidget_withId_(w, objValue);
      }
      break;
      case 71:
      {
        ASViewImpl_setTextDirectionWithASIWidget_withId_(w, objValue);
      }
      break;
      case 72:
      {
        ASViewImpl_setTextAlignmentWithASIWidget_withId_(w, objValue);
      }
      break;
      case 73:
      {
        ASViewImpl_setOnDragWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 74:
      {
        ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(w, nativeWidget, objValue);
      }
      break;
      case 75:
      {
        [((ADView *) nil_chk(view)) setEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
      break;
      case 76:
      {
        [((ADView *) nil_chk(view)) setDuplicateParentStateEnabledWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
      }
      break;
      case 77:
      {
        [((ADView *) nil_chk(view)) setForegroundGravityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
      }
      break;
      case 78:
      {
        ASViewImpl_setOnKeyWithASIWidget_withId_(w, objValue);
      }
      break;
      case 79:
      {
        ASViewImpl_setLayerBorderWidthWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 80:
      {
        ASViewImpl_setLayerBorderColorWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 81:
      {
        ASViewImpl_setLayerCornerRadiusWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 82:
      {
        ASViewImpl_setLayerMasksToBoundsWithId_withId_(nativeWidget, objValue);
      }
      break;
      case 83:
      {
        ASViewImpl_setZIndexWithASIWidget_withId_(w, objValue);
      }
      break;
      case 84:
      {
        ASViewImpl_setMaxWidthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 85:
      {
        ASViewImpl_setMaxHeightWithASIWidget_withId_(w, objValue);
      }
      break;
      case 86:
      {
        ASViewImpl_setSelectedWithId_withADView_(objValue, view);
      }
      break;
      case 87:
      {
        ASViewImpl_setStyleWithASIWidget_withADView_withId_(w, view, objValue);
      }
      break;
      case 88:
      {
        ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(w, view, objValue);
      }
      break;
      case 89:
      {
        ASViewImpl_validateFormWithASIWidget_withId_(w, objValue);
      }
      break;
      case 90:
      {
        ASViewImpl_setValidationWithASIWidget_withId_(w, objValue);
      }
      break;
      case 91:
      {
        ASViewImpl_setRequiredWithASIWidget_withId_(w, objValue);
      }
      break;
      case 92:
      {
        ASViewImpl_setMinlengthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 93:
      {
        ASViewImpl_setMaxlengthWithASIWidget_withId_(w, objValue);
      }
      break;
      case 94:
      {
        ASViewImpl_setMinWithASIWidget_withId_(w, objValue);
      }
      break;
      case 95:
      {
        ASViewImpl_setMaxWithASIWidget_withId_(w, objValue);
      }
      break;
      case 96:
      {
        ASViewImpl_setPatternWithASIWidget_withId_(w, objValue);
      }
      break;
      case 97:
      {
        ASViewImpl_setTypeWithASIWidget_withNSString_withId_(w, strValue, objValue);
      }
      break;
      case 98:
      {
        ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(w, strValue, objValue);
      }
      break;
      case 99:
      {
        ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(w, objValue);
      }
      break;
      case 100:
      {
        ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(w, objValue);
      }
      break;
      case 101:
      {
        ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(w, objValue);
      }
      break;
      default:
      attributables = ASWidgetFactory_getAttributablesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"View", [w getLocalName] } count:2 type:NSString_class_()]);
      if (attributables != nil) {
        for (id<ASIAttributable> __strong attributable in attributables) {
          [((id<ASIAttributable>) nil_chk([((id<ASIAttributable>) nil_chk(attributable)) newInstanceWithASIWidget:w])) setAttributeWithASWidgetAttribute:key withNSString:strValue withId:objValue withASILifeCycleDecorator:decorator];
        }
      }
      break;
    }
  }
}

id ASViewImpl_getAttributeWithASIWidget_withASWidgetAttribute_withASILifeCycleDecorator_(id<ASIWidget> w, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  return ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(w, [((id<ASIWidget>) nil_chk(w)) asNativeWidget], key, decorator);
}

id ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(id<ASIWidget> w, id nativeWidget, ASWidgetAttribute *key, id<ASILifeCycleDecorator> decorator) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosBackgroundColor", @"iosIsHidden", @"iosAlpha", @"iosIsOpaque", @"iosTintColor", @"iosClipsToBounds", @"iosClearsContextBeforeDrawing", @"iosIsUserInteractionEnabled", @"iosIsMultipleTouchEnabled", @"iosIsExclusiveTouch", @"iosPreservesSuperviewLayoutMargins", @"iosInsetsLayoutMarginsFromSafeArea", @"iosAutoresizesSubviews", @"iosTranslatesAutoresizingMaskIntoConstraints", @"iosContentScaleFactor", @"iosIsFocused", @"iosRestorationIdentifier", @"iosTag", @"iosAccessibilityIgnoresInvertColors", @"iosLargeContentImage", @"iosLargeContentTitle", @"iosScalesLargeContentImage", @"iosShowsLargeContentViewer", @"focusable", @"iosIsAccessibilityElement", @"iosAccessibilityLabel", @"contentDescription", @"iosAccessibilityHint", @"iosAccessibilityValue", @"iosAccessibilityTraits", @"id", @"modelSyncEvents", @"modelParam", @"modelPojoToUi", @"modelUiToPojo", @"background", @"minWidth", @"minHeight", @"backgroundTint", @"backgroundTintMode", @"foreground", @"foregroundTint", @"foregroundTintMode", @"visibility", @"alpha", @"longClickable", @"clickable", @"translationX", @"translationY", @"translationZ", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY", @"keepScreenOn", @"layoutDirection", @"textDirection", @"textAlignment", @"enabled", @"duplicateParentState", @"foregroundGravity", @"maxWidth", @"maxHeight", @"selected", @"validateForm" }, 68)) {
    case 0:
    {
      return ASViewImpl_getBackgroundColorWithId_(nativeWidget);
    }
    case 1:
    {
      return ASViewImpl_getIsHiddenWithId_(nativeWidget);
    }
    case 2:
    {
      return ASViewImpl_getAlphaWithId_(nativeWidget);
    }
    case 3:
    {
      return ASViewImpl_getIsOpaqueWithId_(nativeWidget);
    }
    case 4:
    {
      return ASViewImpl_getTintColorWithId_(nativeWidget);
    }
    case 5:
    {
      return ASViewImpl_getClipsToBoundsWithId_(nativeWidget);
    }
    case 6:
    {
      return ASViewImpl_getClearsContextBeforeDrawingWithId_(nativeWidget);
    }
    case 7:
    {
      return ASViewImpl_getIsUserInteractionEnabledWithId_(nativeWidget);
    }
    case 8:
    {
      return ASViewImpl_getIsMultipleTouchEnabledWithId_(nativeWidget);
    }
    case 9:
    {
      return ASViewImpl_getIsExclusiveTouchWithId_(nativeWidget);
    }
    case 10:
    {
      return ASViewImpl_getPreservesSuperviewLayoutMarginsWithId_(nativeWidget);
    }
    case 11:
    {
      return ASViewImpl_getInsetsLayoutMarginsFromSafeAreaWithId_(nativeWidget);
    }
    case 12:
    {
      return ASViewImpl_getAutoresizesSubviewsWithId_(nativeWidget);
    }
    case 13:
    {
      return ASViewImpl_getTranslatesAutoresizingMaskIntoConstraintsWithId_(nativeWidget);
    }
    case 14:
    {
      return ASViewImpl_getContentScaleFactorWithId_(nativeWidget);
    }
    case 15:
    {
      return ASViewImpl_getIsFocusedWithId_(nativeWidget);
    }
    case 16:
    {
      return ASViewImpl_getRestorationIdentifierWithId_(nativeWidget);
    }
    case 17:
    {
      return ASViewImpl_getTagWithId_(nativeWidget);
    }
    case 18:
    {
      return ASViewImpl_getAccessibilityIgnoresInvertColorsWithId_(nativeWidget);
    }
    case 19:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getLargeContentImageWithId_(nativeWidget);
      }
      break;
    }
    case 20:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getLargeContentTitleWithId_(nativeWidget);
      }
      break;
    }
    case 21:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getScalesLargeContentImageWithId_(nativeWidget);
      }
      break;
    }
    case 22:
    {
      if (ASViewImpl_checkIosVersionWithNSString_(@"13.0")) {
        return ASViewImpl_getShowsLargeContentViewerWithId_(nativeWidget);
      }
      break;
    }
    case 23:
    case 24:
    {
      return ASViewImpl_getIsAccessibilityElementWithId_(nativeWidget);
    }
    case 25:
    {
      return ASViewImpl_getAccessibilityLabelWithId_(nativeWidget);
    }
    case 26:
    case 27:
    {
      return ASViewImpl_getAccessibilityHintWithId_(nativeWidget);
    }
    case 28:
    {
      return ASViewImpl_getAccessibilityValueWithId_(nativeWidget);
    }
    case 29:
    {
      return ASViewImpl_getAccessibilityTraitsWithId_(nativeWidget);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getId]);
    }
    case 31:
    {
      return ASViewImpl_getModelSyncEventsWithASIWidget_(w);
    }
    case 32:
    {
      return ASViewImpl_getModelParamWithASIWidget_(w);
    }
    case 33:
    {
      return ASViewImpl_getModelPojoToUiWithASIWidget_(w);
    }
    case 34:
    {
      return ASViewImpl_getModelUiToPojoWithASIWidget_(w);
    }
    case 35:
    {
      return ASViewImpl_getBackgroundWithASIWidget_(w);
    }
    case 36:
    {
      return ASViewImpl_getMinWidthWithASIWidget_(w);
    }
    case 37:
    {
      return ASViewImpl_getMinHeightWithASIWidget_(w);
    }
    case 38:
    {
      return ASViewImpl_getBackgroundTintWithASIWidget_(w);
    }
    case 39:
    {
      return ASViewImpl_getBackgroundTintModeWithASIWidget_(w);
    }
    case 40:
    {
      return ASViewImpl_getForegroundWithASIWidget_(w);
    }
    case 41:
    {
      return ASViewImpl_getForegroundTintWithASIWidget_(w);
    }
    case 42:
    {
      return ASViewImpl_getForegroundTintModeWithASIWidget_(w);
    }
    case 43:
    {
      return ASViewImpl_getVisibilityWithASIWidget_(w);
    }
    case 44:
    {
      return ASViewImpl_getAlphaWithId_(nativeWidget);
    }
    case 45:
    {
      return ASViewImpl_getLongClickableWithASIWidget_(w);
    }
    case 46:
    {
      return ASViewImpl_getClickableWithId_(nativeWidget);
    }
    case 47:
    {
      return ASViewImpl_getTranslationXWithASIWidget_(w);
    }
    case 48:
    {
      return ASViewImpl_getTranslationYWithASIWidget_(w);
    }
    case 49:
    {
      return ASViewImpl_getTranslationZWithASIWidget_(w);
    }
    case 50:
    {
      return ASViewImpl_getRotationWithASIWidget_(w);
    }
    case 51:
    {
      return ASViewImpl_getRotationXWithASIWidget_(w);
    }
    case 52:
    {
      return ASViewImpl_getRotationYWithASIWidget_(w);
    }
    case 53:
    {
      return ASViewImpl_getScaleXWithASIWidget_(w);
    }
    case 54:
    {
      return ASViewImpl_getScaleYWithASIWidget_(w);
    }
    case 55:
    {
      return ASViewImpl_getTransformPivotXWithASIWidget_(w);
    }
    case 56:
    {
      return ASViewImpl_getTransformPivotYWithASIWidget_(w);
    }
    case 57:
    {
      return ASViewImpl_getKeepScreenOnWithId_(w);
    }
    case 58:
    {
      return ASViewImpl_getLayoutDirectionWithASIWidget_(w);
    }
    case 59:
    {
      return ASViewImpl_getTextDirectionWithASIWidget_(w);
    }
    case 60:
    {
      return ASViewImpl_getTextAlignmentWithASIWidget_(w);
    }
    case 61:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isEnabled]);
    }
    case 62:
    {
      return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isDuplicateParentStateEnabled]);
    }
    case 63:
    {
      return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getForegroundGravity]);
    }
    case 64:
    {
      return ASViewImpl_getMaxWidthWithASIWidget_(w);
    }
    case 65:
    {
      return ASViewImpl_getMaxHeightWithASIWidget_(w);
    }
    case 66:
    {
      return ASViewImpl_getSelectedWithASIWidget_withADView_(w, view);
    }
    case 67:
    {
      return ASViewImpl_getValidateFormResultWithASIWidget_(w);
    }
  }
  id<JavaUtilList> attributables = ASWidgetFactory_getAttributablesWithNSStringArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"View", [w getLocalName] } count:2 type:NSString_class_()]);
  if (attributables != nil) {
    for (id<ASIAttributable> __strong attributable in attributables) {
      id value = [((id<ASIAttributable>) nil_chk([((id<ASIAttributable>) nil_chk(attributable)) newInstanceWithASIWidget:w])) getAttributeWithASWidgetAttribute:key withASILifeCycleDecorator:decorator];
      if (value != nil) {
        return value;
      }
    }
  }
  return nil;
}

jboolean ASViewImpl_checkIosVersionWithNSString_(NSString *v) {
  ASViewImpl_initialize();
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

void ASViewImpl_setPaddingWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, value, value, value, value);
}

void ASViewImpl_setPaddingLeftWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, value, [((ADView *) nil_chk(view)) getPaddingTop], ADXViewCompat_getPaddingEndWithADView_(view), [view getPaddingBottom]);
}

void ASViewImpl_setPaddingRightWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), [((ADView *) nil_chk(view)) getPaddingTop], value, [view getPaddingBottom]);
}

void ASViewImpl_setPaddingTopWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), value, ADXViewCompat_getPaddingEndWithADView_(view), [((ADView *) nil_chk(view)) getPaddingBottom]);
}

void ASViewImpl_setPaddingBottomWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), [((ADView *) nil_chk(view)) getPaddingTop], ADXViewCompat_getPaddingEndWithADView_(view), value);
}

id ASViewImpl_getPaddingTopWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getPaddingTop]);
}

id ASViewImpl_getPaddingBottomWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getPaddingBottom]);
}

id ASViewImpl_getPaddingLeftWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_(ADXViewCompat_getPaddingStartWithADView_(view));
}

id ASViewImpl_getPaddingRightWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangInteger_valueOfWithInt_(ADXViewCompat_getPaddingEndWithADView_(view));
}

void ASViewImpl_setPaddingHorizontalWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, value, [((ADView *) nil_chk(view)) getPaddingTop], value, [view getPaddingBottom]);
}

void ASViewImpl_setPaddingVerticalWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ADXViewCompat_setPaddingRelativeWithADView_withInt_withInt_withInt_withInt_(view, ADXViewCompat_getPaddingStartWithADView_(view), value, ADXViewCompat_getPaddingEndWithADView_(view), value);
}

void ASViewImpl_setIdWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(view)) setIdWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [((id<ASIWidget>) nil_chk(w)) setIdWithNSString:strValue];
}

id ASViewImpl_getModelSyncEventsWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelSyncEvents];
}

void ASViewImpl_setModelSyncEventsWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelSyncEventsWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setModelParamWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelParamWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setModelPojoToUiWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelPojoToUiWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setModelUiToPojoWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelUiToPojoWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_notifyDataSetChangedWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([((JavaLangBoolean *) nil_chk(ASPluginInvoker_getBooleanWithId_(objValue))) booleanValue]) {
    [((id<ASIWidget>) nil_chk(w)) notifyDataSetChanged];
  }
}

void ASViewImpl_updateModelDataWithASIWidget_withId_withId_(id<ASIWidget> w, id expression, id payload) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) updateModelDataWithNSString:(NSString *) cast_chk(expression, [NSString class]) withId:payload];
}

id ASViewImpl_getModelUiToPojoWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelUiToPojo];
}

id ASViewImpl_getModelPojoToUiWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelPojoToUi];
}

id ASViewImpl_getModelParamWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getModelParam];
}

void ASViewImpl_setModelPojoToUiParamsWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelPojoToUiParamsWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_refreshUiFromModelWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w, objValue, false);
}

void ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(id<ASIWidget> w, id objValue, jboolean remeasure) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised] && objValue != nil) {
    IOSObjectArray *ids = [((NSString *) cast_chk(objValue, [NSString class])) java_split:@","];
    {
      IOSObjectArray *a__ = ids;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *id_ = *b__++;
        if (![((NSString *) nil_chk(id_)) java_hasPrefix:@"@+id/"]) {
          id_ = JreStrcat("$$", @"@+id/", id_);
        }
        id<ASIWidget> widget = [w findNearestViewWithNSString:id_];
        if (widget != nil) {
          [widget applyModelToWidget];
        }
      }
    }
    if (remeasure) {
      [((id<ASIFragment>) nil_chk([w getFragment])) remeasure];
    }
  }
}

void ASViewImpl_setModelUiToPojoEventIdsWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setModelUiToPojoEventIdsWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
}

void ASViewImpl_setZIndexWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setZIndexWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  id<ASHasWidgets> parent = [w getParent];
  if (parent != nil) {
    id<JavaUtilList> widgets = [parent getWidgets];
    JavaUtilCollections_sortWithJavaUtilList_withJavaUtilComparator_(widgets, new_ASViewImpl_1_init());
    ASViewImpl_nativeBringToFrontWithJavaUtilList_(widgets);
  }
}

void ASViewImpl_setMaxHeightWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    [((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASViewImpl_setMaxWidthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    [((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

id ASViewImpl_getMaxWidthWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    return JavaLangInteger_valueOfWithInt_([((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) getMaxWidth]);
  }
  return nil;
}

id ASViewImpl_getMaxHeightWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id view = [((id<ASIWidget>) nil_chk(w)) asWidget];
  if ([ASIMaxDimension_class_() isInstance:view]) {
    return JavaLangInteger_valueOfWithInt_([((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check(view, ASIMaxDimension_class_())))) getMaxHeight]);
  }
  return nil;
}

void ASViewImpl_setSelectedWithId_withADView_(id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(view)) setSelectedWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk((objValue), [JavaLangBoolean class]))) booleanValue]];
}

id ASViewImpl_getSelectedWithASIWidget_withADView_(id<ASIWidget> w, ADView *view) {
  ASViewImpl_initialize();
  return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isSelected]);
}

void ASViewImpl_setInvalidateOnFrameChangeWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) setInvalidateOnFrameChangeWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASViewImpl_setBackgroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"imageRepeat" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"backgroundRepeat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ strValue } count:1 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundRepeatWithASIWidget_withNSString_withId_withADView_(id<ASIWidget> w, NSString *strValue, id objValue, ADView *view) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"imageRepeat" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundRepeat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ strValue } count:1 type:NSObject_class_()]];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADView_MotionEvent_(id<JavaUtilMap> obj, ADView_MotionEvent *event) {
  ASViewImpl_initialize();
  id<JavaUtilMap> eventInfo = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(eventInfo)) putWithId:@"action" withId:JavaLangInteger_valueOfWithInt_([((ADView_MotionEvent *) nil_chk(event)) getAction])];
  (void) [eventInfo putWithId:@"rawX" withId:JavaLangInteger_valueOfWithInt_([event getRawX])];
  (void) [eventInfo putWithId:@"rawY" withId:JavaLangInteger_valueOfWithInt_([event getRawY])];
  (void) [eventInfo putWithId:@"x" withId:JavaLangInteger_valueOfWithInt_([event getX])];
  (void) [eventInfo putWithId:@"y" withId:JavaLangInteger_valueOfWithInt_([event getY])];
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"eventInfo" withId:ASPluginInvoker_getNativeMapWithJavaUtilMap_(eventInfo)];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(id<JavaUtilMap> obj, ADKeyEvent *event) {
  ASViewImpl_initialize();
  id<JavaUtilMap> eventInfo = ASPluginInvoker_getJSONCompatMap();
  if (event != nil) {
    (void) [((id<JavaUtilMap>) nil_chk(eventInfo)) putWithId:@"action" withId:JavaLangInteger_valueOfWithInt_([event getAction])];
    (void) [eventInfo putWithId:@"keyCode" withId:JavaLangInteger_valueOfWithInt_([event getKeyCode])];
  }
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"eventInfo" withId:ASPluginInvoker_getNativeMapWithJavaUtilMap_(eventInfo)];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADView_DragEvent_(id<JavaUtilMap> obj, ADView_DragEvent *event) {
  ASViewImpl_initialize();
  id<JavaUtilMap> eventInfo = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(eventInfo)) putWithId:@"action" withId:JavaLangInteger_valueOfWithInt_([((ADView_DragEvent *) nil_chk(event)) getAction])];
  (void) [eventInfo putWithId:@"x" withId:JavaLangInteger_valueOfWithInt_([event getX])];
  (void) [eventInfo putWithId:@"y" withId:JavaLangInteger_valueOfWithInt_([event getY])];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(eventInfo, @"clipData", ASViewImpl_getClipDataWithADView_DragEvent_(event));
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"eventInfo" withId:ASPluginInvoker_getNativeMapWithJavaUtilMap_(eventInfo)];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADChronometer_withASIFragment_(id<JavaUtilMap> obj, ADChronometer *chronometer, id<ASIFragment> fragment) {
  ASViewImpl_initialize();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"text" withId:[((ADChronometer *) nil_chk(chronometer)) getText]];
}

void ASViewImpl_validateFormWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  NSString *formGroupId = (NSString *) cast_chk(objValue, [NSString class]);
  ASForm *form = (ASForm *) cast_chk([((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getFromTempCacheWithNSString:formGroupId], [ASForm class]);
  if (form != nil) {
    [((id<ASIFragment>) nil_chk([w getFragment])) disableRemeasure];
    [((id<ASIFragment>) nil_chk([w getFragment])) storeInTempCacheWithNSString:@"formvalidationResult" withId:JavaLangBoolean_valueOfWithBoolean_([form isValid])];
    [((id<ASIFragment>) nil_chk([w getFragment])) enableRemeasure];
  }
}

id ASViewImpl_getValidateFormResultWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id result = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getFromTempCacheWithNSString:@"formvalidationResult"];
  return result;
}

void ASViewImpl_setValidationWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id<JavaUtilList> forms = ASViewImpl_getFormsWithASIWidget_(w);
  if (forms != nil) {
    for (ASForm * __strong form in forms) {
      id<JavaUtilList> validations = (id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_());
      for (NSString * __strong validation in nil_chk(validations)) {
        if ([ASFormElement_class_() isInstance:w]) {
          id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
          ASField *field = ASField_using__WithASFormElement_withInt_(formElement, ASField_DEFAULT_ORDER);
          IOSObjectArray *params = nil;
          jint startIndex = [((NSString *) nil_chk(validation)) java_indexOfString:@"("];
          jint endIndex = [validation java_indexOfString:@")"];
          if (startIndex != -1 && endIndex != -1) {
            params = [((NSString *) nil_chk([validation java_substring:startIndex + 1 endIndex:endIndex])) java_split:@"\\-"];
            validation = [validation java_substring:0 endIndex:startIndex];
          }
          id<ASValidation> validator = ASValidatorFactory_getWithNSString_(validation);
          id<ASValidation> newInstance = [((id<ASValidation>) nil_chk(validator)) newInstanceWithNSStringArray:params];
          NSString *customMessage = [((id<ASFormElement>) nil_chk(formElement)) getCustomMessageWithNSString:validation];
          if (customMessage != nil) {
            [((id<ASValidation>) nil_chk(newInstance)) setErrorMessageWithNSString:customMessage];
          }
          (void) [((ASField *) nil_chk(field)) addValidatorWithASValidation:newInstance];
          [((ASForm *) nil_chk(form)) addFieldWithASField:field];
        }
      }
    }
  }
}

id<JavaUtilList> ASViewImpl_getFormsWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<JavaUtilList> forms = new_JavaUtilArrayList_init();
    NSString *formGroupIdStr = [((id<ASFormElement>) nil_chk(((id<ASFormElement>) cast_check(w, ASFormElement_class_())))) getFormGroupId];
    if (formGroupIdStr == nil) {
      @throw new_JavaLangRuntimeException_initWithNSString_(@"Specify a formGroupId for the widget");
    }
    IOSObjectArray *formGroupIds = ASStringUtils_splitWithNSString_withNSString_(formGroupIdStr, @",");
    {
      IOSObjectArray *a__ = formGroupIds;
      NSString * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
      NSString * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        NSString *formGroupId = *b__++;
        ASForm *form = (ASForm *) cast_chk([((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) getFromTempCacheWithNSString:formGroupId], [ASForm class]);
        if (form == nil) {
          form = new_ASForm_init();
          [((id<ASIFragment>) nil_chk([w getFragment])) storeInTempCacheWithNSString:formGroupId withId:form];
        }
        [forms addWithId:form];
      }
    }
    return forms;
  }
  return nil;
}

void ASViewImpl_setTypeWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *value, id objValue) {
  ASViewImpl_initialize();
  switch (JreIndexOfStr(value, (id[]){ @"email", @"tel", @"url", @"date", @"time" }, 5)) {
    case 0:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"email", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    case 1:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"mobilenumber", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    case 2:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"url", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    case 3:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"date", [IOSObjectArray newArrayWithObjects:(id[]){ @"dd/MM/yyyy" } count:1 type:NSString_class_()]);
    break;
    case 4:
    ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"time", [IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()]);
    break;
    default:
    break;
  }
}

void ASViewImpl_setPatternWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"pattern", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMaxWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"maxvalue", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMinWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"minvalue", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMaxlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"maxlength", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setMinlengthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"minlength", [IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSString_class_()]);
}

void ASViewImpl_setRequiredWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(w, @"required", nil);
}

void ASViewImpl_addValidatorWithASIWidget_withNSString_withNSStringArray_(id<ASIWidget> w, NSString *validationName, IOSObjectArray *params) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<JavaUtilList> forms = ASViewImpl_getFormsWithASIWidget_(w);
    if (forms != nil) {
      for (ASForm * __strong form in forms) {
        id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
        ASField *field = ASField_using__WithASFormElement_withInt_(formElement, ASField_DEFAULT_ORDER);
        id<ASValidation> validator = ASValidatorFactory_getWithNSString_(validationName);
        NSString *customMessage = [((id<ASFormElement>) nil_chk(formElement)) getCustomMessageWithNSString:validationName];
        id<ASValidation> newInstance = [((id<ASValidation>) nil_chk(validator)) newInstanceWithNSStringArray:params];
        if (customMessage != nil) {
          [((id<ASValidation>) nil_chk(newInstance)) setErrorMessageWithNSString:customMessage];
        }
        (void) [((ASField *) nil_chk(field)) addValidatorWithASValidation:newInstance];
        [((ASForm *) nil_chk(form)) addFieldWithASField:field];
      }
    }
  }
}

void ASViewImpl_setCustomErrorMessageKeysWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setCustomErrorMessageKeysWithJavaUtilList:(id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_())];
  }
}

void ASViewImpl_setCustomErrorMessageValuesWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setCustomErrorMessageValuesWithJavaUtilList:(id<JavaUtilList>) cast_check(objValue, JavaUtilList_class_())];
  }
}

void ASViewImpl_setValidationErrorDisplayWithASIWidget_withNSString_withId_(id<ASIWidget> w, NSString *strValue, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setValidationErrorDisplayTypeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  }
}

void ASViewImpl_setErrorStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setErrorStyleWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
  }
}

void ASViewImpl_setStyleWithASIWidget_withADView_withId_(id<ASIWidget> w, ADView *view, id objValue) {
  ASViewImpl_initialize();
  if ([ASFormElement_class_() isInstance:w]) {
    id<ASFormElement> formElement = (id<ASFormElement>) cast_check(w, ASFormElement_class_());
    [((id<ASFormElement>) nil_chk(formElement)) setNormalStyleWithNSString:(NSString *) cast_chk(objValue, [NSString class])];
  }
  ASViewImpl_setStyleWithASIWidget_withId_(w, objValue);
}

void ASViewImpl_setStyleWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    CSSCssDataHolder *pageData = (CSSCssDataHolder *) cast_chk([((id<ASIFragment>) nil_chk([w getFragment])) getStyleSheet], [CSSCssDataHolder class]);
    NSString *style = (NSString *) cast_chk(objValue, [NSString class]);
    if (style != nil) {
      style = [style java_replaceFirst:@"@style/" withReplacement:@""];
      id<JavaUtilList> attributes = [((CSSCssDataHolder *) nil_chk(pageData)) getStyleWithNSString:JreStrcat("C$", '.', style)];
      if (attributes != nil) {
        JavaUtilHashMap *attributeMap = new_JavaUtilHashMap_init();
        for (CSSCssTree_Attribute * __strong attribute in attributes) {
          NSString *key = ((CSSCssTree_Attribute *) nil_chk(attribute))->key_;
          if (![attributeMap containsKeyWithId:key]) {
            (void) [attributeMap putWithId:key withId:new_JavaUtilArrayList_init()];
          }
          ASWidgetAttributeValue *widgetAttributeValue = new_ASWidgetAttributeValue_initWithNSString_withNSString_withNSString_withNSString_withNSString_withNSString_(attribute->value_, attribute->orientation_, attribute->minWidth_, attribute->minHeight_, attribute->maxWidth_, attribute->maxHeight_);
          [((id<JavaUtilList>) nil_chk([attributeMap getWithId:key])) addWithId:widgetAttributeValue];
        }
        for (NSString * __strong key in nil_chk([attributeMap keySet])) {
          ASWidgetAttribute *attribute = [w getAttributeWithASHasWidgets:[w getParent] withNSString:[w getLocalName] withNSString:key];
          if (attribute != nil) {
            [((ASBaseWidget *) cast_chk(w, [ASBaseWidget class])) updateWidgetMapWithASWidgetAttribute:attribute withJavaUtilList:[attributeMap getWithId:key]];
            if (![attribute isForChild]) {
              NSString *attributeValue = [w getAttributeValueWithNSString:key];
              [((ASBaseWidget *) cast_chk(w, [ASBaseWidget class])) applyStyleToWidgetWithASWidgetAttribute:attribute withId:attributeValue];
            }
            else {
              [((ASBaseHasWidgets *) nil_chk(((ASBaseHasWidgets *) cast_chk([w getParent], [ASBaseHasWidgets class])))) setChildAttributeWithASIWidget:w withASWidgetAttribute:attribute];
            }
          }
        }
      }
    }
  }
}

void ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(id<ASIWidget> w, NSString *message) {
  ASViewImpl_initialize();
  NSString *id_ = [((id<ASIWidget>) nil_chk(w)) getId];
  if (id_ != nil) {
    id<ASIWidget> errorLabel = [w findNearestViewWithNSString:JreStrcat("$$", id_, @"Error")];
    if ([ASValidationErrorLabel_class_() isInstance:errorLabel]) {
      [((id<ASValidationErrorLabel>) nil_chk(((id<ASValidationErrorLabel>) cast_check(errorLabel, ASValidationErrorLabel_class_())))) setErrorMessageWithNSString:message];
    }
  }
}

void ASViewImpl_setLayoutDirectionWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (ASViewImpl_isMirrorSupported() && ASViewImpl_isRTLLayout()) {
    if (value == ADView_LAYOUT_DIRECTION_RTL) {
      value = ADView_LAYOUT_DIRECTION_LTR;
    }
    else {
      value = ADView_LAYOUT_DIRECTION_RTL;
    }
  }
  [((ADView *) nil_chk(view)) setLayoutDirectionWithInt:value];
}

id ASViewImpl_getLayoutDirectionWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getLayoutDirection]);
}

void ASViewImpl_setTextAlignmentWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setTextAlignmentWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_setTextDirectionWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setTextDirectionWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASViewImpl_getTextAlignmentWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getTextAlignment]);
}

id ASViewImpl_getTextDirectionWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getTextDirection]);
}

jboolean ASViewImpl_isRTLLayoutDirectionWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  return [((ADView *) nil_chk(view)) isLayoutRtl];
}

void ASViewImpl_drawableStateChangedWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) drawableStateChanged];
  ADView *view = (ADView *) cast_chk([w asWidget], [ADView class]);
  ADDrawable *background = [((ADView *) nil_chk(view)) getBackground];
  if (background != nil && [background isStateful] && [background setStateWithIntArray:[view getDrawableState]]) {
    ASViewImpl_setBackgroundWithASIWidget_withId_withId_withBoolean_(w, [w asNativeWidget], background, true);
  }
  ADDrawable *foreground = [view getForeground];
  if (foreground != nil && [foreground isStateful] && [foreground setStateWithIntArray:[view getDrawableState]]) {
    ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, [w asNativeWidget], foreground);
  }
  if ([view getBackgroundTintList] != nil && [((ADColorStateList *) nil_chk([view getBackgroundTintList])) isStateful]) {
    ASViewImpl_setBackgroundTintWithASIWidget_withId_(w, [view getBackgroundTintList]);
    [w invalidate];
  }
  if ([view getForegroundTintList] != nil && [((ADColorStateList *) nil_chk([view getForegroundTintList])) isStateful]) {
    ASViewImpl_setForegroundTintWithASIWidget_withId_(w, [view getForegroundTintList]);
    [w invalidate];
  }
}

id ASViewImpl_getColorWithId_(id objValue) {
  ASViewImpl_initialize();
  if (ASViewImpl_isColorWithId_(objValue)) {
    return objValue;
  }
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    return ASPluginInvoker_getColorWithNSString_(ADColor_formatColorWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) objValue)) intValue]));
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"unknown color :", objValue));
}

void ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(id<ASIWidget> widget, jint l, jint t, jint r, jint b) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(widget)) setDrawableBoundsWithInt:l withInt:t withInt:r withInt:b];
  ADView *view = (ADView *) cast_chk([widget asWidget], [ADView class]);
  if ([((ADView *) nil_chk(view)) getBackground] != nil) {
    [((ADDrawable *) nil_chk([view getBackground])) setBoundsWithInt:l withInt:t withInt:r withInt:b];
  }
  if ([view getForeground] != nil) {
    [((ADDrawable *) nil_chk([view getForeground])) setBoundsWithInt:l withInt:t withInt:r withInt:b];
  }
}

void ASViewImpl_redrawDrawablesWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  ADDrawable *background = [((ADView *) nil_chk(view)) getBackground];
  if (background != nil && [background isRedraw]) {
    ASViewImpl_setBackgroundWithASIWidget_withId_withId_(w, [w asNativeWidget], background);
    [background setRedrawWithBoolean:false];
  }
  ADDrawable *foreground = [view getForeground];
  if (foreground != nil && [foreground isRedraw]) {
    ASViewImpl_setForegroundWithASIWidget_withId_withId_(w, [w asNativeWidget], background);
    [foreground setRedrawWithBoolean:false];
  }
}

void ASViewImpl_setBackgroundColorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).backgroundColor = (UIColor*) value;
}

id ASViewImpl_getBackgroundColorWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).backgroundColor;
}

void ASViewImpl_setIsHiddenWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).hidden = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsHiddenWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).hidden];
}

void ASViewImpl_setAlphaWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).alpha = [(JavaLangFloat*) value floatValue];
}

id ASViewImpl_getAlphaWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangFloat valueOfWithFloat :((UIView*) uiView).alpha];
}

void ASViewImpl_setIsOpaqueWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).opaque = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsOpaqueWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).opaque];
}

void ASViewImpl_setTintColorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).tintColor = (UIColor*) value;
}

id ASViewImpl_getTintColorWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).tintColor;
}

void ASViewImpl_setClipsToBoundsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).clipsToBounds = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getClipsToBoundsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).clipsToBounds];
}

void ASViewImpl_setClearsContextBeforeDrawingWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).clearsContextBeforeDrawing = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getClearsContextBeforeDrawingWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).clearsContextBeforeDrawing];
}

void ASViewImpl_setIsUserInteractionEnabledWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).userInteractionEnabled = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsUserInteractionEnabledWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).userInteractionEnabled];
}

void ASViewImpl_setIsMultipleTouchEnabledWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).multipleTouchEnabled = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsMultipleTouchEnabledWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).multipleTouchEnabled];
}

void ASViewImpl_setIsExclusiveTouchWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).exclusiveTouch = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsExclusiveTouchWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).exclusiveTouch];
}

void ASViewImpl_setPreservesSuperviewLayoutMarginsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).preservesSuperviewLayoutMargins = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getPreservesSuperviewLayoutMarginsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).preservesSuperviewLayoutMargins];
}

void ASViewImpl_setInsetsLayoutMarginsFromSafeAreaWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).insetsLayoutMarginsFromSafeArea = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getInsetsLayoutMarginsFromSafeAreaWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).insetsLayoutMarginsFromSafeArea];
}

void ASViewImpl_setAutoresizesSubviewsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).autoresizesSubviews = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getAutoresizesSubviewsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).autoresizesSubviews];
}

void ASViewImpl_setTranslatesAutoresizingMaskIntoConstraintsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).translatesAutoresizingMaskIntoConstraints = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getTranslatesAutoresizingMaskIntoConstraintsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).translatesAutoresizingMaskIntoConstraints];
}

void ASViewImpl_setContentScaleFactorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).contentScaleFactor = [(JavaLangFloat*) value floatValue];
}

id ASViewImpl_getContentScaleFactorWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangFloat valueOfWithFloat :((UIView*) uiView).contentScaleFactor];
}

id ASViewImpl_getIsFocusedWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).focused];
}

void ASViewImpl_setRestorationIdentifierWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).restorationIdentifier = (NSString*) value;
}

id ASViewImpl_getRestorationIdentifierWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).restorationIdentifier;
}

void ASViewImpl_setTagWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).tag = [(JavaLangInteger*) value intValue];
}

id ASViewImpl_getTagWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangInteger valueOfWithInt :((UIView*) uiView).tag];
}

void ASViewImpl_setAccessibilityIgnoresInvertColorsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityIgnoresInvertColors = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getAccessibilityIgnoresInvertColorsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).accessibilityIgnoresInvertColors];
}

void ASViewImpl_setLargeContentImageWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).largeContentImage = (UIImage*) value;
}

id ASViewImpl_getLargeContentImageWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).largeContentImage;
}

void ASViewImpl_setLargeContentTitleWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).largeContentTitle = (NSString*) value;
}

id ASViewImpl_getLargeContentTitleWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).largeContentTitle;
}

void ASViewImpl_setScalesLargeContentImageWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).scalesLargeContentImage = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getScalesLargeContentImageWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).scalesLargeContentImage];
}

void ASViewImpl_setShowsLargeContentViewerWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).showsLargeContentViewer = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getShowsLargeContentViewerWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).showsLargeContentViewer];
}

void ASViewImpl_setIsAccessibilityElementWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).isAccessibilityElement = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getIsAccessibilityElementWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :((UIView*) uiView).isAccessibilityElement];
}

void ASViewImpl_setAccessibilityLabelWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityLabel = (NSString*) value;
}

id ASViewImpl_getAccessibilityLabelWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).accessibilityLabel;
}

void ASViewImpl_setAccessibilityHintWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityHint = (NSString*) value;
}

id ASViewImpl_getAccessibilityHintWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).accessibilityHint;
}

void ASViewImpl_setAccessibilityValueWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityValue = (NSString*) value;
}

id ASViewImpl_getAccessibilityValueWithId_(id uiView) {
  ASViewImpl_initialize();
  return ((UIView*) uiView).accessibilityValue;
}

void ASViewImpl_setAccessibilityTraitsWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  ((UIView*) nativeWidget).accessibilityTraits = [(JavaLangInteger*) value intValue];
}

id ASViewImpl_getAccessibilityTraitsWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangInteger valueOfWithInt :((UIView*) uiView).accessibilityTraits];
}

void ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_withInt_(id uiView, jint l, jint t, jint r, jint b, jint height) {
  ASViewImpl_initialize();
  [((UIView*) uiView) setFrame:CGRectMake(l, t, r-l, b-t)];
  ((UIScrollView*) uiView).contentSize = CGSizeMake(r-l, height);
}

void ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(id objview, jint x, jint y, jint width, jint height) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  uiview.frame = CGRectMake(x, y, width, height);
}

id ASViewImpl_getFirstChildOrSelfWithId_(id objview) {
  ASViewImpl_initialize();
  UIView* uiview = ((UIView*) objview);
  return uiview.subviews.count > 0 ? uiview.subviews[0] : uiview;
}

void ASViewImpl_nativeMakeFrameForHorizontalScrollViewWithId_withInt_withInt_withInt_withInt_withInt_(id uiView, jint l, jint t, jint r, jint b, jint width) {
  ASViewImpl_initialize();
  [((UIView*) uiView) setFrame:CGRectMake(l, t, r-l, b-t)];
  ((UIScrollView*) uiView).contentSize = CGSizeMake(width, b-t);
}

void ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(id uiView, jint l, jint t, jint r, jint b) {
  ASViewImpl_initialize();
  if ([uiView isKindOfClass:[UIViewController class]]) {
    [((UIViewController*) uiView).view setFrame:CGRectMake(l, t, r-l, b-t)];
  } else {
    [((UIView*) uiView) setFrame:CGRectMake(l, t, r-l, b-t)];
  }
}

jboolean ASViewImpl_isRTLLayoutWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  return ASViewImpl_isRTLLayout();
}

jboolean ASViewImpl_isRTLLayout() {
  ASViewImpl_initialize();
  return [UIApplication sharedApplication].userInterfaceLayoutDirection == UIUserInterfaceLayoutDirectionRightToLeft;
}

void ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id uiview, id objValue) {
  ASViewImpl_initialize();
  if (ASViewImpl_isColorWithId_(objValue)) {
    ASViewImpl_nativeSetBgColorWithId_withId_(uiview, objValue);
  }
  else {
    ASViewImpl_clearBgColorWithId_withId_(uiview, objValue);
  }
  if (ASViewImpl_isImageWithId_(objValue)) {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"drawImage" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"drawImage" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  if ([w isInitialised]) {
    [w invalidate];
  }
}

void ASViewImpl_setBackgroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_setBackgroundWithASIWidget_withId_withId_withBoolean_(w, [((id<ASIWidget>) nil_chk(w)) asNativeWidget], objValue, false);
}

void ASViewImpl_setBackgroundWithASIWidget_withId_withId_withBoolean_(id<ASIWidget> w, id nativeView, id objValue, jboolean stateChange) {
  ASViewImpl_initialize();
  if ([objValue isKindOfClass:[ADDrawable class]]) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ADDrawable *drawable = (ADDrawable *) objValue;
    [((ADView *) nil_chk(view)) setBackgroundWithADDrawable:drawable];
    objValue = [((ADDrawable *) nil_chk(drawable)) getDrawable];
  }
  if (ASViewImpl_isResizableImageWithId_(objValue)) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
    ADDrawable *drawable = [((ADView *) nil_chk(view)) getBackground];
    if (drawable == nil) {
      drawable = new_ADDrawable_init();
    }
    [drawable setMinimumWidthWithInt:ASViewImpl_getImageWidthWithId_(objValue)];
    [drawable setMinimumHeightWithInt:ASViewImpl_getImageHeightWithId_(objValue)];
    [view setBackgroundWithADDrawable:drawable];
  }
  ASViewImpl_setBgOnControlWithASIWidget_withId_withId_(w, nativeView, objValue);
}

void ASViewImpl_updateWidthAndHeightWithASIWidget_withADStateListDrawable_withId_withNSString_withNSString_(id<ASIWidget> w, ADStateListDrawable *background, id value, NSString *type, NSString *conveterType) {
  ASViewImpl_initialize();
  if (ASViewImpl_isImageWithId_(value)) {
    [((ADStateListDrawable *) nil_chk(background)) setMinimumWidthWithInt:ASViewImpl_getImageWidthWithId_(value)];
    [background setMinimumHeightWithInt:ASViewImpl_getImageHeightWithId_(value)];
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:type withNSString:conveterType withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
}

void ASViewImpl_setBgDrawabeOnViewWithInt_withInt_withADView_(jint width, jint height, ADView *view) {
  ASViewImpl_initialize();
  ADDrawable *background = [((ADView *) nil_chk(view)) getBackground];
  if (background == nil) {
    background = new_ADDrawable_init();
  }
  [background setMinimumWidthWithInt:width];
  [background setMinimumHeightWithInt:height];
  [view setBackgroundWithADDrawable:background];
}

jboolean ASViewImpl_isColorWithId_(id value) {
  ASViewImpl_initialize();
  return[value isKindOfClass:[UIColor class]];
}

jboolean ASViewImpl_isResizableImageWithId_(id obj) {
  ASViewImpl_initialize();
  return (obj != nil && [((NSString *) nil_chk([[obj java_getClass] getName])) isEqual:@"_UIResizableImage"]);
}

jboolean ASViewImpl_isImageWithId_(id value) {
  ASViewImpl_initialize();
  return[value isKindOfClass:[UIImage class]];
}

jint ASViewImpl_getImageWidthWithId_(id value) {
  ASViewImpl_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.width;
}

jint ASViewImpl_getImageHeightWithId_(id value) {
  ASViewImpl_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.height;
}

void ASViewImpl_clearBgColorWithId_withId_(id view, id value) {
  ASViewImpl_initialize();
  ((UIView *) view).backgroundColor = [UIColor clearColor];
}

void ASViewImpl_nativeSetBgColorWithId_withId_(id view, id value) {
  ASViewImpl_initialize();
  ((UIView *) view).backgroundColor = value;
}

void ASViewImpl_setOnClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnClickListener> onClickListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onClickListener = new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onClickListener = (id<ADView_OnClickListener>) cast_check(objValue, ADView_OnClickListener_class_());
  }
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(w, @"default", nativeView, onClickListener);
}

void ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(id<ASIWidget> w, NSString *id_, id nativeView, id<ADView_OnClickListener> onClickListener) {
  ASViewImpl_initialize();
  ASViewImpl_UITapGestureRecognizerDelegate *delegate = new_ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(w, onClickListener);
  [delegate nativeAddClickListenerWithNSString:id_ withId:nativeView];
}

void ASViewImpl_setMinHeightWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) setMinimumHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_setMinWidthWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) setMinimumWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

id ASViewImpl_getMinHeightWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getMinimumHeight]);
}

id ASViewImpl_getMinWidthWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getMinimumWidth]);
}

void ASViewImpl_registerCommandConveterWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(widget)) registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"background" } count:1 type:NSString_class_()]];
  [widget registerForAttributeCommandChainWithPhaseWithNSString:@"postdraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foreground" } count:1 type:NSString_class_()]];
  [widget registerForAttributeCommandChainWithPhaseWithNSString:@"preframe" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationX", @"translationY", @"translationZ", @"scaleX", @"scaleY", @"rotation", @"rotationX", @"rotationY", @"transformPivotX", @"transformPivotY" } count:10 type:NSString_class_()]];
  [widget registerForAttributeCommandChainWithPhaseWithNSString:@"postframe" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationX", @"translationY", @"translationZ", @"scaleX", @"scaleY", @"rotation", @"rotationX", @"rotationY", @"transformPivotX", @"transformPivotY" } count:10 type:NSString_class_()]];
}

jboolean ASViewImpl_isNativeRtlSupported() {
  ASViewImpl_initialize();
  return false;
}

id ASViewImpl_getParentWithASIWidget_(id<ASIWidget> widget) {
  ASViewImpl_initialize();
  id parent = [((id<ASHasWidgets>) nil_chk([((id<ASHasWidgets>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getParent])) getCompositeLeaf])) asNativeWidget];
  return parent;
}

void ASViewImpl_setBackgroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"background" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"backgroundTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setBackgroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADColorStateList *colorStateList = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setBackgroundTintListWithADColorStateList:colorStateList];
  [w applyAttributeCommandWithNSString:@"background" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"backgroundTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundTintModeWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundTintWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADColorStateList *colorStateList = (ADColorStateList *) cast_chk(objValue, [ADColorStateList class]);
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setForegroundTintListWithADColorStateList:colorStateList];
  [w applyAttributeCommandWithNSString:@"foreground" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"foregroundTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setForegroundWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) addForegroundIfNeeded];
  if ([objValue isKindOfClass:[ADDrawable class]]) {
    ADDrawable *drawable = (ADDrawable *) objValue;
    [((ADView *) nil_chk(((ADView *) cast_chk([w asWidget], [ADView class])))) setForegroundWithADDrawable:drawable];
    objValue = [((ADDrawable *) nil_chk(drawable)) getDrawable];
  }
  ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(w, nativeWidget, objValue);
}

void ASViewImpl_setFgOnControlWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  if (ASViewImpl_isImageWithId_(objValue) || ASViewImpl_isColorWithId_(objValue)) {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"drawImageOrColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"foreground" withNSString:@"drawImageOrColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
}

void ASViewImpl_setVisibilityWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setVisibilityWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
}

void ASViewImpl_nativeSetVisibilityWithId_withBoolean_(id view, jboolean hidden) {
  ASViewImpl_initialize();
  [((UIView *) view) setHidden:  hidden];
}

id ASViewImpl_getVisibilityWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangInteger_valueOfWithInt_([((ADView *) nil_chk(view)) getVisibility]);
}

void ASViewImpl_setLongClickableWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setLongClickableWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

id ASViewImpl_getLongClickableWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  return JavaLangBoolean_valueOfWithBoolean_([((ADView *) nil_chk(view)) isLongClickable]);
}

id ASViewImpl_getClickableWithId_(id nativeWidget) {
  ASViewImpl_initialize();
  return JavaLangBoolean_valueOfWithBoolean_(ASViewImpl_nativeGetClickableWithId_(nativeWidget));
}

jboolean ASViewImpl_nativeGetClickableWithId_(id view) {
  ASViewImpl_initialize();
  return ((UIView *) view).userInteractionEnabled;
}

void ASViewImpl_setClickableWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeSetClickableWithId_withBoolean_(nativeWidget, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setClickableWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
}

void ASViewImpl_nativeSetClickableWithId_withBoolean_(id view, jboolean clickable) {
  ASViewImpl_initialize();
  ((UIView *) view).userInteractionEnabled = clickable;
}

void ASViewImpl_setOnLongClickWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnLongClickListener> listener;
  if ([objValue isKindOfClass:[NSString class]]) {
    listener = new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    listener = (id<ADView_OnLongClickListener>) cast_check(objValue, ADView_OnLongClickListener_class_());
  }
  ASViewImpl_setOnLongClickWithASIWidget_withId_withADView_OnLongClickListener_(w, nativeView, listener);
}

void ASViewImpl_setOnLongClickWithASIWidget_withId_withADView_OnLongClickListener_(id<ASIWidget> w, id nativeView, id<ADView_OnLongClickListener> listener) {
  ASViewImpl_initialize();
  ASViewImpl_setLongClickableWithASIWidget_withId_(w, JavaLangBoolean_valueOfWithBoolean_(true));
  ASViewImpl_UILongTapGestureRecognizerDelegate *delegate = new_ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(w, listener);
  [delegate nativeAddLongClickListenerWithId:nativeView];
}

void ASViewImpl_setTranslationXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"translationX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationX", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setTranslationYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"translationY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationY", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setTranslationZWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"translationZ" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"translationZ", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setTransformPivotYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"transformPivotY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"transformPivotY", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setTransformPivotXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"transformPivotX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"transformPivotX", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setScaleYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"scaleY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"scaleY", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setScaleXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"scaleX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"scaleX", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setRotationYWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"rotationY" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"rotationY", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setRotationXWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"rotationX" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"rotationX", objValue } count:2 type:NSObject_class_()]];
}

void ASViewImpl_setRotationWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) applyAttributeCommandWithNSString:@"rotation" withNSString:@"transform" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"rotation", objValue } count:2 type:NSObject_class_()]];
}

id ASViewImpl_getTranslationXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"translationX" withNSString:@"transform" withNSString:@"translationX"];
}

id ASViewImpl_getTransformPivotYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"transformPivotY" withNSString:@"transform" withNSString:@"transformPivotY"];
}

id ASViewImpl_getTransformPivotXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"transformPivotX" withNSString:@"transform" withNSString:@"transformPivotX"];
}

id ASViewImpl_getScaleYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"scaleY" withNSString:@"transform" withNSString:@"scaleY"];
}

id ASViewImpl_getScaleXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"scaleX" withNSString:@"transform" withNSString:@"scaleX"];
}

id ASViewImpl_getRotationYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"rotationY" withNSString:@"transform" withNSString:@"rotationY"];
}

id ASViewImpl_getRotationXWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"rotationX" withNSString:@"transform" withNSString:@"rotationX"];
}

id ASViewImpl_getRotationWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"rotation" withNSString:@"transform" withNSString:@"rotation"];
}

id ASViewImpl_getTranslationZWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"translationZ" withNSString:@"transform" withNSString:@"translationZ"];
}

id ASViewImpl_getTranslationYWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"translationY" withNSString:@"transform" withNSString:@"translationY"];
}

id ASViewImpl_getForegroundTintWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) getForegroundTintList];
}

id ASViewImpl_getForegroundTintModeWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"foreground" withNSString:@"cgTintColor" withNSString:@"drawableTintMode"];
}

id ASViewImpl_getBackgroundTintModeWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((id<ASIWidget>) nil_chk(w)) getAttributeCommandValueWithNSString:@"background" withNSString:@"cgTintColor" withNSString:@"drawableTintMode"];
}

id ASViewImpl_getBackgroundTintWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  return [((ADView *) nil_chk(((ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class])))) getBackgroundTintList];
}

void ASViewImpl_requestLayoutWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    [w requestLayout];
  }
}

void ASViewImpl_invalidateWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  if ([((id<ASIWidget>) nil_chk(w)) isInitialised]) {
    [w invalidate];
  }
}

void ASViewImpl_requestLayoutWithASIWidget_withId_(id<ASIWidget> w, id nativeView) {
  ASViewImpl_initialize();
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) requestLayout];
  ASViewImpl_nativeRequestLayoutWithId_(nativeView);
}

void ASViewImpl_invalidateWithASIWidget_withId_(id<ASIWidget> w, id nativeView) {
  ASViewImpl_initialize();
  ASViewImpl_nativeInvalidateWithId_(nativeView);
}

void ASViewImpl_nativeRequestLayoutWithId_(id view) {
  ASViewImpl_initialize();
  [((UIView *) view) setNeedsLayout];
}

void ASViewImpl_nativeInvalidateWithId_(id view) {
  ASViewImpl_initialize();
  [((UIView *) view) setNeedsDisplay];
}

void ASViewImpl_setKeepScreenOnWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  [UIApplication sharedApplication].idleTimerDisabled = [(JavaLangBoolean*) value booleanValue];
}

id ASViewImpl_getKeepScreenOnWithId_(id uiView) {
  ASViewImpl_initialize();
  return [JavaLangBoolean valueOfWithBoolean :[UIApplication sharedApplication].idleTimerDisabled];
}

jboolean ASViewImpl_isMirrorSupported() {
  ASViewImpl_initialize();
  return false;
}

void ASViewImpl_setOnTouchWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  [((id<ASIWidget>) nil_chk(w)) storeUserDataWithNSString:@"touchEvent" withId:objValue];
  id<ADView_OnTouchListener> onTouchListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onTouchListener = new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onTouchListener = (id<ADView_OnTouchListener>) cast_check(objValue, ADView_OnTouchListener_class_());
  }
  ASViewImpl_UIControlEventTouchDelegate *delegate = new_ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(w, onTouchListener);
  [delegate nativeAddOnTouchListenerWithId:nativeView];
}

void ASViewImpl_startDragWithASIWidget_withNSString_(id<ASIWidget> w, NSString *eventData) {
  ASViewImpl_initialize();
}

void ASViewImpl_setOnDragWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeView, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnDragListener> onDragListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onDragListener = new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onDragListener = (id<ADView_OnDragListener>) cast_check(objValue, ADView_OnDragListener_class_());
  }
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w)) getFragment])) addListenerWithASIWidget:w withId:onDragListener];
  ASViewImpl_UIDropInteractionDelegate *dragDropInteractionDelegate = new_ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(w, onDragListener);
  [dragDropInteractionDelegate nativeAddDropInteractionWithId:nativeView];
}

void ASViewImpl_setAsDragSourceWithASIWidget_withId_withId_(id<ASIWidget> w, id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_UIDragInteractionDelegate *dragDropInteractionDelegate = new_ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(w, (NSString *) cast_chk(objValue, [NSString class]));
  [dragDropInteractionDelegate nativeAddDragInteractionWithId:nativeWidget];
}

id ASViewImpl_getClipDataWithADView_DragEvent_(ADView_DragEvent *event) {
  ASViewImpl_initialize();
  return [((ADView_DragEvent *) nil_chk(event)) getClipData];
}

id ASViewImpl_getForegroundWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id value = nil;
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  if ([((ADView *) nil_chk(view)) getForeground] != nil) {
    if ([[view getForeground] isKindOfClass:[ADStateListDrawable class]]) {
      return [view getForeground];
    }
    if ([[view getForeground] isKindOfClass:[ADDrawable class]]) {
      return [((ADDrawable *) nil_chk([view getForeground])) getDrawable];
    }
  }
  return value;
}

id ASViewImpl_getBackgroundWithASIWidget_(id<ASIWidget> w) {
  ASViewImpl_initialize();
  id value = nil;
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  if ([((ADView *) nil_chk(view)) getBackground] != nil) {
    if ([[view getBackground] isKindOfClass:[ADStateListDrawable class]]) {
      return [view getBackground];
    }
    if ([[view getBackground] isKindOfClass:[ADDrawable class]]) {
      return [((ADDrawable *) nil_chk([view getBackground])) getDrawable];
    }
  }
  return value;
}

void ASViewImpl_setOnKeyWithASIWidget_withId_(id<ASIWidget> w, id objValue) {
  ASViewImpl_initialize();
  id<ADView_OnKeyListener> onKeyListener;
  if ([objValue isKindOfClass:[NSString class]]) {
    onKeyListener = new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(w, (NSString *) objValue);
  }
  else {
    onKeyListener = (id<ADView_OnKeyListener>) cast_check(objValue, ADView_OnKeyListener_class_());
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(w)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setOnKeyListenerWithADView_OnKeyListener:onKeyListener];
}

void ASViewImpl_setLayerCornerRadiusWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(nativeWidget, [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]);
}

void ASViewImpl_nativeSetLayerCornerRadiusWithId_withFloat_(id nativeWidget, jfloat value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.cornerRadius = value;
}

void ASViewImpl_setLayerBorderColorWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeLayerBorderColorWithId_withId_(nativeWidget, objValue);
}

void ASViewImpl_nativeLayerBorderColorWithId_withId_(id nativeWidget, id value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.borderColor = ((UIColor*) value).CGColor;
}

void ASViewImpl_setLayerBorderWidthWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(nativeWidget, [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]);
}

void ASViewImpl_nativeLayerBorderWidthWithId_withFloat_(id nativeWidget, jfloat value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.borderWidth = value;
}

void ASViewImpl_setLayerMasksToBoundsWithId_withId_(id nativeWidget, id objValue) {
  ASViewImpl_initialize();
  ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(nativeWidget, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASViewImpl_nativeLayerBMasksToBoundsWithId_withBoolean_(id nativeWidget, jboolean value) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  view.layer.masksToBounds = value;
}

void ASViewImpl_nativeBringToFrontWithJavaUtilList_(id<JavaUtilList> widgets) {
  ASViewImpl_initialize();
  for (id<ASIWidget> __strong w in nil_chk(widgets)) {
    ASViewImpl_nativeBringToFrontWithId_([((id<ASIWidget>) nil_chk(w)) asNativeWidget]);
  }
}

void ASViewImpl_nativeBringToFrontWithId_(id nativeWidget) {
  ASViewImpl_initialize();
  UIView* view = ((UIView*)nativeWidget);
  [view.superview bringSubviewToFront:view];
}

void ASViewImpl_addEventInfoWithJavaUtilMap_withADMenuItem_(id<JavaUtilMap> obj, id<ADMenuItem> item) {
  ASViewImpl_initialize();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"itemId" withId:ASIdGenerator_getNameWithInt_([((id<ADMenuItem>) nil_chk(item)) getItemId])];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl)

@implementation ASViewImpl_IosAccessibilityTraits

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_IosAccessibilityTraits_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_IosAccessibilityTraits = { "IosAccessibilityTraits", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_IosAccessibilityTraits;
}

@end

void ASViewImpl_IosAccessibilityTraits_init(ASViewImpl_IosAccessibilityTraits *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"uiaccessibilitytraitadjustable" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitAdjustable))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitallowsdirectinteraction" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitAllowsDirectInteraction))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitbutton" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitButton))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitcausespageturn" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitCausesPageTurn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitheader" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitHeader))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitimage" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitImage))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitkeyboardkey" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitKeyboardKey))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitlink" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitLink))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitnone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitnotenabled" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitNotEnabled))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitplayssound" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitPlaysSound))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitsearchfield" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitSearchField))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitselected" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitSelected))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitstartsmediasession" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitStartsMediaSession))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitstatictext" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitStaticText))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitsummaryelement" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitSummaryElement))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraittabbar" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitTabBar))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uiaccessibilitytraitupdatesfrequently" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIAccessibilityTraitUpdatesFrequently))];
  }
}

ASViewImpl_IosAccessibilityTraits *new_ASViewImpl_IosAccessibilityTraits_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_IosAccessibilityTraits, init)
}

ASViewImpl_IosAccessibilityTraits *create_ASViewImpl_IosAccessibilityTraits_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_IosAccessibilityTraits, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_IosAccessibilityTraits)

@implementation ASViewImpl_BackgroundRepeat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_BackgroundRepeat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_BackgroundRepeat = { "BackgroundRepeat", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_BackgroundRepeat;
}

@end

void ASViewImpl_BackgroundRepeat_init(ASViewImpl_BackgroundRepeat *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"no-repeat" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"repeat" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASViewImpl_BackgroundRepeat *new_ASViewImpl_BackgroundRepeat_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_BackgroundRepeat, init)
}

ASViewImpl_BackgroundRepeat *create_ASViewImpl_BackgroundRepeat_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_BackgroundRepeat, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_BackgroundRepeat)

@implementation ASViewImpl_BackgroundTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_BackgroundTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_BackgroundTintMode = { "BackgroundTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_BackgroundTintMode;
}

@end

void ASViewImpl_BackgroundTintMode_init(ASViewImpl_BackgroundTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASViewImpl_BackgroundTintMode *new_ASViewImpl_BackgroundTintMode_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_BackgroundTintMode, init)
}

ASViewImpl_BackgroundTintMode *create_ASViewImpl_BackgroundTintMode_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_BackgroundTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_BackgroundTintMode)

@implementation ASViewImpl_ForegroundRepeat

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ForegroundRepeat_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ForegroundRepeat = { "ForegroundRepeat", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_ForegroundRepeat;
}

@end

void ASViewImpl_ForegroundRepeat_init(ASViewImpl_ForegroundRepeat *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"no-repeat" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"repeat" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASViewImpl_ForegroundRepeat *new_ASViewImpl_ForegroundRepeat_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_ForegroundRepeat, init)
}

ASViewImpl_ForegroundRepeat *create_ASViewImpl_ForegroundRepeat_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_ForegroundRepeat, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ForegroundRepeat)

@implementation ASViewImpl_ForegroundTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ForegroundTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ForegroundTintMode = { "ForegroundTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_ForegroundTintMode;
}

@end

void ASViewImpl_ForegroundTintMode_init(ASViewImpl_ForegroundTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASViewImpl_ForegroundTintMode *new_ASViewImpl_ForegroundTintMode_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_ForegroundTintMode, init)
}

ASViewImpl_ForegroundTintMode *create_ASViewImpl_ForegroundTintMode_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_ForegroundTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ForegroundTintMode)

@implementation ASViewImpl_Visibility

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_Visibility_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_Visibility = { "Visibility", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_Visibility;
}

@end

void ASViewImpl_Visibility_init(ASViewImpl_Visibility *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"gone" withId:JavaLangInteger_valueOfWithInt_((jint) 0x8)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"invisible" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"visible" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASViewImpl_Visibility *new_ASViewImpl_Visibility_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_Visibility, init)
}

ASViewImpl_Visibility *create_ASViewImpl_Visibility_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_Visibility, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_Visibility)

@implementation ASViewImpl_LayoutDirection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_LayoutDirection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_LayoutDirection = { "LayoutDirection", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_LayoutDirection;
}

@end

void ASViewImpl_LayoutDirection_init(ASViewImpl_LayoutDirection *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inherit" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"locale" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ltr" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"rtl" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASViewImpl_LayoutDirection *new_ASViewImpl_LayoutDirection_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_LayoutDirection, init)
}

ASViewImpl_LayoutDirection *create_ASViewImpl_LayoutDirection_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_LayoutDirection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_LayoutDirection)

@implementation ASViewImpl_TextDirection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_TextDirection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_TextDirection = { "TextDirection", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_TextDirection;
}

@end

void ASViewImpl_TextDirection_init(ASViewImpl_TextDirection *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"anyRtl" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"firstStrong" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"firstStrongLtr" withId:JavaLangInteger_valueOfWithInt_((jint) 0x6)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"firstStrongRtl" withId:JavaLangInteger_valueOfWithInt_((jint) 0x7)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"inherit" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"locale" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"ltr" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"rtl" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
  }
}

ASViewImpl_TextDirection *new_ASViewImpl_TextDirection_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_TextDirection, init)
}

ASViewImpl_TextDirection *create_ASViewImpl_TextDirection_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_TextDirection, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_TextDirection)

@implementation ASViewImpl_TextAlignment

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_TextAlignment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_TextAlignment = { "TextAlignment", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_TextAlignment;
}

@end

void ASViewImpl_TextAlignment_init(ASViewImpl_TextAlignment *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"gravity" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"inherit" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textEnd" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textStart" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"viewEnd" withId:JavaLangInteger_valueOfWithInt_((jint) 0x6)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"viewStart" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
  }
}

ASViewImpl_TextAlignment *new_ASViewImpl_TextAlignment_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_TextAlignment, init)
}

ASViewImpl_TextAlignment *create_ASViewImpl_TextAlignment_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_TextAlignment, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_TextAlignment)

@implementation ASViewImpl_Vtype

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_Vtype_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_Vtype = { "Vtype", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_Vtype;
}

@end

void ASViewImpl_Vtype_init(ASViewImpl_Vtype *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"email" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"time" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"date" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"url" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"tel" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
  }
}

ASViewImpl_Vtype *new_ASViewImpl_Vtype_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_Vtype, init)
}

ASViewImpl_Vtype *create_ASViewImpl_Vtype_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_Vtype, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_Vtype)

@implementation ASViewImpl_ValidationErrorDisplay

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ValidationErrorDisplay_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ValidationErrorDisplay = { "ValidationErrorDisplay", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASViewImpl_ValidationErrorDisplay;
}

@end

void ASViewImpl_ValidationErrorDisplay_init(ASViewImpl_ValidationErrorDisplay *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"popup" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"label" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"style" withId:JavaLangInteger_valueOfWithInt_((jint) 0x4)];
  }
}

ASViewImpl_ValidationErrorDisplay *new_ASViewImpl_ValidationErrorDisplay_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_ValidationErrorDisplay, init)
}

ASViewImpl_ValidationErrorDisplay *create_ASViewImpl_ValidationErrorDisplay_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_ValidationErrorDisplay, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ValidationErrorDisplay)

@implementation ASViewImpl_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)compareWithId:(id<ASIWidget>)arg0
               withId:(id<ASIWidget>)arg1 {
  return [((id<ASIWidget>) nil_chk(arg0)) getZIndex] - [((id<ASIWidget>) nil_chk(arg1)) getZIndex];
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "compare", "LASIWidget;LASIWidget;", "LASViewImpl;", "setZIndexWithASIWidget:withId:", "Ljava/lang/Object;Ljava/util/Comparator<Lcom/ashera/widget/IWidget;>;" };
  static const J2ObjcClassInfo _ASViewImpl_1 = { "", "com.ashera.layout", ptrTable, methods, NULL, 7, 0x8018, 2, 0, 2, -1, 3, 4, -1 };
  return &_ASViewImpl_1;
}

@end

void ASViewImpl_1_init(ASViewImpl_1 *self) {
  NSObject_init(self);
}

ASViewImpl_1 *new_ASViewImpl_1_init() {
  J2OBJC_NEW_IMPL(ASViewImpl_1, init)
}

ASViewImpl_1 *create_ASViewImpl_1_init() {
  J2OBJC_CREATE_IMPL(ASViewImpl_1, init)
}

@implementation ASViewImpl_OnClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  if (action_ == nil || [action_ isEqual:@"onClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onClick"];
    id<JavaUtilMap> obj = [self getOnClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"click"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onClickWithADView:);
  methods[4].selector = @selector(getOnClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onClick", "LADView;", "getOnClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnClickListener = { "OnClickListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnClickListener;
}

@end

void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnClickListener *new_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnClickListener *create_ASViewImpl_OnClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnClickListener)

@implementation ASViewImpl_OnTouchListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onTouchWithADView:(ADView *)v
       withADView_MotionEvent:(ADView_MotionEvent *)event {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onTouch"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTouch"];
    id<JavaUtilMap> obj = [self getOnTouchEventObjWithADView:v withADView_MotionEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, event } count:2 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return result;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnTouchEventObjWithADView:(ADView *)v
                         withADView_MotionEvent:(ADView_MotionEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"touch"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASViewImpl_addEventInfoWithJavaUtilMap_withADView_MotionEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTouch" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onTouchWithADView:withADView_MotionEvent:);
  methods[4].selector = @selector(getOnTouchEventObjWithADView:withADView_MotionEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onTouch", "LADView;LADView_MotionEvent;", "getOnTouchEventObj", "(Lr/android/view/View;Lr/android/view/View$MotionEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnTouchListener = { "OnTouchListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnTouchListener;
}

@end

void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnTouchListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnTouchListener *new_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnTouchListener *create_ASViewImpl_OnTouchListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnTouchListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnTouchListener)

@implementation ASViewImpl_OnLongClickListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onLongClickWithADView:(ADView *)v {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onLongClick"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onLongClick"];
    id<JavaUtilMap> obj = [self getOnLongClickEventObjWithADView:v];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v } count:1 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return result;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnLongClickEventObjWithADView:(ADView *)v {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"longclick"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onLongClick" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onLongClickWithADView:);
  methods[4].selector = @selector(getOnLongClickEventObjWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onLongClick", "LADView;", "getOnLongClickEventObj", "(Lr/android/view/View;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnLongClickListener = { "OnLongClickListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnLongClickListener;
}

@end

void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnLongClickListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnLongClickListener *new_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnLongClickListener *create_ASViewImpl_OnLongClickListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnLongClickListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnLongClickListener)

@implementation ASViewImpl_OnDragListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onDragWithADView:(ADView *)v
        withADView_DragEvent:(ADView_DragEvent *)event {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onDrag"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onDrag"];
    id<JavaUtilMap> obj = [self getOnDragEventObjWithADView:v withADView_DragEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, event } count:2 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return result;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnDragEventObjWithADView:(ADView *)v
                          withADView_DragEvent:(ADView_DragEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"drag"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASViewImpl_addEventInfoWithJavaUtilMap_withADView_DragEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onDrag" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onDragWithADView:withADView_DragEvent:);
  methods[4].selector = @selector(getOnDragEventObjWithADView:withADView_DragEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onDrag", "LADView;LADView_DragEvent;", "getOnDragEventObj", "(Lr/android/view/View;Lr/android/view/View$DragEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnDragListener = { "OnDragListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnDragListener;
}

@end

void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnDragListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnDragListener *new_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnDragListener *create_ASViewImpl_OnDragListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnDragListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnDragListener)

@implementation ASViewImpl_OnKeyListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onKeyWithADView:(ADView *)v
                    withInt:(jint)keyCode
             withADKeyEvent:(ADKeyEvent *)event {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onKey"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onKey"];
    id<JavaUtilMap> obj = [self getOnKeyEventObjWithADView:v withInt:keyCode withADKeyEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(keyCode), event } count:3 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return result;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnKeyEventObjWithADView:(ADView *)v
                                      withInt:(jint)keyCode
                               withADKeyEvent:(ADKeyEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"key"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"keyCode", JavaLangInteger_valueOfWithInt_(keyCode));
  ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onKey" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onKeyWithADView:withInt:withADKeyEvent:);
  methods[4].selector = @selector(getOnKeyEventObjWithADView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onKey", "LADView;ILADKeyEvent;", "getOnKeyEventObj", "(Lr/android/view/View;ILr/android/view/KeyEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_OnKeyListener = { "OnKeyListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASViewImpl_OnKeyListener;
}

@end

void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_, w, strValue)
}

ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(ASViewImpl_OnKeyListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASViewImpl_OnKeyListener *new_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASViewImpl_OnKeyListener *create_ASViewImpl_OnKeyListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASViewImpl_OnKeyListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_OnKeyListener)

@implementation ASViewImpl_ViewCommandBuilder

- (id)executeWithBoolean:(jboolean)set {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id)reset {
  orderGet_ = 0;
  orderSet_ = 0;
  command_ = new_JavaUtilHashMap_init();
  return self;
}

- (id<JavaUtilMap>)initCommandWithNSString:(NSString *)attributeName {
  id<JavaUtilMap> attrs = (id<JavaUtilMap>) cast_check([((id<JavaUtilMap>) nil_chk(command_)) getWithId:attributeName], JavaUtilMap_class_());
  if (attrs == nil) {
    attrs = new_JavaUtilHashMap_init();
    (void) [((id<JavaUtilMap>) nil_chk(command_)) putWithId:attributeName withId:attrs];
  }
  return attrs;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASViewImpl_ViewCommandBuilder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)tryGetIosBackgroundColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBackgroundColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosBackgroundColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBackgroundColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosBackgroundColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosBackgroundColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosIsHidden {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsHidden"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsHidden {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsHidden"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosIsHiddenWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsHidden"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosAlpha {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAlpha"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosAlpha {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAlpha"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAlphaWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAlpha"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetIosIsOpaque {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsOpaque"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsOpaque {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsOpaque"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosIsOpaqueWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsOpaque"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosTintColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTintColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTintColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTintColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosTintColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTintColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosClipsToBounds {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClipsToBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosClipsToBounds {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClipsToBounds"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosClipsToBoundsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClipsToBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosClearsContextBeforeDrawing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsContextBeforeDrawing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosClearsContextBeforeDrawing {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsContextBeforeDrawing"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosClearsContextBeforeDrawingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsContextBeforeDrawing"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosIsUserInteractionEnabled {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsUserInteractionEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsUserInteractionEnabled {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsUserInteractionEnabled"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosIsUserInteractionEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsUserInteractionEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosIsMultipleTouchEnabled {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsMultipleTouchEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsMultipleTouchEnabled {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsMultipleTouchEnabled"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosIsMultipleTouchEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsMultipleTouchEnabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosIsExclusiveTouch {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsExclusiveTouch"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsExclusiveTouch {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsExclusiveTouch"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosIsExclusiveTouchWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsExclusiveTouch"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosPreservesSuperviewLayoutMargins {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPreservesSuperviewLayoutMargins"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosPreservesSuperviewLayoutMargins {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPreservesSuperviewLayoutMargins"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosPreservesSuperviewLayoutMarginsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosPreservesSuperviewLayoutMargins"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosInsetsLayoutMarginsFromSafeArea {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInsetsLayoutMarginsFromSafeArea"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosInsetsLayoutMarginsFromSafeArea {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInsetsLayoutMarginsFromSafeArea"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosInsetsLayoutMarginsFromSafeAreaWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInsetsLayoutMarginsFromSafeArea"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosAutoresizesSubviews {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAutoresizesSubviews"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosAutoresizesSubviews {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAutoresizesSubviews"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAutoresizesSubviewsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAutoresizesSubviews"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosTranslatesAutoresizingMaskIntoConstraints {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTranslatesAutoresizingMaskIntoConstraints"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosTranslatesAutoresizingMaskIntoConstraints {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTranslatesAutoresizingMaskIntoConstraints"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosTranslatesAutoresizingMaskIntoConstraintsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTranslatesAutoresizingMaskIntoConstraints"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosContentScaleFactor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosContentScaleFactor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosContentScaleFactor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosContentScaleFactor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosContentScaleFactorWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosContentScaleFactor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetIosIsFocused {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsFocused"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsFocused {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsFocused"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)tryGetIosRestorationIdentifier {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosRestorationIdentifier"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosRestorationIdentifier {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosRestorationIdentifier"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosRestorationIdentifierWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosRestorationIdentifier"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosTag {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTag"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTag {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTag"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosTagWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTag"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (id)tryGetIosAccessibilityIgnoresInvertColors {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityIgnoresInvertColors"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosAccessibilityIgnoresInvertColors {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityIgnoresInvertColors"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAccessibilityIgnoresInvertColorsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityIgnoresInvertColors"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosLargeContentImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLargeContentImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosLargeContentImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLargeContentImage"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosLargeContentImageWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLargeContentImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosLargeContentTitle {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLargeContentTitle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosLargeContentTitle {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLargeContentTitle"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosLargeContentTitleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLargeContentTitle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosScalesLargeContentImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosScalesLargeContentImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosScalesLargeContentImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosScalesLargeContentImage"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosScalesLargeContentImageWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosScalesLargeContentImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosShowsLargeContentViewer {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosShowsLargeContentViewer"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosShowsLargeContentViewer {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosShowsLargeContentViewer"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosShowsLargeContentViewerWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosShowsLargeContentViewer"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosIsAccessibilityElement {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsAccessibilityElement"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsAccessibilityElement {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsAccessibilityElement"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosIsAccessibilityElementWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsAccessibilityElement"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetFocusable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsAccessibilityElement"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getFocusable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsAccessibilityElement"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setFocusableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"focusable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetIosAccessibilityLabel {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityLabel"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosAccessibilityLabel {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityLabel"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAccessibilityLabelWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityLabel"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosAccessibilityHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosAccessibilityHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityHint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAccessibilityHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetContentDescription {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getContentDescription {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityHint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setContentDescriptionWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"contentDescription"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosAccessibilityValue {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityValue"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosAccessibilityValue {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityValue"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAccessibilityValueWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityValue"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetIosAccessibilityTraits {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityTraits"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosAccessibilityTraits {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityTraits"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIosAccessibilityTraitsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAccessibilityTraits"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetId {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"id"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getId {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"id"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setIdWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"id"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetModelSyncEvents {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelSyncEvents"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getModelSyncEvents {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelSyncEvents"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setModelSyncEventsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelSyncEvents"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetModelParam {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelParam"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getModelParam {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelParam"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setModelParamWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelParam"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetModelPojoToUi {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelPojoToUi"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getModelPojoToUi {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelPojoToUi"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setModelPojoToUiWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelPojoToUi"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetModelUiToPojo {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelUiToPojo"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getModelUiToPojo {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelUiToPojo"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setModelUiToPojoWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelUiToPojo"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setModelPojoToUiParamsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelPojoToUiParams"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)refreshUiFromModelWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"refreshUiFromModel"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setModelUiToPojoEventIdsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"modelUiToPojoEventIds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)updateModelDataWithNSString:(NSString *)expression
                           withId:(id)payload {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"updateModelData"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  id<JavaUtilMap> wrapper = new_JavaUtilHashMap_init();
  (void) [wrapper putWithId:@"expression" withId:expression];
  (void) [wrapper putWithId:@"payload" withId:payload];
  (void) [attrs putWithId:@"value" withId:wrapper];
  return self;
}

- (id)notifyDataSetChangedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"notifyDataSetChanged"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetBackground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"background"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBackground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"background"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setBackgroundWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"background"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setBackgroundRepeatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundRepeat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setOnClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setOnTouchWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTouch"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setMinHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setAttributeUnderTestWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"attributeUnderTest"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetBackgroundTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBackgroundTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundTint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setBackgroundTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetBackgroundTintMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getBackgroundTintMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundTintMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setBackgroundTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"backgroundTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetForeground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foreground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getForeground {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foreground"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setForegroundWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foreground"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setForegroundRepeatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundRepeat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetForegroundTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getForegroundTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundTint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setForegroundTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetForegroundTintMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getForegroundTintMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundTintMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setForegroundTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetVisibility {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"visibility"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getVisibility {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"visibility"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setVisibilityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"visibility"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetAlpha {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"alpha"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAlpha {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"alpha"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setAlphaWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"alpha"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)setOnLongClickWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onLongClick"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetLongClickable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"longClickable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLongClickable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"longClickable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLongClickableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"longClickable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetClickable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clickable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isClickable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clickable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setClickableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"clickable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetTranslationX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTranslationX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationX"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTranslationXWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetTranslationY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTranslationY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationY"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTranslationYWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetTranslationZ {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationZ"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTranslationZ {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationZ"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTranslationZWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"translationZ"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetRotation {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getRotation {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotation"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setRotationWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetRotationX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotationX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getRotationX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotationX"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setRotationXWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotationX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetRotationY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotationY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getRotationY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotationY"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setRotationYWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"rotationY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetScaleX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getScaleX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleX"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setScaleXWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetScaleY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getScaleY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleY"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setScaleYWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scaleY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (id)tryGetTransformPivotX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"transformPivotX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTransformPivotX {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"transformPivotX"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTransformPivotXWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"transformPivotX"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetTransformPivotY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"transformPivotY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTransformPivotY {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"transformPivotY"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTransformPivotYWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"transformPivotY"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)invalidate {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"invalidate"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  return self;
}

- (id)requestLayout {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"requestLayout"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  return self;
}

- (id)tryGetKeepScreenOn {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"keepScreenOn"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isKeepScreenOn {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"keepScreenOn"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setKeepScreenOnWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"keepScreenOn"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetLayoutDirection {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutDirection"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLayoutDirection {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutDirection"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setLayoutDirectionWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"layoutDirection"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetTextDirection {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textDirection"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextDirection {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textDirection"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTextDirectionWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textDirection"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetTextAlignment {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAlignment"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextAlignment {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAlignment"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setTextAlignmentWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAlignment"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setOnDragWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onDrag"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setAsDragSourceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"asDragSource"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetEnabled {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isEnabled {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetDuplicateParentState {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"duplicateParentState"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isDuplicateParentState {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"duplicateParentState"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setDuplicateParentStateWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"duplicateParentState"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)tryGetForegroundGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getForegroundGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundGravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setForegroundGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"foregroundGravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setOnKeyWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onKey"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setIosLayerBorderWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLayerBorderWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setIosLayerBorderColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLayerBorderColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setIosLayerCornerRadiusWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLayerCornerRadius"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setIosLayerMasksToBoundsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosLayerMasksToBounds"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)setZIndexWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"zIndex"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (id)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetSelected {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selected"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isSelected {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selected"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)setSelectedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selected"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (id)setStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"style"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setErrorStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"errorStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)tryGetValidateForm {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"validateForm_"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getValidateForm {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"validateForm_"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (id)validateFormWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"validateForm"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setValidationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"validation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_requiredWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_required"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_minlengthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_minlength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_maxlengthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_maxlength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_minWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_min"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_maxWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_max"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_patternWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_pattern"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setV_typeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"v_type"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setValidationErrorDisplayTypeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"validationErrorDisplayType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setCustomErrorMessageValuesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"customErrorMessageValues"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setCustomErrorMessageKeysWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"customErrorMessageKeys"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (id)setInvalidateOnFrameChangeWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"invalidateOnFrameChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSObject;", 0x404, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 10, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 14, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 17, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 18, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 19, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 20, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 21, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 22, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 23, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 24, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 25, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 26, 27, -1, 28, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 29, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 30, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 31, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 33, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 35, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 37, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 38, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 39, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 40, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 41, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 42, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 43, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 44, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 45, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 46, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 47, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 48, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 49, 50, -1, 51, -1, -1 },
    { NULL, "LNSObject;", 0x1, 52, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 53, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 54, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 55, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 56, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 57, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 58, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 59, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 60, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 61, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 62, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 63, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 64, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 65, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 66, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 67, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, 68, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 69, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 70, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 71, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 72, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 73, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 74, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 75, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 76, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 77, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 78, 11, -1, 12, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 79, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 80, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 81, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 82, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 83, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 84, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 85, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 86, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 87, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 88, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 89, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 90, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 91, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 92, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 93, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 94, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 95, 27, -1, 28, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 96, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 97, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 98, 1, -1, 2, -1, -1 },
    { NULL, "LNSObject;", 0x1, 99, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 100, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 101, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 102, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 103, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 104, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 105, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 106, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 107, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 108, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 109, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 110, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 111, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 112, 5, -1, 8, -1, -1 },
    { NULL, "LNSObject;", 0x1, 113, 1, -1, 2, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(executeWithBoolean:);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(initCommandWithNSString:);
  methods[3].selector = @selector(init);
  methods[4].selector = @selector(tryGetIosBackgroundColor);
  methods[5].selector = @selector(getIosBackgroundColor);
  methods[6].selector = @selector(setIosBackgroundColorWithNSString:);
  methods[7].selector = @selector(tryGetIosIsHidden);
  methods[8].selector = @selector(isIosIsHidden);
  methods[9].selector = @selector(setIosIsHiddenWithBoolean:);
  methods[10].selector = @selector(tryGetIosAlpha);
  methods[11].selector = @selector(getIosAlpha);
  methods[12].selector = @selector(setIosAlphaWithFloat:);
  methods[13].selector = @selector(tryGetIosIsOpaque);
  methods[14].selector = @selector(isIosIsOpaque);
  methods[15].selector = @selector(setIosIsOpaqueWithBoolean:);
  methods[16].selector = @selector(tryGetIosTintColor);
  methods[17].selector = @selector(getIosTintColor);
  methods[18].selector = @selector(setIosTintColorWithNSString:);
  methods[19].selector = @selector(tryGetIosClipsToBounds);
  methods[20].selector = @selector(isIosClipsToBounds);
  methods[21].selector = @selector(setIosClipsToBoundsWithBoolean:);
  methods[22].selector = @selector(tryGetIosClearsContextBeforeDrawing);
  methods[23].selector = @selector(isIosClearsContextBeforeDrawing);
  methods[24].selector = @selector(setIosClearsContextBeforeDrawingWithBoolean:);
  methods[25].selector = @selector(tryGetIosIsUserInteractionEnabled);
  methods[26].selector = @selector(isIosIsUserInteractionEnabled);
  methods[27].selector = @selector(setIosIsUserInteractionEnabledWithBoolean:);
  methods[28].selector = @selector(tryGetIosIsMultipleTouchEnabled);
  methods[29].selector = @selector(isIosIsMultipleTouchEnabled);
  methods[30].selector = @selector(setIosIsMultipleTouchEnabledWithBoolean:);
  methods[31].selector = @selector(tryGetIosIsExclusiveTouch);
  methods[32].selector = @selector(isIosIsExclusiveTouch);
  methods[33].selector = @selector(setIosIsExclusiveTouchWithBoolean:);
  methods[34].selector = @selector(tryGetIosPreservesSuperviewLayoutMargins);
  methods[35].selector = @selector(isIosPreservesSuperviewLayoutMargins);
  methods[36].selector = @selector(setIosPreservesSuperviewLayoutMarginsWithBoolean:);
  methods[37].selector = @selector(tryGetIosInsetsLayoutMarginsFromSafeArea);
  methods[38].selector = @selector(isIosInsetsLayoutMarginsFromSafeArea);
  methods[39].selector = @selector(setIosInsetsLayoutMarginsFromSafeAreaWithBoolean:);
  methods[40].selector = @selector(tryGetIosAutoresizesSubviews);
  methods[41].selector = @selector(isIosAutoresizesSubviews);
  methods[42].selector = @selector(setIosAutoresizesSubviewsWithBoolean:);
  methods[43].selector = @selector(tryGetIosTranslatesAutoresizingMaskIntoConstraints);
  methods[44].selector = @selector(isIosTranslatesAutoresizingMaskIntoConstraints);
  methods[45].selector = @selector(setIosTranslatesAutoresizingMaskIntoConstraintsWithBoolean:);
  methods[46].selector = @selector(tryGetIosContentScaleFactor);
  methods[47].selector = @selector(getIosContentScaleFactor);
  methods[48].selector = @selector(setIosContentScaleFactorWithFloat:);
  methods[49].selector = @selector(tryGetIosIsFocused);
  methods[50].selector = @selector(isIosIsFocused);
  methods[51].selector = @selector(tryGetIosRestorationIdentifier);
  methods[52].selector = @selector(getIosRestorationIdentifier);
  methods[53].selector = @selector(setIosRestorationIdentifierWithNSString:);
  methods[54].selector = @selector(tryGetIosTag);
  methods[55].selector = @selector(getIosTag);
  methods[56].selector = @selector(setIosTagWithInt:);
  methods[57].selector = @selector(tryGetIosAccessibilityIgnoresInvertColors);
  methods[58].selector = @selector(isIosAccessibilityIgnoresInvertColors);
  methods[59].selector = @selector(setIosAccessibilityIgnoresInvertColorsWithBoolean:);
  methods[60].selector = @selector(tryGetIosLargeContentImage);
  methods[61].selector = @selector(getIosLargeContentImage);
  methods[62].selector = @selector(setIosLargeContentImageWithNSString:);
  methods[63].selector = @selector(tryGetIosLargeContentTitle);
  methods[64].selector = @selector(getIosLargeContentTitle);
  methods[65].selector = @selector(setIosLargeContentTitleWithNSString:);
  methods[66].selector = @selector(tryGetIosScalesLargeContentImage);
  methods[67].selector = @selector(isIosScalesLargeContentImage);
  methods[68].selector = @selector(setIosScalesLargeContentImageWithBoolean:);
  methods[69].selector = @selector(tryGetIosShowsLargeContentViewer);
  methods[70].selector = @selector(isIosShowsLargeContentViewer);
  methods[71].selector = @selector(setIosShowsLargeContentViewerWithBoolean:);
  methods[72].selector = @selector(tryGetIosIsAccessibilityElement);
  methods[73].selector = @selector(isIosIsAccessibilityElement);
  methods[74].selector = @selector(setIosIsAccessibilityElementWithBoolean:);
  methods[75].selector = @selector(tryGetFocusable);
  methods[76].selector = @selector(getFocusable);
  methods[77].selector = @selector(setFocusableWithBoolean:);
  methods[78].selector = @selector(tryGetIosAccessibilityLabel);
  methods[79].selector = @selector(getIosAccessibilityLabel);
  methods[80].selector = @selector(setIosAccessibilityLabelWithNSString:);
  methods[81].selector = @selector(tryGetIosAccessibilityHint);
  methods[82].selector = @selector(getIosAccessibilityHint);
  methods[83].selector = @selector(setIosAccessibilityHintWithNSString:);
  methods[84].selector = @selector(tryGetContentDescription);
  methods[85].selector = @selector(getContentDescription);
  methods[86].selector = @selector(setContentDescriptionWithNSString:);
  methods[87].selector = @selector(tryGetIosAccessibilityValue);
  methods[88].selector = @selector(getIosAccessibilityValue);
  methods[89].selector = @selector(setIosAccessibilityValueWithNSString:);
  methods[90].selector = @selector(tryGetIosAccessibilityTraits);
  methods[91].selector = @selector(getIosAccessibilityTraits);
  methods[92].selector = @selector(setIosAccessibilityTraitsWithNSString:);
  methods[93].selector = @selector(tryGetId);
  methods[94].selector = @selector(getId);
  methods[95].selector = @selector(setIdWithNSString:);
  methods[96].selector = @selector(tryGetModelSyncEvents);
  methods[97].selector = @selector(getModelSyncEvents);
  methods[98].selector = @selector(setModelSyncEventsWithNSString:);
  methods[99].selector = @selector(tryGetModelParam);
  methods[100].selector = @selector(getModelParam);
  methods[101].selector = @selector(setModelParamWithNSString:);
  methods[102].selector = @selector(tryGetModelPojoToUi);
  methods[103].selector = @selector(getModelPojoToUi);
  methods[104].selector = @selector(setModelPojoToUiWithNSString:);
  methods[105].selector = @selector(tryGetModelUiToPojo);
  methods[106].selector = @selector(getModelUiToPojo);
  methods[107].selector = @selector(setModelUiToPojoWithNSString:);
  methods[108].selector = @selector(setModelPojoToUiParamsWithNSString:);
  methods[109].selector = @selector(refreshUiFromModelWithNSString:);
  methods[110].selector = @selector(setModelUiToPojoEventIdsWithNSString:);
  methods[111].selector = @selector(updateModelDataWithNSString:withId:);
  methods[112].selector = @selector(notifyDataSetChangedWithBoolean:);
  methods[113].selector = @selector(tryGetBackground);
  methods[114].selector = @selector(getBackground);
  methods[115].selector = @selector(setBackgroundWithNSString:);
  methods[116].selector = @selector(setBackgroundRepeatWithNSString:);
  methods[117].selector = @selector(setOnClickWithNSString:);
  methods[118].selector = @selector(setOnTouchWithNSString:);
  methods[119].selector = @selector(tryGetMinWidth);
  methods[120].selector = @selector(getMinWidth);
  methods[121].selector = @selector(setMinWidthWithNSString:);
  methods[122].selector = @selector(tryGetMinHeight);
  methods[123].selector = @selector(getMinHeight);
  methods[124].selector = @selector(setMinHeightWithNSString:);
  methods[125].selector = @selector(setAttributeUnderTestWithNSString:);
  methods[126].selector = @selector(tryGetBackgroundTint);
  methods[127].selector = @selector(getBackgroundTint);
  methods[128].selector = @selector(setBackgroundTintWithNSString:);
  methods[129].selector = @selector(tryGetBackgroundTintMode);
  methods[130].selector = @selector(getBackgroundTintMode);
  methods[131].selector = @selector(setBackgroundTintModeWithNSString:);
  methods[132].selector = @selector(tryGetForeground);
  methods[133].selector = @selector(getForeground);
  methods[134].selector = @selector(setForegroundWithNSString:);
  methods[135].selector = @selector(setForegroundRepeatWithNSString:);
  methods[136].selector = @selector(tryGetForegroundTint);
  methods[137].selector = @selector(getForegroundTint);
  methods[138].selector = @selector(setForegroundTintWithNSString:);
  methods[139].selector = @selector(tryGetForegroundTintMode);
  methods[140].selector = @selector(getForegroundTintMode);
  methods[141].selector = @selector(setForegroundTintModeWithNSString:);
  methods[142].selector = @selector(tryGetVisibility);
  methods[143].selector = @selector(getVisibility);
  methods[144].selector = @selector(setVisibilityWithNSString:);
  methods[145].selector = @selector(tryGetAlpha);
  methods[146].selector = @selector(getAlpha);
  methods[147].selector = @selector(setAlphaWithFloat:);
  methods[148].selector = @selector(setOnLongClickWithNSString:);
  methods[149].selector = @selector(tryGetLongClickable);
  methods[150].selector = @selector(isLongClickable);
  methods[151].selector = @selector(setLongClickableWithBoolean:);
  methods[152].selector = @selector(tryGetClickable);
  methods[153].selector = @selector(isClickable);
  methods[154].selector = @selector(setClickableWithBoolean:);
  methods[155].selector = @selector(tryGetTranslationX);
  methods[156].selector = @selector(getTranslationX);
  methods[157].selector = @selector(setTranslationXWithNSString:);
  methods[158].selector = @selector(tryGetTranslationY);
  methods[159].selector = @selector(getTranslationY);
  methods[160].selector = @selector(setTranslationYWithNSString:);
  methods[161].selector = @selector(tryGetTranslationZ);
  methods[162].selector = @selector(getTranslationZ);
  methods[163].selector = @selector(setTranslationZWithNSString:);
  methods[164].selector = @selector(tryGetRotation);
  methods[165].selector = @selector(getRotation);
  methods[166].selector = @selector(setRotationWithFloat:);
  methods[167].selector = @selector(tryGetRotationX);
  methods[168].selector = @selector(getRotationX);
  methods[169].selector = @selector(setRotationXWithFloat:);
  methods[170].selector = @selector(tryGetRotationY);
  methods[171].selector = @selector(getRotationY);
  methods[172].selector = @selector(setRotationYWithFloat:);
  methods[173].selector = @selector(tryGetScaleX);
  methods[174].selector = @selector(getScaleX);
  methods[175].selector = @selector(setScaleXWithFloat:);
  methods[176].selector = @selector(tryGetScaleY);
  methods[177].selector = @selector(getScaleY);
  methods[178].selector = @selector(setScaleYWithFloat:);
  methods[179].selector = @selector(tryGetTransformPivotX);
  methods[180].selector = @selector(getTransformPivotX);
  methods[181].selector = @selector(setTransformPivotXWithNSString:);
  methods[182].selector = @selector(tryGetTransformPivotY);
  methods[183].selector = @selector(getTransformPivotY);
  methods[184].selector = @selector(setTransformPivotYWithNSString:);
  methods[185].selector = @selector(invalidate);
  methods[186].selector = @selector(requestLayout);
  methods[187].selector = @selector(tryGetKeepScreenOn);
  methods[188].selector = @selector(isKeepScreenOn);
  methods[189].selector = @selector(setKeepScreenOnWithBoolean:);
  methods[190].selector = @selector(tryGetLayoutDirection);
  methods[191].selector = @selector(getLayoutDirection);
  methods[192].selector = @selector(setLayoutDirectionWithNSString:);
  methods[193].selector = @selector(tryGetTextDirection);
  methods[194].selector = @selector(getTextDirection);
  methods[195].selector = @selector(setTextDirectionWithNSString:);
  methods[196].selector = @selector(tryGetTextAlignment);
  methods[197].selector = @selector(getTextAlignment);
  methods[198].selector = @selector(setTextAlignmentWithNSString:);
  methods[199].selector = @selector(setOnDragWithNSString:);
  methods[200].selector = @selector(setAsDragSourceWithNSString:);
  methods[201].selector = @selector(tryGetEnabled);
  methods[202].selector = @selector(isEnabled);
  methods[203].selector = @selector(setEnabledWithBoolean:);
  methods[204].selector = @selector(tryGetDuplicateParentState);
  methods[205].selector = @selector(isDuplicateParentState);
  methods[206].selector = @selector(setDuplicateParentStateWithBoolean:);
  methods[207].selector = @selector(tryGetForegroundGravity);
  methods[208].selector = @selector(getForegroundGravity);
  methods[209].selector = @selector(setForegroundGravityWithNSString:);
  methods[210].selector = @selector(setOnKeyWithNSString:);
  methods[211].selector = @selector(setIosLayerBorderWidthWithNSString:);
  methods[212].selector = @selector(setIosLayerBorderColorWithNSString:);
  methods[213].selector = @selector(setIosLayerCornerRadiusWithNSString:);
  methods[214].selector = @selector(setIosLayerMasksToBoundsWithBoolean:);
  methods[215].selector = @selector(setZIndexWithInt:);
  methods[216].selector = @selector(tryGetMaxWidth);
  methods[217].selector = @selector(getMaxWidth);
  methods[218].selector = @selector(setMaxWidthWithNSString:);
  methods[219].selector = @selector(tryGetMaxHeight);
  methods[220].selector = @selector(getMaxHeight);
  methods[221].selector = @selector(setMaxHeightWithNSString:);
  methods[222].selector = @selector(tryGetSelected);
  methods[223].selector = @selector(isSelected);
  methods[224].selector = @selector(setSelectedWithBoolean:);
  methods[225].selector = @selector(setStyleWithNSString:);
  methods[226].selector = @selector(setErrorStyleWithNSString:);
  methods[227].selector = @selector(tryGetValidateForm);
  methods[228].selector = @selector(getValidateForm);
  methods[229].selector = @selector(validateFormWithNSString:);
  methods[230].selector = @selector(setValidationWithNSString:);
  methods[231].selector = @selector(setV_requiredWithNSString:);
  methods[232].selector = @selector(setV_minlengthWithNSString:);
  methods[233].selector = @selector(setV_maxlengthWithNSString:);
  methods[234].selector = @selector(setV_minWithNSString:);
  methods[235].selector = @selector(setV_maxWithNSString:);
  methods[236].selector = @selector(setV_patternWithNSString:);
  methods[237].selector = @selector(setV_typeWithNSString:);
  methods[238].selector = @selector(setValidationErrorDisplayTypeWithNSString:);
  methods[239].selector = @selector(setCustomErrorMessageValuesWithNSString:);
  methods[240].selector = @selector(setCustomErrorMessageKeysWithNSString:);
  methods[241].selector = @selector(setInvalidateOnFrameChangeWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "command_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x4, -1, -1, 114, -1 },
    { "orderGet_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "orderSet_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "execute", "Z", "(Z)TT;", "()TT;", "initCommand", "LNSString;", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "setIosBackgroundColor", "(Ljava/lang/String;)TT;", "setIosIsHidden", "setIosAlpha", "F", "(F)TT;", "setIosIsOpaque", "setIosTintColor", "setIosClipsToBounds", "setIosClearsContextBeforeDrawing", "setIosIsUserInteractionEnabled", "setIosIsMultipleTouchEnabled", "setIosIsExclusiveTouch", "setIosPreservesSuperviewLayoutMargins", "setIosInsetsLayoutMarginsFromSafeArea", "setIosAutoresizesSubviews", "setIosTranslatesAutoresizingMaskIntoConstraints", "setIosContentScaleFactor", "setIosRestorationIdentifier", "setIosTag", "I", "(I)TT;", "setIosAccessibilityIgnoresInvertColors", "setIosLargeContentImage", "setIosLargeContentTitle", "setIosScalesLargeContentImage", "setIosShowsLargeContentViewer", "setIosIsAccessibilityElement", "setFocusable", "setIosAccessibilityLabel", "setIosAccessibilityHint", "setContentDescription", "setIosAccessibilityValue", "setIosAccessibilityTraits", "setId", "setModelSyncEvents", "setModelParam", "setModelPojoToUi", "setModelUiToPojo", "setModelPojoToUiParams", "refreshUiFromModel", "setModelUiToPojoEventIds", "updateModelData", "LNSString;LNSObject;", "(Ljava/lang/String;Ljava/lang/Object;)TT;", "notifyDataSetChanged", "setBackground", "setBackgroundRepeat", "setOnClick", "setOnTouch", "setMinWidth", "setMinHeight", "setAttributeUnderTest", "setBackgroundTint", "setBackgroundTintMode", "setForeground", "setForegroundRepeat", "setForegroundTint", "setForegroundTintMode", "setVisibility", "setAlpha", "setOnLongClick", "setLongClickable", "setClickable", "setTranslationX", "setTranslationY", "setTranslationZ", "setRotation", "setRotationX", "setRotationY", "setScaleX", "setScaleY", "setTransformPivotX", "setTransformPivotY", "setKeepScreenOn", "setLayoutDirection", "setTextDirection", "setTextAlignment", "setOnDrag", "setAsDragSource", "setEnabled", "setDuplicateParentState", "setForegroundGravity", "setOnKey", "setIosLayerBorderWidth", "setIosLayerBorderColor", "setIosLayerCornerRadius", "setIosLayerMasksToBounds", "setZIndex", "setMaxWidth", "setMaxHeight", "setSelected", "setStyle", "setErrorStyle", "validateForm", "setValidation", "setV_required", "setV_minlength", "setV_maxlength", "setV_min", "setV_max", "setV_pattern", "setV_type", "setValidationErrorDisplayType", "setCustomErrorMessageValues", "setCustomErrorMessageKeys", "setInvalidateOnFrameChange", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASViewImpl;", "<T:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ASViewImpl_ViewCommandBuilder = { "ViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x409, 242, 3, 115, -1, -1, 116, -1 };
  return &_ASViewImpl_ViewCommandBuilder;
}

@end

void ASViewImpl_ViewCommandBuilder_init(ASViewImpl_ViewCommandBuilder *self) {
  NSObject_init(self);
  self->command_ = new_JavaUtilHashMap_init();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ViewCommandBuilder)

@implementation ASViewImpl_ViewCommandBuilderInternal

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASViewImpl_ViewCommandBuilderInternal_initWithASIWidget_(self, widget);
  return self;
}

- (ASViewImpl_ViewCommandBuilderInternal *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [((id<ASIWidget>) nil_chk(widget_)) executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget_)) getFragment])) remeasure];
  }
  [((id<ASIWidget>) nil_chk(widget_)) executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASViewImpl_ViewCommandBuilderInternal;", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(executeWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "execute", "Z", "LASViewImpl;", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/ViewImpl$ViewCommandBuilderInternal;>;" };
  static const J2ObjcClassInfo _ASViewImpl_ViewCommandBuilderInternal = { "ViewCommandBuilderInternal", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 2, 1, 3, -1, -1, 4, -1 };
  return &_ASViewImpl_ViewCommandBuilderInternal;
}

@end

void ASViewImpl_ViewCommandBuilderInternal_initWithASIWidget_(ASViewImpl_ViewCommandBuilderInternal *self, id<ASIWidget> widget) {
  ASViewImpl_ViewCommandBuilder_init(self);
  self->widget_ = widget;
}

ASViewImpl_ViewCommandBuilderInternal *new_ASViewImpl_ViewCommandBuilderInternal_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASViewImpl_ViewCommandBuilderInternal, initWithASIWidget_, widget)
}

ASViewImpl_ViewCommandBuilderInternal *create_ASViewImpl_ViewCommandBuilderInternal_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASViewImpl_ViewCommandBuilderInternal, initWithASIWidget_, widget)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ViewCommandBuilderInternal)

@implementation ASViewImpl_ViewBean

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ASViewImpl_ViewBean_initWithASIWidget_(self, widget);
  return self;
}

- (ASViewImpl_ViewCommandBuilderInternal *)getBuilder {
  return ASViewImpl_ViewBean_getBuilder(self);
}

- (id)getIosBackgroundColor {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosBackgroundColor])) executeWithBoolean:false])) getIosBackgroundColor];
}

- (void)setIosBackgroundColorWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosBackgroundColorWithNSString:value])) executeWithBoolean:true];
}

- (id)isIosIsHidden {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsHidden])) executeWithBoolean:false])) isIosIsHidden];
}

- (void)setIosIsHiddenWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosIsHiddenWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosAlpha {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAlpha])) executeWithBoolean:false])) getIosAlpha];
}

- (void)setIosAlphaWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAlphaWithFloat:value])) executeWithBoolean:true];
}

- (id)isIosIsOpaque {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsOpaque])) executeWithBoolean:false])) isIosIsOpaque];
}

- (void)setIosIsOpaqueWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosIsOpaqueWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosTintColor {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosTintColor])) executeWithBoolean:false])) getIosTintColor];
}

- (void)setIosTintColorWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosTintColorWithNSString:value])) executeWithBoolean:true];
}

- (id)isIosClipsToBounds {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosClipsToBounds])) executeWithBoolean:false])) isIosClipsToBounds];
}

- (void)setIosClipsToBoundsWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosClipsToBoundsWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosClearsContextBeforeDrawing {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosClearsContextBeforeDrawing])) executeWithBoolean:false])) isIosClearsContextBeforeDrawing];
}

- (void)setIosClearsContextBeforeDrawingWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosClearsContextBeforeDrawingWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsUserInteractionEnabled {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsUserInteractionEnabled])) executeWithBoolean:false])) isIosIsUserInteractionEnabled];
}

- (void)setIosIsUserInteractionEnabledWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosIsUserInteractionEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsMultipleTouchEnabled {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsMultipleTouchEnabled])) executeWithBoolean:false])) isIosIsMultipleTouchEnabled];
}

- (void)setIosIsMultipleTouchEnabledWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosIsMultipleTouchEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsExclusiveTouch {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsExclusiveTouch])) executeWithBoolean:false])) isIosIsExclusiveTouch];
}

- (void)setIosIsExclusiveTouchWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosIsExclusiveTouchWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosPreservesSuperviewLayoutMargins {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosPreservesSuperviewLayoutMargins])) executeWithBoolean:false])) isIosPreservesSuperviewLayoutMargins];
}

- (void)setIosPreservesSuperviewLayoutMarginsWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosPreservesSuperviewLayoutMarginsWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosInsetsLayoutMarginsFromSafeArea {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosInsetsLayoutMarginsFromSafeArea])) executeWithBoolean:false])) isIosInsetsLayoutMarginsFromSafeArea];
}

- (void)setIosInsetsLayoutMarginsFromSafeAreaWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosInsetsLayoutMarginsFromSafeAreaWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosAutoresizesSubviews {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAutoresizesSubviews])) executeWithBoolean:false])) isIosAutoresizesSubviews];
}

- (void)setIosAutoresizesSubviewsWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAutoresizesSubviewsWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosTranslatesAutoresizingMaskIntoConstraints {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosTranslatesAutoresizingMaskIntoConstraints])) executeWithBoolean:false])) isIosTranslatesAutoresizingMaskIntoConstraints];
}

- (void)setIosTranslatesAutoresizingMaskIntoConstraintsWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosTranslatesAutoresizingMaskIntoConstraintsWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosContentScaleFactor {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosContentScaleFactor])) executeWithBoolean:false])) getIosContentScaleFactor];
}

- (void)setIosContentScaleFactorWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosContentScaleFactorWithFloat:value])) executeWithBoolean:true];
}

- (id)isIosIsFocused {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsFocused])) executeWithBoolean:false])) isIosIsFocused];
}

- (id)getIosRestorationIdentifier {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosRestorationIdentifier])) executeWithBoolean:false])) getIosRestorationIdentifier];
}

- (void)setIosRestorationIdentifierWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosRestorationIdentifierWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosTag {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosTag])) executeWithBoolean:false])) getIosTag];
}

- (void)setIosTagWithInt:(jint)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosTagWithInt:value])) executeWithBoolean:true];
}

- (id)isIosAccessibilityIgnoresInvertColors {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAccessibilityIgnoresInvertColors])) executeWithBoolean:false])) isIosAccessibilityIgnoresInvertColors];
}

- (void)setIosAccessibilityIgnoresInvertColorsWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAccessibilityIgnoresInvertColorsWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosLargeContentImage {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosLargeContentImage])) executeWithBoolean:false])) getIosLargeContentImage];
}

- (void)setIosLargeContentImageWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosLargeContentImageWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosLargeContentTitle {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosLargeContentTitle])) executeWithBoolean:false])) getIosLargeContentTitle];
}

- (void)setIosLargeContentTitleWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosLargeContentTitleWithNSString:value])) executeWithBoolean:true];
}

- (id)isIosScalesLargeContentImage {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosScalesLargeContentImage])) executeWithBoolean:false])) isIosScalesLargeContentImage];
}

- (void)setIosScalesLargeContentImageWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosScalesLargeContentImageWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosShowsLargeContentViewer {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosShowsLargeContentViewer])) executeWithBoolean:false])) isIosShowsLargeContentViewer];
}

- (void)setIosShowsLargeContentViewerWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosShowsLargeContentViewerWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsAccessibilityElement {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosIsAccessibilityElement])) executeWithBoolean:false])) isIosIsAccessibilityElement];
}

- (void)setIosIsAccessibilityElementWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosIsAccessibilityElementWithBoolean:value])) executeWithBoolean:true];
}

- (id)getFocusable {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetFocusable])) executeWithBoolean:false])) getFocusable];
}

- (void)setFocusableWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setFocusableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getIosAccessibilityLabel {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAccessibilityLabel])) executeWithBoolean:false])) getIosAccessibilityLabel];
}

- (void)setIosAccessibilityLabelWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAccessibilityLabelWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosAccessibilityHint {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAccessibilityHint])) executeWithBoolean:false])) getIosAccessibilityHint];
}

- (void)setIosAccessibilityHintWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAccessibilityHintWithNSString:value])) executeWithBoolean:true];
}

- (id)getContentDescription {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetContentDescription])) executeWithBoolean:false])) getContentDescription];
}

- (void)setContentDescriptionWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setContentDescriptionWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosAccessibilityValue {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAccessibilityValue])) executeWithBoolean:false])) getIosAccessibilityValue];
}

- (void)setIosAccessibilityValueWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAccessibilityValueWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosAccessibilityTraits {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetIosAccessibilityTraits])) executeWithBoolean:false])) getIosAccessibilityTraits];
}

- (void)setIosAccessibilityTraitsWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosAccessibilityTraitsWithNSString:value])) executeWithBoolean:true];
}

- (id)getModelSyncEvents {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetModelSyncEvents])) executeWithBoolean:false])) getModelSyncEvents];
}

- (void)setModelSyncEventsWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setModelSyncEventsWithNSString:value])) executeWithBoolean:true];
}

- (id)getModelParam {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetModelParam])) executeWithBoolean:false])) getModelParam];
}

- (void)setModelParamWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setModelParamWithNSString:value])) executeWithBoolean:true];
}

- (id)getModelPojoToUi {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetModelPojoToUi])) executeWithBoolean:false])) getModelPojoToUi];
}

- (void)setModelPojoToUiWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setModelPojoToUiWithNSString:value])) executeWithBoolean:true];
}

- (id)getModelUiToPojo {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetModelUiToPojo])) executeWithBoolean:false])) getModelUiToPojo];
}

- (void)setModelUiToPojoWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setModelUiToPojoWithNSString:value])) executeWithBoolean:true];
}

- (void)setModelPojoToUiParamsWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setModelPojoToUiParamsWithNSString:value])) executeWithBoolean:true];
}

- (void)refreshUiFromModelWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) refreshUiFromModelWithNSString:value])) executeWithBoolean:true];
}

- (void)setModelUiToPojoEventIdsWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setModelUiToPojoEventIdsWithNSString:value])) executeWithBoolean:true];
}

- (void)updateModelDataWithNSString:(NSString *)expression
                             withId:(id)payload {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) updateModelDataWithNSString:expression withId:payload])) executeWithBoolean:true];
}

- (void)notifyDataSetChangedWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) notifyDataSetChangedWithBoolean:value])) executeWithBoolean:true];
}

- (id)getBackground {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetBackground])) executeWithBoolean:false])) getBackground];
}

- (void)setBackgroundWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setBackgroundWithNSString:value])) executeWithBoolean:true];
}

- (void)setBackgroundRepeatWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setBackgroundRepeatWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnClickWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setOnClickWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnTouchWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setOnTouchWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinWidth {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetMinWidth])) executeWithBoolean:false])) getMinWidth];
}

- (void)setMinWidthWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinHeight {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetMinHeight])) executeWithBoolean:false])) getMinHeight];
}

- (void)setMinHeightWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setMinHeightWithNSString:value])) executeWithBoolean:true];
}

- (void)setAttributeUnderTestWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setAttributeUnderTestWithNSString:value])) executeWithBoolean:true];
}

- (id)getBackgroundTint {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetBackgroundTint])) executeWithBoolean:false])) getBackgroundTint];
}

- (void)setBackgroundTintWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setBackgroundTintWithNSString:value])) executeWithBoolean:true];
}

- (id)getBackgroundTintMode {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetBackgroundTintMode])) executeWithBoolean:false])) getBackgroundTintMode];
}

- (void)setBackgroundTintModeWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setBackgroundTintModeWithNSString:value])) executeWithBoolean:true];
}

- (id)getForeground {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetForeground])) executeWithBoolean:false])) getForeground];
}

- (void)setForegroundWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setForegroundWithNSString:value])) executeWithBoolean:true];
}

- (void)setForegroundRepeatWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setForegroundRepeatWithNSString:value])) executeWithBoolean:true];
}

- (id)getForegroundTint {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetForegroundTint])) executeWithBoolean:false])) getForegroundTint];
}

- (void)setForegroundTintWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setForegroundTintWithNSString:value])) executeWithBoolean:true];
}

- (id)getForegroundTintMode {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetForegroundTintMode])) executeWithBoolean:false])) getForegroundTintMode];
}

- (void)setForegroundTintModeWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setForegroundTintModeWithNSString:value])) executeWithBoolean:true];
}

- (id)getVisibility {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetVisibility])) executeWithBoolean:false])) getVisibility];
}

- (void)setVisibilityWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setVisibilityWithNSString:value])) executeWithBoolean:true];
}

- (id)getAlpha {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetAlpha])) executeWithBoolean:false])) getAlpha];
}

- (void)setAlphaWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setAlphaWithFloat:value])) executeWithBoolean:true];
}

- (void)setOnLongClickWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setOnLongClickWithNSString:value])) executeWithBoolean:true];
}

- (id)isLongClickable {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetLongClickable])) executeWithBoolean:false])) isLongClickable];
}

- (void)setLongClickableWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setLongClickableWithBoolean:value])) executeWithBoolean:true];
}

- (id)isClickable {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetClickable])) executeWithBoolean:false])) isClickable];
}

- (void)setClickableWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setClickableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTranslationX {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTranslationX])) executeWithBoolean:false])) getTranslationX];
}

- (void)setTranslationXWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTranslationXWithNSString:value])) executeWithBoolean:true];
}

- (id)getTranslationY {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTranslationY])) executeWithBoolean:false])) getTranslationY];
}

- (void)setTranslationYWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTranslationYWithNSString:value])) executeWithBoolean:true];
}

- (id)getTranslationZ {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTranslationZ])) executeWithBoolean:false])) getTranslationZ];
}

- (void)setTranslationZWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTranslationZWithNSString:value])) executeWithBoolean:true];
}

- (id)getRotation {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetRotation])) executeWithBoolean:false])) getRotation];
}

- (void)setRotationWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setRotationWithFloat:value])) executeWithBoolean:true];
}

- (id)getRotationX {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetRotationX])) executeWithBoolean:false])) getRotationX];
}

- (void)setRotationXWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setRotationXWithFloat:value])) executeWithBoolean:true];
}

- (id)getRotationY {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetRotationY])) executeWithBoolean:false])) getRotationY];
}

- (void)setRotationYWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setRotationYWithFloat:value])) executeWithBoolean:true];
}

- (id)getScaleX {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetScaleX])) executeWithBoolean:false])) getScaleX];
}

- (void)setScaleXWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setScaleXWithFloat:value])) executeWithBoolean:true];
}

- (id)getScaleY {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetScaleY])) executeWithBoolean:false])) getScaleY];
}

- (void)setScaleYWithFloat:(jfloat)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setScaleYWithFloat:value])) executeWithBoolean:true];
}

- (id)getTransformPivotX {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTransformPivotX])) executeWithBoolean:false])) getTransformPivotX];
}

- (void)setTransformPivotXWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTransformPivotXWithNSString:value])) executeWithBoolean:true];
}

- (id)getTransformPivotY {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTransformPivotY])) executeWithBoolean:false])) getTransformPivotY];
}

- (void)setTransformPivotYWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTransformPivotYWithNSString:value])) executeWithBoolean:true];
}

- (void)invalidate {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) invalidate])) executeWithBoolean:true];
}

- (void)requestLayout {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) requestLayout])) executeWithBoolean:true];
}

- (id)isKeepScreenOn {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetKeepScreenOn])) executeWithBoolean:false])) isKeepScreenOn];
}

- (void)setKeepScreenOnWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setKeepScreenOnWithBoolean:value])) executeWithBoolean:true];
}

- (id)getLayoutDirection {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetLayoutDirection])) executeWithBoolean:false])) getLayoutDirection];
}

- (void)setLayoutDirectionWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setLayoutDirectionWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextDirection {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTextDirection])) executeWithBoolean:false])) getTextDirection];
}

- (void)setTextDirectionWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTextDirectionWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextAlignment {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetTextAlignment])) executeWithBoolean:false])) getTextAlignment];
}

- (void)setTextAlignmentWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setTextAlignmentWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnDragWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setOnDragWithNSString:value])) executeWithBoolean:true];
}

- (void)setAsDragSourceWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setAsDragSourceWithNSString:value])) executeWithBoolean:true];
}

- (id)isEnabled {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetEnabled])) executeWithBoolean:false])) isEnabled];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)isDuplicateParentState {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetDuplicateParentState])) executeWithBoolean:false])) isDuplicateParentState];
}

- (void)setDuplicateParentStateWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setDuplicateParentStateWithBoolean:value])) executeWithBoolean:true];
}

- (id)getForegroundGravity {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetForegroundGravity])) executeWithBoolean:false])) getForegroundGravity];
}

- (void)setForegroundGravityWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setForegroundGravityWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnKeyWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setOnKeyWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosLayerBorderWidthWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosLayerBorderWidthWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosLayerBorderColorWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosLayerBorderColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosLayerCornerRadiusWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosLayerCornerRadiusWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosLayerMasksToBoundsWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setIosLayerMasksToBoundsWithBoolean:value])) executeWithBoolean:true];
}

- (void)setZIndexWithInt:(jint)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setZIndexWithInt:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)isSelected {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetSelected])) executeWithBoolean:false])) isSelected];
}

- (void)setSelectedWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setSelectedWithBoolean:value])) executeWithBoolean:true];
}

- (void)setStyleWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setErrorStyleWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setErrorStyleWithNSString:value])) executeWithBoolean:true];
}

- (id)getValidateForm {
  return [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) tryGetValidateForm])) executeWithBoolean:false])) getValidateForm];
}

- (void)validateFormWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) validateFormWithNSString:value])) executeWithBoolean:true];
}

- (void)setValidationWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setValidationWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_requiredWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_requiredWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_minlengthWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_minlengthWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_maxlengthWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_maxlengthWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_minWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_minWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_maxWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_maxWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_patternWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_patternWithNSString:value])) executeWithBoolean:true];
}

- (void)setV_typeWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setV_typeWithNSString:value])) executeWithBoolean:true];
}

- (void)setValidationErrorDisplayTypeWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setValidationErrorDisplayTypeWithNSString:value])) executeWithBoolean:true];
}

- (void)setCustomErrorMessageValuesWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setCustomErrorMessageValuesWithNSString:value])) executeWithBoolean:true];
}

- (void)setCustomErrorMessageKeysWithNSString:(NSString *)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setCustomErrorMessageKeysWithNSString:value])) executeWithBoolean:true];
}

- (void)setInvalidateOnFrameChangeWithBoolean:(jboolean)value {
  (void) [((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk([((ASViewImpl_ViewCommandBuilderInternal *) nil_chk(ASViewImpl_ViewBean_getBuilder(self))) reset])) setInvalidateOnFrameChangeWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASViewImpl_ViewCommandBuilderInternal;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 82, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 85, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 86, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 88, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 90, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 94, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 95, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 101, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 102, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 103, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 104, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:);
  methods[1].selector = @selector(getBuilder);
  methods[2].selector = @selector(getIosBackgroundColor);
  methods[3].selector = @selector(setIosBackgroundColorWithNSString:);
  methods[4].selector = @selector(isIosIsHidden);
  methods[5].selector = @selector(setIosIsHiddenWithBoolean:);
  methods[6].selector = @selector(getIosAlpha);
  methods[7].selector = @selector(setIosAlphaWithFloat:);
  methods[8].selector = @selector(isIosIsOpaque);
  methods[9].selector = @selector(setIosIsOpaqueWithBoolean:);
  methods[10].selector = @selector(getIosTintColor);
  methods[11].selector = @selector(setIosTintColorWithNSString:);
  methods[12].selector = @selector(isIosClipsToBounds);
  methods[13].selector = @selector(setIosClipsToBoundsWithBoolean:);
  methods[14].selector = @selector(isIosClearsContextBeforeDrawing);
  methods[15].selector = @selector(setIosClearsContextBeforeDrawingWithBoolean:);
  methods[16].selector = @selector(isIosIsUserInteractionEnabled);
  methods[17].selector = @selector(setIosIsUserInteractionEnabledWithBoolean:);
  methods[18].selector = @selector(isIosIsMultipleTouchEnabled);
  methods[19].selector = @selector(setIosIsMultipleTouchEnabledWithBoolean:);
  methods[20].selector = @selector(isIosIsExclusiveTouch);
  methods[21].selector = @selector(setIosIsExclusiveTouchWithBoolean:);
  methods[22].selector = @selector(isIosPreservesSuperviewLayoutMargins);
  methods[23].selector = @selector(setIosPreservesSuperviewLayoutMarginsWithBoolean:);
  methods[24].selector = @selector(isIosInsetsLayoutMarginsFromSafeArea);
  methods[25].selector = @selector(setIosInsetsLayoutMarginsFromSafeAreaWithBoolean:);
  methods[26].selector = @selector(isIosAutoresizesSubviews);
  methods[27].selector = @selector(setIosAutoresizesSubviewsWithBoolean:);
  methods[28].selector = @selector(isIosTranslatesAutoresizingMaskIntoConstraints);
  methods[29].selector = @selector(setIosTranslatesAutoresizingMaskIntoConstraintsWithBoolean:);
  methods[30].selector = @selector(getIosContentScaleFactor);
  methods[31].selector = @selector(setIosContentScaleFactorWithFloat:);
  methods[32].selector = @selector(isIosIsFocused);
  methods[33].selector = @selector(getIosRestorationIdentifier);
  methods[34].selector = @selector(setIosRestorationIdentifierWithNSString:);
  methods[35].selector = @selector(getIosTag);
  methods[36].selector = @selector(setIosTagWithInt:);
  methods[37].selector = @selector(isIosAccessibilityIgnoresInvertColors);
  methods[38].selector = @selector(setIosAccessibilityIgnoresInvertColorsWithBoolean:);
  methods[39].selector = @selector(getIosLargeContentImage);
  methods[40].selector = @selector(setIosLargeContentImageWithNSString:);
  methods[41].selector = @selector(getIosLargeContentTitle);
  methods[42].selector = @selector(setIosLargeContentTitleWithNSString:);
  methods[43].selector = @selector(isIosScalesLargeContentImage);
  methods[44].selector = @selector(setIosScalesLargeContentImageWithBoolean:);
  methods[45].selector = @selector(isIosShowsLargeContentViewer);
  methods[46].selector = @selector(setIosShowsLargeContentViewerWithBoolean:);
  methods[47].selector = @selector(isIosIsAccessibilityElement);
  methods[48].selector = @selector(setIosIsAccessibilityElementWithBoolean:);
  methods[49].selector = @selector(getFocusable);
  methods[50].selector = @selector(setFocusableWithBoolean:);
  methods[51].selector = @selector(getIosAccessibilityLabel);
  methods[52].selector = @selector(setIosAccessibilityLabelWithNSString:);
  methods[53].selector = @selector(getIosAccessibilityHint);
  methods[54].selector = @selector(setIosAccessibilityHintWithNSString:);
  methods[55].selector = @selector(getContentDescription);
  methods[56].selector = @selector(setContentDescriptionWithNSString:);
  methods[57].selector = @selector(getIosAccessibilityValue);
  methods[58].selector = @selector(setIosAccessibilityValueWithNSString:);
  methods[59].selector = @selector(getIosAccessibilityTraits);
  methods[60].selector = @selector(setIosAccessibilityTraitsWithNSString:);
  methods[61].selector = @selector(getModelSyncEvents);
  methods[62].selector = @selector(setModelSyncEventsWithNSString:);
  methods[63].selector = @selector(getModelParam);
  methods[64].selector = @selector(setModelParamWithNSString:);
  methods[65].selector = @selector(getModelPojoToUi);
  methods[66].selector = @selector(setModelPojoToUiWithNSString:);
  methods[67].selector = @selector(getModelUiToPojo);
  methods[68].selector = @selector(setModelUiToPojoWithNSString:);
  methods[69].selector = @selector(setModelPojoToUiParamsWithNSString:);
  methods[70].selector = @selector(refreshUiFromModelWithNSString:);
  methods[71].selector = @selector(setModelUiToPojoEventIdsWithNSString:);
  methods[72].selector = @selector(updateModelDataWithNSString:withId:);
  methods[73].selector = @selector(notifyDataSetChangedWithBoolean:);
  methods[74].selector = @selector(getBackground);
  methods[75].selector = @selector(setBackgroundWithNSString:);
  methods[76].selector = @selector(setBackgroundRepeatWithNSString:);
  methods[77].selector = @selector(setOnClickWithNSString:);
  methods[78].selector = @selector(setOnTouchWithNSString:);
  methods[79].selector = @selector(getMinWidth);
  methods[80].selector = @selector(setMinWidthWithNSString:);
  methods[81].selector = @selector(getMinHeight);
  methods[82].selector = @selector(setMinHeightWithNSString:);
  methods[83].selector = @selector(setAttributeUnderTestWithNSString:);
  methods[84].selector = @selector(getBackgroundTint);
  methods[85].selector = @selector(setBackgroundTintWithNSString:);
  methods[86].selector = @selector(getBackgroundTintMode);
  methods[87].selector = @selector(setBackgroundTintModeWithNSString:);
  methods[88].selector = @selector(getForeground);
  methods[89].selector = @selector(setForegroundWithNSString:);
  methods[90].selector = @selector(setForegroundRepeatWithNSString:);
  methods[91].selector = @selector(getForegroundTint);
  methods[92].selector = @selector(setForegroundTintWithNSString:);
  methods[93].selector = @selector(getForegroundTintMode);
  methods[94].selector = @selector(setForegroundTintModeWithNSString:);
  methods[95].selector = @selector(getVisibility);
  methods[96].selector = @selector(setVisibilityWithNSString:);
  methods[97].selector = @selector(getAlpha);
  methods[98].selector = @selector(setAlphaWithFloat:);
  methods[99].selector = @selector(setOnLongClickWithNSString:);
  methods[100].selector = @selector(isLongClickable);
  methods[101].selector = @selector(setLongClickableWithBoolean:);
  methods[102].selector = @selector(isClickable);
  methods[103].selector = @selector(setClickableWithBoolean:);
  methods[104].selector = @selector(getTranslationX);
  methods[105].selector = @selector(setTranslationXWithNSString:);
  methods[106].selector = @selector(getTranslationY);
  methods[107].selector = @selector(setTranslationYWithNSString:);
  methods[108].selector = @selector(getTranslationZ);
  methods[109].selector = @selector(setTranslationZWithNSString:);
  methods[110].selector = @selector(getRotation);
  methods[111].selector = @selector(setRotationWithFloat:);
  methods[112].selector = @selector(getRotationX);
  methods[113].selector = @selector(setRotationXWithFloat:);
  methods[114].selector = @selector(getRotationY);
  methods[115].selector = @selector(setRotationYWithFloat:);
  methods[116].selector = @selector(getScaleX);
  methods[117].selector = @selector(setScaleXWithFloat:);
  methods[118].selector = @selector(getScaleY);
  methods[119].selector = @selector(setScaleYWithFloat:);
  methods[120].selector = @selector(getTransformPivotX);
  methods[121].selector = @selector(setTransformPivotXWithNSString:);
  methods[122].selector = @selector(getTransformPivotY);
  methods[123].selector = @selector(setTransformPivotYWithNSString:);
  methods[124].selector = @selector(invalidate);
  methods[125].selector = @selector(requestLayout);
  methods[126].selector = @selector(isKeepScreenOn);
  methods[127].selector = @selector(setKeepScreenOnWithBoolean:);
  methods[128].selector = @selector(getLayoutDirection);
  methods[129].selector = @selector(setLayoutDirectionWithNSString:);
  methods[130].selector = @selector(getTextDirection);
  methods[131].selector = @selector(setTextDirectionWithNSString:);
  methods[132].selector = @selector(getTextAlignment);
  methods[133].selector = @selector(setTextAlignmentWithNSString:);
  methods[134].selector = @selector(setOnDragWithNSString:);
  methods[135].selector = @selector(setAsDragSourceWithNSString:);
  methods[136].selector = @selector(isEnabled);
  methods[137].selector = @selector(setEnabledWithBoolean:);
  methods[138].selector = @selector(isDuplicateParentState);
  methods[139].selector = @selector(setDuplicateParentStateWithBoolean:);
  methods[140].selector = @selector(getForegroundGravity);
  methods[141].selector = @selector(setForegroundGravityWithNSString:);
  methods[142].selector = @selector(setOnKeyWithNSString:);
  methods[143].selector = @selector(setIosLayerBorderWidthWithNSString:);
  methods[144].selector = @selector(setIosLayerBorderColorWithNSString:);
  methods[145].selector = @selector(setIosLayerCornerRadiusWithNSString:);
  methods[146].selector = @selector(setIosLayerMasksToBoundsWithBoolean:);
  methods[147].selector = @selector(setZIndexWithInt:);
  methods[148].selector = @selector(getMaxWidth);
  methods[149].selector = @selector(setMaxWidthWithNSString:);
  methods[150].selector = @selector(getMaxHeight);
  methods[151].selector = @selector(setMaxHeightWithNSString:);
  methods[152].selector = @selector(isSelected);
  methods[153].selector = @selector(setSelectedWithBoolean:);
  methods[154].selector = @selector(setStyleWithNSString:);
  methods[155].selector = @selector(setErrorStyleWithNSString:);
  methods[156].selector = @selector(getValidateForm);
  methods[157].selector = @selector(validateFormWithNSString:);
  methods[158].selector = @selector(setValidationWithNSString:);
  methods[159].selector = @selector(setV_requiredWithNSString:);
  methods[160].selector = @selector(setV_minlengthWithNSString:);
  methods[161].selector = @selector(setV_maxlengthWithNSString:);
  methods[162].selector = @selector(setV_minWithNSString:);
  methods[163].selector = @selector(setV_maxWithNSString:);
  methods[164].selector = @selector(setV_patternWithNSString:);
  methods[165].selector = @selector(setV_typeWithNSString:);
  methods[166].selector = @selector(setValidationErrorDisplayTypeWithNSString:);
  methods[167].selector = @selector(setCustomErrorMessageValuesWithNSString:);
  methods[168].selector = @selector(setCustomErrorMessageKeysWithNSString:);
  methods[169].selector = @selector(setInvalidateOnFrameChangeWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "commandBuilder_", "LASViewImpl_ViewCommandBuilderInternal;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;", "setIosBackgroundColor", "LNSString;", "setIosIsHidden", "Z", "setIosAlpha", "F", "setIosIsOpaque", "setIosTintColor", "setIosClipsToBounds", "setIosClearsContextBeforeDrawing", "setIosIsUserInteractionEnabled", "setIosIsMultipleTouchEnabled", "setIosIsExclusiveTouch", "setIosPreservesSuperviewLayoutMargins", "setIosInsetsLayoutMarginsFromSafeArea", "setIosAutoresizesSubviews", "setIosTranslatesAutoresizingMaskIntoConstraints", "setIosContentScaleFactor", "setIosRestorationIdentifier", "setIosTag", "I", "setIosAccessibilityIgnoresInvertColors", "setIosLargeContentImage", "setIosLargeContentTitle", "setIosScalesLargeContentImage", "setIosShowsLargeContentViewer", "setIosIsAccessibilityElement", "setFocusable", "setIosAccessibilityLabel", "setIosAccessibilityHint", "setContentDescription", "setIosAccessibilityValue", "setIosAccessibilityTraits", "setModelSyncEvents", "setModelParam", "setModelPojoToUi", "setModelUiToPojo", "setModelPojoToUiParams", "refreshUiFromModel", "setModelUiToPojoEventIds", "updateModelData", "LNSString;LNSObject;", "notifyDataSetChanged", "setBackground", "setBackgroundRepeat", "setOnClick", "setOnTouch", "setMinWidth", "setMinHeight", "setAttributeUnderTest", "setBackgroundTint", "setBackgroundTintMode", "setForeground", "setForegroundRepeat", "setForegroundTint", "setForegroundTintMode", "setVisibility", "setAlpha", "setOnLongClick", "setLongClickable", "setClickable", "setTranslationX", "setTranslationY", "setTranslationZ", "setRotation", "setRotationX", "setRotationY", "setScaleX", "setScaleY", "setTransformPivotX", "setTransformPivotY", "setKeepScreenOn", "setLayoutDirection", "setTextDirection", "setTextAlignment", "setOnDrag", "setAsDragSource", "setEnabled", "setDuplicateParentState", "setForegroundGravity", "setOnKey", "setIosLayerBorderWidth", "setIosLayerBorderColor", "setIosLayerCornerRadius", "setIosLayerMasksToBounds", "setZIndex", "setMaxWidth", "setMaxHeight", "setSelected", "setStyle", "setErrorStyle", "validateForm", "setValidation", "setV_required", "setV_minlength", "setV_maxlength", "setV_min", "setV_max", "setV_pattern", "setV_type", "setValidationErrorDisplayType", "setCustomErrorMessageValues", "setCustomErrorMessageKeys", "setInvalidateOnFrameChange", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_ViewBean = { "ViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x9, 170, 1, 105, -1, -1, -1, -1 };
  return &_ASViewImpl_ViewBean;
}

@end

void ASViewImpl_ViewBean_initWithASIWidget_(ASViewImpl_ViewBean *self, id<ASIWidget> widget) {
  NSObject_init(self);
  self->commandBuilder_ = new_ASViewImpl_ViewCommandBuilderInternal_initWithASIWidget_(widget);
}

ASViewImpl_ViewBean *new_ASViewImpl_ViewBean_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_NEW_IMPL(ASViewImpl_ViewBean, initWithASIWidget_, widget)
}

ASViewImpl_ViewBean *create_ASViewImpl_ViewBean_initWithASIWidget_(id<ASIWidget> widget) {
  J2OBJC_CREATE_IMPL(ASViewImpl_ViewBean, initWithASIWidget_, widget)
}

ASViewImpl_ViewCommandBuilderInternal *ASViewImpl_ViewBean_getBuilder(ASViewImpl_ViewBean *self) {
  return self->commandBuilder_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_ViewBean)

@implementation ASViewImpl_UIControlEventTouchDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
       withADView_OnTouchListener:(id<ADView_OnTouchListener>)listener {
  ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(self, widget, listener);
  return self;
}

- (void)onTouchDownWithInt:(jint)x
                   withInt:(jint)y
                   withInt:(jint)rawX
                   withInt:(jint)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADView_MotionEvent_ACTION_DOWN];
}

- (void)onTouchUpWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)rawX
                 withInt:(jint)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADView_MotionEvent_ACTION_UP];
}

- (void)onTouchMoveWithInt:(jint)x
                   withInt:(jint)y
                   withInt:(jint)rawX
                   withInt:(jint)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADView_MotionEvent_ACTION_MOVE];
}

- (void)onTouchCancelWithInt:(jint)x
                     withInt:(jint)y
                     withInt:(jint)rawX
                     withInt:(jint)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADView_MotionEvent_ACTION_CANCEL];
}

- (void)onTouchOutsideWithInt:(jint)x
                      withInt:(jint)y
                      withInt:(jint)rawX
                      withInt:(jint)rawY {
  [self sendEventWithInt:x withInt:y withInt:rawX withInt:rawY withInt:ADView_MotionEvent_ACTION_OUTSIDE];
}

- (void)sendEventWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)rawX
                 withInt:(jint)rawY
                 withInt:(jint)action {
  ADView_MotionEvent *motionEvent = new_ADView_MotionEvent_init();
  [motionEvent setActionWithInt:action];
  [motionEvent setXWithInt:x];
  [motionEvent setYWithInt:y];
  [motionEvent setRawXWithInt:rawX];
  [motionEvent setRawYWithInt:rawY];
  [((id<ADView_OnTouchListener>) nil_chk(listener_)) onTouchWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]) withADView_MotionEvent:motionEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"action ", action)];
}

- (void)nativeAddOnTouchListenerWithId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  view.userInteractionEnabled = YES;
  if ([nativeWidget isKindOfClass:[UIControl class]]) {
    UIControl* control = ((UIControl*)nativeWidget);
    [control removeTarget:nil action:NULL forControlEvents:UIControlEventAllEvents];
    [control addTarget:self action:@selector(touchDown:withEvent:) forControlEvents:UIControlEventTouchDown];
    [control addTarget:self action:@selector(touchUpInside:withEvent:) forControlEvents:UIControlEventTouchUpInside];
    [control addTarget:self action:@selector(touchMove:withEvent:) forControlEvents:UIControlEventTouchDragInside];
    [control addTarget:self action:@selector(touchMove:withEvent:) forControlEvents:UIControlEventTouchDragOutside];
    [control addTarget:self action:@selector(touchUpOutside:withEvent:) forControlEvents:UIControlEventTouchUpOutside];
    [control addTarget:self action:@selector(touchCancel:withEvent:) forControlEvents:UIControlEventTouchCancel];
    
  }
}

- (void)__javaClone:(ASViewImpl_UIControlEventTouchDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)touchDown:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchDownWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchUpInside:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchUpWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchMove:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchMoveWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchUpOutside:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchOutsideWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}
- (void)touchCancel:(id)sender withEvent:(UIEvent *) event{
  UITouch* touchEvent = [event.allTouches allObjects][0];
  CGPoint pointInView = [touchEvent locationInView:sender];
  CGPoint pointInWindow = [touchEvent locationInView:((UIControl*)sender).window];
  [self onTouchCancelWithInt:pointInView.x withInt:pointInView.y withInt:pointInWindow.x withInt:pointInWindow.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnTouchListener:);
  methods[1].selector = @selector(onTouchDownWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(onTouchUpWithInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(onTouchMoveWithInt:withInt:withInt:withInt:);
  methods[4].selector = @selector(onTouchCancelWithInt:withInt:withInt:withInt:);
  methods[5].selector = @selector(onTouchOutsideWithInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(sendEventWithInt:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(nativeAddOnTouchListenerWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnTouchListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnTouchListener;", "onTouchDown", "IIII", "onTouchUp", "onTouchMove", "onTouchCancel", "onTouchOutside", "sendEvent", "IIIII", "nativeAddOnTouchListener", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UIControlEventTouchDelegate = { "UIControlEventTouchDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 8, 2, 11, -1, -1, -1, -1 };
  return &_ASViewImpl_UIControlEventTouchDelegate;
}

@end

void ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(ASViewImpl_UIControlEventTouchDelegate *self, id<ASIWidget> widget, id<ADView_OnTouchListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UIControlEventTouchDelegate *new_ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(id<ASIWidget> widget, id<ADView_OnTouchListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UIControlEventTouchDelegate, initWithASIWidget_withADView_OnTouchListener_, widget, listener)
}

ASViewImpl_UIControlEventTouchDelegate *create_ASViewImpl_UIControlEventTouchDelegate_initWithASIWidget_withADView_OnTouchListener_(id<ASIWidget> widget, id<ADView_OnTouchListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UIControlEventTouchDelegate, initWithASIWidget_withADView_OnTouchListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UIControlEventTouchDelegate)

@implementation ASViewImpl_UILongTapGestureRecognizerDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
   withADView_OnLongClickListener:(id<ADView_OnLongClickListener>)listener {
  ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(self, widget, listener);
  return self;
}

- (void)nativeAddLongClickListenerWithId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  ASUILongTapGestureRecognizer *gestureRecognizer = [[ASUILongTapGestureRecognizer alloc] initWithTarget:self action:@selector(longPressDetected:)];
  view.userInteractionEnabled = YES;
  
  for (UIGestureRecognizer* interaction in view.gestureRecognizers) {
    if ([interaction isKindOfClass:[ASUILongTapGestureRecognizer class]]) {
      [view removeGestureRecognizer:interaction];
    }
  }
  [view addGestureRecognizer:gestureRecognizer];
}

- (void)onLongClick {
  [((id<ADView_OnLongClickListener>) nil_chk(listener_)) onLongClickWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class])];
}

- (void)__javaClone:(ASViewImpl_UILongTapGestureRecognizerDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)longPressDetected:(ASUILongTapGestureRecognizer *)tapRecognizer {
  ADView* adView = (ADView*)[widget_ asWidget];
  if ([adView isLongClickable]) {
    if (tapRecognizer.state == UIGestureRecognizerStateEnded) {
      [self onLongClick];
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnLongClickListener:);
  methods[1].selector = @selector(nativeAddLongClickListenerWithId:);
  methods[2].selector = @selector(onLongClick);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnLongClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnLongClickListener;", "nativeAddLongClickListener", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UILongTapGestureRecognizerDelegate = { "UILongTapGestureRecognizerDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 3, 2, 3, -1, -1, -1, -1 };
  return &_ASViewImpl_UILongTapGestureRecognizerDelegate;
}

@end

void ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(ASViewImpl_UILongTapGestureRecognizerDelegate *self, id<ASIWidget> widget, id<ADView_OnLongClickListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UILongTapGestureRecognizerDelegate *new_ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(id<ASIWidget> widget, id<ADView_OnLongClickListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UILongTapGestureRecognizerDelegate, initWithASIWidget_withADView_OnLongClickListener_, widget, listener)
}

ASViewImpl_UILongTapGestureRecognizerDelegate *create_ASViewImpl_UILongTapGestureRecognizerDelegate_initWithASIWidget_withADView_OnLongClickListener_(id<ASIWidget> widget, id<ADView_OnLongClickListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UILongTapGestureRecognizerDelegate, initWithASIWidget_withADView_OnLongClickListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UILongTapGestureRecognizerDelegate)

@implementation ASViewImpl_UITapGestureRecognizerDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
       withADView_OnClickListener:(id<ADView_OnClickListener>)listener {
  ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(self, widget, listener);
  return self;
}

- (void)nativeAddClickListenerWithNSString:(NSString *)id_
                                    withId:(id)nativeWidget {
  UIView* view = ((UIView*)nativeWidget);
  ASUITapGestureRecognizer *gestureRecognizer = [[ASUITapGestureRecognizer alloc] initWithTarget:self action:@selector(tapDetected:)];
  view.userInteractionEnabled = YES;
  gestureRecognizer.numberOfTapsRequired = 1;
  gestureRecognizer.id = id_;
  
  for (UIGestureRecognizer* interaction in view.gestureRecognizers) {
    if ([interaction isKindOfClass:[ASUITapGestureRecognizer class]] && [id_ isEqualToString:((ASUITapGestureRecognizer*)interaction).id]) {
      [view removeGestureRecognizer:interaction];
    }
  }
  [view addGestureRecognizer:gestureRecognizer];
}

- (void)click {
  [((id<ADView_OnClickListener>) nil_chk(listener_)) onClickWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class])];
}

- (void)__javaClone:(ASViewImpl_UITapGestureRecognizerDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)tapDetected:(ASUITapGestureRecognizer *)tapRecognizer {
  if (tapRecognizer.state == UIGestureRecognizerStateEnded) {
    [self click];
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnClickListener:);
  methods[1].selector = @selector(nativeAddClickListenerWithNSString:withId:);
  methods[2].selector = @selector(click);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnClickListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnClickListener;", "nativeAddClickListener", "LNSString;LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UITapGestureRecognizerDelegate = { "UITapGestureRecognizerDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 3, 2, 3, -1, -1, -1, -1 };
  return &_ASViewImpl_UITapGestureRecognizerDelegate;
}

@end

void ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(ASViewImpl_UITapGestureRecognizerDelegate *self, id<ASIWidget> widget, id<ADView_OnClickListener> listener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = listener;
}

ASViewImpl_UITapGestureRecognizerDelegate *new_ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(id<ASIWidget> widget, id<ADView_OnClickListener> listener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UITapGestureRecognizerDelegate, initWithASIWidget_withADView_OnClickListener_, widget, listener)
}

ASViewImpl_UITapGestureRecognizerDelegate *create_ASViewImpl_UITapGestureRecognizerDelegate_initWithASIWidget_withADView_OnClickListener_(id<ASIWidget> widget, id<ADView_OnClickListener> listener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UITapGestureRecognizerDelegate, initWithASIWidget_withADView_OnClickListener_, widget, listener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UITapGestureRecognizerDelegate)

@implementation ASViewImpl_UIDragInteractionDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
                     withNSString:(NSString *)eventArgs {
  ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(self, widget, eventArgs);
  return self;
}

- (id)getEventObjWithASIWidget:(id<ASIWidget>)w {
  return ASViewImpl_UIDragInteractionDelegate_getEventObjWithASIWidget_(self, w);
}

- (void)sendStartEventWithInt:(jint)x
                      withInt:(jint)y {
  ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(self, x, y, ADView_DragEvent_ACTION_DRAG_STARTED, true);
}

- (void)sendEndEventWithInt:(jint)x
                    withInt:(jint)y {
  ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(self, x, y, ADView_DragEvent_ACTION_DRAG_ENDED, false);
}

- (void)sendEventWithInt:(jint)x
                 withInt:(jint)y
                 withInt:(jint)action
             withBoolean:(jboolean)dragCanAccept {
  ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(self, x, y, action, dragCanAccept);
}

- (void)nativeAddDragInteractionWithId:(id)nativeWidget {
  UIDragInteraction* dragInteraction = [[UIDragInteraction alloc] initWithDelegate:self];
  dragInteraction.enabled = TRUE;
  UIView* view = ((UIView*)nativeWidget);
  for (id<UIInteraction> interaction in view.interactions) {
    if ([interaction isKindOfClass:[UIDragInteraction class]]) {
      [view removeInteraction:interaction];
    }
  }
  [view addInteraction:dragInteraction];
}

- (nonnull NSArray<UIDragItem *> *)dragInteraction:(nonnull UIDragInteraction *)interaction itemsForBeginningSession:(nonnull id<UIDragSession>)session {
  id<INativeWidget> view = (id<INativeWidget>)interaction.view;
  UIDragItem* dragItem = [[UIDragItem alloc] initWithItemProvider:  [[NSItemProvider alloc] initWithObject: [self getEventObjWithASIWidget:[view getWidget]]]];
  CGPoint point = [session locationInView:interaction.view];
  [self sendStartEventWithInt: point.x withInt: point.y];
  return [NSArray arrayWithObject:dragItem];
}

- (void)dragInteraction:(UIDragInteraction *)interaction session:(id<UIDragSession>)session didEndWithOperation:(UIDropOperation)operation {
  CGPoint point = [session locationInView:interaction.view];
  [self sendEndEventWithInt: point.x withInt: point.y];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withNSString:);
  methods[1].selector = @selector(getEventObjWithASIWidget:);
  methods[2].selector = @selector(sendStartEventWithInt:withInt:);
  methods[3].selector = @selector(sendEndEventWithInt:withInt:);
  methods[4].selector = @selector(sendEventWithInt:withInt:withInt:withBoolean:);
  methods[5].selector = @selector(nativeAddDragInteractionWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "eventArgs_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "getEventObj", "LASIWidget;", "sendStartEvent", "II", "sendEndEvent", "sendEvent", "IIIZ", "nativeAddDragInteraction", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UIDragInteractionDelegate = { "UIDragInteractionDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 6, 2, 10, -1, -1, -1, -1 };
  return &_ASViewImpl_UIDragInteractionDelegate;
}

@end

void ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(ASViewImpl_UIDragInteractionDelegate *self, id<ASIWidget> widget, NSString *eventArgs) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->eventArgs_ = eventArgs;
}

ASViewImpl_UIDragInteractionDelegate *new_ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(id<ASIWidget> widget, NSString *eventArgs) {
  J2OBJC_NEW_IMPL(ASViewImpl_UIDragInteractionDelegate, initWithASIWidget_withNSString_, widget, eventArgs)
}

ASViewImpl_UIDragInteractionDelegate *create_ASViewImpl_UIDragInteractionDelegate_initWithASIWidget_withNSString_(id<ASIWidget> widget, NSString *eventArgs) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UIDragInteractionDelegate, initWithASIWidget_withNSString_, widget, eventArgs)
}

id ASViewImpl_UIDragInteractionDelegate_getEventObjWithASIWidget_(ASViewImpl_UIDragInteractionDelegate *self, id<ASIWidget> w) {
  id<JavaUtilMap> eventData = ASPluginInvoker_getJSONCompatMap();
  [((id<ASIWidget>) nil_chk(w)) updateModelToEventMapWithJavaUtilMap:eventData withNSString:@"" withNSString:self->eventArgs_];
  return ASPluginInvoker_marshalWithId_(eventData);
}

void ASViewImpl_UIDragInteractionDelegate_sendEventWithInt_withInt_withInt_withBoolean_(ASViewImpl_UIDragInteractionDelegate *self, jint x, jint y, jint action, jboolean dragCanAccept) {
  id<JavaUtilList> listeners = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(self->widget_)) getFragment])) getListenerWithIOSClass:ASViewImpl_OnDragListener_class_()];
  if (listeners != nil) {
    for (ASViewImpl_OnDragListener * __strong listener in listeners) {
      ADView_DragEvent *dragEvent = new_ADView_DragEvent_init();
      [dragEvent setXWithInt:x];
      [dragEvent setYWithInt:y];
      [dragEvent setActionWithInt:action];
      ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(((ASViewImpl_OnDragListener *) nil_chk(listener))->w_)) asWidget], [ADView class]);
      [((ADView *) nil_chk(view)) setDragCanAcceptWithBoolean:dragCanAccept];
      [listener onDragWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(self->widget_)) asWidget], [ADView class]) withADView_DragEvent:dragEvent];
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UIDragInteractionDelegate)

@implementation ASViewImpl_UIDropInteractionDelegate

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
        withADView_OnDragListener:(id<ADView_OnDragListener>)onDragListener {
  ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(self, widget, onDragListener);
  return self;
}

- (void)dragEnterWithInt:(jint)x
                 withInt:(jint)y {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setDragHoveredWithBoolean:true];
  [self sendEventWithInt:x withInt:y withNSString:nil withInt:ADView_DragEvent_ACTION_DRAG_ENTERED];
}

- (void)dragLeaveWithInt:(jint)x
                 withInt:(jint)y {
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]);
  [((ADView *) nil_chk(view)) setDragHoveredWithBoolean:false];
  [self sendEventWithInt:x withInt:y withNSString:nil withInt:ADView_DragEvent_ACTION_DRAG_ENDED];
}

- (void)dragOverWithInt:(jint)x
                withInt:(jint)y {
  [self sendEventWithInt:x withInt:y withNSString:nil withInt:ADView_DragEvent_ACTION_DRAG_LOCATION];
}

- (void)dropWithInt:(jint)x
            withInt:(jint)y
       withNSString:(NSString *)data {
  [self sendEventWithInt:x withInt:y withNSString:data withInt:ADView_DragEvent_ACTION_DROP];
}

- (void)sendEventWithInt:(jint)x
                 withInt:(jint)y
            withNSString:(NSString *)data
                 withInt:(jint)action {
  ADView_DragEvent *dragEvent = new_ADView_DragEvent_init();
  [dragEvent setActionWithInt:action];
  [dragEvent setXWithInt:x];
  [dragEvent setYWithInt:y];
  [dragEvent setClipDataWithNSString:data];
  [((id<ADView_OnDragListener>) nil_chk(listener_)) onDragWithADView:(ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget_)) asWidget], [ADView class]) withADView_DragEvent:dragEvent];
  [((JavaIoPrintStream *) nil_chk(JreLoadStatic(JavaLangSystem, out))) printlnWithNSString:JreStrcat("$I", @"action ", action)];
}

- (void)nativeAddDropInteractionWithId:(id)nativeWidget {
  UIDropInteraction* dropInteraction = [[UIDropInteraction alloc] initWithDelegate:self];
  UIView* view = ((UIView*)nativeWidget);
  for (id<UIInteraction> interaction in view.interactions) {
    if ([interaction isKindOfClass:[UIDropInteraction class]]) {
      [view removeInteraction:interaction];
    }
  }
  [view addInteraction:dropInteraction];
}

- (void)__javaClone:(ASViewImpl_UIDropInteractionDelegate *)original {
  [super __javaClone:original];
  JreRelease(widget_);
}

- (void)dropInteraction:(UIDropInteraction *)interaction performDrop:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  if ([session canLoadObjectsOfClass:[NSString class]]) {
    [session loadObjectsOfClass:[NSString class] completion:^(NSArray<__kindof id<NSItemProviderReading>> * _Nonnull objects) {
      [self dropWithInt: point.x withInt: point.y withNSString:objects.firstObject];
    }];
  }
}

- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidEnter:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  [self dragEnterWithInt: point.x withInt: point.y];
}

- (void)dropInteraction:(UIDropInteraction *)interaction sessionDidExit:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  [self dragLeaveWithInt: point.x withInt: point.y];
}

- (BOOL)dropInteraction:(UIDropInteraction *)interaction canHandleSession:(id<UIDropSession>)session {
  return TRUE;
}

- (UIDropProposal *)dropInteraction:(UIDropInteraction *)interaction sessionDidUpdate:(id<UIDropSession>)session {
  CGPoint point = [session locationInView:interaction.view];
  [self dragOverWithInt: point.x withInt: point.y];
  return [[UIDropProposal alloc] initWithDropOperation:UIDropOperationCopy];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 9, 10, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIWidget:withADView_OnDragListener:);
  methods[1].selector = @selector(dragEnterWithInt:withInt:);
  methods[2].selector = @selector(dragLeaveWithInt:withInt:);
  methods[3].selector = @selector(dragOverWithInt:withInt:);
  methods[4].selector = @selector(dropWithInt:withInt:withNSString:);
  methods[5].selector = @selector(sendEventWithInt:withInt:withNSString:withInt:);
  methods[6].selector = @selector(nativeAddDropInteractionWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "widget_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listener_", "LADView_OnDragListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LADView_OnDragListener;", "dragEnter", "II", "dragLeave", "dragOver", "drop", "IILNSString;", "sendEvent", "IILNSString;I", "nativeAddDropInteraction", "LNSObject;", "LASViewImpl;" };
  static const J2ObjcClassInfo _ASViewImpl_UIDropInteractionDelegate = { "UIDropInteractionDelegate", "com.ashera.layout", ptrTable, methods, fields, 7, 0x8, 7, 2, 11, -1, -1, -1, -1 };
  return &_ASViewImpl_UIDropInteractionDelegate;
}

@end

void ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(ASViewImpl_UIDropInteractionDelegate *self, id<ASIWidget> widget, id<ADView_OnDragListener> onDragListener) {
  NSObject_init(self);
  [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getFragment])) addListenerWithASIWidget:widget withId:self];
  self->widget_ = widget;
  self->listener_ = onDragListener;
}

ASViewImpl_UIDropInteractionDelegate *new_ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(id<ASIWidget> widget, id<ADView_OnDragListener> onDragListener) {
  J2OBJC_NEW_IMPL(ASViewImpl_UIDropInteractionDelegate, initWithASIWidget_withADView_OnDragListener_, widget, onDragListener)
}

ASViewImpl_UIDropInteractionDelegate *create_ASViewImpl_UIDropInteractionDelegate_initWithASIWidget_withADView_OnDragListener_(id<ASIWidget> widget, id<ADView_OnDragListener> onDragListener) {
  J2OBJC_CREATE_IMPL(ASViewImpl_UIDropInteractionDelegate, initWithASIWidget_withADView_OnDragListener_, widget, onDragListener)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASViewImpl_UIDropInteractionDelegate)
