//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Base64.java
//

#include "Base64.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"


NSString *ADBase64_DEFAULT;
NSString *ADBase64_NO_WRAP;

@implementation ADBase64

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADBase64_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSByteArray *)decodeWithNSString:(NSString *)encoded
                        withNSString:(NSString *)default2 {
  return ADBase64_decodeWithNSString_withNSString_(encoded, default2);
}

+ (NSString *)encodeToStringWithByteArray:(IOSByteArray *)data
                             withNSString:(NSString *)noWrap {
  return ADBase64_encodeToStringWithByteArray_withNSString_(data, noWrap);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[B", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(decodeWithNSString:withNSString:);
  methods[2].selector = @selector(encodeToStringWithByteArray:withNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 4, -1, -1 },
    { "NO_WRAP", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "decode", "LNSString;LNSString;", "encodeToString", "[BLNSString;", &ADBase64_DEFAULT, &ADBase64_NO_WRAP };
  static const J2ObjcClassInfo _ADBase64 = { "Base64", "r.android.util", ptrTable, methods, fields, 7, 0x1, 3, 2, -1, -1, -1, -1, -1 };
  return &_ADBase64;
}

@end

void ADBase64_init(ADBase64 *self) {
  NSObject_init(self);
}

ADBase64 *new_ADBase64_init() {
  J2OBJC_NEW_IMPL(ADBase64, init)
}

ADBase64 *create_ADBase64_init() {
  J2OBJC_CREATE_IMPL(ADBase64, init)
}

IOSByteArray *ADBase64_decodeWithNSString_withNSString_(NSString *encoded, NSString *default2) {
  ADBase64_initialize();
  return nil;
}

NSString *ADBase64_encodeToStringWithByteArray_withNSString_(IOSByteArray *data, NSString *noWrap) {
  ADBase64_initialize();
  return nil;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADBase64)
