//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\TextView.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TextView")
#ifdef RESTRICT_TextView
#define INCLUDE_ALL_TextView 0
#else
#define INCLUDE_ALL_TextView 1
#endif
#undef RESTRICT_TextView

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADTextView_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView))
#define ADTextView_

#define RESTRICT_BaseMeasurableView 1
#define INCLUDE_ASBaseMeasurableView 1
#include "BaseMeasurableView.h"

#define RESTRICT_IMeasureWidth 1
#define INCLUDE_ASIMeasureWidth 1
#include "IMeasureWidth.h"

#define RESTRICT_IMeasureHeight 1
#define INCLUDE_ASIMeasureHeight 1
#include "IMeasureHeight.h"

@class ADColorStateList;
@class ADLayout_Alignment;
@class ADRectF;
@class ADTextView_TextPaint;
@class ASWidgetAttribute;
@class IOSIntArray;
@class IOSObjectArray;
@class JavaTextDecimalFormatSymbols;
@class JavaUtilLocale;
@protocol ADTextDirectionHeuristic;
@protocol ADTextView_Drawables;
@protocol ADTextWatcher;
@protocol ASIWidget;
@protocol JavaLangRunnable;

@interface ADTextView : ASBaseMeasurableView < ASIMeasureWidth, ASIMeasureHeight > {
 @public
  id<ADTextView_Drawables> mDrawables_;
}

#pragma mark Public

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget;

- (void)addTextChangedListenerWithADTextWatcher:(id<ADTextWatcher>)watcher;

- (void)autoResizeText;

- (void)clearAutoSizeTypeConfiguration;

- (ADLayout_Alignment *)getAlignmentOfLayout;

- (jint)getAutoSizeMaxTextSize;

- (jint)getAutoSizeMinTextSize;

- (jint)getAutoSizeStepGranularity;

- (jint)getAutoSizeTextType;

- (jint)getBorderPadding;

- (jint)getBorderWidth;

- (jint)getCurrentHintTextColor;

- (jint)getCurrentTextColor;

- (IOSObjectArray *)getDigitStringsWithJavaTextDecimalFormatSymbols:(JavaTextDecimalFormatSymbols *)symbols;

- (jint)getGravity;

- (ADColorStateList *)getHintTextColors;

- (jint)getLineHeight;

- (jint)getLineHeightPadding;

- (ADColorStateList *)getLinkTextColors;

- (jint)getMaxEms;

- (jint)getMaxHeight;

- (jint)getMaxLines;

- (jint)getMaxWidth;

- (jint)getMinEms;

- (jint)getMinHeight;

- (jint)getMinLines;

- (jint)getMinWidth;

- (ADTextView_TextPaint *)getPaint;

- (NSString *)getText;

- (ADColorStateList *)getTextColors;

- (id<ADTextDirectionHeuristic>)getTextDirectionHeuristic;

- (JavaUtilLocale *)getTextLocale;

- (jint)getTotalPaddingLeft;

- (jint)getTotalPaddingRight;

- (jboolean)hasPasswordTransformationMethod;

- (jboolean)isAutoSizeTextTypeUniformWithInt:(jint)autoTextType;

- (jboolean)isShown;

- (jboolean)isTypePhone;

- (jint)measureHeightWithInt:(jint)heightMode
                     withInt:(jint)heightSize
                     withInt:(jint)height;

- (jint)measureWidthWithInt:(jint)widthMode
                    withInt:(jint)widthSize
                    withInt:(jint)width;

- (void)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable
                                withInt:(jint)delay;

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable;

- (void)removeTextChangedListenerWithADTextWatcher:(id<ADTextWatcher>)watcher;

- (void)setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:(IOSIntArray *)presetSizes
                                                      withInt:(jint)unit;

- (void)setEmsWithInt:(jint)ems;

- (void)setGravityWithInt:(jint)gravity;

- (void)setHintTextColorWithADColorStateList:(ADColorStateList *)colors;

- (void)setHintTextColorWithInt:(jint)color;

- (void)setLinesWithInt:(jint)lines;

- (void)setLinkTextColorWithADColorStateList:(ADColorStateList *)colors;

- (void)setLinkTextColorWithInt:(jint)color;

- (void)setMaxEmsWithInt:(jint)maxEms;

- (void)setMaxHeightWithInt:(jint)maxPixels;

- (void)setMaxLinesWithInt:(jint)maxLines;

- (void)setMaxWidthWithInt:(jint)maxPixels;

- (void)setMinEmsWithInt:(jint)minEms;

- (void)setMinHeightWithInt:(jint)minPixels;

- (void)setMinLinesWithInt:(jint)minLines;

- (void)setMinWidthWithInt:(jint)minPixels;

- (void)setTextWithNSString:(NSString *)text;

- (void)setTextColorWithADColorStateList:(ADColorStateList *)colors;

- (void)setTextColorWithInt:(jint)color;

- (void)setUpAutoSizeTextTypeUniformWithInt:(jint)autoSizeMin
                                    withInt:(jint)autoSizeMax
                                    withInt:(jint)autoSizeGranular;

- (void)setWidgetInfoWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

- (void)setWidthWithInt:(jint)pixels;

- (jboolean)suggestedSizeFitsInSpaceWithInt:(jint)mAutoSizeTextSizeInPx
                                withADRectF:(ADRectF *)availableSpace;

#pragma mark Protected

- (void)drawableStateChanged;

- (jfloat)getTextSize;

- (void)makeNewLayoutWithInt:(jint)availableWidth
                     withInt:(jint)i
                     withInt:(jint)unknownBoring
                     withInt:(jint)unknownBoring2
                     withInt:(jint)j
                 withBoolean:(jboolean)b;

- (void)setTextSizeInternalWithInt:(jint)unit
                         withFloat:(jfloat)optimalTextSize
                       withBoolean:(jboolean)b;

- (jboolean)supportsAutoSizeText;

@end

J2OBJC_STATIC_INIT(ADTextView)

J2OBJC_FIELD_SETTER(ADTextView, mDrawables_, id<ADTextView_Drawables>)

inline jint ADTextView_get_AUTO_SIZE_TEXT_TYPE_NONE(void);
#define ADTextView_AUTO_SIZE_TEXT_TYPE_NONE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, AUTO_SIZE_TEXT_TYPE_NONE, jint)

inline jint ADTextView_get_AUTO_SIZE_TEXT_TYPE_UNIFORM(void);
#define ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, AUTO_SIZE_TEXT_TYPE_UNIFORM, jint)

inline jint ADTextView_get_UNKNOWN_BORING(void);
#define ADTextView_UNKNOWN_BORING 0
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, UNKNOWN_BORING, jint)

FOUNDATION_EXPORT void ADTextView_initWithASIWidget_(ADTextView *self, id<ASIWidget> widget);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView)

@compatibility_alias RAndroidWidgetTextView ADTextView;

#endif

#if !defined (ADTextView_OnEditorActionListener_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_OnEditorActionListener))
#define ADTextView_OnEditorActionListener_

@class ADKeyEvent;
@class ADTextView;

@protocol ADTextView_OnEditorActionListener < JavaObject >

- (jboolean)onEditorActionWithADTextView:(ADTextView *)v
                                 withInt:(jint)actionId
                          withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_OnEditorActionListener)

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_OnEditorActionListener)

#endif

#if !defined (ADTextView_BufferType_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_BufferType))
#define ADTextView_BufferType_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ADTextView_BufferType_Enum) {
  ADTextView_BufferType_Enum_NORMAL = 0,
  ADTextView_BufferType_Enum_SPANNABLE = 1,
  ADTextView_BufferType_Enum_EDITABLE = 2,
};

@interface ADTextView_BufferType : JavaLangEnum

#pragma mark Public

+ (ADTextView_BufferType *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADTextView_BufferType_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ADTextView_BufferType)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADTextView_BufferType *ADTextView_BufferType_values_[];

inline ADTextView_BufferType *ADTextView_BufferType_get_NORMAL(void);
J2OBJC_ENUM_CONSTANT(ADTextView_BufferType, NORMAL)

inline ADTextView_BufferType *ADTextView_BufferType_get_SPANNABLE(void);
J2OBJC_ENUM_CONSTANT(ADTextView_BufferType, SPANNABLE)

inline ADTextView_BufferType *ADTextView_BufferType_get_EDITABLE(void);
J2OBJC_ENUM_CONSTANT(ADTextView_BufferType, EDITABLE)

FOUNDATION_EXPORT IOSObjectArray *ADTextView_BufferType_values(void);

FOUNDATION_EXPORT ADTextView_BufferType *ADTextView_BufferType_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADTextView_BufferType *ADTextView_BufferType_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_BufferType)

#endif

#if !defined (ADTextView_TypedValue_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_TypedValue))
#define ADTextView_TypedValue_

@class ADDisplayMetrics;

@interface ADTextView_TypedValue : NSObject

#pragma mark Public

+ (jfloat)applyDimensionWithInt:(jint)unit
                        withInt:(jint)i
           withADDisplayMetrics:(ADDisplayMetrics *)displayMetrics;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_TypedValue)

inline jint ADTextView_TypedValue_get_COMPLEX_UNIT_PX(void);
inline jint ADTextView_TypedValue_set_COMPLEX_UNIT_PX(jint value);
inline jint *ADTextView_TypedValue_getRef_COMPLEX_UNIT_PX(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT jint ADTextView_TypedValue_COMPLEX_UNIT_PX;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADTextView_TypedValue, COMPLEX_UNIT_PX, jint)

FOUNDATION_EXPORT void ADTextView_TypedValue_init(ADTextView_TypedValue *self);

FOUNDATION_EXPORT ADTextView_TypedValue *new_ADTextView_TypedValue_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADTextView_TypedValue *create_ADTextView_TypedValue_init(void);

FOUNDATION_EXPORT jfloat ADTextView_TypedValue_applyDimensionWithInt_withInt_withADDisplayMetrics_(jint unit, jint i, ADDisplayMetrics *displayMetrics);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_TypedValue)

#endif

#if !defined (ADTextView_Editor_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_Editor))
#define ADTextView_Editor_

@protocol ADTextView_Editor < JavaObject >

- (void)invalidateTextDisplayList;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_Editor)

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_Editor)

#endif

#if !defined (ADTextView_TextPaint_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_TextPaint))
#define ADTextView_TextPaint_

@class ADTextView;

@interface ADTextView_TextPaint : NSObject {
 @public
  jint linkColor_;
}

#pragma mark Public

- (instancetype)initWithADTextView:(ADTextView *)outer$;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADTextView_TextPaint)

FOUNDATION_EXPORT void ADTextView_TextPaint_initWithADTextView_(ADTextView_TextPaint *self, ADTextView *outer$);

FOUNDATION_EXPORT ADTextView_TextPaint *new_ADTextView_TextPaint_initWithADTextView_(ADTextView *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADTextView_TextPaint *create_ADTextView_TextPaint_initWithADTextView_(ADTextView *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_TextPaint)

#endif

#if !defined (ADTextView_Drawables_) && (INCLUDE_ALL_TextView || defined(INCLUDE_ADTextView_Drawables))
#define ADTextView_Drawables_

@protocol JavaUtilList;

@protocol ADTextView_Drawables < JavaObject >

@end

@interface ADTextView_Drawables : NSObject

@end

J2OBJC_STATIC_INIT(ADTextView_Drawables)

inline id<JavaUtilList> ADTextView_Drawables_get_mShowing(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<JavaUtilList> ADTextView_Drawables_mShowing;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextView_Drawables, mShowing, id<JavaUtilList>)

J2OBJC_TYPE_LITERAL_HEADER(ADTextView_Drawables)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_TextView")
