//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\com\xwray\groupie\DiffTask.java
//

#include "AsyncDiffUtil.h"
#include "AsyncTask.h"
#include "DiffTask.h"
#include "DiffUtil.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "OnAsyncUpdateListener.h"
#include "java/lang/Exception.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/ref/WeakReference.h"
#include "java/util/Collection.h"

@class JavaLangException;
@class JavaLangRefWeakReference;


@interface ADXDiffTask () {
 @public
  ADXDiffUtil_Callback *diffCallback_;
  JavaLangRefWeakReference *asyncListDiffer_;
  jint runGeneration_;
  jboolean detectMoves_;
  JavaLangRefWeakReference *onAsyncUpdateListener_;
  JavaLangException *backgroundException_;
}

- (jboolean)shouldDispatchResultWithADXDiffUtil_DiffResult:(ADXDiffUtil_DiffResult *)diffResult
                                      withADXAsyncDiffUtil:(ADXAsyncDiffUtil *)async;

@end

J2OBJC_FIELD_SETTER(ADXDiffTask, diffCallback_, ADXDiffUtil_Callback *)
J2OBJC_FIELD_SETTER(ADXDiffTask, asyncListDiffer_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXDiffTask, onAsyncUpdateListener_, JavaLangRefWeakReference *)
J2OBJC_FIELD_SETTER(ADXDiffTask, backgroundException_, JavaLangException *)

__attribute__((unused)) static jboolean ADXDiffTask_shouldDispatchResultWithADXDiffUtil_DiffResult_withADXAsyncDiffUtil_(ADXDiffTask *self, ADXDiffUtil_DiffResult *diffResult, ADXAsyncDiffUtil *async);

@implementation ADXDiffTask

- (instancetype)initPackagePrivateWithADXAsyncDiffUtil:(ADXAsyncDiffUtil *)asyncDiffUtil
                              withADXDiffUtil_Callback:(ADXDiffUtil_Callback *)callback
                                               withInt:(jint)runGeneration
                                           withBoolean:(jboolean)detectMoves
                          withADXOnAsyncUpdateListener:(id<ADXOnAsyncUpdateListener>)onAsyncUpdateListener {
  ADXDiffTask_initPackagePrivateWithADXAsyncDiffUtil_withADXDiffUtil_Callback_withInt_withBoolean_withADXOnAsyncUpdateListener_(self, asyncDiffUtil, callback, runGeneration, detectMoves, onAsyncUpdateListener);
  return self;
}

- (ADXDiffUtil_DiffResult *)doInBackgroundWithNSObjectArray:(IOSObjectArray *)voids {
  @try {
    return ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_withBoolean_(diffCallback_, detectMoves_);
  }
  @catch (JavaLangException *e) {
    JreStrongAssign(&backgroundException_, e);
    return nil;
  }
}

- (void)onPostExecuteWithId:(ADXDiffUtil_DiffResult *)diffResult {
  if (backgroundException_ != nil) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(backgroundException_);
  }
  ADXAsyncDiffUtil *async = JreRetainedLocalValue([((JavaLangRefWeakReference *) nil_chk(asyncListDiffer_)) get]);
  if (ADXDiffTask_shouldDispatchResultWithADXDiffUtil_DiffResult_withADXAsyncDiffUtil_(self, diffResult, async)) {
    [((id<ADXAsyncDiffUtil_Callback>) nil_chk([((ADXAsyncDiffUtil *) nil_chk(async)) getAsyncDiffUtilCallback])) onDispatchAsyncResultWithJavaUtilCollection:[async getGroups]];
    [((ADXDiffUtil_DiffResult *) nil_chk(diffResult)) dispatchUpdatesToWithADXListUpdateCallback:[async getAsyncDiffUtilCallback]];
    if (onAsyncUpdateListener_ != nil && [onAsyncUpdateListener_ get] != nil) {
      [((id<ADXOnAsyncUpdateListener>) nil_chk([onAsyncUpdateListener_ get])) onUpdateComplete];
    }
  }
}

- (jboolean)shouldDispatchResultWithADXDiffUtil_DiffResult:(ADXDiffUtil_DiffResult *)diffResult
                                      withADXAsyncDiffUtil:(ADXAsyncDiffUtil *)async {
  return ADXDiffTask_shouldDispatchResultWithADXDiffUtil_DiffResult_withADXAsyncDiffUtil_(self, diffResult, async);
}

- (void)dealloc {
  RELEASE_(diffCallback_);
  RELEASE_(asyncListDiffer_);
  RELEASE_(onAsyncUpdateListener_);
  RELEASE_(backgroundException_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADXDiffUtil_DiffResult;", 0x84, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXAsyncDiffUtil:withADXDiffUtil_Callback:withInt:withBoolean:withADXOnAsyncUpdateListener:);
  methods[1].selector = @selector(doInBackgroundWithNSObjectArray:);
  methods[2].selector = @selector(onPostExecuteWithId:);
  methods[3].selector = @selector(shouldDispatchResultWithADXDiffUtil_DiffResult:withADXAsyncDiffUtil:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "diffCallback_", "LADXDiffUtil_Callback;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "asyncListDiffer_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "runGeneration_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "detectMoves_", "Z", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "onAsyncUpdateListener_", "LJavaLangRefWeakReference;", .constantValue.asLong = 0, 0x2, -1, -1, 8, -1 },
    { "backgroundException_", "LJavaLangException;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXAsyncDiffUtil;LADXDiffUtil_Callback;IZLADXOnAsyncUpdateListener;", "doInBackground", "[LJavaLangVoid;", "onPostExecute", "LADXDiffUtil_DiffResult;", "shouldDispatchResult", "LADXDiffUtil_DiffResult;LADXAsyncDiffUtil;", "Ljava/lang/ref/WeakReference<Lcom/xwray/groupie/AsyncDiffUtil;>;", "Ljava/lang/ref/WeakReference<Lcom/xwray/groupie/OnAsyncUpdateListener;>;", "Lr/android/os/AsyncTask<Ljava/lang/Void;Ljava/lang/Void;Landroidx/recyclerview/widget/DiffUtil$DiffResult;>;" };
  static const J2ObjcClassInfo _ADXDiffTask = { "DiffTask", "com.xwray.groupie", ptrTable, methods, fields, 7, 0x0, 4, 6, -1, -1, -1, 9, -1 };
  return &_ADXDiffTask;
}

@end

void ADXDiffTask_initPackagePrivateWithADXAsyncDiffUtil_withADXDiffUtil_Callback_withInt_withBoolean_withADXOnAsyncUpdateListener_(ADXDiffTask *self, ADXAsyncDiffUtil *asyncDiffUtil, ADXDiffUtil_Callback *callback, jint runGeneration, jboolean detectMoves, id<ADXOnAsyncUpdateListener> onAsyncUpdateListener) {
  ADAsyncTask_init(self);
  JreStrongAssign(&self->backgroundException_, nil);
  JreStrongAssign(&self->diffCallback_, callback);
  JreStrongAssignAndConsume(&self->asyncListDiffer_, new_JavaLangRefWeakReference_initWithId_(asyncDiffUtil));
  self->runGeneration_ = runGeneration;
  self->detectMoves_ = detectMoves;
  if (onAsyncUpdateListener != nil) {
    JreStrongAssignAndConsume(&self->onAsyncUpdateListener_, new_JavaLangRefWeakReference_initWithId_(onAsyncUpdateListener));
  }
}

ADXDiffTask *new_ADXDiffTask_initPackagePrivateWithADXAsyncDiffUtil_withADXDiffUtil_Callback_withInt_withBoolean_withADXOnAsyncUpdateListener_(ADXAsyncDiffUtil *asyncDiffUtil, ADXDiffUtil_Callback *callback, jint runGeneration, jboolean detectMoves, id<ADXOnAsyncUpdateListener> onAsyncUpdateListener) {
  J2OBJC_NEW_IMPL(ADXDiffTask, initPackagePrivateWithADXAsyncDiffUtil_withADXDiffUtil_Callback_withInt_withBoolean_withADXOnAsyncUpdateListener_, asyncDiffUtil, callback, runGeneration, detectMoves, onAsyncUpdateListener)
}

ADXDiffTask *create_ADXDiffTask_initPackagePrivateWithADXAsyncDiffUtil_withADXDiffUtil_Callback_withInt_withBoolean_withADXOnAsyncUpdateListener_(ADXAsyncDiffUtil *asyncDiffUtil, ADXDiffUtil_Callback *callback, jint runGeneration, jboolean detectMoves, id<ADXOnAsyncUpdateListener> onAsyncUpdateListener) {
  J2OBJC_CREATE_IMPL(ADXDiffTask, initPackagePrivateWithADXAsyncDiffUtil_withADXDiffUtil_Callback_withInt_withBoolean_withADXOnAsyncUpdateListener_, asyncDiffUtil, callback, runGeneration, detectMoves, onAsyncUpdateListener)
}

jboolean ADXDiffTask_shouldDispatchResultWithADXDiffUtil_DiffResult_withADXAsyncDiffUtil_(ADXDiffTask *self, ADXDiffUtil_DiffResult *diffResult, ADXAsyncDiffUtil *async) {
  return diffResult != nil && async != nil && self->runGeneration_ == [async getMaxScheduledGeneration];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXDiffTask)
