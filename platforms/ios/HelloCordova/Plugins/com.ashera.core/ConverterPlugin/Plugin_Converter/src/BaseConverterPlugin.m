//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\BaseConverterPlugin.java
//

#include "BaseConverterPlugin.h"
#include "ConverterFactory.h"
#include "IConverter.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/RuntimeException.h"
#include "java/util/List.h"
#include "java/util/Map.h"


#pragma clang diagnostic ignored "-Wprotocol"

@implementation ASBaseConverterPlugin

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASBaseConverterPlugin_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)getName {
  return @"converter";
}

- (id)invokeWithNSString:(NSString *)name
       withNSObjectArray:(IOSObjectArray *)args {
  switch (JreIndexOfStr(name, (id[]){ @"convertFrom", @"convertTo", @"getConverter", @"getDependentAttributes", @"getColor", @"convertDpToPixel", @"convertSpToPixel", @"convertPixelToDp", @"convertPixelToSp" }, 9)) {
    case 0:
    return [self convertFromWithASIConverter:(id<ASIConverter>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), ASIConverter_class_()) withJavaUtilMap:(id<JavaUtilMap>) cast_check(IOSObjectArray_Get(args, 1), JavaUtilMap_class_()) withId:IOSObjectArray_Get(args, 2) withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 3), ASIFragment_class_())];
    case 1:
    return [self convertToWithASIConverter:(id<ASIConverter>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), ASIConverter_class_()) withId:IOSObjectArray_Get(args, 1) withASIFragment:(id<ASIFragment>) cast_check(IOSObjectArray_Get(args, 2), ASIFragment_class_())];
    case 2:
    return [self getConverterWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class])];
    case 3:
    return [self getDependentAttributesWithASIConverter:(id<ASIConverter>) cast_check(IOSObjectArray_Get(nil_chk(args), 0), ASIConverter_class_())];
    case 4:
    return [self getColorWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class])];
    case 5:
    return JavaLangFloat_valueOfWithFloat_([self convertDpToPixelWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class])]);
    case 6:
    return JavaLangFloat_valueOfWithFloat_([self convertSpToPixelWithNSString:(NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class])]);
    case 7:
    return [self convertPixelToDpWithId:IOSObjectArray_Get(nil_chk(args), 0) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangBoolean class]))) booleanValue]];
    case 8:
    return [self convertPixelToSpWithId:IOSObjectArray_Get(nil_chk(args), 0) withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(IOSObjectArray_Get(args, 1), [JavaLangBoolean class]))) booleanValue]];
    default:
    break;
  }
  @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unknown method ", name));
}

- (id)convertFromWithASIConverter:(id<ASIConverter>)converter
                  withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                           withId:(id)value
                  withASIFragment:(id<ASIFragment>)fragment {
  return [((id<ASIConverter>) nil_chk(converter)) convertFromWithId:value withJavaUtilMap:dependentAttributesMap withASIFragment:fragment];
}

- (id)convertToWithASIConverter:(id<ASIConverter>)converter
                         withId:(id)objValue
                withASIFragment:(id<ASIFragment>)fragment {
  return [((id<ASIConverter>) nil_chk(converter)) convertToWithId:objValue withASIFragment:fragment];
}

- (id<ASIConverter>)getConverterWithNSString:(NSString *)name {
  return ASConverterFactory_getWithNSString_(name);
}

- (id<JavaUtilList>)getDependentAttributesWithASIConverter:(id<ASIConverter>)converter {
  return [((id<ASIConverter>) nil_chk(converter)) getDependentAttributes];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "LNSObject;", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LASIConverter;", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 9, 10, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getName);
  methods[2].selector = @selector(invokeWithNSString:withNSObjectArray:);
  methods[3].selector = @selector(convertFromWithASIConverter:withJavaUtilMap:withId:withASIFragment:);
  methods[4].selector = @selector(convertToWithASIConverter:withId:withASIFragment:);
  methods[5].selector = @selector(getConverterWithNSString:);
  methods[6].selector = @selector(getDependentAttributesWithASIConverter:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "invoke", "LNSString;[LNSObject;", "convertFrom", "LASIConverter;LJavaUtilMap;LNSObject;LASIFragment;", "(Lcom/ashera/converter/IConverter;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/Object;Lcom/ashera/core/IFragment;)Ljava/lang/Object;", "convertTo", "LASIConverter;LNSObject;LASIFragment;", "getConverter", "LNSString;", "getDependentAttributes", "LASIConverter;", "(Lcom/ashera/converter/IConverter;)Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASBaseConverterPlugin = { "BaseConverterPlugin", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x401, 7, 0, -1, -1, -1, -1, -1 };
  return &_ASBaseConverterPlugin;
}

@end

void ASBaseConverterPlugin_init(ASBaseConverterPlugin *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBaseConverterPlugin)
