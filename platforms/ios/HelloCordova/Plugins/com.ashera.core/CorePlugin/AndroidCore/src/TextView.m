//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\TextView.java
//

#include "BaseMeasurableView.h"
#include "ColorStateList.h"
#include "DisplayMetrics.h"
#include "Drawable.h"
#include "EmptyArray.h"
#include "Gravity.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IntArray.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "PluginInvoker.h"
#include "RectF.h"
#include "Resources.h"
#include "TextDirectionHeuristic.h"
#include "TextDirectionHeuristics.h"
#include "TextView.h"
#include "TextWatcher.h"
#include "View.h"
#include "WidgetAttribute.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/Exception.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/Runnable.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"
#include "java/util/Locale.h"

@class JavaUtilArrayList;
@protocol JavaLangRunnable;


@interface ADTextView () {
 @public
  ADColorStateList *mTextColor_;
  ADColorStateList *mHintTextColor_;
  ADColorStateList *mLinkTextColor_;
  jint mCurTextColor_;
  jint mCurHintTextColor_;
  ADLayout *mHintLayout_;
  JavaUtilArrayList *mListeners_;
  ADTextView_TextPaint *mTextPaint_;
  ADLayout *mLayout_;
  jint mGravity_;
  jint mMaximum_;
  jint mMaxMode_;
  jint mMinimum_;
  jint mMinMode_;
  jint mMaxWidth_;
  jint mMaxWidthMode_;
  jint mMinWidth_TextView_;
  jint mMinWidthMode_;
  id<ADTextView_Editor> mEditor_;
  jint mAutoSizeTextType_;
  jboolean mNeedsAutoSizeText_;
  jfloat mAutoSizeStepGranularityInPx_;
  jfloat mAutoSizeMinTextSizeInPx_;
  jfloat mAutoSizeMaxTextSizeInPx_;
  IOSIntArray *mAutoSizeTextSizesInPx_;
  jboolean mHasPresetAutoSizeValues_;
  NSString *mText_;
  ASWidgetAttribute *widgetAttribute_;
  id handler_;
  id<JavaLangRunnable> mTickRunnable_;
  NSString *text_;
}

- (jboolean)setupAutoSizeUniformPresetSizesConfiguration;

- (void)validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat:(jfloat)autoSizeMinTextSizeInPx
                                                          withFloat:(jfloat)autoSizeMaxTextSizeInPx
                                                          withFloat:(jfloat)autoSizeStepGranularityInPx;

- (void)clearAutoSizeConfiguration;

- (IOSIntArray *)cleanupAutoSizePresetSizesWithIntArray:(IOSIntArray *)presetValues;

- (jboolean)setupAutoSizeText;

- (void)updateTextColors;

- (ADLayout_Alignment *)getLayoutAlignment;

- (void)autoSizeText;

- (jint)findLargestTextSizeWhichFitsWithADRectF:(ADRectF *)availableSpace;

- (jboolean)isAutoSizeEnabled;

- (jint)getExtendedPaddingBottom;

- (jint)getExtendedPaddingTop;

- (void)invalidateDrawableWithADDrawable:(ADDrawable *)dr;

@end

J2OBJC_FIELD_SETTER(ADTextView, mTextColor_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADTextView, mHintTextColor_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADTextView, mLinkTextColor_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADTextView, mHintLayout_, ADLayout *)
J2OBJC_FIELD_SETTER(ADTextView, mListeners_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADTextView, mTextPaint_, ADTextView_TextPaint *)
J2OBJC_FIELD_SETTER(ADTextView, mLayout_, ADLayout *)
J2OBJC_FIELD_SETTER(ADTextView, mEditor_, id<ADTextView_Editor>)
J2OBJC_FIELD_SETTER(ADTextView, mAutoSizeTextSizesInPx_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADTextView, mText_, NSString *)
J2OBJC_FIELD_SETTER(ADTextView, widgetAttribute_, ASWidgetAttribute *)
J2OBJC_FIELD_SETTER(ADTextView, handler_, id)
J2OBJC_FIELD_SETTER(ADTextView, mTickRunnable_, id<JavaLangRunnable>)
J2OBJC_FIELD_SETTER(ADTextView, text_, NSString *)

inline jint ADTextView_get_LINES(void);
#define ADTextView_LINES 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, LINES, jint)

inline jint ADTextView_get_EMS(void);
#define ADTextView_EMS 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, EMS, jint)

inline jint ADTextView_get_PIXELS(void);
#define ADTextView_PIXELS 2
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, PIXELS, jint)

inline ADRectF *ADTextView_get_TEMP_RECTF(void);
static ADRectF *ADTextView_TEMP_RECTF;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextView, TEMP_RECTF, ADRectF *)

inline jint ADTextView_get_DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP(void);
#define ADTextView_DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP 12
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP, jint)

inline jint ADTextView_get_DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP(void);
#define ADTextView_DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP 112
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP, jint)

inline jint ADTextView_get_DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX(void);
#define ADTextView_DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX 1
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX, jint)

inline jfloat ADTextView_get_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE(void);
#define ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE -1.0f
J2OBJC_STATIC_FIELD_CONSTANT(ADTextView, UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE, jfloat)

__attribute__((unused)) static jboolean ADTextView_setupAutoSizeUniformPresetSizesConfiguration(ADTextView *self);

__attribute__((unused)) static void ADTextView_validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat_withFloat_withFloat_(ADTextView *self, jfloat autoSizeMinTextSizeInPx, jfloat autoSizeMaxTextSizeInPx, jfloat autoSizeStepGranularityInPx);

__attribute__((unused)) static void ADTextView_clearAutoSizeConfiguration(ADTextView *self);

__attribute__((unused)) static IOSIntArray *ADTextView_cleanupAutoSizePresetSizesWithIntArray_(ADTextView *self, IOSIntArray *presetValues);

__attribute__((unused)) static jboolean ADTextView_setupAutoSizeText(ADTextView *self);

__attribute__((unused)) static void ADTextView_updateTextColors(ADTextView *self);

__attribute__((unused)) static ADLayout_Alignment *ADTextView_getLayoutAlignment(ADTextView *self);

__attribute__((unused)) static void ADTextView_autoSizeText(ADTextView *self);

__attribute__((unused)) static jint ADTextView_findLargestTextSizeWhichFitsWithADRectF_(ADTextView *self, ADRectF *availableSpace);

__attribute__((unused)) static jboolean ADTextView_isAutoSizeEnabled(ADTextView *self);

__attribute__((unused)) static jint ADTextView_getExtendedPaddingBottom(ADTextView *self);

__attribute__((unused)) static jint ADTextView_getExtendedPaddingTop(ADTextView *self);

__attribute__((unused)) static void ADTextView_invalidateDrawableWithADDrawable_(ADTextView *self, ADDrawable *dr);

@interface ADTextView_OnEditorActionListener : NSObject

@end

__attribute__((unused)) static void ADTextView_BufferType_initWithNSString_withInt_(ADTextView_BufferType *self, NSString *__name, jint __ordinal);

@interface ADTextView_Editor : NSObject

@end

J2OBJC_INITIALIZED_DEFN(ADTextView)

@implementation ADTextView

- (void)setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:(IOSIntArray *)presetSizes
                                                      withInt:(jint)unit {
  if ([self supportsAutoSizeText]) {
    jint presetSizesLength = ((IOSIntArray *) nil_chk(presetSizes))->size_;
    if (presetSizesLength > 0) {
      IOSIntArray *presetSizesInPx = [IOSIntArray arrayWithLength:presetSizesLength];
      if (unit == JreLoadStatic(ADTextView_TypedValue, COMPLEX_UNIT_PX)) {
        presetSizesInPx = JavaUtilArrays_copyOfWithIntArray_withInt_(presetSizes, presetSizesLength);
      }
      else {
        ADDisplayMetrics *displayMetrics = [((ADResources *) nil_chk([self getResources])) getDisplayMetrics];
        for (jint i = 0; i < presetSizesLength; i++) {
          *IOSIntArray_GetRef(presetSizesInPx, i) = JavaLangMath_roundWithFloat_(ADTextView_TypedValue_applyDimensionWithInt_withInt_withADDisplayMetrics_(unit, IOSIntArray_Get(presetSizes, i), displayMetrics));
        }
      }
      JreStrongAssign(&mAutoSizeTextSizesInPx_, ADTextView_cleanupAutoSizePresetSizesWithIntArray_(self, presetSizesInPx));
      if (!ADTextView_setupAutoSizeUniformPresetSizesConfiguration(self)) {
        @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", @"None of the preset sizes is valid: ", JavaUtilArrays_toStringWithIntArray_(presetSizes)));
      }
    }
    else {
      mHasPresetAutoSizeValues_ = false;
    }
    if (ADTextView_setupAutoSizeText(self)) {
      ADTextView_autoSizeText(self);
      [self invalidate];
    }
  }
}

- (jint)getAutoSizeTextType {
  return mAutoSizeTextType_;
}

- (jint)getAutoSizeStepGranularity {
  return JavaLangMath_roundWithFloat_(mAutoSizeStepGranularityInPx_);
}

- (jint)getAutoSizeMinTextSize {
  return JavaLangMath_roundWithFloat_(mAutoSizeMinTextSizeInPx_);
}

- (jint)getAutoSizeMaxTextSize {
  return JavaLangMath_roundWithFloat_(mAutoSizeMaxTextSizeInPx_);
}

- (jboolean)setupAutoSizeUniformPresetSizesConfiguration {
  return ADTextView_setupAutoSizeUniformPresetSizesConfiguration(self);
}

- (void)validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat:(jfloat)autoSizeMinTextSizeInPx
                                                          withFloat:(jfloat)autoSizeMaxTextSizeInPx
                                                          withFloat:(jfloat)autoSizeStepGranularityInPx {
  ADTextView_validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat_withFloat_withFloat_(self, autoSizeMinTextSizeInPx, autoSizeMaxTextSizeInPx, autoSizeStepGranularityInPx);
}

- (void)clearAutoSizeConfiguration {
  ADTextView_clearAutoSizeConfiguration(self);
}

- (IOSIntArray *)cleanupAutoSizePresetSizesWithIntArray:(IOSIntArray *)presetValues {
  return ADTextView_cleanupAutoSizePresetSizesWithIntArray_(self, presetValues);
}

- (jboolean)setupAutoSizeText {
  return ADTextView_setupAutoSizeText(self);
}

- (jint)getTotalPaddingLeft {
  return [self getCompoundPaddingLeft];
}

- (jint)getTotalPaddingRight {
  return [self getCompoundPaddingRight];
}

- (void)setTextColorWithInt:(jint)color {
  JreStrongAssign(&mTextColor_, ADColorStateList_valueOfWithInt_(color));
  ADTextView_updateTextColors(self);
}

- (void)setTextColorWithADColorStateList:(ADColorStateList *)colors {
  if (colors == nil) {
    @throw create_JavaLangNullPointerException_init();
  }
  JreStrongAssign(&mTextColor_, colors);
  ADTextView_updateTextColors(self);
}

- (jint)getCurrentTextColor {
  return mCurTextColor_;
}

- (ADTextView_TextPaint *)getPaint {
  return mTextPaint_;
}

- (void)setHintTextColorWithInt:(jint)color {
  JreStrongAssign(&mHintTextColor_, ADColorStateList_valueOfWithInt_(color));
  ADTextView_updateTextColors(self);
}

- (void)setHintTextColorWithADColorStateList:(ADColorStateList *)colors {
  JreStrongAssign(&mHintTextColor_, colors);
  ADTextView_updateTextColors(self);
}

- (ADColorStateList *)getHintTextColors {
  return mHintTextColor_;
}

- (jint)getCurrentHintTextColor {
  return mHintTextColor_ != nil ? mCurHintTextColor_ : mCurTextColor_;
}

- (void)setLinkTextColorWithInt:(jint)color {
  JreStrongAssign(&mLinkTextColor_, ADColorStateList_valueOfWithInt_(color));
  ADTextView_updateTextColors(self);
}

- (void)setLinkTextColorWithADColorStateList:(ADColorStateList *)colors {
  JreStrongAssign(&mLinkTextColor_, colors);
  ADTextView_updateTextColors(self);
}

- (ADColorStateList *)getLinkTextColors {
  return mLinkTextColor_;
}

- (void)setGravityWithInt:(jint)gravity {
  if ((gravity & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
    gravity |= ADGravity_START;
  }
  if ((gravity & ADGravity_VERTICAL_GRAVITY_MASK) == 0) {
    gravity |= ADGravity_TOP;
  }
  jboolean newLayout = false;
  if ((gravity & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) != (mGravity_ & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK)) {
    newLayout = true;
  }
  if (gravity != mGravity_) {
    [self invalidate];
  }
  mGravity_ = gravity;
  if (mLayout_ != nil && newLayout) {
    jint want = [mLayout_ getWidth];
    jint hintWant = mHintLayout_ == nil ? 0 : [mHintLayout_ getWidth];
    [self makeNewLayoutWithInt:want withInt:hintWant withInt:ADTextView_UNKNOWN_BORING withInt:ADTextView_UNKNOWN_BORING withInt:mRight_ - mLeft_ - [self getCompoundPaddingLeft] - [self getCompoundPaddingRight] withBoolean:true];
  }
}

- (jint)getGravity {
  return mGravity_;
}

- (void)setMinLinesWithInt:(jint)minLines {
  mMinimum_ = minLines;
  mMinMode_ = ADTextView_LINES;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMinLines {
  return mMinMode_ == ADTextView_LINES ? mMinimum_ : -1;
}

- (void)setMinHeightWithInt:(jint)minPixels {
  mMinimum_ = minPixels;
  mMinMode_ = ADTextView_PIXELS;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMinHeight {
  return mMinMode_ == ADTextView_PIXELS ? mMinimum_ : -1;
}

- (void)setMaxLinesWithInt:(jint)maxLines {
  mMaximum_ = maxLines;
  mMaxMode_ = ADTextView_LINES;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMaxLines {
  return mMaxMode_ == ADTextView_LINES ? mMaximum_ : -1;
}

- (void)setMaxHeightWithInt:(jint)maxPixels {
  mMaximum_ = maxPixels;
  mMaxMode_ = ADTextView_PIXELS;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMaxHeight {
  return mMaxMode_ == ADTextView_PIXELS ? mMaximum_ : -1;
}

- (void)setLinesWithInt:(jint)lines {
  mMaximum_ = mMinimum_ = lines;
  mMaxMode_ = mMinMode_ = ADTextView_LINES;
  [self requestLayout];
  [self invalidate];
}

- (void)setMinEmsWithInt:(jint)minEms {
  mMinWidth_TextView_ = minEms;
  mMinWidthMode_ = ADTextView_EMS;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMinEms {
  return mMinWidthMode_ == ADTextView_EMS ? mMinWidth_TextView_ : -1;
}

- (void)setMinWidthWithInt:(jint)minPixels {
  mMinWidth_TextView_ = minPixels;
  mMinWidthMode_ = ADTextView_PIXELS;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMinWidth {
  return mMinWidthMode_ == ADTextView_PIXELS ? mMinWidth_TextView_ : -1;
}

- (void)setMaxEmsWithInt:(jint)maxEms {
  mMaxWidth_ = maxEms;
  mMaxWidthMode_ = ADTextView_EMS;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMaxEms {
  return mMaxWidthMode_ == ADTextView_EMS ? mMaxWidth_ : -1;
}

- (void)setMaxWidthWithInt:(jint)maxPixels {
  mMaxWidth_ = maxPixels;
  mMaxWidthMode_ = ADTextView_PIXELS;
  [self requestLayout];
  [self invalidate];
}

- (jint)getMaxWidth {
  return mMaxWidthMode_ == ADTextView_PIXELS ? mMaxWidth_ : -1;
}

- (void)setEmsWithInt:(jint)ems {
  mMaxWidth_ = mMinWidth_TextView_ = ems;
  mMaxWidthMode_ = mMinWidthMode_ = ADTextView_EMS;
  [self requestLayout];
  [self invalidate];
}

- (void)setWidthWithInt:(jint)pixels {
  mMaxWidth_ = mMinWidth_TextView_ = pixels;
  mMaxWidthMode_ = mMinWidthMode_ = ADTextView_PIXELS;
  [self requestLayout];
  [self invalidate];
}

- (void)updateTextColors {
  ADTextView_updateTextColors(self);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  if ((mTextColor_ != nil && [mTextColor_ isStateful]) || (mHintTextColor_ != nil && [mHintTextColor_ isStateful]) || (mLinkTextColor_ != nil && [mLinkTextColor_ isStateful])) {
    ADTextView_updateTextColors(self);
  }
  if (mDrawables_ != nil) {
    IOSIntArray *state = [self getDrawableState];
    for (ADDrawable * __strong dr in nil_chk(JreLoadStatic(ADTextView_Drawables, mShowing))) {
      if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
        ADTextView_invalidateDrawableWithADDrawable_(self, dr);
      }
    }
  }
}

- (ADLayout_Alignment *)getLayoutAlignment {
  return ADTextView_getLayoutAlignment(self);
}

- (void)autoSizeText {
  ADTextView_autoSizeText(self);
}

- (jint)findLargestTextSizeWhichFitsWithADRectF:(ADRectF *)availableSpace {
  return ADTextView_findLargestTextSizeWhichFitsWithADRectF_(self, availableSpace);
}

- (void)addTextChangedListenerWithADTextWatcher:(id<ADTextWatcher>)watcher {
  if (mListeners_ == nil) {
    JreStrongAssignAndConsume(&mListeners_, new_JavaUtilArrayList_init());
  }
  [mListeners_ addWithId:watcher];
}

- (void)removeTextChangedListenerWithADTextWatcher:(id<ADTextWatcher>)watcher {
  if (mListeners_ != nil) {
    jint i = [mListeners_ indexOfWithId:watcher];
    if (i >= 0) {
      [((JavaUtilArrayList *) nil_chk(mListeners_)) removeWithInt:i];
    }
  }
}

- (jboolean)isAutoSizeEnabled {
  return ADTextView_isAutoSizeEnabled(self);
}

- (jboolean)supportsAutoSizeText {
  return true;
}

- (id<ADTextDirectionHeuristic>)getTextDirectionHeuristic {
  if ([self hasPasswordTransformationMethod]) {
    return JreLoadStatic(ADTextDirectionHeuristics, LTR);
  }
  if ([self isTypePhone]) {
    JavaTextDecimalFormatSymbols *symbols = JavaTextDecimalFormatSymbols_getInstanceWithJavaUtilLocale_([self getTextLocale]);
    NSString *zero = IOSObjectArray_Get(nil_chk([self getDigitStringsWithJavaTextDecimalFormatSymbols:symbols]), 0);
    jint firstCodepoint = [((NSString *) nil_chk(zero)) java_codePointAt:0];
    jbyte digitDirection = JavaLangCharacter_getDirectionalityWithInt_(firstCodepoint);
    if (digitDirection == JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT || digitDirection == JavaLangCharacter_DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC) {
      return JreLoadStatic(ADTextDirectionHeuristics, RTL);
    }
    else {
      return JreLoadStatic(ADTextDirectionHeuristics, LTR);
    }
  }
  jboolean defaultIsRtl = [self getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL;
  switch ([self getTextDirection]) {
    default:
    case ADView_TEXT_DIRECTION_FIRST_STRONG:
    return (defaultIsRtl ? JreLoadStatic(ADTextDirectionHeuristics, FIRSTSTRONG_RTL) : JreLoadStatic(ADTextDirectionHeuristics, FIRSTSTRONG_LTR));
    case ADView_TEXT_DIRECTION_ANY_RTL:
    return JreLoadStatic(ADTextDirectionHeuristics, ANYRTL_LTR);
    case ADView_TEXT_DIRECTION_LTR:
    return JreLoadStatic(ADTextDirectionHeuristics, LTR);
    case ADView_TEXT_DIRECTION_RTL:
    return JreLoadStatic(ADTextDirectionHeuristics, RTL);
    case ADView_TEXT_DIRECTION_LOCALE:
    return JreLoadStatic(ADTextDirectionHeuristics, LOCALE);
    case ADView_TEXT_DIRECTION_FIRST_STRONG_LTR:
    return JreLoadStatic(ADTextDirectionHeuristics, FIRSTSTRONG_LTR);
    case ADView_TEXT_DIRECTION_FIRST_STRONG_RTL:
    return JreLoadStatic(ADTextDirectionHeuristics, FIRSTSTRONG_RTL);
  }
}

- (jboolean)suggestedSizeFitsInSpaceWithInt:(jint)mAutoSizeTextSizeInPx
                                withADRectF:(ADRectF *)availableSpace {
  return false;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ADTextView_initWithASIWidget_(self, widget);
  return self;
}

- (jint)getExtendedPaddingBottom {
  return ADTextView_getExtendedPaddingBottom(self);
}

- (jint)getExtendedPaddingTop {
  return ADTextView_getExtendedPaddingTop(self);
}

- (void)makeNewLayoutWithInt:(jint)availableWidth
                     withInt:(jint)i
                     withInt:(jint)unknownBoring
                     withInt:(jint)unknownBoring2
                     withInt:(jint)j
                 withBoolean:(jboolean)b {
}

- (void)setTextSizeInternalWithInt:(jint)unit
                         withFloat:(jfloat)optimalTextSize
                       withBoolean:(jboolean)b {
}

- (jfloat)getTextSize {
  return 0;
}

- (void)setUpAutoSizeTextTypeUniformWithInt:(jint)autoSizeMin
                                    withInt:(jint)autoSizeMax
                                    withInt:(jint)autoSizeGranular {
  jfloat autoSizeMinTextSizeInPx = autoSizeMin == ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE ? ASPluginInvoker_convertSpToPixelWithNSString_(JreStrcat("I$", ADTextView_DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP, @"sp")) : autoSizeMin;
  jfloat autoSizeMaxTextSizeInPx = autoSizeMax == ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE ? ASPluginInvoker_convertSpToPixelWithNSString_(JreStrcat("I$", ADTextView_DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP, @"sp")) : autoSizeMax;
  jfloat autoSizeStepGranularityInPx = autoSizeGranular == ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE ? ADTextView_DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX : autoSizeGranular;
  ADTextView_validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat_withFloat_withFloat_(self, autoSizeMinTextSizeInPx, autoSizeMaxTextSizeInPx, autoSizeStepGranularityInPx);
  ADTextView_setupAutoSizeText(self);
}

- (jboolean)isAutoSizeTextTypeUniformWithInt:(jint)autoTextType {
  return autoTextType == ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM;
}

- (void)clearAutoSizeTypeConfiguration {
  ADTextView_clearAutoSizeConfiguration(self);
}

- (void)autoResizeText {
  ADTextView_autoSizeText(self);
}

- (void)setWidgetInfoWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  JreStrongAssign(&self->widgetAttribute_, widgetAttribute);
}

- (void)postDelayedWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable
                                withInt:(jint)delay {
  JreStrongAssign(&self->mTickRunnable_, mTickRunnable);
  @try {
    JreStrongAssign(&handler_, ASPluginInvoker_postDelayedWithJavaLangRunnable_withInt_(mTickRunnable, delay));
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
}

- (void)removeCallbacksWithJavaLangRunnable:(id<JavaLangRunnable>)mTickRunnable {
  if (self->mTickRunnable_ != nil && handler_ != nil) {
    ASPluginInvoker_removeCallbacksWithId_withJavaLangRunnable_(handler_, mTickRunnable);
  }
}

- (jboolean)isShown {
  return true;
}

- (void)setTextWithNSString:(NSString *)text {
  JreStrongAssign(&self->text_, text);
  @try {
    [((id<ASIWidget>) nil_chk([self getWidget])) setAttributeWithASWidgetAttribute:widgetAttribute_ withNSString:text withId:text withASILifeCycleDecorator:nil];
  }
  @catch (JavaLangException *e) {
    [e printStackTrace];
  }
}

- (NSString *)getText {
  return self->text_;
}

- (jint)measureWidthWithInt:(jint)widthMode
                    withInt:(jint)widthSize
                    withInt:(jint)width {
  if (mMaxWidth_ != JavaLangInteger_MAX_VALUE) {
    if (mMaxWidthMode_ == ADTextView_EMS) {
      width = JavaLangMath_minWithInt_withInt_(width, mMaxWidth_ * [self getLineHeight]);
    }
    else {
      width = JavaLangMath_minWithInt_withInt_(width, mMaxWidth_);
    }
  }
  if (mMinWidth_TextView_ != 0) {
    if (mMinWidthMode_ == ADTextView_EMS) {
      width = JavaLangMath_maxWithInt_withInt_(width, mMinWidth_TextView_ * [self getLineHeight]);
    }
    else {
      width = JavaLangMath_maxWithInt_withInt_(width, mMinWidth_TextView_);
    }
  }
  return width;
}

- (jint)measureHeightWithInt:(jint)heightMode
                     withInt:(jint)heightSize
                     withInt:(jint)height {
  if (mMaximum_ != JavaLangInteger_MAX_VALUE) {
    if (mMaxMode_ != ADTextView_LINES) {
      height = JavaLangMath_minWithInt_withInt_(height, mMaximum_);
    }
    else {
      jint lineHeightWithPad = [self getLineHeight] + [self getLineHeightPadding];
      jint borderHeightPadding = ([self getBorderWidth] * 2) + [self getBorderPadding];
      jint calc = (mMaximum_ * lineHeightWithPad) + borderHeightPadding;
      if (height < ((lineHeightWithPad) + borderHeightPadding)) {
        height = (lineHeightWithPad) + borderHeightPadding;
      }
      height = JavaLangMath_minWithInt_withInt_(height, calc);
    }
  }
  if (mMinimum_ != 0) {
    if (mMinMode_ == ADTextView_LINES) {
      height = JavaLangMath_maxWithInt_withInt_(height, (mMinimum_ * ([self getLineHeight] + [self getLineHeightPadding])) + [self getBorderPadding] + ([self getBorderWidth] * 2));
    }
    else {
      height = JavaLangMath_maxWithInt_withInt_(height, mMinimum_);
    }
  }
  return height;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getBorderPadding {
  return 0;
}

- (jint)getLineHeight {
  return 0;
}

- (jint)getBorderWidth {
  return 0;
}

- (ADLayout_Alignment *)getAlignmentOfLayout {
  return ADTextView_getLayoutAlignment(self);
}

- (jboolean)hasPasswordTransformationMethod {
  return false;
}

- (JavaUtilLocale *)getTextLocale {
  return nil;
}

- (jboolean)isTypePhone {
  return false;
}

- (IOSObjectArray *)getDigitStringsWithJavaTextDecimalFormatSymbols:(JavaTextDecimalFormatSymbols *)symbols {
  return nil;
}

- (ADColorStateList *)getTextColors {
  return mTextColor_;
}

- (void)invalidateDrawableWithADDrawable:(ADDrawable *)dr {
  ADTextView_invalidateDrawableWithADDrawable_(self, dr);
}

- (void)dealloc {
  RELEASE_(mTextColor_);
  RELEASE_(mHintTextColor_);
  RELEASE_(mLinkTextColor_);
  RELEASE_(mDrawables_);
  RELEASE_(mHintLayout_);
  RELEASE_(mListeners_);
  RELEASE_(mTextPaint_);
  RELEASE_(mLayout_);
  RELEASE_(mEditor_);
  RELEASE_(mAutoSizeTextSizesInPx_);
  RELEASE_(mText_);
  RELEASE_(widgetAttribute_);
  RELEASE_(handler_);
  RELEASE_(mTickRunnable_);
  RELEASE_(text_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x2, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADTextView_TextPaint;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 9, 8, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 10, 8, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADLayout_Alignment;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 26, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADTextDirectionHeuristic;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 30, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 33, 34, -1, -1, -1, -1 },
    { NULL, "F", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 37, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 43, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 45, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 46, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 47, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADLayout_Alignment;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilLocale;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x1, 48, 49, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:withInt:);
  methods[1].selector = @selector(getAutoSizeTextType);
  methods[2].selector = @selector(getAutoSizeStepGranularity);
  methods[3].selector = @selector(getAutoSizeMinTextSize);
  methods[4].selector = @selector(getAutoSizeMaxTextSize);
  methods[5].selector = @selector(setupAutoSizeUniformPresetSizesConfiguration);
  methods[6].selector = @selector(validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat:withFloat:withFloat:);
  methods[7].selector = @selector(clearAutoSizeConfiguration);
  methods[8].selector = @selector(cleanupAutoSizePresetSizesWithIntArray:);
  methods[9].selector = @selector(setupAutoSizeText);
  methods[10].selector = @selector(getTotalPaddingLeft);
  methods[11].selector = @selector(getTotalPaddingRight);
  methods[12].selector = @selector(setTextColorWithInt:);
  methods[13].selector = @selector(setTextColorWithADColorStateList:);
  methods[14].selector = @selector(getCurrentTextColor);
  methods[15].selector = @selector(getPaint);
  methods[16].selector = @selector(setHintTextColorWithInt:);
  methods[17].selector = @selector(setHintTextColorWithADColorStateList:);
  methods[18].selector = @selector(getHintTextColors);
  methods[19].selector = @selector(getCurrentHintTextColor);
  methods[20].selector = @selector(setLinkTextColorWithInt:);
  methods[21].selector = @selector(setLinkTextColorWithADColorStateList:);
  methods[22].selector = @selector(getLinkTextColors);
  methods[23].selector = @selector(setGravityWithInt:);
  methods[24].selector = @selector(getGravity);
  methods[25].selector = @selector(setMinLinesWithInt:);
  methods[26].selector = @selector(getMinLines);
  methods[27].selector = @selector(setMinHeightWithInt:);
  methods[28].selector = @selector(getMinHeight);
  methods[29].selector = @selector(setMaxLinesWithInt:);
  methods[30].selector = @selector(getMaxLines);
  methods[31].selector = @selector(setMaxHeightWithInt:);
  methods[32].selector = @selector(getMaxHeight);
  methods[33].selector = @selector(setLinesWithInt:);
  methods[34].selector = @selector(setMinEmsWithInt:);
  methods[35].selector = @selector(getMinEms);
  methods[36].selector = @selector(setMinWidthWithInt:);
  methods[37].selector = @selector(getMinWidth);
  methods[38].selector = @selector(setMaxEmsWithInt:);
  methods[39].selector = @selector(getMaxEms);
  methods[40].selector = @selector(setMaxWidthWithInt:);
  methods[41].selector = @selector(getMaxWidth);
  methods[42].selector = @selector(setEmsWithInt:);
  methods[43].selector = @selector(setWidthWithInt:);
  methods[44].selector = @selector(updateTextColors);
  methods[45].selector = @selector(drawableStateChanged);
  methods[46].selector = @selector(getLayoutAlignment);
  methods[47].selector = @selector(autoSizeText);
  methods[48].selector = @selector(findLargestTextSizeWhichFitsWithADRectF:);
  methods[49].selector = @selector(addTextChangedListenerWithADTextWatcher:);
  methods[50].selector = @selector(removeTextChangedListenerWithADTextWatcher:);
  methods[51].selector = @selector(isAutoSizeEnabled);
  methods[52].selector = @selector(supportsAutoSizeText);
  methods[53].selector = @selector(getTextDirectionHeuristic);
  methods[54].selector = @selector(suggestedSizeFitsInSpaceWithInt:withADRectF:);
  methods[55].selector = @selector(initWithASIWidget:);
  methods[56].selector = @selector(getExtendedPaddingBottom);
  methods[57].selector = @selector(getExtendedPaddingTop);
  methods[58].selector = @selector(makeNewLayoutWithInt:withInt:withInt:withInt:withInt:withBoolean:);
  methods[59].selector = @selector(setTextSizeInternalWithInt:withFloat:withBoolean:);
  methods[60].selector = @selector(getTextSize);
  methods[61].selector = @selector(setUpAutoSizeTextTypeUniformWithInt:withInt:withInt:);
  methods[62].selector = @selector(isAutoSizeTextTypeUniformWithInt:);
  methods[63].selector = @selector(clearAutoSizeTypeConfiguration);
  methods[64].selector = @selector(autoResizeText);
  methods[65].selector = @selector(setWidgetInfoWithASWidgetAttribute:);
  methods[66].selector = @selector(postDelayedWithJavaLangRunnable:withInt:);
  methods[67].selector = @selector(removeCallbacksWithJavaLangRunnable:);
  methods[68].selector = @selector(isShown);
  methods[69].selector = @selector(setTextWithNSString:);
  methods[70].selector = @selector(getText);
  methods[71].selector = @selector(measureWidthWithInt:withInt:withInt:);
  methods[72].selector = @selector(measureHeightWithInt:withInt:withInt:);
  methods[73].selector = @selector(getLineHeightPadding);
  methods[74].selector = @selector(getBorderPadding);
  methods[75].selector = @selector(getLineHeight);
  methods[76].selector = @selector(getBorderWidth);
  methods[77].selector = @selector(getAlignmentOfLayout);
  methods[78].selector = @selector(hasPasswordTransformationMethod);
  methods[79].selector = @selector(getTextLocale);
  methods[80].selector = @selector(isTypePhone);
  methods[81].selector = @selector(getDigitStringsWithJavaTextDecimalFormatSymbols:);
  methods[82].selector = @selector(getTextColors);
  methods[83].selector = @selector(invalidateDrawableWithADDrawable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LINES", "I", .constantValue.asInt = ADTextView_LINES, 0x1a, -1, -1, -1, -1 },
    { "EMS", "I", .constantValue.asInt = ADTextView_EMS, 0x1a, -1, -1, -1, -1 },
    { "PIXELS", "I", .constantValue.asInt = ADTextView_PIXELS, 0x1a, -1, -1, -1, -1 },
    { "TEMP_RECTF", "LADRectF;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "mTextColor_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHintTextColor_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLinkTextColor_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurTextColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCurHintTextColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawables_", "LADTextView_Drawables;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHintLayout_", "LADLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mListeners_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x2, -1, -1, 53, -1 },
    { "mTextPaint_", "LADTextView_TextPaint;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mLayout_", "LADLayout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaximum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinimum_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidthMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinWidth_TextView_", "I", .constantValue.asLong = 0, 0x2, 54, -1, -1, -1 },
    { "mMinWidthMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mEditor_", "LADTextView_Editor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "AUTO_SIZE_TEXT_TYPE_NONE", "I", .constantValue.asInt = ADTextView_AUTO_SIZE_TEXT_TYPE_NONE, 0x19, -1, -1, -1, -1 },
    { "AUTO_SIZE_TEXT_TYPE_UNIFORM", "I", .constantValue.asInt = ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM, 0x19, -1, -1, -1, -1 },
    { "DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP", "I", .constantValue.asInt = ADTextView_DEFAULT_AUTO_SIZE_MIN_TEXT_SIZE_IN_SP, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP", "I", .constantValue.asInt = ADTextView_DEFAULT_AUTO_SIZE_MAX_TEXT_SIZE_IN_SP, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX", "I", .constantValue.asInt = ADTextView_DEFAULT_AUTO_SIZE_GRANULARITY_IN_PX, 0x1a, -1, -1, -1, -1 },
    { "UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE", "F", .constantValue.asFloat = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE, 0x1a, -1, -1, -1, -1 },
    { "mAutoSizeTextType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNeedsAutoSizeText_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAutoSizeStepGranularityInPx_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAutoSizeMinTextSizeInPx_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAutoSizeMaxTextSizeInPx_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAutoSizeTextSizesInPx_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasPresetAutoSizeValues_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "UNKNOWN_BORING", "I", .constantValue.asInt = ADTextView_UNKNOWN_BORING, 0x19, -1, -1, -1, -1 },
    { "mText_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "widgetAttribute_", "LASWidgetAttribute;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "handler_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTickRunnable_", "LJavaLangRunnable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAutoSizeTextTypeUniformWithPresetSizes", "[II", "validateAndSetAutoSizeTextTypeUniformConfiguration", "FFF", "cleanupAutoSizePresetSizes", "[I", "setTextColor", "I", "LADColorStateList;", "setHintTextColor", "setLinkTextColor", "setGravity", "setMinLines", "setMinHeight", "setMaxLines", "setMaxHeight", "setLines", "setMinEms", "setMinWidth", "setMaxEms", "setMaxWidth", "setEms", "setWidth", "findLargestTextSizeWhichFits", "LADRectF;", "addTextChangedListener", "LADTextWatcher;", "removeTextChangedListener", "suggestedSizeFitsInSpace", "ILADRectF;", "LASIWidget;", "makeNewLayout", "IIIIIZ", "setTextSizeInternal", "IFZ", "setUpAutoSizeTextTypeUniform", "III", "isAutoSizeTextTypeUniform", "setWidgetInfo", "LASWidgetAttribute;", "postDelayed", "LJavaLangRunnable;I", "removeCallbacks", "LJavaLangRunnable;", "setText", "LNSString;", "measureWidth", "measureHeight", "getDigitStrings", "LJavaTextDecimalFormatSymbols;", "invalidateDrawable", "LADDrawable;", &ADTextView_TEMP_RECTF, "Ljava/util/ArrayList<Lr/android/text/TextWatcher;>;", "mMinWidth", "LADTextView_OnEditorActionListener;LADTextView_BufferType;LADTextView_TypedValue;LADTextView_Editor;LADTextView_TextPaint;LADTextView_Drawables;" };
  static const J2ObjcClassInfo _ADTextView = { "TextView", "r.android.widget", ptrTable, methods, fields, 7, 0x401, 84, 43, -1, 55, -1, -1, -1 };
  return &_ADTextView;
}

+ (void)initialize {
  if (self == [ADTextView class]) {
    JreStrongAssignAndConsume(&ADTextView_TEMP_RECTF, new_ADRectF_init());
    J2OBJC_SET_INITIALIZED(ADTextView)
  }
}

@end

jboolean ADTextView_setupAutoSizeUniformPresetSizesConfiguration(ADTextView *self) {
  jint sizesLength = ((IOSIntArray *) nil_chk(self->mAutoSizeTextSizesInPx_))->size_;
  self->mHasPresetAutoSizeValues_ = (sizesLength > 0);
  if (self->mHasPresetAutoSizeValues_) {
    self->mAutoSizeTextType_ = ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM;
    self->mAutoSizeMinTextSizeInPx_ = IOSIntArray_Get(self->mAutoSizeTextSizesInPx_, 0);
    self->mAutoSizeMaxTextSizeInPx_ = IOSIntArray_Get(self->mAutoSizeTextSizesInPx_, sizesLength - 1);
    self->mAutoSizeStepGranularityInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  }
  return self->mHasPresetAutoSizeValues_;
}

void ADTextView_validateAndSetAutoSizeTextTypeUniformConfigurationWithFloat_withFloat_withFloat_(ADTextView *self, jfloat autoSizeMinTextSizeInPx, jfloat autoSizeMaxTextSizeInPx, jfloat autoSizeStepGranularityInPx) {
  if (autoSizeMinTextSizeInPx <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F$", @"Minimum auto-size text size (", autoSizeMinTextSizeInPx, @"px) is less or equal to (0px)"));
  }
  if (autoSizeMaxTextSizeInPx <= autoSizeMinTextSizeInPx) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F$F$", @"Maximum auto-size text size (", autoSizeMaxTextSizeInPx, @"px) is less or equal to minimum auto-size text size (", autoSizeMinTextSizeInPx, @"px)"));
  }
  if (autoSizeStepGranularityInPx <= 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$F$", @"The auto-size step granularity (", autoSizeStepGranularityInPx, @"px) is less or equal to (0px)"));
  }
  self->mAutoSizeTextType_ = ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM;
  self->mAutoSizeMinTextSizeInPx_ = autoSizeMinTextSizeInPx;
  self->mAutoSizeMaxTextSizeInPx_ = autoSizeMaxTextSizeInPx;
  self->mAutoSizeStepGranularityInPx_ = autoSizeStepGranularityInPx;
  self->mHasPresetAutoSizeValues_ = false;
}

void ADTextView_clearAutoSizeConfiguration(ADTextView *self) {
  self->mAutoSizeTextType_ = ADTextView_AUTO_SIZE_TEXT_TYPE_NONE;
  self->mAutoSizeMinTextSizeInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  self->mAutoSizeMaxTextSizeInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  self->mAutoSizeStepGranularityInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  JreStrongAssign(&self->mAutoSizeTextSizesInPx_, JreLoadStatic(ADEmptyArray, INT));
  self->mNeedsAutoSizeText_ = false;
}

IOSIntArray *ADTextView_cleanupAutoSizePresetSizesWithIntArray_(ADTextView *self, IOSIntArray *presetValues) {
  jint presetValuesLength = ((IOSIntArray *) nil_chk(presetValues))->size_;
  if (presetValuesLength == 0) {
    return presetValues;
  }
  JavaUtilArrays_sortWithIntArray_(presetValues);
  ADIntArray *uniqueValidSizes = create_ADIntArray_init();
  for (jint i = 0; i < presetValuesLength; i++) {
    jint currentPresetValue = IOSIntArray_Get(presetValues, i);
    if (currentPresetValue > 0 && [uniqueValidSizes binarySearchWithInt:currentPresetValue] < 0) {
      [uniqueValidSizes addWithInt:currentPresetValue];
    }
  }
  return presetValuesLength == [uniqueValidSizes size] ? presetValues : [uniqueValidSizes toArray];
}

jboolean ADTextView_setupAutoSizeText(ADTextView *self) {
  if ([self supportsAutoSizeText] && self->mAutoSizeTextType_ == ADTextView_AUTO_SIZE_TEXT_TYPE_UNIFORM) {
    if (!self->mHasPresetAutoSizeValues_ || ((IOSIntArray *) nil_chk(self->mAutoSizeTextSizesInPx_))->size_ == 0) {
      jint autoSizeValuesLength = (JreFpToInt(JavaLangMath_floorWithDouble_((self->mAutoSizeMaxTextSizeInPx_ - self->mAutoSizeMinTextSizeInPx_) / self->mAutoSizeStepGranularityInPx_))) + 1;
      IOSIntArray *autoSizeTextSizesInPx = [IOSIntArray arrayWithLength:autoSizeValuesLength];
      for (jint i = 0; i < autoSizeValuesLength; i++) {
        *IOSIntArray_GetRef(autoSizeTextSizesInPx, i) = JavaLangMath_roundWithFloat_(self->mAutoSizeMinTextSizeInPx_ + (i * self->mAutoSizeStepGranularityInPx_));
      }
      JreStrongAssign(&self->mAutoSizeTextSizesInPx_, ADTextView_cleanupAutoSizePresetSizesWithIntArray_(self, autoSizeTextSizesInPx));
    }
    self->mNeedsAutoSizeText_ = true;
  }
  else {
    self->mNeedsAutoSizeText_ = false;
  }
  return self->mNeedsAutoSizeText_;
}

void ADTextView_updateTextColors(ADTextView *self) {
  jboolean inval = false;
  IOSIntArray *drawableState = [self getDrawableState];
  jint color = 0;
  if (self->mTextColor_ != nil) {
    color = [self->mTextColor_ getColorForStateWithIntArray:drawableState withInt:0];
  }
  if (self->mTextColor_ != nil && color != self->mCurTextColor_) {
    self->mCurTextColor_ = color;
    inval = true;
  }
  if (self->mLinkTextColor_ != nil) {
    color = [self->mLinkTextColor_ getColorForStateWithIntArray:drawableState withInt:0];
    if (color != ((ADTextView_TextPaint *) nil_chk(self->mTextPaint_))->linkColor_) {
      self->mTextPaint_->linkColor_ = color;
      inval = true;
    }
  }
  if (self->mHintTextColor_ != nil) {
    color = [self->mHintTextColor_ getColorForStateWithIntArray:drawableState withInt:0];
    if (color != self->mCurHintTextColor_) {
      self->mCurHintTextColor_ = color;
      if ([((NSString *) nil_chk(self->mText_)) java_length] == 0) {
        inval = true;
      }
    }
  }
  if (inval) {
    if (self->mEditor_ != nil) [self->mEditor_ invalidateTextDisplayList];
    [self invalidate];
  }
}

ADLayout_Alignment *ADTextView_getLayoutAlignment(ADTextView *self) {
  ADLayout_Alignment *alignment;
  switch ([self getTextAlignment]) {
    case ADView_TEXT_ALIGNMENT_GRAVITY:
    switch (self->mGravity_ & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) {
      case ADGravity_START:
      alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_NORMAL);
      break;
      case ADGravity_END:
      alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_OPPOSITE);
      break;
      case ADGravity_LEFT:
      alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_LEFT);
      break;
      case ADGravity_RIGHT:
      alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_RIGHT);
      break;
      case ADGravity_CENTER_HORIZONTAL:
      alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_CENTER);
      break;
      default:
      alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_NORMAL);
      break;
    }
    break;
    case ADView_TEXT_ALIGNMENT_TEXT_START:
    alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_NORMAL);
    break;
    case ADView_TEXT_ALIGNMENT_TEXT_END:
    alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_OPPOSITE);
    break;
    case ADView_TEXT_ALIGNMENT_CENTER:
    alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_CENTER);
    break;
    case ADView_TEXT_ALIGNMENT_VIEW_START:
    alignment = ([self getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL) ? JreLoadEnum(ADLayout_Alignment, ALIGN_RIGHT) : JreLoadEnum(ADLayout_Alignment, ALIGN_LEFT);
    break;
    case ADView_TEXT_ALIGNMENT_VIEW_END:
    alignment = ([self getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL) ? JreLoadEnum(ADLayout_Alignment, ALIGN_LEFT) : JreLoadEnum(ADLayout_Alignment, ALIGN_RIGHT);
    break;
    case ADView_TEXT_ALIGNMENT_INHERIT:
    default:
    alignment = JreLoadEnum(ADLayout_Alignment, ALIGN_NORMAL);
    break;
  }
  return alignment;
}

void ADTextView_autoSizeText(ADTextView *self) {
  if (!ADTextView_isAutoSizeEnabled(self)) {
    return;
  }
  if (self->mNeedsAutoSizeText_) {
    if ([self getMeasuredWidth] <= 0 || [self getMeasuredHeight] <= 0) {
      return;
    }
    jint availableWidth = self->mHorizontallyScrolling_ ? JreLoadStatic(ASBaseMeasurableView, VERY_WIDE) : [self getMeasuredWidth] - [self getTotalPaddingLeft] - [self getTotalPaddingRight];
    jint availableHeight = [self getMeasuredHeight] - ADTextView_getExtendedPaddingBottom(self) - ADTextView_getExtendedPaddingTop(self);
    if (availableWidth <= 0 || availableHeight <= 0) {
      return;
    }
    @synchronized(ADTextView_TEMP_RECTF) {
      [((ADRectF *) nil_chk(ADTextView_TEMP_RECTF)) setEmpty];
      ADTextView_TEMP_RECTF->right_ = availableWidth;
      ADTextView_TEMP_RECTF->bottom_ = availableHeight;
      jfloat optimalTextSize = ADTextView_findLargestTextSizeWhichFitsWithADRectF_(self, ADTextView_TEMP_RECTF);
      if (optimalTextSize != [self getTextSize]) {
        [self setTextSizeInternalWithInt:JreLoadStatic(ADTextView_TypedValue, COMPLEX_UNIT_PX) withFloat:optimalTextSize withBoolean:false];
        [self makeNewLayoutWithInt:availableWidth withInt:0 withInt:ADTextView_UNKNOWN_BORING withInt:ADTextView_UNKNOWN_BORING withInt:self->mRight_ - self->mLeft_ - [self getCompoundPaddingLeft] - [self getCompoundPaddingRight] withBoolean:false];
      }
    }
  }
  self->mNeedsAutoSizeText_ = true;
}

jint ADTextView_findLargestTextSizeWhichFitsWithADRectF_(ADTextView *self, ADRectF *availableSpace) {
  jint sizesCount = ((IOSIntArray *) nil_chk(self->mAutoSizeTextSizesInPx_))->size_;
  if (sizesCount == 0) {
    @throw create_JavaLangIllegalStateException_initWithNSString_(@"No available text sizes to choose from.");
  }
  jint bestSizeIndex = 0;
  jint lowIndex = bestSizeIndex + 1;
  jint highIndex = sizesCount - 1;
  jint sizeToTryIndex;
  while (lowIndex <= highIndex) {
    sizeToTryIndex = JreIntDiv((lowIndex + highIndex), 2);
    if ([self suggestedSizeFitsInSpaceWithInt:IOSIntArray_Get(nil_chk(self->mAutoSizeTextSizesInPx_), sizeToTryIndex) withADRectF:availableSpace]) {
      bestSizeIndex = lowIndex;
      lowIndex = sizeToTryIndex + 1;
    }
    else {
      highIndex = sizeToTryIndex - 1;
      bestSizeIndex = highIndex;
    }
  }
  return IOSIntArray_Get(nil_chk(self->mAutoSizeTextSizesInPx_), bestSizeIndex);
}

jboolean ADTextView_isAutoSizeEnabled(ADTextView *self) {
  return [self supportsAutoSizeText] && self->mAutoSizeTextType_ != ADTextView_AUTO_SIZE_TEXT_TYPE_NONE;
}

void ADTextView_initWithASIWidget_(ADTextView *self, id<ASIWidget> widget) {
  ASBaseMeasurableView_initWithASIWidget_(self, widget);
  self->mGravity_ = ADGravity_TOP | ADGravity_START;
  self->mMaximum_ = JavaLangInteger_MAX_VALUE;
  self->mMaxMode_ = ADTextView_LINES;
  self->mMinimum_ = 0;
  self->mMinMode_ = ADTextView_LINES;
  self->mMaxWidth_ = JavaLangInteger_MAX_VALUE;
  self->mMaxWidthMode_ = ADTextView_PIXELS;
  self->mMinWidth_TextView_ = 0;
  self->mMinWidthMode_ = ADTextView_PIXELS;
  self->mAutoSizeTextType_ = ADTextView_AUTO_SIZE_TEXT_TYPE_NONE;
  self->mNeedsAutoSizeText_ = false;
  self->mAutoSizeStepGranularityInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  self->mAutoSizeMinTextSizeInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  self->mAutoSizeMaxTextSizeInPx_ = ADTextView_UNSET_AUTO_SIZE_UNIFORM_CONFIGURATION_VALUE;
  JreStrongAssign(&self->mAutoSizeTextSizesInPx_, JreLoadStatic(ADEmptyArray, INT));
  self->mHasPresetAutoSizeValues_ = false;
  JreStrongAssign(&self->mText_, @"");
  JreStrongAssignAndConsume(&self->mTextPaint_, new_ADTextView_TextPaint_initWithADTextView_(self));
}

jint ADTextView_getExtendedPaddingBottom(ADTextView *self) {
  return [self getCompoundPaddingBottom];
}

jint ADTextView_getExtendedPaddingTop(ADTextView *self) {
  return [self getCompoundPaddingTop];
}

void ADTextView_invalidateDrawableWithADDrawable_(ADTextView *self, ADDrawable *dr) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextView)

@implementation ADTextView_OnEditorActionListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onEditorActionWithADTextView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onEditorAction", "LADTextView;ILADKeyEvent;", "LADTextView;" };
  static const J2ObjcClassInfo _ADTextView_OnEditorActionListener = { "OnEditorActionListener", "r.android.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADTextView_OnEditorActionListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADTextView_OnEditorActionListener)

J2OBJC_INITIALIZED_DEFN(ADTextView_BufferType)

ADTextView_BufferType *ADTextView_BufferType_values_[3];

@implementation ADTextView_BufferType

+ (IOSObjectArray *)values {
  return ADTextView_BufferType_values();
}

+ (ADTextView_BufferType *)valueOfWithNSString:(NSString *)name {
  return ADTextView_BufferType_valueOfWithNSString_(name);
}

- (ADTextView_BufferType_Enum)toNSEnum {
  return (ADTextView_BufferType_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADTextView_BufferType;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADTextView_BufferType;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NORMAL", "LADTextView_BufferType;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "SPANNABLE", "LADTextView_BufferType;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "EDITABLE", "LADTextView_BufferType;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADTextView_BufferType, NORMAL), &JreEnum(ADTextView_BufferType, SPANNABLE), &JreEnum(ADTextView_BufferType, EDITABLE), "LADTextView;", "Ljava/lang/Enum<Lr/android/widget/TextView$BufferType;>;" };
  static const J2ObjcClassInfo _ADTextView_BufferType = { "BufferType", "r.android.widget", ptrTable, methods, fields, 7, 0x4019, 2, 3, 5, -1, -1, 6, -1 };
  return &_ADTextView_BufferType;
}

+ (void)initialize {
  if (self == [ADTextView_BufferType class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      ((void)(ADTextView_BufferType_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADTextView_BufferType_initWithNSString_withInt_(e, JreEnumConstantName(ADTextView_BufferType_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADTextView_BufferType)
  }
}

@end

void ADTextView_BufferType_initWithNSString_withInt_(ADTextView_BufferType *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADTextView_BufferType_values() {
  ADTextView_BufferType_initialize();
  return [IOSObjectArray arrayWithObjects:ADTextView_BufferType_values_ count:3 type:ADTextView_BufferType_class_()];
}

ADTextView_BufferType *ADTextView_BufferType_valueOfWithNSString_(NSString *name) {
  ADTextView_BufferType_initialize();
  for (int i = 0; i < 3; i++) {
    ADTextView_BufferType *e = ADTextView_BufferType_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADTextView_BufferType *ADTextView_BufferType_fromOrdinal(NSUInteger ordinal) {
  ADTextView_BufferType_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return ADTextView_BufferType_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextView_BufferType)

jint ADTextView_TypedValue_COMPLEX_UNIT_PX = 0;

@implementation ADTextView_TypedValue

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADTextView_TypedValue_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jfloat)applyDimensionWithInt:(jint)unit
                        withInt:(jint)i
           withADDisplayMetrics:(ADDisplayMetrics *)displayMetrics {
  return ADTextView_TypedValue_applyDimensionWithInt_withInt_withADDisplayMetrics_(unit, i, displayMetrics);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyDimensionWithInt:withInt:withADDisplayMetrics:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "COMPLEX_UNIT_PX", "I", .constantValue.asLong = 0, 0x9, -1, 2, -1, -1 },
  };
  static const void *ptrTable[] = { "applyDimension", "IILADDisplayMetrics;", &ADTextView_TypedValue_COMPLEX_UNIT_PX, "LADTextView;" };
  static const J2ObjcClassInfo _ADTextView_TypedValue = { "TypedValue", "r.android.widget", ptrTable, methods, fields, 7, 0x8, 2, 1, 3, -1, -1, -1, -1 };
  return &_ADTextView_TypedValue;
}

@end

void ADTextView_TypedValue_init(ADTextView_TypedValue *self) {
  NSObject_init(self);
}

ADTextView_TypedValue *new_ADTextView_TypedValue_init() {
  J2OBJC_NEW_IMPL(ADTextView_TypedValue, init)
}

ADTextView_TypedValue *create_ADTextView_TypedValue_init() {
  J2OBJC_CREATE_IMPL(ADTextView_TypedValue, init)
}

jfloat ADTextView_TypedValue_applyDimensionWithInt_withInt_withADDisplayMetrics_(jint unit, jint i, ADDisplayMetrics *displayMetrics) {
  ADTextView_TypedValue_initialize();
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextView_TypedValue)

@implementation ADTextView_Editor

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(invalidateTextDisplayList);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADTextView;" };
  static const J2ObjcClassInfo _ADTextView_Editor = { "Editor", "r.android.widget", ptrTable, methods, NULL, 7, 0x608, 1, 0, 0, -1, -1, -1, -1 };
  return &_ADTextView_Editor;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADTextView_Editor)

@implementation ADTextView_TextPaint

- (instancetype)initWithADTextView:(ADTextView *)outer$ {
  ADTextView_TextPaint_initWithADTextView_(self, outer$);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADTextView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "linkColor_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADTextView;" };
  static const J2ObjcClassInfo _ADTextView_TextPaint = { "TextPaint", "r.android.widget", ptrTable, methods, fields, 7, 0x1, 1, 1, 0, -1, -1, -1, -1 };
  return &_ADTextView_TextPaint;
}

@end

void ADTextView_TextPaint_initWithADTextView_(ADTextView_TextPaint *self, ADTextView *outer$) {
  NSObject_init(self);
}

ADTextView_TextPaint *new_ADTextView_TextPaint_initWithADTextView_(ADTextView *outer$) {
  J2OBJC_NEW_IMPL(ADTextView_TextPaint, initWithADTextView_, outer$)
}

ADTextView_TextPaint *create_ADTextView_TextPaint_initWithADTextView_(ADTextView *outer$) {
  J2OBJC_CREATE_IMPL(ADTextView_TextPaint, initWithADTextView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADTextView_TextPaint)

J2OBJC_INITIALIZED_DEFN(ADTextView_Drawables)

id<JavaUtilList> ADTextView_Drawables_mShowing;

@implementation ADTextView_Drawables

+ (const J2ObjcClassInfo *)__metadata {
  static const J2ObjcFieldInfo fields[] = {
    { "mShowing", "LJavaUtilList;", .constantValue.asLong = 0, 0x19, -1, 0, 1, -1 },
  };
  static const void *ptrTable[] = { &ADTextView_Drawables_mShowing, "Ljava/util/List<Lr/android/graphics/drawable/Drawable;>;", "LADTextView;" };
  static const J2ObjcClassInfo _ADTextView_Drawables = { "Drawables", "r.android.widget", ptrTable, NULL, fields, 7, 0x608, 0, 1, 2, -1, -1, -1, -1 };
  return &_ADTextView_Drawables;
}

+ (void)initialize {
  if (self == [ADTextView_Drawables class]) {
    JreStrongAssign(&ADTextView_Drawables_mShowing, nil);
    J2OBJC_SET_INITIALIZED(ADTextView_Drawables)
  }
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADTextView_Drawables)
