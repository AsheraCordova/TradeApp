//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\WidgetAttributeMap.java
//

#include "J2ObjC_source.h"
#include "WidgetAttribute.h"
#include "WidgetAttributeMap.h"
#include "WidgetAttributeMapFilter.h"
#include "WidgetAttributeValue.h"
#include "java/lang/Integer.h"
#include "java/util/ArrayList.h"
#include "java/util/Comparator.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/TreeMap.h"
#include "java/util/function/Function.h"
#include "java/util/function/ToDoubleFunction.h"
#include "java/util/function/ToIntFunction.h"
#include "java/util/function/ToLongFunction.h"

@class JavaUtilHashMap;
@protocol JavaUtilComparator;
@protocol JavaUtilFunctionFunction;
@protocol JavaUtilFunctionToDoubleFunction;
@protocol JavaUtilFunctionToIntFunction;
@protocol JavaUtilFunctionToLongFunction;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASWidgetAttributeMap () {
 @public
  id<ASWidgetAttributeMapFilter> filter_;
  ASWidgetAttributeMap *parent_;
  JavaUtilHashMap *keyMap_;
  JavaUtilHashMap *orderMap_;
}

@end

J2OBJC_FIELD_SETTER(ASWidgetAttributeMap, filter_, id<ASWidgetAttributeMapFilter>)
J2OBJC_FIELD_SETTER(ASWidgetAttributeMap, parent_, ASWidgetAttributeMap *)
J2OBJC_FIELD_SETTER(ASWidgetAttributeMap, keyMap_, JavaUtilHashMap *)
J2OBJC_FIELD_SETTER(ASWidgetAttributeMap, orderMap_, JavaUtilHashMap *)

@interface ASWidgetAttributeMap_1 : NSObject < JavaUtilComparator > {
 @public
  JavaUtilHashMap *val$orderMap_;
}

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)capture$0;

- (jint)compareWithId:(id)o1
               withId:(id)o2;

@end

J2OBJC_EMPTY_STATIC_INIT(ASWidgetAttributeMap_1)

__attribute__((unused)) static void ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(ASWidgetAttributeMap_1 *self, JavaUtilHashMap *capture$0);

__attribute__((unused)) static ASWidgetAttributeMap_1 *new_ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(JavaUtilHashMap *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASWidgetAttributeMap_1 *create_ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(JavaUtilHashMap *capture$0);

@implementation ASWidgetAttributeMap

- (ASWidgetAttributeMap *)getParent {
  return parent_;
}

- (void)setParentWithASWidgetAttributeMap:(ASWidgetAttributeMap *)parent {
  JreStrongAssign(&self->parent_, parent);
}

- (id<ASWidgetAttributeMapFilter>)getFilter {
  return filter_;
}

- (void)setFilterWithASWidgetAttributeMapFilter:(id<ASWidgetAttributeMapFilter>)filter {
  JreStrongAssign(&self->filter_, filter);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASWidgetAttributeMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)orderMap {
  ASWidgetAttributeMap_initWithJavaUtilHashMap_(self, orderMap);
  return self;
}

- (id<JavaUtilList>)putWithId:(ASWidgetAttribute *)key
                       withId:(id<JavaUtilList>)value {
  if (key == nil) {
    return nil;
  }
  [((JavaUtilHashMap *) nil_chk(keyMap_)) putWithId:[key getAttributeName] withId:key];
  [((JavaUtilHashMap *) nil_chk(orderMap_)) putWithId:[((NSString *) nil_chk([key getAttributeName])) lowercaseString] withId:JavaLangInteger_valueOfWithInt_([key getOrder])];
  return [super putWithId:key withId:value];
}

- (void)putWithASWidgetAttribute:(ASWidgetAttribute *)key
      withASWidgetAttributeValue:(ASWidgetAttributeValue *)value {
  if (key != nil) {
    id<JavaUtilList> values = JreRetainedLocalValue([self getWithId:key]);
    if (values == nil) {
      [self putWithId:key withId:create_JavaUtilArrayList_init()];
    }
    [((id<JavaUtilList>) nil_chk([self getWithId:key])) addWithId:value];
  }
}

- (ASWidgetAttribute *)getWidgetAttributeWithNSString:(NSString *)key {
  return [((JavaUtilHashMap *) nil_chk(keyMap_)) getWithId:key];
}

- (void)dealloc {
  RELEASE_(filter_);
  RELEASE_(parent_);
  RELEASE_(keyMap_);
  RELEASE_(orderMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LASWidgetAttributeMap;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttributeMapFilter;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, 5, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, 6, 7, -1, 8, -1, -1 },
    { NULL, "V", 0x1, 6, 9, -1, -1, -1, -1 },
    { NULL, "LASWidgetAttribute;", 0x1, 10, 11, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getParent);
  methods[1].selector = @selector(setParentWithASWidgetAttributeMap:);
  methods[2].selector = @selector(getFilter);
  methods[3].selector = @selector(setFilterWithASWidgetAttributeMapFilter:);
  methods[4].selector = @selector(init);
  methods[5].selector = @selector(initWithJavaUtilHashMap:);
  methods[6].selector = @selector(putWithId:withId:);
  methods[7].selector = @selector(putWithASWidgetAttribute:withASWidgetAttributeValue:);
  methods[8].selector = @selector(getWidgetAttributeWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "filter_", "LASWidgetAttributeMapFilter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parent_", "LASWidgetAttributeMap;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "keyMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 12, -1 },
    { "orderMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x2, -1, -1, 13, -1 },
  };
  static const void *ptrTable[] = { "setParent", "LASWidgetAttributeMap;", "setFilter", "LASWidgetAttributeMapFilter;", "LJavaUtilHashMap;", "(Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;)V", "put", "LASWidgetAttribute;LJavaUtilList;", "(Lcom/ashera/widget/WidgetAttribute;Ljava/util/List<Lcom/ashera/widget/WidgetAttributeValue;>;)Ljava/util/List<Lcom/ashera/widget/WidgetAttributeValue;>;", "LASWidgetAttribute;LASWidgetAttributeValue;", "getWidgetAttribute", "LNSString;", "Ljava/util/HashMap<Ljava/lang/String;Lcom/ashera/widget/WidgetAttribute;>;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/TreeMap<Lcom/ashera/widget/WidgetAttribute;Ljava/util/List<Lcom/ashera/widget/WidgetAttributeValue;>;>;" };
  static const J2ObjcClassInfo _ASWidgetAttributeMap = { "WidgetAttributeMap", "com.ashera.widget", ptrTable, methods, fields, 7, 0x1, 9, 4, -1, -1, -1, 14, -1 };
  return &_ASWidgetAttributeMap;
}

@end

void ASWidgetAttributeMap_init(ASWidgetAttributeMap *self) {
  ASWidgetAttributeMap_initWithJavaUtilHashMap_(self, create_JavaUtilHashMap_init());
}

ASWidgetAttributeMap *new_ASWidgetAttributeMap_init() {
  J2OBJC_NEW_IMPL(ASWidgetAttributeMap, init)
}

ASWidgetAttributeMap *create_ASWidgetAttributeMap_init() {
  J2OBJC_CREATE_IMPL(ASWidgetAttributeMap, init)
}

void ASWidgetAttributeMap_initWithJavaUtilHashMap_(ASWidgetAttributeMap *self, JavaUtilHashMap *orderMap) {
  JavaUtilTreeMap_initWithJavaUtilComparator_(self, create_ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(orderMap));
  JreStrongAssignAndConsume(&self->keyMap_, new_JavaUtilHashMap_init());
  JreStrongAssign(&self->orderMap_, orderMap);
}

ASWidgetAttributeMap *new_ASWidgetAttributeMap_initWithJavaUtilHashMap_(JavaUtilHashMap *orderMap) {
  J2OBJC_NEW_IMPL(ASWidgetAttributeMap, initWithJavaUtilHashMap_, orderMap)
}

ASWidgetAttributeMap *create_ASWidgetAttributeMap_initWithJavaUtilHashMap_(JavaUtilHashMap *orderMap) {
  J2OBJC_CREATE_IMPL(ASWidgetAttributeMap, initWithJavaUtilHashMap_, orderMap)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASWidgetAttributeMap)

@implementation ASWidgetAttributeMap_1

- (instancetype)initWithJavaUtilHashMap:(JavaUtilHashMap *)capture$0 {
  ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(self, capture$0);
  return self;
}

- (jint)compareWithId:(id)o1
               withId:(id)o2 {
  if ([o1 isKindOfClass:[ASWidgetAttribute class]] && [o2 isKindOfClass:[ASWidgetAttribute class]]) {
    NSString *key1 = JreStrcat("I$", [((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o1, [ASWidgetAttribute class])))) getOrder], [((NSString *) nil_chk([((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o1, [ASWidgetAttribute class])))) getAttributeName])) lowercaseString]);
    NSString *key2 = JreStrcat("I$", [((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o2, [ASWidgetAttribute class])))) getOrder], [((NSString *) nil_chk([((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o2, [ASWidgetAttribute class])))) getAttributeName])) lowercaseString]);
    return [key1 compareToWithId:key2];
  }
  if ([o1 isKindOfClass:[NSString class]] && [o2 isKindOfClass:[ASWidgetAttribute class]]) {
    NSString *key1 = JreStrcat("@$", [((JavaUtilHashMap *) nil_chk(val$orderMap_)) getWithId:[((NSString *) nil_chk(((NSString *) cast_chk(o1, [NSString class])))) lowercaseString]], [((NSString *) nil_chk(((NSString *) cast_chk(o1, [NSString class])))) lowercaseString]);
    NSString *key2 = JreStrcat("I$", [((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o2, [ASWidgetAttribute class])))) getOrder], [((NSString *) nil_chk([((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o2, [ASWidgetAttribute class])))) getAttributeName])) lowercaseString]);
    return [key1 compareToWithId:key2];
  }
  if ([o1 isKindOfClass:[ASWidgetAttribute class]] && [o2 isKindOfClass:[NSString class]]) {
    NSString *key1 = JreStrcat("I$", [((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o1, [ASWidgetAttribute class])))) getOrder], [((NSString *) nil_chk([((ASWidgetAttribute *) nil_chk(((ASWidgetAttribute *) cast_chk(o1, [ASWidgetAttribute class])))) getAttributeName])) lowercaseString]);
    NSString *key2 = JreStrcat("@$", [((JavaUtilHashMap *) nil_chk(val$orderMap_)) getWithId:[((NSString *) nil_chk(((NSString *) cast_chk(o2, [NSString class])))) lowercaseString]], [((NSString *) nil_chk(((NSString *) cast_chk(o2, [NSString class])))) lowercaseString]);
    return [key1 compareToWithId:key2];
  }
  return 0;
}

- (id<JavaUtilComparator>)reversed {
  return JavaUtilComparator_reversed(self);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilComparator:(id<JavaUtilComparator>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilComparator_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0
                                             withJavaUtilComparator:(id<JavaUtilComparator>)arg1 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_withJavaUtilComparator_(self, arg0, arg1);
}

- (id<JavaUtilComparator>)thenComparingWithJavaUtilFunctionFunction:(id<JavaUtilFunctionFunction>)arg0 {
  return JavaUtilComparator_thenComparingWithJavaUtilFunctionFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingIntWithJavaUtilFunctionToIntFunction:(id<JavaUtilFunctionToIntFunction>)arg0 {
  return JavaUtilComparator_thenComparingIntWithJavaUtilFunctionToIntFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingLongWithJavaUtilFunctionToLongFunction:(id<JavaUtilFunctionToLongFunction>)arg0 {
  return JavaUtilComparator_thenComparingLongWithJavaUtilFunctionToLongFunction_(self, arg0);
}

- (id<JavaUtilComparator>)thenComparingDoubleWithJavaUtilFunctionToDoubleFunction:(id<JavaUtilFunctionToDoubleFunction>)arg0 {
  return JavaUtilComparator_thenComparingDoubleWithJavaUtilFunctionToDoubleFunction_(self, arg0);
}

- (void)dealloc {
  RELEASE_(val$orderMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithJavaUtilHashMap:);
  methods[1].selector = @selector(compareWithId:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$orderMap_", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0x1012, -1, -1, 3, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilHashMap;", "compare", "LNSObject;LNSObject;", "Ljava/util/HashMap<Ljava/lang/String;Ljava/lang/Integer;>;", "LASWidgetAttributeMap;", "initWithJavaUtilHashMap:", "Ljava/lang/Object;Ljava/util/Comparator<Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASWidgetAttributeMap_1 = { "", "com.ashera.widget", ptrTable, methods, fields, 7, 0x8010, 2, 1, 4, -1, 5, 6, -1 };
  return &_ASWidgetAttributeMap_1;
}

@end

void ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(ASWidgetAttributeMap_1 *self, JavaUtilHashMap *capture$0) {
  JreStrongAssign(&self->val$orderMap_, capture$0);
  NSObject_init(self);
}

ASWidgetAttributeMap_1 *new_ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(JavaUtilHashMap *capture$0) {
  J2OBJC_NEW_IMPL(ASWidgetAttributeMap_1, initWithJavaUtilHashMap_, capture$0)
}

ASWidgetAttributeMap_1 *create_ASWidgetAttributeMap_1_initWithJavaUtilHashMap_(JavaUtilHashMap *capture$0) {
  J2OBJC_CREATE_IMPL(ASWidgetAttributeMap_1, initWithJavaUtilHashMap_, capture$0)
}
