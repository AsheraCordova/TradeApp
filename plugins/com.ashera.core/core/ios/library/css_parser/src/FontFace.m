//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\css_parser\src\com\ashera\parser\css\FontFace.java
//

#include "FontFace.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@protocol JavaUtilMap;


@interface CSSFontFace () {
 @public
  id<JavaUtilMap> fontConfig_;
}

@end

J2OBJC_FIELD_SETTER(CSSFontFace, fontConfig_, id<JavaUtilMap>)

@implementation CSSFontFace

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  CSSFontFace_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getFontConfig {
  return fontConfig_;
}

- (void)setFontConfigWithJavaUtilMap:(id<JavaUtilMap>)fontConfig {
  JreStrongAssign(&self->fontConfig_, fontConfig);
}

- (void)dealloc {
  RELEASE_(fontConfig_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getFontConfig);
  methods[2].selector = @selector(setFontConfigWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "fontConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 4, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "setFontConfig", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;)V", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _CSSFontFace = { "FontFace", "com.ashera.parser.css", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_CSSFontFace;
}

@end

void CSSFontFace_init(CSSFontFace *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->fontConfig_, new_JavaUtilHashMap_init());
}

CSSFontFace *new_CSSFontFace_init() {
  J2OBJC_NEW_IMPL(CSSFontFace, init)
}

CSSFontFace *create_CSSFontFace_init() {
  J2OBJC_CREATE_IMPL(CSSFontFace, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(CSSFontFace)
