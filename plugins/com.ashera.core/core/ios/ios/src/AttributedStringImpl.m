//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCorePlugin\src\main\java\com\ashera\core\AttributedStringImpl.java
//

#include "AttributedStringImpl.h"
#include "Drawable.h"
#include "FontDescriptor.h"
#include "IActivity.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "java/lang/Float.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

#include <UIKit/UIKit.h>
#import <CoreText/CoreText.h>

@protocol JavaUtilMap;


@interface ASAttributedStringImpl () {
 @public
  id attributedString_;
  id<ASIFragment> fragment_;
  id<JavaUtilMap> textSizes_;
  NSString *text_;
}

- (jfloat)getSystemFontSize;

@end

J2OBJC_FIELD_SETTER(ASAttributedStringImpl, attributedString_, id)
J2OBJC_FIELD_SETTER(ASAttributedStringImpl, fragment_, id<ASIFragment>)
J2OBJC_FIELD_SETTER(ASAttributedStringImpl, textSizes_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASAttributedStringImpl, text_, NSString *)

__attribute__((unused)) static jfloat ASAttributedStringImpl_getSystemFontSize(ASAttributedStringImpl *self);

@implementation ASAttributedStringImpl

- (instancetype)initWithASIFragment:(id<ASIFragment>)fragment
                       withNSString:(NSString *)text {
  ASAttributedStringImpl_initWithASIFragment_withNSString_(self, fragment, text);
  return self;
}

- (id)get {
  return attributedString_;
}

- (void)init__WithInt:(jint)start
              withInt:(jint)end {
}

- (void)init__WithNSString:(NSString *)text {
  attributedString_ = [[NSMutableAttributedString alloc]
  initWithString:text];
}

- (void)applyUnderLineWithInt:(jint)start
                      withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_) addAttributes: @{NSUnderlineStyleAttributeName:[NSNumber numberWithInteger:NSUnderlineStyleSingle]} range:NSMakeRange(start,end-start)];
}

- (void)applyColorWithId:(id)color
                 withInt:(jint)start
                 withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_) addAttributes: @{NSForegroundColorAttributeName:(UIColor*)color} range:NSMakeRange(start,end-start)];
}

- (void)applyStrikeThroughWithInt:(jint)start
                          withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_) addAttributes: @{NSStrikethroughStyleAttributeName:[NSNumber numberWithInteger:NSUnderlineStyleSingle]} range:NSMakeRange(start,end-start)];
}

- (void)applyFontWithId:(id)typeFace
              withFloat:(jfloat)textSize
                withInt:(jint)style
                withInt:(jint)start
                withInt:(jint)end {
  id<JavaUtilMap> fontDescriptors = (id<JavaUtilMap>) cast_check(typeFace, JavaUtilMap_class_());
  if (fontDescriptors != nil) {
    NSString *weight = @"400";
    if ((style & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((style & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [fontDescriptors getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    if (textSize == 0) {
      textSize = ASAttributedStringImpl_getSystemFontSize(self);
    }
    else {
      textSize = [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk(fragment_)) getRootActivity])) getScaleFactor] * textSize;
    }
    NSString *key = JreStrcat("ICI", start, '_', end);
    (void) [((id<JavaUtilMap>) nil_chk(textSizes_)) putWithId:key withId:JavaLangFloat_valueOfWithFloat_(textSize)];
    id font = [self getFontWithNSString:[((ASFontDescriptor *) nil_chk(fontDescriptor)) getName] withFloat:textSize];
    (void) [self applyFontWithId:font withFloat:textSize withBoolean:(style & 1) != 0 withBoolean:(style & 2) != 0 withInt:start withInt:end];
  }
}

- (id)applyFontWithId:(id)font
            withFloat:(jfloat)textSize
          withBoolean:(jboolean)isBold
          withBoolean:(jboolean)isItalics
              withInt:(jint)start
              withInt:(jint)end {
  if (isBold) {
    UIFontDescriptor* fontD = [((UIFont*) font).fontDescriptor
    fontDescriptorWithSymbolicTraits:UIFontDescriptorTraitBold
    | ((UIFont*) font).fontDescriptor.symbolicTraits];
    if (fontD != nil) {
      font = [UIFont fontWithDescriptor:fontD size:0];
    }
  }
  if (isItalics) {
    UIFontDescriptor* fontD = [((UIFont*) font).fontDescriptor
    fontDescriptorWithSymbolicTraits:UIFontDescriptorTraitItalic
    | ((UIFont*) font).fontDescriptor.symbolicTraits];
    if (fontD != nil) {
      font = [UIFont fontWithDescriptor:fontD size:0];
    }
  }
  [((NSMutableAttributedString*)attributedString_) addAttributes: @{NSFontAttributeName:(UIFont*) font} range:NSMakeRange(start,end-start)];
  return font;
}

- (void)applyVerticalAlignWithNSString:(NSString *)verticalAlign
                               withInt:(jint)start
                               withInt:(jint)end {
  NSString *key = JreStrcat("ICI", start, '_', end);
  JavaLangFloat *textSize = [((id<JavaUtilMap>) nil_chk(textSizes_)) getWithId:key];
  if (textSize == nil || [textSize floatValue] == 0) {
    textSize = JavaLangFloat_valueOfWithFloat_(ASAttributedStringImpl_getSystemFontSize(self));
  }
  if ([((NSString *) nil_chk(verticalAlign)) isEqual:@"super"]) {
    [self applySuperscriptWithFloat:[textSize floatValue] withInt:start withInt:end];
  }
  else if ([verticalAlign isEqual:@"sub"]) {
    [self applySubscriptWithFloat:[textSize floatValue] withInt:start withInt:end];
  }
}

- (void)applySuperscriptWithFloat:(jfloat)textSize
                          withInt:(jint)start
                          withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_)  addAttribute:NSBaselineOffsetAttributeName
  value:@(textSize/2) range:NSMakeRange(start, end - start)];
}

- (void)applySubscriptWithFloat:(jfloat)textSize
                        withInt:(jint)start
                        withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_)  addAttribute:NSBaselineOffsetAttributeName
  value:@(-textSize/2) range:NSMakeRange(start, end - start)];
}

- (jfloat)getSystemFontSize {
  return ASAttributedStringImpl_getSystemFontSize(self);
}

- (id)getFontWithNSString:(NSString *)typeFace
                withFloat:(jfloat)textSize {
  UIFont* font = nil;
  if (typeFace == nil) {
    font = [UIFont systemFontOfSize:textSize];
  } else {
    font = [UIFont fontWithName:typeFace size:textSize];
  }
  return font;
}

- (void)applyLineHeightWithFloat:(jfloat)height
                         withInt:(jint)start
                         withInt:(jint)end {
  NSMutableParagraphStyle *style = [[NSMutableParagraphStyle alloc] init];
  [style setLineSpacing:height];
  [((NSMutableAttributedString*)attributedString_)  addAttribute:NSParagraphStyleAttributeName
  value:style
  range:NSMakeRange(start, end - start)];
}

- (void)applyTextAlignWithNSString:(NSString *)value
                           withInt:(jint)start
                           withInt:(jint)end {
  if ([((NSString *) nil_chk(value)) isEqual:@"center"]) {
    [self applyTextAlignCenterWithInt:start withInt:end];
  }
  else if ([value isEqual:@"right"]) {
    [self applyTextAlignRightWithInt:start withInt:end];
  }
  else {
    [self applyTextAlignLeftWithInt:start withInt:end];
  }
}

- (void)applyTextAlignCenterWithInt:(jint)start
                            withInt:(jint)end {
  NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
  [paragraphStyle setAlignment:NSTextAlignmentCenter];
  [((NSMutableAttributedString*)attributedString_)  addAttribute:NSParagraphStyleAttributeName
  value:paragraphStyle range:NSMakeRange(start, end - start)];
}

- (void)applyTextAlignLeftWithInt:(jint)start
                          withInt:(jint)end {
  NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
  [paragraphStyle setAlignment:NSTextAlignmentLeft];
  [((NSMutableAttributedString*)attributedString_)  addAttribute:NSParagraphStyleAttributeName
  value:paragraphStyle range:NSMakeRange(start, end - start)];
}

- (void)applyTextAlignRightWithInt:(jint)start
                           withInt:(jint)end {
  NSMutableParagraphStyle *paragraphStyle = [[NSMutableParagraphStyle alloc] init];
  [paragraphStyle setAlignment:NSTextAlignmentRight];
  [((NSMutableAttributedString*)attributedString_)  addAttribute:NSParagraphStyleAttributeName
  value:paragraphStyle range:NSMakeRange(start, end - start)];
}

- (void)applyBackgroundColorWithId:(id)color
                           withInt:(jint)start
                           withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_) addAttributes: @{NSBackgroundColorAttributeName:(UIColor*)color} range:NSMakeRange(start,end-start)];
}

- (void)applyUrlWithNSString:(NSString *)href
                      withId:(id)color
                     withInt:(jint)start
                     withInt:(jint)end {
  [((NSMutableAttributedString*)attributedString_) addAttribute: NSLinkAttributeName value: href range: NSMakeRange(start, end - start)];
}

- (void)applyImgWithId:(id)image
               withInt:(jint)start
               withInt:(jint)end {
  id drawable = [((ADDrawable *) nil_chk(((ADDrawable *) cast_chk(image, [ADDrawable class])))) getDrawable];
  [self nativeApplyImgWithId:drawable withInt:start withInt:end];
}

- (void)nativeApplyImgWithId:(id)image
                     withInt:(jint)start
                     withInt:(jint)end {
  NSMutableAttributedString *attributedString = ((NSMutableAttributedString*)attributedString_);
  NSTextAttachment *textAttachment = [[NSTextAttachment alloc] init];
  textAttachment.image = (UIImage*) image;
  NSAttributedString *attrStringWithImage = [NSAttributedString attributedStringWithAttachment:textAttachment];
  [attributedString replaceCharactersInRange:NSMakeRange(start, end - start) withAttributedString:attrStringWithImage];
}

- (void)applyBulletWithInt:(jint)indent
                   withInt:(jint)spacing
                   withInt:(jint)start
                   withInt:(jint)end {
  NSMutableParagraphStyle *const bulletParagraphStyle = [[NSParagraphStyle defaultParagraphStyle] mutableCopy];
  bulletParagraphStyle.headIndent = indent + spacing;
  bulletParagraphStyle.firstLineHeadIndent = indent;
  NSTextTab *listTab = [[NSTextTab alloc] initWithTextAlignment:NSTextAlignmentNatural location:indent+spacing options:@{}];
  bulletParagraphStyle.tabStops = @[listTab];
  
  [attributedString_ addAttributes:@{NSParagraphStyleAttributeName: bulletParagraphStyle} range:NSMakeRange(start, end - start)];
}

- (NSString *)getText {
  return text_;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 8, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 15, 14, -1, -1, -1, -1 },
    { NULL, "F", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 18, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 23, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 24, 25, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 27, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 28, 29, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIFragment:withNSString:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(init__WithInt:withInt:);
  methods[3].selector = @selector(init__WithNSString:);
  methods[4].selector = @selector(applyUnderLineWithInt:withInt:);
  methods[5].selector = @selector(applyColorWithId:withInt:withInt:);
  methods[6].selector = @selector(applyStrikeThroughWithInt:withInt:);
  methods[7].selector = @selector(applyFontWithId:withFloat:withInt:withInt:withInt:);
  methods[8].selector = @selector(applyFontWithId:withFloat:withBoolean:withBoolean:withInt:withInt:);
  methods[9].selector = @selector(applyVerticalAlignWithNSString:withInt:withInt:);
  methods[10].selector = @selector(applySuperscriptWithFloat:withInt:withInt:);
  methods[11].selector = @selector(applySubscriptWithFloat:withInt:withInt:);
  methods[12].selector = @selector(getSystemFontSize);
  methods[13].selector = @selector(getFontWithNSString:withFloat:);
  methods[14].selector = @selector(applyLineHeightWithFloat:withInt:withInt:);
  methods[15].selector = @selector(applyTextAlignWithNSString:withInt:withInt:);
  methods[16].selector = @selector(applyTextAlignCenterWithInt:withInt:);
  methods[17].selector = @selector(applyTextAlignLeftWithInt:withInt:);
  methods[18].selector = @selector(applyTextAlignRightWithInt:withInt:);
  methods[19].selector = @selector(applyBackgroundColorWithId:withInt:withInt:);
  methods[20].selector = @selector(applyUrlWithNSString:withId:withInt:withInt:);
  methods[21].selector = @selector(applyImgWithId:withInt:withInt:);
  methods[22].selector = @selector(nativeApplyImgWithId:withInt:withInt:);
  methods[23].selector = @selector(applyBulletWithInt:withInt:withInt:withInt:);
  methods[24].selector = @selector(getText);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "attributedString_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fragment_", "LASIFragment;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textSizes_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 30, -1 },
    { "text_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIFragment;LNSString;", "init", "II", "LNSString;", "applyUnderLine", "applyColor", "LNSObject;II", "applyStrikeThrough", "applyFont", "LNSObject;FIII", "LNSObject;FZZII", "applyVerticalAlign", "LNSString;II", "applySuperscript", "FII", "applySubscript", "getFont", "LNSString;F", "applyLineHeight", "applyTextAlign", "applyTextAlignCenter", "applyTextAlignLeft", "applyTextAlignRight", "applyBackgroundColor", "applyUrl", "LNSString;LNSObject;II", "applyImg", "nativeApplyImg", "applyBullet", "IIII", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Float;>;" };
  static const J2ObjcClassInfo _ASAttributedStringImpl = { "AttributedStringImpl", "com.ashera.core", ptrTable, methods, fields, 7, 0x1, 25, 4, -1, -1, -1, -1, -1 };
  return &_ASAttributedStringImpl;
}

@end

void ASAttributedStringImpl_initWithASIFragment_withNSString_(ASAttributedStringImpl *self, id<ASIFragment> fragment, NSString *text) {
  NSObject_init(self);
  self->textSizes_ = new_JavaUtilHashMap_init();
  self->fragment_ = fragment;
  self->text_ = text;
  [self init__WithNSString:text];
}

ASAttributedStringImpl *new_ASAttributedStringImpl_initWithASIFragment_withNSString_(id<ASIFragment> fragment, NSString *text) {
  J2OBJC_NEW_IMPL(ASAttributedStringImpl, initWithASIFragment_withNSString_, fragment, text)
}

ASAttributedStringImpl *create_ASAttributedStringImpl_initWithASIFragment_withNSString_(id<ASIFragment> fragment, NSString *text) {
  J2OBJC_CREATE_IMPL(ASAttributedStringImpl, initWithASIFragment_withNSString_, fragment, text)
}

jfloat ASAttributedStringImpl_getSystemFontSize(ASAttributedStringImpl *self) {
  return [UIFont labelFontSize];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAttributedStringImpl)
