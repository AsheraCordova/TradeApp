//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\Gravity.java
//

#include "Gravity.h"
#include "J2ObjC_source.h"
#include "Rect.h"
#include "View.h"


inline jint ADGravity_get_AXIS_PULL_AFTER__AXIS_X_SHIFT(void);
#define ADGravity_AXIS_PULL_AFTER__AXIS_X_SHIFT 4
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_PULL_AFTER__AXIS_X_SHIFT, jint)

inline jint ADGravity_get_XIS_PULL_BEFORE__AXIS_X_SHIFT(void);
#define ADGravity_XIS_PULL_BEFORE__AXIS_X_SHIFT 2
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, XIS_PULL_BEFORE__AXIS_X_SHIFT, jint)

inline jint ADGravity_get_AXIS_PULL_AFTER__AXIS_Y_SHIFT(void);
#define ADGravity_AXIS_PULL_AFTER__AXIS_Y_SHIFT 64
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_PULL_AFTER__AXIS_Y_SHIFT, jint)

inline jint ADGravity_get_AXIS_PULL_BEFORE__AXIS_Y_SHIFT(void);
#define ADGravity_AXIS_PULL_BEFORE__AXIS_Y_SHIFT 32
J2OBJC_STATIC_FIELD_CONSTANT(ADGravity, AXIS_PULL_BEFORE__AXIS_Y_SHIFT, jint)

@implementation ADGravity

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADGravity_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
          withADRect:(ADRect *)outRect {
  ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_(gravity, w, h, container, outRect);
}

+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
          withADRect:(ADRect *)outRect
             withInt:(jint)layoutDirection {
  ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(gravity, w, h, container, outRect, layoutDirection);
}

+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
             withInt:(jint)xAdj
             withInt:(jint)yAdj
          withADRect:(ADRect *)outRect {
  ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_(gravity, w, h, container, xAdj, yAdj, outRect);
}

+ (void)applyWithInt:(jint)gravity
             withInt:(jint)w
             withInt:(jint)h
          withADRect:(ADRect *)container
             withInt:(jint)xAdj
             withInt:(jint)yAdj
          withADRect:(ADRect *)outRect
             withInt:(jint)layoutDirection {
  ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_withInt_(gravity, w, h, container, xAdj, yAdj, outRect, layoutDirection);
}

+ (void)applyDisplayWithInt:(jint)gravity
                 withADRect:(ADRect *)display
                 withADRect:(ADRect *)inoutObj {
  ADGravity_applyDisplayWithInt_withADRect_withADRect_(gravity, display, inoutObj);
}

+ (void)applyDisplayWithInt:(jint)gravity
                 withADRect:(ADRect *)display
                 withADRect:(ADRect *)inoutObj
                    withInt:(jint)layoutDirection {
  ADGravity_applyDisplayWithInt_withADRect_withADRect_withInt_(gravity, display, inoutObj, layoutDirection);
}

+ (jboolean)isVerticalWithInt:(jint)gravity {
  return ADGravity_isVerticalWithInt_(gravity);
}

+ (jboolean)isHorizontalWithInt:(jint)gravity {
  return ADGravity_isHorizontalWithInt_(gravity);
}

+ (jint)getAbsoluteGravityWithInt:(jint)gravity
                          withInt:(jint)layoutDirection {
  return ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 5, 7, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 10, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(applyWithInt:withInt:withInt:withADRect:withADRect:);
  methods[2].selector = @selector(applyWithInt:withInt:withInt:withADRect:withADRect:withInt:);
  methods[3].selector = @selector(applyWithInt:withInt:withInt:withADRect:withInt:withInt:withADRect:);
  methods[4].selector = @selector(applyWithInt:withInt:withInt:withADRect:withInt:withInt:withADRect:withInt:);
  methods[5].selector = @selector(applyDisplayWithInt:withADRect:withADRect:);
  methods[6].selector = @selector(applyDisplayWithInt:withADRect:withADRect:withInt:);
  methods[7].selector = @selector(isVerticalWithInt:);
  methods[8].selector = @selector(isHorizontalWithInt:);
  methods[9].selector = @selector(getAbsoluteGravityWithInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "NO_GRAVITY", "I", .constantValue.asInt = ADGravity_NO_GRAVITY, 0x19, -1, -1, -1, -1 },
    { "AXIS_SPECIFIED", "I", .constantValue.asInt = ADGravity_AXIS_SPECIFIED, 0x19, -1, -1, -1, -1 },
    { "AXIS_PULL_BEFORE", "I", .constantValue.asInt = ADGravity_AXIS_PULL_BEFORE, 0x19, -1, -1, -1, -1 },
    { "AXIS_PULL_AFTER", "I", .constantValue.asInt = ADGravity_AXIS_PULL_AFTER, 0x19, -1, -1, -1, -1 },
    { "AXIS_CLIP", "I", .constantValue.asInt = ADGravity_AXIS_CLIP, 0x19, -1, -1, -1, -1 },
    { "AXIS_X_SHIFT", "I", .constantValue.asInt = ADGravity_AXIS_X_SHIFT, 0x19, -1, -1, -1, -1 },
    { "AXIS_PULL_AFTER__AXIS_X_SHIFT", "I", .constantValue.asInt = ADGravity_AXIS_PULL_AFTER__AXIS_X_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "XIS_PULL_BEFORE__AXIS_X_SHIFT", "I", .constantValue.asInt = ADGravity_XIS_PULL_BEFORE__AXIS_X_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "AXIS_Y_SHIFT", "I", .constantValue.asInt = ADGravity_AXIS_Y_SHIFT, 0x19, -1, -1, -1, -1 },
    { "AXIS_PULL_AFTER__AXIS_Y_SHIFT", "I", .constantValue.asInt = ADGravity_AXIS_PULL_AFTER__AXIS_Y_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "AXIS_PULL_BEFORE__AXIS_Y_SHIFT", "I", .constantValue.asInt = ADGravity_AXIS_PULL_BEFORE__AXIS_Y_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "TOP", "I", .constantValue.asInt = ADGravity_TOP, 0x19, -1, -1, -1, -1 },
    { "BOTTOM", "I", .constantValue.asInt = ADGravity_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "LEFT", "I", .constantValue.asInt = ADGravity_LEFT, 0x19, -1, -1, -1, -1 },
    { "RIGHT", "I", .constantValue.asInt = ADGravity_RIGHT, 0x19, -1, -1, -1, -1 },
    { "CENTER_VERTICAL", "I", .constantValue.asInt = ADGravity_CENTER_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "FILL_VERTICAL", "I", .constantValue.asInt = ADGravity_FILL_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "CENTER_HORIZONTAL", "I", .constantValue.asInt = ADGravity_CENTER_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "FILL_HORIZONTAL", "I", .constantValue.asInt = ADGravity_FILL_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "CENTER", "I", .constantValue.asInt = ADGravity_CENTER, 0x19, -1, -1, -1, -1 },
    { "FILL", "I", .constantValue.asInt = ADGravity_FILL, 0x19, -1, -1, -1, -1 },
    { "CLIP_VERTICAL", "I", .constantValue.asInt = ADGravity_CLIP_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "CLIP_HORIZONTAL", "I", .constantValue.asInt = ADGravity_CLIP_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "RELATIVE_LAYOUT_DIRECTION", "I", .constantValue.asInt = ADGravity_RELATIVE_LAYOUT_DIRECTION, 0x19, -1, -1, -1, -1 },
    { "HORIZONTAL_GRAVITY_MASK", "I", .constantValue.asInt = ADGravity_HORIZONTAL_GRAVITY_MASK, 0x19, -1, -1, -1, -1 },
    { "VERTICAL_GRAVITY_MASK", "I", .constantValue.asInt = ADGravity_VERTICAL_GRAVITY_MASK, 0x19, -1, -1, -1, -1 },
    { "DISPLAY_CLIP_VERTICAL", "I", .constantValue.asInt = ADGravity_DISPLAY_CLIP_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "DISPLAY_CLIP_HORIZONTAL", "I", .constantValue.asInt = ADGravity_DISPLAY_CLIP_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "START", "I", .constantValue.asInt = ADGravity_START, 0x19, -1, -1, -1, -1 },
    { "END", "I", .constantValue.asInt = ADGravity_END, 0x19, -1, -1, -1, -1 },
    { "RELATIVE_HORIZONTAL_GRAVITY_MASK", "I", .constantValue.asInt = ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "apply", "IIILADRect;LADRect;", "IIILADRect;LADRect;I", "IIILADRect;IILADRect;", "IIILADRect;IILADRect;I", "applyDisplay", "ILADRect;LADRect;", "ILADRect;LADRect;I", "isVertical", "I", "isHorizontal", "getAbsoluteGravity", "II" };
  static const J2ObjcClassInfo _ADGravity = { "Gravity", "r.android.view", ptrTable, methods, fields, 7, 0x1, 10, 31, -1, -1, -1, -1, -1 };
  return &_ADGravity;
}

@end

void ADGravity_init(ADGravity *self) {
  NSObject_init(self);
}

ADGravity *new_ADGravity_init() {
  J2OBJC_NEW_IMPL(ADGravity, init)
}

ADGravity *create_ADGravity_init() {
  J2OBJC_CREATE_IMPL(ADGravity, init)
}

void ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_(jint gravity, jint w, jint h, ADRect *container, ADRect *outRect) {
  ADGravity_initialize();
  ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_(gravity, w, h, container, 0, 0, outRect);
}

void ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(jint gravity, jint w, jint h, ADRect *container, ADRect *outRect, jint layoutDirection) {
  ADGravity_initialize();
  jint absGravity = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
  ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_(absGravity, w, h, container, 0, 0, outRect);
}

void ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_(jint gravity, jint w, jint h, ADRect *container, jint xAdj, jint yAdj, ADRect *outRect) {
  ADGravity_initialize();
  switch (gravity & (JreLShift32((ADGravity_AXIS_PULL_BEFORE | ADGravity_AXIS_PULL_AFTER), ADGravity_AXIS_X_SHIFT))) {
    case 0:
    ((ADRect *) nil_chk(outRect))->left_ = ((ADRect *) nil_chk(container))->left_ + (JreIntDiv((container->right_ - container->left_ - w), 2)) + xAdj;
    outRect->right_ = outRect->left_ + w;
    if ((gravity & (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_X_SHIFT))) == (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_X_SHIFT))) {
      if (outRect->left_ < container->left_) {
        outRect->left_ = container->left_;
      }
      if (outRect->right_ > container->right_) {
        outRect->right_ = container->right_;
      }
    }
    break;
    case ADGravity_XIS_PULL_BEFORE__AXIS_X_SHIFT:
    ((ADRect *) nil_chk(outRect))->left_ = ((ADRect *) nil_chk(container))->left_ + xAdj;
    outRect->right_ = outRect->left_ + w;
    if ((gravity & (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_X_SHIFT))) == (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_X_SHIFT))) {
      if (outRect->right_ > container->right_) {
        outRect->right_ = container->right_;
      }
    }
    break;
    case ADGravity_AXIS_PULL_AFTER__AXIS_X_SHIFT:
    ((ADRect *) nil_chk(outRect))->right_ = ((ADRect *) nil_chk(container))->right_ - xAdj;
    outRect->left_ = outRect->right_ - w;
    if ((gravity & (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_X_SHIFT))) == (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_X_SHIFT))) {
      if (outRect->left_ < container->left_) {
        outRect->left_ = container->left_;
      }
    }
    break;
    default:
    ((ADRect *) nil_chk(outRect))->left_ = ((ADRect *) nil_chk(container))->left_ + xAdj;
    outRect->right_ = container->right_ + xAdj;
    break;
  }
  switch (gravity & (JreLShift32((ADGravity_AXIS_PULL_BEFORE | ADGravity_AXIS_PULL_AFTER), ADGravity_AXIS_Y_SHIFT))) {
    case 0:
    ((ADRect *) nil_chk(outRect))->top_ = ((ADRect *) nil_chk(container))->top_ + (JreIntDiv((container->bottom_ - container->top_ - h), 2)) + yAdj;
    outRect->bottom_ = outRect->top_ + h;
    if ((gravity & (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_Y_SHIFT))) == (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_Y_SHIFT))) {
      if (outRect->top_ < container->top_) {
        outRect->top_ = container->top_;
      }
      if (outRect->bottom_ > container->bottom_) {
        outRect->bottom_ = container->bottom_;
      }
    }
    break;
    case ADGravity_AXIS_PULL_BEFORE__AXIS_Y_SHIFT:
    ((ADRect *) nil_chk(outRect))->top_ = ((ADRect *) nil_chk(container))->top_ + yAdj;
    outRect->bottom_ = outRect->top_ + h;
    if ((gravity & (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_Y_SHIFT))) == (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_Y_SHIFT))) {
      if (outRect->bottom_ > container->bottom_) {
        outRect->bottom_ = container->bottom_;
      }
    }
    break;
    case ADGravity_AXIS_PULL_AFTER__AXIS_Y_SHIFT:
    ((ADRect *) nil_chk(outRect))->bottom_ = ((ADRect *) nil_chk(container))->bottom_ - yAdj;
    outRect->top_ = outRect->bottom_ - h;
    if ((gravity & (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_Y_SHIFT))) == (JreLShift32(ADGravity_AXIS_CLIP, ADGravity_AXIS_Y_SHIFT))) {
      if (outRect->top_ < container->top_) {
        outRect->top_ = container->top_;
      }
    }
    break;
    default:
    ((ADRect *) nil_chk(outRect))->top_ = ((ADRect *) nil_chk(container))->top_ + yAdj;
    outRect->bottom_ = container->bottom_ + yAdj;
    break;
  }
}

void ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_withInt_(jint gravity, jint w, jint h, ADRect *container, jint xAdj, jint yAdj, ADRect *outRect, jint layoutDirection) {
  ADGravity_initialize();
  jint absGravity = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
  ADGravity_applyWithInt_withInt_withInt_withADRect_withInt_withInt_withADRect_(absGravity, w, h, container, xAdj, yAdj, outRect);
}

void ADGravity_applyDisplayWithInt_withADRect_withADRect_(jint gravity, ADRect *display, ADRect *inoutObj) {
  ADGravity_initialize();
  if ((gravity & ADGravity_DISPLAY_CLIP_VERTICAL) != 0) {
    if (((ADRect *) nil_chk(inoutObj))->top_ < ((ADRect *) nil_chk(display))->top_) inoutObj->top_ = display->top_;
    if (inoutObj->bottom_ > display->bottom_) inoutObj->bottom_ = display->bottom_;
  }
  else {
    jint off = 0;
    if (((ADRect *) nil_chk(inoutObj))->top_ < ((ADRect *) nil_chk(display))->top_) off = display->top_ - inoutObj->top_;
    else if (inoutObj->bottom_ > display->bottom_) off = display->bottom_ - inoutObj->bottom_;
    if (off != 0) {
      if ([inoutObj height] > (display->bottom_ - display->top_)) {
        inoutObj->top_ = display->top_;
        inoutObj->bottom_ = display->bottom_;
      }
      else {
        inoutObj->top_ += off;
        inoutObj->bottom_ += off;
      }
    }
  }
  if ((gravity & ADGravity_DISPLAY_CLIP_HORIZONTAL) != 0) {
    if (inoutObj->left_ < display->left_) inoutObj->left_ = display->left_;
    if (inoutObj->right_ > display->right_) inoutObj->right_ = display->right_;
  }
  else {
    jint off = 0;
    if (inoutObj->left_ < display->left_) off = display->left_ - inoutObj->left_;
    else if (inoutObj->right_ > display->right_) off = display->right_ - inoutObj->right_;
    if (off != 0) {
      if ([inoutObj width] > (display->right_ - display->left_)) {
        inoutObj->left_ = display->left_;
        inoutObj->right_ = display->right_;
      }
      else {
        inoutObj->left_ += off;
        inoutObj->right_ += off;
      }
    }
  }
}

void ADGravity_applyDisplayWithInt_withADRect_withADRect_withInt_(jint gravity, ADRect *display, ADRect *inoutObj, jint layoutDirection) {
  ADGravity_initialize();
  jint absGravity = ADGravity_getAbsoluteGravityWithInt_withInt_(gravity, layoutDirection);
  ADGravity_applyDisplayWithInt_withADRect_withADRect_(absGravity, display, inoutObj);
}

jboolean ADGravity_isVerticalWithInt_(jint gravity) {
  ADGravity_initialize();
  return gravity > 0 && (gravity & ADGravity_VERTICAL_GRAVITY_MASK) != 0;
}

jboolean ADGravity_isHorizontalWithInt_(jint gravity) {
  ADGravity_initialize();
  return gravity > 0 && (gravity & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) != 0;
}

jint ADGravity_getAbsoluteGravityWithInt_withInt_(jint gravity, jint layoutDirection) {
  ADGravity_initialize();
  jint result = gravity;
  if ((result & ADGravity_RELATIVE_LAYOUT_DIRECTION) > 0) {
    if ((result & ADGravity_START) == ADGravity_START) {
      result &= ~ADGravity_START;
      if (layoutDirection == ADView_LAYOUT_DIRECTION_RTL) {
        result |= ADGravity_RIGHT;
      }
      else {
        result |= ADGravity_LEFT;
      }
    }
    else if ((result & ADGravity_END) == ADGravity_END) {
      result &= ~ADGravity_END;
      if (layoutDirection == ADView_LAYOUT_DIRECTION_RTL) {
        result |= ADGravity_LEFT;
      }
      else {
        result |= ADGravity_RIGHT;
      }
    }
    result &= ~ADGravity_RELATIVE_LAYOUT_DIRECTION;
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADGravity)
