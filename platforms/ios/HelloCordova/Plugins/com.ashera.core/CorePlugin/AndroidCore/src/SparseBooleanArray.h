//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\SparseBooleanArray.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_SparseBooleanArray")
#ifdef RESTRICT_SparseBooleanArray
#define INCLUDE_ALL_SparseBooleanArray 0
#else
#define INCLUDE_ALL_SparseBooleanArray 1
#endif
#undef RESTRICT_SparseBooleanArray

#if !defined (ADSparseBooleanArray_) && (INCLUDE_ALL_SparseBooleanArray || defined(INCLUDE_ADSparseBooleanArray))
#define ADSparseBooleanArray_

@interface ADSparseBooleanArray : NSObject

#pragma mark Public

/*!
 @brief Creates a new SparseBooleanArray containing no mappings.
 */
- (instancetype)init;

/*!
 @brief Creates a new SparseBooleanArray containing no mappings that will not
  require any additional memory allocation to store the specified
  number of mappings.If you supply an initial capacity of 0, the
  sparse array will be initialized with a light-weight representation
  not requiring any additional array allocations.
 */
- (instancetype)initWithInt:(jint)initialCapacity;

/*!
 @brief Puts a key/value pair into the array, optimizing for the case where
  the key is greater than all existing keys in the array.
 */
- (void)appendWithInt:(jint)key
          withBoolean:(jboolean)value;

/*!
 @brief Removes all key-value mappings from this SparseBooleanArray.
 */
- (void)clear;

- (ADSparseBooleanArray *)java_clone;

/*!
 @brief Removes the mapping from the specified key, if there was any.
 */
- (void)delete__WithInt:(jint)key;

/*!
 @brief Gets the boolean mapped from the specified key, or <code>false</code>
  if no such mapping has been made.
 */
- (jboolean)getWithInt:(jint)key;

/*!
 @brief Gets the boolean mapped from the specified key, or the specified value
  if no such mapping has been made.
 */
- (jboolean)getWithInt:(jint)key
           withBoolean:(jboolean)valueIfKeyNotFound;

/*!
 @brief Returns the index for which <code>keyAt</code> would return the
  specified key, or a negative number if the specified
  key is not mapped.
 */
- (jint)indexOfKeyWithInt:(jint)key;

/*!
 @brief Returns an index for which <code>valueAt</code> would return the
  specified key, or a negative number if no keys map to the
  specified value.
 Beware that this is a linear search, unlike lookups by key,
  and that multiple keys can map to the same value and this will
  find only one of them.
 */
- (jint)indexOfValueWithBoolean:(jboolean)value;

/*!
 @brief Given an index in the range <code>0...size()-1</code>, returns
  the key from the <code>index</code>th key-value mapping that this
  SparseBooleanArray stores.
 <p>The keys corresponding to indices in ascending order are guaranteed to
  be in ascending order, e.g., <code>keyAt(0)</code> will return the
  smallest key and <code>keyAt(size()-1)</code> will return the largest
  key.</p>
 */
- (jint)keyAtWithInt:(jint)index;

/*!
 @brief Adds a mapping from the specified key to the specified value,
  replacing the previous mapping from the specified key if there
  was one.
 */
- (void)putWithInt:(jint)key
       withBoolean:(jboolean)value;

/*!
 */
- (void)removeAtWithInt:(jint)index;

/*!
 */
- (void)setValueAtWithInt:(jint)index
              withBoolean:(jboolean)value;

/*!
 @brief Returns the number of key-value mappings that this SparseBooleanArray
  currently stores.
 */
- (jint)size;

/*!
 @brief <p>This implementation composes a string by iterating over its mappings.
 */
- (NSString *)description;

/*!
 @brief Given an index in the range <code>0...size()-1</code>, returns
  the value from the <code>index</code>th key-value mapping that this
  SparseBooleanArray stores.
 <p>The values corresponding to indices in ascending order are guaranteed
  to be associated with keys in ascending order, e.g., 
 <code>valueAt(0)</code> will return the value associated with the
  smallest key and <code>valueAt(size()-1)</code> will return the value
  associated with the largest key.</p>
 */
- (jboolean)valueAtWithInt:(jint)index;

@end

J2OBJC_EMPTY_STATIC_INIT(ADSparseBooleanArray)

FOUNDATION_EXPORT void ADSparseBooleanArray_init(ADSparseBooleanArray *self);

FOUNDATION_EXPORT ADSparseBooleanArray *new_ADSparseBooleanArray_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADSparseBooleanArray *create_ADSparseBooleanArray_init(void);

FOUNDATION_EXPORT void ADSparseBooleanArray_initWithInt_(ADSparseBooleanArray *self, jint initialCapacity);

FOUNDATION_EXPORT ADSparseBooleanArray *new_ADSparseBooleanArray_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADSparseBooleanArray *create_ADSparseBooleanArray_initWithInt_(jint initialCapacity);

J2OBJC_TYPE_LITERAL_HEADER(ADSparseBooleanArray)

@compatibility_alias RAndroidUtilSparseBooleanArray ADSparseBooleanArray;

#endif

#pragma pop_macro("INCLUDE_ALL_SparseBooleanArray")
