//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\Easing.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Easing")
#ifdef RESTRICT_Easing
#define INCLUDE_ALL_Easing 0
#else
#define INCLUDE_ALL_Easing 1
#endif
#undef RESTRICT_Easing
#ifdef INCLUDE_ADXEasing_CubicEasing
#define INCLUDE_ADXEasing 1
#endif

#if !defined (ADXEasing_) && (INCLUDE_ALL_Easing || defined(INCLUDE_ADXEasing))
#define ADXEasing_

@class IOSObjectArray;

/*!
 @brief Provide the engine for cubic spline easing
 */
@interface ADXEasing : NSObject {
 @public
  NSString *str_;
}

#pragma mark Public

- (instancetype)init;

- (jdouble)getWithDouble:(jdouble)x;

- (jdouble)getDiffWithDouble:(jdouble)x;

+ (ADXEasing *)getInterpolatorWithNSString:(NSString *)configString;

- (NSString *)description;

@end

J2OBJC_STATIC_INIT(ADXEasing)

J2OBJC_FIELD_SETTER(ADXEasing, str_, NSString *)

inline ADXEasing *ADXEasing_get_sDefault(void);
inline ADXEasing *ADXEasing_set_sDefault(ADXEasing *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT ADXEasing *ADXEasing_sDefault;
J2OBJC_STATIC_FIELD_OBJ(ADXEasing, sDefault, ADXEasing *)

inline IOSObjectArray *ADXEasing_get_NAMED_EASING(void);
inline IOSObjectArray *ADXEasing_set_NAMED_EASING(IOSObjectArray *value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT IOSObjectArray *ADXEasing_NAMED_EASING;
J2OBJC_STATIC_FIELD_OBJ(ADXEasing, NAMED_EASING, IOSObjectArray *)

FOUNDATION_EXPORT void ADXEasing_init(ADXEasing *self);

FOUNDATION_EXPORT ADXEasing *new_ADXEasing_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXEasing *create_ADXEasing_init(void);

FOUNDATION_EXPORT ADXEasing *ADXEasing_getInterpolatorWithNSString_(NSString *configString);

J2OBJC_TYPE_LITERAL_HEADER(ADXEasing)

@compatibility_alias AndroidxConstraintlayoutCoreMotionUtilsEasing ADXEasing;

#endif

#if !defined (ADXEasing_CubicEasing_) && (INCLUDE_ALL_Easing || defined(INCLUDE_ADXEasing_CubicEasing))
#define ADXEasing_CubicEasing_

@interface ADXEasing_CubicEasing : ADXEasing {
 @public
  jdouble x1_;
  jdouble y1_;
  jdouble x2_;
  jdouble y2_;
}

#pragma mark Public

- (instancetype)initWithDouble:(jdouble)x1
                    withDouble:(jdouble)y1
                    withDouble:(jdouble)x2
                    withDouble:(jdouble)y2;

/*!
 @brief binary search for the region
  and linear interpolate the answer
 */
- (jdouble)getWithDouble:(jdouble)x;

/*!
 @brief binary search for the region
  and linear interpolate the answer
 */
- (jdouble)getDiffWithDouble:(jdouble)x;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)configString;

- (void)setupWithDouble:(jdouble)x1
             withDouble:(jdouble)y1
             withDouble:(jdouble)x2
             withDouble:(jdouble)y2;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXEasing_CubicEasing)

FOUNDATION_EXPORT void ADXEasing_CubicEasing_initWithNSString_(ADXEasing_CubicEasing *self, NSString *configString);

FOUNDATION_EXPORT ADXEasing_CubicEasing *new_ADXEasing_CubicEasing_initWithNSString_(NSString *configString) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXEasing_CubicEasing *create_ADXEasing_CubicEasing_initWithNSString_(NSString *configString);

FOUNDATION_EXPORT void ADXEasing_CubicEasing_initWithDouble_withDouble_withDouble_withDouble_(ADXEasing_CubicEasing *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

FOUNDATION_EXPORT ADXEasing_CubicEasing *new_ADXEasing_CubicEasing_initWithDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXEasing_CubicEasing *create_ADXEasing_CubicEasing_initWithDouble_withDouble_withDouble_withDouble_(jdouble x1, jdouble y1, jdouble x2, jdouble y2);

J2OBJC_TYPE_LITERAL_HEADER(ADXEasing_CubicEasing)

#endif

#pragma pop_macro("INCLUDE_ALL_Easing")
