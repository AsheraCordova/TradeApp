//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\DrawForegroundCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "DrawForegroundCommandConverter.h"
#include "Drawable.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "View.h"

#include <UIKit/UIKit.h>
#include "CGRectWrapper.h"
#include "Rect.h"


@interface ASDrawForegroundCommandConverter () {
 @public
  id rectObj_;
}

- (void)drawImageWithId:(id)image
             withADView:(ADView *)view;

@end

J2OBJC_FIELD_SETTER(ASDrawForegroundCommandConverter, rectObj_, id)

__attribute__((unused)) static void ASDrawForegroundCommandConverter_drawImageWithId_withADView_(ASDrawForegroundCommandConverter *self, id image, ADView *view);

@implementation ASDrawForegroundCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASDrawForegroundCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (value == nil) {
    return value;
  }
  ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
  if ([value isKindOfClass:[ADDrawable class]]) {
    value = [((ADDrawable *) value) getDrawable];
  }
  ASDrawForegroundCommandConverter_drawImageWithId_withADView_(self, value, view);
  return value;
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASDrawForegroundCommandConverter *drawImageCommandConverter = new_ASDrawForegroundCommandConverter_initWithNSString_(self->id__);
  [drawImageCommandConverter setPriorityWithInt:1000];
  return drawImageCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
}

- (void)drawImageWithId:(id)image
             withADView:(ADView *)view {
  ASDrawForegroundCommandConverter_drawImageWithId_withADView_(self, image, view);
}

- (void)updatePhaseArgsWithNSObjectArray:(IOSObjectArray *)args {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i += 2) {
    id attributeName = IOSObjectArray_Get(args, i);
    if ([nil_chk(attributeName) isEqual:@"rect"]) {
      rectObj_ = IOSObjectArray_Get(args, i + 1);
    }
  }
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(executeAfterPostMeasure);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  methods[5].selector = @selector(drawImageWithId:withADView:);
  methods[6].selector = @selector(updatePhaseArgsWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "rectObj_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs", "drawImage", "LNSObject;LADView;", "updatePhaseArgs" };
  static const J2ObjcClassInfo _ASDrawForegroundCommandConverter = { "DrawForegroundCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_ASDrawForegroundCommandConverter;
}

@end

void ASDrawForegroundCommandConverter_initWithNSString_(ASDrawForegroundCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASDrawForegroundCommandConverter *new_ASDrawForegroundCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASDrawForegroundCommandConverter, initWithNSString_, id_)
}

ASDrawForegroundCommandConverter *create_ASDrawForegroundCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASDrawForegroundCommandConverter, initWithNSString_, id_)
}

void ASDrawForegroundCommandConverter_drawImageWithId_withADView_(ASDrawForegroundCommandConverter *self, id image, ADView *view) {
  if ([image isKindOfClass:UIImage.class]) {
    UIImage* uiimage = ((UIImage*) image);
    ADRect* foregroundRect = [view getForegroundBoundsWithInt:uiimage.size.width withInt:uiimage.size.height];
    
    CGRect rect = CGRectMake(foregroundRect->left_, foregroundRect->top_, [foregroundRect width], [foregroundRect height]);
    [image drawInRect:rect];
  }
  if ([image isKindOfClass:UIColor.class]) {
    CGRect rect = ((CGRectWrapper*) self->rectObj_).rect;
    [((UIColor*) image) setFill];
    UIRectFillUsingBlendMode(rect, kCGBlendModeNormal);
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawForegroundCommandConverter)
