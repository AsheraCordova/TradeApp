//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\ChildHelper.java
//

#include "ChildHelper.h"
#include "J2ObjC_source.h"
#include "RecyclerView.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Long.h"
#include "java/lang/RuntimeException.h"
#include "java/util/ArrayList.h"
#include "java/util/List.h"


@interface ADXChildHelper ()

/*!
 @brief Marks a child view as hidden
 @param child View to hide.
 */
- (void)hideViewInternalWithADView:(ADView *)child;

/*!
 @brief Unmarks a child view as hidden.
 @param child View to hide.
 */
- (jboolean)unhideViewInternalWithADView:(ADView *)child;

- (jint)getOffsetWithInt:(jint)index;

@end

inline jboolean ADXChildHelper_get_DEBUG(void);
#define ADXChildHelper_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXChildHelper, DEBUG, jboolean)

inline NSString *ADXChildHelper_get_TAG(void);
static NSString *ADXChildHelper_TAG = @"ChildrenHelper";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXChildHelper, TAG, NSString *)

__attribute__((unused)) static void ADXChildHelper_hideViewInternalWithADView_(ADXChildHelper *self, ADView *child);

__attribute__((unused)) static jboolean ADXChildHelper_unhideViewInternalWithADView_(ADXChildHelper *self, ADView *child);

__attribute__((unused)) static jint ADXChildHelper_getOffsetWithInt_(ADXChildHelper *self, jint index);

@interface ADXChildHelper_Bucket ()

- (void)ensureNext;

@end

__attribute__((unused)) static void ADXChildHelper_Bucket_ensureNext(ADXChildHelper_Bucket *self);

@interface ADXChildHelper_Callback : NSObject

@end

@implementation ADXChildHelper

- (instancetype)initPackagePrivateWithADXChildHelper_Callback:(id<ADXChildHelper_Callback>)callback {
  ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(self, callback);
  return self;
}

- (void)hideViewInternalWithADView:(ADView *)child {
  ADXChildHelper_hideViewInternalWithADView_(self, child);
}

- (jboolean)unhideViewInternalWithADView:(ADView *)child {
  return ADXChildHelper_unhideViewInternalWithADView_(self, child);
}

- (void)addViewWithADView:(ADView *)child
              withBoolean:(jboolean)hidden {
  [self addViewWithADView:child withInt:-1 withBoolean:hidden];
}

- (void)addViewWithADView:(ADView *)child
                  withInt:(jint)index
              withBoolean:(jboolean)hidden {
  jint offset;
  if (index < 0) {
    offset = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildCount];
  }
  else {
    offset = ADXChildHelper_getOffsetWithInt_(self, index);
  }
  [((ADXChildHelper_Bucket *) nil_chk(mBucket_)) insertWithInt:offset withBoolean:hidden];
  if (hidden) {
    ADXChildHelper_hideViewInternalWithADView_(self, child);
  }
  [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) addViewWithADView:child withInt:offset];
}

- (jint)getOffsetWithInt:(jint)index {
  return ADXChildHelper_getOffsetWithInt_(self, index);
}

- (void)removeViewWithADView:(ADView *)view {
  jint index = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) indexOfChildWithADView:view];
  if (index < 0) {
    return;
  }
  if ([((ADXChildHelper_Bucket *) nil_chk(mBucket_)) removeWithInt:index]) {
    ADXChildHelper_unhideViewInternalWithADView_(self, view);
  }
  [mCallback_ removeViewAtWithInt:index];
}

- (void)removeViewAtWithInt:(jint)index {
  jint offset = ADXChildHelper_getOffsetWithInt_(self, index);
  ADView *view = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildAtWithInt:offset];
  if (view == nil) {
    return;
  }
  if ([((ADXChildHelper_Bucket *) nil_chk(mBucket_)) removeWithInt:offset]) {
    ADXChildHelper_unhideViewInternalWithADView_(self, view);
  }
  [mCallback_ removeViewAtWithInt:offset];
}

- (ADView *)getChildAtWithInt:(jint)index {
  jint offset = ADXChildHelper_getOffsetWithInt_(self, index);
  return [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildAtWithInt:offset];
}

- (void)removeAllViewsUnfiltered {
  [((ADXChildHelper_Bucket *) nil_chk(mBucket_)) reset];
  for (jint i = [((id<JavaUtilList>) nil_chk(mHiddenViews_)) size] - 1; i >= 0; i--) {
    [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) onLeftHiddenStateWithADView:[mHiddenViews_ getWithInt:i]];
    [mHiddenViews_ removeWithInt:i];
  }
  [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) removeAllViews];
}

- (ADView *)findHiddenNonRemovedViewWithInt:(jint)position {
  jint count = [((id<JavaUtilList>) nil_chk(mHiddenViews_)) size];
  for (jint i = 0; i < count; i++) {
    ADView *view = [mHiddenViews_ getWithInt:i];
    ADXRecyclerView_ViewHolder *holder = JreRetainedLocalValue([((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildViewHolderWithADView:view]);
    if ([((ADXRecyclerView_ViewHolder *) nil_chk(holder)) getLayoutPosition] == position && ![holder isInvalid] && ![holder isRemoved]) {
      return view;
    }
  }
  return nil;
}

- (void)attachViewToParentWithADView:(ADView *)child
                             withInt:(jint)index
        withADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)layoutParams
                         withBoolean:(jboolean)hidden {
  jint offset;
  if (index < 0) {
    offset = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildCount];
  }
  else {
    offset = ADXChildHelper_getOffsetWithInt_(self, index);
  }
  [((ADXChildHelper_Bucket *) nil_chk(mBucket_)) insertWithInt:offset withBoolean:hidden];
  if (hidden) {
    ADXChildHelper_hideViewInternalWithADView_(self, child);
  }
  [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) attachViewToParentWithADView:child withInt:offset withADViewGroup_LayoutParams:layoutParams];
}

- (jint)getChildCount {
  return [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildCount] - [((id<JavaUtilList>) nil_chk(mHiddenViews_)) size];
}

- (jint)getUnfilteredChildCount {
  return [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildCount];
}

- (ADView *)getUnfilteredChildAtWithInt:(jint)index {
  return [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) getChildAtWithInt:index];
}

- (void)detachViewFromParentWithInt:(jint)index {
  jint offset = ADXChildHelper_getOffsetWithInt_(self, index);
  [((ADXChildHelper_Bucket *) nil_chk(mBucket_)) removeWithInt:offset];
  [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) detachViewFromParentWithInt:offset];
}

- (jint)indexOfChildWithADView:(ADView *)child {
  jint index = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) indexOfChildWithADView:child];
  if (index == -1) {
    return -1;
  }
  if ([((ADXChildHelper_Bucket *) nil_chk(mBucket_)) getWithInt:index]) {
    {
      return -1;
    }
  }
  return index - [mBucket_ countOnesBeforeWithInt:index];
}

- (jboolean)isHiddenWithADView:(ADView *)view {
  return [((id<JavaUtilList>) nil_chk(mHiddenViews_)) containsWithId:view];
}

- (void)hideWithADView:(ADView *)view {
  jint offset = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) indexOfChildWithADView:view];
  if (offset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"view is not a child, cannot hide ", view));
  }
  [((ADXChildHelper_Bucket *) nil_chk(mBucket_)) setWithInt:offset];
  ADXChildHelper_hideViewInternalWithADView_(self, view);
}

- (void)unhideWithADView:(ADView *)view {
  jint offset = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) indexOfChildWithADView:view];
  if (offset < 0) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$@", @"view is not a child, cannot hide ", view));
  }
  if (![((ADXChildHelper_Bucket *) nil_chk(mBucket_)) getWithInt:offset]) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@", @"trying to unhide a view that was not hidden", view));
  }
  [mBucket_ clearWithInt:offset];
  ADXChildHelper_unhideViewInternalWithADView_(self, view);
}

- (NSString *)description {
  return JreStrcat("$$I", [((ADXChildHelper_Bucket *) nil_chk(mBucket_)) description], @", hidden list:", [((id<JavaUtilList>) nil_chk(mHiddenViews_)) size]);
}

- (jboolean)removeViewIfHiddenWithADView:(ADView *)view {
  jint index = [((id<ADXChildHelper_Callback>) nil_chk(mCallback_)) indexOfChildWithADView:view];
  if (index == -1) {
    ADXChildHelper_unhideViewInternalWithADView_(self, view);
    return true;
  }
  if ([((ADXChildHelper_Bucket *) nil_chk(mBucket_)) getWithInt:index]) {
    [mBucket_ removeWithInt:index];
    !ADXChildHelper_unhideViewInternalWithADView_(self, view);
    [mCallback_ removeViewAtWithInt:index];
    return true;
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mCallback_);
  RELEASE_(mBucket_);
  RELEASE_(mHiddenViews_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 10, 8, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 11, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 12, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 13, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 15, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 16, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 17, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 20, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 21, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 22, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXChildHelper_Callback:);
  methods[1].selector = @selector(hideViewInternalWithADView:);
  methods[2].selector = @selector(unhideViewInternalWithADView:);
  methods[3].selector = @selector(addViewWithADView:withBoolean:);
  methods[4].selector = @selector(addViewWithADView:withInt:withBoolean:);
  methods[5].selector = @selector(getOffsetWithInt:);
  methods[6].selector = @selector(removeViewWithADView:);
  methods[7].selector = @selector(removeViewAtWithInt:);
  methods[8].selector = @selector(getChildAtWithInt:);
  methods[9].selector = @selector(removeAllViewsUnfiltered);
  methods[10].selector = @selector(findHiddenNonRemovedViewWithInt:);
  methods[11].selector = @selector(attachViewToParentWithADView:withInt:withADViewGroup_LayoutParams:withBoolean:);
  methods[12].selector = @selector(getChildCount);
  methods[13].selector = @selector(getUnfilteredChildCount);
  methods[14].selector = @selector(getUnfilteredChildAtWithInt:);
  methods[15].selector = @selector(detachViewFromParentWithInt:);
  methods[16].selector = @selector(indexOfChildWithADView:);
  methods[17].selector = @selector(isHiddenWithADView:);
  methods[18].selector = @selector(hideWithADView:);
  methods[19].selector = @selector(unhideWithADView:);
  methods[20].selector = @selector(description);
  methods[21].selector = @selector(removeViewIfHiddenWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXChildHelper_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
    { "mCallback_", "LADXChildHelper_Callback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mBucket_", "LADXChildHelper_Bucket;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mHiddenViews_", "LJavaUtilList;", .constantValue.asLong = 0, 0x10, -1, -1, 24, -1 },
  };
  static const void *ptrTable[] = { "LADXChildHelper_Callback;", "hideViewInternal", "LADView;", "unhideViewInternal", "addView", "LADView;Z", "LADView;IZ", "getOffset", "I", "removeView", "removeViewAt", "getChildAt", "findHiddenNonRemovedView", "attachViewToParent", "LADView;ILADViewGroup_LayoutParams;Z", "getUnfilteredChildAt", "detachViewFromParent", "indexOfChild", "isHidden", "hide", "unhide", "toString", "removeViewIfHidden", &ADXChildHelper_TAG, "Ljava/util/List<Lr/android/view/View;>;", "LADXChildHelper_Bucket;LADXChildHelper_Callback;" };
  static const J2ObjcClassInfo _ADXChildHelper = { "ChildHelper", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x0, 22, 5, -1, 25, -1, -1, -1 };
  return &_ADXChildHelper;
}

@end

void ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(ADXChildHelper *self, id<ADXChildHelper_Callback> callback) {
  NSObject_init(self);
  JreStrongAssign(&self->mCallback_, callback);
  JreStrongAssignAndConsume(&self->mBucket_, new_ADXChildHelper_Bucket_init());
  JreStrongAssignAndConsume(&self->mHiddenViews_, new_JavaUtilArrayList_init());
}

ADXChildHelper *new_ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(id<ADXChildHelper_Callback> callback) {
  J2OBJC_NEW_IMPL(ADXChildHelper, initPackagePrivateWithADXChildHelper_Callback_, callback)
}

ADXChildHelper *create_ADXChildHelper_initPackagePrivateWithADXChildHelper_Callback_(id<ADXChildHelper_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADXChildHelper, initPackagePrivateWithADXChildHelper_Callback_, callback)
}

void ADXChildHelper_hideViewInternalWithADView_(ADXChildHelper *self, ADView *child) {
  [((id<JavaUtilList>) nil_chk(self->mHiddenViews_)) addWithId:child];
  [((id<ADXChildHelper_Callback>) nil_chk(self->mCallback_)) onEnteredHiddenStateWithADView:child];
}

jboolean ADXChildHelper_unhideViewInternalWithADView_(ADXChildHelper *self, ADView *child) {
  if ([((id<JavaUtilList>) nil_chk(self->mHiddenViews_)) removeWithId:child]) {
    [((id<ADXChildHelper_Callback>) nil_chk(self->mCallback_)) onLeftHiddenStateWithADView:child];
    return true;
  }
  else {
    return false;
  }
}

jint ADXChildHelper_getOffsetWithInt_(ADXChildHelper *self, jint index) {
  if (index < 0) {
    return -1;
  }
  jint limit = [((id<ADXChildHelper_Callback>) nil_chk(self->mCallback_)) getChildCount];
  jint offset = index;
  while (offset < limit) {
    jint removedBefore = [((ADXChildHelper_Bucket *) nil_chk(self->mBucket_)) countOnesBeforeWithInt:offset];
    jint diff = index - (offset - removedBefore);
    if (diff == 0) {
      while ([self->mBucket_ getWithInt:offset]) {
        offset++;
      }
      return offset;
    }
    else {
      offset += diff;
    }
  }
  return -1;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXChildHelper)

@implementation ADXChildHelper_Bucket

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXChildHelper_Bucket_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setWithInt:(jint)index {
  if (index >= ADXChildHelper_Bucket_BITS_PER_WORD) {
    ADXChildHelper_Bucket_ensureNext(self);
    [((ADXChildHelper_Bucket *) nil_chk(mNext_)) setWithInt:index - ADXChildHelper_Bucket_BITS_PER_WORD];
  }
  else {
    mData_ |= JreLShift64(1LL, index);
  }
}

- (void)ensureNext {
  ADXChildHelper_Bucket_ensureNext(self);
}

- (void)clearWithInt:(jint)index {
  if (index >= ADXChildHelper_Bucket_BITS_PER_WORD) {
    if (mNext_ != nil) {
      [mNext_ clearWithInt:index - ADXChildHelper_Bucket_BITS_PER_WORD];
    }
  }
  else {
    mData_ &= ~(JreLShift64(1LL, index));
  }
}

- (jboolean)getWithInt:(jint)index {
  if (index >= ADXChildHelper_Bucket_BITS_PER_WORD) {
    ADXChildHelper_Bucket_ensureNext(self);
    return [((ADXChildHelper_Bucket *) nil_chk(mNext_)) getWithInt:index - ADXChildHelper_Bucket_BITS_PER_WORD];
  }
  else {
    return (mData_ & (JreLShift64(1LL, index))) != 0;
  }
}

- (void)reset {
  mData_ = 0;
  if (mNext_ != nil) {
    [mNext_ reset];
  }
}

- (void)insertWithInt:(jint)index
          withBoolean:(jboolean)value {
  if (index >= ADXChildHelper_Bucket_BITS_PER_WORD) {
    ADXChildHelper_Bucket_ensureNext(self);
    [((ADXChildHelper_Bucket *) nil_chk(mNext_)) insertWithInt:index - ADXChildHelper_Bucket_BITS_PER_WORD withBoolean:value];
  }
  else {
    jboolean lastBit = (mData_ & ADXChildHelper_Bucket_LAST_BIT) != 0;
    jlong mask = (JreLShift64(1LL, index)) - 1;
    jlong before = mData_ & mask;
    jlong after = JreLShift64((mData_ & ~mask), 1);
    mData_ = before | after;
    if (value) {
      [self setWithInt:index];
    }
    else {
      [self clearWithInt:index];
    }
    if (lastBit || mNext_ != nil) {
      ADXChildHelper_Bucket_ensureNext(self);
      [((ADXChildHelper_Bucket *) nil_chk(mNext_)) insertWithInt:0 withBoolean:lastBit];
    }
  }
}

- (jboolean)removeWithInt:(jint)index {
  if (index >= ADXChildHelper_Bucket_BITS_PER_WORD) {
    ADXChildHelper_Bucket_ensureNext(self);
    return [((ADXChildHelper_Bucket *) nil_chk(mNext_)) removeWithInt:index - ADXChildHelper_Bucket_BITS_PER_WORD];
  }
  else {
    jlong mask = (JreLShift64(1LL, index));
    jboolean value = (mData_ & mask) != 0;
    mData_ &= ~mask;
    mask = mask - 1;
    jlong before = mData_ & mask;
    jlong after = JavaLangLong_rotateRightWithLong_withInt_(mData_ & ~mask, 1);
    mData_ = before | after;
    if (mNext_ != nil) {
      if ([mNext_ getWithInt:0]) {
        [self setWithInt:ADXChildHelper_Bucket_BITS_PER_WORD - 1];
      }
      [((ADXChildHelper_Bucket *) nil_chk(mNext_)) removeWithInt:0];
    }
    return value;
  }
}

- (jint)countOnesBeforeWithInt:(jint)index {
  if (mNext_ == nil) {
    if (index >= ADXChildHelper_Bucket_BITS_PER_WORD) {
      return JavaLangLong_bitCountWithLong_(mData_);
    }
    return JavaLangLong_bitCountWithLong_(mData_ & ((JreLShift64(1LL, index)) - 1));
  }
  if (index < ADXChildHelper_Bucket_BITS_PER_WORD) {
    return JavaLangLong_bitCountWithLong_(mData_ & ((JreLShift64(1LL, index)) - 1));
  }
  else {
    return [mNext_ countOnesBeforeWithInt:index - ADXChildHelper_Bucket_BITS_PER_WORD] + JavaLangLong_bitCountWithLong_(mData_);
  }
}

- (NSString *)description {
  return mNext_ == nil ? JavaLangLong_toBinaryStringWithLong_(mData_) : JreStrcat("$$$", [mNext_ description], @"xx", JavaLangLong_toBinaryStringWithLong_(mData_));
}

- (void)dealloc {
  RELEASE_(mNext_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 6, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setWithInt:);
  methods[2].selector = @selector(ensureNext);
  methods[3].selector = @selector(clearWithInt:);
  methods[4].selector = @selector(getWithInt:);
  methods[5].selector = @selector(reset);
  methods[6].selector = @selector(insertWithInt:withBoolean:);
  methods[7].selector = @selector(removeWithInt:);
  methods[8].selector = @selector(countOnesBeforeWithInt:);
  methods[9].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "BITS_PER_WORD", "I", .constantValue.asInt = ADXChildHelper_Bucket_BITS_PER_WORD, 0x18, -1, -1, -1, -1 },
    { "LAST_BIT", "J", .constantValue.asLong = ADXChildHelper_Bucket_LAST_BIT, 0x18, -1, -1, -1, -1 },
    { "mData_", "J", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mNext_", "LADXChildHelper_Bucket;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "set", "I", "clear", "get", "insert", "IZ", "remove", "countOnesBefore", "toString", "LADXChildHelper;" };
  static const J2ObjcClassInfo _ADXChildHelper_Bucket = { "Bucket", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 10, 4, 9, -1, -1, -1, -1 };
  return &_ADXChildHelper_Bucket;
}

@end

void ADXChildHelper_Bucket_init(ADXChildHelper_Bucket *self) {
  NSObject_init(self);
  self->mData_ = 0;
}

ADXChildHelper_Bucket *new_ADXChildHelper_Bucket_init() {
  J2OBJC_NEW_IMPL(ADXChildHelper_Bucket, init)
}

ADXChildHelper_Bucket *create_ADXChildHelper_Bucket_init() {
  J2OBJC_CREATE_IMPL(ADXChildHelper_Bucket, init)
}

void ADXChildHelper_Bucket_ensureNext(ADXChildHelper_Bucket *self) {
  if (self->mNext_ == nil) {
    JreStrongAssignAndConsume(&self->mNext_, new_ADXChildHelper_Bucket_init());
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXChildHelper_Bucket)

@implementation ADXChildHelper_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x401, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRecyclerView_ViewHolder;", 0x401, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 11, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 12, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getChildCount);
  methods[1].selector = @selector(addViewWithADView:withInt:);
  methods[2].selector = @selector(indexOfChildWithADView:);
  methods[3].selector = @selector(removeViewAtWithInt:);
  methods[4].selector = @selector(getChildAtWithInt:);
  methods[5].selector = @selector(removeAllViews);
  methods[6].selector = @selector(getChildViewHolderWithADView:);
  methods[7].selector = @selector(attachViewToParentWithADView:withInt:withADViewGroup_LayoutParams:);
  methods[8].selector = @selector(detachViewFromParentWithInt:);
  methods[9].selector = @selector(onEnteredHiddenStateWithADView:);
  methods[10].selector = @selector(onLeftHiddenStateWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "addView", "LADView;I", "indexOfChild", "LADView;", "removeViewAt", "I", "getChildAt", "getChildViewHolder", "attachViewToParent", "LADView;ILADViewGroup_LayoutParams;", "detachViewFromParent", "onEnteredHiddenState", "onLeftHiddenState", "LADXChildHelper;" };
  static const J2ObjcClassInfo _ADXChildHelper_Callback = { "Callback", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x608, 11, 0, 13, -1, -1, -1, -1 };
  return &_ADXChildHelper_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXChildHelper_Callback)
