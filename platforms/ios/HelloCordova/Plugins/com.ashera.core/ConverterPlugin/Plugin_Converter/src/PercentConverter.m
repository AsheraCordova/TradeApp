//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\PercentConverter.java
//

#include "IFragment.h"
#include "J2ObjC_source.h"
#include "PercentConverter.h"
#include "java/lang/Float.h"
#include "java/lang/RuntimeException.h"
#include "java/text/DecimalFormat.h"
#include "java/text/ParseException.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@implementation ASPercentConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASPercentConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangFloat *)convertFromWithId:(NSString *)value
                     withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                     withASIFragment:(id<ASIFragment>)fragment {
  @try {
    if (value == nil) {
      return nil;
    }
    jfloat floatValue = [((NSNumber *) nil_chk([create_JavaTextDecimalFormat_initWithNSString_(@"0.0#%") parseWithNSString:value])) floatValue];
    return JavaLangFloat_valueOfWithFloat_(floatValue);
  }
  @catch (JavaTextParseException *e) {
    @throw create_JavaLangRuntimeException_initWithJavaLangThrowable_(e);
  }
}

- (NSString *)convertToWithId:(JavaLangFloat *)value
              withASIFragment:(id<ASIFragment>)fragment {
  if (value == nil) {
    return nil;
  }
  return [create_JavaTextDecimalFormat_initWithNSString_(@"0.#%") formatWithDouble:[value doubleValue]];
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangFloat;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertToWithId:withASIFragment:);
  methods[3].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Ljava/lang/Float;", "convertTo", "LJavaLangFloat;LASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<Ljava/lang/Float;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASPercentConverter = { "PercentConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, 6, -1 };
  return &_ASPercentConverter;
}

@end

void ASPercentConverter_init(ASPercentConverter *self) {
  NSObject_init(self);
}

ASPercentConverter *new_ASPercentConverter_init() {
  J2OBJC_NEW_IMPL(ASPercentConverter, init)
}

ASPercentConverter *create_ASPercentConverter_init() {
  J2OBJC_CREATE_IMPL(ASPercentConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPercentConverter)
