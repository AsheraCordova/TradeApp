//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\TransformCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "TransformCommandConverter.h"
#include "View.h"
#include "java/lang/Float.h"

#include <UIKit/UIKit.h>
#define degreesToRadians(x) ((x) * M_PI / 180.0)

@class JavaLangFloat;


@interface ASTransformCommandConverter () {
 @public
  jfloat translationX_;
  jfloat translationY_;
  jfloat translationZ_;
  jfloat rotation_;
  jfloat rotationX_;
  jfloat rotationY_;
  jfloat scaleX_;
  jfloat scaleY_;
  JavaLangFloat *transformPivotX_;
  JavaLangFloat *transformPivotY_;
}

- (void)resetTranformWithId:(id)uiView;

- (void)updateTranformWithId:(id)view
                   withFloat:(jfloat)translationX
                   withFloat:(jfloat)translationY
                   withFloat:(jfloat)translationZ
                   withFloat:(jfloat)rotation
                   withFloat:(jfloat)rotationX
                   withFloat:(jfloat)rotationY
                   withFloat:(jfloat)scaleX
                   withFloat:(jfloat)scaleY
           withJavaLangFloat:(JavaLangFloat *)anchorX
           withJavaLangFloat:(JavaLangFloat *)anchorY;

@end

J2OBJC_FIELD_SETTER(ASTransformCommandConverter, transformPivotX_, JavaLangFloat *)
J2OBJC_FIELD_SETTER(ASTransformCommandConverter, transformPivotY_, JavaLangFloat *)

__attribute__((unused)) static void ASTransformCommandConverter_resetTranformWithId_(ASTransformCommandConverter *self, id uiView);

__attribute__((unused)) static void ASTransformCommandConverter_updateTranformWithId_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withJavaLangFloat_withJavaLangFloat_(ASTransformCommandConverter *self, id view, jfloat translationX, jfloat translationY, jfloat translationZ, jfloat rotation, jfloat rotationX, jfloat rotationY, jfloat scaleX, jfloat scaleY, JavaLangFloat *anchorX, JavaLangFloat *anchorY);

@implementation ASTransformCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASTransformCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  {
    ADView *view;
    JavaLangFloat *anchorX;
    JavaLangFloat *anchorY;
    switch (JreIndexOfStr(phase, (id[]){ @"preframe", @"postframe" }, 2)) {
      case 0:
      ASTransformCommandConverter_resetTranformWithId_(self, [((id<ASIWidget>) nil_chk(widget)) asNativeWidget]);
      break;
      case 1:
      view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ADView class]);
      anchorX = nil;
      anchorY = nil;
      if (transformPivotX_ != nil || transformPivotY_ != nil) {
        anchorX = JavaLangFloat_valueOfWithFloat_((transformPivotX_ == nil) ? 0.5f : [((ADView *) nil_chk(view)) getMeasuredWidth] / [((JavaLangFloat *) nil_chk(transformPivotX_)) floatValue]);
        anchorY = JavaLangFloat_valueOfWithFloat_((transformPivotY_ == nil) ? 0.5f : [((ADView *) nil_chk(view)) getMeasuredHeight] / [((JavaLangFloat *) nil_chk(transformPivotY_)) floatValue]);
      }
      ASTransformCommandConverter_updateTranformWithId_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withJavaLangFloat_withJavaLangFloat_(self, [widget asNativeWidget], translationX_, translationY_, translationZ_, rotation_, rotationX_, rotationY_, scaleX_, scaleY_, anchorX, anchorY);
      break;
      default:
      break;
    }
  }
  return value;
}

- (void)resetTranformWithId:(id)uiView {
  ASTransformCommandConverter_resetTranformWithId_(self, uiView);
}

- (void)updateTranformWithId:(id)view
                   withFloat:(jfloat)translationX
                   withFloat:(jfloat)translationY
                   withFloat:(jfloat)translationZ
                   withFloat:(jfloat)rotation
                   withFloat:(jfloat)rotationX
                   withFloat:(jfloat)rotationY
                   withFloat:(jfloat)scaleX
                   withFloat:(jfloat)scaleY
           withJavaLangFloat:(JavaLangFloat *)anchorX
           withJavaLangFloat:(JavaLangFloat *)anchorY {
  ASTransformCommandConverter_updateTranformWithId_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withJavaLangFloat_withJavaLangFloat_(self, view, translationX, translationY, translationZ, rotation, rotationX, rotationY, scaleX, scaleY, anchorX, anchorY);
}

-(void)setAnchorPoint:(CGPoint)anchorPoint forView:(UIView *)view
{
  CGPoint newPoint = CGPointMake(view.bounds.size.width * anchorPoint.x,
  view.bounds.size.height * anchorPoint.y);
  CGPoint oldPoint = CGPointMake(view.bounds.size.width * view.layer.anchorPoint.x,
  view.bounds.size.height * view.layer.anchorPoint.y);
  
  newPoint = CGPointApplyAffineTransform(newPoint, view.transform);
  oldPoint = CGPointApplyAffineTransform(oldPoint, view.transform);
  
  CGPoint position = view.layer.position;
  
  position.x -= oldPoint.x;
  position.x += newPoint.x;
  
  position.y -= oldPoint.y;
  position.y += newPoint.y;
  
  view.layer.position = position;
  view.layer.anchorPoint = anchorPoint;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASTransformCommandConverter *transformCommandConverter = new_ASTransformCommandConverter_initWithNSString_(self->id__);
  [transformCommandConverter updateArgsWithNSObjectArray:args];
  return transformCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(args))->size_; i += 2) {
    NSString *attributeName = (NSString *) cast_chk(IOSObjectArray_Get(args, i), [NSString class]);
    switch (JreIndexOfStr(attributeName, (id[]){ @"translationX", @"translationY", @"translationZ", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY" }, 10)) {
      case 0:
      translationX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 1:
      translationY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 2:
      translationZ_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 3:
      rotation_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 4:
      rotationX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 5:
      rotationY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 6:
      scaleX_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 7:
      scaleY_ = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class])))) floatValue];
      break;
      case 8:
      transformPivotX_ = ((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class]));
      break;
      case 9:
      transformPivotY_ = ((JavaLangFloat *) cast_chk(IOSObjectArray_Get(args, i + 1), [JavaLangFloat class]));
      break;
      default:
      break;
    }
  }
}

- (void)updatePhaseArgsWithNSObjectArray:(IOSObjectArray *)args {
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

- (id)getValueWithNSString:(NSString *)attributeName {
  switch (JreIndexOfStr(attributeName, (id[]){ @"translationX", @"translationY", @"translationZ", @"rotation", @"rotationX", @"rotationY", @"scaleX", @"scaleY", @"transformPivotX", @"transformPivotY" }, 10)) {
    case 0:
    return JavaLangFloat_valueOfWithFloat_(translationX_);
    case 1:
    return JavaLangFloat_valueOfWithFloat_(translationY_);
    case 2:
    return JavaLangFloat_valueOfWithFloat_(translationZ_);
    case 3:
    return JavaLangFloat_valueOfWithFloat_(rotation_);
    case 4:
    return JavaLangFloat_valueOfWithFloat_(rotationX_);
    case 5:
    return JavaLangFloat_valueOfWithFloat_(rotationY_);
    case 6:
    return JavaLangFloat_valueOfWithFloat_(scaleX_);
    case 7:
    return JavaLangFloat_valueOfWithFloat_(scaleY_);
    case 8:
    return transformPivotX_;
    case 9:
    return transformPivotY_;
    default:
    break;
  }
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 5, 6, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 7, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 9, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 10, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 11, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(resetTranformWithId:);
  methods[3].selector = @selector(updateTranformWithId:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withFloat:withJavaLangFloat:withJavaLangFloat:);
  methods[4].selector = @selector(newInstanceWithNSObjectArray:);
  methods[5].selector = @selector(updateArgsWithNSObjectArray:);
  methods[6].selector = @selector(updatePhaseArgsWithNSObjectArray:);
  methods[7].selector = @selector(executeAfterPostMeasure);
  methods[8].selector = @selector(getValueWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "translationX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "translationY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "translationZ_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rotation_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rotationX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rotationY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleX_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scaleY_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transformPivotX_", "LJavaLangFloat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "transformPivotY_", "LJavaLangFloat;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "resetTranform", "LNSObject;", "updateTranform", "LNSObject;FFFFFFFFLJavaLangFloat;LJavaLangFloat;", "newInstance", "[LNSObject;", "updateArgs", "updatePhaseArgs", "getValue" };
  static const J2ObjcClassInfo _ASTransformCommandConverter = { "TransformCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 9, 10, -1, -1, -1, -1, -1 };
  return &_ASTransformCommandConverter;
}

@end

void ASTransformCommandConverter_initWithNSString_(ASTransformCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
  self->scaleX_ = 1;
  self->scaleY_ = 1;
}

ASTransformCommandConverter *new_ASTransformCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASTransformCommandConverter, initWithNSString_, id_)
}

ASTransformCommandConverter *create_ASTransformCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASTransformCommandConverter, initWithNSString_, id_)
}

void ASTransformCommandConverter_resetTranformWithId_(ASTransformCommandConverter *self, id uiView) {
  if (@available(iOS 13.0, *)) {
    ((UIView*)uiView).transform3D = CATransform3DIdentity;
  } else {
    ((UIView*)uiView).transform = CGAffineTransformIdentity;
  }
}

void ASTransformCommandConverter_updateTranformWithId_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withFloat_withJavaLangFloat_withJavaLangFloat_(ASTransformCommandConverter *self, id view, jfloat translationX, jfloat translationY, jfloat translationZ, jfloat rotation, jfloat rotationX, jfloat rotationY, jfloat scaleX, jfloat scaleY, JavaLangFloat *anchorX, JavaLangFloat *anchorY) {
  UIView * uiView = ((UIView *) view);
  
  if (anchorX != nil && anchorY != nil) {
    [self setAnchorPoint:CGPointMake([anchorX floatValue], [anchorY floatValue]) forView:uiView];
  }
  if (@available(iOS 13.0, *)) {
    CATransform3D tranform = CATransform3DTranslate(uiView.transform3D, translationX, translationY, translationZ);
    if (rotation > 0) {
      tranform = CATransform3DRotate(tranform, degreesToRadians(rotation),0 ,0, 1);
    }
    if (rotationY > 0) {
      tranform = CATransform3DRotate(tranform, degreesToRadians(rotationY),0 ,1, 0);
    }
    if (rotationX > 0) {
      tranform = CATransform3DRotate(tranform, degreesToRadians(rotationX),1 ,0, 0);
    }
    tranform = CATransform3DScale(tranform, scaleX, scaleY, 1);
    [uiView setTransform3D:tranform];
  } else {
    CGAffineTransform tranform = CGAffineTransformTranslate(uiView.transform, translationX, translationY);
    tranform = CGAffineTransformRotate(tranform, degreesToRadians(rotation));
    tranform = CGAffineTransformScale(tranform, scaleX, scaleY);
    [uiView setTransform:tranform];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTransformCommandConverter)
