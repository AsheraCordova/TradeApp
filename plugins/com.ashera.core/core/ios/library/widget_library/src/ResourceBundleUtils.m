//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\utils\ResourceBundleUtils.java
//

#include "IFragment.h"
#include "J2ObjC_source.h"
#include "ResourceBundleUtils.h"
#include "java/util/HashMap.h"
#include "java/util/Locale.h"
#include "java/util/Properties.h"
#include "java/util/ResourceBundle.h"

@class JavaUtilHashMap;
@class JavaUtilResourceBundle;


@interface ASResourceBundleUtils ()

+ (JavaUtilResourceBundle *)getRSWithNSString:(NSString *)bundle;

@end

inline JavaUtilHashMap *ASResourceBundleUtils_get_cache(void);
inline JavaUtilHashMap *ASResourceBundleUtils_set_cache(JavaUtilHashMap *value);
static JavaUtilHashMap *ASResourceBundleUtils_cache;
J2OBJC_STATIC_FIELD_OBJ(ASResourceBundleUtils, cache, JavaUtilHashMap *)

__attribute__((unused)) static JavaUtilResourceBundle *ASResourceBundleUtils_getRSWithNSString_(NSString *bundle);

J2OBJC_INITIALIZED_DEFN(ASResourceBundleUtils)

@implementation ASResourceBundleUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASResourceBundleUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)getStringWithNSString:(NSString *)bundle
                       withNSString:(NSString *)prefix
                       withNSString:(NSString *)resourceOrText
                    withASIFragment:(id<ASIFragment>)fragment {
  return ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(bundle, prefix, resourceOrText, fragment);
}

+ (JavaUtilResourceBundle *)getRSWithNSString:(NSString *)bundle {
  return ASResourceBundleUtils_getRSWithNSString_(bundle);
}

+ (NSString *)getStringWithNSString:(NSString *)bundle
                       withNSString:(NSString *)key
                    withASIFragment:(id<ASIFragment>)fragment {
  return ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(bundle, key, fragment);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilResourceBundle;", 0xa, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getStringWithNSString:withNSString:withNSString:withASIFragment:);
  methods[2].selector = @selector(getRSWithNSString:);
  methods[3].selector = @selector(getStringWithNSString:withNSString:withASIFragment:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "cache", "LJavaUtilHashMap;", .constantValue.asLong = 0, 0xa, -1, 5, 6, -1 },
  };
  static const void *ptrTable[] = { "getString", "LNSString;LNSString;LNSString;LASIFragment;", "getRS", "LNSString;", "LNSString;LNSString;LASIFragment;", &ASResourceBundleUtils_cache, "Ljava/util/HashMap<Ljava/lang/String;Ljava/util/ResourceBundle;>;" };
  static const J2ObjcClassInfo _ASResourceBundleUtils = { "ResourceBundleUtils", "com.ashera.utils", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ASResourceBundleUtils;
}

+ (void)initialize {
  if (self == [ASResourceBundleUtils class]) {
    JreStrongAssignAndConsume(&ASResourceBundleUtils_cache, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ASResourceBundleUtils)
  }
}

@end

void ASResourceBundleUtils_init(ASResourceBundleUtils *self) {
  NSObject_init(self);
}

ASResourceBundleUtils *new_ASResourceBundleUtils_init() {
  J2OBJC_NEW_IMPL(ASResourceBundleUtils, init)
}

ASResourceBundleUtils *create_ASResourceBundleUtils_init() {
  J2OBJC_CREATE_IMPL(ASResourceBundleUtils, init)
}

NSString *ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(NSString *bundle, NSString *prefix, NSString *resourceOrText, id<ASIFragment> fragment) {
  ASResourceBundleUtils_initialize();
  if (resourceOrText == nil) {
    return nil;
  }
  if ([((id<ASIFragment>) nil_chk(fragment)) hasDevDataWithNSString:bundle]) {
    NSString *resPrefix = JreStrcat("C$C", '@', prefix, '/');
    if ([resourceOrText java_hasPrefix:resPrefix]) {
      JavaUtilProperties *properties = (JavaUtilProperties *) cast_chk([fragment getDevDataWithNSString:bundle], [JavaUtilProperties class]);
      NSString *value = nil;
      while ([((NSString *) nil_chk(resourceOrText)) java_hasPrefix:resPrefix]) {
        NSString *key1 = [resourceOrText java_replaceFirst:resPrefix withReplacement:@""];
        if ([((JavaUtilProperties *) nil_chk(properties)) containsKeyWithId:key1]) {
          value = [properties getPropertyWithNSString:key1];
          resourceOrText = value;
        }
        else {
          break;
        }
      }
      return value;
    }
  }
  else {
    NSString *resPrefix = JreStrcat("C$C", '@', prefix, '/');
    if ([resourceOrText java_hasPrefix:resPrefix]) {
      JavaUtilResourceBundle *resourceBundle = ASResourceBundleUtils_getRSWithNSString_(bundle);
      NSString *value = nil;
      while ([((NSString *) nil_chk(resourceOrText)) java_hasPrefix:resPrefix]) {
        NSString *key1 = [resourceOrText java_replaceFirst:resPrefix withReplacement:@""];
        if ([((JavaUtilResourceBundle *) nil_chk(resourceBundle)) containsKeyWithNSString:key1]) {
          value = [resourceBundle getStringWithNSString:key1];
          resourceOrText = value;
        }
        else {
          break;
        }
      }
      return value;
    }
  }
  return resourceOrText;
}

JavaUtilResourceBundle *ASResourceBundleUtils_getRSWithNSString_(NSString *bundle) {
  ASResourceBundleUtils_initialize();
  JavaUtilLocale *locale = JavaUtilLocale_getDefault();
  NSString *cacheKey = JreStrcat("$$", bundle, [((JavaUtilLocale *) nil_chk(locale)) description]);
  if ([((JavaUtilHashMap *) nil_chk(ASResourceBundleUtils_cache)) containsKeyWithId:cacheKey]) {
    return [((JavaUtilHashMap *) nil_chk(ASResourceBundleUtils_cache)) getWithId:cacheKey];
  }
  JavaUtilResourceBundle *resourceBundle = JavaUtilResourceBundle_getBundleWithNSString_withJavaUtilLocale_(bundle, locale);
  [((JavaUtilHashMap *) nil_chk(ASResourceBundleUtils_cache)) putWithId:cacheKey withId:resourceBundle];
  return resourceBundle;
}

NSString *ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(NSString *bundle, NSString *key, id<ASIFragment> fragment) {
  ASResourceBundleUtils_initialize();
  NSString *value = nil;
  if (fragment != nil && [fragment hasDevDataWithNSString:bundle]) {
    JavaUtilProperties *properties = (JavaUtilProperties *) cast_chk([fragment getDevDataWithNSString:bundle], [JavaUtilProperties class]);
    value = (NSString *) cast_chk([((JavaUtilProperties *) nil_chk(properties)) getWithId:key], [NSString class]);
  }
  else {
    JavaUtilResourceBundle *resourceBundle = ASResourceBundleUtils_getRSWithNSString_(bundle);
    if ([((JavaUtilResourceBundle *) nil_chk(resourceBundle)) containsKeyWithNSString:key]) {
      value = [resourceBundle getStringWithNSString:key];
    }
  }
  return value;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASResourceBundleUtils)
