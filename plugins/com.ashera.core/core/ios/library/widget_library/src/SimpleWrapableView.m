//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\SimpleWrapableView.java
//

#include "HasWidgets.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "SimpleWrapableView.h"
#include "java/util/Arrays.h"
#include "java/util/List.h"


@interface ASSimpleWrapableView () {
 @public
  id foreground_;
  __unsafe_unretained id wrapperViewHolder_;
  jboolean disableForeground_;
  jint viewtype_;
}

@end

J2OBJC_FIELD_SETTER(ASSimpleWrapableView, foreground_, id)

@implementation ASSimpleWrapableView

- (jint)getViewtype {
  return viewtype_;
}

- (jboolean)isDisableForeground {
  return disableForeground_;
}

- (void)setDisableForegroundWithBoolean:(jboolean)disableForeground {
  self->disableForeground_ = disableForeground;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget
                          withInt:(jint)viewtype {
  ASSimpleWrapableView_initWithASIWidget_withInt_(self, widget, viewtype);
  return self;
}

- (id<JavaUtilList>)getNativeWidgets {
  if (viewtype_ == -1) {
    return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ wrappedView_ } count:1 type:NSObject_class_()]);
  }
  if (foreground_ != nil) {
    return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ wrapperViewHolder_, wrappedView_, foreground_ } count:3 type:NSObject_class_()]);
  }
  return JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray arrayWithObjects:(id[]){ wrapperViewHolder_, wrappedView_ } count:2 type:NSObject_class_()]);
}

- (id)asNativeWidget {
  if (viewtype_ == -1) {
    return wrappedView_;
  }
  return wrapperViewHolder_;
}

- (void)setWrappedViewWithId:(id)wrappedView {
  self->wrappedView_ = wrappedView;
}

- (id)getWrappedView {
  return wrappedView_;
}

- (id)getWrapperViewHolder {
  return wrapperViewHolder_;
}

- (jboolean)isViewWrapped {
  return viewtype_ != -1;
}

- (id)getForeground {
  return foreground_;
}

- (void)setForegroundWithId:(id)foreground {
  JreStrongAssign(&self->foreground_, foreground);
}

- (void)__javaClone:(ASSimpleWrapableView *)original {
  [super __javaClone:original];
  [wrappedView_ release];
  [wrapperViewHolder_ release];
}

- (void)dealloc {
  RELEASE_(foreground_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 3, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getViewtype);
  methods[1].selector = @selector(isDisableForeground);
  methods[2].selector = @selector(setDisableForegroundWithBoolean:);
  methods[3].selector = @selector(initWithASIWidget:withInt:);
  methods[4].selector = @selector(getNativeWidgets);
  methods[5].selector = @selector(asNativeWidget);
  methods[6].selector = @selector(setWrappedViewWithId:);
  methods[7].selector = @selector(getWrappedView);
  methods[8].selector = @selector(getWrapperViewHolder);
  methods[9].selector = @selector(isViewWrapped);
  methods[10].selector = @selector(getForeground);
  methods[11].selector = @selector(setForegroundWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "wrappedView_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "foreground_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "wrapperViewHolder_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "disableForeground_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "viewtype_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setDisableForeground", "Z", "LASIWidget;I", "()Ljava/util/List<Ljava/lang/Object;>;", "setWrappedView", "LNSObject;", "setForeground" };
  static const J2ObjcClassInfo _ASSimpleWrapableView = { "SimpleWrapableView", "com.ashera.widget", ptrTable, methods, fields, 7, 0x1, 12, 5, -1, -1, -1, -1, -1 };
  return &_ASSimpleWrapableView;
}

@end

void ASSimpleWrapableView_initWithASIWidget_withInt_(ASSimpleWrapableView *self, id<ASIWidget> widget, jint viewtype) {
  NSObject_init(self);
  self->viewtype_ = viewtype;
  if (viewtype != -1) {
    self->wrapperViewHolder_ = [((id<ASIWidget>) nil_chk(widget)) createWrapperViewHolderWithInt:viewtype];
  }
  else {
    self->wrapperViewHolder_ = [((id<ASHasWidgets>) nil_chk([((id<ASIWidget>) nil_chk(widget)) getParent])) asNativeWidget];
  }
  self->wrappedView_ = [widget createWrapperViewWithId:self->wrapperViewHolder_ withInt:viewtype];
}

ASSimpleWrapableView *new_ASSimpleWrapableView_initWithASIWidget_withInt_(id<ASIWidget> widget, jint viewtype) {
  J2OBJC_NEW_IMPL(ASSimpleWrapableView, initWithASIWidget_withInt_, widget, viewtype)
}

ASSimpleWrapableView *create_ASSimpleWrapableView_initWithASIWidget_withInt_(id<ASIWidget> widget, jint viewtype) {
  J2OBJC_CREATE_IMPL(ASSimpleWrapableView, initWithASIWidget_withInt_, widget, viewtype)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASSimpleWrapableView)
