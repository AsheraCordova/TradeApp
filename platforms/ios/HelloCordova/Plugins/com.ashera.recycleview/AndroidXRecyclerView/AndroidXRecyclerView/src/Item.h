//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\com\xwray\groupie\Item.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Item")
#ifdef RESTRICT_Item
#define INCLUDE_ALL_Item 0
#else
#define INCLUDE_ALL_Item 1
#endif
#undef RESTRICT_Item

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXItem_) && (INCLUDE_ALL_Item || defined(INCLUDE_ADXItem))
#define ADXItem_

#define RESTRICT_RVGroup 1
#define INCLUDE_ADXRVGroup 1
#include "RVGroup.h"

#define RESTRICT_SpanSizeProvider 1
#define INCLUDE_ADXSpanSizeProvider 1
#include "SpanSizeProvider.h"

@class ADView;
@class ADXGroupieViewHolder;
@protocol ADXGroupDataObserver;
@protocol ADXOnItemClickListener;
@protocol ADXOnItemLongClickListener;
@protocol JavaUtilList;
@protocol JavaUtilMap;

@interface ADXItem : NSObject < ADXRVGroup, ADXSpanSizeProvider > {
 @public
  id<ADXGroupDataObserver> parentDataObserver_;
}

#pragma mark Public

- (instancetype)init;

- (void)bindWithADXGroupieViewHolder:(ADXGroupieViewHolder *)viewHolder
                             withInt:(jint)position;

/*!
 @brief If you don't specify how to handle payloads in your implementation, they'll be ignored and
  the adapter will do a full rebind.
 @param viewHolder The ViewHolder to bind
 @param position The adapter position
 @param payloads A list of payloads (may be empty)
 */
- (void)bindWithADXGroupieViewHolder:(ADXGroupieViewHolder *)viewHolder
                             withInt:(jint)position
                    withJavaUtilList:(id<JavaUtilList>)payloads;

/*!
 @brief Perform any actions required to set up the view for display.
 @param viewHolder The viewHolder to bind
 @param position The adapter position
 @param payloads Any payloads (this list may be empty)
 @param onItemClickListener An optional adapter-level click listener
 @param onItemLongClickListener An optional adapter-level long click listener
 */
- (void)bindWithADXGroupieViewHolder:(ADXGroupieViewHolder *)viewHolder
                             withInt:(jint)position
                    withJavaUtilList:(id<JavaUtilList>)payloads
          withADXOnItemClickListener:(id<ADXOnItemClickListener>)onItemClickListener
      withADXOnItemLongClickListener:(id<ADXOnItemLongClickListener>)onItemLongClickListener;

- (ADXGroupieViewHolder *)createViewHolderWithADView:(ADView *)itemView;

- (id)getChangePayloadWithADXItem:(ADXItem *)newItem;

- (jint)getDragDirs;

/*!
 @brief A set of key/value pairs stored on the ViewHolder that can be useful for distinguishing
  items of the same view type.
 @return The map of extras
 */
- (id<JavaUtilMap>)getExtras;

/*!
 @brief If you don't specify an id, this id is an auto-generated unique negative integer for each Item (the less
  likely to conflict with your model IDs.)
 <p>
  You may prefer to override it with the ID of a model object, for example the primary key of
  an object from a database that it represents.
 @return A unique id
 */
- (jlong)getId;

- (ADXItem *)getItemWithInt:(jint)position;

- (jint)getItemCount;

- (jint)getLayout;

- (jint)getPositionWithADXItem:(ADXItem *)item;

- (jint)getSpanSizeWithInt:(jint)spanCount
                   withInt:(jint)position;

- (jint)getSwipeDirs;

/*!
 @brief Override this method if the same layout needs to have different viewTypes.
 @return the viewType, defaults to the layoutId
 - seealso: RecyclerView.Adapter#getItemViewType(int)
 */
- (jint)getViewType;

/*!
 @brief Whether this item has the same content as another when compared using DiffUtil.
 After two items have been determined to be the same using <code>isSameAs(Item)</code> this function
  should check whether their contents are the same.
  The default implementation does this using <code>equals(Object)</code>
 @return True if both items have the same content, false otherwise
 */
- (jboolean)hasSameContentAsWithADXItem:(ADXItem *)other;

- (jboolean)isClickable;

- (jboolean)isLongClickable;

/*!
 @brief Whether the view should be recycled.Return false to prevent the view from being recycled.
 (Note that it may still be re-bound.)
 @return Whether the view should be recycled.
 - seealso: RecyclerView.Adapter#onFailedToRecycleView(RecyclerView.ViewHolder)
 */
- (jboolean)isRecyclable;

/*!
 @brief Whether two item objects represent the same underlying data when compared using DiffUtil,
  even if there has been a change in that data.
 <p>
  The default implementation compares both view type and id.
 @return True if the items are the same, false otherwise.
 */
- (jboolean)isSameAsWithADXItem:(ADXItem *)other;

- (void)notifyChanged;

- (void)notifyChangedWithId:(id)payload;

- (void)onViewAttachedToWindowWithADXGroupieViewHolder:(ADXGroupieViewHolder *)viewHolder;

- (void)onViewDetachedFromWindowWithADXGroupieViewHolder:(ADXGroupieViewHolder *)viewHolder;

- (void)registerGroupDataObserverWithADXGroupDataObserver:(id<ADXGroupDataObserver>)groupDataObserver;

/*!
 @brief Do any cleanup required for the viewholder to be reused.
 @param viewHolder The ViewHolder being recycled
 */
- (void)unbindWithADXGroupieViewHolder:(ADXGroupieViewHolder *)viewHolder;

- (void)unregisterGroupDataObserverWithADXGroupDataObserver:(id<ADXGroupDataObserver>)groupDataObserver;

#pragma mark Protected

- (instancetype)initWithLong:(jlong)id_;

@end

J2OBJC_STATIC_INIT(ADXItem)

J2OBJC_FIELD_SETTER(ADXItem, parentDataObserver_, id<ADXGroupDataObserver>)

FOUNDATION_EXPORT void ADXItem_init(ADXItem *self);

FOUNDATION_EXPORT void ADXItem_initWithLong_(ADXItem *self, jlong id_);

J2OBJC_TYPE_LITERAL_HEADER(ADXItem)

@compatibility_alias ComXwrayGroupieItem ADXItem;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Item")
