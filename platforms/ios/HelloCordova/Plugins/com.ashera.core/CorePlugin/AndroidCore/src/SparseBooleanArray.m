//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\SparseBooleanArray.java
//

#include "ContainerHelpers.h"
#include "GrowingArrayUtils.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "SparseBooleanArray.h"
#include "java/lang/CloneNotSupportedException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"


@interface ADSparseBooleanArray () {
 @public
  IOSIntArray *mKeys_;
  IOSBooleanArray *mValues_;
  jint mSize_;
}

@end

J2OBJC_FIELD_SETTER(ADSparseBooleanArray, mKeys_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADSparseBooleanArray, mValues_, IOSBooleanArray *)

@implementation ADSparseBooleanArray

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADSparseBooleanArray_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)initialCapacity {
  ADSparseBooleanArray_initWithInt_(self, initialCapacity);
  return self;
}

- (ADSparseBooleanArray *)java_clone {
  ADSparseBooleanArray *clone = nil;
  @try {
    clone = (ADSparseBooleanArray *) cast_chk([super java_clone], [ADSparseBooleanArray class]);
    JreStrongAssign(&((ADSparseBooleanArray *) nil_chk(clone))->mKeys_, [((IOSIntArray *) nil_chk(mKeys_)) java_clone]);
    JreStrongAssign(&clone->mValues_, [((IOSBooleanArray *) nil_chk(mValues_)) java_clone]);
  }
  @catch (JavaLangCloneNotSupportedException *cnse) {
  }
  return clone;
}

- (jboolean)getWithInt:(jint)key {
  return [self getWithInt:key withBoolean:false];
}

- (jboolean)getWithInt:(jint)key
           withBoolean:(jboolean)valueIfKeyNotFound {
  jint i = ADContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
  if (i < 0) {
    return valueIfKeyNotFound;
  }
  else {
    return IOSBooleanArray_Get(nil_chk(mValues_), i);
  }
}

- (void)delete__WithInt:(jint)key {
  jint i = ADContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
  if (i >= 0) {
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, i + 1, mKeys_, i, mSize_ - (i + 1));
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, i + 1, mValues_, i, mSize_ - (i + 1));
    mSize_--;
  }
}

- (void)removeAtWithInt:(jint)index {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mKeys_, index + 1, mKeys_, index, mSize_ - (index + 1));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValues_, index + 1, mValues_, index, mSize_ - (index + 1));
  mSize_--;
}

- (void)putWithInt:(jint)key
       withBoolean:(jboolean)value {
  jint i = ADContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
  if (i >= 0) {
    *IOSBooleanArray_GetRef(nil_chk(mValues_), i) = value;
  }
  else {
    i = ~i;
    JreStrongAssign(&mKeys_, ADGrowingArrayUtils_insertWithIntArray_withInt_withInt_withInt_(mKeys_, mSize_, i, key));
    JreStrongAssign(&mValues_, ADGrowingArrayUtils_insertWithBooleanArray_withInt_withInt_withBoolean_(mValues_, mSize_, i, value));
    mSize_++;
  }
}

- (jint)size {
  return mSize_;
}

- (jint)keyAtWithInt:(jint)index {
  return IOSIntArray_Get(nil_chk(mKeys_), index);
}

- (jboolean)valueAtWithInt:(jint)index {
  return IOSBooleanArray_Get(nil_chk(mValues_), index);
}

- (void)setValueAtWithInt:(jint)index
              withBoolean:(jboolean)value {
  *IOSBooleanArray_GetRef(nil_chk(mValues_), index) = value;
}

- (jint)indexOfKeyWithInt:(jint)key {
  return ADContainerHelpers_binarySearchWithIntArray_withInt_withInt_(mKeys_, mSize_, key);
}

- (jint)indexOfValueWithBoolean:(jboolean)value {
  for (jint i = 0; i < mSize_; i++) if (IOSBooleanArray_Get(nil_chk(mValues_), i) == value) return i;
  return -1;
}

- (void)clear {
  mSize_ = 0;
}

- (void)appendWithInt:(jint)key
          withBoolean:(jboolean)value {
  if (mSize_ != 0 && key <= IOSIntArray_Get(nil_chk(mKeys_), mSize_ - 1)) {
    [self putWithInt:key withBoolean:value];
    return;
  }
  JreStrongAssign(&mKeys_, ADGrowingArrayUtils_appendWithIntArray_withInt_withInt_(mKeys_, mSize_, key));
  JreStrongAssign(&mValues_, ADGrowingArrayUtils_appendWithBooleanArray_withInt_withBoolean_(mValues_, mSize_, value));
  mSize_++;
}

- (NSString *)description {
  if ([self size] <= 0) {
    return @"{}";
  }
  JavaLangStringBuilder *buffer = create_JavaLangStringBuilder_initWithInt_(mSize_ * 28);
  [buffer appendWithChar:'{'];
  for (jint i = 0; i < mSize_; i++) {
    if (i > 0) {
      [buffer appendWithNSString:@", "];
    }
    jint key = [self keyAtWithInt:i];
    [buffer appendWithInt:key];
    [buffer appendWithChar:'='];
    jboolean value = [self valueAtWithInt:i];
    [buffer appendWithBoolean:value];
  }
  [buffer appendWithChar:'}'];
  return [buffer description];
}

- (void)dealloc {
  RELEASE_(mKeys_);
  RELEASE_(mValues_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADSparseBooleanArray;", 0x1, 1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 7, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 14, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(java_clone);
  methods[3].selector = @selector(getWithInt:);
  methods[4].selector = @selector(getWithInt:withBoolean:);
  methods[5].selector = @selector(delete__WithInt:);
  methods[6].selector = @selector(removeAtWithInt:);
  methods[7].selector = @selector(putWithInt:withBoolean:);
  methods[8].selector = @selector(size);
  methods[9].selector = @selector(keyAtWithInt:);
  methods[10].selector = @selector(valueAtWithInt:);
  methods[11].selector = @selector(setValueAtWithInt:withBoolean:);
  methods[12].selector = @selector(indexOfKeyWithInt:);
  methods[13].selector = @selector(indexOfValueWithBoolean:);
  methods[14].selector = @selector(clear);
  methods[15].selector = @selector(appendWithInt:withBoolean:);
  methods[16].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mKeys_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mValues_", "[Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSize_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "clone", "get", "IZ", "delete", "removeAt", "put", "keyAt", "valueAt", "setValueAt", "indexOfKey", "indexOfValue", "Z", "append", "toString" };
  static const J2ObjcClassInfo _ADSparseBooleanArray = { "SparseBooleanArray", "r.android.util", ptrTable, methods, fields, 7, 0x1, 17, 3, -1, -1, -1, -1, -1 };
  return &_ADSparseBooleanArray;
}

@end

void ADSparseBooleanArray_init(ADSparseBooleanArray *self) {
  ADSparseBooleanArray_initWithInt_(self, 10);
}

ADSparseBooleanArray *new_ADSparseBooleanArray_init() {
  J2OBJC_NEW_IMPL(ADSparseBooleanArray, init)
}

ADSparseBooleanArray *create_ADSparseBooleanArray_init() {
  J2OBJC_CREATE_IMPL(ADSparseBooleanArray, init)
}

void ADSparseBooleanArray_initWithInt_(ADSparseBooleanArray *self, jint initialCapacity) {
  NSObject_init(self);
  if (initialCapacity == 0) {
    JreStrongAssignAndConsume(&self->mKeys_, [IOSIntArray newArrayWithLength:0]);
    JreStrongAssignAndConsume(&self->mValues_, [IOSBooleanArray newArrayWithLength:0]);
  }
  else {
    JreStrongAssignAndConsume(&self->mKeys_, [IOSIntArray newArrayWithLength:initialCapacity]);
    JreStrongAssignAndConsume(&self->mValues_, [IOSBooleanArray newArrayWithLength:self->mKeys_->size_]);
  }
  self->mSize_ = 0;
}

ADSparseBooleanArray *new_ADSparseBooleanArray_initWithInt_(jint initialCapacity) {
  J2OBJC_NEW_IMPL(ADSparseBooleanArray, initWithInt_, initialCapacity)
}

ADSparseBooleanArray *create_ADSparseBooleanArray_initWithInt_(jint initialCapacity) {
  J2OBJC_CREATE_IMPL(ADSparseBooleanArray, initWithInt_, initialCapacity)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADSparseBooleanArray)
