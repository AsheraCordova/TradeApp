//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\ViewBoundsCheck.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "View.h"
#include "ViewBoundsCheck.h"
#include "java/lang/annotation/Annotation.h"
#include "java/lang/annotation/Retention.h"
#include "java/lang/annotation/RetentionPolicy.h"


@interface ADXViewBoundsCheck_ViewBounds : NSObject

@end

__attribute__((unused)) static IOSObjectArray *ADXViewBoundsCheck_ViewBounds__Annotations$0(void);

@interface ADXViewBoundsCheck_Callback : NSObject

@end

@implementation ADXViewBoundsCheck

- (instancetype)initPackagePrivateWithADXViewBoundsCheck_Callback:(id<ADXViewBoundsCheck_Callback>)callback {
  ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(self, callback);
  return self;
}

- (ADView *)findOneViewWithinBoundFlagsWithInt:(jint)fromIndex
                                       withInt:(jint)toIndex
                                       withInt:(jint)preferredBoundFlags
                                       withInt:(jint)acceptableBoundFlags {
  jint start = [((id<ADXViewBoundsCheck_Callback>) nil_chk(mCallback_)) getParentStart];
  jint end = [mCallback_ getParentEnd];
  jint next = toIndex > fromIndex ? 1 : -1;
  ADView *acceptableMatch = nil;
  for (jint i = fromIndex; i != toIndex; i += next) {
    ADView *child = [mCallback_ getChildAtWithInt:i];
    jint childStart = [mCallback_ getChildStartWithADView:child];
    jint childEnd = [mCallback_ getChildEndWithADView:child];
    [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) setBoundsWithInt:start withInt:end withInt:childStart withInt:childEnd];
    if (preferredBoundFlags != 0) {
      [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) resetFlags];
      [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) addFlagsWithInt:preferredBoundFlags];
      if ([((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) boundsMatch]) {
        return child;
      }
    }
    if (acceptableBoundFlags != 0) {
      [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) resetFlags];
      [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) addFlagsWithInt:acceptableBoundFlags];
      if ([((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) boundsMatch]) {
        acceptableMatch = child;
      }
    }
  }
  return acceptableMatch;
}

- (jboolean)isViewWithinBoundFlagsWithADView:(ADView *)child
                                     withInt:(jint)boundsFlags {
  [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) setBoundsWithInt:[((id<ADXViewBoundsCheck_Callback>) nil_chk(mCallback_)) getParentStart] withInt:[mCallback_ getParentEnd] withInt:[mCallback_ getChildStartWithADView:child] withInt:[mCallback_ getChildEndWithADView:child]];
  if (boundsFlags != 0) {
    [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) resetFlags];
    [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) addFlagsWithInt:boundsFlags];
    return [((ADXViewBoundsCheck_BoundFlags *) nil_chk(mBoundFlags_)) boundsMatch];
  }
  return false;
}

- (void)dealloc {
  RELEASE_(mCallback_);
  RELEASE_(mBoundFlags_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 3, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initPackagePrivateWithADXViewBoundsCheck_Callback:);
  methods[1].selector = @selector(findOneViewWithinBoundFlagsWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(isViewWithinBoundFlagsWithADView:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "GT", "I", .constantValue.asInt = ADXViewBoundsCheck_GT, 0x18, -1, -1, -1, -1 },
    { "EQ", "I", .constantValue.asInt = ADXViewBoundsCheck_EQ, 0x18, -1, -1, -1, -1 },
    { "LT", "I", .constantValue.asInt = ADXViewBoundsCheck_LT, 0x18, -1, -1, -1, -1 },
    { "CVS_PVS_POS", "I", .constantValue.asInt = ADXViewBoundsCheck_CVS_PVS_POS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVS_GT_PVS", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVS_GT_PVS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVS_EQ_PVS", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVS_EQ_PVS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVS_LT_PVS", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVS_LT_PVS, 0x18, -1, -1, -1, -1 },
    { "CVS_PVE_POS", "I", .constantValue.asInt = ADXViewBoundsCheck_CVS_PVE_POS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVS_GT_PVE", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVS_GT_PVE, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVS_EQ_PVE", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVS_EQ_PVE, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVS_LT_PVE", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVS_LT_PVE, 0x18, -1, -1, -1, -1 },
    { "CVE_PVS_POS", "I", .constantValue.asInt = ADXViewBoundsCheck_CVE_PVS_POS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVE_GT_PVS", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVE_GT_PVS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVE_EQ_PVS", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVE_EQ_PVS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVE_LT_PVS", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVE_LT_PVS, 0x18, -1, -1, -1, -1 },
    { "CVE_PVE_POS", "I", .constantValue.asInt = ADXViewBoundsCheck_CVE_PVE_POS, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVE_GT_PVE", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVE_GT_PVE, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVE_EQ_PVE", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVE_EQ_PVE, 0x18, -1, -1, -1, -1 },
    { "FLAG_CVE_LT_PVE", "I", .constantValue.asInt = ADXViewBoundsCheck_FLAG_CVE_LT_PVE, 0x18, -1, -1, -1, -1 },
    { "MASK", "I", .constantValue.asInt = ADXViewBoundsCheck_MASK, 0x18, -1, -1, -1, -1 },
    { "mCallback_", "LADXViewBoundsCheck_Callback;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mBoundFlags_", "LADXViewBoundsCheck_BoundFlags;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXViewBoundsCheck_Callback;", "findOneViewWithinBoundFlags", "IIII", "isViewWithinBoundFlags", "LADView;I", "LADXViewBoundsCheck_ViewBounds;LADXViewBoundsCheck_BoundFlags;LADXViewBoundsCheck_Callback;" };
  static const J2ObjcClassInfo _ADXViewBoundsCheck = { "ViewBoundsCheck", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x0, 3, 22, -1, 5, -1, -1, -1 };
  return &_ADXViewBoundsCheck;
}

@end

void ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(ADXViewBoundsCheck *self, id<ADXViewBoundsCheck_Callback> callback) {
  NSObject_init(self);
  JreStrongAssign(&self->mCallback_, callback);
  JreStrongAssignAndConsume(&self->mBoundFlags_, new_ADXViewBoundsCheck_BoundFlags_init());
}

ADXViewBoundsCheck *new_ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(id<ADXViewBoundsCheck_Callback> callback) {
  J2OBJC_NEW_IMPL(ADXViewBoundsCheck, initPackagePrivateWithADXViewBoundsCheck_Callback_, callback)
}

ADXViewBoundsCheck *create_ADXViewBoundsCheck_initPackagePrivateWithADXViewBoundsCheck_Callback_(id<ADXViewBoundsCheck_Callback> callback) {
  J2OBJC_CREATE_IMPL(ADXViewBoundsCheck, initPackagePrivateWithADXViewBoundsCheck_Callback_, callback)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXViewBoundsCheck)

@implementation ADXViewBoundsCheck_ViewBounds

+ (const J2ObjcClassInfo *)__metadata {
  static const void *ptrTable[] = { "LADXViewBoundsCheck;", (void *)&ADXViewBoundsCheck_ViewBounds__Annotations$0 };
  static const J2ObjcClassInfo _ADXViewBoundsCheck_ViewBounds = { "ViewBounds", "androidx.recyclerview.widget", ptrTable, NULL, NULL, 7, 0x2609, 0, 0, 0, -1, -1, -1, 1 };
  return &_ADXViewBoundsCheck_ViewBounds;
}

@end

IOSObjectArray *ADXViewBoundsCheck_ViewBounds__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangAnnotationRetention(JreLoadEnum(JavaLangAnnotationRetentionPolicy, SOURCE)) } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXViewBoundsCheck_ViewBounds)

@implementation ADXViewBoundsCheck_BoundFlags

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXViewBoundsCheck_BoundFlags_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setBoundsWithInt:(jint)rvStart
                 withInt:(jint)rvEnd
                 withInt:(jint)childStart
                 withInt:(jint)childEnd {
  mRvStart_ = rvStart;
  mRvEnd_ = rvEnd;
  mChildStart_ = childStart;
  mChildEnd_ = childEnd;
}

- (void)addFlagsWithInt:(jint)flags {
  mBoundFlags_ |= flags;
}

- (void)resetFlags {
  mBoundFlags_ = 0;
}

- (jint)compareWithInt:(jint)x
               withInt:(jint)y {
  if (x > y) {
    return ADXViewBoundsCheck_GT;
  }
  if (x == y) {
    return ADXViewBoundsCheck_EQ;
  }
  return ADXViewBoundsCheck_LT;
}

- (jboolean)boundsMatch {
  if ((mBoundFlags_ & (JreLShift32(ADXViewBoundsCheck_MASK, ADXViewBoundsCheck_CVS_PVS_POS))) != 0) {
    if ((mBoundFlags_ & (JreLShift32([self compareWithInt:mChildStart_ withInt:mRvStart_], ADXViewBoundsCheck_CVS_PVS_POS))) == 0) {
      return false;
    }
  }
  if ((mBoundFlags_ & (JreLShift32(ADXViewBoundsCheck_MASK, ADXViewBoundsCheck_CVS_PVE_POS))) != 0) {
    if ((mBoundFlags_ & (JreLShift32([self compareWithInt:mChildStart_ withInt:mRvEnd_], ADXViewBoundsCheck_CVS_PVE_POS))) == 0) {
      return false;
    }
  }
  if ((mBoundFlags_ & (JreLShift32(ADXViewBoundsCheck_MASK, ADXViewBoundsCheck_CVE_PVS_POS))) != 0) {
    if ((mBoundFlags_ & (JreLShift32([self compareWithInt:mChildEnd_ withInt:mRvStart_], ADXViewBoundsCheck_CVE_PVS_POS))) == 0) {
      return false;
    }
  }
  if ((mBoundFlags_ & (JreLShift32(ADXViewBoundsCheck_MASK, ADXViewBoundsCheck_CVE_PVE_POS))) != 0) {
    if ((mBoundFlags_ & (JreLShift32([self compareWithInt:mChildEnd_ withInt:mRvEnd_], ADXViewBoundsCheck_CVE_PVE_POS))) == 0) {
      return false;
    }
  }
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setBoundsWithInt:withInt:withInt:withInt:);
  methods[2].selector = @selector(addFlagsWithInt:);
  methods[3].selector = @selector(resetFlags);
  methods[4].selector = @selector(compareWithInt:withInt:);
  methods[5].selector = @selector(boundsMatch);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mBoundFlags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRvStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRvEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mChildStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mChildEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setBounds", "IIII", "addFlags", "I", "compare", "II", "LADXViewBoundsCheck;" };
  static const J2ObjcClassInfo _ADXViewBoundsCheck_BoundFlags = { "BoundFlags", "androidx.recyclerview.widget", ptrTable, methods, fields, 7, 0x8, 6, 5, 6, -1, -1, -1, -1 };
  return &_ADXViewBoundsCheck_BoundFlags;
}

@end

void ADXViewBoundsCheck_BoundFlags_init(ADXViewBoundsCheck_BoundFlags *self) {
  NSObject_init(self);
  self->mBoundFlags_ = 0;
}

ADXViewBoundsCheck_BoundFlags *new_ADXViewBoundsCheck_BoundFlags_init() {
  J2OBJC_NEW_IMPL(ADXViewBoundsCheck_BoundFlags, init)
}

ADXViewBoundsCheck_BoundFlags *create_ADXViewBoundsCheck_BoundFlags_init() {
  J2OBJC_CREATE_IMPL(ADXViewBoundsCheck_BoundFlags, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXViewBoundsCheck_BoundFlags)

@implementation ADXViewBoundsCheck_Callback

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADView;", 0x401, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x401, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getChildAtWithInt:);
  methods[1].selector = @selector(getParentStart);
  methods[2].selector = @selector(getParentEnd);
  methods[3].selector = @selector(getChildStartWithADView:);
  methods[4].selector = @selector(getChildEndWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getChildAt", "I", "getChildStart", "LADView;", "getChildEnd", "LADXViewBoundsCheck;" };
  static const J2ObjcClassInfo _ADXViewBoundsCheck_Callback = { "Callback", "androidx.recyclerview.widget", ptrTable, methods, NULL, 7, 0x608, 5, 0, 5, -1, -1, -1, -1 };
  return &_ADXViewBoundsCheck_Callback;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXViewBoundsCheck_Callback)
