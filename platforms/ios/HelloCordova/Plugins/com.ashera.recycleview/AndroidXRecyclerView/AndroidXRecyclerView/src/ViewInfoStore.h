//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\ViewInfoStore.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ViewInfoStore")
#ifdef RESTRICT_ViewInfoStore
#define INCLUDE_ALL_ViewInfoStore 0
#else
#define INCLUDE_ALL_ViewInfoStore 1
#endif
#undef RESTRICT_ViewInfoStore

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXViewInfoStore_) && (INCLUDE_ALL_ViewInfoStore || defined(INCLUDE_ADXViewInfoStore))
#define ADXViewInfoStore_

@class ADLongSparseArray;
@class ADXRecyclerView_ItemAnimator_ItemHolderInfo;
@class ADXRecyclerView_ViewHolder;
@class ADXSimpleArrayMap;
@protocol ADXViewInfoStore_ProcessCallback;

/*!
 @brief This class abstracts all tracking for Views to run animations.
 */
@interface ADXViewInfoStore : NSObject {
 @public
  /*!
   @brief View data records for pre-layout
   */
  ADXSimpleArrayMap *mLayoutHolderMap_;
  ADLongSparseArray *mOldChangedHolders_;
}

#pragma mark Public

- (void)onViewDetachedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder;

#pragma mark Package-Private

- (instancetype)initPackagePrivate;

/*!
 @brief Adds the given ViewHolder to the appeared in pre layout list.These are Views added by the
  LayoutManager during a pre-layout pass.
 We distinguish them from other views that were
  already in the pre-layout so that ItemAnimator can choose to run a different animation for
  them.
 @param holder The ViewHolder to store
 @param info The information to save
 */
- (void)addToAppearedInPreLayoutHoldersWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
                      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info;

/*!
 @brief A ViewHolder might be added by the LayoutManager just to animate its disappearance.
 This list holds such items so that we can animate / recycle these ViewHolders properly.
 @param holder The ViewHolder which disappeared during a layout.
 */
- (void)addToDisappearedInLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

/*!
 @brief Adds the given ViewHolder to the oldChangeHolders list
 @param key The key to identify the ViewHolder.
 @param holder The ViewHolder to store
 */
- (void)addToOldChangeHoldersWithLong:(jlong)key
       withADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

/*!
 @brief Adds the item information to the post layout list
 @param holder The ViewHolder whose information is being saved
 @param info The information to save
 */
- (void)addToPostLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info;

/*!
 @brief Adds the item information to the prelayout tracking
 @param holder The ViewHolder whose information is being saved
 @param info The information to save
 */
- (void)addToPreLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder
     withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)info;

/*!
 @brief Clears the state and all existing tracking data
 */
- (void)clear;

/*!
 @brief Queries the oldChangeHolder list for the given key.If they are not tracked, simply returns
  null.
 @param key The key to be used to find the ViewHolder.
 @return A ViewHolder if exists or null if it does not exist.
 */
- (ADXRecyclerView_ViewHolder *)getFromOldChangeHoldersWithLong:(jlong)key;

- (jboolean)isDisappearingWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

/*!
 @brief Checks whether the given ViewHolder is in preLayout list
 @param viewHolder The ViewHolder to query
 @return True if the ViewHolder is present in preLayout, false otherwise
 */
- (jboolean)isInPreLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder;

- (void)onDetach;

/*!
 @brief Finds the ItemHolderInfo for the given ViewHolder in postLayout list and removes it.
 @param vh The ViewHolder whose information is being queried
 @return The ItemHolderInfo for the given ViewHolder or null if it does not exist
 */
- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)popFromPostLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)vh;

/*!
 @brief Finds the ItemHolderInfo for the given ViewHolder in preLayout list and removes it.
 @param vh The ViewHolder whose information is being queried
 @return The ItemHolderInfo for the given ViewHolder or null if it does not exist
 */
- (ADXRecyclerView_ItemAnimator_ItemHolderInfo *)popFromPreLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)vh;

- (void)processWithADXViewInfoStore_ProcessCallback:(id<ADXViewInfoStore_ProcessCallback>)callback;

/*!
 @brief Removes a ViewHolder from disappearing list.
 @param holder The ViewHolder to be removed from the disappearing list.
 */
- (void)removeFromDisappearedInLayoutWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

/*!
 @brief Removes the ViewHolder from all list
 @param holder The ViewHolder which we should stop tracking
 */
- (void)removeViewHolderWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewInfoStore)

J2OBJC_FIELD_SETTER(ADXViewInfoStore, mLayoutHolderMap_, ADXSimpleArrayMap *)
J2OBJC_FIELD_SETTER(ADXViewInfoStore, mOldChangedHolders_, ADLongSparseArray *)

FOUNDATION_EXPORT void ADXViewInfoStore_initPackagePrivate(ADXViewInfoStore *self);

FOUNDATION_EXPORT ADXViewInfoStore *new_ADXViewInfoStore_initPackagePrivate(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXViewInfoStore *create_ADXViewInfoStore_initPackagePrivate(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXViewInfoStore)

@compatibility_alias AndroidxRecyclerviewWidgetViewInfoStore ADXViewInfoStore;

#endif

#if !defined (ADXViewInfoStore_ProcessCallback_) && (INCLUDE_ALL_ViewInfoStore || defined(INCLUDE_ADXViewInfoStore_ProcessCallback))
#define ADXViewInfoStore_ProcessCallback_

@class ADXRecyclerView_ItemAnimator_ItemHolderInfo;
@class ADXRecyclerView_ViewHolder;

@protocol ADXViewInfoStore_ProcessCallback < JavaObject >

- (void)processDisappearedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
         withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
         withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo;

- (void)processAppearedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
      withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo;

- (void)processPersistentWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)viewHolder
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)preInfo
        withADXRecyclerView_ItemAnimator_ItemHolderInfo:(ADXRecyclerView_ItemAnimator_ItemHolderInfo *)postInfo;

- (void)unusedWithADXRecyclerView_ViewHolder:(ADXRecyclerView_ViewHolder *)holder;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXViewInfoStore_ProcessCallback)

J2OBJC_TYPE_LITERAL_HEADER(ADXViewInfoStore_ProcessCallback)

#endif

#if !defined (ADXViewInfoStore_InfoRecord_) && (INCLUDE_ALL_ViewInfoStore || defined(INCLUDE_ADXViewInfoStore_InfoRecord))
#define ADXViewInfoStore_InfoRecord_

@class ADXRecyclerView_ItemAnimator_ItemHolderInfo;
@protocol ADPools_Pool;

@interface ADXViewInfoStore_InfoRecord : NSObject {
 @public
  jint flags_;
  ADXRecyclerView_ItemAnimator_ItemHolderInfo *preInfo_;
  ADXRecyclerView_ItemAnimator_ItemHolderInfo *postInfo_;
}

#pragma mark Package-Private

+ (void)drainCache;

+ (ADXViewInfoStore_InfoRecord *)obtain;

+ (void)recycleWithADXViewInfoStore_InfoRecord:(ADXViewInfoStore_InfoRecord *)record;

@end

J2OBJC_STATIC_INIT(ADXViewInfoStore_InfoRecord)

J2OBJC_FIELD_SETTER(ADXViewInfoStore_InfoRecord, preInfo_, ADXRecyclerView_ItemAnimator_ItemHolderInfo *)
J2OBJC_FIELD_SETTER(ADXViewInfoStore_InfoRecord, postInfo_, ADXRecyclerView_ItemAnimator_ItemHolderInfo *)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_DISAPPEARED(void);
#define ADXViewInfoStore_InfoRecord_FLAG_DISAPPEARED 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_DISAPPEARED, jint)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_APPEAR(void);
#define ADXViewInfoStore_InfoRecord_FLAG_APPEAR 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_APPEAR, jint)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_PRE(void);
#define ADXViewInfoStore_InfoRecord_FLAG_PRE 4
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_PRE, jint)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_POST(void);
#define ADXViewInfoStore_InfoRecord_FLAG_POST 8
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_POST, jint)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_APPEAR_AND_DISAPPEAR(void);
#define ADXViewInfoStore_InfoRecord_FLAG_APPEAR_AND_DISAPPEAR 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_APPEAR_AND_DISAPPEAR, jint)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_PRE_AND_POST(void);
#define ADXViewInfoStore_InfoRecord_FLAG_PRE_AND_POST 12
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_PRE_AND_POST, jint)

inline jint ADXViewInfoStore_InfoRecord_get_FLAG_APPEAR_PRE_AND_POST(void);
#define ADXViewInfoStore_InfoRecord_FLAG_APPEAR_PRE_AND_POST 14
J2OBJC_STATIC_FIELD_CONSTANT(ADXViewInfoStore_InfoRecord, FLAG_APPEAR_PRE_AND_POST, jint)

inline id<ADPools_Pool> ADXViewInfoStore_InfoRecord_get_sPool(void);
inline id<ADPools_Pool> ADXViewInfoStore_InfoRecord_set_sPool(id<ADPools_Pool> value);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADPools_Pool> ADXViewInfoStore_InfoRecord_sPool;
J2OBJC_STATIC_FIELD_OBJ(ADXViewInfoStore_InfoRecord, sPool, id<ADPools_Pool>)

FOUNDATION_EXPORT ADXViewInfoStore_InfoRecord *ADXViewInfoStore_InfoRecord_obtain(void);

FOUNDATION_EXPORT void ADXViewInfoStore_InfoRecord_recycleWithADXViewInfoStore_InfoRecord_(ADXViewInfoStore_InfoRecord *record);

FOUNDATION_EXPORT void ADXViewInfoStore_InfoRecord_drainCache(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXViewInfoStore_InfoRecord)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_ViewInfoStore")
