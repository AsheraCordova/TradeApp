//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\UIProgressViewImpl.java
//

#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasurableView.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "SimpleWrapableView.h"
#include "UIProgressViewImpl.h"
#include "View.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"
#include "ASUIView.h"

#include "ASUIProgressView.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASUIProgressViewImpl () {
 @public
  ASUIProgressViewImpl_UIProgressViewCommandBuilder *builder_;
  ASUIProgressViewImpl_UIProgressViewBean *bean_;
  ASSimpleWrapableView *simpleWrapableView_;
  jint max_;
  jint min_;
  jint progress_;
  id progressTint_;
  id progressTintBackground_;
}

- (void)setWidgetOnNativeClass;

- (id)getPaddingBottom;

- (id)getPaddingTop;

- (id)getPaddingRight;

- (id)getPaddingLeft;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (void)createSimpleWrapableView;

- (jboolean)hasScrollView;

- (jboolean)isViewWrapped;

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (void)incrementProgressByWithId:(id)objValue;

- (void)setProgressWithId:(id)objValue;

- (void)nativeSetProgressWithFloat:(jfloat)progress;

- (id)nativeCreateViewWithInt:(jint)viewtype;

- (void)setMinWithId:(id)objValue;

- (void)setMaxWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setProgressTintWithId:(id)objValue;

- (id)getProgressTint;

- (void)setProgressBackgroundTintWithId:(id)objValue;

- (id)getProgressBackgroundTint;

@end

J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, builder_, ASUIProgressViewImpl_UIProgressViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, bean_, ASUIProgressViewImpl_UIProgressViewBean *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, simpleWrapableView_, ASSimpleWrapableView *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, progressTint_, id)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl, progressTintBackground_, id)

inline NSString *ASUIProgressViewImpl_get_FOREGROUND_REGEX(void);
static NSString *ASUIProgressViewImpl_FOREGROUND_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUIProgressViewImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASUIProgressViewImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASUIProgressViewImpl_VIEW_HOLDER_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUIProgressViewImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASUIProgressViewImpl_get_WIDGET_REGEX(void);
static NSString *ASUIProgressViewImpl_WIDGET_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUIProgressViewImpl, WIDGET_REGEX, NSString *)

__attribute__((unused)) static void ASUIProgressViewImpl_setWidgetOnNativeClass(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingBottom(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingTop(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingRight(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingLeft(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingEnd(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getPaddingStart(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingVerticalWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingHorizontalWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingTopWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingEndWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingStartWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingLeftWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingRightWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingBottomWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setPaddingWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASUIProgressViewImpl_createSimpleWrapableView(ASUIProgressViewImpl *self);

__attribute__((unused)) static jboolean ASUIProgressViewImpl_hasScrollView(ASUIProgressViewImpl *self);

__attribute__((unused)) static jboolean ASUIProgressViewImpl_isViewWrapped(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASUIProgressViewImpl_invalidateWrapViewHolder(ASUIProgressViewImpl *self);

__attribute__((unused)) static id ASUIProgressViewImpl_getScrollView(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_incrementProgressByWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setProgressWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_nativeSetProgressWithFloat_(ASUIProgressViewImpl *self, jfloat progress);

__attribute__((unused)) static id ASUIProgressViewImpl_nativeCreateViewWithInt_(ASUIProgressViewImpl *self, jint viewtype);

__attribute__((unused)) static void ASUIProgressViewImpl_setMinWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_setMaxWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static void ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(ASUIProgressViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASUIProgressViewImpl_setProgressTintWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static id ASUIProgressViewImpl_getProgressTint(ASUIProgressViewImpl *self);

__attribute__((unused)) static void ASUIProgressViewImpl_setProgressBackgroundTintWithId_(ASUIProgressViewImpl *self, id objValue);

__attribute__((unused)) static id ASUIProgressViewImpl_getProgressBackgroundTint(ASUIProgressViewImpl *self);

@interface ASUIProgressViewImpl_UIProgressViewExt () {
 @public
  __unsafe_unretained ASUIProgressViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASUIProgressViewImpl_UIProgressViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASUIProgressViewImpl_UIProgressViewExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASUIProgressViewImpl_UIProgressViewCommandBuilder () {
 @public
  ASUIProgressViewImpl *this$0_;
}

@end

@interface ASUIProgressViewImpl_UIProgressViewBean () {
 @public
  ASUIProgressViewImpl *this$0_;
}

@end

NSString *ASUIProgressViewImpl_LOCAL_NAME = @"UIProgressView";
NSString *ASUIProgressViewImpl_GROUP_NAME = @"ProgressBar";

@implementation ASUIProgressViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosProgressTintColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosProgressImage"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTrackTintColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTrackImage"])) withTypeWithNSString:@"image"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"max"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"min"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progress"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"incrementProgressBy"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progressTint"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"progressBackgroundTint"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"indeterminate"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUIProgressViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASUIProgressViewImpl_UIProgressViewExt *) nil_chk(((ASUIProgressViewImpl_UIProgressViewExt *) cast_chk(measurableView_, [ASUIProgressViewImpl_UIProgressViewExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASUIProgressViewImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableView_ = new_ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(self);
  ASUIProgressViewImpl_createSimpleWrapableView(self);
  ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASUIProgressViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASUIProgressViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosProgressTintColor", @"iosProgressImage", @"iosTrackTintColor", @"iosTrackImage", @"max", @"min", @"progress", @"incrementProgressBy", @"progressTint", @"progressBackgroundTint", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical" }, 19)) {
    case 0:
    {
      [self setProgressTintColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setProgressImageWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    {
      [self setTrackTintColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 3:
    {
      [self setTrackImageWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      ASUIProgressViewImpl_setMaxWithId_(self, objValue);
    }
    break;
    case 5:
    {
      ASUIProgressViewImpl_setMinWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASUIProgressViewImpl_setProgressWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASUIProgressViewImpl_incrementProgressByWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASUIProgressViewImpl_setProgressTintWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASUIProgressViewImpl_setProgressBackgroundTintWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASUIProgressViewImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASUIProgressViewImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASUIProgressViewImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASUIProgressViewImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASUIProgressViewImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosProgressTintColor", @"iosProgressImage", @"iosTrackTintColor", @"iosTrackImage", @"progressTint", @"progressBackgroundTint", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop" }, 12)) {
    case 0:
    {
      return [self getProgressTintColor];
    }
    case 1:
    {
      return [self getProgressImage];
    }
    case 2:
    {
      return [self getTrackTintColor];
    }
    case 3:
    {
      return [self getTrackImage];
    }
    case 4:
    {
      return ASUIProgressViewImpl_getProgressTint(self);
    }
    case 5:
    {
      return ASUIProgressViewImpl_getProgressBackgroundTint(self);
    }
    case 6:
    {
      return ASUIProgressViewImpl_getPaddingBottom(self);
    }
    case 7:
    {
      return ASUIProgressViewImpl_getPaddingRight(self);
    }
    case 8:
    {
      return ASUIProgressViewImpl_getPaddingLeft(self);
    }
    case 9:
    {
      return ASUIProgressViewImpl_getPaddingStart(self);
    }
    case 10:
    {
      return ASUIProgressViewImpl_getPaddingEnd(self);
    }
    case 11:
    {
      return ASUIProgressViewImpl_getPaddingTop(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableView_;
}

- (id)getPaddingBottom {
  return ASUIProgressViewImpl_getPaddingBottom(self);
}

- (id)getPaddingTop {
  return ASUIProgressViewImpl_getPaddingTop(self);
}

- (id)getPaddingRight {
  return ASUIProgressViewImpl_getPaddingRight(self);
}

- (id)getPaddingLeft {
  return ASUIProgressViewImpl_getPaddingLeft(self);
}

- (id)getPaddingEnd {
  return ASUIProgressViewImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASUIProgressViewImpl_getPaddingStart(self);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingTopWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingLeftWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
}

- (void)setPaddingRightWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
}

- (void)setPaddingBottomWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASUIProgressViewImpl_setPaddingWithId_(self, objValue);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (jint)measureWidth {
  jint width = [((ASMeasurableView *) nil_chk(measurableView_)) nativeMeasureWidthWithId:uiView_];
  return width;
}

- (jint)measureHeightWithInt:(jint)width {
  jint height = [((ASMeasurableView *) nil_chk(measurableView_)) nativeMeasureHeightWithId:uiView_ withInt:width];
  return height;
}

- (void)setProgressTintColorWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUIProgressView*) nativeWidget).progressTintColor = (UIColor*) value;
}

- (id)getProgressTintColor {
  return ((ASUIProgressView*) uiView_).progressTintColor;
}

- (void)setProgressImageWithId:(id)nativeWidget
                        withId:(id)value {
  ((ASUIProgressView*) nativeWidget).progressImage = (UIImage*) value;
}

- (id)getProgressImage {
  return ((ASUIProgressView*) uiView_).progressImage;
}

- (void)setTrackTintColorWithId:(id)nativeWidget
                         withId:(id)value {
  ((ASUIProgressView*) nativeWidget).trackTintColor = (UIColor*) value;
}

- (id)getTrackTintColor {
  return ((ASUIProgressView*) uiView_).trackTintColor;
}

- (void)setTrackImageWithId:(id)nativeWidget
                     withId:(id)value {
  ((ASUIProgressView*) nativeWidget).trackImage = (UIImage*) value;
}

- (id)getTrackImage {
  return ((ASUIProgressView*) uiView_).trackImage;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableView *) nil_chk(measurableView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
    if (ASUIProgressViewImpl_isViewWrapped(self)) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
      if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
        ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
      }
    }
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASUIProgressViewImpl_UIProgressViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASUIProgressViewImpl_UIProgressViewBean_initWithASUIProgressViewImpl_(self);
  }
  return bean_;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASUIProgressViewImpl_UIProgressViewCommandBuilder_initWithASUIProgressViewImpl_(self);
  }
  return builder_;
}

- (void)createSimpleWrapableView {
  ASUIProgressViewImpl_createSimpleWrapableView(self);
}

- (jboolean)hasScrollView {
  return ASUIProgressViewImpl_hasScrollView(self);
}

- (jboolean)isViewWrapped {
  return ASUIProgressViewImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASUIProgressViewImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b {
  ASUIProgressViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASUIProgressViewImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  uiView_ = ASUIProgressViewImpl_nativeCreateViewWithInt_(self, viewtype);
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASUIProgressViewImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(jint)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASUIProgressViewImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASUIProgressViewImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASUIProgressViewImpl_getScrollView(self);
}

- (void)incrementProgressByWithId:(id)objValue {
  ASUIProgressViewImpl_incrementProgressByWithId_(self, objValue);
}

- (void)setProgressWithId:(id)objValue {
  ASUIProgressViewImpl_setProgressWithId_(self, objValue);
}

- (void)nativeSetProgressWithFloat:(jfloat)progress {
  ASUIProgressViewImpl_nativeSetProgressWithFloat_(self, progress);
}

- (id)nativeCreateViewWithInt:(jint)viewtype {
  return ASUIProgressViewImpl_nativeCreateViewWithInt_(self, viewtype);
}

- (void)setMinWithId:(id)objValue {
  ASUIProgressViewImpl_setMinWithId_(self, objValue);
}

- (void)setMaxWithId:(id)objValue {
  ASUIProgressViewImpl_setMaxWithId_(self, objValue);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)setProgressTintWithId:(id)objValue {
  ASUIProgressViewImpl_setProgressTintWithId_(self, objValue);
}

- (id)getProgressTint {
  return ASUIProgressViewImpl_getProgressTint(self);
}

- (void)setProgressBackgroundTintWithId:(id)objValue {
  ASUIProgressViewImpl_setProgressBackgroundTintWithId_(self, objValue);
}

- (id)getProgressBackgroundTint {
  return ASUIProgressViewImpl_getProgressBackgroundTint(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 14, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 25, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 27, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 28, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 29, 26, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 30, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 32, 1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 22, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 34, 35, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 36, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 37, 38, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 39, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 42, 43, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 44, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 48, -1, 49, -1, -1 },
    { NULL, "V", 0x2, 50, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(getPaddingBottom);
  methods[10].selector = @selector(getPaddingTop);
  methods[11].selector = @selector(getPaddingRight);
  methods[12].selector = @selector(getPaddingLeft);
  methods[13].selector = @selector(getPaddingEnd);
  methods[14].selector = @selector(getPaddingStart);
  methods[15].selector = @selector(setPaddingVerticalWithId:);
  methods[16].selector = @selector(setPaddingHorizontalWithId:);
  methods[17].selector = @selector(setPaddingTopWithId:);
  methods[18].selector = @selector(setPaddingEndWithId:);
  methods[19].selector = @selector(setPaddingStartWithId:);
  methods[20].selector = @selector(setPaddingLeftWithId:);
  methods[21].selector = @selector(setPaddingRightWithId:);
  methods[22].selector = @selector(setPaddingBottomWithId:);
  methods[23].selector = @selector(setPaddingWithId:);
  methods[24].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[25].selector = @selector(measureWidth);
  methods[26].selector = @selector(measureHeightWithInt:);
  methods[27].selector = @selector(setProgressTintColorWithId:withId:);
  methods[28].selector = @selector(getProgressTintColor);
  methods[29].selector = @selector(setProgressImageWithId:withId:);
  methods[30].selector = @selector(getProgressImage);
  methods[31].selector = @selector(setTrackTintColorWithId:withId:);
  methods[32].selector = @selector(getTrackTintColor);
  methods[33].selector = @selector(setTrackImageWithId:withId:);
  methods[34].selector = @selector(getTrackImage);
  methods[35].selector = @selector(checkIosVersionWithNSString:);
  methods[36].selector = @selector(setIdWithNSString:);
  methods[37].selector = @selector(requestLayout);
  methods[38].selector = @selector(invalidate);
  methods[39].selector = @selector(getPluginWithNSString:);
  methods[40].selector = @selector(getBean);
  methods[41].selector = @selector(getBuilder);
  methods[42].selector = @selector(createSimpleWrapableView);
  methods[43].selector = @selector(hasScrollView);
  methods[44].selector = @selector(isViewWrapped);
  methods[45].selector = @selector(addForegroundIfNeeded);
  methods[46].selector = @selector(getForeground);
  methods[47].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[48].selector = @selector(asNativeWidget);
  methods[49].selector = @selector(invalidateWrapViewHolder);
  methods[50].selector = @selector(createWrapperViewWithId:withInt:);
  methods[51].selector = @selector(createWrapperViewHolderWithInt:);
  methods[52].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[53].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[54].selector = @selector(getScrollView);
  methods[55].selector = @selector(incrementProgressByWithId:);
  methods[56].selector = @selector(setProgressWithId:);
  methods[57].selector = @selector(nativeSetProgressWithFloat:);
  methods[58].selector = @selector(nativeCreateViewWithInt:);
  methods[59].selector = @selector(setMinWithId:);
  methods[60].selector = @selector(setMaxWithId:);
  methods[61].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[62].selector = @selector(setProgressTintWithId:);
  methods[63].selector = @selector(getProgressTint);
  methods[64].selector = @selector(setProgressBackgroundTintWithId:);
  methods[65].selector = @selector(getProgressBackgroundTint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 52, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 53, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 54, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 55, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 56, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableView_", "LASMeasurableView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "builder_", "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASUIProgressViewImpl_UIProgressViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "max_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "min_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progress_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progressTint_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "progressTintBackground_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setPaddingVertical", "LNSObject;", "setPaddingHorizontal", "setPaddingTop", "setPaddingEnd", "setPaddingStart", "setPaddingLeft", "setPaddingRight", "setPaddingBottom", "setPadding", "nativeMakeFrameForChildWidget", "IIII", "measureHeight", "I", "setProgressTintColor", "LNSObject;LNSObject;", "setProgressImage", "setTrackTintColor", "setTrackImage", "checkIosVersion", "setId", "getPlugin", "setForegroundFrame", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "nativeAddForeGround", "LASIWidget;", "createWrapperViewHolderNative", "incrementProgressBy", "setProgress", "nativeSetProgress", "F", "nativeCreateView", "setMin", "setMax", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setProgressTint", "setProgressBackgroundTint", &ASUIProgressViewImpl_FOREGROUND_REGEX, &ASUIProgressViewImpl_VIEW_HOLDER_REGEX, &ASUIProgressViewImpl_WIDGET_REGEX, &ASUIProgressViewImpl_LOCAL_NAME, &ASUIProgressViewImpl_GROUP_NAME, "LASUIProgressViewImpl_UIProgressViewExt;LASUIProgressViewImpl_UIProgressViewCommandBuilder;LASUIProgressViewImpl_UIProgressViewBean;" };
  static const J2ObjcClassInfo _ASUIProgressViewImpl = { "UIProgressViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 66, 15, -1, 57, -1, -1, -1 };
  return &_ASUIProgressViewImpl;
}

@end

void ASUIProgressViewImpl_init(ASUIProgressViewImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASUIProgressViewImpl_GROUP_NAME, ASUIProgressViewImpl_LOCAL_NAME);
  self->max_ = 100;
  self->min_ = 0;
}

ASUIProgressViewImpl *new_ASUIProgressViewImpl_init() {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl, init)
}

ASUIProgressViewImpl *create_ASUIProgressViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl, init)
}

void ASUIProgressViewImpl_setWidgetOnNativeClass(ASUIProgressViewImpl *self) {
  ((ASUIProgressView*) self.uiView).widget = self;
}

id ASUIProgressViewImpl_getPaddingBottom(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingBottom]);
}

id ASUIProgressViewImpl_getPaddingTop(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingTop]);
}

id ASUIProgressViewImpl_getPaddingRight(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingRight]);
}

id ASUIProgressViewImpl_getPaddingLeft(ASUIProgressViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingLeft]);
}

id ASUIProgressViewImpl_getPaddingEnd(ASUIProgressViewImpl *self) {
  return ASUIProgressViewImpl_getPaddingRight(self);
}

id ASUIProgressViewImpl_getPaddingStart(ASUIProgressViewImpl *self) {
  return ASUIProgressViewImpl_getPaddingLeft(self);
}

void ASUIProgressViewImpl_setPaddingVerticalWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
}

void ASUIProgressViewImpl_setPaddingHorizontalWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
}

void ASUIProgressViewImpl_setPaddingTopWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingTopWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingEndWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingStartWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingLeftWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingLeftWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingRightWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingRightWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingBottomWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASViewImpl_setPaddingBottomWithId_withADView_(objValue, self->measurableView_);
}

void ASUIProgressViewImpl_setPaddingWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setPaddingBottomWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingTopWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingRightWithId_(self, objValue);
  ASUIProgressViewImpl_setPaddingLeftWithId_(self, objValue);
}

void ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, jint l, jint t, jint r, jint b) {
  if (ASUIProgressViewImpl_isViewWrapped(self)) {
    id progressView = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrappedView];
    ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(progressView, [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingStart], [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingTop], r - l - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingStart] - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingEnd], b - t - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingTop] - [((ASMeasurableView *) nil_chk(self->measurableView_)) getPaddingBottom]);
  }
}

void ASUIProgressViewImpl_createSimpleWrapableView(ASUIProgressViewImpl *self) {
  jboolean wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  jint viewType = -1;
  if (wrapViewFeature) {
    jboolean hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    jboolean vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

jboolean ASUIProgressViewImpl_hasScrollView(ASUIProgressViewImpl *self) {
  return ASUIProgressViewImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

jboolean ASUIProgressViewImpl_isViewWrapped(ASUIProgressViewImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASUIProgressViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASUIProgressViewImpl *self, jint l, jint t, jint r, jint b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASUIProgressViewImpl_invalidateWrapViewHolder(ASUIProgressViewImpl *self) {
  if (ASUIProgressViewImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASUIProgressViewImpl_getScrollView(ASUIProgressViewImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

void ASUIProgressViewImpl_incrementProgressByWithId_(ASUIProgressViewImpl *self, id objValue) {
  ASUIProgressViewImpl_setProgressWithId_(self, JavaLangInteger_valueOfWithInt_(self->progress_ + [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]));
}

void ASUIProgressViewImpl_setProgressWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->progress_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->progress_ < self->min_) {
    self->progress_ = self->min_;
  }
  ASUIProgressViewImpl_nativeSetProgressWithFloat_(self, (self->progress_) / (self->max_ * 1.0f));
}

void ASUIProgressViewImpl_nativeSetProgressWithFloat_(ASUIProgressViewImpl *self, jfloat progress) {
  [(ASUIProgressView*)self.uiView setProgress: progress animated: YES];
}

id ASUIProgressViewImpl_nativeCreateViewWithInt_(ASUIProgressViewImpl *self, jint viewtype) {
  return [[ASUIProgressView alloc] initWithProgressViewStyle:UIProgressViewStyleDefault];
}

void ASUIProgressViewImpl_setMinWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->min_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASUIProgressViewImpl_setMaxWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->max_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASUIProgressViewImpl_nativeCreateWithJavaUtilMap_(ASUIProgressViewImpl *self, id<JavaUtilMap> params) {
  [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) setDisableForegroundWithBoolean:true];
}

void ASUIProgressViewImpl_setProgressTintWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->progressTint_ = objValue;
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(colorStateList)) getColorForStateWithIntArray:[((ASMeasurableView *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  id color = ASViewImpl_getColorWithId_(objValue);
  [self setProgressTintColorWithId:[self asNativeWidget] withId:color];
}

id ASUIProgressViewImpl_getProgressTint(ASUIProgressViewImpl *self) {
  return self->progressTint_;
}

void ASUIProgressViewImpl_setProgressBackgroundTintWithId_(ASUIProgressViewImpl *self, id objValue) {
  self->progressTintBackground_ = objValue;
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(colorStateList)) getColorForStateWithIntArray:[((ASMeasurableView *) nil_chk(self->measurableView_)) getDrawableState] withInt:ADColor_RED]);
  }
  id color = ASViewImpl_getColorWithId_(objValue);
  [self setTrackTintColorWithId:[self asNativeWidget] withId:color];
}

id ASUIProgressViewImpl_getProgressBackgroundTint(ASUIProgressViewImpl *self) {
  return self->progressTintBackground_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUIProgressViewImpl)

@implementation ASUIProgressViewImpl_UIProgressViewExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASUIProgressViewImpl:(ASUIProgressViewImpl *)outer$ {
  ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASUIProgressViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASUIProgressViewImpl_UIProgressViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASUIProgressViewImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUIProgressViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASUIProgressViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASUIProgressViewImpl_UIProgressViewExt = { "UIProgressViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASUIProgressViewImpl_UIProgressViewExt;
}

@end

void ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(ASUIProgressViewImpl_UIProgressViewExt *self, ASUIProgressViewImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASUIProgressViewImpl_UIProgressViewExt *new_ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl_UIProgressViewExt, initWithASUIProgressViewImpl_, outer$)
}

ASUIProgressViewImpl_UIProgressViewExt *create_ASUIProgressViewImpl_UIProgressViewExt_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl_UIProgressViewExt, initWithASUIProgressViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUIProgressViewImpl_UIProgressViewExt)

@implementation ASUIProgressViewImpl_UIProgressViewCommandBuilder

- (instancetype)initWithASUIProgressViewImpl:(ASUIProgressViewImpl *)outer$ {
  ASUIProgressViewImpl_UIProgressViewCommandBuilder_initWithASUIProgressViewImpl_(self, outer$);
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetIosProgressTintColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosProgressTintColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosProgressTintColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosProgressTintColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setIosProgressTintColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosProgressTintColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetIosProgressImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosProgressImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosProgressImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosProgressImage"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setIosProgressImageWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosProgressImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetIosTrackTintColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTrackTintColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTrackTintColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTrackTintColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setIosTrackTintColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTrackTintColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetIosTrackImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTrackImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTrackImage {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTrackImage"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setIosTrackImageWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTrackImage"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setMaxWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"max"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setMinWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"min"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setProgressWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progress"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)incrementProgressByWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"incrementProgressBy"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetProgressTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getProgressTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressTint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setProgressTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetProgressBackgroundTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressBackgroundTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getProgressBackgroundTint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressBackgroundTint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setProgressBackgroundTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"progressBackgroundTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUIProgressViewImpl_UIProgressViewCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 10, 9, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 11, 9, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 12, 9, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASUIProgressViewImpl_UIProgressViewCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUIProgressViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetIosProgressTintColor);
  methods[3].selector = @selector(getIosProgressTintColor);
  methods[4].selector = @selector(setIosProgressTintColorWithNSString:);
  methods[5].selector = @selector(tryGetIosProgressImage);
  methods[6].selector = @selector(getIosProgressImage);
  methods[7].selector = @selector(setIosProgressImageWithNSString:);
  methods[8].selector = @selector(tryGetIosTrackTintColor);
  methods[9].selector = @selector(getIosTrackTintColor);
  methods[10].selector = @selector(setIosTrackTintColorWithNSString:);
  methods[11].selector = @selector(tryGetIosTrackImage);
  methods[12].selector = @selector(getIosTrackImage);
  methods[13].selector = @selector(setIosTrackImageWithNSString:);
  methods[14].selector = @selector(setMaxWithInt:);
  methods[15].selector = @selector(setMinWithInt:);
  methods[16].selector = @selector(setProgressWithInt:);
  methods[17].selector = @selector(incrementProgressByWithInt:);
  methods[18].selector = @selector(tryGetProgressTint);
  methods[19].selector = @selector(getProgressTint);
  methods[20].selector = @selector(setProgressTintWithNSString:);
  methods[21].selector = @selector(tryGetProgressBackgroundTint);
  methods[22].selector = @selector(getProgressBackgroundTint);
  methods[23].selector = @selector(setProgressBackgroundTintWithNSString:);
  methods[24].selector = @selector(setPaddingWithNSString:);
  methods[25].selector = @selector(tryGetPaddingBottom);
  methods[26].selector = @selector(getPaddingBottom);
  methods[27].selector = @selector(setPaddingBottomWithNSString:);
  methods[28].selector = @selector(tryGetPaddingRight);
  methods[29].selector = @selector(getPaddingRight);
  methods[30].selector = @selector(setPaddingRightWithNSString:);
  methods[31].selector = @selector(tryGetPaddingLeft);
  methods[32].selector = @selector(getPaddingLeft);
  methods[33].selector = @selector(setPaddingLeftWithNSString:);
  methods[34].selector = @selector(tryGetPaddingStart);
  methods[35].selector = @selector(getPaddingStart);
  methods[36].selector = @selector(setPaddingStartWithNSString:);
  methods[37].selector = @selector(tryGetPaddingEnd);
  methods[38].selector = @selector(getPaddingEnd);
  methods[39].selector = @selector(setPaddingEndWithNSString:);
  methods[40].selector = @selector(tryGetPaddingTop);
  methods[41].selector = @selector(getPaddingTop);
  methods[42].selector = @selector(setPaddingTopWithNSString:);
  methods[43].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[44].selector = @selector(setPaddingVerticalWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUIProgressViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUIProgressViewImpl;", "execute", "Z", "setIosProgressTintColor", "LNSString;", "setIosProgressImage", "setIosTrackTintColor", "setIosTrackImage", "setMax", "I", "setMin", "setProgress", "incrementProgressBy", "setProgressTint", "setProgressBackgroundTint", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/UIProgressViewImpl$UIProgressViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASUIProgressViewImpl_UIProgressViewCommandBuilder = { "UIProgressViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 45, 1, 0, -1, -1, 24, -1 };
  return &_ASUIProgressViewImpl_UIProgressViewCommandBuilder;
}

@end

void ASUIProgressViewImpl_UIProgressViewCommandBuilder_initWithASUIProgressViewImpl_(ASUIProgressViewImpl_UIProgressViewCommandBuilder *self, ASUIProgressViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASUIProgressViewImpl_UIProgressViewCommandBuilder *new_ASUIProgressViewImpl_UIProgressViewCommandBuilder_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl_UIProgressViewCommandBuilder, initWithASUIProgressViewImpl_, outer$)
}

ASUIProgressViewImpl_UIProgressViewCommandBuilder *create_ASUIProgressViewImpl_UIProgressViewCommandBuilder_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl_UIProgressViewCommandBuilder, initWithASUIProgressViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUIProgressViewImpl_UIProgressViewCommandBuilder)

@implementation ASUIProgressViewImpl_UIProgressViewBean

- (instancetype)initWithASUIProgressViewImpl:(ASUIProgressViewImpl *)outer$ {
  ASUIProgressViewImpl_UIProgressViewBean_initWithASUIProgressViewImpl_(self, outer$);
  return self;
}

- (id)getIosProgressTintColor {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosProgressTintColor])) executeWithBoolean:false])) getIosProgressTintColor];
}

- (void)setIosProgressTintColorWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosProgressTintColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosProgressImage {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosProgressImage])) executeWithBoolean:false])) getIosProgressImage];
}

- (void)setIosProgressImageWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosProgressImageWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosTrackTintColor {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosTrackTintColor])) executeWithBoolean:false])) getIosTrackTintColor];
}

- (void)setIosTrackTintColorWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTrackTintColorWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosTrackImage {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosTrackImage])) executeWithBoolean:false])) getIosTrackImage];
}

- (void)setIosTrackImageWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTrackImageWithNSString:value])) executeWithBoolean:true];
}

- (void)setMaxWithInt:(jint)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWithInt:value])) executeWithBoolean:true];
}

- (void)setMinWithInt:(jint)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinWithInt:value])) executeWithBoolean:true];
}

- (void)setProgressWithInt:(jint)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setProgressWithInt:value])) executeWithBoolean:true];
}

- (void)incrementProgressByWithInt:(jint)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) incrementProgressByWithInt:value])) executeWithBoolean:true];
}

- (id)getProgressTint {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetProgressTint])) executeWithBoolean:false])) getProgressTint];
}

- (void)setProgressTintWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setProgressTintWithNSString:value])) executeWithBoolean:true];
}

- (id)getProgressBackgroundTint {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetProgressBackgroundTint])) executeWithBoolean:false])) getProgressBackgroundTint];
}

- (void)setProgressBackgroundTintWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setProgressBackgroundTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([((ASUIProgressViewImpl_UIProgressViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUIProgressViewImpl:);
  methods[1].selector = @selector(getIosProgressTintColor);
  methods[2].selector = @selector(setIosProgressTintColorWithNSString:);
  methods[3].selector = @selector(getIosProgressImage);
  methods[4].selector = @selector(setIosProgressImageWithNSString:);
  methods[5].selector = @selector(getIosTrackTintColor);
  methods[6].selector = @selector(setIosTrackTintColorWithNSString:);
  methods[7].selector = @selector(getIosTrackImage);
  methods[8].selector = @selector(setIosTrackImageWithNSString:);
  methods[9].selector = @selector(setMaxWithInt:);
  methods[10].selector = @selector(setMinWithInt:);
  methods[11].selector = @selector(setProgressWithInt:);
  methods[12].selector = @selector(incrementProgressByWithInt:);
  methods[13].selector = @selector(getProgressTint);
  methods[14].selector = @selector(setProgressTintWithNSString:);
  methods[15].selector = @selector(getProgressBackgroundTint);
  methods[16].selector = @selector(setProgressBackgroundTintWithNSString:);
  methods[17].selector = @selector(setPaddingWithNSString:);
  methods[18].selector = @selector(getPaddingBottom);
  methods[19].selector = @selector(setPaddingBottomWithNSString:);
  methods[20].selector = @selector(getPaddingRight);
  methods[21].selector = @selector(setPaddingRightWithNSString:);
  methods[22].selector = @selector(getPaddingLeft);
  methods[23].selector = @selector(setPaddingLeftWithNSString:);
  methods[24].selector = @selector(getPaddingStart);
  methods[25].selector = @selector(setPaddingStartWithNSString:);
  methods[26].selector = @selector(getPaddingEnd);
  methods[27].selector = @selector(setPaddingEndWithNSString:);
  methods[28].selector = @selector(getPaddingTop);
  methods[29].selector = @selector(setPaddingTopWithNSString:);
  methods[30].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[31].selector = @selector(setPaddingVerticalWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUIProgressViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUIProgressViewImpl;", "setIosProgressTintColor", "LNSString;", "setIosProgressImage", "setIosTrackTintColor", "setIosTrackImage", "setMax", "I", "setMin", "setProgress", "incrementProgressBy", "setProgressTint", "setProgressBackgroundTint", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical" };
  static const J2ObjcClassInfo _ASUIProgressViewImpl_UIProgressViewBean = { "UIProgressViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 32, 1, 0, -1, -1, -1, -1 };
  return &_ASUIProgressViewImpl_UIProgressViewBean;
}

@end

void ASUIProgressViewImpl_UIProgressViewBean_initWithASUIProgressViewImpl_(ASUIProgressViewImpl_UIProgressViewBean *self, ASUIProgressViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASUIProgressViewImpl_UIProgressViewBean *new_ASUIProgressViewImpl_UIProgressViewBean_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUIProgressViewImpl_UIProgressViewBean, initWithASUIProgressViewImpl_, outer$)
}

ASUIProgressViewImpl_UIProgressViewBean *create_ASUIProgressViewImpl_UIProgressViewBean_initWithASUIProgressViewImpl_(ASUIProgressViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUIProgressViewImpl_UIProgressViewBean, initWithASUIProgressViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUIProgressViewImpl_UIProgressViewBean)
