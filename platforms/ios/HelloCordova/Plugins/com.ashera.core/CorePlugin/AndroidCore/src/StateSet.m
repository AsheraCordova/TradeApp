//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\stub\r\android\util\StateSet.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "R.h"
#include "StateSet.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/System.h"


inline IOSObjectArray *ADStateSet_get_VIEW_STATE_SETS(void);
static IOSObjectArray *ADStateSet_VIEW_STATE_SETS;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADStateSet, VIEW_STATE_SETS, IOSObjectArray *)

J2OBJC_INITIALIZED_DEFN(ADStateSet)

IOSIntArray *ADStateSet_ViewDrawableStates;
IOSIntArray *ADStateSet_VIEW_STATE_IDS;

@implementation ADStateSet

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADStateSet_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (IOSIntArray *)getWithInt:(jint)mask {
  return ADStateSet_getWithInt_(mask);
}

+ (jboolean)containsAttributeWithIntArray2:(IOSObjectArray *)stateSpecs
                                   withInt:(jint)attr {
  return ADStateSet_containsAttributeWithIntArray2_withInt_(stateSpecs, attr);
}

+ (jboolean)stateSetMatchesWithIntArray:(IOSIntArray *)stateSpec
                           withIntArray:(IOSIntArray *)stateSet {
  return ADStateSet_stateSetMatchesWithIntArray_withIntArray_(stateSpec, stateSet);
}

+ (jboolean)stateSetMatchesWithIntArray:(IOSIntArray *)stateSpec
                                withInt:(jint)state {
  return ADStateSet_stateSetMatchesWithIntArray_withInt_(stateSpec, state);
}

+ (jboolean)isWildCardWithIntArray:(IOSIntArray *)stateSetOrSpec {
  return ADStateSet_isWildCardWithIntArray_(stateSetOrSpec);
}

+ (IOSIntArray *)trimStateSetWithIntArray:(IOSIntArray *)states
                                  withInt:(jint)newSize {
  return ADStateSet_trimStateSetWithIntArray_withInt_(states, newSize);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 7, 8, -1, -1, -1, -1 },
    { NULL, "[I", 0x9, 9, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithInt:);
  methods[2].selector = @selector(containsAttributeWithIntArray2:withInt:);
  methods[3].selector = @selector(stateSetMatchesWithIntArray:withIntArray:);
  methods[4].selector = @selector(stateSetMatchesWithIntArray:withInt:);
  methods[5].selector = @selector(isWildCardWithIntArray:);
  methods[6].selector = @selector(trimStateSetWithIntArray:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "VIEW_STATE_SETS", "[[I", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "VIEW_STATE_WINDOW_FOCUSED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_WINDOW_FOCUSED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_SELECTED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_SELECTED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_FOCUSED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_FOCUSED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_ENABLED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_ENABLED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_PRESSED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_PRESSED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_ACTIVATED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_ACTIVATED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_ACCELERATED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_ACCELERATED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_HOVERED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_HOVERED, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_DRAG_CAN_ACCEPT", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_DRAG_CAN_ACCEPT, 0x19, -1, -1, -1, -1 },
    { "VIEW_STATE_DRAG_HOVERED", "I", .constantValue.asInt = ADStateSet_VIEW_STATE_DRAG_HOVERED, 0x19, -1, -1, -1, -1 },
    { "ViewDrawableStates", "[I", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "VIEW_STATE_IDS", "[I", .constantValue.asLong = 0, 0x18, -1, 12, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I", "containsAttribute", "[[II", "stateSetMatches", "[I[I", "[II", "isWildCard", "[I", "trimStateSet", &ADStateSet_VIEW_STATE_SETS, &ADStateSet_ViewDrawableStates, &ADStateSet_VIEW_STATE_IDS };
  static const J2ObjcClassInfo _ADStateSet = { "StateSet", "r.android.util", ptrTable, methods, fields, 7, 0x1, 7, 13, -1, -1, -1, -1, -1 };
  return &_ADStateSet;
}

+ (void)initialize {
  if (self == [ADStateSet class]) {
    JreStrongAssignAndConsume(&ADStateSet_ViewDrawableStates, [IOSIntArray newArrayWithInts:(jint[]){ ADR_attr_state_window_focused, ADR_attr_state_selected, ADR_attr_state_focused, ADR_attr_state_enabled, ADR_attr_state_pressed, ADR_attr_state_activated, ADR_attr_state_accelerated, ADR_attr_state_hovered, ADR_attr_state_drag_can_accept, ADR_attr_state_drag_hovered } count:10]);
    JreStrongAssignAndConsume(&ADStateSet_VIEW_STATE_IDS, [IOSIntArray newArrayWithInts:(jint[]){ ADR_attr_state_window_focused, ADStateSet_VIEW_STATE_WINDOW_FOCUSED, ADR_attr_state_selected, ADStateSet_VIEW_STATE_SELECTED, ADR_attr_state_focused, ADStateSet_VIEW_STATE_FOCUSED, ADR_attr_state_enabled, ADStateSet_VIEW_STATE_ENABLED, ADR_attr_state_pressed, ADStateSet_VIEW_STATE_PRESSED, ADR_attr_state_activated, ADStateSet_VIEW_STATE_ACTIVATED, ADR_attr_state_accelerated, ADStateSet_VIEW_STATE_ACCELERATED, ADR_attr_state_hovered, ADStateSet_VIEW_STATE_HOVERED, ADR_attr_state_drag_can_accept, ADStateSet_VIEW_STATE_DRAG_CAN_ACCEPT, ADR_attr_state_drag_hovered, ADStateSet_VIEW_STATE_DRAG_HOVERED } count:20]);
    {
      IOSIntArray *orderedIds = [IOSIntArray arrayWithLength:ADStateSet_VIEW_STATE_IDS->size_];
      for (jint i = 0; i < ADStateSet_ViewDrawableStates->size_; i++) {
        jint viewState = IOSIntArray_Get(ADStateSet_ViewDrawableStates, i);
        for (jint j = 0; j < ADStateSet_VIEW_STATE_IDS->size_; j += 2) {
          if (IOSIntArray_Get(ADStateSet_VIEW_STATE_IDS, j) == viewState) {
            *IOSIntArray_GetRef(orderedIds, i * 2) = viewState;
            *IOSIntArray_GetRef(orderedIds, i * 2 + 1) = IOSIntArray_Get(ADStateSet_VIEW_STATE_IDS, j + 1);
          }
        }
      }
      jint NUM_BITS = JreIntDiv(ADStateSet_VIEW_STATE_IDS->size_, 2);
      JreStrongAssignAndConsume(&ADStateSet_VIEW_STATE_SETS, [IOSObjectArray newArrayWithLength:JreLShift32(1, NUM_BITS) type:IOSClass_intArray(1)]);
      for (jint i = 0; i < ADStateSet_VIEW_STATE_SETS->size_; i++) {
        jint numBits = JavaLangInteger_bitCountWithInt_(i);
        IOSIntArray *set = [IOSIntArray arrayWithLength:numBits];
        jint pos = 0;
        for (jint j = 0; j < orderedIds->size_; j += 2) {
          if ((i & IOSIntArray_Get(orderedIds, j + 1)) != 0) {
            *IOSIntArray_GetRef(set, pos++) = IOSIntArray_Get(orderedIds, j);
          }
        }
        IOSObjectArray_Set(ADStateSet_VIEW_STATE_SETS, i, set);
      }
    }
    J2OBJC_SET_INITIALIZED(ADStateSet)
  }
}

@end

void ADStateSet_init(ADStateSet *self) {
  NSObject_init(self);
}

ADStateSet *new_ADStateSet_init() {
  J2OBJC_NEW_IMPL(ADStateSet, init)
}

ADStateSet *create_ADStateSet_init() {
  J2OBJC_CREATE_IMPL(ADStateSet, init)
}

IOSIntArray *ADStateSet_getWithInt_(jint mask) {
  ADStateSet_initialize();
  if (mask >= ((IOSObjectArray *) nil_chk(ADStateSet_VIEW_STATE_SETS))->size_) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"Invalid state set mask");
  }
  return IOSObjectArray_Get(ADStateSet_VIEW_STATE_SETS, mask);
}

jboolean ADStateSet_containsAttributeWithIntArray2_withInt_(IOSObjectArray *stateSpecs, jint attr) {
  ADStateSet_initialize();
  if (stateSpecs != nil) {
    {
      IOSObjectArray *a__ = stateSpecs;
      IOSIntArray * const *b__ = a__->buffer_;
      IOSIntArray * const *e__ = b__ + a__->size_;
      while (b__ < e__) {
        IOSIntArray *spec = *b__++;
        if (spec == nil) {
          break;
        }
        {
          IOSIntArray *a__ = spec;
          jint const *b__ = a__->buffer_;
          jint const *e__ = b__ + a__->size_;
          while (b__ < e__) {
            jint specAttr = *b__++;
            if (specAttr == attr || -specAttr == attr) {
              return true;
            }
          }
        }
      }
    }
  }
  return false;
}

jboolean ADStateSet_stateSetMatchesWithIntArray_withIntArray_(IOSIntArray *stateSpec, IOSIntArray *stateSet) {
  ADStateSet_initialize();
  if (stateSet == nil) {
    return (stateSpec == nil || ADStateSet_isWildCardWithIntArray_(stateSpec));
  }
  jint stateSpecSize = ((IOSIntArray *) nil_chk(stateSpec))->size_;
  jint stateSetSize = stateSet->size_;
  for (jint i = 0; i < stateSpecSize; i++) {
    jint stateSpecState = IOSIntArray_Get(stateSpec, i);
    if (stateSpecState == 0) {
      return true;
    }
    jboolean mustMatch;
    if (stateSpecState > 0) {
      mustMatch = true;
    }
    else {
      mustMatch = false;
      stateSpecState = -stateSpecState;
    }
    jboolean found = false;
    for (jint j = 0; j < stateSetSize; j++) {
      jint state = IOSIntArray_Get(stateSet, j);
      if (state == 0) {
        if (mustMatch) {
          return false;
        }
        else {
          break;
        }
      }
      if (state == stateSpecState) {
        if (mustMatch) {
          found = true;
          break;
        }
        else {
          return false;
        }
      }
    }
    if (mustMatch && !found) {
      return false;
    }
  }
  return true;
}

jboolean ADStateSet_stateSetMatchesWithIntArray_withInt_(IOSIntArray *stateSpec, jint state) {
  ADStateSet_initialize();
  jint stateSpecSize = ((IOSIntArray *) nil_chk(stateSpec))->size_;
  for (jint i = 0; i < stateSpecSize; i++) {
    jint stateSpecState = IOSIntArray_Get(stateSpec, i);
    if (stateSpecState == 0) {
      return true;
    }
    if (stateSpecState > 0) {
      if (state != stateSpecState) {
        return false;
      }
    }
    else {
      if (state == -stateSpecState) {
        return false;
      }
    }
  }
  return true;
}

jboolean ADStateSet_isWildCardWithIntArray_(IOSIntArray *stateSetOrSpec) {
  ADStateSet_initialize();
  return ((IOSIntArray *) nil_chk(stateSetOrSpec))->size_ == 0 || IOSIntArray_Get(stateSetOrSpec, 0) == 0;
}

IOSIntArray *ADStateSet_trimStateSetWithIntArray_withInt_(IOSIntArray *states, jint newSize) {
  ADStateSet_initialize();
  if (((IOSIntArray *) nil_chk(states))->size_ == newSize) {
    return states;
  }
  IOSIntArray *trimmedStates = [IOSIntArray arrayWithLength:newSize];
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(states, 0, trimmedStates, 0, newSize);
  return trimmedStates;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADStateSet)
