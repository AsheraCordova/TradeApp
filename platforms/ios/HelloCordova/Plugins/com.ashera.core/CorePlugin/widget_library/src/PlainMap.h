//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\model\PlainMap.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_PlainMap")
#ifdef RESTRICT_PlainMap
#define INCLUDE_ALL_PlainMap 0
#else
#define INCLUDE_ALL_PlainMap 1
#endif
#undef RESTRICT_PlainMap

#if !defined (ASPlainMap_) && (INCLUDE_ALL_PlainMap || defined(INCLUDE_ASPlainMap))
#define ASPlainMap_

#define RESTRICT_JavaIoSerializable 1
#define INCLUDE_JavaIoSerializable 1
#include "java/io/Serializable.h"

#define RESTRICT_IFlatMap 1
#define INCLUDE_ASIFlatMap 1
#include "IFlatMap.h"

@protocol JavaUtilMap;

/*!
 @brief Utility Map to access a hierarchical HashMap (e.g., the Maps generated by parsing a xml or json documents) as a flat
  map.
 @author Jorge Lorenzo (jorgelg@@tid.es)
 @author Fernando Jordan Silva (fjordan@@aubay.es)
 */
@interface ASPlainMap : NSObject < JavaIoSerializable, ASIFlatMap >

#pragma mark Public

/*!
 @brief Default constructor.Creates an empty map.
 */
- (instancetype)init;

/*!
 @brief Constructor.
 @param documentMap
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)documentMap;

/*!
 @brief Constructor.The map is created under a root path.
 @param documentMap
 @param rootPath
 */
- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)documentMap
                       withNSString:(NSString *)rootPath;

- (void)addRootPathWithNSString:(NSString *)rootPath;

- (void)clear;

- (jboolean)existsWithNSString:(NSString *)path;

- (NSString *)extractParent;

- (id)getWithNSString:(NSString *)path;

- (id<JavaUtilMap>)getHierarchicalMap;

- (NSString *)getParent;

- (id<JavaUtilMap>)getPlainMap;

- (void)putWithNSString:(NSString *)path
                 withId:(id)value;

- (void)removeWithNSString:(NSString *)path;

- (void)removeRootPathWithNSString:(NSString *)rootPath;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPlainMap)

FOUNDATION_EXPORT void ASPlainMap_init(ASPlainMap *self);

FOUNDATION_EXPORT ASPlainMap *new_ASPlainMap_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASPlainMap *create_ASPlainMap_init(void);

FOUNDATION_EXPORT void ASPlainMap_initWithJavaUtilMap_(ASPlainMap *self, id<JavaUtilMap> documentMap);

FOUNDATION_EXPORT ASPlainMap *new_ASPlainMap_initWithJavaUtilMap_(id<JavaUtilMap> documentMap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASPlainMap *create_ASPlainMap_initWithJavaUtilMap_(id<JavaUtilMap> documentMap);

FOUNDATION_EXPORT void ASPlainMap_initWithJavaUtilMap_withNSString_(ASPlainMap *self, id<JavaUtilMap> documentMap, NSString *rootPath);

FOUNDATION_EXPORT ASPlainMap *new_ASPlainMap_initWithJavaUtilMap_withNSString_(id<JavaUtilMap> documentMap, NSString *rootPath) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASPlainMap *create_ASPlainMap_initWithJavaUtilMap_withNSString_(id<JavaUtilMap> documentMap, NSString *rootPath);

J2OBJC_TYPE_LITERAL_HEADER(ASPlainMap)

@compatibility_alias ComAsheraModelPlainMap ASPlainMap;

#endif

#pragma pop_macro("INCLUDE_ALL_PlainMap")
