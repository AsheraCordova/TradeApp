package freeseawind.ninepatch.common;

import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import freeseawind.ninepatch.common.Row.Type;

/**
 * @author freeseawind@github
 *
 */
public abstract class AbstractNinePatch<T, E>
{
    /**
     * ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¯Ã‚Â¼Ã…â€™ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¥Ã¢â€šÂ¬Ã‚Â¼ÃƒÂ¥Ã‚Â¿Ã¢â‚¬Â¦ÃƒÂ©Ã‚Â¡Ã‚Â»ÃƒÂ¤Ã‚Â¸Ã‚ÂºÃƒÂ©Ã‚Â»Ã¢â‚¬ËœÃƒÂ¨Ã¢â‚¬Â°Ã‚Â² 0xFF000000
     */
    public static final int PATCH_PIXES = 0xFF000000;
    private int lastWidth;
    private int lastHeight;
    private int patchWidth;
    private int patchHeight;
    private int horizontalPatchNum;
    private int verticalPatchNum;
    private List<List<Row>> columns;
    private Padding padding;
    private T image;
    private RepeatType repeatType;
    private int imageTrim = 1; 

    public AbstractNinePatch(T image)
    {
        this(image, null);
    }
    
    public AbstractNinePatch(T image, RepeatType repeatType)
    {
        image = toCompatibleImage(image);
        
        countPatch(image);
        
        this.image = image;
        
        this.repeatType = repeatType;
    }
    
    public AbstractNinePatch(T image, RepeatType repeatType, CapInsets capInsets)
    {
    	imageTrim = 0;
        image = toCompatibleImage(image);
        
        
        int width = getImageWidth(image);

        // ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¥Ã‚Â®Ã…Â¾ÃƒÂ©Ã¢â€žÂ¢Ã¢â‚¬Â¦ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦, ÃƒÂ¤Ã‚Â¸Ã¯Â¿Â½ÃƒÂ¥Ã…â€™Ã¢â‚¬Â¦ÃƒÂ¥Ã¯Â¿Â½Ã‚Â«ÃƒÂ¤Ã‚Â¸Ã…Â ÃƒÂ¤Ã‚Â¸Ã¢â‚¬Â¹ÃƒÂ¦Ã…Â½Ã‚Â§ÃƒÂ¥Ã‹â€ Ã‚Â¶ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
        int height = getImageHeight(image);

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã‚Â·Ã‚Â¦ÃƒÂ¤Ã‚Â¾Ã‚Â§ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¥Ã‹â€ Ã¢â‚¬â€?
        NinePatchRegion left = new NinePatchRegion(Arrays.asList(new Region(0, capInsets.getStretchTop()), new Region(height - capInsets.getStretchBottom(), height)),
        		Arrays.asList(new Region(capInsets.getStretchTop(), height - capInsets.getStretchBottom())));

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ©Ã‚Â¡Ã‚Â¶ÃƒÂ©Ã†â€™Ã‚Â¨ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¨Ã‚Â¡Ã…â€™
        NinePatchRegion top = new NinePatchRegion( 
        		Arrays.asList(new Region(0, capInsets.getStretchLeft()), new Region(width - capInsets.getStretchRight(), width)),
        		Arrays.asList(new Region(capInsets.getStretchLeft(), width - capInsets.getStretchRight())));

        // ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ©Ã¢â‚¬Â¡Ã¯Â¿Â½
        this.horizontalPatchNum = top.getPatchRegions().size();

        // ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ©Ã¢â‚¬Â¡Ã¯Â¿Â½
        this.verticalPatchNum = left.getPatchRegions().size();

        this.columns = countColumn(top, left);

        NinePatchRegion bottom =  new NinePatchRegion(Arrays.asList(new Region(0, 0)), Arrays.asList(new Region(0, 0)));

        NinePatchRegion right =  new NinePatchRegion(Arrays.asList(new Region(0, 0)), Arrays.asList(new Region(0, 0)));

        this.padding = getPadding(width, height, bottom.getPatchRegions(), right.getPatchRegions());

        
        
        this.image = image;
        
        this.repeatType = repeatType;
    }
    

    /**
     *
     * @param g2d
     * @param x
     * @param y
     * @param scaledWidth
     * @param scaledHeight
     */
	public void drawNinePatch(E g2d, int x, int y, int scaledWidth, int scaledHeight)
	{
		// ÃƒÂ¤Ã‚Â¿Ã‚Â®ÃƒÂ¥Ã‚Â¤Ã¯Â¿Â½BUGÃƒÂ©Ã‹Å“Ã‚Â²ÃƒÂ¦Ã‚Â­Ã‚Â¢ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã‚Â¤Ã‚Â§ÃƒÂ¥Ã‚Â°Ã¯Â¿Â½ÃƒÂ¥Ã‚Â°Ã¯Â¿Â½ÃƒÂ¤Ã‚ÂºÃ…Â½ÃƒÂ§Ã‚Â­Ã¢â‚¬Â°ÃƒÂ¤Ã‚ÂºÃ…Â½ÃƒÂ¥Ã…Â½Ã…Â¸ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ¥Ã‚Â¤Ã‚Â§ÃƒÂ¥Ã‚Â°Ã¯Â¿Â½
        if (scaledWidth <= 1 || scaledHeight <= 1)
        {
            return;
        }

        try
        {
            if(lastWidth != scaledWidth || lastHeight != scaledHeight)
            {
                lastWidth = scaledWidth;

                lastHeight = scaledHeight;

                resetData(scaledWidth, scaledHeight);
            }

            if(patchWidth == scaledWidth && patchHeight == scaledHeight)
            {
                drawImage(g2d, image, x, y, scaledWidth, scaledHeight);

                return;
            }

            translate(g2d, x, y);

            int startX = 0;
            int startY = 0;
            int minWidth = patchWidth;
            int minHeight = patchHeight;

            if(horizontalPatchNum > 1)
            {
                minWidth = (patchWidth / horizontalPatchNum);
            }

            if(verticalPatchNum > 1)
            {
                minHeight = (patchHeight / verticalPatchNum);
            }

            int columnCount = 0;

            // ÃƒÂ©Ã¢â€šÂ¬Ã¯Â¿Â½ÃƒÂ¨Ã‚Â¡Ã…â€™ÃƒÂ§Ã‚Â»Ã‹Å“ÃƒÂ¥Ã‹â€ Ã‚Â¶
            for(List<Row> rows : columns)
            {
                int rowCount = 0;

                int height = patchHeight;

                boolean isFirst = true;

                int preRowHeight = 0;
                
                // ÃƒÂ©Ã‹Å“Ã‚Â²ÃƒÂ¦Ã‚Â­Ã‚Â¢ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦ÃƒÂ¥Ã‚Â¤Ã‚Â§ÃƒÂ¤Ã‚ÂºÃ…Â½ÃƒÂ¥Ã‚Â®Ã…Â¾ÃƒÂ©Ã¢â€žÂ¢Ã¢â‚¬Â¦ÃƒÂ©Ã…â€œÃ¢â€šÂ¬ÃƒÂ¨Ã‚Â¦Ã¯Â¿Â½ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦
                if(startY >= scaledHeight)
                {
                    break;
                }

                for(Row row : rows)
                {
                    Rectangle rect = row.getRectangle();

                    int width = rect.width;
                    
                    // ÃƒÂ©Ã‹Å“Ã‚Â²ÃƒÂ¦Ã‚Â­Ã‚Â¢ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦ÃƒÂ¥Ã‚Â¤Ã‚Â§ÃƒÂ¤Ã‚ÂºÃ…Â½ÃƒÂ¥Ã‚Â®Ã…Â¾ÃƒÂ©Ã¢â€žÂ¢Ã¢â‚¬Â¦ÃƒÂ©Ã…â€œÃ¢â€šÂ¬ÃƒÂ¨Ã‚Â¦Ã¯Â¿Â½ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦
                    if(startX >= scaledWidth)
                    {
                        break;
                    }

                    if(Type.HORIZONTALPATCH == row.getType() || Type.TILEPATCH == row.getType())
                    {
                        // ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦
                        width = (patchWidth - minWidth * (rowCount + 1));

                        if(width < minWidth)
                        {
                            width = patchWidth - (minWidth * rowCount);
                        }
                        else
                        {
                            width = minWidth;
                        }

                        rowCount++;
                    }
                    else if(Type.HORIZONTALPATCH == row.getType())
                    {
                        // ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦
                        if(isFirst)
                        {
                            height = (patchHeight - minHeight * (columnCount + 1));

                            if(height < minHeight)
                            {
                                height = patchHeight - (minHeight * columnCount);
                            }
                            else
                            {
                                height = minHeight;
                            }

                            columnCount++;

                            isFirst = false;
                        }
                    }

                    // ÃƒÂ§Ã‚Â»Ã‹Å“ÃƒÂ¥Ã‹â€ Ã‚Â¶ÃƒÂ¥Ã¢â‚¬ÂºÃ‚ÂºÃƒÂ¥Ã‚Â®Ã…Â¡ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
                    if(Type.FIX == row.getType())
                    {
                        drawImage(g2d, image, rect.x, rect.y, rect.width, rect.height, startX, startY, rect.width, rect.height);

                        startX += rect.width;

                        preRowHeight = rect.height;
                    }
                    else if(Type.HORIZONTALPATCH == row.getType())
                    {
                        // ÃƒÂ§Ã‚Â»Ã‹Å“ÃƒÂ¥Ã‹â€ Ã‚Â¶ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
                        drawImage(g2d, image, rect.x, rect.y, rect.width, rect.height, startX, startY, width, rect.height);

                        startX += width;

                        preRowHeight = rect.height;
                    }
                    else if(Type.VERTICALPATCH == row.getType())
                    {
                        // ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸
                        drawImage(g2d, image, rect.x, rect.y, rect.width, rect.height, startX, startY, rect.width, height);

                        startX += rect.width;

                        preRowHeight = height;
                    }
                    else if(Type.TILEPATCH == row.getType())
                    {
                        // ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ©Ã¢â‚¬Å“Ã‚Âº
                        if(repeatType != null)
                        {
                            repeatImage(g2d, image, rect.x, rect.y, rect.width, rect.height, startX, startY, width, height);
                        }
                        else
                        {
                            drawImage(g2d, image, rect.x, rect.y, rect.width, rect.height, startX, startY, width, height);
                        }

                        startX += width;

                        preRowHeight = height;
                    }
                }

                startX = 0;
                startY += preRowHeight;
            }
        }
        catch (Exception e)
        {
            e.printStackTrace();
        }
        finally
        {
            translate(g2d, -x, -y);
        }
    }

    public List<List<Row>> countColumn(NinePatchRegion xRegions, NinePatchRegion yRegions)
    {
        boolean isPatchY = false; // ÃƒÂ¥Ã‚Â½Ã¢â‚¬Å“ÃƒÂ¥Ã¢â‚¬Â°Ã¯Â¿Â½ÃƒÂ¦Ã‹Å“Ã‚Â¯ÃƒÂ¥Ã¯Â¿Â½Ã‚Â¦ÃƒÂ¥Ã‚Â¤Ã¢â‚¬Å¾ÃƒÂ¤Ã‚ÂºÃ…Â½ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
        int i = 0; // ÃƒÂ¥Ã¢â‚¬ÂºÃ‚ÂºÃƒÂ¥Ã‚Â®Ã…Â¡ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¨Ã‚ÂµÃ‚Â·ÃƒÂ¥Ã‚Â§Ã¢â‚¬Â¹ÃƒÂ§Ã‚Â´Ã‚Â¢ÃƒÂ¥Ã‚Â¼Ã¢â‚¬Â¢
        int j = 0;// ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¨Ã‚ÂµÃ‚Â·ÃƒÂ¥Ã‚Â§Ã¢â‚¬Â¹ÃƒÂ§Ã‚Â´Ã‚Â¢ÃƒÂ¥Ã‚Â¼Ã¢â‚¬Â¢
        int patchNum = yRegions.getPatchRegions().size();
        int fixNum = yRegions.getFixRegions().size();

        Region yRegion = null; // ÃƒÂ¥Ã‚Â¾Ã‚ÂªÃƒÂ§Ã…Â½Ã‚Â¯ÃƒÂ¥Ã¢â‚¬Â¡Ã‚ÂºÃƒÂ¥Ã¯Â¿Â½Ã‚Â£ÃƒÂ¦Ã¯Â¿Â½Ã‚Â¡ÃƒÂ¤Ã‚Â»Ã‚Â¶

        List<List<Row>> columns = new LinkedList<List<Row>>();// ÃƒÂ¤Ã‚Â¹Ã¯Â¿Â½ÃƒÂ¥Ã‚Â®Ã‚Â«ÃƒÂ¦Ã‚Â Ã‚Â¼ÃƒÂ¨Ã‚Â¡Ã…â€™ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ 

        do
        {
            yRegion = null;

            if (isPatchY && patchNum >= j + 1)
            {
                yRegion = yRegions.getPatchRegions().get(j++);
            }

            if (!isPatchY && fixNum >= i + 1)
            {
                yRegion = yRegions.getFixRegions().get(i++);
            }

            if(yRegion != null)
            {
                columns.add(countRow(yRegion, xRegions, isPatchY));
            }

            isPatchY = !isPatchY;
        }
        while (yRegion != null);

        return columns;
    }

    /**
     * ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ§Ã¢â‚¬Å¡Ã‚Â¹ÃƒÂ¤Ã‚Â¹Ã¯Â¿Â½ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¦Ã‚Â¯Ã¯Â¿Â½ÃƒÂ¤Ã‚Â¸Ã¢â€šÂ¬ÃƒÂ¥Ã‹â€ Ã¢â‚¬â€?ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
     * @param yRegion
     * @param xRegions
     * @param isPatchY
     * @return ÃƒÂ¨Ã‚Â¿Ã¢â‚¬ï¿½ÃƒÂ¥Ã¢â‚¬ÂºÃ…Â¾ÃƒÂ¥Ã‚Â½Ã¢â‚¬Å“ÃƒÂ¥Ã¢â‚¬Â°Ã¯Â¿Â½ÃƒÂ¨Ã‚Â¡Ã…â€™
     */
    public List<Row> countRow(Region yRegion, NinePatchRegion xRegions, boolean isPatchY)
    {
        boolean isPatchX = false;
        int i = 0;
        int j = 0;
        int patchNum = xRegions.getPatchRegions().size();
        int fixNum = xRegions.getFixRegions().size();

        Region xRegion = null;

        List<Row> column = new LinkedList<Row>();

        do
        {
            xRegion = null;

            if (isPatchX && patchNum >= j + 1)
            {
                xRegion = xRegions.getPatchRegions().get(j++);
            }

            if (!isPatchX && fixNum >= i + 1)
            {
                xRegion = xRegions.getFixRegions().get(i++);
            }

            if(xRegion != null)
            {
                Row.Type rowType = getRowType(isPatchX, isPatchY);

                int height = yRegion.getEnd() - yRegion.getStart();

                int width = xRegion.getEnd() - xRegion.getStart();

                Rectangle rect = new Rectangle(xRegion.getStart() + imageTrim, yRegion.getStart() + imageTrim, width, height);

                Row row = new Row(rect, rowType);

                column.add(row);
            }

            isPatchX = !isPatchX;
        }
        while (xRegion != null);

        Collections.sort(column);

        return column;
    }



    /**
     * ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã¢â‚¬Â Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â¹ÃƒÂ¦Ã‹Å“Ã‚Â¾ÃƒÂ§Ã‚Â¤Ã‚ÂºÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ©Ã¢â‚¬â€?Ã‚Â´ÃƒÂ¨Ã‚Â·Ã¯Â¿Â½
     * @param w ÃƒÂ¥Ã¢â‚¬Â Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â¹ÃƒÂ©Ã¯Â¿Â½Ã‚Â¢ÃƒÂ¦Ã¯Â¿Â½Ã‚Â¿ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦
     * @param h ÃƒÂ¥Ã¢â‚¬Â Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â¹ÃƒÂ©Ã¯Â¿Â½Ã‚Â¢ÃƒÂ¦Ã¯Â¿Â½Ã‚Â¿ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦
     * @param xRegions xÃƒÂ¥Ã¯Â¿Â½Ã¯Â¿Â½ÃƒÂ¦Ã‚Â Ã¢â‚¬Â¡ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ 
     * @param yRegions yÃƒÂ¥Ã¯Â¿Â½Ã¯Â¿Â½ÃƒÂ¦Ã‚Â Ã¢â‚¬Â¡ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ 
     * @return
     */
    public Padding getPadding(int w, int h, List<Region> xRegions, List<Region> yRegions)
    {
        Region xRegion = xRegions.get(0);
        Region yRegion = yRegions.get(0);

        int left = xRegion.getStart();
        int top = yRegion.getStart();
        int right = w - xRegion.getEnd();
        int bottom = h - yRegion.getEnd();

        return new Padding(left, top, right, bottom);
    }

    /**
     * ÃƒÂ¦Ã‚Â Ã‚Â¹ÃƒÂ¦Ã¯Â¿Â½Ã‚Â®ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¥Ã¢â€šÂ¬Ã‚Â¼ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ¥Ã‚Â½Ã¢â‚¬Å“ÃƒÂ¥Ã¢â‚¬Â°Ã¯Â¿Â½ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¤Ã‚Â¸Ã‚Â­ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã¢â‚¬ÂºÃ‚ÂºÃƒÂ¥Ã‚Â®Ã…Â¡ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¥Ã¢â‚¬â„¢Ã…â€™ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
     * @param pixels ÃƒÂ©Ã…â€œÃ¢â€šÂ¬ÃƒÂ¨Ã‚Â¦Ã¯Â¿Â½ÃƒÂ¦Ã…Â¸Ã‚Â¥ÃƒÂ¦Ã¢â‚¬Â°Ã‚Â¾ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ 
     * @return
     */
    public NinePatchRegion getPatches(int[] pixels)
    {
        int start = 0;

        int lastPixel = pixels[0];

        List<Region> fixArea = new LinkedList<Region>();

        List<Region> patchArea = new LinkedList<Region>();

        for(int i = 1; i <= pixels.length; i++)
        {
            if(i < pixels.length && lastPixel == pixels[i])
            {
                continue;
            }

            // ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ©Ã¢â‚¬â€?Ã‚Â´ÃƒÂ¥Ã‚Â¯Ã‚Â¹ÃƒÂ¨Ã‚Â±Ã‚Â¡
            Region region = new Region(start, i);

            if (PATCH_PIXES == lastPixel)
            {
                patchArea.add(region);
            }
            else
            {
                fixArea.add(region);
            }

            start = i;

            if(i < pixels.length)
            {
                lastPixel = pixels[i];
            }
        }

        // ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ ÃƒÂ¤Ã‚Â¸Ã‚Â­ÃƒÂ¦Ã‚Â²Ã‚Â¡ÃƒÂ¦Ã…â€œÃ¢â‚¬Â°ÃƒÂ¦Ã¢â‚¬Â°Ã‚Â¾ÃƒÂ¥Ã‹â€ Ã‚Â°ÃƒÂ§Ã¢â‚¬Â°Ã‚Â¹ÃƒÂ¦Ã‚Â®Ã…Â ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â 
        if(start == 0)
        {
            Region region = new Region(start, pixels.length);

            if (PATCH_PIXES == lastPixel)
            {
                patchArea.add(region);
            }
            else
            {
                fixArea.add(region);
            }
        }

        return new NinePatchRegion(fixArea, patchArea);
    }
    
    /**
     * ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ©Ã¢â‚¬Å“Ã‚ÂºÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡
     * @param g2d
     * @param image
     * @param x
     * @param y
     * @param sw
     * @param sh
     * @param dx
     * @param dy
     * @param dw
     * @param dh
     */
    public void repeatImage(E g2d,
                            T image,
                            int x,
                            int y,
                            int sw,
                            int sh,
                            int dx,
                            int dy,
                            int dw,
                            int dh)
    {
        if (repeatType == null)
        {
            return;
        }

        if (repeatType == RepeatType.HORIZONTAL)
        {
            int hornaizeW = dw;

            // 
            do
            {
                if (hornaizeW - sw < 0)
                {
                    sw = hornaizeW;
                }

                hornaizeW -= sw;

                drawImage(g2d, image, x, y, sw, sh, dx, dy, sw, dh);

                dx += sw;

            }
            while (hornaizeW > 0);
        }
        else if (repeatType == RepeatType.VERTICAL)
        {
            int verticalH = dh;

            // ÃƒÆ’Ã¢â‚¬Â¹Ãƒâ€šÃ‚Â®ÃƒÆ’Ã¢â‚¬Â Ãƒâ€šÃ‚Â½ÃƒÆ’Ã¢â€šÂ¬Ãƒâ€šÃ‚Â­ÃƒÆ’Ã¢â‚¬Â°ÃƒÆ’Ã‚Â¬
            do
            {
                if (verticalH - sh < 0)
                {
                    sh = verticalH;
                }

                verticalH -= sh;

                drawImage(g2d, image, x, y, sw, sh, dx, dy, dw, sh);

                dy += sh;

            }
            while (verticalH > 0);
        }
    }
    
    /**
     * ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ§Ã¢â‚¬Å¡Ã‚Â¹ÃƒÂ¤Ã‚Â¹Ã¯Â¿Â½ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¤Ã‚Â¿Ã‚Â¡ÃƒÂ¦Ã¯Â¿Â½Ã‚Â¯
     * <p>|1|   2  |3|</p>
     * <p>|4|   5  |6|</p>
     * <p>|7|   8  |9|</p>
     *  ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¤Ã‚Â¸Ã‚Â­ÃƒÂ¦Ã‚Â¯Ã¯Â¿Â½ÃƒÂ¤Ã‚Â¸Ã¢â€šÂ¬ÃƒÂ¨Ã‚Â¡Ã…â€™ÃƒÂ©Ã¢â‚¬Â¡Ã…â€™ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã¢â‚¬ÂºÃ‚ÂºÃƒÂ¥Ã‚Â®Ã…Â¡ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ£Ã¢â€šÂ¬Ã¯Â¿Â½ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ£Ã¢â€šÂ¬Ã¯Â¿Â½ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã¢â‚¬â„¢Ã…â€™ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ©Ã¢â‚¬Å“Ã‚ÂºÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¤Ã‚Â»Ã‚Â¥ÃƒÂ¥Ã¯Â¿Â½Ã…Â ÃƒÂ¥Ã¢â‚¬Â Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â¹ÃƒÂ¦Ã‹Å“Ã‚Â¾ÃƒÂ§Ã‚Â¤Ã‚ÂºÃƒÂ©Ã¢â‚¬â€?Ã‚Â´ÃƒÂ¨Ã‚Â·Ã¯Â¿Â½
     * @param image
     */
    protected void countPatch(T image)
    {
        // ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¥Ã‚Â®Ã…Â¾ÃƒÂ©Ã¢â€žÂ¢Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦, ÃƒÂ¤Ã‚Â¸Ã¯Â¿Â½ÃƒÂ¥Ã…â€™Ã¢â‚¬Â¦ÃƒÂ¥Ã¯Â¿Â½Ã‚Â«ÃƒÂ¥Ã‚Â·Ã‚Â¦ÃƒÂ¥Ã¯Â¿Â½Ã‚Â³ÃƒÂ¦Ã…Â½Ã‚Â§ÃƒÂ¥Ã‹â€ Ã‚Â¶ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
        int width = getImageWidth(image) - 2;

        // ÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¥Ã‚Â®Ã…Â¾ÃƒÂ©Ã¢â€žÂ¢Ã¢â‚¬Â¦ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦, ÃƒÂ¤Ã‚Â¸Ã¯Â¿Â½ÃƒÂ¥Ã…â€™Ã¢â‚¬Â¦ÃƒÂ¥Ã¯Â¿Â½Ã‚Â«ÃƒÂ¤Ã‚Â¸Ã…Â ÃƒÂ¤Ã‚Â¸Ã¢â‚¬Â¹ÃƒÂ¦Ã…Â½Ã‚Â§ÃƒÂ¥Ã‹â€ Ã‚Â¶ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸
        int height = getImageHeight(image) - 2;

        // ÃƒÂ¨Ã‚Â¡Ã…â€™
        int[] row = null;

        // ÃƒÂ¥Ã‹â€ Ã¢â‚¬â€?
        int[] column = null;

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã‚Â·Ã‚Â¦ÃƒÂ¤Ã‚Â¾Ã‚Â§ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â 
        column = getPixels(image, 0, 1, 1, height);

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã‚Â·Ã‚Â¦ÃƒÂ¤Ã‚Â¾Ã‚Â§ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¥Ã‹â€ Ã¢â‚¬â€?
        NinePatchRegion left = getPatches(column);

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ©Ã‚Â¡Ã‚Â¶ÃƒÂ©Ã†â€™Ã‚Â¨ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¥Ã¢â€šÂ¬Ã‚Â¼, ÃƒÂ¤Ã‚Â¸Ã¯Â¿Â½ÃƒÂ¥Ã…â€™Ã¢â‚¬Â¦ÃƒÂ¥Ã¯Â¿Â½Ã‚Â«ÃƒÂ¥Ã‚Â·Ã‚Â¦ÃƒÂ¥Ã¯Â¿Â½Ã‚Â³ÃƒÂ¦Ã…Â½Ã‚Â§ÃƒÂ¥Ã‹â€ Ã‚Â¶ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¯Ã‚Â¼Ã…â€™ÃƒÂ¦Ã¢â‚¬Â°Ã¢â€šÂ¬ÃƒÂ¤Ã‚Â»Ã‚Â¥ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬ËœÃƒÂ¥Ã¯Â¿Â½Ã‚Â³ÃƒÂ¥Ã¯Â¿Â½Ã¯Â¿Â½ÃƒÂ§Ã‚Â§Ã‚Â»ÃƒÂ¤Ã‚Â¸Ã¢â€šÂ¬ÃƒÂ¤Ã‚Â¸Ã‚ÂªÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â 
        row = getPixels(image, 1, 0, width, 1);

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ©Ã‚Â¡Ã‚Â¶ÃƒÂ©Ã†â€™Ã‚Â¨ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¨Ã‚Â¡Ã…â€™
        NinePatchRegion top = getPatches(row);

        // ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ©Ã¢â‚¬Â¡Ã¯Â¿Â½
        this.horizontalPatchNum = top.getPatchRegions().size();

        // ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ©Ã¢â‚¬Â¡Ã¯Â¿Â½
        this.verticalPatchNum = left.getPatchRegions().size();

        this.columns = countColumn(top, left);

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã‚ÂºÃ¢â‚¬Â¢ÃƒÂ©Ã†â€™Ã‚Â¨ÃƒÂ¦Ã‚Â°Ã‚Â´ÃƒÂ¥Ã‚Â¹Ã‚Â³ÃƒÂ¥Ã¢â‚¬Â Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â¹ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ 
        row = getPixels(image, 1, height + 1, width, 1);

        // ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã¯Â¿Â½Ã‚Â³ÃƒÂ¤Ã‚Â¾Ã‚Â§ÃƒÂ¥Ã…Â¾Ã¢â‚¬Å¡ÃƒÂ§Ã¢â‚¬ÂºÃ‚Â´ÃƒÂ¥Ã¢â‚¬Â Ã¢â‚¬Â¦ÃƒÂ¥Ã‚Â®Ã‚Â¹ÃƒÂ¦Ã¢â‚¬Â¹Ã¢â‚¬Â°ÃƒÂ¤Ã‚Â¼Ã‚Â¸ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ©Ã¢â‚¬ÂºÃ¢â‚¬Â ÃƒÂ¥Ã¯Â¿Â½Ã‹â€ 
        column = getPixels(image, width + 1, 1, 1, height);

        NinePatchRegion bottom = getPatches(row);

        NinePatchRegion right = getPatches(column);

        this.padding = getPadding(width, height, bottom.getPatchRegions(), right.getPatchRegions());
    }
    
    protected T toCompatibleImage(T image)
    {
    	return image;
    }

    /**
     * ÃƒÂ¤Ã‚Â»Ã…Â½ÃƒÂ¦Ã…â€™Ã¢â‚¬Â¡ÃƒÂ¥Ã‚Â®Ã…Â¡ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ§Ã…Â¸Ã‚Â©ÃƒÂ¥Ã‚Â½Ã‚Â¢ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¤Ã‚Â¸Ã‚Â­ÃƒÂ¨Ã‚Â¯Ã‚Â»ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ¦Ã¯Â¿Â½Ã‚Â®
     * @param img
     * @param x ÃƒÂ¨Ã‚ÂµÃ‚Â·ÃƒÂ¥Ã‚Â§Ã¢â‚¬Â¹xÃƒÂ¥Ã¯Â¿Â½Ã¯Â¿Â½ÃƒÂ¦Ã‚Â Ã¢â‚¬Â¡
     * @param y ÃƒÂ¨Ã‚ÂµÃ‚Â·ÃƒÂ¥Ã‚Â§Ã¢â‚¬Â¹yÃƒÂ¥Ã¯Â¿Â½Ã¯Â¿Â½ÃƒÂ¦Ã‚Â Ã¢â‚¬Â¡
     * @param w ÃƒÂ§Ã…Â¸Ã‚Â©ÃƒÂ¥Ã‚Â½Ã‚Â¢ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦
     * @param h ÃƒÂ§Ã…Â¸Ã‚Â©ÃƒÂ¥Ã‚Â½Ã‚Â¢ÃƒÂ§Ã…Â¡Ã¢â‚¬Å¾ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦
     * @return ÃƒÂ¦Ã…â€™Ã¢â‚¬Â¡ÃƒÂ¥Ã‚Â®Ã…Â¡ÃƒÂ§Ã…Â¸Ã‚Â©ÃƒÂ¥Ã‚Â½Ã‚Â¢ÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¥Ã†â€™Ã¯Â¿Â½ÃƒÂ§Ã‚Â´Ã‚Â ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ¦Ã¯Â¿Â½Ã‚Â®ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â´ÃƒÂ¥Ã…Â¾Ã¢â‚¬Â¹ÃƒÂ¦Ã¢â‚¬Â¢Ã‚Â°ÃƒÂ§Ã‚Â»Ã¢â‚¬Å¾
     */
    public abstract int[] getPixels(T img, int x, int y, int w, int h);

    /**
     * ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ¥Ã‚Â®Ã‚Â½ÃƒÂ¥Ã‚ÂºÃ‚Â¦
     * @param img
     * @return
     */
    public abstract int getImageWidth(T img);

    /**
     * ÃƒÂ¨Ã…Â½Ã‚Â·ÃƒÂ¥Ã¯Â¿Â½Ã¢â‚¬â€œÃƒÂ¥Ã¢â‚¬ÂºÃ‚Â¾ÃƒÂ§Ã¢â‚¬Â°Ã¢â‚¬Â¡ÃƒÂ©Ã‚Â«Ã‹Å“ÃƒÂ¥Ã‚ÂºÃ‚Â¦
     * @param img
     * @return
     */
    public abstract int getImageHeight(T img);

    /**
     *
     * @param g2d
     * @param x
     * @param y
     */
    public abstract void translate(E g2d, int x, int y);

    /**
     *
     * @param g2d
     * @param image
     * @param x
     * @param y
     * @param scaledWidth
     * @param scaledHeight
     */
    public abstract void drawImage(E g2d,
                                   T image,
                                   int x,
                                   int y,
                                   int scaledWidth,
                                   int scaledHeight);

    /**
     *
     * @param g2d
     * @param image
     * @param sx
     * @param sy
     * @param sw
     * @param sh
     * @param dx
     * @param dy
     * @param dw
     * @param dh
     */
    public abstract void drawImage(E g2d,
                                   T image,
                                   int sx,
                                   int sy,
                                   int sw,
                                   int sh,
                                   int dx,
                                   int dy,
                                   int dw,
                                   int dh);

    /**
     *
     * @param scaleWidth
     * @param scaleHeight
     */
    private void resetData(int scaleWidth, int scaleHeight)
    {
        this.patchWidth = scaleWidth;
        this.patchHeight = scaleHeight;
        boolean isFirst = true;
        boolean isNewColumn = true;

        for(List<Row> rows : columns)
        {
            for(Row row : rows)
            {
                if(Type.FIX == row.getType() && isFirst)
                {
                    patchWidth -= row.getRectangle().width;
                }

                //BUG FIX: ÃƒÂ¤Ã‚Â¿Ã‚Â®ÃƒÂ¥Ã‚Â¤Ã¯Â¿Â½ÃƒÂ¦Ã‹Å“Ã‚Â¾ÃƒÂ§Ã‚Â¤Ã‚ÂºÃƒÂ¥Ã…â€™Ã‚ÂºÃƒÂ¥Ã…Â¸Ã…Â¸ÃƒÂ¨Ã‚Â®Ã‚Â¡ÃƒÂ§Ã‚Â®Ã¢â‚¬â€?ÃƒÂ©Ã¢â‚¬â€?Ã‚Â®ÃƒÂ©Ã‚Â¢Ã‹Å“
                if(Type.FIX == row.getType() && isNewColumn)
                {
                    patchHeight -= row.getRectangle().height;

                    isNewColumn = false;
                }
            }

            isNewColumn = true;

            isFirst = false;
        }
    }

    private Type getRowType(boolean isPatchX, boolean isPatchY)
    {
        if (!isPatchX && !isPatchY)
        {
            return Type.FIX;
        }

        if (!isPatchX && isPatchY)
        {
            return Type.VERTICALPATCH;
        }

        if (isPatchX && !isPatchY)
        {
            return Type.HORIZONTALPATCH;
        }

        return Type.TILEPATCH;
    }

    public Padding getPadding()
    {
        return padding;
    }
}
