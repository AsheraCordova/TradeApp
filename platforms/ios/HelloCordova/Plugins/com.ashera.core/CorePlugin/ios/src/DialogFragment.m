//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCorePlugin\src\main\java\com\ashera\core\DialogFragment.java
//

#include "DialogFragment.h"
#include "GenericFragment.h"
#include "IMaxDimension.h"
#include "IOSClass.h"
#include "IRoot.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "View.h"
#include "ViewGroup.h"
#include "java/lang/Float.h"


@interface ASDialogFragment () {
 @public
  jint layoutWidth_;
  jint layoutHeight_;
  id dialog_;
  jint maxWidth_;
  jint maxHeight_;
  jboolean forceLayout_;
  jfloat marginPercent_;
}

@end

J2OBJC_FIELD_SETTER(ASDialogFragment, dialog_, id)

@implementation ASDialogFragment

- (void)setMaxHeightWithInt:(jint)maxHeight {
  forceLayout_ = true;
  self->maxHeight_ = maxHeight;
}

- (void)setMaxWidthWithInt:(jint)maxWidth {
  forceLayout_ = true;
  self->maxWidth_ = maxWidth;
}

- (instancetype)initWithId:(id)dialog
                   withInt:(jint)layoutWidth
                   withInt:(jint)layoutHeight
         withJavaLangFloat:(JavaLangFloat *)marginPercent {
  ASDialogFragment_initWithId_withInt_withInt_withJavaLangFloat_(self, dialog, layoutWidth, layoutHeight, marginPercent);
  return self;
}

- (jboolean)isFullScreen {
  return marginPercent_ >= 1;
}

- (id)getParentForRootWidget {
  if (dialog_ != nil) {
    return dialog_;
  }
  return [super getParentForRootWidget];
}

- (void)remeasure {
  id<ASIRoot> root = (id<ASIRoot>) cast_check([super getRootWidget], ASIRoot_class_());
  if (maxWidth_ == -1) {
    maxWidth_ = JreFpToInt((marginPercent_ * ASPluginInvoker_getScreenWidth()));
  }
  if (maxHeight_ == -1) {
    maxHeight_ = JreFpToInt((marginPercent_ * ASPluginInvoker_getScreenHeight()));
  }
  jint width = layoutWidth_;
  if (layoutWidth_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
    width = maxWidth_;
  }
  else if (layoutWidth_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
    [((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check([((id<ASIWidget>) nil_chk(((id<ASIWidget>) cast_check(root, ASIWidget_class_())))) asWidget], ASIMaxDimension_class_())))) setMaxWidthWithInt:maxWidth_];
  }
  jint height = layoutHeight_;
  if (layoutHeight_ == ADViewGroup_LayoutParams_MATCH_PARENT) {
    height = maxHeight_;
  }
  else if (layoutHeight_ == ADViewGroup_LayoutParams_WRAP_CONTENT) {
    [((id<ASIMaxDimension>) nil_chk(((id<ASIMaxDimension>) cast_check([((id<ASIWidget>) nil_chk(((id<ASIWidget>) cast_check(root, ASIWidget_class_())))) asWidget], ASIMaxDimension_class_())))) setMaxHeightWithInt:maxHeight_];
  }
  if (forceLayout_) {
    ADView *view = (ADView *) cast_chk([((id<ASIWidget>) nil_chk([self getRootWidget])) asWidget], [ADView class]);
    [((ADView *) nil_chk(view)) forceLayout];
    forceLayout_ = false;
  }
  [super setFrameWithInt:0 withInt:0 withInt:width withInt:height];
  [super remeasure];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxHeightWithInt:);
  methods[1].selector = @selector(setMaxWidthWithInt:);
  methods[2].selector = @selector(initWithId:withInt:withInt:withJavaLangFloat:);
  methods[3].selector = @selector(isFullScreen);
  methods[4].selector = @selector(getParentForRootWidget);
  methods[5].selector = @selector(remeasure);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "layoutWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "layoutHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dialog_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "forceLayout_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marginPercent_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxHeight", "I", "setMaxWidth", "LNSObject;IILJavaLangFloat;" };
  static const J2ObjcClassInfo _ASDialogFragment = { "DialogFragment", "com.ashera.core", ptrTable, methods, fields, 7, 0x1, 6, 7, -1, -1, -1, -1, -1 };
  return &_ASDialogFragment;
}

@end

void ASDialogFragment_initWithId_withInt_withInt_withJavaLangFloat_(ASDialogFragment *self, id dialog, jint layoutWidth, jint layoutHeight, JavaLangFloat *marginPercent) {
  ASGenericFragment_init(self);
  self->maxWidth_ = -1;
  self->maxHeight_ = -1;
  self->marginPercent_ = 0.75f;
  self->dialog_ = dialog;
  self->layoutWidth_ = layoutWidth;
  self->layoutHeight_ = layoutHeight;
  if (marginPercent != nil) {
    self->marginPercent_ = [marginPercent floatValue];
  }
}

ASDialogFragment *new_ASDialogFragment_initWithId_withInt_withInt_withJavaLangFloat_(id dialog, jint layoutWidth, jint layoutHeight, JavaLangFloat *marginPercent) {
  J2OBJC_NEW_IMPL(ASDialogFragment, initWithId_withInt_withInt_withJavaLangFloat_, dialog, layoutWidth, layoutHeight, marginPercent)
}

ASDialogFragment *create_ASDialogFragment_initWithId_withInt_withInt_withJavaLangFloat_(id dialog, jint layoutWidth, jint layoutHeight, JavaLangFloat *marginPercent) {
  J2OBJC_CREATE_IMPL(ASDialogFragment, initWithId_withInt_withInt_withJavaLangFloat_, dialog, layoutWidth, layoutHeight, marginPercent)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDialogFragment)
