//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSAndroidXConstraintLayoutPlugin\src\main\java\com\ashera\constraintlayout\FlowImpl.java
//

#include "AbstractEnumToIntConverter.h"
#include "BaseWidget.h"
#include "ConstraintReferencedIdsConverter.h"
#include "ConverterFactory.h"
#include "Flow.h"
#include "FlowImpl.h"
#include "IAttributable.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "View.h"
#include "ViewImpl.h"
#include "ViewParent.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIView.h"

@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASFlowImpl () {
 @public
  ASFlowImpl_FlowCommandBuilder *builder_;
  ASFlowImpl_FlowBean *bean_;
}

- (void)setWidgetOnNativeClass;

- (void)setConstraintReferenced_idsWithId:(id)objValue;

- (id)getConstraintReferencedIds;

@end

J2OBJC_FIELD_SETTER(ASFlowImpl, builder_, ASFlowImpl_FlowCommandBuilder *)
J2OBJC_FIELD_SETTER(ASFlowImpl, bean_, ASFlowImpl_FlowBean *)

__attribute__((unused)) static void ASFlowImpl_setWidgetOnNativeClass(ASFlowImpl *self);

__attribute__((unused)) static void ASFlowImpl_setConstraintReferenced_idsWithId_(ASFlowImpl *self, id objValue);

__attribute__((unused)) static id ASFlowImpl_getConstraintReferencedIds(ASFlowImpl *self);

@interface ASFlowImpl_Orientation () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Orientation, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_horizontalStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_horizontalStyle, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_verticalStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_verticalStyle, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_wrapMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_wrapMode, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_verticalAlign () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_verticalAlign, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_horizontalAlign () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_horizontalAlign, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_firstHorizontalStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_firstHorizontalStyle, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_Flow_firstVerticalStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_Flow_firstVerticalStyle, mapping_, id<JavaUtilMap>)

@interface ASFlowImpl_FlowExt () {
 @public
  __unsafe_unretained ASFlowImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
  jint mMaxWidth_;
  jint mMaxHeight_;
}

@end

J2OBJC_FIELD_SETTER(ASFlowImpl_FlowExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASFlowImpl_FlowExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASFlowImpl_FlowCommandBuilder () {
 @public
  ASFlowImpl *this$0_;
}

@end

@interface ASFlowImpl_FlowBean () {
 @public
  ASFlowImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASFlowImpl)

NSString *ASFlowImpl_LOCAL_NAME = @"androidx.constraintlayout.helper.widget.Flow";
NSString *ASFlowImpl_GROUP_NAME = @"androidx.constraintlayout.helper.widget.Flow";

@implementation ASFlowImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.orientation", new_ASFlowImpl_Orientation_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"orientation"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.orientation"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_horizontalStyle", new_ASFlowImpl_Flow_horizontalStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_horizontalStyle"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_horizontalStyle"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_verticalStyle", new_ASFlowImpl_Flow_verticalStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_verticalStyle"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_verticalStyle"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_wrapMode", new_ASFlowImpl_Flow_wrapMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_wrapMode"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_wrapMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_maxElementsWrap"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_horizontalGap"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_verticalGap"])) withTypeWithNSString:@"dimension"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_verticalAlign", new_ASFlowImpl_Flow_verticalAlign_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_verticalAlign"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_verticalAlign"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_horizontalAlign", new_ASFlowImpl_Flow_horizontalAlign_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_horizontalAlign"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_horizontalAlign"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_verticalBias"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_horizontalBias"])) withTypeWithNSString:@"float"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_firstHorizontalStyle", new_ASFlowImpl_Flow_firstHorizontalStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_firstHorizontalStyle"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_firstHorizontalStyle"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"androidx.constraintlayout.helper.widget.Flow.flow_firstVerticalStyle", new_ASFlowImpl_Flow_firstVerticalStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_firstVerticalStyle"])) withTypeWithNSString:@"androidx.constraintlayout.helper.widget.Flow.flow_firstVerticalStyle"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_firstHorizontalBias"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"flow_firstVerticalBias"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"constraint_referenced_ids"])) withTypeWithNSString:@"FlowImpl.constraintReferencedIds"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASFlowImpl_FlowExt *) nil_chk(((ASFlowImpl_FlowExt *) cast_chk(flow_, [ASFlowImpl_FlowExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASFlowImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  flow_ = new_ASFlowImpl_FlowExt_initWithASFlowImpl_(self);
  [self nativeCreateWithJavaUtilMap:params];
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASFlowImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASFlowImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"orientation", @"flow_horizontalStyle", @"flow_verticalStyle", @"flow_wrapMode", @"flow_maxElementsWrap", @"flow_horizontalGap", @"flow_verticalGap", @"flow_verticalAlign", @"flow_horizontalAlign", @"flow_verticalBias", @"flow_horizontalBias", @"flow_firstHorizontalStyle", @"flow_firstVerticalStyle", @"flow_firstHorizontalBias", @"flow_firstVerticalBias", @"constraint_referenced_ids" }, 16)) {
    case 0:
    {
      [((ADXFlow *) nil_chk(flow_)) setOrientationWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 1:
    {
      [((ADXFlow *) nil_chk(flow_)) setHorizontalStyleWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 2:
    {
      [((ADXFlow *) nil_chk(flow_)) setVerticalStyleWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 3:
    {
      [((ADXFlow *) nil_chk(flow_)) setWrapModeWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 4:
    {
      [((ADXFlow *) nil_chk(flow_)) setMaxElementsWrapWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 5:
    {
      [((ADXFlow *) nil_chk(flow_)) setHorizontalGapWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 6:
    {
      [((ADXFlow *) nil_chk(flow_)) setVerticalGapWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 7:
    {
      [((ADXFlow *) nil_chk(flow_)) setVerticalAlignWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 8:
    {
      [((ADXFlow *) nil_chk(flow_)) setHorizontalAlignWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 9:
    {
      [((ADXFlow *) nil_chk(flow_)) setVerticalBiasWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 10:
    {
      [((ADXFlow *) nil_chk(flow_)) setHorizontalBiasWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 11:
    {
      [((ADXFlow *) nil_chk(flow_)) setFirstHorizontalStyleWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 12:
    {
      [((ADXFlow *) nil_chk(flow_)) setFirstVerticalStyleWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
    }
    break;
    case 13:
    {
      [((ADXFlow *) nil_chk(flow_)) setFirstHorizontalBiasWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 14:
    {
      [((ADXFlow *) nil_chk(flow_)) setFirstVerticalBiasWithFloat:[((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue]];
    }
    break;
    case 15:
    {
      ASFlowImpl_setConstraintReferenced_idsWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"constraint_referenced_ids" }, 1)) {
    case 0:
    {
      return ASFlowImpl_getConstraintReferencedIds(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return flow_;
}

- (void)setConstraintReferenced_idsWithId:(id)objValue {
  ASFlowImpl_setConstraintReferenced_idsWithId_(self, objValue);
}

- (id)getConstraintReferencedIds {
  return ASFlowImpl_getConstraintReferencedIds(self);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ADXFlow *) nil_chk(flow_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
    [self nativeRequestLayout];
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASFlowImpl_FlowBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASFlowImpl_FlowBean_initWithASFlowImpl_(self);
  }
  return bean_;
}

- (ASFlowImpl_FlowCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASFlowImpl_FlowCommandBuilder_initWithASFlowImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUIView* uiView = [ASUIView new];
  uiView.backgroundColor = [UIColor clearColor];
  uiView_ = uiView;
}

- (void)nativeRequestLayout {
  [((id<ADViewParent>) nil_chk([((ADXFlow *) nil_chk(flow_)) getParent])) requestLayout];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 15, 1, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 16, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(setConstraintReferenced_idsWithId:);
  methods[10].selector = @selector(getConstraintReferencedIds);
  methods[11].selector = @selector(asNativeWidget);
  methods[12].selector = @selector(checkIosVersionWithNSString:);
  methods[13].selector = @selector(setIdWithNSString:);
  methods[14].selector = @selector(requestLayout);
  methods[15].selector = @selector(invalidate);
  methods[16].selector = @selector(getPluginWithNSString:);
  methods[17].selector = @selector(getBean);
  methods[18].selector = @selector(getBuilder);
  methods[19].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[20].selector = @selector(nativeRequestLayout);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 19, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 20, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "flow_", "LADXFlow;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "builder_", "LASFlowImpl_FlowCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASFlowImpl_FlowBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setConstraintReferenced_ids", "LNSObject;", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", &ASFlowImpl_LOCAL_NAME, &ASFlowImpl_GROUP_NAME, "LASFlowImpl_Orientation;LASFlowImpl_Flow_horizontalStyle;LASFlowImpl_Flow_verticalStyle;LASFlowImpl_Flow_wrapMode;LASFlowImpl_Flow_verticalAlign;LASFlowImpl_Flow_horizontalAlign;LASFlowImpl_Flow_firstHorizontalStyle;LASFlowImpl_Flow_firstVerticalStyle;LASFlowImpl_FlowExt;LASFlowImpl_FlowCommandBuilder;LASFlowImpl_FlowBean;" };
  static const J2ObjcClassInfo _ASFlowImpl = { "FlowImpl", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 21, 6, -1, 21, -1, -1, -1 };
  return &_ASFlowImpl;
}

+ (void)initialize {
  if (self == [ASFlowImpl class]) {
    {
      ASConverterFactory_register__WithNSString_withASIConverter_(@"FlowImpl.constraintReferencedIds", new_ASConstraintReferencedIdsConverter_init());
    }
    J2OBJC_SET_INITIALIZED(ASFlowImpl)
  }
}

@end

void ASFlowImpl_init(ASFlowImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASFlowImpl_GROUP_NAME, ASFlowImpl_LOCAL_NAME);
}

ASFlowImpl *new_ASFlowImpl_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl, init)
}

ASFlowImpl *create_ASFlowImpl_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl, init)
}

void ASFlowImpl_setWidgetOnNativeClass(ASFlowImpl *self) {
  ((ASUIView*) self.uiView).widget = self;
}

void ASFlowImpl_setConstraintReferenced_idsWithId_(ASFlowImpl *self, id objValue) {
  [((ADXFlow *) nil_chk(self->flow_)) setReferencedIdsWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class])];
}

id ASFlowImpl_getConstraintReferencedIds(ASFlowImpl *self) {
  return [((ADXFlow *) nil_chk(self->flow_)) getReferencedIds];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl)

@implementation ASFlowImpl_Orientation

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Orientation_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Orientation = { "Orientation", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Orientation;
}

@end

void ASFlowImpl_Orientation_init(ASFlowImpl_Orientation *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"horizontal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"vertical" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASFlowImpl_Orientation *new_ASFlowImpl_Orientation_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Orientation, init)
}

ASFlowImpl_Orientation *create_ASFlowImpl_Orientation_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Orientation, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Orientation)

@implementation ASFlowImpl_Flow_horizontalStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_horizontalStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_horizontalStyle = { "Flow_horizontalStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_horizontalStyle;
}

@end

void ASFlowImpl_Flow_horizontalStyle_init(ASFlowImpl_Flow_horizontalStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASFlowImpl_Flow_horizontalStyle *new_ASFlowImpl_Flow_horizontalStyle_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_horizontalStyle, init)
}

ASFlowImpl_Flow_horizontalStyle *create_ASFlowImpl_Flow_horizontalStyle_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_horizontalStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_horizontalStyle)

@implementation ASFlowImpl_Flow_verticalStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_verticalStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_verticalStyle = { "Flow_verticalStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_verticalStyle;
}

@end

void ASFlowImpl_Flow_verticalStyle_init(ASFlowImpl_Flow_verticalStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASFlowImpl_Flow_verticalStyle *new_ASFlowImpl_Flow_verticalStyle_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_verticalStyle, init)
}

ASFlowImpl_Flow_verticalStyle *create_ASFlowImpl_Flow_verticalStyle_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_verticalStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_verticalStyle)

@implementation ASFlowImpl_Flow_wrapMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_wrapMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_wrapMode = { "Flow_wrapMode", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_wrapMode;
}

@end

void ASFlowImpl_Flow_wrapMode_init(ASFlowImpl_Flow_wrapMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"chain" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"aligned" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASFlowImpl_Flow_wrapMode *new_ASFlowImpl_Flow_wrapMode_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_wrapMode, init)
}

ASFlowImpl_Flow_wrapMode *create_ASFlowImpl_Flow_wrapMode_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_wrapMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_wrapMode)

@implementation ASFlowImpl_Flow_verticalAlign

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_verticalAlign_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_verticalAlign = { "Flow_verticalAlign", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_verticalAlign;
}

@end

void ASFlowImpl_Flow_verticalAlign_init(ASFlowImpl_Flow_verticalAlign *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"top" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"bottom" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"baseline" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASFlowImpl_Flow_verticalAlign *new_ASFlowImpl_Flow_verticalAlign_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_verticalAlign, init)
}

ASFlowImpl_Flow_verticalAlign *create_ASFlowImpl_Flow_verticalAlign_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_verticalAlign, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_verticalAlign)

@implementation ASFlowImpl_Flow_horizontalAlign

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_horizontalAlign_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_horizontalAlign = { "Flow_horizontalAlign", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_horizontalAlign;
}

@end

void ASFlowImpl_Flow_horizontalAlign_init(ASFlowImpl_Flow_horizontalAlign *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"center" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASFlowImpl_Flow_horizontalAlign *new_ASFlowImpl_Flow_horizontalAlign_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_horizontalAlign, init)
}

ASFlowImpl_Flow_horizontalAlign *create_ASFlowImpl_Flow_horizontalAlign_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_horizontalAlign, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_horizontalAlign)

@implementation ASFlowImpl_Flow_firstHorizontalStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_firstHorizontalStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_firstHorizontalStyle = { "Flow_firstHorizontalStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_firstHorizontalStyle;
}

@end

void ASFlowImpl_Flow_firstHorizontalStyle_init(ASFlowImpl_Flow_firstHorizontalStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASFlowImpl_Flow_firstHorizontalStyle *new_ASFlowImpl_Flow_firstHorizontalStyle_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_firstHorizontalStyle, init)
}

ASFlowImpl_Flow_firstHorizontalStyle *create_ASFlowImpl_Flow_firstHorizontalStyle_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_firstHorizontalStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_firstHorizontalStyle)

@implementation ASFlowImpl_Flow_firstVerticalStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASFlowImpl_Flow_firstVerticalStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASFlowImpl;" };
  static const J2ObjcClassInfo _ASFlowImpl_Flow_firstVerticalStyle = { "Flow_firstVerticalStyle", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASFlowImpl_Flow_firstVerticalStyle;
}

@end

void ASFlowImpl_Flow_firstVerticalStyle_init(ASFlowImpl_Flow_firstVerticalStyle *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"spread" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"spread_inside" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"packed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASFlowImpl_Flow_firstVerticalStyle *new_ASFlowImpl_Flow_firstVerticalStyle_init() {
  J2OBJC_NEW_IMPL(ASFlowImpl_Flow_firstVerticalStyle, init)
}

ASFlowImpl_Flow_firstVerticalStyle *create_ASFlowImpl_Flow_firstVerticalStyle_init() {
  J2OBJC_CREATE_IMPL(ASFlowImpl_Flow_firstVerticalStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_Flow_firstVerticalStyle)

@implementation ASFlowImpl_FlowExt

- (void)setMaxWidthWithInt:(jint)width {
  mMaxWidth_ = width;
}

- (void)setMaxHeightWithInt:(jint)height {
  mMaxHeight_ = height;
}

- (jint)getMaxWidth {
  return mMaxWidth_;
}

- (jint)getMaxHeight {
  return mMaxHeight_;
}

- (instancetype)initWithASFlowImpl:(ASFlowImpl *)outer$ {
  ASFlowImpl_FlowExt_initWithASFlowImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mMaxWidth_ > 0) {
    widthMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxWidth_, ADView_MeasureSpec_AT_MOST);
  }
  if (mMaxHeight_ > 0) {
    heightMeasureSpec = ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(mMaxHeight_, ADView_MeasureSpec_AT_MOST);
  }
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (void)__javaClone:(ASFlowImpl_FlowExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 15, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setMaxWidthWithInt:);
  methods[1].selector = @selector(setMaxHeightWithInt:);
  methods[2].selector = @selector(getMaxWidth);
  methods[3].selector = @selector(getMaxHeight);
  methods[4].selector = @selector(initWithASFlowImpl:);
  methods[5].selector = @selector(onMeasureWithInt:withInt:);
  methods[6].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[7].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[8].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[9].selector = @selector(newInstanceWithASIWidget:);
  methods[10].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[11].selector = @selector(getMethods);
  methods[12].selector = @selector(initialized);
  methods[13].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[14].selector = @selector(drawableStateChanged);
  methods[15].selector = @selector(offsetTopAndBottomWithInt:);
  methods[16].selector = @selector(offsetLeftAndRightWithInt:);
  methods[17].selector = @selector(setVisibilityWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASFlowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaxHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setMaxWidth", "I", "setMaxHeight", "LASFlowImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASFlowImpl_FlowExt = { "FlowExt", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 18, 5, 3, -1, -1, -1, -1 };
  return &_ASFlowImpl_FlowExt;
}

@end

void ASFlowImpl_FlowExt_initWithASFlowImpl_(ASFlowImpl_FlowExt *self, ASFlowImpl *outer$) {
  self->this$0_ = outer$;
  ADXFlow_init(self);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
  self->mMaxWidth_ = -1;
  self->mMaxHeight_ = -1;
}

ASFlowImpl_FlowExt *new_ASFlowImpl_FlowExt_initWithASFlowImpl_(ASFlowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASFlowImpl_FlowExt, initWithASFlowImpl_, outer$)
}

ASFlowImpl_FlowExt *create_ASFlowImpl_FlowExt_initWithASFlowImpl_(ASFlowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASFlowImpl_FlowExt, initWithASFlowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_FlowExt)

@implementation ASFlowImpl_FlowCommandBuilder

- (instancetype)initWithASFlowImpl:(ASFlowImpl *)outer$ {
  ASFlowImpl_FlowCommandBuilder_initWithASFlowImpl_(self, outer$);
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setOrientationWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"orientation"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_horizontalStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_horizontalStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_verticalStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_verticalStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_wrapModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_wrapMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_maxElementsWrapWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_maxElementsWrap"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_horizontalGapWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_horizontalGap"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_verticalGapWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_verticalGap"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_verticalAlignWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_verticalAlign"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_horizontalAlignWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_horizontalAlign"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_verticalBiasWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_verticalBias"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_horizontalBiasWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_horizontalBias"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_firstHorizontalStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_firstHorizontalStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_firstVerticalStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_firstVerticalStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_firstHorizontalBiasWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_firstHorizontalBias"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)setFlow_firstVerticalBiasWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"flow_firstVerticalBias"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASFlowImpl_FlowCommandBuilder *)tryGetConstraint_referenced_ids {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getConstraint_referenced_ids {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASFlowImpl_FlowCommandBuilder *)setConstraint_referenced_idsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"constraint_referenced_ids"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 16, 15, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 19, 15, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 20, 15, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASFlowImpl_FlowCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASFlowImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setOrientationWithNSString:);
  methods[3].selector = @selector(setFlow_horizontalStyleWithNSString:);
  methods[4].selector = @selector(setFlow_verticalStyleWithNSString:);
  methods[5].selector = @selector(setFlow_wrapModeWithNSString:);
  methods[6].selector = @selector(setFlow_maxElementsWrapWithInt:);
  methods[7].selector = @selector(setFlow_horizontalGapWithNSString:);
  methods[8].selector = @selector(setFlow_verticalGapWithNSString:);
  methods[9].selector = @selector(setFlow_verticalAlignWithNSString:);
  methods[10].selector = @selector(setFlow_horizontalAlignWithNSString:);
  methods[11].selector = @selector(setFlow_verticalBiasWithFloat:);
  methods[12].selector = @selector(setFlow_horizontalBiasWithFloat:);
  methods[13].selector = @selector(setFlow_firstHorizontalStyleWithNSString:);
  methods[14].selector = @selector(setFlow_firstVerticalStyleWithNSString:);
  methods[15].selector = @selector(setFlow_firstHorizontalBiasWithFloat:);
  methods[16].selector = @selector(setFlow_firstVerticalBiasWithFloat:);
  methods[17].selector = @selector(tryGetConstraint_referenced_ids);
  methods[18].selector = @selector(getConstraint_referenced_ids);
  methods[19].selector = @selector(setConstraint_referenced_idsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASFlowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASFlowImpl;", "execute", "Z", "setOrientation", "LNSString;", "setFlow_horizontalStyle", "setFlow_verticalStyle", "setFlow_wrapMode", "setFlow_maxElementsWrap", "I", "setFlow_horizontalGap", "setFlow_verticalGap", "setFlow_verticalAlign", "setFlow_horizontalAlign", "setFlow_verticalBias", "F", "setFlow_horizontalBias", "setFlow_firstHorizontalStyle", "setFlow_firstVerticalStyle", "setFlow_firstHorizontalBias", "setFlow_firstVerticalBias", "setConstraint_referenced_ids", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/constraintlayout/FlowImpl$FlowCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASFlowImpl_FlowCommandBuilder = { "FlowCommandBuilder", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 20, 1, 0, -1, -1, 22, -1 };
  return &_ASFlowImpl_FlowCommandBuilder;
}

@end

void ASFlowImpl_FlowCommandBuilder_initWithASFlowImpl_(ASFlowImpl_FlowCommandBuilder *self, ASFlowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASFlowImpl_FlowCommandBuilder *new_ASFlowImpl_FlowCommandBuilder_initWithASFlowImpl_(ASFlowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASFlowImpl_FlowCommandBuilder, initWithASFlowImpl_, outer$)
}

ASFlowImpl_FlowCommandBuilder *create_ASFlowImpl_FlowCommandBuilder_initWithASFlowImpl_(ASFlowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASFlowImpl_FlowCommandBuilder, initWithASFlowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_FlowCommandBuilder)

@implementation ASFlowImpl_FlowBean

- (instancetype)initWithASFlowImpl:(ASFlowImpl *)outer$ {
  ASFlowImpl_FlowBean_initWithASFlowImpl_(self, outer$);
  return self;
}

- (void)setOrientationWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOrientationWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_horizontalStyleWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_horizontalStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_verticalStyleWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_verticalStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_wrapModeWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_wrapModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_maxElementsWrapWithInt:(jint)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_maxElementsWrapWithInt:value])) executeWithBoolean:true];
}

- (void)setFlow_horizontalGapWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_horizontalGapWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_verticalGapWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_verticalGapWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_verticalAlignWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_verticalAlignWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_horizontalAlignWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_horizontalAlignWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_verticalBiasWithFloat:(jfloat)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_verticalBiasWithFloat:value])) executeWithBoolean:true];
}

- (void)setFlow_horizontalBiasWithFloat:(jfloat)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_horizontalBiasWithFloat:value])) executeWithBoolean:true];
}

- (void)setFlow_firstHorizontalStyleWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_firstHorizontalStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_firstVerticalStyleWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_firstVerticalStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFlow_firstHorizontalBiasWithFloat:(jfloat)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_firstHorizontalBiasWithFloat:value])) executeWithBoolean:true];
}

- (void)setFlow_firstVerticalBiasWithFloat:(jfloat)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFlow_firstVerticalBiasWithFloat:value])) executeWithBoolean:true];
}

- (id)getConstraint_referenced_ids {
  return [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetConstraint_referenced_ids])) executeWithBoolean:false])) getConstraint_referenced_ids];
}

- (void)setConstraint_referenced_idsWithNSString:(NSString *)value {
  (void) [((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([((ASFlowImpl_FlowCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setConstraint_referenced_idsWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 13, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASFlowImpl:);
  methods[1].selector = @selector(setOrientationWithNSString:);
  methods[2].selector = @selector(setFlow_horizontalStyleWithNSString:);
  methods[3].selector = @selector(setFlow_verticalStyleWithNSString:);
  methods[4].selector = @selector(setFlow_wrapModeWithNSString:);
  methods[5].selector = @selector(setFlow_maxElementsWrapWithInt:);
  methods[6].selector = @selector(setFlow_horizontalGapWithNSString:);
  methods[7].selector = @selector(setFlow_verticalGapWithNSString:);
  methods[8].selector = @selector(setFlow_verticalAlignWithNSString:);
  methods[9].selector = @selector(setFlow_horizontalAlignWithNSString:);
  methods[10].selector = @selector(setFlow_verticalBiasWithFloat:);
  methods[11].selector = @selector(setFlow_horizontalBiasWithFloat:);
  methods[12].selector = @selector(setFlow_firstHorizontalStyleWithNSString:);
  methods[13].selector = @selector(setFlow_firstVerticalStyleWithNSString:);
  methods[14].selector = @selector(setFlow_firstHorizontalBiasWithFloat:);
  methods[15].selector = @selector(setFlow_firstVerticalBiasWithFloat:);
  methods[16].selector = @selector(getConstraint_referenced_ids);
  methods[17].selector = @selector(setConstraint_referenced_idsWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASFlowImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASFlowImpl;", "setOrientation", "LNSString;", "setFlow_horizontalStyle", "setFlow_verticalStyle", "setFlow_wrapMode", "setFlow_maxElementsWrap", "I", "setFlow_horizontalGap", "setFlow_verticalGap", "setFlow_verticalAlign", "setFlow_horizontalAlign", "setFlow_verticalBias", "F", "setFlow_horizontalBias", "setFlow_firstHorizontalStyle", "setFlow_firstVerticalStyle", "setFlow_firstHorizontalBias", "setFlow_firstVerticalBias", "setConstraint_referenced_ids" };
  static const J2ObjcClassInfo _ASFlowImpl_FlowBean = { "FlowBean", "com.ashera.constraintlayout", ptrTable, methods, fields, 7, 0x1, 18, 1, 0, -1, -1, -1, -1 };
  return &_ASFlowImpl_FlowBean;
}

@end

void ASFlowImpl_FlowBean_initWithASFlowImpl_(ASFlowImpl_FlowBean *self, ASFlowImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASFlowImpl_FlowBean *new_ASFlowImpl_FlowBean_initWithASFlowImpl_(ASFlowImpl *outer$) {
  J2OBJC_NEW_IMPL(ASFlowImpl_FlowBean, initWithASFlowImpl_, outer$)
}

ASFlowImpl_FlowBean *create_ASFlowImpl_FlowBean_initWithASFlowImpl_(ASFlowImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASFlowImpl_FlowBean, initWithASFlowImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASFlowImpl_FlowBean)
