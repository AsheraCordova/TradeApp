//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\html_parser\src\repackaged\org\ccil\cowan\tagsoup\TagSoupParser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TagSoupParser")
#ifdef RESTRICT_TagSoupParser
#define INCLUDE_ALL_TagSoupParser 0
#else
#define INCLUDE_ALL_TagSoupParser 1
#endif
#undef RESTRICT_TagSoupParser

#if !defined (TSTagSoupParser_) && (INCLUDE_ALL_TagSoupParser || defined(INCLUDE_TSTagSoupParser))
#define TSTagSoupParser_

#define RESTRICT_OrgXmlSaxHelpersDefaultHandler 1
#define INCLUDE_OrgXmlSaxHelpersDefaultHandler 1
#include "org/xml/sax/helpers/DefaultHandler.h"

#define RESTRICT_ScanHandler 1
#define INCLUDE_TSScanHandler 1
#include "ScanHandler.h"

#define RESTRICT_OrgXmlSaxXMLReader 1
#define INCLUDE_OrgXmlSaxXMLReader 1
#include "org/xml/sax/XMLReader.h"

#define RESTRICT_OrgXmlSaxExtLexicalHandler 1
#define INCLUDE_OrgXmlSaxExtLexicalHandler 1
#include "org/xml/sax/ext/LexicalHandler.h"

@class IOSCharArray;
@class OrgXmlSaxInputSource;
@protocol OrgXmlSaxContentHandler;
@protocol OrgXmlSaxDTDHandler;
@protocol OrgXmlSaxEntityResolver;
@protocol OrgXmlSaxErrorHandler;

/*!
 @brief The SAX parser class.
 */
@interface TSTagSoupParser : OrgXmlSaxHelpersDefaultHandler < TSScanHandler, OrgXmlSaxXMLReader, OrgXmlSaxExtLexicalHandler >

#pragma mark Public

- (instancetype)init;

- (void)adupWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length;

- (void)anameWithCharArray:(IOSCharArray *)buff
                   withInt:(jint)offset
                   withInt:(jint)length;

- (void)avalWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length;

- (void)cdsectWithCharArray:(IOSCharArray *)buff
                    withInt:(jint)offset
                    withInt:(jint)length;

- (void)cmntWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length;

- (void)commentWithCharArray:(IOSCharArray *)ch
                     withInt:(jint)start
                     withInt:(jint)length;

/*!
 @brief Parsing the complete XML Document Type Definition is way too complex,
  but for many simple cases we can extract something useful from it.
 doctypedecl  ::= '<!DOCTYPE' S Name (S ExternalID)? S? ('[' intSubset ']' S?)? '>'
   DeclSep     ::= PEReference | S
   intSubset   ::= (markupdecl | DeclSep)*
   markupdecl  ::= elementdecl | AttlistDecl | EntityDecl | NotationDecl | PI | Comment
   ExternalID  ::= 'SYSTEM' S SystemLiteral | 'PUBLIC' S PubidLiteral S SystemLiteral
 */
- (void)declWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length;

- (void)endCDATA;

- (void)endDTD;

- (void)endEntityWithNSString:(NSString *)name;

- (void)entityWithCharArray:(IOSCharArray *)buff
                    withInt:(jint)offset
                    withInt:(jint)length;

- (void)eofWithCharArray:(IOSCharArray *)buff
                 withInt:(jint)offset
                 withInt:(jint)length;

- (void)etagWithCharArray:(IOSCharArray *)buff
                  withInt:(jint)offset
                  withInt:(jint)length;

- (void)etag_basicWithCharArray:(IOSCharArray *)buff
                        withInt:(jint)offset
                        withInt:(jint)length;

- (jboolean)etag_cdataWithCharArray:(IOSCharArray *)buff
                            withInt:(jint)offset
                            withInt:(jint)length;

- (id<OrgXmlSaxContentHandler>)getContentHandler;

- (id<OrgXmlSaxDTDHandler>)getDTDHandler;

- (jint)getEntity;

- (id<OrgXmlSaxEntityResolver>)getEntityResolver;

- (id<OrgXmlSaxErrorHandler>)getErrorHandler;

- (jboolean)getFeatureWithNSString:(NSString *)name;

- (id)getPropertyWithNSString:(NSString *)name;

- (void)giWithCharArray:(IOSCharArray *)buff
                withInt:(jint)offset
                withInt:(jint)length;

- (void)parseWithOrgXmlSaxInputSource:(OrgXmlSaxInputSource *)input;

- (void)parseWithNSString:(NSString *)systemid;

- (void)pcdataWithCharArray:(IOSCharArray *)buff
                    withInt:(jint)offset
                    withInt:(jint)length;

- (void)piWithCharArray:(IOSCharArray *)buff
                withInt:(jint)offset
                withInt:(jint)length;

- (void)pitargetWithCharArray:(IOSCharArray *)buff
                      withInt:(jint)offset
                      withInt:(jint)length;

- (void)setContentHandlerWithOrgXmlSaxContentHandler:(id<OrgXmlSaxContentHandler>)handler;

- (void)setDTDHandlerWithOrgXmlSaxDTDHandler:(id<OrgXmlSaxDTDHandler>)handler;

- (void)setEntityResolverWithOrgXmlSaxEntityResolver:(id<OrgXmlSaxEntityResolver>)resolver;

- (void)setErrorHandlerWithOrgXmlSaxErrorHandler:(id<OrgXmlSaxErrorHandler>)handler;

- (void)setFeatureWithNSString:(NSString *)name
                   withBoolean:(jboolean)value;

- (void)setPropertyWithNSString:(NSString *)name
                         withId:(id)value;

- (void)stagcWithCharArray:(IOSCharArray *)buff
                   withInt:(jint)offset
                   withInt:(jint)length;

- (void)stageWithCharArray:(IOSCharArray *)buff
                   withInt:(jint)offset
                   withInt:(jint)length;

- (void)startCDATA;

- (void)startDTDWithNSString:(NSString *)name
                withNSString:(NSString *)publicid
                withNSString:(NSString *)systemid;

- (void)startEntityWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(TSTagSoupParser)

/*!
 @brief A value of "true" indicates namespace URIs and unprefixed local
 	names for element and attribute names will be available.
 */
inline NSString *TSTagSoupParser_get_namespacesFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_namespacesFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, namespacesFeature, NSString *)

/*!
 @brief A value of "true" indicates that XML qualified names (with prefixes)
 	and attributes (including xmlns* attributes) will be available.
 We don't support this value.
 */
inline NSString *TSTagSoupParser_get_namespacePrefixesFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_namespacePrefixesFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, namespacePrefixesFeature, NSString *)

/*!
 @brief Reports whether this parser processes external general entities
 	(it doesn't).
 */
inline NSString *TSTagSoupParser_get_externalGeneralEntitiesFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_externalGeneralEntitiesFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, externalGeneralEntitiesFeature, NSString *)

/*!
 @brief Reports whether this parser processes external parameter entities
 	(it doesn't).
 */
inline NSString *TSTagSoupParser_get_externalParameterEntitiesFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_externalParameterEntitiesFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, externalParameterEntitiesFeature, NSString *)

/*!
 @brief May be examined only during a parse, after the startDocument()
 	callback has been completed; read-only.The value is true if
 	the document specified standalone="yes" in its XML declaration,
 	and otherwise is false.
 (It's always false.)
 */
inline NSString *TSTagSoupParser_get_isStandaloneFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_isStandaloneFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, isStandaloneFeature, NSString *)

/*!
 @brief A value of "true" indicates that the LexicalHandler will report
 	the beginning and end of parameter entities (it won't).
 */
inline NSString *TSTagSoupParser_get_lexicalHandlerParameterEntitiesFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_lexicalHandlerParameterEntitiesFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, lexicalHandlerParameterEntitiesFeature, NSString *)

/*!
 @brief A value of "true" indicates that system IDs in declarations will
 	be absolutized (relative to their base URIs) before reporting.
 (This returns true but doesn't actually do anything.)
 */
inline NSString *TSTagSoupParser_get_resolveDTDURIsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_resolveDTDURIsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, resolveDTDURIsFeature, NSString *)

/*!
 @brief Has a value of "true" if all XML names (for elements,
 	prefixes, attributes, entities, notations, and local
 	names), as well as Namespace URIs, will have been interned
 	using java.lang.String.intern.This supports fast testing of
 	equality/inequality against string constants, rather than forcing
 	slower calls to String.equals().
 (We always intern.)
 */
inline NSString *TSTagSoupParser_get_stringInterningFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_stringInterningFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, stringInterningFeature, NSString *)

/*!
 @brief Returns "true" if the Attributes objects passed by this
 	parser in ContentHandler.startElement() implement the
 	org.xml.sax.ext.Attributes2 interface.
 (They don't.)
 */
inline NSString *TSTagSoupParser_get_useAttributes2Feature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_useAttributes2Feature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, useAttributes2Feature, NSString *)

/*!
 @brief Returns "true" if the Locator objects passed by this parser
 	in ContentHandler.setDocumentLocator() implement the
 	org.xml.sax.ext.Locator2 interface.
 (They don't.)
 */
inline NSString *TSTagSoupParser_get_useLocator2Feature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_useLocator2Feature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, useLocator2Feature, NSString *)

/*!
 @brief Returns "true" if, when setEntityResolver is given an object
 	implementing the org.xml.sax.ext.EntityResolver2 interface,
 	those new methods will be used.
 (They won't be.)
 */
inline NSString *TSTagSoupParser_get_useEntityResolver2Feature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_useEntityResolver2Feature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, useEntityResolver2Feature, NSString *)

/*!
 @brief Controls whether the parser is reporting all validity errors
 	(We don't report any validity errors.)
 */
inline NSString *TSTagSoupParser_get_validationFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_validationFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, validationFeature, NSString *)

/*!
 @brief Controls whether the parser reports Unicode normalization
 	errors as described in section 2.13 and Appendix B of the XML
 	1.1 Recommendation.
 (We don't normalize.)
 */
inline NSString *TSTagSoupParser_get_unicodeNormalizationCheckingFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_unicodeNormalizationCheckingFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, unicodeNormalizationCheckingFeature, NSString *)

/*!
 @brief Controls whether, when the namespace-prefixes feature is set,
 	the parser treats namespace declaration attributes as being in
 	the http://www.w3.org/2000/xmlns/ namespace.
 (It doesn't.)
 */
inline NSString *TSTagSoupParser_get_xmlnsURIsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_xmlnsURIsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, xmlnsURIsFeature, NSString *)

/*!
 @brief Returns "true" if the parser supports both XML 1.1 and XML 1.0.
 (Always false.)
 */
inline NSString *TSTagSoupParser_get_XML11Feature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_XML11Feature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, XML11Feature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will ignore
 	unknown elements.
 */
inline NSString *TSTagSoupParser_get_ignoreBogonsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_ignoreBogonsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, ignoreBogonsFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will give unknown
 	elements a content model of EMPTY; a value of "false", a
 	content model of ANY.
 */
inline NSString *TSTagSoupParser_get_bogonsEmptyFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_bogonsEmptyFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, bogonsEmptyFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will allow unknown
 	elements to be the root element.
 */
inline NSString *TSTagSoupParser_get_rootBogonsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_rootBogonsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, rootBogonsFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will return default
 	attribute values for missing attributes that have default values.
 */
inline NSString *TSTagSoupParser_get_defaultAttributesFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_defaultAttributesFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, defaultAttributesFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will 
 	translate colons into underscores in names.
 */
inline NSString *TSTagSoupParser_get_translateColonsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_translateColonsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, translateColonsFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will 
 	attempt to restart the restartable elements.
 */
inline NSString *TSTagSoupParser_get_restartElementsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_restartElementsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, restartElementsFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will 
 	transmit whitespace in element-only content via the SAX
 	ignorableWhitespace callback.Normally this is not done,
 	because HTML is an SGML application and SGML suppresses
 	such whitespace.
 */
inline NSString *TSTagSoupParser_get_ignorableWhitespaceFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_ignorableWhitespaceFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, ignorableWhitespaceFeature, NSString *)

/*!
 @brief A value of "true" indicates that the parser will treat CDATA
 	elements specially.Normally true, since the input is by
 	default HTML.
 */
inline NSString *TSTagSoupParser_get_CDATAElementsFeature(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_CDATAElementsFeature;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, CDATAElementsFeature, NSString *)

/*!
 @brief Used to see some syntax events that are essential in some
 	applications: comments, CDATA delimiters, selected general
 	entity inclusions, and the start and end of the DTD (and
 	declaration of document element name).The Object must implement
 	org.xml.sax.ext.LexicalHandler.
 */
inline NSString *TSTagSoupParser_get_lexicalHandlerProperty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_lexicalHandlerProperty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, lexicalHandlerProperty, NSString *)

/*!
 @brief Specifies the Scanner object this Parser uses.
 */
inline NSString *TSTagSoupParser_get_scannerProperty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_scannerProperty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, scannerProperty, NSString *)

/*!
 @brief Specifies the Schema object this Parser uses.
 */
inline NSString *TSTagSoupParser_get_schemaProperty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_schemaProperty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, schemaProperty, NSString *)

/*!
 @brief Specifies the AutoDetector (for encoding detection) this Parser uses.
 */
inline NSString *TSTagSoupParser_get_autoDetectorProperty(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *TSTagSoupParser_autoDetectorProperty;
J2OBJC_STATIC_FIELD_OBJ_FINAL(TSTagSoupParser, autoDetectorProperty, NSString *)

FOUNDATION_EXPORT void TSTagSoupParser_init(TSTagSoupParser *self);

FOUNDATION_EXPORT TSTagSoupParser *new_TSTagSoupParser_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT TSTagSoupParser *create_TSTagSoupParser_init(void);

J2OBJC_TYPE_LITERAL_HEADER(TSTagSoupParser)

@compatibility_alias RepackagedOrgCcilCowanTagsoupTagSoupParser TSTagSoupParser;

#endif

#pragma pop_macro("INCLUDE_ALL_TagSoupParser")
