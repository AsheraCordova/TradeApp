//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-core\src\main\java\androidx\annotation\RestrictTo.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "RestrictTo.h"
#include "java/lang/Deprecated.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/annotation/Annotation.h"


__attribute__((unused)) static void ADXRestrictTo_Scope_initWithNSString_withInt_(ADXRestrictTo_Scope *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static IOSObjectArray *ADXRestrictTo_Scope__Annotations$0(void);

@implementation ADXRestrictTo

@synthesize value = value_;

- (IOSClass *)annotationType {
  return ADXRestrictTo_class_();
}

- (NSString *)description {
  return [NSString stringWithFormat:@"@androidx.annotation.RestrictTo(value=%@)", value_];
}

- (jboolean)isEqual:(id)obj {
  return JreAnnotationEquals(self, obj);
}

- (NSUInteger)hash {
  return JreAnnotationHashCode(self);
}

- (void)dealloc {
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXRestrictTo_Scope;", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(value);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "[LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x1000, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRestrictTo_Scope;" };
  static const J2ObjcClassInfo _ADXRestrictTo = { "RestrictTo", "androidx.annotation", ptrTable, methods, fields, 7, 0x2609, 1, 1, -1, 0, -1, -1, -1 };
  return &_ADXRestrictTo;
}

@end

id<ADXRestrictTo> create_ADXRestrictTo(IOSObjectArray *value) {
  ADXRestrictTo *self = AUTORELEASE([[ADXRestrictTo alloc] init]);
  self->value_ = RETAIN_(value);
  return self;
}

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADXRestrictTo)

J2OBJC_INITIALIZED_DEFN(ADXRestrictTo_Scope)

ADXRestrictTo_Scope *ADXRestrictTo_Scope_values_[6];

@implementation ADXRestrictTo_Scope

+ (IOSObjectArray *)values {
  return ADXRestrictTo_Scope_values();
}

+ (ADXRestrictTo_Scope *)valueOfWithNSString:(NSString *)name {
  return ADXRestrictTo_Scope_valueOfWithNSString_(name);
}

- (ADXRestrictTo_Scope_Enum)toNSEnum {
  return (ADXRestrictTo_Scope_Enum)[self ordinal];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "[LADXRestrictTo_Scope;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRestrictTo_Scope;", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(values);
  methods[1].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LIBRARY", "LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 2, -1, -1 },
    { "LIBRARY_GROUP", "LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "LIBRARY_GROUP_PREFIX", "LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "GROUP_ID", "LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, 6 },
    { "TESTS", "LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 7, -1, -1 },
    { "SUBCLASSES", "LADXRestrictTo_Scope;", .constantValue.asLong = 0, 0x4019, -1, 8, -1, -1 },
  };
  static const void *ptrTable[] = { "valueOf", "LNSString;", &JreEnum(ADXRestrictTo_Scope, LIBRARY), &JreEnum(ADXRestrictTo_Scope, LIBRARY_GROUP), &JreEnum(ADXRestrictTo_Scope, LIBRARY_GROUP_PREFIX), &JreEnum(ADXRestrictTo_Scope, GROUP_ID), (void *)&ADXRestrictTo_Scope__Annotations$0, &JreEnum(ADXRestrictTo_Scope, TESTS), &JreEnum(ADXRestrictTo_Scope, SUBCLASSES), "LADXRestrictTo;", "Ljava/lang/Enum<Landroidx/annotation/RestrictTo$Scope;>;" };
  static const J2ObjcClassInfo _ADXRestrictTo_Scope = { "Scope", "androidx.annotation", ptrTable, methods, fields, 7, 0x4019, 2, 6, 9, -1, -1, 10, -1 };
  return &_ADXRestrictTo_Scope;
}

+ (void)initialize {
  if (self == [ADXRestrictTo_Scope class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 6 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 6; i++) {
      ((void)(ADXRestrictTo_Scope_values_[i] = e = objc_constructInstance(self, (void *)ptr)), ptr += objSize);
      ADXRestrictTo_Scope_initWithNSString_withInt_(e, JreEnumConstantName(ADXRestrictTo_Scope_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(ADXRestrictTo_Scope)
  }
}

@end

void ADXRestrictTo_Scope_initWithNSString_withInt_(ADXRestrictTo_Scope *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

IOSObjectArray *ADXRestrictTo_Scope_values() {
  ADXRestrictTo_Scope_initialize();
  return [IOSObjectArray arrayWithObjects:ADXRestrictTo_Scope_values_ count:6 type:ADXRestrictTo_Scope_class_()];
}

ADXRestrictTo_Scope *ADXRestrictTo_Scope_valueOfWithNSString_(NSString *name) {
  ADXRestrictTo_Scope_initialize();
  for (int i = 0; i < 6; i++) {
    ADXRestrictTo_Scope *e = ADXRestrictTo_Scope_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

ADXRestrictTo_Scope *ADXRestrictTo_Scope_fromOrdinal(NSUInteger ordinal) {
  ADXRestrictTo_Scope_initialize();
  if (ordinal >= 6) {
    return nil;
  }
  return ADXRestrictTo_Scope_values_[ordinal];
}

IOSObjectArray *ADXRestrictTo_Scope__Annotations$0() {
  return [IOSObjectArray arrayWithObjects:(id[]){ create_JavaLangDeprecated() } count:1 type:JavaLangAnnotationAnnotation_class_()];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXRestrictTo_Scope)
