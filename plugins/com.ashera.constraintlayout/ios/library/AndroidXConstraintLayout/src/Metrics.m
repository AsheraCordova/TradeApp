//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\Metrics.java
//

#include "J2ObjC_source.h"
#include "Metrics.h"
#include "java/util/ArrayList.h"


@implementation ADXMetrics

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXMetrics_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (NSString *)description {
  return JreStrcat("$J$J$J$J$J$J$J$J$JC", @"\n*** Metrics ***\nmeasures: ", measures_, @"\nmeasuresWrap: ", measuresWrap_, @"\nmeasuresWrapInfeasible: ", measuresWrapInfeasible_, @"\ndetermineGroups: ", determineGroups_, @"\ninfeasibleDetermineGroups: ", infeasibleDetermineGroups_, @"\ngraphOptimizer: ", graphOptimizer_, @"\nwidgets: ", widgets_, @"\ngraphSolved: ", graphSolved_, @"\nlinearSolved: ", linearSolved_, 0x000a);
}

- (void)reset {
  measures_ = 0;
  widgets_ = 0;
  additionalMeasures_ = 0;
  resolutions_ = 0;
  tableSizeIncrease_ = 0;
  maxTableSize_ = 0;
  lastTableSize_ = 0;
  maxVariables_ = 0;
  maxRows_ = 0;
  minimize_ = 0;
  minimizeGoal_ = 0;
  constraints_ = 0;
  simpleconstraints_ = 0;
  optimize_ = 0;
  iterations_ = 0;
  pivots_ = 0;
  bfs_ = 0;
  variables_ = 0;
  errors_ = 0;
  slackvariables_ = 0;
  extravariables_ = 0;
  fullySolved_ = 0;
  graphOptimizer_ = 0;
  graphSolved_ = 0;
  resolvedWidgets_ = 0;
  oldresolvedWidgets_ = 0;
  nonresolvedWidgets_ = 0;
  centerConnectionResolved_ = 0;
  matchConnectionResolved_ = 0;
  chainConnectionResolved_ = 0;
  barrierConnectionResolved_ = 0;
  [((JavaUtilArrayList *) nil_chk(problematicLayouts_)) clear];
}

- (void)dealloc {
  RELEASE_(problematicLayouts_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(description);
  methods[2].selector = @selector(reset);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "measuresWidgetsDuration_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "measuresLayoutDuration_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "measuredWidgets_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "measuredMatchWidgets_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "measures_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "additionalMeasures_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "resolutions_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "tableSizeIncrease_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minimize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "constraints_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "simpleconstraints_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "optimize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "iterations_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "pivots_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "bfs_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "variables_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "errors_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "slackvariables_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "extravariables_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxTableSize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "fullySolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "graphOptimizer_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "graphSolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "linearSolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "resolvedWidgets_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "minimizeGoal_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxVariables_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxRows_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "centerConnectionResolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "matchConnectionResolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "chainConnectionResolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "barrierConnectionResolved_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "oldresolvedWidgets_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "nonresolvedWidgets_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "problematicLayouts_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x1, -1, -1, 1, -1 },
    { "lastTableSize_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "widgets_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "measuresWrap_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "measuresWrapInfeasible_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "infeasibleDetermineGroups_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "determineGroups_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "layouts_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "grouping_", "J", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "toString", "Ljava/util/ArrayList<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ADXMetrics = { "Metrics", "androidx.constraintlayout.core", ptrTable, methods, fields, 7, 0x1, 3, 43, -1, -1, -1, -1, -1 };
  return &_ADXMetrics;
}

@end

void ADXMetrics_init(ADXMetrics *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->problematicLayouts_, new_JavaUtilArrayList_init());
}

ADXMetrics *new_ADXMetrics_init() {
  J2OBJC_NEW_IMPL(ADXMetrics, init)
}

ADXMetrics *create_ADXMetrics_init() {
  J2OBJC_CREATE_IMPL(ADXMetrics, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXMetrics)
