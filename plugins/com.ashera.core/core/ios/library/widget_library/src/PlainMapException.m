//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\model\PlainMapException.java
//

#include "J2ObjC_source.h"
#include "PlainMapException.h"
#include "java/lang/Exception.h"
#include "java/lang/Throwable.h"


inline jlong ASPlainMapException_get_serialVersionUID(void);
#define ASPlainMapException_serialVersionUID 934404218689912677LL
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMapException, serialVersionUID, jlong)

@implementation ASPlainMapException

- (instancetype)initWithNSString:(NSString *)message {
  ASPlainMapException_initWithNSString_(self, message);
  return self;
}

- (instancetype)initWithNSString:(NSString *)message
           withJavaLangThrowable:(JavaLangThrowable *)t {
  ASPlainMapException_initWithNSString_withJavaLangThrowable_(self, message, t);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(initWithNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "serialVersionUID", "J", .constantValue.asLong = ASPlainMapException_serialVersionUID, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _ASPlainMapException = { "PlainMapException", "com.ashera.model", ptrTable, methods, fields, 7, 0x1, 2, 1, -1, -1, -1, -1, -1 };
  return &_ASPlainMapException;
}

@end

void ASPlainMapException_initWithNSString_(ASPlainMapException *self, NSString *message) {
  JavaLangException_initWithNSString_(self, message);
}

ASPlainMapException *new_ASPlainMapException_initWithNSString_(NSString *message) {
  J2OBJC_NEW_IMPL(ASPlainMapException, initWithNSString_, message)
}

ASPlainMapException *create_ASPlainMapException_initWithNSString_(NSString *message) {
  J2OBJC_CREATE_IMPL(ASPlainMapException, initWithNSString_, message)
}

void ASPlainMapException_initWithNSString_withJavaLangThrowable_(ASPlainMapException *self, NSString *message, JavaLangThrowable *t) {
  JavaLangException_initWithNSString_withJavaLangThrowable_(self, message, t);
}

ASPlainMapException *new_ASPlainMapException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *t) {
  J2OBJC_NEW_IMPL(ASPlainMapException, initWithNSString_withJavaLangThrowable_, message, t)
}

ASPlainMapException *create_ASPlainMapException_initWithNSString_withJavaLangThrowable_(NSString *message, JavaLangThrowable *t) {
  J2OBJC_CREATE_IMPL(ASPlainMapException, initWithNSString_withJavaLangThrowable_, message, t)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPlainMapException)
