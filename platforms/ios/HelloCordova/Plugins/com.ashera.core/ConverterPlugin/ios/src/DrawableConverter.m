//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\DrawableConverter.java
//

#include "ColorDrawable.h"
#include "ColorImageConverter.h"
#include "Drawable.h"
#include "DrawableConverter.h"
#include "IFragment.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@interface ASDrawableConverter ()

- (void)updateWidthAndHeightWithADDrawable:(ADDrawable *)drawable
                                    withId:(id)value;

@end

__attribute__((unused)) static void ASDrawableConverter_updateWidthAndHeightWithADDrawable_withId_(ASDrawableConverter *self, ADDrawable *drawable, id value);

@implementation ASDrawableConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASDrawableConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)convertFromWithId:(NSString *)value
        withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
        withASIFragment:(id<ASIFragment>)fragment {
  if (value == nil) {
    return nil;
  }
  if ([value isEqual:@"@null"] || [value java_hasPrefix:@"@drawable"] || [value java_hasPrefix:@"#"] || [value java_hasPrefix:@"@color/"] || [value java_hasPrefix:@"data:image/png;base64,"]) {
    id objValue = [super convertFromWithId:value withJavaUtilMap:dependentAttributesMap withASIFragment:fragment];
    if ([value isEqual:@"@null"]) {
      ADDrawable *drawable = new_ADDrawable_init();
      objValue = drawable;
    }
    else if (ASDrawableConverter_isColorWithId_(objValue)) {
      ADDrawable *drawable = new_ADColorDrawable_init();
      [drawable setDrawableWithId:objValue];
      objValue = drawable;
    }
    else if (ASDrawableConverter_isImageWithId_(objValue)) {
      ADDrawable *drawable = new_ADDrawable_init();
      ASDrawableConverter_updateWidthAndHeightWithADDrawable_withId_(self, drawable, objValue);
      [drawable setDrawableWithId:objValue];
      objValue = drawable;
    }
    else if ([objValue isKindOfClass:[ADDrawable class]]) {
      ADDrawable *drawable = (ADDrawable *) objValue;
      id image = [((ADDrawable *) nil_chk(drawable)) getDrawable];
      if (image != nil && ASDrawableConverter_isImageWithId_(image)) {
        ASDrawableConverter_updateWidthAndHeightWithADDrawable_withId_(self, drawable, image);
        [drawable setDrawableWithId:image];
      }
    }
    return objValue;
  }
  @throw new_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unable to convert path to image : ", value));
}

- (void)updateWidthAndHeightWithADDrawable:(ADDrawable *)drawable
                                    withId:(id)value {
  ASDrawableConverter_updateWidthAndHeightWithADDrawable_withId_(self, drawable, value);
}

+ (jboolean)isImageWithId:(id)value {
  return ASDrawableConverter_isImageWithId_(value);
}

+ (jboolean)isColorWithId:(id)value {
  return ASDrawableConverter_isColorWithId_(value);
}

+ (jint)getImageWidthWithId:(id)value {
  return ASDrawableConverter_getImageWidthWithId_(value);
}

+ (jint)getImageHeightWithId:(id)value {
  return ASDrawableConverter_getImageHeightWithId_(value);
}

- (NSString *)convertToWithId:(id)value
              withASIFragment:(id<ASIFragment>)fragment {
  if ([value isKindOfClass:[ADDrawable class]]) {
    return [super convertToWithId:[((ADDrawable *) nil_chk(((ADDrawable *) value))) getDrawable] withASIFragment:fragment];
  }
  return [super convertToWithId:value withASIFragment:fragment];
}

- (id<JavaUtilList>)getDependentAttributes {
  return [super getDependentAttributes];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x2, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 5, 6, -1, -1, -1, -1 },
    { NULL, "Z", 0x109, 7, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 8, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x109, 9, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(updateWidthAndHeightWithADDrawable:withId:);
  methods[3].selector = @selector(isImageWithId:);
  methods[4].selector = @selector(isColorWithId:);
  methods[5].selector = @selector(getImageWidthWithId:);
  methods[6].selector = @selector(getImageHeightWithId:);
  methods[7].selector = @selector(convertToWithId:withASIFragment:);
  methods[8].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Ljava/lang/Object;", "updateWidthAndHeight", "LADDrawable;LNSObject;", "isImage", "LNSObject;", "isColor", "getImageWidth", "getImageHeight", "convertTo", "LNSObject;LASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASDrawableConverter = { "DrawableConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x1, 9, 0, -1, -1, -1, -1, -1 };
  return &_ASDrawableConverter;
}

@end

void ASDrawableConverter_init(ASDrawableConverter *self) {
  ASColorImageConverter_init(self);
}

ASDrawableConverter *new_ASDrawableConverter_init() {
  J2OBJC_NEW_IMPL(ASDrawableConverter, init)
}

ASDrawableConverter *create_ASDrawableConverter_init() {
  J2OBJC_CREATE_IMPL(ASDrawableConverter, init)
}

void ASDrawableConverter_updateWidthAndHeightWithADDrawable_withId_(ASDrawableConverter *self, ADDrawable *drawable, id value) {
  [((ADDrawable *) nil_chk(drawable)) setMinimumWidthWithInt:ASDrawableConverter_getImageWidthWithId_(value)];
  [drawable setMinimumHeightWithInt:ASDrawableConverter_getImageHeightWithId_(value)];
}

jboolean ASDrawableConverter_isImageWithId_(id value) {
  ASDrawableConverter_initialize();
  return[value isKindOfClass:[UIImage class]];
}

jboolean ASDrawableConverter_isColorWithId_(id value) {
  ASDrawableConverter_initialize();
  return[value isKindOfClass:[UIColor class]];
}

jint ASDrawableConverter_getImageWidthWithId_(id value) {
  ASDrawableConverter_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.width;
}

jint ASDrawableConverter_getImageHeightWithId_(id value) {
  ASDrawableConverter_initialize();
  UIImage* image = ((UIImage*) value);
  return image.size.height;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawableConverter)
