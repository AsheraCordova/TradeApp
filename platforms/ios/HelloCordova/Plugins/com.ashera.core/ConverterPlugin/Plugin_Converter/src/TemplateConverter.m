//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\TemplateConverter.java
//

#include "FileUtils.h"
#include "IActivity.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "TemplateConverter.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"


@implementation ASTemplateConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASTemplateConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASIWidget>)convertFromWithId:(NSString *)ref
                   withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                   withASIFragment:(id<ASIFragment>)fragment {
  NSString *resPrefix = @"@layout/";
  if ([((NSString *) nil_chk(ref)) java_hasPrefix:resPrefix]) {
    NSString *fileName = [ref java_replaceFirst:resPrefix withReplacement:@""];
    NSString *fileResourcePath = JreStrcat("$$$", @"layout/", fileName, @".xml");
    if ([@"dev" isEqual:[((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk(fragment)) getRootActivity])) getAssetMode]]) {
      JavaUtilHashMap *urlMap = create_JavaUtilHashMap_init();
      [urlMap putWithId:JreStrcat("$$", @"www/", fileResourcePath) withId:NSString_java_formatWithNSString_withNSObjectArray_(@"http://%s/%s", [IOSObjectArray arrayWithObjects:(id[]){ [((id<ASIActivity>) nil_chk([fragment getRootActivity])) getDevServerIp], JreStrcat("$$", @"res/", fileResourcePath) } count:2 type:NSObject_class_()])];
      NSString *html = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(ASFileUtils_readFilesContentWithJavaUtilMap_(urlMap))) getWithId:JreStrcat("$$", @"www/", fileResourcePath)]);
      return ASPluginInvoker_parseWithNSString_withBoolean_withASIFragment_(html, true, fragment);
    }
    return ASPluginInvoker_parseFileWithNSString_withBoolean_withASIFragment_(fileResourcePath, true, fragment);
  }
  return nil;
}

- (NSString *)convertToWithId:(id<ASIWidget>)value
              withASIFragment:(id<ASIFragment>)fragment {
  return nil;
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertToWithId:withASIFragment:);
  methods[3].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Lcom/ashera/widget/IWidget;", "convertTo", "LASIWidget;LASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<Lcom/ashera/widget/IWidget;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASTemplateConverter = { "TemplateConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x1, 4, 0, -1, -1, -1, 6, -1 };
  return &_ASTemplateConverter;
}

@end

void ASTemplateConverter_init(ASTemplateConverter *self) {
  NSObject_init(self);
}

ASTemplateConverter *new_ASTemplateConverter_init() {
  J2OBJC_NEW_IMPL(ASTemplateConverter, init)
}

ASTemplateConverter *create_ASTemplateConverter_init() {
  J2OBJC_CREATE_IMPL(ASTemplateConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASTemplateConverter)
