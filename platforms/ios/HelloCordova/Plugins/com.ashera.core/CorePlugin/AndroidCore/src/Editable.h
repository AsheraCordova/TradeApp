//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\text\Editable.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Editable")
#ifdef RESTRICT_Editable
#define INCLUDE_ALL_Editable 0
#else
#define INCLUDE_ALL_Editable 1
#endif
#undef RESTRICT_Editable

#if !defined (ADEditable_) && (INCLUDE_ALL_Editable || defined(INCLUDE_ADEditable))
#define ADEditable_

#define RESTRICT_JavaLangCharSequence 1
#define INCLUDE_JavaLangCharSequence 1
#include "java/lang/CharSequence.h"

#define RESTRICT_GetChars 1
#define INCLUDE_ADGetChars 1
#include "GetChars.h"

#define RESTRICT_Spannable 1
#define INCLUDE_ADSpannable 1
#include "Spannable.h"

#define RESTRICT_JavaLangAppendable 1
#define INCLUDE_JavaLangAppendable 1
#include "java/lang/Appendable.h"

@class IOSObjectArray;

/*!
 @brief This is the interface for text whose content and markup
  can be changed (as opposed
  to immutable text like Strings).If you make a <code>DynamicLayout</code>
  of an Editable, the layout will be reflowed as the text is changed.
 */
@protocol ADEditable < JavaLangCharSequence, ADGetChars, ADSpannable, JavaLangAppendable, JavaObject >

/*!
 @brief Replaces the specified range (<code>st&hellip;en</code>) of text in this
  Editable with a copy of the slice <code>start&hellip;end</code> from 
 <code>source</code>.The destination slice may be empty, in which case
  the operation is an insertion, or the source slice may be empty,
  in which case the operation is a deletion.
 <p>
  Before the change is committed, each filter that was set with 
 <code>setFilters</code> is given the opportunity to modify the 
 <code>source</code> text. 
 <p>
  If <code>source</code>
  is Spanned, the spans from it are preserved into the Editable.
  Existing spans within the Editable that entirely cover the replaced
  range are retained, but any that were strictly within the range
  that was replaced are removed. If the <code>source</code> contains a span
  with <code>Spanned.SPAN_PARAGRAPH</code> flag, and it does not satisfy the
  paragraph boundary constraint, it is not retained. As a special case, the
  cursor position is preserved even when the entire range where it is located
  is replaced.
 @return a reference to this object.
 - seealso: Spanned#SPAN_PARAGRAPH
 */
- (id<ADEditable>)replaceWithInt:(jint)st
                         withInt:(jint)en
        withJavaLangCharSequence:(id<JavaLangCharSequence>)source
                         withInt:(jint)start
                         withInt:(jint)end;

/*!
 @brief Convenience for replace(st, en, text, 0, text.length())
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)replaceWithInt:(jint)st
                         withInt:(jint)en
        withJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Convenience for replace(where, where, text, start, end)
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)insertWithInt:(jint)where
       withJavaLangCharSequence:(id<JavaLangCharSequence>)text
                        withInt:(jint)start
                        withInt:(jint)end;

/*!
 @brief Convenience for replace(where, where, text, 0, text.length());
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)insertWithInt:(jint)where
       withJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Convenience for replace(st, en, "", 0, 0)
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)delete__WithInt:(jint)st
                          withInt:(jint)en;

/*!
 @brief Convenience for replace(length(), length(), text, 0, text.length())
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)text;

/*!
 @brief Convenience for replace(length(), length(), text, start, end)
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)appendWithJavaLangCharSequence:(id<JavaLangCharSequence>)text
                                         withInt:(jint)start
                                         withInt:(jint)end;

/*!
 @brief Convenience for append(String.valueOf(text)).
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (id<ADEditable>)appendWithChar:(jchar)text;

/*!
 @brief Convenience for replace(0, length(), "", 0, 0).
 Note that this clears the text, not the spans;
  use <code>clearSpans</code> if you need that.
 - seealso: #replace(int, int, CharSequence, int, int)
 */
- (void)clear;

/*!
 @brief Removes all spans from the Editable, as if by calling 
 <code>removeSpan</code> on each of them.
 */
- (void)clearSpans;

/*!
 @brief Sets the series of filters that will be called in succession
  whenever the text of this Editable is changed, each of which has
  the opportunity to limit or transform the text that is being inserted.
 */
- (void)setFiltersWithADInputFilterArray:(IOSObjectArray *)filters;

/*!
 @brief Returns the array of input filters that are currently applied
  to changes to this Editable.
 */
- (IOSObjectArray *)getFilters;

@end

J2OBJC_EMPTY_STATIC_INIT(ADEditable)

J2OBJC_TYPE_LITERAL_HEADER(ADEditable)

#define RAndroidTextEditable ADEditable

#endif

#if !defined (ADEditable_Factory_) && (INCLUDE_ALL_Editable || defined(INCLUDE_ADEditable_Factory))
#define ADEditable_Factory_

@protocol ADEditable;
@protocol JavaLangCharSequence;

/*!
 @brief Factory used by TextView to create new <code>Editables</code>.You can subclass
  it to provide something other than <code>SpannableStringBuilder</code>.
 - seealso: r.android.widget.TextView#setEditableFactory(Factory)
 */
@interface ADEditable_Factory : NSObject

#pragma mark Public

- (instancetype)init;

/*!
 @brief Returns the standard Editable Factory.
 */
+ (ADEditable_Factory *)getInstance;

/*!
 @brief Returns a new SpannableStringBuilder from the specified
  CharSequence.You can override this to provide
  a different kind of Spanned.
 */
- (id<ADEditable>)newEditableWithJavaLangCharSequence:(id<JavaLangCharSequence>)source OBJC_METHOD_FAMILY_NONE;

@end

J2OBJC_STATIC_INIT(ADEditable_Factory)

FOUNDATION_EXPORT void ADEditable_Factory_init(ADEditable_Factory *self);

FOUNDATION_EXPORT ADEditable_Factory *new_ADEditable_Factory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADEditable_Factory *create_ADEditable_Factory_init(void);

FOUNDATION_EXPORT ADEditable_Factory *ADEditable_Factory_getInstance(void);

J2OBJC_TYPE_LITERAL_HEADER(ADEditable_Factory)

#endif

#pragma pop_macro("INCLUDE_ALL_Editable")
