//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\state\Dimension.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_Dimension")
#ifdef RESTRICT_Dimension
#define INCLUDE_ALL_Dimension 0
#else
#define INCLUDE_ALL_Dimension 1
#endif
#undef RESTRICT_Dimension

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXDimension_) && (INCLUDE_ALL_Dimension || defined(INCLUDE_ADXDimension))
#define ADXDimension_

@class ADXConstraintWidget;
@class ADXState;

/*!
 @brief Represents a dimension (width or height) of a constrained widget
 */
@interface ADXDimension : NSObject {
 @public
  jint mMin_;
  jint mMax_;
  jfloat mPercent_;
  jint mValue_;
  NSString *mRatioString_;
  id mInitialValue_;
  jboolean mIsSuggested_;
}

#pragma mark Public

/*!
 @brief Apply the dimension to the given constraint widget
 @param constraintWidget
 @param orientation
 */
- (void)applyWithADXState:(ADXState *)state
  withADXConstraintWidget:(ADXConstraintWidget *)constraintWidget
                  withInt:(jint)orientation;

/*!
 @brief Returns true if the dimension is a fixed dimension of
  the same given value
 @param value
 */
- (jboolean)equalsFixedValueWithInt:(jint)value;

+ (ADXDimension *)FixedWithInt:(jint)value;

+ (ADXDimension *)FixedWithId:(id)value;

- (ADXDimension *)fixedWithInt:(jint)value;

- (ADXDimension *)fixedWithId:(id)value;

- (ADXDimension *)maxWithInt:(jint)value;

- (ADXDimension *)maxWithId:(id)value;

- (ADXDimension *)minWithInt:(jint)value;

- (ADXDimension *)minWithId:(id)value;

+ (ADXDimension *)Parent;

+ (ADXDimension *)PercentWithId:(id)key
                      withFloat:(jfloat)value;

- (ADXDimension *)percentWithId:(id)key
                      withFloat:(jfloat)value;

+ (ADXDimension *)RatioWithNSString:(NSString *)ratio;

- (ADXDimension *)ratioWithNSString:(NSString *)ratio;

+ (ADXDimension *)Spread;

+ (ADXDimension *)SuggestedWithInt:(jint)value;

+ (ADXDimension *)SuggestedWithId:(id)startValue;

- (ADXDimension *)suggestedWithInt:(jint)value;

- (ADXDimension *)suggestedWithId:(id)value;

+ (ADXDimension *)Wrap;

#pragma mark Package-Private

- (jint)getValue;

- (void)setValueWithInt:(jint)value;

@end

J2OBJC_STATIC_INIT(ADXDimension)

J2OBJC_FIELD_SETTER(ADXDimension, mRatioString_, NSString *)
J2OBJC_FIELD_SETTER(ADXDimension, mInitialValue_, id)

inline id ADXDimension_get_FIXED_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADXDimension_FIXED_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDimension, FIXED_DIMENSION, id)

inline id ADXDimension_get_WRAP_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADXDimension_WRAP_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDimension, WRAP_DIMENSION, id)

inline id ADXDimension_get_SPREAD_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADXDimension_SPREAD_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDimension, SPREAD_DIMENSION, id)

inline id ADXDimension_get_PARENT_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADXDimension_PARENT_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDimension, PARENT_DIMENSION, id)

inline id ADXDimension_get_PERCENT_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADXDimension_PERCENT_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDimension, PERCENT_DIMENSION, id)

inline id ADXDimension_get_RATIO_DIMENSION(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id ADXDimension_RATIO_DIMENSION;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXDimension, RATIO_DIMENSION, id)

FOUNDATION_EXPORT ADXDimension *ADXDimension_SuggestedWithInt_(jint value);

FOUNDATION_EXPORT ADXDimension *ADXDimension_SuggestedWithId_(id startValue);

FOUNDATION_EXPORT ADXDimension *ADXDimension_FixedWithInt_(jint value);

FOUNDATION_EXPORT ADXDimension *ADXDimension_FixedWithId_(id value);

FOUNDATION_EXPORT ADXDimension *ADXDimension_PercentWithId_withFloat_(id key, jfloat value);

FOUNDATION_EXPORT ADXDimension *ADXDimension_Parent(void);

FOUNDATION_EXPORT ADXDimension *ADXDimension_Wrap(void);

FOUNDATION_EXPORT ADXDimension *ADXDimension_Spread(void);

FOUNDATION_EXPORT ADXDimension *ADXDimension_RatioWithNSString_(NSString *ratio);

J2OBJC_TYPE_LITERAL_HEADER(ADXDimension)

@compatibility_alias AndroidxConstraintlayoutCoreStateDimension ADXDimension;

#endif

#if !defined (ADXDimension_Type_) && (INCLUDE_ALL_Dimension || defined(INCLUDE_ADXDimension_Type))
#define ADXDimension_Type_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, ADXDimension_Type_Enum) {
  ADXDimension_Type_Enum_FIXED = 0,
  ADXDimension_Type_Enum_WRAP = 1,
  ADXDimension_Type_Enum_MATCH_PARENT = 2,
  ADXDimension_Type_Enum_MATCH_CONSTRAINT = 3,
};

@interface ADXDimension_Type : JavaLangEnum

#pragma mark Public

+ (ADXDimension_Type *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

#pragma mark Package-Private

- (ADXDimension_Type_Enum)toNSEnum;

@end

J2OBJC_STATIC_INIT(ADXDimension_Type)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT ADXDimension_Type *ADXDimension_Type_values_[];

inline ADXDimension_Type *ADXDimension_Type_get_FIXED(void);
J2OBJC_ENUM_CONSTANT(ADXDimension_Type, FIXED)

inline ADXDimension_Type *ADXDimension_Type_get_WRAP(void);
J2OBJC_ENUM_CONSTANT(ADXDimension_Type, WRAP)

inline ADXDimension_Type *ADXDimension_Type_get_MATCH_PARENT(void);
J2OBJC_ENUM_CONSTANT(ADXDimension_Type, MATCH_PARENT)

inline ADXDimension_Type *ADXDimension_Type_get_MATCH_CONSTRAINT(void);
J2OBJC_ENUM_CONSTANT(ADXDimension_Type, MATCH_CONSTRAINT)

FOUNDATION_EXPORT IOSObjectArray *ADXDimension_Type_values(void);

FOUNDATION_EXPORT ADXDimension_Type *ADXDimension_Type_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT ADXDimension_Type *ADXDimension_Type_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(ADXDimension_Type)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_Dimension")
