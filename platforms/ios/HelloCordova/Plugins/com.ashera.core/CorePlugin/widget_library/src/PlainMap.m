//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\model\PlainMap.java
//

#include "IOSClass.h"
#include "J2ObjC_source.h"
#include "PlainMap.h"
#include "PlainMapException.h"
#include "PluginInvoker.h"
#include "java/lang/Exception.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"
#include "java/util/Iterator.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"

@protocol JavaUtilList;
@protocol JavaUtilMap;


@interface ASPlainMap () {
 @public
  /*!
   @brief Hierarchical map of the document.
   */
  id<JavaUtilMap> documentMap_;
}

/*!
 @brief Get the element value for a specific path by querying the elementObject (typically a Map<String, Object>, but it
  could also be a List<Object> or a String).
 This path may include any separator: .[{ inside the elementPath.
 @param elementObject
 @param elementPath
 @throw PlainMapException
 */
- (id)getElementWithId:(id)elementObject
          withNSString:(NSString *)elementPath;

/*!
 @brief Process a path (without any special bracket separator).The only separator permitted in this method is the "dot".
 It iterates through the path elements by querying sequentially the maps.
 @param elementObject
 @param elementMapPath
 @throw PlainMapException
 */
- (id)getElementFromMapPathWithId:(id)elementObject
                     withNSString:(NSString *)elementMapPath;

/*!
 @brief Process the path for an associative array.The path starts with the format: {key=value}.xxx.
 This notation is a
  shortcut to handle lists of maps where it is required to query the map that matches a specific value. This method
  returns the map that matches the value.
 @param associativeList
 @param associativeArrayPath
 @throw PlainMapException
 */
- (id)getElementFromAssociativeArrayPathWithJavaUtilList:(id<JavaUtilList>)associativeList
                                            withNSString:(NSString *)associativeArrayPath;

/*!
 @brief Process an array index returning the array element value.The parameter "arrayPath" is a string with the array
  index and the rest of the path (e.g. "[3]", "[0].element", or "[0][2].element").
 @param arrayObject
 @param arrayPath
 */
- (id)getElementFromArrayPathWithId:(id)arrayObject
                       withNSString:(NSString *)arrayPath;

/*!
 @brief Put a value in the map for the corresponding plain path.It iterates through the elements of the path, and it
  adds any Map or List required to arrive to the path.
 The array elements are handled by prepareArrayElement.
 @param map
 @param path
 @param value
 */
- (void)putMapElementWithJavaUtilMap:(id<JavaUtilMap>)map
                        withNSString:(NSString *)path
                              withId:(id)value;

/*!
 @brief Iterates through the array indexes to generate/get the lists.The parameter "arrayPath" is a string with the
  array indexes (e.g. "[3]" or "[0][2]").
 If the parameter "value" is not null, when arriving to the last array
  index, the value is set in that list.
 @param arrayElementObject
 @param arrayPath
 @param value
 */
- (id<JavaUtilMap>)prepareArrayElementWithJavaUtilList:(id<JavaUtilList>)arrayElementObject
                                          withNSString:(NSString *)arrayPath
                                                withId:(id)value;

@end

J2OBJC_FIELD_SETTER(ASPlainMap, documentMap_, id<JavaUtilMap>)

inline jchar ASPlainMap_get_SEPARATOR_DOT(void);
#define ASPlainMap_SEPARATOR_DOT '.'
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMap, SEPARATOR_DOT, jchar)

inline jchar ASPlainMap_get_SEPARATOR_ARRAY_START(void);
#define ASPlainMap_SEPARATOR_ARRAY_START '['
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMap, SEPARATOR_ARRAY_START, jchar)

inline jchar ASPlainMap_get_SEPARATOR_ARRAY_END(void);
#define ASPlainMap_SEPARATOR_ARRAY_END ']'
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMap, SEPARATOR_ARRAY_END, jchar)

inline jchar ASPlainMap_get_SEPARATOR_ASSOCIATIVE_ARRAY_START(void);
#define ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_START '{'
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMap, SEPARATOR_ASSOCIATIVE_ARRAY_START, jchar)

inline jchar ASPlainMap_get_SEPARATOR_ASSOCIATIVE_ARRAY_END(void);
#define ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_END '}'
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMap, SEPARATOR_ASSOCIATIVE_ARRAY_END, jchar)

inline jchar ASPlainMap_get_SEPARATOR_ASSOCIATIVE_ARRAY_EQUALS(void);
#define ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_EQUALS '='
J2OBJC_STATIC_FIELD_CONSTANT(ASPlainMap, SEPARATOR_ASSOCIATIVE_ARRAY_EQUALS, jchar)

inline NSString *ASPlainMap_get_ARRAY_LENGTH(void);
static NSString *ASPlainMap_ARRAY_LENGTH = @"length";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASPlainMap, ARRAY_LENGTH, NSString *)

inline NSString *ASPlainMap_get_DOT_ARRAY_LENGTH(void);
static NSString *ASPlainMap_DOT_ARRAY_LENGTH = @".length";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASPlainMap, DOT_ARRAY_LENGTH, NSString *)

inline NSString *ASPlainMap_get_EMPTY_STRING(void);
static NSString *ASPlainMap_EMPTY_STRING = @"";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASPlainMap, EMPTY_STRING, NSString *)

__attribute__((unused)) static void ASPlainMap_addRootPathWithNSString_(ASPlainMap *self, NSString *rootPath);

__attribute__((unused)) static id ASPlainMap_getElementWithId_withNSString_(ASPlainMap *self, id elementObject, NSString *elementPath);

__attribute__((unused)) static id ASPlainMap_getElementFromMapPathWithId_withNSString_(ASPlainMap *self, id elementObject, NSString *elementMapPath);

__attribute__((unused)) static id ASPlainMap_getElementFromAssociativeArrayPathWithJavaUtilList_withNSString_(ASPlainMap *self, id<JavaUtilList> associativeList, NSString *associativeArrayPath);

__attribute__((unused)) static id ASPlainMap_getElementFromArrayPathWithId_withNSString_(ASPlainMap *self, id arrayObject, NSString *arrayPath);

__attribute__((unused)) static void ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(ASPlainMap *self, id<JavaUtilMap> map, NSString *path, id value);

__attribute__((unused)) static id<JavaUtilMap> ASPlainMap_prepareArrayElementWithJavaUtilList_withNSString_withId_(ASPlainMap *self, id<JavaUtilList> arrayElementObject, NSString *arrayPath, id value);

/*!
 @brief Internal class to create a plain map which maps a hierarchical map.
 This class is used by the method getPlainMap.
 @author Jorge Lorenzo (jorgelg@@tid.es)
 */
@interface ASPlainMap_InternalPlainMap : NSObject {
 @public
  id<JavaUtilMap> plainMap_;
}

- (instancetype)initWithASPlainMap:(ASPlainMap *)outer$;

- (id<JavaUtilMap>)getPlainMapWithJavaUtilMap:(id<JavaUtilMap>)documentMap;

- (void)fillPlainMapForObjectWithNSString:(NSString *)parentElementName
                          withJavaUtilMap:(id<JavaUtilMap>)documentMap;

- (void)fillPlainMapForValueWithNSString:(NSString *)elementName
                                  withId:(id)elementValue;

@end

J2OBJC_EMPTY_STATIC_INIT(ASPlainMap_InternalPlainMap)

J2OBJC_FIELD_SETTER(ASPlainMap_InternalPlainMap, plainMap_, id<JavaUtilMap>)

__attribute__((unused)) static void ASPlainMap_InternalPlainMap_initWithASPlainMap_(ASPlainMap_InternalPlainMap *self, ASPlainMap *outer$);

__attribute__((unused)) static ASPlainMap_InternalPlainMap *new_ASPlainMap_InternalPlainMap_initWithASPlainMap_(ASPlainMap *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASPlainMap_InternalPlainMap *create_ASPlainMap_InternalPlainMap_initWithASPlainMap_(ASPlainMap *outer$);

__attribute__((unused)) static void ASPlainMap_InternalPlainMap_fillPlainMapForObjectWithNSString_withJavaUtilMap_(ASPlainMap_InternalPlainMap *self, NSString *parentElementName, id<JavaUtilMap> documentMap);

__attribute__((unused)) static void ASPlainMap_InternalPlainMap_fillPlainMapForValueWithNSString_withId_(ASPlainMap_InternalPlainMap *self, NSString *elementName, id elementValue);

J2OBJC_TYPE_LITERAL_HEADER(ASPlainMap_InternalPlainMap)

@implementation ASPlainMap

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASPlainMap_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)documentMap {
  ASPlainMap_initWithJavaUtilMap_(self, documentMap);
  return self;
}

- (instancetype)initWithJavaUtilMap:(id<JavaUtilMap>)documentMap
                       withNSString:(NSString *)rootPath {
  ASPlainMap_initWithJavaUtilMap_withNSString_(self, documentMap, rootPath);
  return self;
}

- (id<JavaUtilMap>)getHierarchicalMap {
  return self->documentMap_;
}

- (id<JavaUtilMap>)getPlainMap {
  return [create_ASPlainMap_InternalPlainMap_initWithASPlainMap_(self) getPlainMapWithJavaUtilMap:self->documentMap_];
}

- (jboolean)existsWithNSString:(NSString *)path {
  @try {
    for (jint i = [((NSString *) nil_chk(path)) java_length] - 1; i >= 0; i--) {
      jchar pathChar = [path charAtWithInt:i];
      if (pathChar == ASPlainMap_SEPARATOR_DOT) {
        NSString *parentPath = [path java_substring:0 endIndex:i];
        NSString *elementName = [path java_substring:i + 1];
        id<JavaUtilMap> parentMap = (id<JavaUtilMap>) cast_check([self getWithNSString:parentPath], JavaUtilMap_class_());
        return (parentMap != nil && [parentMap containsKeyWithId:elementName]);
      }
      else if (pathChar == ASPlainMap_SEPARATOR_ARRAY_START) {
        NSString *parentPath = [path java_substring:0 endIndex:i];
        jint index = JavaLangInteger_parseIntWithNSString_([path java_substring:i + 1 endIndex:[path java_length] - 1]);
        id<JavaUtilList> parentList;
        if ([((NSString *) nil_chk(parentPath)) java_isEmpty]) {
          parentList = (id<JavaUtilList>) cast_check([((id<JavaUtilMap>) nil_chk(self->documentMap_)) getWithId:ASPlainMap_EMPTY_STRING], JavaUtilList_class_());
        }
        else {
          parentList = (id<JavaUtilList>) cast_check([self getWithNSString:parentPath], JavaUtilList_class_());
        }
        return (parentList != nil && [parentList size] > index);
      }
      else if (pathChar == ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_START) {
        return ([self getWithNSString:path] != nil);
      }
    }
    return ([((id<JavaUtilMap>) nil_chk(self->documentMap_)) containsKeyWithId:path]);
  }
  @catch (JavaLangException *e) {
    return false;
  }
}

- (id)getWithNSString:(NSString *)path {
  @try {
    if (path == nil || [path java_isEmpty] || [path charAtWithInt:0] == ASPlainMap_SEPARATOR_ARRAY_START || [((NSString *) nil_chk(ASPlainMap_DOT_ARRAY_LENGTH)) isEqual:path]) {
      return ASPlainMap_getElementWithId_withNSString_(self, [((id<JavaUtilMap>) nil_chk(self->documentMap_)) getWithId:ASPlainMap_EMPTY_STRING], path);
    }
    else {
      return ASPlainMap_getElementWithId_withNSString_(self, self->documentMap_, path);
    }
  }
  @catch (JavaLangException *e) {
    return nil;
  }
}

- (void)putWithNSString:(NSString *)path
                 withId:(id)value {
  if ([value isKindOfClass:[ASPlainMap class]]) {
    ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(self, self->documentMap_, path, ((ASPlainMap *) nil_chk(((ASPlainMap *) value)))->documentMap_);
  }
  else {
    ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(self, self->documentMap_, path, value);
  }
}

- (void)clear {
  [((id<JavaUtilMap>) nil_chk(self->documentMap_)) clear];
}

- (void)removeWithNSString:(NSString *)path {
  if (path == nil || [path java_isEmpty]) {
    [((id<JavaUtilMap>) nil_chk(self->documentMap_)) removeWithId:ASPlainMap_EMPTY_STRING];
    return;
  }
  if ([path charAtWithInt:[path java_length] - 1] == ASPlainMap_SEPARATOR_ARRAY_END) {
    jint startListIndex = [path java_lastIndexOf:ASPlainMap_SEPARATOR_ARRAY_START];
    if (startListIndex < 0) {
      @throw create_ASPlainMapException_initWithNSString_(JreStrcat("$$", @"Error removing an element with a wrong path: ", path));
    }
    else {
      NSString *listPath = [path java_substring:0 endIndex:startListIndex];
      id listObject = JreRetainedLocalValue([self getWithNSString:listPath]);
      if (listObject == nil) {
        return;
      }
      if (!([JavaUtilList_class_() isInstance:listObject])) {
        @throw create_ASPlainMapException_initWithNSString_(JreStrcat("$$$", @"The path: ", path, @" targets a list but it is not a list"));
      }
      jint listIndex;
      @try {
        listIndex = JavaLangInteger_parseIntWithNSString_([path java_substring:startListIndex + 1 endIndex:[path java_length] - 1]);
      }
      @catch (JavaLangNumberFormatException *e) {
        @throw create_ASPlainMapException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$$", @"The path: ", path, @" specifies a wrong list index"), e);
      }
      id<JavaUtilList> list = (id<JavaUtilList>) cast_check(listObject, JavaUtilList_class_());
      if ([list size] > listIndex) {
        [list removeWithInt:listIndex];
      }
      return;
    }
  }
  else {
    jint endParentPathIndex = [path java_lastIndexOf:ASPlainMap_SEPARATOR_DOT];
    NSString *mapPath = endParentPathIndex < 0 ? ASPlainMap_EMPTY_STRING : [path java_substring:0 endIndex:endParentPathIndex];
    id mapObject = [mapPath java_isEmpty] ? [self getHierarchicalMap] : [self getWithNSString:mapPath];
    if (mapObject == nil) {
      return;
    }
    if (!([JavaUtilMap_class_() isInstance:mapObject])) {
      @throw create_ASPlainMapException_initWithNSString_(JreStrcat("$$$", @"The path: ", path, @" targets a map but it is not a map"));
    }
    NSString *mapKey = [path java_substring:endParentPathIndex + 1];
    id<JavaUtilMap> map = (id<JavaUtilMap>) cast_check(mapObject, JavaUtilMap_class_());
    [map removeWithId:mapKey];
    if ([map isEmpty]) {
      [self putWithNSString:mapPath withId:nil];
    }
  }
}

- (void)addRootPathWithNSString:(NSString *)rootPath {
  ASPlainMap_addRootPathWithNSString_(self, rootPath);
}

- (void)removeRootPathWithNSString:(NSString *)rootPath {
  if ([self existsWithNSString:rootPath]) {
    id rootPathValue = JreRetainedLocalValue([self getWithNSString:rootPath]);
    [((id<JavaUtilMap>) nil_chk(self->documentMap_)) clear];
    [self putWithNSString:nil withId:rootPathValue];
  }
  else {
    [((id<JavaUtilMap>) nil_chk(self->documentMap_)) clear];
  }
}

- (NSString *)getParent {
  if ([((id<JavaUtilMap>) nil_chk(self->documentMap_)) size] != 1) {
    @throw create_ASPlainMapException_initWithNSString_(@"There is not one and only one parent element in the document map");
  }
  return [((id<JavaUtilIterator>) nil_chk([((id<JavaUtilSet>) nil_chk([((id<JavaUtilMap>) nil_chk(self->documentMap_)) keySet])) iterator])) next];
}

- (NSString *)extractParent {
  NSString *parent = JreRetainedLocalValue([self getParent]);
  id newObject = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(self->documentMap_)) getWithId:parent]);
  [((id<JavaUtilMap>) nil_chk(self->documentMap_)) clear];
  [self putWithNSString:nil withId:newObject];
  return parent;
}

- (id)getElementWithId:(id)elementObject
          withNSString:(NSString *)elementPath {
  return ASPlainMap_getElementWithId_withNSString_(self, elementObject, elementPath);
}

- (id)getElementFromMapPathWithId:(id)elementObject
                     withNSString:(NSString *)elementMapPath {
  return ASPlainMap_getElementFromMapPathWithId_withNSString_(self, elementObject, elementMapPath);
}

- (id)getElementFromAssociativeArrayPathWithJavaUtilList:(id<JavaUtilList>)associativeList
                                            withNSString:(NSString *)associativeArrayPath {
  return ASPlainMap_getElementFromAssociativeArrayPathWithJavaUtilList_withNSString_(self, associativeList, associativeArrayPath);
}

- (id)getElementFromArrayPathWithId:(id)arrayObject
                       withNSString:(NSString *)arrayPath {
  return ASPlainMap_getElementFromArrayPathWithId_withNSString_(self, arrayObject, arrayPath);
}

- (void)putMapElementWithJavaUtilMap:(id<JavaUtilMap>)map
                        withNSString:(NSString *)path
                              withId:(id)value {
  ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(self, map, path, value);
}

- (id<JavaUtilMap>)prepareArrayElementWithJavaUtilList:(id<JavaUtilList>)arrayElementObject
                                          withNSString:(NSString *)arrayPath
                                                withId:(id)value {
  return ASPlainMap_prepareArrayElementWithJavaUtilList_withNSString_withId_(self, arrayElementObject, arrayPath, value);
}

- (void)dealloc {
  RELEASE_(documentMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, 1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, 3, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 4, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "Z", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, 11, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 7, 11, -1, -1, -1 },
    { NULL, "V", 0x11, 13, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 7, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 11, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, 11, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 15, 16, 11, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 17, 16, 11, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, 18, 19, 11, 20, -1, -1 },
    { NULL, "LNSObject;", 0x2, 21, 16, 11, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, 24, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x2, 25, 26, -1, 27, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithJavaUtilMap:);
  methods[2].selector = @selector(initWithJavaUtilMap:withNSString:);
  methods[3].selector = @selector(getHierarchicalMap);
  methods[4].selector = @selector(getPlainMap);
  methods[5].selector = @selector(existsWithNSString:);
  methods[6].selector = @selector(getWithNSString:);
  methods[7].selector = @selector(putWithNSString:withId:);
  methods[8].selector = @selector(clear);
  methods[9].selector = @selector(removeWithNSString:);
  methods[10].selector = @selector(addRootPathWithNSString:);
  methods[11].selector = @selector(removeRootPathWithNSString:);
  methods[12].selector = @selector(getParent);
  methods[13].selector = @selector(extractParent);
  methods[14].selector = @selector(getElementWithId:withNSString:);
  methods[15].selector = @selector(getElementFromMapPathWithId:withNSString:);
  methods[16].selector = @selector(getElementFromAssociativeArrayPathWithJavaUtilList:withNSString:);
  methods[17].selector = @selector(getElementFromArrayPathWithId:withNSString:);
  methods[18].selector = @selector(putMapElementWithJavaUtilMap:withNSString:withId:);
  methods[19].selector = @selector(prepareArrayElementWithJavaUtilList:withNSString:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SEPARATOR_DOT", "C", .constantValue.asUnichar = ASPlainMap_SEPARATOR_DOT, 0x1a, -1, -1, -1, -1 },
    { "SEPARATOR_ARRAY_START", "C", .constantValue.asUnichar = ASPlainMap_SEPARATOR_ARRAY_START, 0x1a, -1, -1, -1, -1 },
    { "SEPARATOR_ARRAY_END", "C", .constantValue.asUnichar = ASPlainMap_SEPARATOR_ARRAY_END, 0x1a, -1, -1, -1, -1 },
    { "SEPARATOR_ASSOCIATIVE_ARRAY_START", "C", .constantValue.asUnichar = ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_START, 0x1a, -1, -1, -1, -1 },
    { "SEPARATOR_ASSOCIATIVE_ARRAY_END", "C", .constantValue.asUnichar = ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_END, 0x1a, -1, -1, -1, -1 },
    { "SEPARATOR_ASSOCIATIVE_ARRAY_EQUALS", "C", .constantValue.asUnichar = ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_EQUALS, 0x1a, -1, -1, -1, -1 },
    { "ARRAY_LENGTH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 28, -1, -1 },
    { "DOT_ARRAY_LENGTH", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 29, -1, -1 },
    { "EMPTY_STRING", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 30, -1, -1 },
    { "documentMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 31, -1 },
  };
  static const void *ptrTable[] = { "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "LJavaUtilMap;LNSString;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;)V", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "exists", "LNSString;", "get", "put", "LNSString;LNSObject;", "LASPlainMapException;", "remove", "addRootPath", "removeRootPath", "getElement", "LNSObject;LNSString;", "getElementFromMapPath", "getElementFromAssociativeArrayPath", "LJavaUtilList;LNSString;", "(Ljava/util/List<Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;>;Ljava/lang/String;)Ljava/lang/Object;", "getElementFromArrayPath", "putMapElement", "LJavaUtilMap;LNSString;LNSObject;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/Object;)V", "prepareArrayElement", "LJavaUtilList;LNSString;LNSObject;", "(Ljava/util/List<Ljava/lang/Object;>;Ljava/lang/String;Ljava/lang/Object;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", &ASPlainMap_ARRAY_LENGTH, &ASPlainMap_DOT_ARRAY_LENGTH, &ASPlainMap_EMPTY_STRING, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASPlainMap_InternalPlainMap;" };
  static const J2ObjcClassInfo _ASPlainMap = { "PlainMap", "com.ashera.model", ptrTable, methods, fields, 7, 0x1, 20, 10, -1, 32, -1, -1, -1 };
  return &_ASPlainMap;
}

@end

void ASPlainMap_init(ASPlainMap *self) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->documentMap_, new_JavaUtilHashMap_init());
}

ASPlainMap *new_ASPlainMap_init() {
  J2OBJC_NEW_IMPL(ASPlainMap, init)
}

ASPlainMap *create_ASPlainMap_init() {
  J2OBJC_CREATE_IMPL(ASPlainMap, init)
}

void ASPlainMap_initWithJavaUtilMap_(ASPlainMap *self, id<JavaUtilMap> documentMap) {
  NSObject_init(self);
  JreStrongAssign(&self->documentMap_, documentMap);
}

ASPlainMap *new_ASPlainMap_initWithJavaUtilMap_(id<JavaUtilMap> documentMap) {
  J2OBJC_NEW_IMPL(ASPlainMap, initWithJavaUtilMap_, documentMap)
}

ASPlainMap *create_ASPlainMap_initWithJavaUtilMap_(id<JavaUtilMap> documentMap) {
  J2OBJC_CREATE_IMPL(ASPlainMap, initWithJavaUtilMap_, documentMap)
}

void ASPlainMap_initWithJavaUtilMap_withNSString_(ASPlainMap *self, id<JavaUtilMap> documentMap, NSString *rootPath) {
  NSObject_init(self);
  JreStrongAssign(&self->documentMap_, documentMap);
  ASPlainMap_addRootPathWithNSString_(self, rootPath);
}

ASPlainMap *new_ASPlainMap_initWithJavaUtilMap_withNSString_(id<JavaUtilMap> documentMap, NSString *rootPath) {
  J2OBJC_NEW_IMPL(ASPlainMap, initWithJavaUtilMap_withNSString_, documentMap, rootPath)
}

ASPlainMap *create_ASPlainMap_initWithJavaUtilMap_withNSString_(id<JavaUtilMap> documentMap, NSString *rootPath) {
  J2OBJC_CREATE_IMPL(ASPlainMap, initWithJavaUtilMap_withNSString_, documentMap, rootPath)
}

void ASPlainMap_addRootPathWithNSString_(ASPlainMap *self, NSString *rootPath) {
  if (rootPath == nil || [rootPath java_isEmpty]) {
    return;
  }
  id<JavaUtilMap> newDocumentMap = create_JavaUtilHashMap_init();
  id val = [((id<JavaUtilMap>) nil_chk(self->documentMap_)) containsKeyWithId:ASPlainMap_EMPTY_STRING] ? [((id<JavaUtilMap>) nil_chk(self->documentMap_)) getWithId:ASPlainMap_EMPTY_STRING] : self->documentMap_;
  ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(self, newDocumentMap, rootPath, val);
  JreStrongAssign(&self->documentMap_, newDocumentMap);
}

id ASPlainMap_getElementWithId_withNSString_(ASPlainMap *self, id elementObject, NSString *elementPath) {
  if (elementPath == nil || [elementPath java_isEmpty]) {
    return elementObject;
  }
  if ([elementPath charAtWithInt:0] == ASPlainMap_SEPARATOR_DOT) {
    return ASPlainMap_getElementWithId_withNSString_(self, elementObject, [elementPath java_substring:1]);
  }
  jint bracketIndex = [elementPath java_indexOf:ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_START];
  jint sqBracketIndex = [elementPath java_indexOf:ASPlainMap_SEPARATOR_ARRAY_START];
  if (bracketIndex == -1 && sqBracketIndex == -1) {
    return ASPlainMap_getElementFromMapPathWithId_withNSString_(self, elementObject, elementPath);
  }
  else {
    if (bracketIndex != -1) {
      NSString *associativeArrayPath = [elementPath java_substring:bracketIndex];
      id<JavaUtilList> associativeList = (id<JavaUtilList>) cast_check(ASPlainMap_getElementWithId_withNSString_(self, elementObject, [elementPath java_substring:0 endIndex:bracketIndex]), JavaUtilList_class_());
      return ASPlainMap_getElementFromAssociativeArrayPathWithJavaUtilList_withNSString_(self, associativeList, associativeArrayPath);
    }
    else {
      NSString *arrayPath = [elementPath java_substring:sqBracketIndex];
      id arrayObject = ASPlainMap_getElementWithId_withNSString_(self, elementObject, [elementPath java_substring:0 endIndex:sqBracketIndex]);
      return ASPlainMap_getElementFromArrayPathWithId_withNSString_(self, arrayObject, arrayPath);
    }
  }
}

id ASPlainMap_getElementFromMapPathWithId_withNSString_(ASPlainMap *self, id elementObject, NSString *elementMapPath) {
  jint index = 0;
  id currentElementObject = JreRetainedLocalValue(elementObject);
  while (true) {
    jint newIndex = [((NSString *) nil_chk(elementMapPath)) java_indexOf:ASPlainMap_SEPARATOR_DOT fromIndex:index];
    if (newIndex >= 0) {
      NSString *pathElement = [elementMapPath java_substring:index endIndex:newIndex];
      currentElementObject = [((id<JavaUtilMap>) nil_chk((ASPluginInvoker_getMapWithId_(currentElementObject)))) getWithId:pathElement];
      if (currentElementObject == nil) {
        return nil;
      }
      index = newIndex + 1;
    }
    else {
      NSString *pathElement = [elementMapPath java_substring:index];
      if ([((NSString *) nil_chk(ASPlainMap_ARRAY_LENGTH)) isEqual:pathElement]) {
        return JavaLangInteger_toStringWithInt_([((id<JavaUtilList>) nil_chk((ASPluginInvoker_getListWithId_(currentElementObject)))) size]);
      }
      else {
        return [((id<JavaUtilMap>) nil_chk((ASPluginInvoker_getMapWithId_(currentElementObject)))) getWithId:pathElement];
      }
    }
  }
}

id ASPlainMap_getElementFromAssociativeArrayPathWithJavaUtilList_withNSString_(ASPlainMap *self, id<JavaUtilList> associativeList, NSString *associativeArrayPath) {
  jint endAssociativeArrayIndex = [((NSString *) nil_chk(associativeArrayPath)) java_indexOf:ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_END];
  if (endAssociativeArrayIndex < 0) {
    @throw create_ASPlainMapException_initWithNSString_(JreStrcat("$$", @"The associative array query must be surrounded by brackets: ", associativeArrayPath));
  }
  jint equalsIndex = [associativeArrayPath java_indexOf:ASPlainMap_SEPARATOR_ASSOCIATIVE_ARRAY_EQUALS];
  if (equalsIndex < 0) {
    @throw create_ASPlainMapException_initWithNSString_(JreStrcat("$$", @"Invalid associative array query: ", associativeArrayPath));
  }
  NSString *associativeMapKey = [associativeArrayPath java_substring:1 endIndex:equalsIndex];
  NSString *associativeMapValue = [associativeArrayPath java_substring:equalsIndex + 1 endIndex:endAssociativeArrayIndex];
  for (id<JavaUtilMap> __strong associativeMap in nil_chk(associativeList)) {
    if ([((NSString *) nil_chk(associativeMapValue)) isEqual:[((id<JavaUtilMap>) nil_chk(associativeMap)) getWithId:associativeMapKey]]) {
      return ASPlainMap_getElementWithId_withNSString_(self, associativeMap, [associativeArrayPath java_substring:endAssociativeArrayIndex + 1]);
    }
  }
  return nil;
}

id ASPlainMap_getElementFromArrayPathWithId_withNSString_(ASPlainMap *self, id arrayObject, NSString *arrayPath) {
  jint endArrayIndex = [((NSString *) nil_chk(arrayPath)) java_indexOf:ASPlainMap_SEPARATOR_ARRAY_END];
  if (endArrayIndex < 0) {
    @throw create_ASPlainMapException_initWithNSString_(JreStrcat("$$", @"The array query must be surrounded by square brackets: ", arrayPath));
  }
  @try {
    jint arrayIndex = JavaLangInteger_parseIntWithNSString_([arrayPath java_substring:1 endIndex:endArrayIndex]);
    NSString *subarrayPath = [arrayPath java_substring:endArrayIndex + 1];
    if ([JavaUtilList_class_() isInstance:arrayObject]) {
      id subarrayObject = JreRetainedLocalValue([((id<JavaUtilList>) nil_chk(((id<JavaUtilList>) cast_check(arrayObject, JavaUtilList_class_())))) getWithInt:arrayIndex]);
      return ASPlainMap_getElementWithId_withNSString_(self, subarrayObject, subarrayPath);
    }
    else {
      if (arrayIndex == 0) {
        return ASPlainMap_getElementWithId_withNSString_(self, arrayObject, subarrayPath);
      }
      else {
        return nil;
      }
    }
  }
  @catch (JavaLangNumberFormatException *e) {
    @throw create_ASPlainMapException_initWithNSString_withJavaLangThrowable_(JreStrcat("$$", @"The array query requires an integer index: ", arrayPath), e);
  }
}

void ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(ASPlainMap *self, id<JavaUtilMap> map, NSString *path, id value) {
  if (path == nil || [path java_isEmpty]) {
    if ([JavaUtilMap_class_() isInstance:value]) {
      [((id<JavaUtilMap>) nil_chk(map)) putAllWithJavaUtilMap:(id<JavaUtilMap>) cast_check(value, JavaUtilMap_class_())];
    }
    else {
      [((id<JavaUtilMap>) nil_chk(map)) putWithId:ASPlainMap_EMPTY_STRING withId:value];
    }
  }
  else {
    jint index = [path java_indexOf:ASPlainMap_SEPARATOR_DOT];
    NSString *firstPathElement = (index >= 0) ? [path java_substring:0 endIndex:index] : path;
    NSString *childPath = (index >= 0) ? [path java_substring:index + 1] : ASPlainMap_EMPTY_STRING;
    jint startArrayIndex = [firstPathElement java_indexOf:ASPlainMap_SEPARATOR_ARRAY_START];
    NSString *subElementName = (startArrayIndex >= 0) ? [firstPathElement java_substring:0 endIndex:startArrayIndex] : firstPathElement;
    id subElementObject = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(map)) getWithId:subElementName]);
    id<JavaUtilMap> subElementMap = nil;
    if (startArrayIndex < 0) {
      if ([childPath java_isEmpty]) {
        [map putWithId:subElementName withId:value];
      }
      else {
        if (subElementObject == nil) {
          subElementMap = create_JavaUtilHashMap_init();
          [map putWithId:subElementName withId:subElementMap];
        }
        else {
          subElementMap = (id<JavaUtilMap>) cast_check(subElementObject, JavaUtilMap_class_());
        }
      }
    }
    else {
      if (!([JavaUtilList_class_() isInstance:subElementObject])) {
        subElementObject = create_JavaUtilArrayList_init();
        [map putWithId:subElementName withId:subElementObject];
      }
      id arrayValue = [childPath java_isEmpty] ? value : nil;
      subElementMap = ASPlainMap_prepareArrayElementWithJavaUtilList_withNSString_withId_(self, (id<JavaUtilList>) cast_check(subElementObject, JavaUtilList_class_()), [firstPathElement java_substring:startArrayIndex], arrayValue);
    }
    if (![childPath java_isEmpty]) {
      ASPlainMap_putMapElementWithJavaUtilMap_withNSString_withId_(self, subElementMap, childPath, value);
    }
  }
}

id<JavaUtilMap> ASPlainMap_prepareArrayElementWithJavaUtilList_withNSString_withId_(ASPlainMap *self, id<JavaUtilList> arrayElementObject, NSString *arrayPath, id value) {
  jint endArrayIndex = [((NSString *) nil_chk(arrayPath)) java_indexOf:ASPlainMap_SEPARATOR_ARRAY_END];
  jint arrayIndex = JavaLangInteger_parseIntWithNSString_([arrayPath java_substring:1 endIndex:endArrayIndex]);
  NSString *subarrayPath = [arrayPath java_substring:endArrayIndex + 1];
  if (arrayIndex >= [((id<JavaUtilList>) nil_chk(arrayElementObject)) size]) {
    for (jint j = [arrayElementObject size]; j < arrayIndex; j++) {
      [arrayElementObject addWithId:nil];
    }
    if ([((NSString *) nil_chk(subarrayPath)) java_isEmpty]) {
      if (value == nil) {
        id<JavaUtilMap> subarrayMap = create_JavaUtilHashMap_init();
        [arrayElementObject addWithId:subarrayMap];
        return subarrayMap;
      }
      else {
        [arrayElementObject addWithId:value];
        return nil;
      }
    }
    else {
      id<JavaUtilList> subarrayList = create_JavaUtilArrayList_init();
      [arrayElementObject addWithId:subarrayList];
      return ASPlainMap_prepareArrayElementWithJavaUtilList_withNSString_withId_(self, subarrayList, subarrayPath, value);
    }
  }
  else {
    if ([((NSString *) nil_chk(subarrayPath)) java_isEmpty]) {
      if (value == nil) {
        id subarrayObject = JreRetainedLocalValue([arrayElementObject getWithInt:arrayIndex]);
        if (!([JavaUtilMap_class_() isInstance:subarrayObject])) {
          subarrayObject = create_JavaUtilHashMap_init();
          [arrayElementObject setWithInt:arrayIndex withId:subarrayObject];
        }
        return (id<JavaUtilMap>) cast_check(subarrayObject, JavaUtilMap_class_());
      }
      else {
        [arrayElementObject setWithInt:arrayIndex withId:value];
        return nil;
      }
    }
    else {
      return ASPlainMap_prepareArrayElementWithJavaUtilList_withNSString_withId_(self, (id<JavaUtilList>) cast_check([arrayElementObject getWithInt:arrayIndex], JavaUtilList_class_()), subarrayPath, value);
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPlainMap)

@implementation ASPlainMap_InternalPlainMap

- (instancetype)initWithASPlainMap:(ASPlainMap *)outer$ {
  ASPlainMap_InternalPlainMap_initWithASPlainMap_(self, outer$);
  return self;
}

- (id<JavaUtilMap>)getPlainMapWithJavaUtilMap:(id<JavaUtilMap>)documentMap {
  JreStrongAssignAndConsume(&self->plainMap_, new_JavaUtilHashMap_init());
  ASPlainMap_InternalPlainMap_fillPlainMapForObjectWithNSString_withJavaUtilMap_(self, ASPlainMap_EMPTY_STRING, documentMap);
  return self->plainMap_;
}

- (void)fillPlainMapForObjectWithNSString:(NSString *)parentElementName
                          withJavaUtilMap:(id<JavaUtilMap>)documentMap {
  ASPlainMap_InternalPlainMap_fillPlainMapForObjectWithNSString_withJavaUtilMap_(self, parentElementName, documentMap);
}

- (void)fillPlainMapForValueWithNSString:(NSString *)elementName
                                  withId:(id)elementValue {
  ASPlainMap_InternalPlainMap_fillPlainMapForValueWithNSString_withId_(self, elementName, elementValue);
}

- (void)dealloc {
  RELEASE_(plainMap_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "V", 0x2, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x2, 7, 8, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASPlainMap:);
  methods[1].selector = @selector(getPlainMapWithJavaUtilMap:);
  methods[2].selector = @selector(fillPlainMapForObjectWithNSString:withJavaUtilMap:);
  methods[3].selector = @selector(fillPlainMapForValueWithNSString:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "plainMap_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LASPlainMap;", "getPlainMap", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;", "fillPlainMapForObject", "LNSString;LJavaUtilMap;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "fillPlainMapForValue", "LNSString;LNSObject;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASPlainMap_InternalPlainMap = { "InternalPlainMap", "com.ashera.model", ptrTable, methods, fields, 7, 0x2, 4, 1, 0, -1, -1, -1, -1 };
  return &_ASPlainMap_InternalPlainMap;
}

@end

void ASPlainMap_InternalPlainMap_initWithASPlainMap_(ASPlainMap_InternalPlainMap *self, ASPlainMap *outer$) {
  NSObject_init(self);
}

ASPlainMap_InternalPlainMap *new_ASPlainMap_InternalPlainMap_initWithASPlainMap_(ASPlainMap *outer$) {
  J2OBJC_NEW_IMPL(ASPlainMap_InternalPlainMap, initWithASPlainMap_, outer$)
}

ASPlainMap_InternalPlainMap *create_ASPlainMap_InternalPlainMap_initWithASPlainMap_(ASPlainMap *outer$) {
  J2OBJC_CREATE_IMPL(ASPlainMap_InternalPlainMap, initWithASPlainMap_, outer$)
}

void ASPlainMap_InternalPlainMap_fillPlainMapForObjectWithNSString_withJavaUtilMap_(ASPlainMap_InternalPlainMap *self, NSString *parentElementName, id<JavaUtilMap> documentMap) {
  for (id<JavaUtilMap_Entry> __strong elementEntry in nil_chk([((id<JavaUtilMap>) nil_chk(documentMap)) entrySet])) {
    NSString *rootElementName = ([((NSString *) nil_chk(parentElementName)) java_isEmpty]) ? [((id<JavaUtilMap_Entry>) nil_chk(elementEntry)) getKey] : JreStrcat("$C$", parentElementName, ASPlainMap_SEPARATOR_DOT, [((id<JavaUtilMap_Entry>) nil_chk(elementEntry)) getKey]);
    ASPlainMap_InternalPlainMap_fillPlainMapForValueWithNSString_withId_(self, rootElementName, [elementEntry getValue]);
  }
}

void ASPlainMap_InternalPlainMap_fillPlainMapForValueWithNSString_withId_(ASPlainMap_InternalPlainMap *self, NSString *elementName, id elementValue) {
  if ([JavaUtilList_class_() isInstance:elementValue]) {
    id<JavaUtilList> elementList = (id<JavaUtilList>) cast_check(elementValue, JavaUtilList_class_());
    for (jint i = 0; i < [((id<JavaUtilList>) nil_chk(elementList)) size]; i++) {
      NSString *arrayElementName = JreStrcat("$CIC", elementName, ASPlainMap_SEPARATOR_ARRAY_START, i, ASPlainMap_SEPARATOR_ARRAY_END);
      ASPlainMap_InternalPlainMap_fillPlainMapForValueWithNSString_withId_(self, arrayElementName, [elementList getWithInt:i]);
    }
    NSString *arrayElementLength = JreStrcat("$$", elementName, ASPlainMap_DOT_ARRAY_LENGTH);
    [((id<JavaUtilMap>) nil_chk(self->plainMap_)) putWithId:arrayElementLength withId:JavaLangInteger_toStringWithInt_([elementList size])];
  }
  else if ([JavaUtilMap_class_() isInstance:elementValue]) {
    ASPlainMap_InternalPlainMap_fillPlainMapForObjectWithNSString_withJavaUtilMap_(self, elementName, (id<JavaUtilMap>) cast_check(elementValue, JavaUtilMap_class_()));
  }
  else {
    NSString *stringValue = (elementValue == nil) ? nil : [nil_chk(elementValue) description];
    [((id<JavaUtilMap>) nil_chk(self->plainMap_)) putWithId:elementName withId:stringValue];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPlainMap_InternalPlainMap)
