//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\CoreGuideline.java
//

#include "ArrayRow.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "CoreGuideline.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "SolverVariable.h"
#include "java/util/ArrayList.h"
#include "java/util/HashMap.h"


@interface ADXCoreGuideline () {
 @public
  ADXConstraintAnchor *mAnchor_;
  jint mOrientation_;
  jint mMinimumPosition_;
  jboolean resolved_;
}

@end

J2OBJC_FIELD_SETTER(ADXCoreGuideline, mAnchor_, ADXConstraintAnchor *)

@implementation ADXCoreGuideline

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCoreGuideline_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)copy__WithADXConstraintWidget:(ADXConstraintWidget *)src
                  withJavaUtilHashMap:(JavaUtilHashMap *)map {
  [super copy__WithADXConstraintWidget:src withJavaUtilHashMap:map];
  ADXCoreGuideline *srcGuideline = (ADXCoreGuideline *) cast_chk(src, [ADXCoreGuideline class]);
  mRelativePercent_ = ((ADXCoreGuideline *) nil_chk(srcGuideline))->mRelativePercent_;
  mRelativeBegin_ = srcGuideline->mRelativeBegin_;
  mRelativeEnd_ = srcGuideline->mRelativeEnd_;
  [self setOrientationWithInt:srcGuideline->mOrientation_];
}

- (jboolean)allowedInBarrier {
  return true;
}

- (jint)getRelativeBehaviour {
  if (mRelativePercent_ != -1) {
    return ADXCoreGuideline_RELATIVE_PERCENT;
  }
  if (mRelativeBegin_ != -1) {
    return ADXCoreGuideline_RELATIVE_BEGIN;
  }
  if (mRelativeEnd_ != -1) {
    return ADXCoreGuideline_RELATIVE_END;
  }
  return ADXCoreGuideline_RELATIVE_UNKNOWN;
}

- (void)setOrientationWithInt:(jint)orientation {
  if (mOrientation_ == orientation) {
    return;
  }
  mOrientation_ = orientation;
  [((JavaUtilArrayList *) nil_chk(mAnchors_)) clear];
  if (mOrientation_ == ADXCoreGuideline_VERTICAL) {
    JreStrongAssign(&mAnchor_, mLeft_);
  }
  else {
    JreStrongAssign(&mAnchor_, mTop_);
  }
  [((JavaUtilArrayList *) nil_chk(mAnchors_)) addWithId:mAnchor_];
  jint count = ((IOSObjectArray *) nil_chk(mListAnchors_))->size_;
  for (jint i = 0; i < count; i++) {
    IOSObjectArray_Set(mListAnchors_, i, mAnchor_);
  }
}

- (ADXConstraintAnchor *)getAnchor {
  return mAnchor_;
}

- (NSString *)getType {
  return @"Guideline";
}

- (jint)getOrientation {
  return mOrientation_;
}

- (void)setMinimumPositionWithInt:(jint)minimum {
  mMinimumPosition_ = minimum;
}

- (ADXConstraintAnchor *)getAnchorWithADXConstraintAnchor_Type:(ADXConstraintAnchor_Type *)anchorType {
  switch ([anchorType ordinal]) {
    case ADXConstraintAnchor_Type_Enum_LEFT:
    case ADXConstraintAnchor_Type_Enum_RIGHT:
    {
      if (mOrientation_ == ADXCoreGuideline_VERTICAL) {
        return mAnchor_;
      }
    }
    break;
    case ADXConstraintAnchor_Type_Enum_TOP:
    case ADXConstraintAnchor_Type_Enum_BOTTOM:
    {
      if (mOrientation_ == ADXCoreGuideline_HORIZONTAL) {
        return mAnchor_;
      }
    }
    break;
    case ADXConstraintAnchor_Type_Enum_BASELINE:
    case ADXConstraintAnchor_Type_Enum_CENTER:
    case ADXConstraintAnchor_Type_Enum_CENTER_X:
    case ADXConstraintAnchor_Type_Enum_CENTER_Y:
    case ADXConstraintAnchor_Type_Enum_NONE:
    return nil;
  }
  return nil;
}

- (void)setGuidePercentWithInt:(jint)value {
  [self setGuidePercentWithFloat:value / 100.0f];
}

- (void)setGuidePercentWithFloat:(jfloat)value {
  if (value > -1) {
    mRelativePercent_ = value;
    mRelativeBegin_ = -1;
    mRelativeEnd_ = -1;
  }
}

- (void)setGuideBeginWithInt:(jint)value {
  if (value > -1) {
    mRelativePercent_ = -1;
    mRelativeBegin_ = value;
    mRelativeEnd_ = -1;
  }
}

- (void)setGuideEndWithInt:(jint)value {
  if (value > -1) {
    mRelativePercent_ = -1;
    mRelativeBegin_ = -1;
    mRelativeEnd_ = value;
  }
}

- (jfloat)getRelativePercent {
  return mRelativePercent_;
}

- (jint)getRelativeBegin {
  return mRelativeBegin_;
}

- (jint)getRelativeEnd {
  return mRelativeEnd_;
}

- (void)setFinalValueWithInt:(jint)position {
  [((ADXConstraintAnchor *) nil_chk(mAnchor_)) setFinalValueWithInt:position];
  resolved_ = true;
}

- (jboolean)isResolvedHorizontally {
  return resolved_;
}

- (jboolean)isResolvedVertically {
  return resolved_;
}

- (void)addToSolverWithADXLinearSystem:(ADXLinearSystem *)system
                           withBoolean:(jboolean)optimize {
  ADXConstraintWidgetContainer *parent = (ADXConstraintWidgetContainer *) cast_chk([self getParent], [ADXConstraintWidgetContainer class]);
  if (parent == nil) {
    return;
  }
  ADXConstraintAnchor *begin = JreRetainedLocalValue([parent getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
  ADXConstraintAnchor *end = JreRetainedLocalValue([parent getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
  jboolean parentWrapContent = mParent_ != nil ? IOSObjectArray_Get(nil_chk(mParent_->mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_HORIZONTAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) : false;
  if (mOrientation_ == ADXCoreGuideline_HORIZONTAL) {
    begin = [parent getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)];
    end = [parent getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)];
    parentWrapContent = mParent_ != nil ? IOSObjectArray_Get(nil_chk(mParent_->mListDimensionBehaviors_), ADXConstraintWidget_DIMENSION_VERTICAL) == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) : false;
  }
  if (resolved_ && [((ADXConstraintAnchor *) nil_chk(mAnchor_)) hasFinalValue]) {
    ADXSolverVariable *guide = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mAnchor_]);
    [system addEqualityWithADXSolverVariable:guide withInt:[((ADXConstraintAnchor *) nil_chk(mAnchor_)) getFinalValue]];
    if (mRelativeBegin_ != -1) {
      if (parentWrapContent) {
        [system addGreaterThanWithADXSolverVariable:[system createObjectVariableWithId:end] withADXSolverVariable:guide withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
      }
    }
    else if (mRelativeEnd_ != -1) {
      if (parentWrapContent) {
        ADXSolverVariable *parentRight = JreRetainedLocalValue([system createObjectVariableWithId:end]);
        [system addGreaterThanWithADXSolverVariable:guide withADXSolverVariable:[system createObjectVariableWithId:begin] withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
        [system addGreaterThanWithADXSolverVariable:parentRight withADXSolverVariable:guide withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
      }
    }
    resolved_ = false;
    return;
  }
  if (mRelativeBegin_ != -1) {
    ADXSolverVariable *guide = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mAnchor_]);
    ADXSolverVariable *parentLeft = JreRetainedLocalValue([system createObjectVariableWithId:begin]);
    [system addEqualityWithADXSolverVariable:guide withADXSolverVariable:parentLeft withInt:mRelativeBegin_ withInt:ADXSolverVariable_STRENGTH_FIXED];
    if (parentWrapContent) {
      [system addGreaterThanWithADXSolverVariable:[system createObjectVariableWithId:end] withADXSolverVariable:guide withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
    }
  }
  else if (mRelativeEnd_ != -1) {
    ADXSolverVariable *guide = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mAnchor_]);
    ADXSolverVariable *parentRight = JreRetainedLocalValue([system createObjectVariableWithId:end]);
    [system addEqualityWithADXSolverVariable:guide withADXSolverVariable:parentRight withInt:-mRelativeEnd_ withInt:ADXSolverVariable_STRENGTH_FIXED];
    if (parentWrapContent) {
      [system addGreaterThanWithADXSolverVariable:guide withADXSolverVariable:[system createObjectVariableWithId:begin] withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
      [system addGreaterThanWithADXSolverVariable:parentRight withADXSolverVariable:guide withInt:0 withInt:ADXSolverVariable_STRENGTH_EQUALITY];
    }
  }
  else if (mRelativePercent_ != -1) {
    ADXSolverVariable *guide = JreRetainedLocalValue([((ADXLinearSystem *) nil_chk(system)) createObjectVariableWithId:mAnchor_]);
    ADXSolverVariable *parentRight = JreRetainedLocalValue([system createObjectVariableWithId:end]);
    [system addConstraintWithADXArrayRow:ADXLinearSystem_createRowDimensionPercentWithADXLinearSystem_withADXSolverVariable_withADXSolverVariable_withFloat_(system, guide, parentRight, mRelativePercent_)];
  }
}

- (void)updateFromSolverWithADXLinearSystem:(ADXLinearSystem *)system
                                withBoolean:(jboolean)optimize {
  if ([self getParent] == nil) {
    return;
  }
  jint value = [((ADXLinearSystem *) nil_chk(system)) getObjectVariableValueWithId:mAnchor_];
  if (mOrientation_ == ADXCoreGuideline_VERTICAL) {
    [self setXWithInt:value];
    [self setYWithInt:0];
    [self setHeightWithInt:[((ADXConstraintWidget *) nil_chk([self getParent])) getHeight]];
    [self setWidthWithInt:0];
  }
  else {
    [self setXWithInt:0];
    [self setYWithInt:value];
    [self setWidthWithInt:[((ADXConstraintWidget *) nil_chk([self getParent])) getWidth]];
    [self setHeightWithInt:0];
  }
}

- (void)inferRelativePercentPosition {
  jfloat percent = ([self getX] / (jfloat) [((ADXConstraintWidget *) nil_chk([self getParent])) getWidth]);
  if (mOrientation_ == ADXCoreGuideline_HORIZONTAL) {
    percent = ([self getY] / (jfloat) [((ADXConstraintWidget *) nil_chk([self getParent])) getHeight]);
  }
  [self setGuidePercentWithFloat:percent];
}

- (void)inferRelativeBeginPosition {
  jint position = [self getX];
  if (mOrientation_ == ADXCoreGuideline_HORIZONTAL) {
    position = [self getY];
  }
  [self setGuideBeginWithInt:position];
}

- (void)inferRelativeEndPosition {
  jint position = [((ADXConstraintWidget *) nil_chk([self getParent])) getWidth] - [self getX];
  if (mOrientation_ == ADXCoreGuideline_HORIZONTAL) {
    position = [((ADXConstraintWidget *) nil_chk([self getParent])) getHeight] - [self getY];
  }
  [self setGuideEndWithInt:position];
}

- (void)cyclePosition {
  if (mRelativeBegin_ != -1) {
    [self inferRelativePercentPosition];
  }
  else if (mRelativePercent_ != -1) {
    [self inferRelativeEndPosition];
  }
  else if (mRelativeEnd_ != -1) {
    [self inferRelativeBeginPosition];
  }
}

- (jboolean)isPercent {
  return mRelativePercent_ != -1 && mRelativeBegin_ == -1 && mRelativeEnd_ == -1;
}

- (void)dealloc {
  RELEASE_(mAnchor_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXConstraintAnchor;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LADXConstraintAnchor;", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(copy__WithADXConstraintWidget:withJavaUtilHashMap:);
  methods[2].selector = @selector(allowedInBarrier);
  methods[3].selector = @selector(getRelativeBehaviour);
  methods[4].selector = @selector(setOrientationWithInt:);
  methods[5].selector = @selector(getAnchor);
  methods[6].selector = @selector(getType);
  methods[7].selector = @selector(getOrientation);
  methods[8].selector = @selector(setMinimumPositionWithInt:);
  methods[9].selector = @selector(getAnchorWithADXConstraintAnchor_Type:);
  methods[10].selector = @selector(setGuidePercentWithInt:);
  methods[11].selector = @selector(setGuidePercentWithFloat:);
  methods[12].selector = @selector(setGuideBeginWithInt:);
  methods[13].selector = @selector(setGuideEndWithInt:);
  methods[14].selector = @selector(getRelativePercent);
  methods[15].selector = @selector(getRelativeBegin);
  methods[16].selector = @selector(getRelativeEnd);
  methods[17].selector = @selector(setFinalValueWithInt:);
  methods[18].selector = @selector(isResolvedHorizontally);
  methods[19].selector = @selector(isResolvedVertically);
  methods[20].selector = @selector(addToSolverWithADXLinearSystem:withBoolean:);
  methods[21].selector = @selector(updateFromSolverWithADXLinearSystem:withBoolean:);
  methods[22].selector = @selector(inferRelativePercentPosition);
  methods[23].selector = @selector(inferRelativeBeginPosition);
  methods[24].selector = @selector(inferRelativeEndPosition);
  methods[25].selector = @selector(cyclePosition);
  methods[26].selector = @selector(isPercent);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HORIZONTAL", "I", .constantValue.asInt = ADXCoreGuideline_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXCoreGuideline_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "RELATIVE_PERCENT", "I", .constantValue.asInt = ADXCoreGuideline_RELATIVE_PERCENT, 0x19, -1, -1, -1, -1 },
    { "RELATIVE_BEGIN", "I", .constantValue.asInt = ADXCoreGuideline_RELATIVE_BEGIN, 0x19, -1, -1, -1, -1 },
    { "RELATIVE_END", "I", .constantValue.asInt = ADXCoreGuideline_RELATIVE_END, 0x19, -1, -1, -1, -1 },
    { "RELATIVE_UNKNOWN", "I", .constantValue.asInt = ADXCoreGuideline_RELATIVE_UNKNOWN, 0x19, -1, -1, -1, -1 },
    { "mRelativePercent_", "F", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRelativeBegin_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRelativeEnd_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mAnchor_", "LADXConstraintAnchor;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOrientation_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinimumPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "resolved_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copy", "LADXConstraintWidget;LJavaUtilHashMap;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidget;Ljava/util/HashMap<Landroidx/constraintlayout/core/widgets/ConstraintWidget;Landroidx/constraintlayout/core/widgets/ConstraintWidget;>;)V", "setOrientation", "I", "setMinimumPosition", "getAnchor", "LADXConstraintAnchor_Type;", "setGuidePercent", "F", "setGuideBegin", "setGuideEnd", "setFinalValue", "addToSolver", "LADXLinearSystem;Z", "updateFromSolver" };
  static const J2ObjcClassInfo _ADXCoreGuideline = { "CoreGuideline", "androidx.constraintlayout.core.widgets", ptrTable, methods, fields, 7, 0x1, 27, 13, -1, -1, -1, -1, -1 };
  return &_ADXCoreGuideline;
}

@end

void ADXCoreGuideline_init(ADXCoreGuideline *self) {
  ADXConstraintWidget_init(self);
  self->mRelativePercent_ = -1;
  self->mRelativeBegin_ = -1;
  self->mRelativeEnd_ = -1;
  JreStrongAssign(&self->mAnchor_, self->mTop_);
  self->mOrientation_ = ADXCoreGuideline_HORIZONTAL;
  self->mMinimumPosition_ = 0;
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) clear];
  [((JavaUtilArrayList *) nil_chk(self->mAnchors_)) addWithId:self->mAnchor_];
  jint count = ((IOSObjectArray *) nil_chk(self->mListAnchors_))->size_;
  for (jint i = 0; i < count; i++) {
    IOSObjectArray_Set(self->mListAnchors_, i, self->mAnchor_);
  }
}

ADXCoreGuideline *new_ADXCoreGuideline_init() {
  J2OBJC_NEW_IMPL(ADXCoreGuideline, init)
}

ADXCoreGuideline *create_ADXCoreGuideline_init() {
  J2OBJC_CREATE_IMPL(ADXCoreGuideline, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCoreGuideline)
