//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidX-Gridlayout\src\main\java\androidx\gridlayout\widget\GridLayout.java
//

#include "GridLayout.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "Pair.h"
#include "Space.h"
#include "View.h"
#include "ViewCompat.h"
#include "ViewGroup.h"
#include "ViewGroupCompat.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/lang/reflect/Array.h"
#include "java/util/ArrayList.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

@protocol JavaUtilList;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ADXGridLayout ()

- (jint)getDefaultMarginWithADView:(ADView *)c
                       withBoolean:(jboolean)horizontal
                       withBoolean:(jboolean)leading;

- (jint)getDefaultMarginWithADView:(ADView *)c
                       withBoolean:(jboolean)isAtEdge
                       withBoolean:(jboolean)horizontal
                       withBoolean:(jboolean)leading;

- (jint)getDefaultMarginWithADView:(ADView *)c
    withADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)p
                       withBoolean:(jboolean)horizontal
                       withBoolean:(jboolean)leading;

- (jboolean)isLayoutRtlCompat;

- (jint)getMarginWithADView:(ADView *)view
                withBoolean:(jboolean)horizontal
                withBoolean:(jboolean)leading;

- (jint)getTotalMarginWithADView:(ADView *)child
                     withBoolean:(jboolean)horizontal;

+ (jboolean)fitsWithIntArray:(IOSIntArray *)a
                     withInt:(jint)value
                     withInt:(jint)start
                     withInt:(jint)end;

+ (void)procrusteanFillWithIntArray:(IOSIntArray *)a
                            withInt:(jint)start
                            withInt:(jint)end
                            withInt:(jint)value;

+ (void)setCellGroupWithADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)lp
                                           withInt:(jint)row
                                           withInt:(jint)rowSpan
                                           withInt:(jint)col
                                           withInt:(jint)colSpan;

+ (jint)clipWithADXGridLayout_Interval:(ADXGridLayout_Interval *)minorRange
                           withBoolean:(jboolean)minorWasDefined
                               withInt:(jint)count;

- (void)validateLayoutParams;

- (void)invalidateStructure;

- (void)invalidateValues;

- (void)checkLayoutParamsWithADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)lp
                                            withBoolean:(jboolean)horizontal;

- (jint)computeLayoutParamsHashCode;

- (void)consistencyCheck;

- (void)measureChildWithMargins2WithADView:(ADView *)child
                                   withInt:(jint)parentWidthSpec
                                   withInt:(jint)parentHeightSpec
                                   withInt:(jint)childWidth
                                   withInt:(jint)childHeight;

- (void)measureChildrenWithMarginsWithInt:(jint)widthSpec
                                  withInt:(jint)heightSpec
                              withBoolean:(jboolean)firstPass;

- (jint)getMeasurementWithADView:(ADView *)c
                     withBoolean:(jboolean)horizontal;

+ (ADXGridLayout_Alignment *)createSwitchingAlignmentWithADXGridLayout_Alignment:(ADXGridLayout_Alignment *)ltr
                                                     withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)rtl;

@end

inline jint ADXGridLayout_get_DEFAULT_ORIENTATION(void);
#define ADXGridLayout_DEFAULT_ORIENTATION 0
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout, DEFAULT_ORIENTATION, jint)

inline jint ADXGridLayout_get_DEFAULT_COUNT(void);
#define ADXGridLayout_DEFAULT_COUNT ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout, DEFAULT_COUNT, jint)

inline jboolean ADXGridLayout_get_DEFAULT_USE_DEFAULT_MARGINS(void);
#define ADXGridLayout_DEFAULT_USE_DEFAULT_MARGINS false
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout, DEFAULT_USE_DEFAULT_MARGINS, jboolean)

inline jint ADXGridLayout_get_DEFAULT_ALIGNMENT_MODE(void);
#define ADXGridLayout_DEFAULT_ALIGNMENT_MODE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout, DEFAULT_ALIGNMENT_MODE, jint)

inline ADXGridLayout_Alignment *ADXGridLayout_get_LEADING(void);
static ADXGridLayout_Alignment *ADXGridLayout_LEADING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXGridLayout, LEADING, ADXGridLayout_Alignment *)

inline ADXGridLayout_Alignment *ADXGridLayout_get_TRAILING(void);
static ADXGridLayout_Alignment *ADXGridLayout_TRAILING;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXGridLayout, TRAILING, ADXGridLayout_Alignment *)

__attribute__((unused)) static jint ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_(ADXGridLayout *self, ADView *c, jboolean horizontal, jboolean leading);

__attribute__((unused)) static jint ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_withBoolean_(ADXGridLayout *self, ADView *c, jboolean isAtEdge, jboolean horizontal, jboolean leading);

__attribute__((unused)) static jint ADXGridLayout_getDefaultMarginWithADView_withADXGridLayout_LayoutParams_withBoolean_withBoolean_(ADXGridLayout *self, ADView *c, ADXGridLayout_LayoutParams *p, jboolean horizontal, jboolean leading);

__attribute__((unused)) static jboolean ADXGridLayout_isLayoutRtlCompat(ADXGridLayout *self);

__attribute__((unused)) static jint ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(ADXGridLayout *self, ADView *view, jboolean horizontal, jboolean leading);

__attribute__((unused)) static jint ADXGridLayout_getTotalMarginWithADView_withBoolean_(ADXGridLayout *self, ADView *child, jboolean horizontal);

__attribute__((unused)) static jboolean ADXGridLayout_fitsWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint value, jint start, jint end);

__attribute__((unused)) static void ADXGridLayout_procrusteanFillWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint start, jint end, jint value);

__attribute__((unused)) static void ADXGridLayout_setCellGroupWithADXGridLayout_LayoutParams_withInt_withInt_withInt_withInt_(ADXGridLayout_LayoutParams *lp, jint row, jint rowSpan, jint col, jint colSpan);

__attribute__((unused)) static jint ADXGridLayout_clipWithADXGridLayout_Interval_withBoolean_withInt_(ADXGridLayout_Interval *minorRange, jboolean minorWasDefined, jint count);

__attribute__((unused)) static void ADXGridLayout_validateLayoutParams(ADXGridLayout *self);

__attribute__((unused)) static void ADXGridLayout_invalidateStructure(ADXGridLayout *self);

__attribute__((unused)) static void ADXGridLayout_invalidateValues(ADXGridLayout *self);

__attribute__((unused)) static ADXGridLayout_LayoutParams *ADXGridLayout_getLayoutParamsWithADView_(ADXGridLayout *self, ADView *c);

__attribute__((unused)) static void ADXGridLayout_checkLayoutParamsWithADXGridLayout_LayoutParams_withBoolean_(ADXGridLayout *self, ADXGridLayout_LayoutParams *lp, jboolean horizontal);

__attribute__((unused)) static jint ADXGridLayout_computeLayoutParamsHashCode(ADXGridLayout *self);

__attribute__((unused)) static void ADXGridLayout_consistencyCheck(ADXGridLayout *self);

__attribute__((unused)) static void ADXGridLayout_measureChildWithMargins2WithADView_withInt_withInt_withInt_withInt_(ADXGridLayout *self, ADView *child, jint parentWidthSpec, jint parentHeightSpec, jint childWidth, jint childHeight);

__attribute__((unused)) static void ADXGridLayout_measureChildrenWithMarginsWithInt_withInt_withBoolean_(ADXGridLayout *self, jint widthSpec, jint heightSpec, jboolean firstPass);

__attribute__((unused)) static jint ADXGridLayout_getMeasurementWithADView_withBoolean_(ADXGridLayout *self, ADView *c, jboolean horizontal);

__attribute__((unused)) static jint ADXGridLayout_getMeasurementIncludingMarginWithADView_withBoolean_(ADXGridLayout *self, ADView *c, jboolean horizontal);

__attribute__((unused)) static ADXGridLayout_Alignment *ADXGridLayout_createSwitchingAlignmentWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_Alignment *ltr, ADXGridLayout_Alignment *rtl);

@interface ADXGridLayout_Axis () {
 @public
  __unsafe_unretained ADXGridLayout *this$0_;
  jint maxIndex_;
  ADXGridLayout_MutableInt *parentMin_;
  ADXGridLayout_MutableInt *parentMax_;
}

- (jint)calculateMaxIndex;

- (jint)getMaxIndex;

- (ADXGridLayout_PackedMap *)createGroupBounds;

- (void)computeGroupBounds;

- (ADXGridLayout_PackedMap *)createLinksWithBoolean:(jboolean)min;

- (void)computeLinksWithADXGridLayout_PackedMap:(ADXGridLayout_PackedMap *)links
                                    withBoolean:(jboolean)min;

- (ADXGridLayout_PackedMap *)getForwardLinks;

- (ADXGridLayout_PackedMap *)getBackwardLinks;

- (void)includeWithJavaUtilList:(id<JavaUtilList>)arcs
     withADXGridLayout_Interval:(ADXGridLayout_Interval *)key
   withADXGridLayout_MutableInt:(ADXGridLayout_MutableInt *)size
                    withBoolean:(jboolean)ignoreIfAlreadyPresent;

- (void)includeWithJavaUtilList:(id<JavaUtilList>)arcs
     withADXGridLayout_Interval:(ADXGridLayout_Interval *)key
   withADXGridLayout_MutableInt:(ADXGridLayout_MutableInt *)size;

- (IOSObjectArray *)topologicalSortWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs;

- (IOSObjectArray *)topologicalSortWithJavaUtilList:(id<JavaUtilList>)arcs;

- (void)addComponentSizesWithJavaUtilList:(id<JavaUtilList>)result
              withADXGridLayout_PackedMap:(ADXGridLayout_PackedMap *)links;

- (IOSObjectArray *)createArcs;

- (void)computeArcs;

- (jboolean)relaxWithIntArray:(IOSIntArray *)locations
        withADXGridLayout_Arc:(ADXGridLayout_Arc *)entry_;

- (void)init__WithIntArray:(IOSIntArray *)locations OBJC_METHOD_FAMILY_NONE;

- (NSString *)arcsToStringWithJavaUtilList:(id<JavaUtilList>)arcs;

- (void)logErrorWithNSString:(NSString *)axisName
  withADXGridLayout_ArcArray:(IOSObjectArray *)arcs
            withBooleanArray:(IOSBooleanArray *)culprits0;

- (jboolean)solveWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs
                               withIntArray:(IOSIntArray *)locations;

- (jboolean)solveWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs
                               withIntArray:(IOSIntArray *)locations
                                withBoolean:(jboolean)modifyOnError;

- (void)computeMarginsWithBoolean:(jboolean)leading;

- (jboolean)solveWithIntArray:(IOSIntArray *)a;

- (jboolean)computeHasWeights;

- (jboolean)hasWeights;

- (void)shareOutDeltaWithInt:(jint)totalDelta
                   withFloat:(jfloat)totalWeight;

- (void)solveAndDistributeSpaceWithIntArray:(IOSIntArray *)a;

- (jfloat)calculateTotalWeight;

- (void)computeLocationsWithIntArray:(IOSIntArray *)a;

- (jint)sizeWithIntArray:(IOSIntArray *)locations;

- (void)setParentConstraintsWithInt:(jint)min
                            withInt:(jint)max;

- (jint)getMeasureWithInt:(jint)min
                  withInt:(jint)max;

@end

J2OBJC_FIELD_SETTER(ADXGridLayout_Axis, parentMin_, ADXGridLayout_MutableInt *)
J2OBJC_FIELD_SETTER(ADXGridLayout_Axis, parentMax_, ADXGridLayout_MutableInt *)

__attribute__((unused)) static jint ADXGridLayout_Axis_calculateMaxIndex(ADXGridLayout_Axis *self);

__attribute__((unused)) static jint ADXGridLayout_Axis_getMaxIndex(ADXGridLayout_Axis *self);

__attribute__((unused)) static ADXGridLayout_PackedMap *ADXGridLayout_Axis_createGroupBounds(ADXGridLayout_Axis *self);

__attribute__((unused)) static void ADXGridLayout_Axis_computeGroupBounds(ADXGridLayout_Axis *self);

__attribute__((unused)) static ADXGridLayout_PackedMap *ADXGridLayout_Axis_createLinksWithBoolean_(ADXGridLayout_Axis *self, jboolean min);

__attribute__((unused)) static void ADXGridLayout_Axis_computeLinksWithADXGridLayout_PackedMap_withBoolean_(ADXGridLayout_Axis *self, ADXGridLayout_PackedMap *links, jboolean min);

__attribute__((unused)) static ADXGridLayout_PackedMap *ADXGridLayout_Axis_getForwardLinks(ADXGridLayout_Axis *self);

__attribute__((unused)) static ADXGridLayout_PackedMap *ADXGridLayout_Axis_getBackwardLinks(ADXGridLayout_Axis *self);

__attribute__((unused)) static void ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs, ADXGridLayout_Interval *key, ADXGridLayout_MutableInt *size, jboolean ignoreIfAlreadyPresent);

__attribute__((unused)) static void ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs, ADXGridLayout_Interval *key, ADXGridLayout_MutableInt *size);

__attribute__((unused)) static IOSObjectArray *ADXGridLayout_Axis_topologicalSortWithADXGridLayout_ArcArray_(ADXGridLayout_Axis *self, IOSObjectArray *arcs);

__attribute__((unused)) static IOSObjectArray *ADXGridLayout_Axis_topologicalSortWithJavaUtilList_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs);

__attribute__((unused)) static void ADXGridLayout_Axis_addComponentSizesWithJavaUtilList_withADXGridLayout_PackedMap_(ADXGridLayout_Axis *self, id<JavaUtilList> result, ADXGridLayout_PackedMap *links);

__attribute__((unused)) static IOSObjectArray *ADXGridLayout_Axis_createArcs(ADXGridLayout_Axis *self);

__attribute__((unused)) static void ADXGridLayout_Axis_computeArcs(ADXGridLayout_Axis *self);

__attribute__((unused)) static jboolean ADXGridLayout_Axis_relaxWithIntArray_withADXGridLayout_Arc_(ADXGridLayout_Axis *self, IOSIntArray *locations, ADXGridLayout_Arc *entry_);

__attribute__((unused)) static void ADXGridLayout_Axis_init__WithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *locations);

__attribute__((unused)) static NSString *ADXGridLayout_Axis_arcsToStringWithJavaUtilList_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs);

__attribute__((unused)) static void ADXGridLayout_Axis_logErrorWithNSString_withADXGridLayout_ArcArray_withBooleanArray_(ADXGridLayout_Axis *self, NSString *axisName, IOSObjectArray *arcs, IOSBooleanArray *culprits0);

__attribute__((unused)) static jboolean ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_(ADXGridLayout_Axis *self, IOSObjectArray *arcs, IOSIntArray *locations);

__attribute__((unused)) static jboolean ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_withBoolean_(ADXGridLayout_Axis *self, IOSObjectArray *arcs, IOSIntArray *locations, jboolean modifyOnError);

__attribute__((unused)) static void ADXGridLayout_Axis_computeMarginsWithBoolean_(ADXGridLayout_Axis *self, jboolean leading);

__attribute__((unused)) static jboolean ADXGridLayout_Axis_solveWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *a);

__attribute__((unused)) static jboolean ADXGridLayout_Axis_computeHasWeights(ADXGridLayout_Axis *self);

__attribute__((unused)) static jboolean ADXGridLayout_Axis_hasWeights(ADXGridLayout_Axis *self);

__attribute__((unused)) static void ADXGridLayout_Axis_shareOutDeltaWithInt_withFloat_(ADXGridLayout_Axis *self, jint totalDelta, jfloat totalWeight);

__attribute__((unused)) static void ADXGridLayout_Axis_solveAndDistributeSpaceWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *a);

__attribute__((unused)) static jfloat ADXGridLayout_Axis_calculateTotalWeight(ADXGridLayout_Axis *self);

__attribute__((unused)) static void ADXGridLayout_Axis_computeLocationsWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *a);

__attribute__((unused)) static jint ADXGridLayout_Axis_sizeWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *locations);

__attribute__((unused)) static void ADXGridLayout_Axis_setParentConstraintsWithInt_withInt_(ADXGridLayout_Axis *self, jint min, jint max);

__attribute__((unused)) static jint ADXGridLayout_Axis_getMeasureWithInt_withInt_(ADXGridLayout_Axis *self, jint min, jint max);

@interface ADXGridLayout_Axis_1 : NSObject {
 @public
  IOSObjectArray *result_;
  jint cursor_;
  IOSObjectArray *arcsByVertex_;
  IOSIntArray *visited_;
}

- (instancetype)initWithADXGridLayout_Axis:(ADXGridLayout_Axis *)outer$
                withADXGridLayout_ArcArray:(IOSObjectArray *)capture$0;

- (void)walkWithInt:(jint)loc;

- (IOSObjectArray *)sort;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_Axis_1)

J2OBJC_FIELD_SETTER(ADXGridLayout_Axis_1, result_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXGridLayout_Axis_1, arcsByVertex_, IOSObjectArray *)
J2OBJC_FIELD_SETTER(ADXGridLayout_Axis_1, visited_, IOSIntArray *)

__attribute__((unused)) static void ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(ADXGridLayout_Axis_1 *self, ADXGridLayout_Axis *outer$, IOSObjectArray *capture$0);

__attribute__((unused)) static ADXGridLayout_Axis_1 *new_ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(ADXGridLayout_Axis *outer$, IOSObjectArray *capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_Axis_1 *create_ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(ADXGridLayout_Axis *outer$, IOSObjectArray *capture$0);

@interface ADXGridLayout_LayoutParams ()

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom
     withADXGridLayout_Spec:(ADXGridLayout_Spec *)rowSpec
     withADXGridLayout_Spec:(ADXGridLayout_Spec *)columnSpec;

@end

inline jint ADXGridLayout_LayoutParams_get_DEFAULT_WIDTH(void);
#define ADXGridLayout_LayoutParams_DEFAULT_WIDTH -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout_LayoutParams, DEFAULT_WIDTH, jint)

inline jint ADXGridLayout_LayoutParams_get_DEFAULT_HEIGHT(void);
#define ADXGridLayout_LayoutParams_DEFAULT_HEIGHT -2
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout_LayoutParams, DEFAULT_HEIGHT, jint)

inline jint ADXGridLayout_LayoutParams_get_DEFAULT_MARGIN(void);
#define ADXGridLayout_LayoutParams_DEFAULT_MARGIN ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout_LayoutParams, DEFAULT_MARGIN, jint)

inline jint ADXGridLayout_LayoutParams_get_DEFAULT_ROW(void);
#define ADXGridLayout_LayoutParams_DEFAULT_ROW ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout_LayoutParams, DEFAULT_ROW, jint)

inline jint ADXGridLayout_LayoutParams_get_DEFAULT_COLUMN(void);
#define ADXGridLayout_LayoutParams_DEFAULT_COLUMN ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADXGridLayout_LayoutParams, DEFAULT_COLUMN, jint)

inline ADXGridLayout_Interval *ADXGridLayout_LayoutParams_get_DEFAULT_SPAN(void);
static ADXGridLayout_Interval *ADXGridLayout_LayoutParams_DEFAULT_SPAN;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXGridLayout_LayoutParams, DEFAULT_SPAN, ADXGridLayout_Interval *)

inline jint ADXGridLayout_LayoutParams_get_DEFAULT_SPAN_SIZE(void);
static jint ADXGridLayout_LayoutParams_DEFAULT_SPAN_SIZE;
J2OBJC_STATIC_FIELD_PRIMITIVE_FINAL(ADXGridLayout_LayoutParams, DEFAULT_SPAN_SIZE, jint)

__attribute__((unused)) static void ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(ADXGridLayout_LayoutParams *self, jint width, jint height, jint left, jint top, jint right, jint bottom, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec);

__attribute__((unused)) static ADXGridLayout_LayoutParams *new_ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(jint width, jint height, jint left, jint top, jint right, jint bottom, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_LayoutParams *create_ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(jint width, jint height, jint left, jint top, jint right, jint bottom, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec);

__attribute__((unused)) static void ADXGridLayout_LayoutParams_setRowSpecSpanWithADXGridLayout_Interval_(ADXGridLayout_LayoutParams *self, ADXGridLayout_Interval *span);

__attribute__((unused)) static void ADXGridLayout_LayoutParams_setColumnSpecSpanWithADXGridLayout_Interval_(ADXGridLayout_LayoutParams *self, ADXGridLayout_Interval *span);

@interface ADXGridLayout_Assoc () {
 @public
  IOSClass *keyType_;
  IOSClass *valueType_;
}

- (instancetype)initWithIOSClass:(IOSClass *)keyType
                    withIOSClass:(IOSClass *)valueType;

@end

J2OBJC_FIELD_SETTER(ADXGridLayout_Assoc, keyType_, IOSClass *)
J2OBJC_FIELD_SETTER(ADXGridLayout_Assoc, valueType_, IOSClass *)

__attribute__((unused)) static void ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(ADXGridLayout_Assoc *self, IOSClass *keyType, IOSClass *valueType);

__attribute__((unused)) static ADXGridLayout_Assoc *new_ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(IOSClass *keyType, IOSClass *valueType) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_Assoc *create_ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(IOSClass *keyType, IOSClass *valueType);

@interface ADXGridLayout_PackedMap ()

+ (IOSIntArray *)createIndexWithNSObjectArray:(IOSObjectArray *)keys;

+ (IOSObjectArray *)compactWithNSObjectArray:(IOSObjectArray *)a
                                withIntArray:(IOSIntArray *)index;

@end

__attribute__((unused)) static IOSIntArray *ADXGridLayout_PackedMap_createIndexWithNSObjectArray_(IOSObjectArray *keys);

__attribute__((unused)) static IOSObjectArray *ADXGridLayout_PackedMap_compactWithNSObjectArray_withIntArray_(IOSObjectArray *a, IOSIntArray *index);

__attribute__((unused)) static void ADXGridLayout_Bounds_reset(ADXGridLayout_Bounds *self);

__attribute__((unused)) static void ADXGridLayout_Bounds_includeWithInt_withInt_(ADXGridLayout_Bounds *self, jint before, jint after);

__attribute__((unused)) static jint ADXGridLayout_Bounds_sizeWithBoolean_(ADXGridLayout_Bounds *self, jboolean min);

__attribute__((unused)) static jint ADXGridLayout_Bounds_getOffsetWithADXGridLayout_withADView_withADXGridLayout_Alignment_withInt_withBoolean_(ADXGridLayout_Bounds *self, ADXGridLayout *gl, ADView *c, ADXGridLayout_Alignment *a, jint size, jboolean horizontal);

__attribute__((unused)) static void ADXGridLayout_Bounds_includeWithADXGridLayout_withADView_withADXGridLayout_Spec_withADXGridLayout_Axis_withInt_(ADXGridLayout_Bounds *self, ADXGridLayout *gl, ADView *c, ADXGridLayout_Spec *spec, ADXGridLayout_Axis *axis, jint size);

@interface ADXGridLayout_Spec ()

- (instancetype)initWithBoolean:(jboolean)startDefined
     withADXGridLayout_Interval:(ADXGridLayout_Interval *)span
    withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment
                      withFloat:(jfloat)weight;

@end

__attribute__((unused)) static void ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(ADXGridLayout_Spec *self, jboolean startDefined, ADXGridLayout_Interval *span, ADXGridLayout_Alignment *alignment, jfloat weight);

__attribute__((unused)) static ADXGridLayout_Spec *new_ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(jboolean startDefined, ADXGridLayout_Interval *span, ADXGridLayout_Alignment *alignment, jfloat weight) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_Spec *create_ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(jboolean startDefined, ADXGridLayout_Interval *span, ADXGridLayout_Alignment *alignment, jfloat weight);

__attribute__((unused)) static ADXGridLayout_Spec *ADXGridLayout_Spec_copyWriteSpanWithADXGridLayout_Interval_(ADXGridLayout_Spec *self, ADXGridLayout_Interval *span);

__attribute__((unused)) static jint ADXGridLayout_Spec_getFlexibility(ADXGridLayout_Spec *self);

@interface ADXGridLayout_1 : ADXGridLayout_Alignment

- (instancetype)init;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_1)

__attribute__((unused)) static void ADXGridLayout_1_init(ADXGridLayout_1 *self);

__attribute__((unused)) static ADXGridLayout_1 *new_ADXGridLayout_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_1 *create_ADXGridLayout_1_init(void);

@interface ADXGridLayout_2 : ADXGridLayout_Alignment

- (instancetype)init;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_2)

__attribute__((unused)) static void ADXGridLayout_2_init(ADXGridLayout_2 *self);

__attribute__((unused)) static ADXGridLayout_2 *new_ADXGridLayout_2_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_2 *create_ADXGridLayout_2_init(void);

@interface ADXGridLayout_3 : ADXGridLayout_Alignment

- (instancetype)init;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_3)

__attribute__((unused)) static void ADXGridLayout_3_init(ADXGridLayout_3 *self);

__attribute__((unused)) static ADXGridLayout_3 *new_ADXGridLayout_3_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_3 *create_ADXGridLayout_3_init(void);

@interface ADXGridLayout_4 : ADXGridLayout_Alignment {
 @public
  ADXGridLayout_Alignment *val$ltr_;
  ADXGridLayout_Alignment *val$rtl_;
}

- (instancetype)initWithADXGridLayout_Alignment:(ADXGridLayout_Alignment *)capture$0
                    withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)capture$1;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_4)

__attribute__((unused)) static void ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_4 *self, ADXGridLayout_Alignment *capture$0, ADXGridLayout_Alignment *capture$1);

__attribute__((unused)) static ADXGridLayout_4 *new_ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_Alignment *capture$0, ADXGridLayout_Alignment *capture$1) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_4 *create_ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_Alignment *capture$0, ADXGridLayout_Alignment *capture$1);

@interface ADXGridLayout_5 : ADXGridLayout_Alignment

- (instancetype)init;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_5)

__attribute__((unused)) static void ADXGridLayout_5_init(ADXGridLayout_5 *self);

__attribute__((unused)) static ADXGridLayout_5 *new_ADXGridLayout_5_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_5 *create_ADXGridLayout_5_init(void);

@interface ADXGridLayout_6 : ADXGridLayout_Alignment

- (instancetype)init;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (ADXGridLayout_Bounds *)getBounds;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_6)

__attribute__((unused)) static void ADXGridLayout_6_init(ADXGridLayout_6 *self);

__attribute__((unused)) static ADXGridLayout_6 *new_ADXGridLayout_6_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_6 *create_ADXGridLayout_6_init(void);

@interface ADXGridLayout_6_1 : ADXGridLayout_Bounds {
 @public
  jint size_;
}

- (instancetype)init;

- (void)reset;

- (void)includeWithInt:(jint)before
               withInt:(jint)after;

- (jint)sizeWithBoolean:(jboolean)min;

- (jint)getOffsetWithADXGridLayout:(ADXGridLayout *)gl
                        withADView:(ADView *)c
       withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)a
                           withInt:(jint)size
                       withBoolean:(jboolean)hrz;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_6_1)

__attribute__((unused)) static void ADXGridLayout_6_1_init(ADXGridLayout_6_1 *self);

__attribute__((unused)) static ADXGridLayout_6_1 *new_ADXGridLayout_6_1_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_6_1 *create_ADXGridLayout_6_1_init(void);

@interface ADXGridLayout_7 : ADXGridLayout_Alignment

- (instancetype)init;

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta;

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode;

- (jint)getSizeInCellWithADView:(ADView *)view
                        withInt:(jint)viewSize
                        withInt:(jint)cellSize;

- (NSString *)getDebugString;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGridLayout_7)

__attribute__((unused)) static void ADXGridLayout_7_init(ADXGridLayout_7 *self);

__attribute__((unused)) static ADXGridLayout_7 *new_ADXGridLayout_7_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXGridLayout_7 *create_ADXGridLayout_7_init(void);

J2OBJC_INITIALIZED_DEFN(ADXGridLayout)

ADXGridLayout_Alignment *ADXGridLayout_UNDEFINED_ALIGNMENT;
ADXGridLayout_Alignment *ADXGridLayout_TOP;
ADXGridLayout_Alignment *ADXGridLayout_BOTTOM;
ADXGridLayout_Alignment *ADXGridLayout_START;
ADXGridLayout_Alignment *ADXGridLayout_END;
ADXGridLayout_Alignment *ADXGridLayout_LEFT;
ADXGridLayout_Alignment *ADXGridLayout_RIGHT;
ADXGridLayout_Alignment *ADXGridLayout_CENTER;
ADXGridLayout_Alignment *ADXGridLayout_BASELINE;
ADXGridLayout_Alignment *ADXGridLayout_FILL;

@implementation ADXGridLayout

- (jint)getOrientation {
  return mOrientation_;
}

- (void)setOrientationWithInt:(jint)orientation {
  if (self->mOrientation_ != orientation) {
    self->mOrientation_ = orientation;
    ADXGridLayout_invalidateStructure(self);
    [self requestLayout];
  }
}

- (jint)getRowCount {
  return [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) getCount];
}

- (void)setRowCountWithInt:(jint)rowCount {
  [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) setCountWithInt:rowCount];
  ADXGridLayout_invalidateStructure(self);
  [self requestLayout];
}

- (jint)getColumnCount {
  return [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) getCount];
}

- (void)setColumnCountWithInt:(jint)columnCount {
  [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) setCountWithInt:columnCount];
  ADXGridLayout_invalidateStructure(self);
  [self requestLayout];
}

- (jboolean)getUseDefaultMargins {
  return mUseDefaultMargins_;
}

- (void)setUseDefaultMarginsWithBoolean:(jboolean)useDefaultMargins {
  self->mUseDefaultMargins_ = useDefaultMargins;
  [self requestLayout];
}

- (jint)getAlignmentMode {
  return mAlignmentMode_;
}

- (void)setAlignmentModeWithInt:(jint)alignmentMode {
  self->mAlignmentMode_ = alignmentMode;
  [self requestLayout];
}

- (jboolean)isRowOrderPreserved {
  return [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) isOrderPreserved];
}

- (void)setRowOrderPreservedWithBoolean:(jboolean)rowOrderPreserved {
  [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) setOrderPreservedWithBoolean:rowOrderPreserved];
  ADXGridLayout_invalidateStructure(self);
  [self requestLayout];
}

- (jboolean)isColumnOrderPreserved {
  return [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) isOrderPreserved];
}

- (void)setColumnOrderPreservedWithBoolean:(jboolean)columnOrderPreserved {
  [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) setOrderPreservedWithBoolean:columnOrderPreserved];
  ADXGridLayout_invalidateStructure(self);
  [self requestLayout];
}

+ (jint)max2WithIntArray:(IOSIntArray *)a
                 withInt:(jint)valueIfEmpty {
  return ADXGridLayout_max2WithIntArray_withInt_(a, valueIfEmpty);
}

+ (IOSObjectArray *)appendWithNSObjectArray:(IOSObjectArray *)a
                          withNSObjectArray:(IOSObjectArray *)b {
  return ADXGridLayout_appendWithNSObjectArray_withNSObjectArray_(a, b);
}

- (jint)getDefaultMarginWithADView:(ADView *)c
                       withBoolean:(jboolean)horizontal
                       withBoolean:(jboolean)leading {
  return ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_(self, c, horizontal, leading);
}

- (jint)getDefaultMarginWithADView:(ADView *)c
                       withBoolean:(jboolean)isAtEdge
                       withBoolean:(jboolean)horizontal
                       withBoolean:(jboolean)leading {
  return ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_withBoolean_(self, c, isAtEdge, horizontal, leading);
}

- (jint)getDefaultMarginWithADView:(ADView *)c
    withADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)p
                       withBoolean:(jboolean)horizontal
                       withBoolean:(jboolean)leading {
  return ADXGridLayout_getDefaultMarginWithADView_withADXGridLayout_LayoutParams_withBoolean_withBoolean_(self, c, p, horizontal, leading);
}

- (jint)getMargin1WithADView:(ADView *)view
                 withBoolean:(jboolean)horizontal
                 withBoolean:(jboolean)leading {
  ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self, view);
  jint margin = horizontal ? (leading ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->leftMargin_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rightMargin_) : (leading ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->topMargin_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->bottomMargin_);
  return margin == ADXGridLayout_UNDEFINED ? ADXGridLayout_getDefaultMarginWithADView_withADXGridLayout_LayoutParams_withBoolean_withBoolean_(self, view, lp, horizontal, leading) : margin;
}

- (jboolean)isLayoutRtlCompat {
  return ADXGridLayout_isLayoutRtlCompat(self);
}

- (jint)getMarginWithADView:(ADView *)view
                withBoolean:(jboolean)horizontal
                withBoolean:(jboolean)leading {
  return ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, view, horizontal, leading);
}

- (jint)getTotalMarginWithADView:(ADView *)child
                     withBoolean:(jboolean)horizontal {
  return ADXGridLayout_getTotalMarginWithADView_withBoolean_(self, child, horizontal);
}

+ (jboolean)fitsWithIntArray:(IOSIntArray *)a
                     withInt:(jint)value
                     withInt:(jint)start
                     withInt:(jint)end {
  return ADXGridLayout_fitsWithIntArray_withInt_withInt_withInt_(a, value, start, end);
}

+ (void)procrusteanFillWithIntArray:(IOSIntArray *)a
                            withInt:(jint)start
                            withInt:(jint)end
                            withInt:(jint)value {
  ADXGridLayout_procrusteanFillWithIntArray_withInt_withInt_withInt_(a, start, end, value);
}

+ (void)setCellGroupWithADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)lp
                                           withInt:(jint)row
                                           withInt:(jint)rowSpan
                                           withInt:(jint)col
                                           withInt:(jint)colSpan {
  ADXGridLayout_setCellGroupWithADXGridLayout_LayoutParams_withInt_withInt_withInt_withInt_(lp, row, rowSpan, col, colSpan);
}

+ (jint)clipWithADXGridLayout_Interval:(ADXGridLayout_Interval *)minorRange
                           withBoolean:(jboolean)minorWasDefined
                               withInt:(jint)count {
  return ADXGridLayout_clipWithADXGridLayout_Interval_withBoolean_withInt_(minorRange, minorWasDefined, count);
}

- (void)validateLayoutParams {
  ADXGridLayout_validateLayoutParams(self);
}

- (void)invalidateStructure {
  ADXGridLayout_invalidateStructure(self);
}

- (void)invalidateValues {
  ADXGridLayout_invalidateValues(self);
}

- (ADXGridLayout_LayoutParams *)getLayoutParamsWithADView:(ADView *)c {
  return ADXGridLayout_getLayoutParamsWithADView_(self, c);
}

+ (void)handleInvalidParamsWithNSString:(NSString *)msg {
  ADXGridLayout_handleInvalidParamsWithNSString_(msg);
}

- (void)checkLayoutParamsWithADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)lp
                                            withBoolean:(jboolean)horizontal {
  ADXGridLayout_checkLayoutParamsWithADXGridLayout_LayoutParams_withBoolean_(self, lp, horizontal);
}

- (jboolean)checkLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)p {
  if (!([p isKindOfClass:[ADXGridLayout_LayoutParams class]])) {
    return false;
  }
  ADXGridLayout_LayoutParams *lp = (ADXGridLayout_LayoutParams *) cast_chk(p, [ADXGridLayout_LayoutParams class]);
  ADXGridLayout_checkLayoutParamsWithADXGridLayout_LayoutParams_withBoolean_(self, lp, true);
  ADXGridLayout_checkLayoutParamsWithADXGridLayout_LayoutParams_withBoolean_(self, lp, false);
  return true;
}

- (ADXGridLayout_LayoutParams *)generateDefaultLayoutParams {
  return create_ADXGridLayout_LayoutParams_init();
}

- (ADXGridLayout_LayoutParams *)generateLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)lp {
  if ([lp isKindOfClass:[ADXGridLayout_LayoutParams class]]) {
    return create_ADXGridLayout_LayoutParams_initWithADXGridLayout_LayoutParams_((ADXGridLayout_LayoutParams *) lp);
  }
  else if ([lp isKindOfClass:[ADViewGroup_MarginLayoutParams class]]) {
    return create_ADXGridLayout_LayoutParams_initWithADViewGroup_LayoutParams_((ADViewGroup_MarginLayoutParams *) lp);
  }
  else {
    return create_ADXGridLayout_LayoutParams_initWithADViewGroup_LayoutParams_(lp);
  }
}

- (jint)computeLayoutParamsHashCode {
  return ADXGridLayout_computeLayoutParamsHashCode(self);
}

- (void)consistencyCheck {
  ADXGridLayout_consistencyCheck(self);
}

- (void)measureChildWithMargins2WithADView:(ADView *)child
                                   withInt:(jint)parentWidthSpec
                                   withInt:(jint)parentHeightSpec
                                   withInt:(jint)childWidth
                                   withInt:(jint)childHeight {
  ADXGridLayout_measureChildWithMargins2WithADView_withInt_withInt_withInt_withInt_(self, child, parentWidthSpec, parentHeightSpec, childWidth, childHeight);
}

- (void)measureChildrenWithMarginsWithInt:(jint)widthSpec
                                  withInt:(jint)heightSpec
                              withBoolean:(jboolean)firstPass {
  ADXGridLayout_measureChildrenWithMarginsWithInt_withInt_withBoolean_(self, widthSpec, heightSpec, firstPass);
}

+ (jint)adjustWithInt:(jint)measureSpec
              withInt:(jint)delta {
  return ADXGridLayout_adjustWithInt_withInt_(measureSpec, delta);
}

- (void)onMeasureWithInt:(jint)widthSpec
                 withInt:(jint)heightSpec {
  ADXGridLayout_consistencyCheck(self);
  ADXGridLayout_invalidateValues(self);
  jint hPadding = [self getPaddingLeft] + [self getPaddingRight];
  jint vPadding = [self getPaddingTop] + [self getPaddingBottom];
  jint widthSpecSansPadding = ADXGridLayout_adjustWithInt_withInt_(widthSpec, -hPadding);
  jint heightSpecSansPadding = ADXGridLayout_adjustWithInt_withInt_(heightSpec, -vPadding);
  ADXGridLayout_measureChildrenWithMarginsWithInt_withInt_withBoolean_(self, widthSpecSansPadding, heightSpecSansPadding, true);
  jint widthSansPadding;
  jint heightSansPadding;
  if (mOrientation_ == ADXGridLayout_HORIZONTAL) {
    widthSansPadding = [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) getMeasureWithInt:widthSpecSansPadding];
    ADXGridLayout_measureChildrenWithMarginsWithInt_withInt_withBoolean_(self, widthSpecSansPadding, heightSpecSansPadding, false);
    heightSansPadding = [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) getMeasureWithInt:heightSpecSansPadding];
  }
  else {
    heightSansPadding = [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) getMeasureWithInt:heightSpecSansPadding];
    ADXGridLayout_measureChildrenWithMarginsWithInt_withInt_withBoolean_(self, widthSpecSansPadding, heightSpecSansPadding, false);
    widthSansPadding = [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) getMeasureWithInt:widthSpecSansPadding];
  }
  jint measuredWidth = JavaLangMath_maxWithInt_withInt_(widthSansPadding + hPadding, [self getSuggestedMinimumWidth]);
  jint measuredHeight = JavaLangMath_maxWithInt_withInt_(heightSansPadding + vPadding, [self getSuggestedMinimumHeight]);
  [self setMeasuredDimensionWithInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(measuredWidth, widthSpec, 0) withInt:ADView_resolveSizeAndStateWithInt_withInt_withInt_(measuredHeight, heightSpec, 0)];
}

- (jint)getMeasurementWithADView:(ADView *)c
                     withBoolean:(jboolean)horizontal {
  return ADXGridLayout_getMeasurementWithADView_withBoolean_(self, c, horizontal);
}

- (jint)getMeasurementIncludingMarginWithADView:(ADView *)c
                                    withBoolean:(jboolean)horizontal {
  return ADXGridLayout_getMeasurementIncludingMarginWithADView_withBoolean_(self, c, horizontal);
}

- (void)requestLayout {
  [super requestLayout];
  ADXGridLayout_invalidateStructure(self);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  ADXGridLayout_consistencyCheck(self);
  jint targetWidth = right - left;
  jint targetHeight = bottom - top;
  jint paddingLeft = [self getPaddingLeft];
  jint paddingTop = [self getPaddingTop];
  jint paddingRight = [self getPaddingRight];
  jint paddingBottom = [self getPaddingBottom];
  [((ADXGridLayout_Axis *) nil_chk(mHorizontalAxis_)) layoutWithInt:targetWidth - paddingLeft - paddingRight];
  [((ADXGridLayout_Axis *) nil_chk(mVerticalAxis_)) layoutWithInt:targetHeight - paddingTop - paddingBottom];
  IOSIntArray *hLocations = [mHorizontalAxis_ getLocations];
  IOSIntArray *vLocations = [mVerticalAxis_ getLocations];
  for (jint i = 0, N = [self getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) continue;
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self, c);
    ADXGridLayout_Spec *columnSpec = JreRetainedLocalValue(((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_);
    ADXGridLayout_Spec *rowSpec = JreRetainedLocalValue(lp->rowSpec_);
    ADXGridLayout_Interval *colSpan = JreRetainedLocalValue(((ADXGridLayout_Spec *) nil_chk(columnSpec))->span_);
    ADXGridLayout_Interval *rowSpan = JreRetainedLocalValue(((ADXGridLayout_Spec *) nil_chk(rowSpec))->span_);
    jint x1 = IOSIntArray_Get(nil_chk(hLocations), ((ADXGridLayout_Interval *) nil_chk(colSpan))->min_);
    jint y1 = IOSIntArray_Get(nil_chk(vLocations), ((ADXGridLayout_Interval *) nil_chk(rowSpan))->min_);
    jint x2 = IOSIntArray_Get(hLocations, colSpan->max_);
    jint y2 = IOSIntArray_Get(vLocations, rowSpan->max_);
    jint cellWidth = x2 - x1;
    jint cellHeight = y2 - y1;
    jint pWidth = ADXGridLayout_getMeasurementWithADView_withBoolean_(self, c, true);
    jint pHeight = ADXGridLayout_getMeasurementWithADView_withBoolean_(self, c, false);
    ADXGridLayout_Alignment *hAlign = JreRetainedLocalValue([columnSpec getAbsoluteAlignmentWithBoolean:true]);
    ADXGridLayout_Alignment *vAlign = JreRetainedLocalValue([rowSpec getAbsoluteAlignmentWithBoolean:false]);
    ADXGridLayout_Bounds *boundsX = JreRetainedLocalValue([((ADXGridLayout_PackedMap *) nil_chk([mHorizontalAxis_ getGroupBounds])) getValueWithInt:i]);
    ADXGridLayout_Bounds *boundsY = JreRetainedLocalValue([((ADXGridLayout_PackedMap *) nil_chk([mVerticalAxis_ getGroupBounds])) getValueWithInt:i]);
    jint gravityOffsetX = [((ADXGridLayout_Alignment *) nil_chk(hAlign)) getGravityOffsetWithADView:c withInt:cellWidth - [((ADXGridLayout_Bounds *) nil_chk(boundsX)) sizeWithBoolean:true]];
    jint gravityOffsetY = [((ADXGridLayout_Alignment *) nil_chk(vAlign)) getGravityOffsetWithADView:c withInt:cellHeight - [((ADXGridLayout_Bounds *) nil_chk(boundsY)) sizeWithBoolean:true]];
    jint leftMargin = ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, c, true, true);
    jint topMargin = ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, c, false, true);
    jint rightMargin = ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, c, true, false);
    jint bottomMargin = ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, c, false, false);
    jint sumMarginsX = leftMargin + rightMargin;
    jint sumMarginsY = topMargin + bottomMargin;
    jint alignmentOffsetX = [boundsX getOffsetWithADXGridLayout:self withADView:c withADXGridLayout_Alignment:hAlign withInt:pWidth + sumMarginsX withBoolean:true];
    jint alignmentOffsetY = [boundsY getOffsetWithADXGridLayout:self withADView:c withADXGridLayout_Alignment:vAlign withInt:pHeight + sumMarginsY withBoolean:false];
    jint width = [hAlign getSizeInCellWithADView:c withInt:pWidth withInt:cellWidth - sumMarginsX];
    jint height = [vAlign getSizeInCellWithADView:c withInt:pHeight withInt:cellHeight - sumMarginsY];
    jint dx = x1 + gravityOffsetX + alignmentOffsetX;
    jint cx = !ADXGridLayout_isLayoutRtlCompat(self) ? paddingLeft + leftMargin + dx : targetWidth - width - paddingRight - rightMargin - dx;
    jint cy = paddingTop + y1 + gravityOffsetY + alignmentOffsetY + topMargin;
    if (width != [c getMeasuredWidth] || height != [c getMeasuredHeight]) {
      [c measureWithInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(width, ADView_MeasureSpec_EXACTLY) withInt:ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(height, ADView_MeasureSpec_EXACTLY)];
    }
    [c layoutWithInt:cx withInt:cy withInt:cx + width withInt:cy + height];
  }
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
                            withInt:(jint)size
        withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment
                          withFloat:(jfloat)weight {
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_withFloat_(start, size, alignment, weight);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
        withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment
                          withFloat:(jfloat)weight {
  return ADXGridLayout_specWithInt_withADXGridLayout_Alignment_withFloat_(start, alignment, weight);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
                            withInt:(jint)size
                          withFloat:(jfloat)weight {
  return ADXGridLayout_specWithInt_withInt_withFloat_(start, size, weight);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
                          withFloat:(jfloat)weight {
  return ADXGridLayout_specWithInt_withFloat_(start, weight);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
                            withInt:(jint)size
        withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment {
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_(start, size, alignment);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
        withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment {
  return ADXGridLayout_specWithInt_withADXGridLayout_Alignment_(start, alignment);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start
                            withInt:(jint)size {
  return ADXGridLayout_specWithInt_withInt_(start, size);
}

+ (ADXGridLayout_Spec *)specWithInt:(jint)start {
  return ADXGridLayout_specWithInt_(start);
}

+ (ADXGridLayout_Alignment *)createSwitchingAlignmentWithADXGridLayout_Alignment:(ADXGridLayout_Alignment *)ltr
                                                     withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)rtl {
  return ADXGridLayout_createSwitchingAlignmentWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ltr, rtl);
}

+ (jboolean)canStretchWithInt:(jint)flexibility {
  return ADXGridLayout_canStretchWithInt_(flexibility);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mHorizontalAxis_);
  RELEASE_(mVerticalAxis_);
  RELEASE_(LOG_PRINTER_);
  RELEASE_(mPrinter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 9, 10, -1, -1, -1, -1 },
    { NULL, "[LNSObject;", 0x8, 11, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x2, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 14, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 18, 15, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 19, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 24, 23, -1, -1, -1, -1 },
    { NULL, "V", 0xa, 25, 26, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_LayoutParams;", 0x10, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 33, 35, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_LayoutParams;", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_LayoutParams;", 0x4, 36, 35, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 40, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 41, 42, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 43, 42, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 44, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x10, 45, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 46, 47, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 49, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 50, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 51, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 52, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 53, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 54, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 42, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x9, 48, 1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Alignment;", 0xa, 55, 56, -1, -1, -1, -1 },
    { NULL, "Z", 0x8, 57, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getOrientation);
  methods[1].selector = @selector(setOrientationWithInt:);
  methods[2].selector = @selector(getRowCount);
  methods[3].selector = @selector(setRowCountWithInt:);
  methods[4].selector = @selector(getColumnCount);
  methods[5].selector = @selector(setColumnCountWithInt:);
  methods[6].selector = @selector(getUseDefaultMargins);
  methods[7].selector = @selector(setUseDefaultMarginsWithBoolean:);
  methods[8].selector = @selector(getAlignmentMode);
  methods[9].selector = @selector(setAlignmentModeWithInt:);
  methods[10].selector = @selector(isRowOrderPreserved);
  methods[11].selector = @selector(setRowOrderPreservedWithBoolean:);
  methods[12].selector = @selector(isColumnOrderPreserved);
  methods[13].selector = @selector(setColumnOrderPreservedWithBoolean:);
  methods[14].selector = @selector(max2WithIntArray:withInt:);
  methods[15].selector = @selector(appendWithNSObjectArray:withNSObjectArray:);
  methods[16].selector = @selector(getDefaultMarginWithADView:withBoolean:withBoolean:);
  methods[17].selector = @selector(getDefaultMarginWithADView:withBoolean:withBoolean:withBoolean:);
  methods[18].selector = @selector(getDefaultMarginWithADView:withADXGridLayout_LayoutParams:withBoolean:withBoolean:);
  methods[19].selector = @selector(getMargin1WithADView:withBoolean:withBoolean:);
  methods[20].selector = @selector(isLayoutRtlCompat);
  methods[21].selector = @selector(getMarginWithADView:withBoolean:withBoolean:);
  methods[22].selector = @selector(getTotalMarginWithADView:withBoolean:);
  methods[23].selector = @selector(fitsWithIntArray:withInt:withInt:withInt:);
  methods[24].selector = @selector(procrusteanFillWithIntArray:withInt:withInt:withInt:);
  methods[25].selector = @selector(setCellGroupWithADXGridLayout_LayoutParams:withInt:withInt:withInt:withInt:);
  methods[26].selector = @selector(clipWithADXGridLayout_Interval:withBoolean:withInt:);
  methods[27].selector = @selector(validateLayoutParams);
  methods[28].selector = @selector(invalidateStructure);
  methods[29].selector = @selector(invalidateValues);
  methods[30].selector = @selector(getLayoutParamsWithADView:);
  methods[31].selector = @selector(handleInvalidParamsWithNSString:);
  methods[32].selector = @selector(checkLayoutParamsWithADXGridLayout_LayoutParams:withBoolean:);
  methods[33].selector = @selector(checkLayoutParamsWithADViewGroup_LayoutParams:);
  methods[34].selector = @selector(generateDefaultLayoutParams);
  methods[35].selector = @selector(generateLayoutParamsWithADViewGroup_LayoutParams:);
  methods[36].selector = @selector(computeLayoutParamsHashCode);
  methods[37].selector = @selector(consistencyCheck);
  methods[38].selector = @selector(measureChildWithMargins2WithADView:withInt:withInt:withInt:withInt:);
  methods[39].selector = @selector(measureChildrenWithMarginsWithInt:withInt:withBoolean:);
  methods[40].selector = @selector(adjustWithInt:withInt:);
  methods[41].selector = @selector(onMeasureWithInt:withInt:);
  methods[42].selector = @selector(getMeasurementWithADView:withBoolean:);
  methods[43].selector = @selector(getMeasurementIncludingMarginWithADView:withBoolean:);
  methods[44].selector = @selector(requestLayout);
  methods[45].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[46].selector = @selector(specWithInt:withInt:withADXGridLayout_Alignment:withFloat:);
  methods[47].selector = @selector(specWithInt:withADXGridLayout_Alignment:withFloat:);
  methods[48].selector = @selector(specWithInt:withInt:withFloat:);
  methods[49].selector = @selector(specWithInt:withFloat:);
  methods[50].selector = @selector(specWithInt:withInt:withADXGridLayout_Alignment:);
  methods[51].selector = @selector(specWithInt:withADXGridLayout_Alignment:);
  methods[52].selector = @selector(specWithInt:withInt:);
  methods[53].selector = @selector(specWithInt:);
  methods[54].selector = @selector(createSwitchingAlignmentWithADXGridLayout_Alignment:withADXGridLayout_Alignment:);
  methods[55].selector = @selector(canStretchWithInt:);
  methods[56].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "HORIZONTAL", "I", .constantValue.asInt = ADXGridLayout_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "VERTICAL", "I", .constantValue.asInt = ADXGridLayout_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "UNDEFINED", "I", .constantValue.asInt = ADXGridLayout_UNDEFINED, 0x19, -1, -1, -1, -1 },
    { "ALIGN_BOUNDS", "I", .constantValue.asInt = ADXGridLayout_ALIGN_BOUNDS, 0x19, -1, -1, -1, -1 },
    { "ALIGN_MARGINS", "I", .constantValue.asInt = ADXGridLayout_ALIGN_MARGINS, 0x19, -1, -1, -1, -1 },
    { "MAX_SIZE", "I", .constantValue.asInt = ADXGridLayout_MAX_SIZE, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_CONTAINER_MARGIN", "I", .constantValue.asInt = ADXGridLayout_DEFAULT_CONTAINER_MARGIN, 0x18, -1, -1, -1, -1 },
    { "UNINITIALIZED_HASH", "I", .constantValue.asInt = ADXGridLayout_UNINITIALIZED_HASH, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_ORIENTATION", "I", .constantValue.asInt = ADXGridLayout_DEFAULT_ORIENTATION, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_COUNT", "I", .constantValue.asInt = ADXGridLayout_DEFAULT_COUNT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_USE_DEFAULT_MARGINS", "Z", .constantValue.asBOOL = ADXGridLayout_DEFAULT_USE_DEFAULT_MARGINS, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_ORDER_PRESERVED", "Z", .constantValue.asBOOL = ADXGridLayout_DEFAULT_ORDER_PRESERVED, 0x18, -1, -1, -1, -1 },
    { "DEFAULT_ALIGNMENT_MODE", "I", .constantValue.asInt = ADXGridLayout_DEFAULT_ALIGNMENT_MODE, 0x1a, -1, -1, -1, -1 },
    { "mHorizontalAxis_", "LADXGridLayout_Axis;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mVerticalAxis_", "LADXGridLayout_Axis;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "mOrientation_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUseDefaultMargins_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAlignmentMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDefaultGap_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastLayoutParamsHashCode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "UNDEFINED_ALIGNMENT", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x18, -1, 58, -1, -1 },
    { "LEADING", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x1a, -1, 59, -1, -1 },
    { "TRAILING", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x1a, -1, 60, -1, -1 },
    { "TOP", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 61, -1, -1 },
    { "BOTTOM", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 62, -1, -1 },
    { "START", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 63, -1, -1 },
    { "END", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 64, -1, -1 },
    { "LEFT", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 65, -1, -1 },
    { "RIGHT", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 66, -1, -1 },
    { "CENTER", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 67, -1, -1 },
    { "BASELINE", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 68, -1, -1 },
    { "FILL", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x19, -1, 69, -1, -1 },
    { "INFLEXIBLE", "I", .constantValue.asInt = ADXGridLayout_INFLEXIBLE, 0x18, -1, -1, -1, -1 },
    { "CAN_STRETCH", "I", .constantValue.asInt = ADXGridLayout_CAN_STRETCH, 0x18, -1, -1, -1, -1 },
    { "LOG_PRINTER_", "LADXGridLayout_Printer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPrinter_", "LADXGridLayout_Printer;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setOrientation", "I", "setRowCount", "setColumnCount", "setUseDefaultMargins", "Z", "setAlignmentMode", "setRowOrderPreserved", "setColumnOrderPreserved", "max2", "[II", "append", "[LNSObject;[LNSObject;", "<T:Ljava/lang/Object;>([TT;[TT;)[TT;", "getDefaultMargin", "LADView;ZZ", "LADView;ZZZ", "LADView;LADXGridLayout_LayoutParams;ZZ", "getMargin1", "getMargin", "getTotalMargin", "LADView;Z", "fits", "[IIII", "procrusteanFill", "setCellGroup", "LADXGridLayout_LayoutParams;IIII", "clip", "LADXGridLayout_Interval;ZI", "getLayoutParams", "LADView;", "handleInvalidParams", "LNSString;", "checkLayoutParams", "LADXGridLayout_LayoutParams;Z", "LADViewGroup_LayoutParams;", "generateLayoutParams", "measureChildWithMargins2", "LADView;IIII", "measureChildrenWithMargins", "IIZ", "adjust", "II", "onMeasure", "getMeasurement", "getMeasurementIncludingMargin", "onLayout", "ZIIII", "spec", "IILADXGridLayout_Alignment;F", "ILADXGridLayout_Alignment;F", "IIF", "IF", "IILADXGridLayout_Alignment;", "ILADXGridLayout_Alignment;", "createSwitchingAlignment", "LADXGridLayout_Alignment;LADXGridLayout_Alignment;", "canStretch", &ADXGridLayout_UNDEFINED_ALIGNMENT, &ADXGridLayout_LEADING, &ADXGridLayout_TRAILING, &ADXGridLayout_TOP, &ADXGridLayout_BOTTOM, &ADXGridLayout_START, &ADXGridLayout_END, &ADXGridLayout_LEFT, &ADXGridLayout_RIGHT, &ADXGridLayout_CENTER, &ADXGridLayout_BASELINE, &ADXGridLayout_FILL, "LADXGridLayout_Axis;LADXGridLayout_LayoutParams;LADXGridLayout_Arc;LADXGridLayout_MutableInt;LADXGridLayout_Assoc;LADXGridLayout_PackedMap;LADXGridLayout_Bounds;LADXGridLayout_Interval;LADXGridLayout_Spec;LADXGridLayout_Alignment;LADXGridLayout_Printer;" };
  static const J2ObjcClassInfo _ADXGridLayout = { "GridLayout", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x1, 57, 36, -1, 70, -1, -1, -1 };
  return &_ADXGridLayout;
}

+ (void)initialize {
  if (self == [ADXGridLayout class]) {
    JreStrongAssignAndConsume(&ADXGridLayout_UNDEFINED_ALIGNMENT, new_ADXGridLayout_1_init());
    JreStrongAssignAndConsume(&ADXGridLayout_LEADING, new_ADXGridLayout_2_init());
    JreStrongAssignAndConsume(&ADXGridLayout_TRAILING, new_ADXGridLayout_3_init());
    JreStrongAssign(&ADXGridLayout_TOP, ADXGridLayout_LEADING);
    JreStrongAssign(&ADXGridLayout_BOTTOM, ADXGridLayout_TRAILING);
    JreStrongAssign(&ADXGridLayout_START, ADXGridLayout_LEADING);
    JreStrongAssign(&ADXGridLayout_END, ADXGridLayout_TRAILING);
    JreStrongAssign(&ADXGridLayout_LEFT, ADXGridLayout_createSwitchingAlignmentWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_START, ADXGridLayout_END));
    JreStrongAssign(&ADXGridLayout_RIGHT, ADXGridLayout_createSwitchingAlignmentWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_END, ADXGridLayout_START));
    JreStrongAssignAndConsume(&ADXGridLayout_CENTER, new_ADXGridLayout_5_init());
    JreStrongAssignAndConsume(&ADXGridLayout_BASELINE, new_ADXGridLayout_6_init());
    JreStrongAssignAndConsume(&ADXGridLayout_FILL, new_ADXGridLayout_7_init());
    J2OBJC_SET_INITIALIZED(ADXGridLayout)
  }
}

@end

jint ADXGridLayout_max2WithIntArray_withInt_(IOSIntArray *a, jint valueIfEmpty) {
  ADXGridLayout_initialize();
  jint result = valueIfEmpty;
  for (jint i = 0, N = ((IOSIntArray *) nil_chk(a))->size_; i < N; i++) {
    result = JavaLangMath_maxWithInt_withInt_(result, IOSIntArray_Get(a, i));
  }
  return result;
}

IOSObjectArray *ADXGridLayout_appendWithNSObjectArray_withNSObjectArray_(IOSObjectArray *a, IOSObjectArray *b) {
  ADXGridLayout_initialize();
  IOSObjectArray *result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_([[((IOSObjectArray *) nil_chk(a)) java_getClass] getComponentType], a->size_ + ((IOSObjectArray *) nil_chk(b))->size_), IOSClass_arrayType(NSObject_class_(), 1));
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(a, 0, result, 0, a->size_);
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(b, 0, result, a->size_, b->size_);
  return result;
}

jint ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_(ADXGridLayout *self, ADView *c, jboolean horizontal, jboolean leading) {
  if ([((ADView *) nil_chk(c)) java_getClass] == ADSpace_class_()) {
    return 0;
  }
  return JreIntDiv(self->mDefaultGap_, 2);
}

jint ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_withBoolean_(ADXGridLayout *self, ADView *c, jboolean isAtEdge, jboolean horizontal, jboolean leading) {
  return ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_(self, c, horizontal, leading);
}

jint ADXGridLayout_getDefaultMarginWithADView_withADXGridLayout_LayoutParams_withBoolean_withBoolean_(ADXGridLayout *self, ADView *c, ADXGridLayout_LayoutParams *p, jboolean horizontal, jboolean leading) {
  if (!self->mUseDefaultMargins_) {
    return 0;
  }
  ADXGridLayout_Spec *spec = horizontal ? ((ADXGridLayout_LayoutParams *) nil_chk(p))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(p))->rowSpec_;
  ADXGridLayout_Axis *axis = horizontal ? self->mHorizontalAxis_ : self->mVerticalAxis_;
  ADXGridLayout_Interval *span = JreRetainedLocalValue(spec->span_);
  jboolean leading1 = (horizontal && ADXGridLayout_isLayoutRtlCompat(self)) ? !leading : leading;
  jboolean isAtEdge = leading1 ? (((ADXGridLayout_Interval *) nil_chk(span))->min_ == 0) : (((ADXGridLayout_Interval *) nil_chk(span))->max_ == [axis getCount]);
  return ADXGridLayout_getDefaultMarginWithADView_withBoolean_withBoolean_withBoolean_(self, c, isAtEdge, horizontal, leading);
}

jboolean ADXGridLayout_isLayoutRtlCompat(ADXGridLayout *self) {
  return ADXViewCompat_getLayoutDirectionWithADView_(self) == ADXViewCompat_LAYOUT_DIRECTION_RTL;
}

jint ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(ADXGridLayout *self, ADView *view, jboolean horizontal, jboolean leading) {
  if (self->mAlignmentMode_ == ADXGridLayout_ALIGN_MARGINS) {
    return [self getMargin1WithADView:view withBoolean:horizontal withBoolean:leading];
  }
  else {
    ADXGridLayout_Axis *axis = horizontal ? self->mHorizontalAxis_ : self->mVerticalAxis_;
    IOSIntArray *margins = leading ? [axis getLeadingMargins] : [axis getTrailingMargins];
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self, view);
    ADXGridLayout_Spec *spec = horizontal ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    jint index = leading ? ((ADXGridLayout_Interval *) nil_chk(spec->span_))->min_ : ((ADXGridLayout_Interval *) nil_chk(spec->span_))->max_;
    return IOSIntArray_Get(margins, index);
  }
}

jint ADXGridLayout_getTotalMarginWithADView_withBoolean_(ADXGridLayout *self, ADView *child, jboolean horizontal) {
  return ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, child, horizontal, true) + ADXGridLayout_getMarginWithADView_withBoolean_withBoolean_(self, child, horizontal, false);
}

jboolean ADXGridLayout_fitsWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint value, jint start, jint end) {
  ADXGridLayout_initialize();
  if (end > ((IOSIntArray *) nil_chk(a))->size_) {
    return false;
  }
  for (jint i = start; i < end; i++) {
    if (IOSIntArray_Get(a, i) > value) {
      return false;
    }
  }
  return true;
}

void ADXGridLayout_procrusteanFillWithIntArray_withInt_withInt_withInt_(IOSIntArray *a, jint start, jint end, jint value) {
  ADXGridLayout_initialize();
  jint length = ((IOSIntArray *) nil_chk(a))->size_;
  JavaUtilArrays_fillWithIntArray_withInt_withInt_withInt_(a, JavaLangMath_minWithInt_withInt_(start, length), JavaLangMath_minWithInt_withInt_(end, length), value);
}

void ADXGridLayout_setCellGroupWithADXGridLayout_LayoutParams_withInt_withInt_withInt_withInt_(ADXGridLayout_LayoutParams *lp, jint row, jint rowSpan, jint col, jint colSpan) {
  ADXGridLayout_initialize();
  ADXGridLayout_LayoutParams_setRowSpecSpanWithADXGridLayout_Interval_(nil_chk(lp), create_ADXGridLayout_Interval_initWithInt_withInt_(row, row + rowSpan));
  ADXGridLayout_LayoutParams_setColumnSpecSpanWithADXGridLayout_Interval_(lp, create_ADXGridLayout_Interval_initWithInt_withInt_(col, col + colSpan));
}

jint ADXGridLayout_clipWithADXGridLayout_Interval_withBoolean_withInt_(ADXGridLayout_Interval *minorRange, jboolean minorWasDefined, jint count) {
  ADXGridLayout_initialize();
  jint size = [((ADXGridLayout_Interval *) nil_chk(minorRange)) size];
  if (count == 0) {
    return size;
  }
  jint min = minorWasDefined ? JavaLangMath_minWithInt_withInt_(minorRange->min_, count) : 0;
  return JavaLangMath_minWithInt_withInt_(size, count - min);
}

void ADXGridLayout_validateLayoutParams(ADXGridLayout *self) {
  jboolean horizontal = self->mOrientation_ == ADXGridLayout_HORIZONTAL;
  ADXGridLayout_Axis *axis = horizontal ? self->mHorizontalAxis_ : self->mVerticalAxis_;
  jint count = (axis->definedCount_ != ADXGridLayout_UNDEFINED) ? axis->definedCount_ : 0;
  jint major = 0;
  jint minor = 0;
  IOSIntArray *maxSizes = [IOSIntArray arrayWithLength:count];
  for (jint i = 0, N = [self getChildCount]; i < N; i++) {
    ADXGridLayout_LayoutParams *lp = (ADXGridLayout_LayoutParams *) cast_chk([((ADView *) nil_chk([self getChildAtWithInt:i])) getLayoutParams], [ADXGridLayout_LayoutParams class]);
    ADXGridLayout_Spec *majorSpec = horizontal ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_;
    ADXGridLayout_Interval *majorRange = majorSpec->span_;
    jboolean majorWasDefined = majorSpec->startDefined_;
    jint majorSpan = [((ADXGridLayout_Interval *) nil_chk(majorRange)) size];
    if (majorWasDefined) {
      major = majorRange->min_;
    }
    ADXGridLayout_Spec *minorSpec = horizontal ? lp->columnSpec_ : lp->rowSpec_;
    ADXGridLayout_Interval *minorRange = minorSpec->span_;
    jboolean minorWasDefined = minorSpec->startDefined_;
    jint minorSpan = ADXGridLayout_clipWithADXGridLayout_Interval_withBoolean_withInt_(minorRange, minorWasDefined, count);
    if (minorWasDefined) {
      minor = ((ADXGridLayout_Interval *) nil_chk(minorRange))->min_;
    }
    if (count != 0) {
      if (!majorWasDefined || !minorWasDefined) {
        while (!ADXGridLayout_fitsWithIntArray_withInt_withInt_withInt_(maxSizes, major, minor, minor + minorSpan)) {
          if (minorWasDefined) {
            major++;
          }
          else {
            if (minor + minorSpan <= count) {
              minor++;
            }
            else {
              minor = 0;
              major++;
            }
          }
        }
      }
      ADXGridLayout_procrusteanFillWithIntArray_withInt_withInt_withInt_(maxSizes, minor, minor + minorSpan, major + majorSpan);
    }
    if (horizontal) {
      ADXGridLayout_setCellGroupWithADXGridLayout_LayoutParams_withInt_withInt_withInt_withInt_(lp, major, majorSpan, minor, minorSpan);
    }
    else {
      ADXGridLayout_setCellGroupWithADXGridLayout_LayoutParams_withInt_withInt_withInt_withInt_(lp, minor, minorSpan, major, majorSpan);
    }
    minor = minor + minorSpan;
  }
}

void ADXGridLayout_invalidateStructure(ADXGridLayout *self) {
  self->mLastLayoutParamsHashCode_ = ADXGridLayout_UNINITIALIZED_HASH;
  if (self->mHorizontalAxis_ != nil) [self->mHorizontalAxis_ invalidateStructure];
  if (self->mVerticalAxis_ != nil) [self->mVerticalAxis_ invalidateStructure];
  ADXGridLayout_invalidateValues(self);
}

void ADXGridLayout_invalidateValues(ADXGridLayout *self) {
  if (self->mHorizontalAxis_ != nil && self->mVerticalAxis_ != nil) {
    [self->mHorizontalAxis_ invalidateValues];
    [self->mVerticalAxis_ invalidateValues];
  }
}

ADXGridLayout_LayoutParams *ADXGridLayout_getLayoutParamsWithADView_(ADXGridLayout *self, ADView *c) {
  return (ADXGridLayout_LayoutParams *) cast_chk([((ADView *) nil_chk(c)) getLayoutParams], [ADXGridLayout_LayoutParams class]);
}

void ADXGridLayout_handleInvalidParamsWithNSString_(NSString *msg) {
  ADXGridLayout_initialize();
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(JreStrcat("$$", msg, @". "));
}

void ADXGridLayout_checkLayoutParamsWithADXGridLayout_LayoutParams_withBoolean_(ADXGridLayout *self, ADXGridLayout_LayoutParams *lp, jboolean horizontal) {
  NSString *groupName = horizontal ? @"column" : @"row";
  ADXGridLayout_Spec *spec = horizontal ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
  ADXGridLayout_Interval *span = JreRetainedLocalValue(spec->span_);
  if (((ADXGridLayout_Interval *) nil_chk(span))->min_ != ADXGridLayout_UNDEFINED && span->min_ < 0) {
    ADXGridLayout_handleInvalidParamsWithNSString_(JreStrcat("$$", groupName, @" indices must be positive"));
  }
  ADXGridLayout_Axis *axis = horizontal ? self->mHorizontalAxis_ : self->mVerticalAxis_;
  jint count = axis->definedCount_;
  if (count != ADXGridLayout_UNDEFINED) {
    if (span->max_ > count) {
      ADXGridLayout_handleInvalidParamsWithNSString_(JreStrcat("$$$$", groupName, @" indices (start + span) mustn't exceed the ", groupName, @" count"));
    }
    if ([span size] > count) {
      ADXGridLayout_handleInvalidParamsWithNSString_(JreStrcat("$$$$", groupName, @" span mustn't exceed the ", groupName, @" count"));
    }
  }
}

jint ADXGridLayout_computeLayoutParamsHashCode(ADXGridLayout *self) {
  jint result = 1;
  for (jint i = 0, N = [self getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) continue;
    ADXGridLayout_LayoutParams *lp = (ADXGridLayout_LayoutParams *) cast_chk([c getLayoutParams], [ADXGridLayout_LayoutParams class]);
    result = 31 * result + ((jint) [((ADXGridLayout_LayoutParams *) nil_chk(lp)) hash]);
  }
  return result;
}

void ADXGridLayout_consistencyCheck(ADXGridLayout *self) {
  if (self->mLastLayoutParamsHashCode_ == ADXGridLayout_UNINITIALIZED_HASH) {
    ADXGridLayout_validateLayoutParams(self);
    self->mLastLayoutParamsHashCode_ = ADXGridLayout_computeLayoutParamsHashCode(self);
  }
  else if (self->mLastLayoutParamsHashCode_ != ADXGridLayout_computeLayoutParamsHashCode(self)) {
    [((ADXGridLayout_Printer *) nil_chk(self->mPrinter_)) printlnWithNSString:@"The fields of some layout parameters were modified in between layout operations. Check the javadoc for GridLayout.LayoutParams#rowSpec."];
    ADXGridLayout_invalidateStructure(self);
    ADXGridLayout_consistencyCheck(self);
  }
}

void ADXGridLayout_measureChildWithMargins2WithADView_withInt_withInt_withInt_withInt_(ADXGridLayout *self, ADView *child, jint parentWidthSpec, jint parentHeightSpec, jint childWidth, jint childHeight) {
  jint childWidthSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentWidthSpec, ADXGridLayout_getTotalMarginWithADView_withBoolean_(self, child, true), childWidth);
  jint childHeightSpec = ADViewGroup_getChildMeasureSpecWithInt_withInt_withInt_(parentHeightSpec, ADXGridLayout_getTotalMarginWithADView_withBoolean_(self, child, false), childHeight);
  [((ADView *) nil_chk(child)) measureWithInt:childWidthSpec withInt:childHeightSpec];
}

void ADXGridLayout_measureChildrenWithMarginsWithInt_withInt_withBoolean_(ADXGridLayout *self, jint widthSpec, jint heightSpec, jboolean firstPass) {
  for (jint i = 0, N = [self getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self getChildAtWithInt:i]);
    if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) continue;
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self, c);
    if (firstPass) {
      ADXGridLayout_measureChildWithMargins2WithADView_withInt_withInt_withInt_withInt_(self, c, widthSpec, heightSpec, ((ADXGridLayout_LayoutParams *) nil_chk(lp))->width_, lp->height_);
    }
    else {
      jboolean horizontal = self->mOrientation_ == ADXGridLayout_HORIZONTAL;
      ADXGridLayout_Spec *spec = horizontal ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
      if ([spec getAbsoluteAlignmentWithBoolean:horizontal] == ADXGridLayout_FILL) {
        ADXGridLayout_Interval *span = JreRetainedLocalValue(spec->span_);
        ADXGridLayout_Axis *axis = horizontal ? self->mHorizontalAxis_ : self->mVerticalAxis_;
        IOSIntArray *locations = [axis getLocations];
        jint cellSize = IOSIntArray_Get(nil_chk(locations), ((ADXGridLayout_Interval *) nil_chk(span))->max_) - IOSIntArray_Get(locations, span->min_);
        jint viewSize = cellSize - ADXGridLayout_getTotalMarginWithADView_withBoolean_(self, c, horizontal);
        if (horizontal) {
          ADXGridLayout_measureChildWithMargins2WithADView_withInt_withInt_withInt_withInt_(self, c, widthSpec, heightSpec, viewSize, lp->height_);
        }
        else {
          ADXGridLayout_measureChildWithMargins2WithADView_withInt_withInt_withInt_withInt_(self, c, widthSpec, heightSpec, lp->width_, viewSize);
        }
      }
    }
  }
}

jint ADXGridLayout_adjustWithInt_withInt_(jint measureSpec, jint delta) {
  ADXGridLayout_initialize();
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(ADView_MeasureSpec_getSizeWithInt_(measureSpec + delta), ADView_MeasureSpec_getModeWithInt_(measureSpec));
}

jint ADXGridLayout_getMeasurementWithADView_withBoolean_(ADXGridLayout *self, ADView *c, jboolean horizontal) {
  return horizontal ? [((ADView *) nil_chk(c)) getMeasuredWidth] : [((ADView *) nil_chk(c)) getMeasuredHeight];
}

jint ADXGridLayout_getMeasurementIncludingMarginWithADView_withBoolean_(ADXGridLayout *self, ADView *c, jboolean horizontal) {
  if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) {
    return 0;
  }
  return ADXGridLayout_getMeasurementWithADView_withBoolean_(self, c, horizontal) + ADXGridLayout_getTotalMarginWithADView_withBoolean_(self, c, horizontal);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_withFloat_(jint start, jint size, ADXGridLayout_Alignment *alignment, jfloat weight) {
  ADXGridLayout_initialize();
  return create_ADXGridLayout_Spec_initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_(start != ADXGridLayout_UNDEFINED, start, size, alignment, weight);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withADXGridLayout_Alignment_withFloat_(jint start, ADXGridLayout_Alignment *alignment, jfloat weight) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_withFloat_(start, 1, alignment, weight);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withInt_withFloat_(jint start, jint size, jfloat weight) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_withFloat_(start, size, ADXGridLayout_UNDEFINED_ALIGNMENT, weight);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withFloat_(jint start, jfloat weight) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_withFloat_(start, 1, weight);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_(jint start, jint size, ADXGridLayout_Alignment *alignment) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_withFloat_(start, size, alignment, ADXGridLayout_Spec_DEFAULT_WEIGHT);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withADXGridLayout_Alignment_(jint start, ADXGridLayout_Alignment *alignment) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_(start, 1, alignment);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_withInt_(jint start, jint size) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_withADXGridLayout_Alignment_(start, size, ADXGridLayout_UNDEFINED_ALIGNMENT);
}

ADXGridLayout_Spec *ADXGridLayout_specWithInt_(jint start) {
  ADXGridLayout_initialize();
  return ADXGridLayout_specWithInt_withInt_(start, 1);
}

ADXGridLayout_Alignment *ADXGridLayout_createSwitchingAlignmentWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_Alignment *ltr, ADXGridLayout_Alignment *rtl) {
  ADXGridLayout_initialize();
  return create_ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ltr, rtl);
}

jboolean ADXGridLayout_canStretchWithInt_(jint flexibility) {
  ADXGridLayout_initialize();
  return (flexibility & ADXGridLayout_CAN_STRETCH) != 0;
}

void ADXGridLayout_init(ADXGridLayout *self) {
  ADViewGroup_init(self);
  JreStrongAssignAndConsume(&self->mHorizontalAxis_, new_ADXGridLayout_Axis_initWithADXGridLayout_withBoolean_(self, true));
  JreStrongAssignAndConsume(&self->mVerticalAxis_, new_ADXGridLayout_Axis_initWithADXGridLayout_withBoolean_(self, false));
  self->mOrientation_ = ADXGridLayout_DEFAULT_ORIENTATION;
  self->mUseDefaultMargins_ = ADXGridLayout_DEFAULT_USE_DEFAULT_MARGINS;
  self->mAlignmentMode_ = ADXGridLayout_DEFAULT_ALIGNMENT_MODE;
  self->mLastLayoutParamsHashCode_ = ADXGridLayout_UNINITIALIZED_HASH;
  JreStrongAssignAndConsume(&self->LOG_PRINTER_, new_ADXGridLayout_Printer_initWithADXGridLayout_(self));
  JreStrongAssign(&self->mPrinter_, self->LOG_PRINTER_);
  self->mDefaultGap_ = 8 * 2;
  [self setRowCountWithInt:ADXGridLayout_DEFAULT_COUNT];
  [self setColumnCountWithInt:ADXGridLayout_DEFAULT_COUNT];
  [self setOrientationWithInt:ADXGridLayout_DEFAULT_ORIENTATION];
  [self setUseDefaultMarginsWithBoolean:ADXGridLayout_DEFAULT_USE_DEFAULT_MARGINS];
  [self setAlignmentModeWithInt:ADXGridLayout_DEFAULT_ALIGNMENT_MODE];
  [self setRowOrderPreservedWithBoolean:ADXGridLayout_DEFAULT_ORDER_PRESERVED];
  [self setColumnOrderPreservedWithBoolean:ADXGridLayout_DEFAULT_ORDER_PRESERVED];
}

ADXGridLayout *new_ADXGridLayout_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout, init)
}

ADXGridLayout *create_ADXGridLayout_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout)

@implementation ADXGridLayout_Axis

- (instancetype)initWithADXGridLayout:(ADXGridLayout *)outer$
                          withBoolean:(jboolean)horizontal {
  ADXGridLayout_Axis_initWithADXGridLayout_withBoolean_(self, outer$, horizontal);
  return self;
}

- (jint)calculateMaxIndex {
  return ADXGridLayout_Axis_calculateMaxIndex(self);
}

- (jint)getMaxIndex {
  return ADXGridLayout_Axis_getMaxIndex(self);
}

- (jint)getCount {
  return JavaLangMath_maxWithInt_withInt_(definedCount_, ADXGridLayout_Axis_getMaxIndex(self));
}

- (void)setCountWithInt:(jint)count {
  if (count != ADXGridLayout_UNDEFINED && count < ADXGridLayout_Axis_getMaxIndex(self)) {
    ADXGridLayout_handleInvalidParamsWithNSString_(JreStrcat("$$", (horizontal_ ? @"column" : @"row"), @"Count must be greater than or equal to the maximum of all grid indices (and spans) defined in the LayoutParams of each child"));
  }
  self->definedCount_ = count;
}

- (jboolean)isOrderPreserved {
  return orderPreserved_;
}

- (void)setOrderPreservedWithBoolean:(jboolean)orderPreserved {
  self->orderPreserved_ = orderPreserved;
  [self invalidateStructure];
}

- (ADXGridLayout_PackedMap *)createGroupBounds {
  return ADXGridLayout_Axis_createGroupBounds(self);
}

- (void)computeGroupBounds {
  ADXGridLayout_Axis_computeGroupBounds(self);
}

- (ADXGridLayout_PackedMap *)getGroupBounds {
  if (groupBounds_ == nil) {
    JreStrongAssign(&groupBounds_, ADXGridLayout_Axis_createGroupBounds(self));
  }
  if (!groupBoundsValid_) {
    ADXGridLayout_Axis_computeGroupBounds(self);
    groupBoundsValid_ = true;
  }
  return groupBounds_;
}

- (ADXGridLayout_PackedMap *)createLinksWithBoolean:(jboolean)min {
  return ADXGridLayout_Axis_createLinksWithBoolean_(self, min);
}

- (void)computeLinksWithADXGridLayout_PackedMap:(ADXGridLayout_PackedMap *)links
                                    withBoolean:(jboolean)min {
  ADXGridLayout_Axis_computeLinksWithADXGridLayout_PackedMap_withBoolean_(self, links, min);
}

- (ADXGridLayout_PackedMap *)getForwardLinks {
  return ADXGridLayout_Axis_getForwardLinks(self);
}

- (ADXGridLayout_PackedMap *)getBackwardLinks {
  return ADXGridLayout_Axis_getBackwardLinks(self);
}

- (void)includeWithJavaUtilList:(id<JavaUtilList>)arcs
     withADXGridLayout_Interval:(ADXGridLayout_Interval *)key
   withADXGridLayout_MutableInt:(ADXGridLayout_MutableInt *)size
                    withBoolean:(jboolean)ignoreIfAlreadyPresent {
  ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(self, arcs, key, size, ignoreIfAlreadyPresent);
}

- (void)includeWithJavaUtilList:(id<JavaUtilList>)arcs
     withADXGridLayout_Interval:(ADXGridLayout_Interval *)key
   withADXGridLayout_MutableInt:(ADXGridLayout_MutableInt *)size {
  ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_(self, arcs, key, size);
}

- (IOSObjectArray *)groupArcsByFirstVertexWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs {
  jint N = [self getCount] + 1;
  IOSObjectArray *result = [IOSObjectArray arrayWithLength:N type:IOSClass_arrayType(ADXGridLayout_Arc_class_(), 1)];
  IOSIntArray *sizes = [IOSIntArray arrayWithLength:N];
  {
    IOSObjectArray *a__ = arcs;
    ADXGridLayout_Arc * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ADXGridLayout_Arc * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ADXGridLayout_Arc *arc = *b__++;
      (*IOSIntArray_GetRef(sizes, ((ADXGridLayout_Interval *) nil_chk(((ADXGridLayout_Arc *) nil_chk(arc))->span_))->min_))++;
    }
  }
  for (jint i = 0; i < sizes->size_; i++) {
    IOSObjectArray_SetAndConsume(result, i, [IOSObjectArray newArrayWithLength:IOSIntArray_Get(sizes, i) type:ADXGridLayout_Arc_class_()]);
  }
  JavaUtilArrays_fillWithIntArray_withInt_(sizes, 0);
  {
    IOSObjectArray *a__ = arcs;
    ADXGridLayout_Arc * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
    ADXGridLayout_Arc * const *e__ = b__ + a__->size_;
    while (b__ < e__) {
      ADXGridLayout_Arc *arc = *b__++;
      jint i = ((ADXGridLayout_Interval *) nil_chk(((ADXGridLayout_Arc *) nil_chk(arc))->span_))->min_;
      IOSObjectArray_Set(nil_chk(IOSObjectArray_Get(result, i)), (*IOSIntArray_GetRef(sizes, i))++, arc);
    }
  }
  return result;
}

- (IOSObjectArray *)topologicalSortWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs {
  return ADXGridLayout_Axis_topologicalSortWithADXGridLayout_ArcArray_(self, arcs);
}

- (IOSObjectArray *)topologicalSortWithJavaUtilList:(id<JavaUtilList>)arcs {
  return ADXGridLayout_Axis_topologicalSortWithJavaUtilList_(self, arcs);
}

- (void)addComponentSizesWithJavaUtilList:(id<JavaUtilList>)result
              withADXGridLayout_PackedMap:(ADXGridLayout_PackedMap *)links {
  ADXGridLayout_Axis_addComponentSizesWithJavaUtilList_withADXGridLayout_PackedMap_(self, result, links);
}

- (IOSObjectArray *)createArcs {
  return ADXGridLayout_Axis_createArcs(self);
}

- (void)computeArcs {
  ADXGridLayout_Axis_computeArcs(self);
}

- (IOSObjectArray *)getArcs {
  if (arcs_ == nil) {
    JreStrongAssign(&arcs_, ADXGridLayout_Axis_createArcs(self));
  }
  if (!arcsValid_) {
    ADXGridLayout_Axis_computeArcs(self);
    arcsValid_ = true;
  }
  return arcs_;
}

- (jboolean)relaxWithIntArray:(IOSIntArray *)locations
        withADXGridLayout_Arc:(ADXGridLayout_Arc *)entry_ {
  return ADXGridLayout_Axis_relaxWithIntArray_withADXGridLayout_Arc_(self, locations, entry_);
}

- (void)init__WithIntArray:(IOSIntArray *)locations {
  ADXGridLayout_Axis_init__WithIntArray_(self, locations);
}

- (NSString *)arcsToStringWithJavaUtilList:(id<JavaUtilList>)arcs {
  return ADXGridLayout_Axis_arcsToStringWithJavaUtilList_(self, arcs);
}

- (void)logErrorWithNSString:(NSString *)axisName
  withADXGridLayout_ArcArray:(IOSObjectArray *)arcs
            withBooleanArray:(IOSBooleanArray *)culprits0 {
  ADXGridLayout_Axis_logErrorWithNSString_withADXGridLayout_ArcArray_withBooleanArray_(self, axisName, arcs, culprits0);
}

- (jboolean)solveWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs
                               withIntArray:(IOSIntArray *)locations {
  return ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_(self, arcs, locations);
}

- (jboolean)solveWithADXGridLayout_ArcArray:(IOSObjectArray *)arcs
                               withIntArray:(IOSIntArray *)locations
                                withBoolean:(jboolean)modifyOnError {
  return ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_withBoolean_(self, arcs, locations, modifyOnError);
}

- (void)computeMarginsWithBoolean:(jboolean)leading {
  ADXGridLayout_Axis_computeMarginsWithBoolean_(self, leading);
}

- (IOSIntArray *)getLeadingMargins {
  if (leadingMargins_ == nil) {
    JreStrongAssignAndConsume(&leadingMargins_, [IOSIntArray newArrayWithLength:[self getCount] + 1]);
  }
  if (!leadingMarginsValid_) {
    ADXGridLayout_Axis_computeMarginsWithBoolean_(self, true);
    leadingMarginsValid_ = true;
  }
  return leadingMargins_;
}

- (IOSIntArray *)getTrailingMargins {
  if (trailingMargins_ == nil) {
    JreStrongAssignAndConsume(&trailingMargins_, [IOSIntArray newArrayWithLength:[self getCount] + 1]);
  }
  if (!trailingMarginsValid_) {
    ADXGridLayout_Axis_computeMarginsWithBoolean_(self, false);
    trailingMarginsValid_ = true;
  }
  return trailingMargins_;
}

- (jboolean)solveWithIntArray:(IOSIntArray *)a {
  return ADXGridLayout_Axis_solveWithIntArray_(self, a);
}

- (jboolean)computeHasWeights {
  return ADXGridLayout_Axis_computeHasWeights(self);
}

- (jboolean)hasWeights {
  return ADXGridLayout_Axis_hasWeights(self);
}

- (IOSIntArray *)getDeltas {
  if (deltas_ == nil) {
    JreStrongAssignAndConsume(&deltas_, [IOSIntArray newArrayWithLength:[this$0_ getChildCount]]);
  }
  return deltas_;
}

- (void)shareOutDeltaWithInt:(jint)totalDelta
                   withFloat:(jfloat)totalWeight {
  ADXGridLayout_Axis_shareOutDeltaWithInt_withFloat_(self, totalDelta, totalWeight);
}

- (void)solveAndDistributeSpaceWithIntArray:(IOSIntArray *)a {
  ADXGridLayout_Axis_solveAndDistributeSpaceWithIntArray_(self, a);
}

- (jfloat)calculateTotalWeight {
  return ADXGridLayout_Axis_calculateTotalWeight(self);
}

- (void)computeLocationsWithIntArray:(IOSIntArray *)a {
  ADXGridLayout_Axis_computeLocationsWithIntArray_(self, a);
}

- (IOSIntArray *)getLocations {
  if (locations_ == nil) {
    jint N = [self getCount] + 1;
    JreStrongAssignAndConsume(&locations_, [IOSIntArray newArrayWithLength:N]);
  }
  if (!locationsValid_) {
    ADXGridLayout_Axis_computeLocationsWithIntArray_(self, locations_);
    locationsValid_ = true;
  }
  return locations_;
}

- (jint)sizeWithIntArray:(IOSIntArray *)locations {
  return ADXGridLayout_Axis_sizeWithIntArray_(self, locations);
}

- (void)setParentConstraintsWithInt:(jint)min
                            withInt:(jint)max {
  ADXGridLayout_Axis_setParentConstraintsWithInt_withInt_(self, min, max);
}

- (jint)getMeasureWithInt:(jint)min
                  withInt:(jint)max {
  return ADXGridLayout_Axis_getMeasureWithInt_withInt_(self, min, max);
}

- (jint)getMeasureWithInt:(jint)measureSpec {
  jint mode = ADView_MeasureSpec_getModeWithInt_(measureSpec);
  jint size = ADView_MeasureSpec_getSizeWithInt_(measureSpec);
  switch (mode) {
    case ADView_MeasureSpec_UNSPECIFIED:
    {
      return ADXGridLayout_Axis_getMeasureWithInt_withInt_(self, 0, ADXGridLayout_MAX_SIZE);
    }
    case ADView_MeasureSpec_EXACTLY:
    {
      return ADXGridLayout_Axis_getMeasureWithInt_withInt_(self, size, size);
    }
    case ADView_MeasureSpec_AT_MOST:
    {
      return ADXGridLayout_Axis_getMeasureWithInt_withInt_(self, 0, size);
    }
    default:
    {
      JreAssert(false, @"androidx\\gridlayout\\widget\\GridLayout.java:963 condition failed: assert false;");
      return 0;
    }
  }
}

- (void)layoutWithInt:(jint)size {
  ADXGridLayout_Axis_setParentConstraintsWithInt_withInt_(self, size, size);
  [self getLocations];
}

- (void)invalidateStructure {
  maxIndex_ = ADXGridLayout_UNDEFINED;
  JreStrongAssign(&groupBounds_, nil);
  JreStrongAssign(&forwardLinks_, nil);
  JreStrongAssign(&backwardLinks_, nil);
  JreStrongAssign(&leadingMargins_, nil);
  JreStrongAssign(&trailingMargins_, nil);
  JreStrongAssign(&arcs_, nil);
  JreStrongAssign(&locations_, nil);
  JreStrongAssign(&deltas_, nil);
  hasWeightsValid_ = false;
  [self invalidateValues];
}

- (void)invalidateValues {
  groupBoundsValid_ = false;
  forwardLinksValid_ = false;
  backwardLinksValid_ = false;
  leadingMarginsValid_ = false;
  trailingMarginsValid_ = false;
  arcsValid_ = false;
  locationsValid_ = false;
}

- (void)__javaClone:(ADXGridLayout_Axis *)original {
  [super __javaClone:original];
  [this$0_ release];
}

- (void)dealloc {
  RELEASE_(groupBounds_);
  RELEASE_(forwardLinks_);
  RELEASE_(backwardLinks_);
  RELEASE_(leadingMargins_);
  RELEASE_(trailingMargins_);
  RELEASE_(arcs_);
  RELEASE_(locations_);
  RELEASE_(deltas_);
  RELEASE_(parentMin_);
  RELEASE_(parentMax_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_PackedMap;", 0x2, -1, -1, -1, 5, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_PackedMap;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LADXGridLayout_PackedMap;", 0x2, 6, 4, -1, 7, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, 10, -1, -1 },
    { NULL, "LADXGridLayout_PackedMap;", 0x2, -1, -1, -1, 11, -1, -1 },
    { NULL, "LADXGridLayout_PackedMap;", 0x2, -1, -1, -1, 11, -1, -1 },
    { NULL, "V", 0x2, 12, 13, -1, 14, -1, -1 },
    { NULL, "V", 0x2, 12, 15, -1, 16, -1, -1 },
    { NULL, "[[LADXGridLayout_Arc;", 0x0, 17, 18, -1, -1, -1, -1 },
    { NULL, "[LADXGridLayout_Arc;", 0x2, 19, 18, -1, -1, -1, -1 },
    { NULL, "[LADXGridLayout_Arc;", 0x2, 19, 20, -1, 21, -1, -1 },
    { NULL, "V", 0x2, 22, 23, -1, 24, -1, -1 },
    { NULL, "[LADXGridLayout_Arc;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[LADXGridLayout_Arc;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 25, 26, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 29, 20, -1, 30, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 34, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 35, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 4, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 33, 28, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 38, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 28, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 28, -1, -1, -1, -1 },
    { NULL, "[I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 41, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 44, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXGridLayout:withBoolean:);
  methods[1].selector = @selector(calculateMaxIndex);
  methods[2].selector = @selector(getMaxIndex);
  methods[3].selector = @selector(getCount);
  methods[4].selector = @selector(setCountWithInt:);
  methods[5].selector = @selector(isOrderPreserved);
  methods[6].selector = @selector(setOrderPreservedWithBoolean:);
  methods[7].selector = @selector(createGroupBounds);
  methods[8].selector = @selector(computeGroupBounds);
  methods[9].selector = @selector(getGroupBounds);
  methods[10].selector = @selector(createLinksWithBoolean:);
  methods[11].selector = @selector(computeLinksWithADXGridLayout_PackedMap:withBoolean:);
  methods[12].selector = @selector(getForwardLinks);
  methods[13].selector = @selector(getBackwardLinks);
  methods[14].selector = @selector(includeWithJavaUtilList:withADXGridLayout_Interval:withADXGridLayout_MutableInt:withBoolean:);
  methods[15].selector = @selector(includeWithJavaUtilList:withADXGridLayout_Interval:withADXGridLayout_MutableInt:);
  methods[16].selector = @selector(groupArcsByFirstVertexWithADXGridLayout_ArcArray:);
  methods[17].selector = @selector(topologicalSortWithADXGridLayout_ArcArray:);
  methods[18].selector = @selector(topologicalSortWithJavaUtilList:);
  methods[19].selector = @selector(addComponentSizesWithJavaUtilList:withADXGridLayout_PackedMap:);
  methods[20].selector = @selector(createArcs);
  methods[21].selector = @selector(computeArcs);
  methods[22].selector = @selector(getArcs);
  methods[23].selector = @selector(relaxWithIntArray:withADXGridLayout_Arc:);
  methods[24].selector = @selector(init__WithIntArray:);
  methods[25].selector = @selector(arcsToStringWithJavaUtilList:);
  methods[26].selector = @selector(logErrorWithNSString:withADXGridLayout_ArcArray:withBooleanArray:);
  methods[27].selector = @selector(solveWithADXGridLayout_ArcArray:withIntArray:);
  methods[28].selector = @selector(solveWithADXGridLayout_ArcArray:withIntArray:withBoolean:);
  methods[29].selector = @selector(computeMarginsWithBoolean:);
  methods[30].selector = @selector(getLeadingMargins);
  methods[31].selector = @selector(getTrailingMargins);
  methods[32].selector = @selector(solveWithIntArray:);
  methods[33].selector = @selector(computeHasWeights);
  methods[34].selector = @selector(hasWeights);
  methods[35].selector = @selector(getDeltas);
  methods[36].selector = @selector(shareOutDeltaWithInt:withFloat:);
  methods[37].selector = @selector(solveAndDistributeSpaceWithIntArray:);
  methods[38].selector = @selector(calculateTotalWeight);
  methods[39].selector = @selector(computeLocationsWithIntArray:);
  methods[40].selector = @selector(getLocations);
  methods[41].selector = @selector(sizeWithIntArray:);
  methods[42].selector = @selector(setParentConstraintsWithInt:withInt:);
  methods[43].selector = @selector(getMeasureWithInt:withInt:);
  methods[44].selector = @selector(getMeasureWithInt:);
  methods[45].selector = @selector(layoutWithInt:);
  methods[46].selector = @selector(invalidateStructure);
  methods[47].selector = @selector(invalidateValues);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXGridLayout;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "NEW", "I", .constantValue.asInt = ADXGridLayout_Axis_NEW, 0x18, -1, -1, -1, -1 },
    { "PENDING", "I", .constantValue.asInt = ADXGridLayout_Axis_PENDING, 0x18, -1, -1, -1, -1 },
    { "COMPLETE", "I", .constantValue.asInt = ADXGridLayout_Axis_COMPLETE, 0x18, -1, -1, -1, -1 },
    { "horizontal_", "Z", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "definedCount_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "maxIndex_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "groupBounds_", "LADXGridLayout_PackedMap;", .constantValue.asLong = 0, 0x0, -1, -1, 46, -1 },
    { "groupBoundsValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "forwardLinks_", "LADXGridLayout_PackedMap;", .constantValue.asLong = 0, 0x0, -1, -1, 47, -1 },
    { "forwardLinksValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "backwardLinks_", "LADXGridLayout_PackedMap;", .constantValue.asLong = 0, 0x0, -1, -1, 47, -1 },
    { "backwardLinksValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leadingMargins_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "leadingMarginsValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "trailingMargins_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "trailingMarginsValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcs_", "[LADXGridLayout_Arc;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "arcsValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "locations_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "locationsValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hasWeights_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "hasWeightsValid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "deltas_", "[I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "orderPreserved_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "parentMin_", "LADXGridLayout_MutableInt;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "parentMax_", "LADXGridLayout_MutableInt;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXGridLayout;Z", "setCount", "I", "setOrderPreserved", "Z", "()Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Spec;Landroidx/gridlayout/widget/GridLayout$Bounds;>;", "createLinks", "(Z)Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;>;", "computeLinks", "LADXGridLayout_PackedMap;Z", "(Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;>;Z)V", "()Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;>;", "include", "LJavaUtilList;LADXGridLayout_Interval;LADXGridLayout_MutableInt;Z", "(Ljava/util/List<Landroidx/gridlayout/widget/GridLayout$Arc;>;Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;Z)V", "LJavaUtilList;LADXGridLayout_Interval;LADXGridLayout_MutableInt;", "(Ljava/util/List<Landroidx/gridlayout/widget/GridLayout$Arc;>;Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;)V", "groupArcsByFirstVertex", "[LADXGridLayout_Arc;", "topologicalSort", "LJavaUtilList;", "(Ljava/util/List<Landroidx/gridlayout/widget/GridLayout$Arc;>;)[Landroidx/gridlayout/widget/GridLayout$Arc;", "addComponentSizes", "LJavaUtilList;LADXGridLayout_PackedMap;", "(Ljava/util/List<Landroidx/gridlayout/widget/GridLayout$Arc;>;Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;>;)V", "relax", "[ILADXGridLayout_Arc;", "init", "[I", "arcsToString", "(Ljava/util/List<Landroidx/gridlayout/widget/GridLayout$Arc;>;)Ljava/lang/String;", "logError", "LNSString;[LADXGridLayout_Arc;[Z", "solve", "[LADXGridLayout_Arc;[I", "[LADXGridLayout_Arc;[IZ", "computeMargins", "shareOutDelta", "IF", "solveAndDistributeSpace", "computeLocations", "size", "setParentConstraints", "II", "getMeasure", "layout", "Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Spec;Landroidx/gridlayout/widget/GridLayout$Bounds;>;", "Landroidx/gridlayout/widget/GridLayout$PackedMap<Landroidx/gridlayout/widget/GridLayout$Interval;Landroidx/gridlayout/widget/GridLayout$MutableInt;>;", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_Axis = { "Axis", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x10, 48, 27, 48, -1, -1, -1, -1 };
  return &_ADXGridLayout_Axis;
}

@end

void ADXGridLayout_Axis_initWithADXGridLayout_withBoolean_(ADXGridLayout_Axis *self, ADXGridLayout *outer$, jboolean horizontal) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->definedCount_ = ADXGridLayout_UNDEFINED;
  self->maxIndex_ = ADXGridLayout_UNDEFINED;
  self->groupBoundsValid_ = false;
  self->forwardLinksValid_ = false;
  self->backwardLinksValid_ = false;
  self->leadingMarginsValid_ = false;
  self->trailingMarginsValid_ = false;
  self->arcsValid_ = false;
  self->locationsValid_ = false;
  self->hasWeightsValid_ = false;
  self->orderPreserved_ = ADXGridLayout_DEFAULT_ORDER_PRESERVED;
  JreStrongAssignAndConsume(&self->parentMin_, new_ADXGridLayout_MutableInt_initWithInt_(0));
  JreStrongAssignAndConsume(&self->parentMax_, new_ADXGridLayout_MutableInt_initWithInt_(-ADXGridLayout_MAX_SIZE));
  self->horizontal_ = horizontal;
}

ADXGridLayout_Axis *new_ADXGridLayout_Axis_initWithADXGridLayout_withBoolean_(ADXGridLayout *outer$, jboolean horizontal) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Axis, initWithADXGridLayout_withBoolean_, outer$, horizontal)
}

ADXGridLayout_Axis *create_ADXGridLayout_Axis_initWithADXGridLayout_withBoolean_(ADXGridLayout *outer$, jboolean horizontal) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Axis, initWithADXGridLayout_withBoolean_, outer$, horizontal)
}

jint ADXGridLayout_Axis_calculateMaxIndex(ADXGridLayout_Axis *self) {
  jint result = -1;
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self->this$0_ getChildAtWithInt:i]);
    ADXGridLayout_LayoutParams *params = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, c);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(params))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(params))->rowSpec_;
    ADXGridLayout_Interval *span = JreRetainedLocalValue(spec->span_);
    result = JavaLangMath_maxWithInt_withInt_(result, ((ADXGridLayout_Interval *) nil_chk(span))->min_);
    result = JavaLangMath_maxWithInt_withInt_(result, span->max_);
    result = JavaLangMath_maxWithInt_withInt_(result, [span size]);
  }
  return result == -1 ? ADXGridLayout_UNDEFINED : result;
}

jint ADXGridLayout_Axis_getMaxIndex(ADXGridLayout_Axis *self) {
  if (self->maxIndex_ == ADXGridLayout_UNDEFINED) {
    self->maxIndex_ = JavaLangMath_maxWithInt_withInt_(0, ADXGridLayout_Axis_calculateMaxIndex(self));
  }
  return self->maxIndex_;
}

ADXGridLayout_PackedMap *ADXGridLayout_Axis_createGroupBounds(ADXGridLayout_Axis *self) {
  ADXGridLayout_Assoc *assoc = ADXGridLayout_Assoc_ofWithIOSClass_withIOSClass_(ADXGridLayout_Spec_class_(), ADXGridLayout_Bounds_class_());
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self->this$0_ getChildAtWithInt:i]);
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, c);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    ADXGridLayout_Bounds *bounds = JreRetainedLocalValue([((ADXGridLayout_Alignment *) nil_chk([spec getAbsoluteAlignmentWithBoolean:self->horizontal_])) getBounds]);
    [((ADXGridLayout_Assoc *) nil_chk(assoc)) putWithId:spec withId:bounds];
  }
  return [((ADXGridLayout_Assoc *) nil_chk(assoc)) pack];
}

void ADXGridLayout_Axis_computeGroupBounds(ADXGridLayout_Axis *self) {
  IOSObjectArray *values = ((ADXGridLayout_PackedMap *) nil_chk(self->groupBounds_))->values_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(values))->size_; i++) {
    [((ADXGridLayout_Bounds *) nil_chk(IOSObjectArray_Get(values, i))) reset];
  }
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self->this$0_ getChildAtWithInt:i]);
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, c);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    jint size = ADXGridLayout_getMeasurementIncludingMarginWithADView_withBoolean_(self->this$0_, c, self->horizontal_) + ((spec->weight_ == 0) ? 0 : IOSIntArray_Get(nil_chk([self getDeltas]), i));
    ADXGridLayout_Bounds_includeWithADXGridLayout_withADView_withADXGridLayout_Spec_withADXGridLayout_Axis_withInt_(nil_chk([((ADXGridLayout_PackedMap *) nil_chk(self->groupBounds_)) getValueWithInt:i]), self->this$0_, c, spec, self, size);
  }
}

ADXGridLayout_PackedMap *ADXGridLayout_Axis_createLinksWithBoolean_(ADXGridLayout_Axis *self, jboolean min) {
  ADXGridLayout_Assoc *result = ADXGridLayout_Assoc_ofWithIOSClass_withIOSClass_(ADXGridLayout_Interval_class_(), ADXGridLayout_MutableInt_class_());
  IOSObjectArray *keys = ((ADXGridLayout_PackedMap *) nil_chk([self getGroupBounds]))->keys_;
  for (jint i = 0, N = ((IOSObjectArray *) nil_chk(keys))->size_; i < N; i++) {
    ADXGridLayout_Interval *span = min ? ((ADXGridLayout_Spec *) nil_chk(IOSObjectArray_Get(keys, i)))->span_ : [((ADXGridLayout_Interval *) nil_chk(((ADXGridLayout_Spec *) nil_chk(IOSObjectArray_Get(keys, i)))->span_)) inverse];
    [((ADXGridLayout_Assoc *) nil_chk(result)) putWithId:span withId:create_ADXGridLayout_MutableInt_init()];
  }
  return [((ADXGridLayout_Assoc *) nil_chk(result)) pack];
}

void ADXGridLayout_Axis_computeLinksWithADXGridLayout_PackedMap_withBoolean_(ADXGridLayout_Axis *self, ADXGridLayout_PackedMap *links, jboolean min) {
  IOSObjectArray *spans = ((ADXGridLayout_PackedMap *) nil_chk(links))->values_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(spans))->size_; i++) {
    [((ADXGridLayout_MutableInt *) nil_chk(IOSObjectArray_Get(spans, i))) reset];
  }
  IOSObjectArray *bounds = ((ADXGridLayout_PackedMap *) nil_chk([self getGroupBounds]))->values_;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(bounds))->size_; i++) {
    jint size = [((ADXGridLayout_Bounds *) nil_chk(IOSObjectArray_Get(bounds, i))) sizeWithBoolean:min];
    ADXGridLayout_MutableInt *valueHolder = JreRetainedLocalValue([links getValueWithInt:i]);
    ((ADXGridLayout_MutableInt *) nil_chk(valueHolder))->value_ = JavaLangMath_maxWithInt_withInt_(valueHolder->value_, min ? size : -size);
  }
}

ADXGridLayout_PackedMap *ADXGridLayout_Axis_getForwardLinks(ADXGridLayout_Axis *self) {
  if (self->forwardLinks_ == nil) {
    JreStrongAssign(&self->forwardLinks_, ADXGridLayout_Axis_createLinksWithBoolean_(self, true));
  }
  if (!self->forwardLinksValid_) {
    ADXGridLayout_Axis_computeLinksWithADXGridLayout_PackedMap_withBoolean_(self, self->forwardLinks_, true);
    self->forwardLinksValid_ = true;
  }
  return self->forwardLinks_;
}

ADXGridLayout_PackedMap *ADXGridLayout_Axis_getBackwardLinks(ADXGridLayout_Axis *self) {
  if (self->backwardLinks_ == nil) {
    JreStrongAssign(&self->backwardLinks_, ADXGridLayout_Axis_createLinksWithBoolean_(self, false));
  }
  if (!self->backwardLinksValid_) {
    ADXGridLayout_Axis_computeLinksWithADXGridLayout_PackedMap_withBoolean_(self, self->backwardLinks_, false);
    self->backwardLinksValid_ = true;
  }
  return self->backwardLinks_;
}

void ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs, ADXGridLayout_Interval *key, ADXGridLayout_MutableInt *size, jboolean ignoreIfAlreadyPresent) {
  if ([((ADXGridLayout_Interval *) nil_chk(key)) size] == 0) {
    return;
  }
  if (ignoreIfAlreadyPresent) {
    for (ADXGridLayout_Arc * __strong arc in nil_chk(arcs)) {
      ADXGridLayout_Interval *span = JreRetainedLocalValue(((ADXGridLayout_Arc *) nil_chk(arc))->span_);
      if ([((ADXGridLayout_Interval *) nil_chk(span)) isEqual:key]) {
        return;
      }
    }
  }
  [((id<JavaUtilList>) nil_chk(arcs)) addWithId:create_ADXGridLayout_Arc_initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_(key, size)];
}

void ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs, ADXGridLayout_Interval *key, ADXGridLayout_MutableInt *size) {
  ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(self, arcs, key, size, true);
}

IOSObjectArray *ADXGridLayout_Axis_topologicalSortWithADXGridLayout_ArcArray_(ADXGridLayout_Axis *self, IOSObjectArray *arcs) {
  return [create_ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(self, arcs) sort];
}

IOSObjectArray *ADXGridLayout_Axis_topologicalSortWithJavaUtilList_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs) {
  return ADXGridLayout_Axis_topologicalSortWithADXGridLayout_ArcArray_(self, [((id<JavaUtilList>) nil_chk(arcs)) toArrayWithNSObjectArray:[IOSObjectArray arrayWithLength:[arcs size] type:ADXGridLayout_Arc_class_()]]);
}

void ADXGridLayout_Axis_addComponentSizesWithJavaUtilList_withADXGridLayout_PackedMap_(ADXGridLayout_Axis *self, id<JavaUtilList> result, ADXGridLayout_PackedMap *links) {
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(((ADXGridLayout_PackedMap *) nil_chk(links))->keys_))->size_; i++) {
    ADXGridLayout_Interval *key = IOSObjectArray_Get(links->keys_, i);
    ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(self, result, key, IOSObjectArray_Get(nil_chk(links->values_), i), false);
  }
}

IOSObjectArray *ADXGridLayout_Axis_createArcs(ADXGridLayout_Axis *self) {
  id<JavaUtilList> mins = create_JavaUtilArrayList_init();
  id<JavaUtilList> maxs = create_JavaUtilArrayList_init();
  ADXGridLayout_Axis_addComponentSizesWithJavaUtilList_withADXGridLayout_PackedMap_(self, mins, ADXGridLayout_Axis_getForwardLinks(self));
  ADXGridLayout_Axis_addComponentSizesWithJavaUtilList_withADXGridLayout_PackedMap_(self, maxs, ADXGridLayout_Axis_getBackwardLinks(self));
  if (self->orderPreserved_) {
    for (jint i = 0; i < [self getCount]; i++) {
      ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_(self, mins, create_ADXGridLayout_Interval_initWithInt_withInt_(i, i + 1), create_ADXGridLayout_MutableInt_initWithInt_(0));
    }
  }
  jint N = [self getCount];
  ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(self, mins, create_ADXGridLayout_Interval_initWithInt_withInt_(0, N), self->parentMin_, false);
  ADXGridLayout_Axis_includeWithJavaUtilList_withADXGridLayout_Interval_withADXGridLayout_MutableInt_withBoolean_(self, maxs, create_ADXGridLayout_Interval_initWithInt_withInt_(N, 0), self->parentMax_, false);
  IOSObjectArray *sMins = ADXGridLayout_Axis_topologicalSortWithJavaUtilList_(self, mins);
  IOSObjectArray *sMaxs = ADXGridLayout_Axis_topologicalSortWithJavaUtilList_(self, maxs);
  return ADXGridLayout_appendWithNSObjectArray_withNSObjectArray_(sMins, sMaxs);
}

void ADXGridLayout_Axis_computeArcs(ADXGridLayout_Axis *self) {
  ADXGridLayout_Axis_getForwardLinks(self);
  ADXGridLayout_Axis_getBackwardLinks(self);
}

jboolean ADXGridLayout_Axis_relaxWithIntArray_withADXGridLayout_Arc_(ADXGridLayout_Axis *self, IOSIntArray *locations, ADXGridLayout_Arc *entry_) {
  if (!((ADXGridLayout_Arc *) nil_chk(entry_))->valid_) {
    return false;
  }
  ADXGridLayout_Interval *span = JreRetainedLocalValue(entry_->span_);
  jint u = ((ADXGridLayout_Interval *) nil_chk(span))->min_;
  jint v = span->max_;
  jint value = ((ADXGridLayout_MutableInt *) nil_chk(entry_->value_))->value_;
  jint candidate = IOSIntArray_Get(nil_chk(locations), u) + value;
  if (candidate > IOSIntArray_Get(locations, v)) {
    *IOSIntArray_GetRef(locations, v) = candidate;
    return true;
  }
  return false;
}

void ADXGridLayout_Axis_init__WithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *locations) {
  JavaUtilArrays_fillWithIntArray_withInt_(locations, 0);
}

NSString *ADXGridLayout_Axis_arcsToStringWithJavaUtilList_(ADXGridLayout_Axis *self, id<JavaUtilList> arcs) {
  NSString *var = self->horizontal_ ? @"x" : @"y";
  JavaLangStringBuilder *result = create_JavaLangStringBuilder_init();
  jboolean first = true;
  for (ADXGridLayout_Arc * __strong arc in nil_chk(arcs)) {
    if (first) {
      first = false;
    }
    else {
      result = [result appendWithNSString:@", "];
    }
    jint src = ((ADXGridLayout_Interval *) nil_chk(((ADXGridLayout_Arc *) nil_chk(arc))->span_))->min_;
    jint dst = arc->span_->max_;
    jint value = ((ADXGridLayout_MutableInt *) nil_chk(arc->value_))->value_;
    [((JavaLangStringBuilder *) nil_chk(result)) appendWithNSString:(src < dst) ? JreStrcat("$IC$I$I", var, dst, '-', var, src, @">=", value) : JreStrcat("$IC$I$I", var, src, '-', var, dst, @"<=", -value)];
  }
  return [result description];
}

void ADXGridLayout_Axis_logErrorWithNSString_withADXGridLayout_ArcArray_withBooleanArray_(ADXGridLayout_Axis *self, NSString *axisName, IOSObjectArray *arcs, IOSBooleanArray *culprits0) {
  id<JavaUtilList> culprits = create_JavaUtilArrayList_init();
  id<JavaUtilList> removed = create_JavaUtilArrayList_init();
  for (jint c = 0; c < ((IOSObjectArray *) nil_chk(arcs))->size_; c++) {
    ADXGridLayout_Arc *arc = IOSObjectArray_Get(arcs, c);
    if (IOSBooleanArray_Get(nil_chk(culprits0), c)) {
      [culprits addWithId:arc];
    }
    if (!((ADXGridLayout_Arc *) nil_chk(arc))->valid_) {
      [removed addWithId:arc];
    }
  }
  [((ADXGridLayout_Printer *) nil_chk(self->this$0_->mPrinter_)) printlnWithNSString:JreStrcat("$$$$$$", axisName, @" constraints: ", ADXGridLayout_Axis_arcsToStringWithJavaUtilList_(self, culprits), @" are inconsistent; permanently removing: ", ADXGridLayout_Axis_arcsToStringWithJavaUtilList_(self, removed), @". ")];
}

jboolean ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_(ADXGridLayout_Axis *self, IOSObjectArray *arcs, IOSIntArray *locations) {
  return ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_withBoolean_(self, arcs, locations, true);
}

jboolean ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_withBoolean_(ADXGridLayout_Axis *self, IOSObjectArray *arcs, IOSIntArray *locations, jboolean modifyOnError) {
  NSString *axisName = self->horizontal_ ? @"horizontal" : @"vertical";
  jint N = [self getCount] + 1;
  IOSBooleanArray *originalCulprits = nil;
  for (jint p = 0; p < ((IOSObjectArray *) nil_chk(arcs))->size_; p++) {
    ADXGridLayout_Axis_init__WithIntArray_(self, locations);
    for (jint i = 0; i < N; i++) {
      jboolean changed = false;
      for (jint j = 0, length = arcs->size_; j < length; j++) {
        changed |= ADXGridLayout_Axis_relaxWithIntArray_withADXGridLayout_Arc_(self, locations, IOSObjectArray_Get(arcs, j));
      }
      if (!changed) {
        if (originalCulprits != nil) {
          ADXGridLayout_Axis_logErrorWithNSString_withADXGridLayout_ArcArray_withBooleanArray_(self, axisName, arcs, originalCulprits);
        }
        return true;
      }
    }
    if (!modifyOnError) {
      return false;
    }
    IOSBooleanArray *culprits = [IOSBooleanArray arrayWithLength:arcs->size_];
    for (jint i = 0; i < N; i++) {
      for (jint j = 0, length = arcs->size_; j < length; j++) {
        *IOSBooleanArray_GetRef(culprits, j) |= ADXGridLayout_Axis_relaxWithIntArray_withADXGridLayout_Arc_(self, locations, IOSObjectArray_Get(arcs, j));
      }
    }
    if (p == 0) {
      originalCulprits = culprits;
    }
    for (jint i = 0; i < arcs->size_; i++) {
      if (IOSBooleanArray_Get(culprits, i)) {
        ADXGridLayout_Arc *arc = IOSObjectArray_Get(arcs, i);
        if (((ADXGridLayout_Interval *) nil_chk(((ADXGridLayout_Arc *) nil_chk(arc))->span_))->min_ < arc->span_->max_) {
          continue;
        }
        arc->valid_ = false;
        break;
      }
    }
  }
  return true;
}

void ADXGridLayout_Axis_computeMarginsWithBoolean_(ADXGridLayout_Axis *self, jboolean leading) {
  IOSIntArray *margins = leading ? self->leadingMargins_ : self->trailingMargins_;
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self->this$0_ getChildAtWithInt:i]);
    if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) continue;
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, c);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    ADXGridLayout_Interval *span = JreRetainedLocalValue(spec->span_);
    jint index = leading ? ((ADXGridLayout_Interval *) nil_chk(span))->min_ : ((ADXGridLayout_Interval *) nil_chk(span))->max_;
    *IOSIntArray_GetRef(margins, index) = JavaLangMath_maxWithInt_withInt_(IOSIntArray_Get(margins, index), [self->this$0_ getMargin1WithADView:c withBoolean:self->horizontal_ withBoolean:leading]);
  }
}

jboolean ADXGridLayout_Axis_solveWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *a) {
  return ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_(self, [self getArcs], a);
}

jboolean ADXGridLayout_Axis_computeHasWeights(ADXGridLayout_Axis *self) {
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *child = [self->this$0_ getChildAtWithInt:i];
    if ([((ADView *) nil_chk(child)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, child);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    if (spec->weight_ != 0) {
      return true;
    }
  }
  return false;
}

jboolean ADXGridLayout_Axis_hasWeights(ADXGridLayout_Axis *self) {
  if (!self->hasWeightsValid_) {
    self->hasWeights_ = ADXGridLayout_Axis_computeHasWeights(self);
    self->hasWeightsValid_ = true;
  }
  return self->hasWeights_;
}

void ADXGridLayout_Axis_shareOutDeltaWithInt_withFloat_(ADXGridLayout_Axis *self, jint totalDelta, jfloat totalWeight) {
  JavaUtilArrays_fillWithIntArray_withInt_(self->deltas_, 0);
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *c = [self->this$0_ getChildAtWithInt:i];
    if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, c);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    jfloat weight = spec->weight_;
    if (weight != 0) {
      jint delta = JavaLangMath_roundWithFloat_((weight * totalDelta / totalWeight));
      *IOSIntArray_GetRef(nil_chk(self->deltas_), i) = delta;
      totalDelta -= delta;
      JreMinusAssignFloatF(&totalWeight, weight);
    }
  }
}

void ADXGridLayout_Axis_solveAndDistributeSpaceWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *a) {
  JavaUtilArrays_fillWithIntArray_withInt_([self getDeltas], 0);
  ADXGridLayout_Axis_solveWithIntArray_(self, a);
  jint deltaMax = ((ADXGridLayout_MutableInt *) nil_chk(self->parentMin_))->value_ * [self->this$0_ getChildCount] + 1;
  if (deltaMax < 2) {
    return;
  }
  jint deltaMin = 0;
  jfloat totalWeight = ADXGridLayout_Axis_calculateTotalWeight(self);
  jint validDelta = -1;
  jboolean validSolution = true;
  while (deltaMin < deltaMax) {
    jint delta = (jint) (JreLongDiv(((jlong) deltaMin + deltaMax), 2));
    [self invalidateValues];
    ADXGridLayout_Axis_shareOutDeltaWithInt_withFloat_(self, delta, totalWeight);
    validSolution = ADXGridLayout_Axis_solveWithADXGridLayout_ArcArray_withIntArray_withBoolean_(self, [self getArcs], a, false);
    if (validSolution) {
      validDelta = delta;
      deltaMin = delta + 1;
    }
    else {
      deltaMax = delta;
    }
  }
  if (validDelta > 0 && !validSolution) {
    [self invalidateValues];
    ADXGridLayout_Axis_shareOutDeltaWithInt_withFloat_(self, validDelta, totalWeight);
    ADXGridLayout_Axis_solveWithIntArray_(self, a);
  }
}

jfloat ADXGridLayout_Axis_calculateTotalWeight(ADXGridLayout_Axis *self) {
  jfloat totalWeight = 0.0f;
  for (jint i = 0, N = [self->this$0_ getChildCount]; i < N; i++) {
    ADView *c = JreRetainedLocalValue([self->this$0_ getChildAtWithInt:i]);
    if ([((ADView *) nil_chk(c)) getVisibility] == ADView_GONE) {
      continue;
    }
    ADXGridLayout_LayoutParams *lp = ADXGridLayout_getLayoutParamsWithADView_(self->this$0_, c);
    ADXGridLayout_Spec *spec = self->horizontal_ ? ((ADXGridLayout_LayoutParams *) nil_chk(lp))->columnSpec_ : ((ADXGridLayout_LayoutParams *) nil_chk(lp))->rowSpec_;
    JrePlusAssignFloatF(&totalWeight, spec->weight_);
  }
  return totalWeight;
}

void ADXGridLayout_Axis_computeLocationsWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *a) {
  if (!ADXGridLayout_Axis_hasWeights(self)) {
    ADXGridLayout_Axis_solveWithIntArray_(self, a);
  }
  else {
    ADXGridLayout_Axis_solveAndDistributeSpaceWithIntArray_(self, a);
  }
  if (!self->orderPreserved_) {
    jint a0 = IOSIntArray_Get(nil_chk(a), 0);
    for (jint i = 0, N = a->size_; i < N; i++) {
      *IOSIntArray_GetRef(a, i) = IOSIntArray_Get(a, i) - a0;
    }
  }
}

jint ADXGridLayout_Axis_sizeWithIntArray_(ADXGridLayout_Axis *self, IOSIntArray *locations) {
  return IOSIntArray_Get(nil_chk(locations), [self getCount]);
}

void ADXGridLayout_Axis_setParentConstraintsWithInt_withInt_(ADXGridLayout_Axis *self, jint min, jint max) {
  ((ADXGridLayout_MutableInt *) nil_chk(self->parentMin_))->value_ = min;
  ((ADXGridLayout_MutableInt *) nil_chk(self->parentMax_))->value_ = -max;
  self->locationsValid_ = false;
}

jint ADXGridLayout_Axis_getMeasureWithInt_withInt_(ADXGridLayout_Axis *self, jint min, jint max) {
  ADXGridLayout_Axis_setParentConstraintsWithInt_withInt_(self, min, max);
  return ADXGridLayout_Axis_sizeWithIntArray_(self, [self getLocations]);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Axis)

@implementation ADXGridLayout_Axis_1

- (instancetype)initWithADXGridLayout_Axis:(ADXGridLayout_Axis *)outer$
                withADXGridLayout_ArcArray:(IOSObjectArray *)capture$0 {
  ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(self, outer$, capture$0);
  return self;
}

- (void)walkWithInt:(jint)loc {
  switch (IOSIntArray_Get(nil_chk(visited_), loc)) {
    case ADXGridLayout_Axis_NEW:
    {
      *IOSIntArray_GetRef(visited_, loc) = ADXGridLayout_Axis_PENDING;
      {
        IOSObjectArray *a__ = IOSObjectArray_Get(nil_chk(arcsByVertex_), loc);
        ADXGridLayout_Arc * const *b__ = ((IOSObjectArray *) nil_chk(a__))->buffer_;
        ADXGridLayout_Arc * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          ADXGridLayout_Arc *arc = *b__++;
          [self walkWithInt:((ADXGridLayout_Interval *) nil_chk(((ADXGridLayout_Arc *) nil_chk(arc))->span_))->max_];
          IOSObjectArray_Set(nil_chk(result_), cursor_--, arc);
        }
      }
      *IOSIntArray_GetRef(nil_chk(visited_), loc) = ADXGridLayout_Axis_COMPLETE;
      break;
    }
    case ADXGridLayout_Axis_PENDING:
    {
      JreAssert(false, @"androidx\\gridlayout\\widget\\GridLayout.java:630 condition failed: assert false;");
      break;
    }
    case ADXGridLayout_Axis_COMPLETE:
    {
      break;
    }
  }
}

- (IOSObjectArray *)sort {
  for (jint loc = 0, N = ((IOSObjectArray *) nil_chk(arcsByVertex_))->size_; loc < N; loc++) {
    [self walkWithInt:loc];
  }
  JreAssert(cursor_ == -1, @"androidx\\gridlayout\\widget\\GridLayout.java:643 condition failed: assert cursor == -1;");
  return result_;
}

- (void)dealloc {
  RELEASE_(result_);
  RELEASE_(arcsByVertex_);
  RELEASE_(visited_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "[LADXGridLayout_Arc;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXGridLayout_Axis:withADXGridLayout_ArcArray:);
  methods[1].selector = @selector(walkWithInt:);
  methods[2].selector = @selector(sort);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "result_", "[LADXGridLayout_Arc;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "cursor_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "arcsByVertex_", "[[LADXGridLayout_Arc;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "visited_", "[I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXGridLayout_Axis;[LADXGridLayout_Arc;", "walk", "I", "LADXGridLayout_Axis;", "topologicalSortWithADXGridLayout_ArcArray:" };
  static const J2ObjcClassInfo _ADXGridLayout_Axis_1 = { "", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x8010, 3, 4, 3, -1, 4, -1, -1 };
  return &_ADXGridLayout_Axis_1;
}

@end

void ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(ADXGridLayout_Axis_1 *self, ADXGridLayout_Axis *outer$, IOSObjectArray *capture$0) {
  NSObject_init(self);
  JreStrongAssignAndConsume(&self->result_, [IOSObjectArray newArrayWithLength:((IOSObjectArray *) nil_chk(capture$0))->size_ type:ADXGridLayout_Arc_class_()]);
  self->cursor_ = self->result_->size_ - 1;
  JreStrongAssign(&self->arcsByVertex_, [outer$ groupArcsByFirstVertexWithADXGridLayout_ArcArray:capture$0]);
  JreStrongAssignAndConsume(&self->visited_, [IOSIntArray newArrayWithLength:[outer$ getCount] + 1]);
}

ADXGridLayout_Axis_1 *new_ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(ADXGridLayout_Axis *outer$, IOSObjectArray *capture$0) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Axis_1, initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_, outer$, capture$0)
}

ADXGridLayout_Axis_1 *create_ADXGridLayout_Axis_1_initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_(ADXGridLayout_Axis *outer$, IOSObjectArray *capture$0) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Axis_1, initWithADXGridLayout_Axis_withADXGridLayout_ArcArray_, outer$, capture$0)
}

J2OBJC_INITIALIZED_DEFN(ADXGridLayout_LayoutParams)

@implementation ADXGridLayout_LayoutParams

- (instancetype)initWithInt:(jint)width
                    withInt:(jint)height
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom
     withADXGridLayout_Spec:(ADXGridLayout_Spec *)rowSpec
     withADXGridLayout_Spec:(ADXGridLayout_Spec *)columnSpec {
  ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(self, width, height, left, top, right, bottom, rowSpec, columnSpec);
  return self;
}

- (instancetype)initWithADXGridLayout_Spec:(ADXGridLayout_Spec *)rowSpec
                    withADXGridLayout_Spec:(ADXGridLayout_Spec *)columnSpec {
  ADXGridLayout_LayoutParams_initWithADXGridLayout_Spec_withADXGridLayout_Spec_(self, rowSpec, columnSpec);
  return self;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_LayoutParams_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  ADXGridLayout_LayoutParams_initWithADViewGroup_LayoutParams_(self, params);
  return self;
}

- (instancetype)initWithADXGridLayout_LayoutParams:(ADXGridLayout_LayoutParams *)source {
  ADXGridLayout_LayoutParams_initWithADXGridLayout_LayoutParams_(self, source);
  return self;
}

- (void)setRowSpecSpanWithADXGridLayout_Interval:(ADXGridLayout_Interval *)span {
  ADXGridLayout_LayoutParams_setRowSpecSpanWithADXGridLayout_Interval_(self, span);
}

- (void)setColumnSpecSpanWithADXGridLayout_Interval:(ADXGridLayout_Interval *)span {
  ADXGridLayout_LayoutParams_setColumnSpecSpanWithADXGridLayout_Interval_(self, span);
}

- (void)dealloc {
  RELEASE_(rowSpec_);
  RELEASE_(columnSpec_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x10, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:withInt:withInt:withInt:withInt:withADXGridLayout_Spec:withADXGridLayout_Spec:);
  methods[1].selector = @selector(initWithADXGridLayout_Spec:withADXGridLayout_Spec:);
  methods[2].selector = @selector(init);
  methods[3].selector = @selector(initWithADViewGroup_LayoutParams:);
  methods[4].selector = @selector(initWithADXGridLayout_LayoutParams:);
  methods[5].selector = @selector(setRowSpecSpanWithADXGridLayout_Interval:);
  methods[6].selector = @selector(setColumnSpecSpanWithADXGridLayout_Interval:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_WIDTH", "I", .constantValue.asInt = ADXGridLayout_LayoutParams_DEFAULT_WIDTH, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_HEIGHT", "I", .constantValue.asInt = ADXGridLayout_LayoutParams_DEFAULT_HEIGHT, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_MARGIN", "I", .constantValue.asInt = ADXGridLayout_LayoutParams_DEFAULT_MARGIN, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_ROW", "I", .constantValue.asInt = ADXGridLayout_LayoutParams_DEFAULT_ROW, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_COLUMN", "I", .constantValue.asInt = ADXGridLayout_LayoutParams_DEFAULT_COLUMN, 0x1a, -1, -1, -1, -1 },
    { "DEFAULT_SPAN", "LADXGridLayout_Interval;", .constantValue.asLong = 0, 0x1a, -1, 7, -1, -1 },
    { "DEFAULT_SPAN_SIZE", "I", .constantValue.asLong = 0, 0x1a, -1, 8, -1, -1 },
    { "rowSpec_", "LADXGridLayout_Spec;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "columnSpec_", "LADXGridLayout_Spec;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IIIIIILADXGridLayout_Spec;LADXGridLayout_Spec;", "LADXGridLayout_Spec;LADXGridLayout_Spec;", "LADViewGroup_LayoutParams;", "LADXGridLayout_LayoutParams;", "setRowSpecSpan", "LADXGridLayout_Interval;", "setColumnSpecSpan", &ADXGridLayout_LayoutParams_DEFAULT_SPAN, &ADXGridLayout_LayoutParams_DEFAULT_SPAN_SIZE, "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_LayoutParams = { "LayoutParams", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x9, 7, 9, 9, -1, -1, -1, -1 };
  return &_ADXGridLayout_LayoutParams;
}

+ (void)initialize {
  if (self == [ADXGridLayout_LayoutParams class]) {
    JreStrongAssignAndConsume(&ADXGridLayout_LayoutParams_DEFAULT_SPAN, new_ADXGridLayout_Interval_initWithInt_withInt_(ADXGridLayout_UNDEFINED, ADXGridLayout_UNDEFINED + 1));
    ADXGridLayout_LayoutParams_DEFAULT_SPAN_SIZE = [ADXGridLayout_LayoutParams_DEFAULT_SPAN size];
    J2OBJC_SET_INITIALIZED(ADXGridLayout_LayoutParams)
  }
}

@end

void ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(ADXGridLayout_LayoutParams *self, jint width, jint height, jint left, jint top, jint right, jint bottom, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) {
  ADViewGroup_MarginLayoutParams_initWithInt_withInt_(self, width, height);
  JreStrongAssign(&self->rowSpec_, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
  JreStrongAssign(&self->columnSpec_, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
  [self setMarginsWithInt:left withInt:top withInt:right withInt:bottom];
  JreStrongAssign(&self->rowSpec_, rowSpec);
  JreStrongAssign(&self->columnSpec_, columnSpec);
}

ADXGridLayout_LayoutParams *new_ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(jint width, jint height, jint left, jint top, jint right, jint bottom, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) {
  J2OBJC_NEW_IMPL(ADXGridLayout_LayoutParams, initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_, width, height, left, top, right, bottom, rowSpec, columnSpec)
}

ADXGridLayout_LayoutParams *create_ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(jint width, jint height, jint left, jint top, jint right, jint bottom, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_LayoutParams, initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_, width, height, left, top, right, bottom, rowSpec, columnSpec)
}

void ADXGridLayout_LayoutParams_initWithADXGridLayout_Spec_withADXGridLayout_Spec_(ADXGridLayout_LayoutParams *self, ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) {
  ADXGridLayout_LayoutParams_initWithInt_withInt_withInt_withInt_withInt_withInt_withADXGridLayout_Spec_withADXGridLayout_Spec_(self, ADXGridLayout_LayoutParams_DEFAULT_WIDTH, ADXGridLayout_LayoutParams_DEFAULT_HEIGHT, ADXGridLayout_LayoutParams_DEFAULT_MARGIN, ADXGridLayout_LayoutParams_DEFAULT_MARGIN, ADXGridLayout_LayoutParams_DEFAULT_MARGIN, ADXGridLayout_LayoutParams_DEFAULT_MARGIN, rowSpec, columnSpec);
}

ADXGridLayout_LayoutParams *new_ADXGridLayout_LayoutParams_initWithADXGridLayout_Spec_withADXGridLayout_Spec_(ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) {
  J2OBJC_NEW_IMPL(ADXGridLayout_LayoutParams, initWithADXGridLayout_Spec_withADXGridLayout_Spec_, rowSpec, columnSpec)
}

ADXGridLayout_LayoutParams *create_ADXGridLayout_LayoutParams_initWithADXGridLayout_Spec_withADXGridLayout_Spec_(ADXGridLayout_Spec *rowSpec, ADXGridLayout_Spec *columnSpec) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_LayoutParams, initWithADXGridLayout_Spec_withADXGridLayout_Spec_, rowSpec, columnSpec)
}

void ADXGridLayout_LayoutParams_init(ADXGridLayout_LayoutParams *self) {
  ADXGridLayout_LayoutParams_initWithADXGridLayout_Spec_withADXGridLayout_Spec_(self, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED), JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
}

ADXGridLayout_LayoutParams *new_ADXGridLayout_LayoutParams_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_LayoutParams, init)
}

ADXGridLayout_LayoutParams *create_ADXGridLayout_LayoutParams_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_LayoutParams, init)
}

void ADXGridLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADXGridLayout_LayoutParams *self, ADViewGroup_LayoutParams *params) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_LayoutParams_(self, params);
  JreStrongAssign(&self->rowSpec_, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
  JreStrongAssign(&self->columnSpec_, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
}

ADXGridLayout_LayoutParams *new_ADXGridLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *params) {
  J2OBJC_NEW_IMPL(ADXGridLayout_LayoutParams, initWithADViewGroup_LayoutParams_, params)
}

ADXGridLayout_LayoutParams *create_ADXGridLayout_LayoutParams_initWithADViewGroup_LayoutParams_(ADViewGroup_LayoutParams *params) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_LayoutParams, initWithADViewGroup_LayoutParams_, params)
}

void ADXGridLayout_LayoutParams_initWithADXGridLayout_LayoutParams_(ADXGridLayout_LayoutParams *self, ADXGridLayout_LayoutParams *source) {
  ADViewGroup_MarginLayoutParams_initWithADViewGroup_MarginLayoutParams_(self, source);
  JreStrongAssign(&self->rowSpec_, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
  JreStrongAssign(&self->columnSpec_, JreLoadStatic(ADXGridLayout_Spec, UNDEFINED));
  JreStrongAssign(&self->rowSpec_, ((ADXGridLayout_LayoutParams *) nil_chk(source))->rowSpec_);
  JreStrongAssign(&self->columnSpec_, source->columnSpec_);
}

ADXGridLayout_LayoutParams *new_ADXGridLayout_LayoutParams_initWithADXGridLayout_LayoutParams_(ADXGridLayout_LayoutParams *source) {
  J2OBJC_NEW_IMPL(ADXGridLayout_LayoutParams, initWithADXGridLayout_LayoutParams_, source)
}

ADXGridLayout_LayoutParams *create_ADXGridLayout_LayoutParams_initWithADXGridLayout_LayoutParams_(ADXGridLayout_LayoutParams *source) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_LayoutParams, initWithADXGridLayout_LayoutParams_, source)
}

void ADXGridLayout_LayoutParams_setRowSpecSpanWithADXGridLayout_Interval_(ADXGridLayout_LayoutParams *self, ADXGridLayout_Interval *span) {
  JreStrongAssign(&self->rowSpec_, ADXGridLayout_Spec_copyWriteSpanWithADXGridLayout_Interval_(nil_chk(self->rowSpec_), span));
}

void ADXGridLayout_LayoutParams_setColumnSpecSpanWithADXGridLayout_Interval_(ADXGridLayout_LayoutParams *self, ADXGridLayout_Interval *span) {
  JreStrongAssign(&self->columnSpec_, ADXGridLayout_Spec_copyWriteSpanWithADXGridLayout_Interval_(nil_chk(self->columnSpec_), span));
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_LayoutParams)

@implementation ADXGridLayout_Arc

- (instancetype)initWithADXGridLayout_Interval:(ADXGridLayout_Interval *)span
                  withADXGridLayout_MutableInt:(ADXGridLayout_MutableInt *)value {
  ADXGridLayout_Arc_initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_(self, span, value);
  return self;
}

- (NSString *)description {
  return JreStrcat("@C$C@", span_, ' ', (!valid_ ? @"+>" : @"->"), ' ', value_);
}

- (void)dealloc {
  RELEASE_(span_);
  RELEASE_(value_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXGridLayout_Interval:withADXGridLayout_MutableInt:);
  methods[1].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "span_", "LADXGridLayout_Interval;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "value_", "LADXGridLayout_MutableInt;", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "valid_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXGridLayout_Interval;LADXGridLayout_MutableInt;", "toString", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_Arc = { "Arc", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x18, 2, 3, 2, -1, -1, -1, -1 };
  return &_ADXGridLayout_Arc;
}

@end

void ADXGridLayout_Arc_initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_(ADXGridLayout_Arc *self, ADXGridLayout_Interval *span, ADXGridLayout_MutableInt *value) {
  NSObject_init(self);
  self->valid_ = true;
  JreStrongAssign(&self->span_, span);
  JreStrongAssign(&self->value_, value);
}

ADXGridLayout_Arc *new_ADXGridLayout_Arc_initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_(ADXGridLayout_Interval *span, ADXGridLayout_MutableInt *value) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Arc, initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_, span, value)
}

ADXGridLayout_Arc *create_ADXGridLayout_Arc_initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_(ADXGridLayout_Interval *span, ADXGridLayout_MutableInt *value) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Arc, initWithADXGridLayout_Interval_withADXGridLayout_MutableInt_, span, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Arc)

@implementation ADXGridLayout_MutableInt

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_MutableInt_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithInt:(jint)value {
  ADXGridLayout_MutableInt_initWithInt_(self, value);
  return self;
}

- (void)reset {
  value_ = JavaLangInteger_MIN_VALUE;
}

- (NSString *)description {
  return JavaLangInteger_toStringWithInt_(value_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithInt:);
  methods[2].selector = @selector(reset);
  methods[3].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "value_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "I", "toString", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_MutableInt = { "MutableInt", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ADXGridLayout_MutableInt;
}

@end

void ADXGridLayout_MutableInt_init(ADXGridLayout_MutableInt *self) {
  NSObject_init(self);
  [self reset];
}

ADXGridLayout_MutableInt *new_ADXGridLayout_MutableInt_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_MutableInt, init)
}

ADXGridLayout_MutableInt *create_ADXGridLayout_MutableInt_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_MutableInt, init)
}

void ADXGridLayout_MutableInt_initWithInt_(ADXGridLayout_MutableInt *self, jint value) {
  NSObject_init(self);
  self->value_ = value;
}

ADXGridLayout_MutableInt *new_ADXGridLayout_MutableInt_initWithInt_(jint value) {
  J2OBJC_NEW_IMPL(ADXGridLayout_MutableInt, initWithInt_, value)
}

ADXGridLayout_MutableInt *create_ADXGridLayout_MutableInt_initWithInt_(jint value) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_MutableInt, initWithInt_, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_MutableInt)

@implementation ADXGridLayout_Assoc

- (instancetype)initWithIOSClass:(IOSClass *)keyType
                    withIOSClass:(IOSClass *)valueType {
  ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(self, keyType, valueType);
  return self;
}

+ (ADXGridLayout_Assoc *)ofWithIOSClass:(IOSClass *)keyType
                           withIOSClass:(IOSClass *)valueType {
  return ADXGridLayout_Assoc_ofWithIOSClass_withIOSClass_(keyType, valueType);
}

- (void)putWithId:(id)key
           withId:(id)value {
  [self addWithId:ADPair_createWithId_withId_(key, value)];
}

- (ADXGridLayout_PackedMap *)pack {
  jint N = [self size];
  IOSObjectArray *keys = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(keyType_, N), IOSClass_arrayType(NSObject_class_(), 1));
  IOSObjectArray *values = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(valueType_, N), IOSClass_arrayType(NSObject_class_(), 1));
  for (jint i = 0; i < N; i++) {
    IOSObjectArray_Set(nil_chk(keys), i, ((ADPair *) nil_chk([self getWithInt:i]))->first_);
    IOSObjectArray_Set(nil_chk(values), i, ((ADPair *) nil_chk([self getWithInt:i]))->second_);
  }
  return create_ADXGridLayout_PackedMap_initWithNSObjectArray_withNSObjectArray_(keys, values);
}

- (NSUInteger)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(NSUInteger)len {
  return JreDefaultFastEnumeration(self, state, stackbuf);
}

- (void)dealloc {
  RELEASE_(keyType_);
  RELEASE_(valueType_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, 1, -1, -1 },
    { NULL, "LADXGridLayout_Assoc;", 0x9, 2, 0, -1, 3, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "LADXGridLayout_PackedMap;", 0x1, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithIOSClass:withIOSClass:);
  methods[1].selector = @selector(ofWithIOSClass:withIOSClass:);
  methods[2].selector = @selector(putWithId:withId:);
  methods[3].selector = @selector(pack);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "keyType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 8, -1 },
    { "valueType_", "LIOSClass;", .constantValue.asLong = 0, 0x12, -1, -1, 9, -1 },
  };
  static const void *ptrTable[] = { "LIOSClass;LIOSClass;", "(Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;)V", "of", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>(Ljava/lang/Class<TK;>;Ljava/lang/Class<TV;>;)Landroidx/gridlayout/widget/GridLayout$Assoc<TK;TV;>;", "put", "LNSObject;LNSObject;", "(TK;TV;)V", "()Landroidx/gridlayout/widget/GridLayout$PackedMap<TK;TV;>;", "Ljava/lang/Class<TK;>;", "Ljava/lang/Class<TV;>;", "LADXGridLayout;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/ArrayList<Lr/android/util/Pair<TK;TV;>;>;" };
  static const J2ObjcClassInfo _ADXGridLayout_Assoc = { "Assoc", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x18, 4, 2, 10, -1, -1, 11, -1 };
  return &_ADXGridLayout_Assoc;
}

@end

void ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(ADXGridLayout_Assoc *self, IOSClass *keyType, IOSClass *valueType) {
  JavaUtilArrayList_init(self);
  JreStrongAssign(&self->keyType_, keyType);
  JreStrongAssign(&self->valueType_, valueType);
}

ADXGridLayout_Assoc *new_ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(IOSClass *keyType, IOSClass *valueType) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Assoc, initWithIOSClass_withIOSClass_, keyType, valueType)
}

ADXGridLayout_Assoc *create_ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(IOSClass *keyType, IOSClass *valueType) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Assoc, initWithIOSClass_withIOSClass_, keyType, valueType)
}

ADXGridLayout_Assoc *ADXGridLayout_Assoc_ofWithIOSClass_withIOSClass_(IOSClass *keyType, IOSClass *valueType) {
  ADXGridLayout_Assoc_initialize();
  return create_ADXGridLayout_Assoc_initWithIOSClass_withIOSClass_(keyType, valueType);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Assoc)

@implementation ADXGridLayout_PackedMap

- (instancetype)initWithNSObjectArray:(IOSObjectArray *)keys
                    withNSObjectArray:(IOSObjectArray *)values {
  ADXGridLayout_PackedMap_initWithNSObjectArray_withNSObjectArray_(self, keys, values);
  return self;
}

- (id)getValueWithInt:(jint)i {
  return IOSObjectArray_Get(nil_chk(values_), IOSIntArray_Get(nil_chk(index_), i));
}

+ (IOSIntArray *)createIndexWithNSObjectArray:(IOSObjectArray *)keys {
  return ADXGridLayout_PackedMap_createIndexWithNSObjectArray_(keys);
}

+ (IOSObjectArray *)compactWithNSObjectArray:(IOSObjectArray *)a
                                withIntArray:(IOSIntArray *)index {
  return ADXGridLayout_PackedMap_compactWithNSObjectArray_withIntArray_(a, index);
}

- (void)dealloc {
  RELEASE_(index_);
  RELEASE_(keys_);
  RELEASE_(values_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, 1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 2, 3, -1, 4, -1, -1 },
    { NULL, "[I", 0xa, 5, 6, -1, 7, -1, -1 },
    { NULL, "[LNSObject;", 0xa, 8, 9, -1, 10, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSObjectArray:withNSObjectArray:);
  methods[1].selector = @selector(getValueWithInt:);
  methods[2].selector = @selector(createIndexWithNSObjectArray:);
  methods[3].selector = @selector(compactWithNSObjectArray:withIntArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "index_", "[I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "keys_", "[LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, 11, -1 },
    { "values_", "[LNSObject;", .constantValue.asLong = 0, 0x11, -1, -1, 12, -1 },
  };
  static const void *ptrTable[] = { "[LNSObject;[LNSObject;", "([TK;[TV;)V", "getValue", "I", "(I)TV;", "createIndex", "[LNSObject;", "<K:Ljava/lang/Object;>([TK;)[I", "compact", "[LNSObject;[I", "<K:Ljava/lang/Object;>([TK;[I)[TK;", "[TK;", "[TV;", "LADXGridLayout;", "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;" };
  static const J2ObjcClassInfo _ADXGridLayout_PackedMap = { "PackedMap", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x18, 4, 3, 13, -1, -1, 14, -1 };
  return &_ADXGridLayout_PackedMap;
}

@end

void ADXGridLayout_PackedMap_initWithNSObjectArray_withNSObjectArray_(ADXGridLayout_PackedMap *self, IOSObjectArray *keys, IOSObjectArray *values) {
  NSObject_init(self);
  JreStrongAssign(&self->index_, ADXGridLayout_PackedMap_createIndexWithNSObjectArray_(keys));
  JreStrongAssign(&self->keys_, ADXGridLayout_PackedMap_compactWithNSObjectArray_withIntArray_(keys, self->index_));
  JreStrongAssign(&self->values_, ADXGridLayout_PackedMap_compactWithNSObjectArray_withIntArray_(values, self->index_));
}

ADXGridLayout_PackedMap *new_ADXGridLayout_PackedMap_initWithNSObjectArray_withNSObjectArray_(IOSObjectArray *keys, IOSObjectArray *values) {
  J2OBJC_NEW_IMPL(ADXGridLayout_PackedMap, initWithNSObjectArray_withNSObjectArray_, keys, values)
}

ADXGridLayout_PackedMap *create_ADXGridLayout_PackedMap_initWithNSObjectArray_withNSObjectArray_(IOSObjectArray *keys, IOSObjectArray *values) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_PackedMap, initWithNSObjectArray_withNSObjectArray_, keys, values)
}

IOSIntArray *ADXGridLayout_PackedMap_createIndexWithNSObjectArray_(IOSObjectArray *keys) {
  ADXGridLayout_PackedMap_initialize();
  jint size = ((IOSObjectArray *) nil_chk(keys))->size_;
  IOSIntArray *result = [IOSIntArray arrayWithLength:size];
  id<JavaUtilMap> keyToIndex = create_JavaUtilHashMap_init();
  for (jint i = 0; i < size; i++) {
    id key = IOSObjectArray_Get(keys, i);
    JavaLangInteger *index = JreRetainedLocalValue([keyToIndex getWithId:key]);
    if (index == nil) {
      index = JavaLangInteger_valueOfWithInt_([keyToIndex size]);
      [keyToIndex putWithId:key withId:index];
    }
    *IOSIntArray_GetRef(result, i) = [index intValue];
  }
  return result;
}

IOSObjectArray *ADXGridLayout_PackedMap_compactWithNSObjectArray_withIntArray_(IOSObjectArray *a, IOSIntArray *index) {
  ADXGridLayout_PackedMap_initialize();
  jint size = ((IOSObjectArray *) nil_chk(a))->size_;
  IOSClass *componentType = [[a java_getClass] getComponentType];
  IOSObjectArray *result = (IOSObjectArray *) cast_check(JavaLangReflectArray_newInstanceWithIOSClass_withInt_(componentType, ADXGridLayout_max2WithIntArray_withInt_(index, -1) + 1), IOSClass_arrayType(NSObject_class_(), 1));
  for (jint i = 0; i < size; i++) {
    IOSObjectArray_Set(nil_chk(result), IOSIntArray_Get(nil_chk(index), i), IOSObjectArray_Get(a, i));
  }
  return result;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_PackedMap)

@implementation ADXGridLayout_Bounds

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_Bounds_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  ADXGridLayout_Bounds_reset(self);
}

- (void)includeWithInt:(jint)before
               withInt:(jint)after {
  ADXGridLayout_Bounds_includeWithInt_withInt_(self, before, after);
}

- (jint)sizeWithBoolean:(jboolean)min {
  return ADXGridLayout_Bounds_sizeWithBoolean_(self, min);
}

- (jint)getOffsetWithADXGridLayout:(ADXGridLayout *)gl
                        withADView:(ADView *)c
       withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)a
                           withInt:(jint)size
                       withBoolean:(jboolean)horizontal {
  return ADXGridLayout_Bounds_getOffsetWithADXGridLayout_withADView_withADXGridLayout_Alignment_withInt_withBoolean_(self, gl, c, a, size, horizontal);
}

- (void)includeWithADXGridLayout:(ADXGridLayout *)gl
                      withADView:(ADView *)c
          withADXGridLayout_Spec:(ADXGridLayout_Spec *)spec
          withADXGridLayout_Axis:(ADXGridLayout_Axis *)axis
                         withInt:(jint)size {
  ADXGridLayout_Bounds_includeWithADXGridLayout_withADView_withADXGridLayout_Spec_withADXGridLayout_Axis_withInt_(self, gl, c, spec, axis, size);
}

- (NSString *)description {
  return JreStrcat("$I$IC", @"Bounds{before=", before_, @", after=", after_, '}');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 0, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 7, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(includeWithInt:withInt:);
  methods[3].selector = @selector(sizeWithBoolean:);
  methods[4].selector = @selector(getOffsetWithADXGridLayout:withADView:withADXGridLayout_Alignment:withInt:withBoolean:);
  methods[5].selector = @selector(includeWithADXGridLayout:withADView:withADXGridLayout_Spec:withADXGridLayout_Axis:withInt:);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "before_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "after_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "flexibility_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "include", "II", "size", "Z", "getOffset", "LADXGridLayout;LADView;LADXGridLayout_Alignment;IZ", "LADXGridLayout;LADView;LADXGridLayout_Spec;LADXGridLayout_Axis;I", "toString", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_Bounds = { "Bounds", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x8, 7, 3, 8, -1, -1, -1, -1 };
  return &_ADXGridLayout_Bounds;
}

@end

void ADXGridLayout_Bounds_init(ADXGridLayout_Bounds *self) {
  NSObject_init(self);
  [self reset];
}

ADXGridLayout_Bounds *new_ADXGridLayout_Bounds_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_Bounds, init)
}

ADXGridLayout_Bounds *create_ADXGridLayout_Bounds_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Bounds, init)
}

void ADXGridLayout_Bounds_reset(ADXGridLayout_Bounds *self) {
  self->before_ = JavaLangInteger_MIN_VALUE;
  self->after_ = JavaLangInteger_MIN_VALUE;
  self->flexibility_ = ADXGridLayout_CAN_STRETCH;
}

void ADXGridLayout_Bounds_includeWithInt_withInt_(ADXGridLayout_Bounds *self, jint before, jint after) {
  self->before_ = JavaLangMath_maxWithInt_withInt_(self->before_, before);
  self->after_ = JavaLangMath_maxWithInt_withInt_(self->after_, after);
}

jint ADXGridLayout_Bounds_sizeWithBoolean_(ADXGridLayout_Bounds *self, jboolean min) {
  if (!min) {
    if (ADXGridLayout_canStretchWithInt_(self->flexibility_)) {
      return ADXGridLayout_MAX_SIZE;
    }
  }
  return self->before_ + self->after_;
}

jint ADXGridLayout_Bounds_getOffsetWithADXGridLayout_withADView_withADXGridLayout_Alignment_withInt_withBoolean_(ADXGridLayout_Bounds *self, ADXGridLayout *gl, ADView *c, ADXGridLayout_Alignment *a, jint size, jboolean horizontal) {
  return self->before_ - [((ADXGridLayout_Alignment *) nil_chk(a)) getAlignmentValueWithADView:c withInt:size withInt:ADXViewGroupCompat_getLayoutModeWithADViewGroup_(gl)];
}

void ADXGridLayout_Bounds_includeWithADXGridLayout_withADView_withADXGridLayout_Spec_withADXGridLayout_Axis_withInt_(ADXGridLayout_Bounds *self, ADXGridLayout *gl, ADView *c, ADXGridLayout_Spec *spec, ADXGridLayout_Axis *axis, jint size) {
  self->flexibility_ &= ADXGridLayout_Spec_getFlexibility(nil_chk(spec));
  jboolean horizontal = ((ADXGridLayout_Axis *) nil_chk(axis))->horizontal_;
  ADXGridLayout_Alignment *alignment = JreRetainedLocalValue([spec getAbsoluteAlignmentWithBoolean:horizontal]);
  jint before = [((ADXGridLayout_Alignment *) nil_chk(alignment)) getAlignmentValueWithADView:c withInt:size withInt:ADXViewGroupCompat_getLayoutModeWithADViewGroup_(gl)];
  [self includeWithInt:before withInt:size - before];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Bounds)

@implementation ADXGridLayout_Interval

- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max {
  ADXGridLayout_Interval_initWithInt_withInt_(self, min, max);
  return self;
}

- (jint)size {
  return max_ - min_;
}

- (ADXGridLayout_Interval *)inverse {
  return create_ADXGridLayout_Interval_initWithInt_withInt_(max_, min_);
}

- (jboolean)isEqual:(id)that {
  if (self == that) {
    return true;
  }
  if (that == nil || [self java_getClass] != [that java_getClass]) {
    return false;
  }
  ADXGridLayout_Interval *interval = (ADXGridLayout_Interval *) cast_chk(that, [ADXGridLayout_Interval class]);
  if (max_ != interval->max_) {
    return false;
  }
  if (min_ != interval->min_) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = min_;
  result = 31 * result + max_;
  return result;
}

- (NSString *)description {
  return JreStrcat("CI$IC", '[', min_, @", ", max_, ']');
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Interval;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 4, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withInt:);
  methods[1].selector = @selector(size);
  methods[2].selector = @selector(inverse);
  methods[3].selector = @selector(isEqual:);
  methods[4].selector = @selector(hash);
  methods[5].selector = @selector(description);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "min_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
    { "max_", "I", .constantValue.asLong = 0, 0x11, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "II", "equals", "LNSObject;", "hashCode", "toString", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_Interval = { "Interval", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x18, 6, 2, 5, -1, -1, -1, -1 };
  return &_ADXGridLayout_Interval;
}

@end

void ADXGridLayout_Interval_initWithInt_withInt_(ADXGridLayout_Interval *self, jint min, jint max) {
  NSObject_init(self);
  self->min_ = min;
  self->max_ = max;
}

ADXGridLayout_Interval *new_ADXGridLayout_Interval_initWithInt_withInt_(jint min, jint max) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Interval, initWithInt_withInt_, min, max)
}

ADXGridLayout_Interval *create_ADXGridLayout_Interval_initWithInt_withInt_(jint min, jint max) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Interval, initWithInt_withInt_, min, max)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Interval)

J2OBJC_INITIALIZED_DEFN(ADXGridLayout_Spec)

ADXGridLayout_Spec *ADXGridLayout_Spec_UNDEFINED;

@implementation ADXGridLayout_Spec

- (instancetype)initWithBoolean:(jboolean)startDefined
     withADXGridLayout_Interval:(ADXGridLayout_Interval *)span
    withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment
                      withFloat:(jfloat)weight {
  ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(self, startDefined, span, alignment, weight);
  return self;
}

- (instancetype)initWithBoolean:(jboolean)startDefined
                        withInt:(jint)start
                        withInt:(jint)size
    withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment
                      withFloat:(jfloat)weight {
  ADXGridLayout_Spec_initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_(self, startDefined, start, size, alignment, weight);
  return self;
}

- (ADXGridLayout_Alignment *)getAbsoluteAlignmentWithBoolean:(jboolean)horizontal {
  if (alignment_ != JreLoadStatic(ADXGridLayout, UNDEFINED_ALIGNMENT)) {
    return alignment_;
  }
  if (weight_ == 0.0f) {
    return horizontal ? JreLoadStatic(ADXGridLayout, START) : JreLoadStatic(ADXGridLayout, BASELINE);
  }
  return JreLoadStatic(ADXGridLayout, FILL);
}

- (ADXGridLayout_Spec *)copyWriteSpanWithADXGridLayout_Interval:(ADXGridLayout_Interval *)span {
  return ADXGridLayout_Spec_copyWriteSpanWithADXGridLayout_Interval_(self, span);
}

- (ADXGridLayout_Spec *)copyWriteAlignmentWithADXGridLayout_Alignment:(ADXGridLayout_Alignment *)alignment {
  return create_ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(startDefined_, span_, alignment, weight_);
}

- (jint)getFlexibility {
  return ADXGridLayout_Spec_getFlexibility(self);
}

- (jboolean)isEqual:(id)that {
  if (self == that) {
    return true;
  }
  if (that == nil || [self java_getClass] != [that java_getClass]) {
    return false;
  }
  ADXGridLayout_Spec *spec = (ADXGridLayout_Spec *) cast_chk(that, [ADXGridLayout_Spec class]);
  if (![((ADXGridLayout_Alignment *) nil_chk(alignment_)) isEqual:spec->alignment_]) {
    return false;
  }
  if (![((ADXGridLayout_Interval *) nil_chk(span_)) isEqual:spec->span_]) {
    return false;
  }
  return true;
}

- (NSUInteger)hash {
  jint result = ((jint) [((ADXGridLayout_Interval *) nil_chk(span_)) hash]);
  result = 31 * result + ((jint) [((ADXGridLayout_Alignment *) nil_chk(alignment_)) hash]);
  return result;
}

- (void)dealloc {
  RELEASE_(span_);
  RELEASE_(alignment_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x0, -1, 1, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Alignment;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x10, 4, 5, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Spec;", 0x10, 6, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x10, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 10, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithBoolean:withADXGridLayout_Interval:withADXGridLayout_Alignment:withFloat:);
  methods[1].selector = @selector(initWithBoolean:withInt:withInt:withADXGridLayout_Alignment:withFloat:);
  methods[2].selector = @selector(getAbsoluteAlignmentWithBoolean:);
  methods[3].selector = @selector(copyWriteSpanWithADXGridLayout_Interval:);
  methods[4].selector = @selector(copyWriteAlignmentWithADXGridLayout_Alignment:);
  methods[5].selector = @selector(getFlexibility);
  methods[6].selector = @selector(isEqual:);
  methods[7].selector = @selector(hash);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "UNDEFINED", "LADXGridLayout_Spec;", .constantValue.asLong = 0, 0x18, -1, 11, -1, -1 },
    { "DEFAULT_WEIGHT", "F", .constantValue.asFloat = ADXGridLayout_Spec_DEFAULT_WEIGHT, 0x18, -1, -1, -1, -1 },
    { "startDefined_", "Z", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "span_", "LADXGridLayout_Interval;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "alignment_", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
    { "weight_", "F", .constantValue.asLong = 0, 0x10, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "ZLADXGridLayout_Interval;LADXGridLayout_Alignment;F", "ZIILADXGridLayout_Alignment;F", "getAbsoluteAlignment", "Z", "copyWriteSpan", "LADXGridLayout_Interval;", "copyWriteAlignment", "LADXGridLayout_Alignment;", "equals", "LNSObject;", "hashCode", &ADXGridLayout_Spec_UNDEFINED, "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_Spec = { "Spec", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x9, 8, 6, 12, -1, -1, -1, -1 };
  return &_ADXGridLayout_Spec;
}

+ (void)initialize {
  if (self == [ADXGridLayout_Spec class]) {
    JreStrongAssign(&ADXGridLayout_Spec_UNDEFINED, ADXGridLayout_specWithInt_(ADXGridLayout_UNDEFINED));
    J2OBJC_SET_INITIALIZED(ADXGridLayout_Spec)
  }
}

@end

void ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(ADXGridLayout_Spec *self, jboolean startDefined, ADXGridLayout_Interval *span, ADXGridLayout_Alignment *alignment, jfloat weight) {
  NSObject_init(self);
  self->startDefined_ = startDefined;
  JreStrongAssign(&self->span_, span);
  JreStrongAssign(&self->alignment_, alignment);
  self->weight_ = weight;
}

ADXGridLayout_Spec *new_ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(jboolean startDefined, ADXGridLayout_Interval *span, ADXGridLayout_Alignment *alignment, jfloat weight) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Spec, initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_, startDefined, span, alignment, weight)
}

ADXGridLayout_Spec *create_ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(jboolean startDefined, ADXGridLayout_Interval *span, ADXGridLayout_Alignment *alignment, jfloat weight) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Spec, initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_, startDefined, span, alignment, weight)
}

void ADXGridLayout_Spec_initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_(ADXGridLayout_Spec *self, jboolean startDefined, jint start, jint size, ADXGridLayout_Alignment *alignment, jfloat weight) {
  ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(self, startDefined, create_ADXGridLayout_Interval_initWithInt_withInt_(start, start + size), alignment, weight);
}

ADXGridLayout_Spec *new_ADXGridLayout_Spec_initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_(jboolean startDefined, jint start, jint size, ADXGridLayout_Alignment *alignment, jfloat weight) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Spec, initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_, startDefined, start, size, alignment, weight)
}

ADXGridLayout_Spec *create_ADXGridLayout_Spec_initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_(jboolean startDefined, jint start, jint size, ADXGridLayout_Alignment *alignment, jfloat weight) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Spec, initWithBoolean_withInt_withInt_withADXGridLayout_Alignment_withFloat_, startDefined, start, size, alignment, weight)
}

ADXGridLayout_Spec *ADXGridLayout_Spec_copyWriteSpanWithADXGridLayout_Interval_(ADXGridLayout_Spec *self, ADXGridLayout_Interval *span) {
  return create_ADXGridLayout_Spec_initWithBoolean_withADXGridLayout_Interval_withADXGridLayout_Alignment_withFloat_(self->startDefined_, span, self->alignment_, self->weight_);
}

jint ADXGridLayout_Spec_getFlexibility(ADXGridLayout_Spec *self) {
  return (self->alignment_ == JreLoadStatic(ADXGridLayout, UNDEFINED_ALIGNMENT) && self->weight_ == 0) ? ADXGridLayout_INFLEXIBLE : ADXGridLayout_CAN_STRETCH;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Spec)

@implementation ADXGridLayout_Alignment

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_Alignment_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (jint)getSizeInCellWithADView:(ADView *)view
                        withInt:(jint)viewSize
                        withInt:(jint)cellSize {
  return viewSize;
}

- (ADXGridLayout_Bounds *)getBounds {
  return create_ADXGridLayout_Bounds_init();
}

- (NSString *)getDebugString {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (NSString *)description {
  return JreStrcat("$$", @"Alignment:", [self getDebugString]);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x400, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 4, 3, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Bounds;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x400, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 5, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getSizeInCellWithADView:withInt:withInt:);
  methods[4].selector = @selector(getBounds);
  methods[5].selector = @selector(getDebugString);
  methods[6].selector = @selector(description);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "getSizeInCell", "toString", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_Alignment = { "Alignment", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x409, 7, 0, 6, -1, -1, -1, -1 };
  return &_ADXGridLayout_Alignment;
}

@end

void ADXGridLayout_Alignment_init(ADXGridLayout_Alignment *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Alignment)

@implementation ADXGridLayout_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  return ADXGridLayout_UNDEFINED;
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  return ADXGridLayout_UNDEFINED;
}

- (NSString *)getDebugString {
  return @"UNDEFINED";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_1 = { "", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXGridLayout_1;
}

@end

void ADXGridLayout_1_init(ADXGridLayout_1 *self) {
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_1 *new_ADXGridLayout_1_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_1, init)
}

ADXGridLayout_1 *create_ADXGridLayout_1_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_1, init)
}

@implementation ADXGridLayout_2

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_2_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  return 0;
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  return 0;
}

- (NSString *)getDebugString {
  return @"LEADING";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_2 = { "", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXGridLayout_2;
}

@end

void ADXGridLayout_2_init(ADXGridLayout_2 *self) {
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_2 *new_ADXGridLayout_2_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_2, init)
}

ADXGridLayout_2 *create_ADXGridLayout_2_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_2, init)
}

@implementation ADXGridLayout_3

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_3_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  return cellDelta;
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  return viewSize;
}

- (NSString *)getDebugString {
  return @"TRAILING";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_3 = { "", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXGridLayout_3;
}

@end

void ADXGridLayout_3_init(ADXGridLayout_3 *self) {
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_3 *new_ADXGridLayout_3_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_3, init)
}

ADXGridLayout_3 *create_ADXGridLayout_3_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_3, init)
}

@implementation ADXGridLayout_4

- (instancetype)initWithADXGridLayout_Alignment:(ADXGridLayout_Alignment *)capture$0
                    withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)capture$1 {
  ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(self, capture$0, capture$1);
  return self;
}

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  jboolean isLayoutRtl = ADXViewCompat_getLayoutDirectionWithADView_(view) == ADXViewCompat_LAYOUT_DIRECTION_RTL;
  return [(!isLayoutRtl ? val$ltr_ : val$rtl_) getGravityOffsetWithADView:view withInt:cellDelta];
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  jboolean isLayoutRtl = ADXViewCompat_getLayoutDirectionWithADView_(view) == ADXViewCompat_LAYOUT_DIRECTION_RTL;
  return [(!isLayoutRtl ? val$ltr_ : val$rtl_) getAlignmentValueWithADView:view withInt:viewSize withInt:mode];
}

- (NSString *)getDebugString {
  return JreStrcat("$$$$C", @"SWITCHING[L:", [((ADXGridLayout_Alignment *) nil_chk(val$ltr_)) getDebugString], @", R:", [((ADXGridLayout_Alignment *) nil_chk(val$rtl_)) getDebugString], ']');
}

- (void)dealloc {
  RELEASE_(val$ltr_);
  RELEASE_(val$rtl_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXGridLayout_Alignment:withADXGridLayout_Alignment:);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "val$ltr_", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "val$rtl_", "LADXGridLayout_Alignment;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXGridLayout_Alignment;LADXGridLayout_Alignment;", "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "LADXGridLayout;", "createSwitchingAlignmentWithADXGridLayout_Alignment:withADXGridLayout_Alignment:" };
  static const J2ObjcClassInfo _ADXGridLayout_4 = { "", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x8018, 4, 2, 5, -1, 6, -1, -1 };
  return &_ADXGridLayout_4;
}

@end

void ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_4 *self, ADXGridLayout_Alignment *capture$0, ADXGridLayout_Alignment *capture$1) {
  JreStrongAssign(&self->val$ltr_, capture$0);
  JreStrongAssign(&self->val$rtl_, capture$1);
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_4 *new_ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_Alignment *capture$0, ADXGridLayout_Alignment *capture$1) {
  J2OBJC_NEW_IMPL(ADXGridLayout_4, initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_, capture$0, capture$1)
}

ADXGridLayout_4 *create_ADXGridLayout_4_initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_(ADXGridLayout_Alignment *capture$0, ADXGridLayout_Alignment *capture$1) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_4, initWithADXGridLayout_Alignment_withADXGridLayout_Alignment_, capture$0, capture$1)
}

@implementation ADXGridLayout_5

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_5_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  return JreRShift32(cellDelta, 1);
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  return JreRShift32(viewSize, 1);
}

- (NSString *)getDebugString {
  return @"CENTER";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_5 = { "", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x8018, 4, 0, 4, -1, -1, -1, -1 };
  return &_ADXGridLayout_5;
}

@end

void ADXGridLayout_5_init(ADXGridLayout_5 *self) {
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_5 *new_ADXGridLayout_5_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_5, init)
}

ADXGridLayout_5 *create_ADXGridLayout_5_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_5, init)
}

@implementation ADXGridLayout_6

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_6_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  return 0;
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  if ([((ADView *) nil_chk(view)) getVisibility] == ADView_GONE) {
    return 0;
  }
  jint baseline = [view getBaseline];
  return baseline == -1 ? ADXGridLayout_UNDEFINED : baseline;
}

- (ADXGridLayout_Bounds *)getBounds {
  return create_ADXGridLayout_6_1_init();
}

- (NSString *)getDebugString {
  return @"BASELINE";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXGridLayout_Bounds;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getBounds);
  methods[4].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_6 = { "", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x8018, 5, 0, 4, -1, -1, -1, -1 };
  return &_ADXGridLayout_6;
}

@end

void ADXGridLayout_6_init(ADXGridLayout_6 *self) {
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_6 *new_ADXGridLayout_6_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_6, init)
}

ADXGridLayout_6 *create_ADXGridLayout_6_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_6, init)
}

@implementation ADXGridLayout_6_1

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_6_1_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)reset {
  ADXGridLayout_Bounds_reset(self);
  size_ = JavaLangInteger_MIN_VALUE;
}

- (void)includeWithInt:(jint)before
               withInt:(jint)after {
  ADXGridLayout_Bounds_includeWithInt_withInt_(self, before, after);
  size_ = JavaLangMath_maxWithInt_withInt_(size_, before + after);
}

- (jint)sizeWithBoolean:(jboolean)min {
  return JavaLangMath_maxWithInt_withInt_(ADXGridLayout_Bounds_sizeWithBoolean_(self, min), size_);
}

- (jint)getOffsetWithADXGridLayout:(ADXGridLayout *)gl
                        withADView:(ADView *)c
       withADXGridLayout_Alignment:(ADXGridLayout_Alignment *)a
                           withInt:(jint)size
                       withBoolean:(jboolean)hrz {
  return JavaLangMath_maxWithInt_withInt_(0, ADXGridLayout_Bounds_getOffsetWithADXGridLayout_withADView_withADXGridLayout_Alignment_withInt_withBoolean_(self, gl, c, a, size, hrz));
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x4, 4, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(reset);
  methods[2].selector = @selector(includeWithInt:withInt:);
  methods[3].selector = @selector(sizeWithBoolean:);
  methods[4].selector = @selector(getOffsetWithADXGridLayout:withADView:withADXGridLayout_Alignment:withInt:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "size_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "include", "II", "size", "Z", "getOffset", "LADXGridLayout;LADView;LADXGridLayout_Alignment;IZ", "LADXGridLayout_6;", "getBounds" };
  static const J2ObjcClassInfo _ADXGridLayout_6_1 = { "", "androidx.gridlayout.widget", ptrTable, methods, fields, 7, 0x8010, 5, 1, 6, -1, 7, -1, -1 };
  return &_ADXGridLayout_6_1;
}

@end

void ADXGridLayout_6_1_init(ADXGridLayout_6_1 *self) {
  ADXGridLayout_Bounds_init(self);
}

ADXGridLayout_6_1 *new_ADXGridLayout_6_1_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_6_1, init)
}

ADXGridLayout_6_1 *create_ADXGridLayout_6_1_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_6_1, init)
}

@implementation ADXGridLayout_7

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGridLayout_7_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getGravityOffsetWithADView:(ADView *)view
                           withInt:(jint)cellDelta {
  return 0;
}

- (jint)getAlignmentValueWithADView:(ADView *)view
                            withInt:(jint)viewSize
                            withInt:(jint)mode {
  return ADXGridLayout_UNDEFINED;
}

- (jint)getSizeInCellWithADView:(ADView *)view
                        withInt:(jint)viewSize
                        withInt:(jint)cellSize {
  return cellSize;
}

- (NSString *)getDebugString {
  return @"FILL";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x0, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getGravityOffsetWithADView:withInt:);
  methods[2].selector = @selector(getAlignmentValueWithADView:withInt:withInt:);
  methods[3].selector = @selector(getSizeInCellWithADView:withInt:withInt:);
  methods[4].selector = @selector(getDebugString);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getGravityOffset", "LADView;I", "getAlignmentValue", "LADView;II", "getSizeInCell", "LADXGridLayout;" };
  static const J2ObjcClassInfo _ADXGridLayout_7 = { "", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x8018, 5, 0, 5, -1, -1, -1, -1 };
  return &_ADXGridLayout_7;
}

@end

void ADXGridLayout_7_init(ADXGridLayout_7 *self) {
  ADXGridLayout_Alignment_init(self);
}

ADXGridLayout_7 *new_ADXGridLayout_7_init() {
  J2OBJC_NEW_IMPL(ADXGridLayout_7, init)
}

ADXGridLayout_7 *create_ADXGridLayout_7_init() {
  J2OBJC_CREATE_IMPL(ADXGridLayout_7, init)
}

@implementation ADXGridLayout_Printer

- (instancetype)initWithADXGridLayout:(ADXGridLayout *)outer$ {
  ADXGridLayout_Printer_initWithADXGridLayout_(self, outer$);
  return self;
}

- (void)printlnWithNSString:(NSString *)str {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXGridLayout:);
  methods[1].selector = @selector(printlnWithNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADXGridLayout;", "println", "LNSString;" };
  static const J2ObjcClassInfo _ADXGridLayout_Printer = { "Printer", "androidx.gridlayout.widget", ptrTable, methods, NULL, 7, 0x0, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADXGridLayout_Printer;
}

@end

void ADXGridLayout_Printer_initWithADXGridLayout_(ADXGridLayout_Printer *self, ADXGridLayout *outer$) {
  NSObject_init(self);
}

ADXGridLayout_Printer *new_ADXGridLayout_Printer_initWithADXGridLayout_(ADXGridLayout *outer$) {
  J2OBJC_NEW_IMPL(ADXGridLayout_Printer, initWithADXGridLayout_, outer$)
}

ADXGridLayout_Printer *create_ADXGridLayout_Printer_initWithADXGridLayout_(ADXGridLayout *outer$) {
  J2OBJC_CREATE_IMPL(ADXGridLayout_Printer, initWithADXGridLayout_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGridLayout_Printer)
