//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\ColorStateConverter.java
//

#include "Color.h"
#include "ColorStateConverter.h"
#include "ColorStateList.h"
#include "ColorStateListFactory.h"
#include "ColorUtil.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "PluginInvoker.h"
#include "ResourceBundleUtils.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/ResourceBundle.h"


@implementation ASColorStateConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASColorStateConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (ADColorStateList *)convertFromWithId:(NSString *)value
                        withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                        withASIFragment:(id<ASIFragment>)fragment {
  if (value == nil) {
    return nil;
  }
  NSString *color = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"color/color", @"color", value, fragment);
  if ([((NSString *) nil_chk(color)) java_hasPrefix:@"{"]) {
    id<JavaUtilMap> colorMap = ASPluginInvoker_unmarshalWithNSString_withIOSClass_(color, JavaUtilMap_class_());
    return ASColorStateListFactory_getColorWithJavaUtilMap_withASIFragment_(colorMap, fragment);
  }
  return ADColorStateList_valueOfWithInt_(ADColor_parseColorWithNSString_(ASColorUtil_colorToHexWithNSString_(color)));
}

- (NSString *)convertToWithId:(ADColorStateList *)value
              withASIFragment:(id<ASIFragment>)fragment {
  return ASColorUtil_getColorStringWithInt_([((ADColorStateList *) nil_chk(value)) getColorForStateWithIntArray:[IOSIntArray newArrayWithInts:(jint[]){  } count:0] withInt:[value getDefaultColor]]);
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertToWithId:withASIFragment:);
  methods[3].selector = @selector(getDependentAttributes);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "resourceBundle_", "LJavaUtilResourceBundle;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Lr/android/content/res/ColorStateList;", "convertTo", "LADColorStateList;LASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<Lr/android/content/res/ColorStateList;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASColorStateConverter = { "ColorStateConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, 6, -1 };
  return &_ASColorStateConverter;
}

@end

void ASColorStateConverter_init(ASColorStateConverter *self) {
  NSObject_init(self);
}

ASColorStateConverter *new_ASColorStateConverter_init() {
  J2OBJC_NEW_IMPL(ASColorStateConverter, init)
}

ASColorStateConverter *create_ASColorStateConverter_init() {
  J2OBJC_CREATE_IMPL(ASColorStateConverter, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASColorStateConverter)
