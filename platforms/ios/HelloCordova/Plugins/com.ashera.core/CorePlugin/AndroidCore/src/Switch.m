//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\Switch.java
//

#include "ColorStateList.h"
#include "CompoundButton.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IWidget.h"
#include "Insets.h"
#include "J2ObjC_source.h"
#include "Rect.h"
#include "RectM.h"
#include "Switch.h"
#include "TextUtils.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Math.h"

@protocol JavaLangCharSequence;


@interface ADSwitch () {
 @public
  ADDrawable *mThumbDrawable_;
  ADColorStateList *mThumbTintList_;
  jboolean mHasThumbTint_;
  jboolean mHasThumbTintMode_;
  ADDrawable *mTrackDrawable_;
  ADColorStateList *mTrackTintList_;
  jboolean mHasTrackTint_;
  jboolean mHasTrackTintMode_;
  jint mThumbTextPadding_;
  jint mSwitchMinWidth_;
  jint mSwitchPadding_;
  jboolean mSplitTrack_;
  id<JavaLangCharSequence> mTextOn_;
  id<JavaLangCharSequence> mTextOff_;
  jboolean mShowText_;
  jboolean mUseFallbackLineSpacing_;
  jint mTouchMode_;
  jint mTouchSlop_Switch_;
  jint mMinFlingVelocity_;
  jint mSwitchWidth_;
  jint mSwitchHeight_;
  jint mThumbWidth_;
  jint mSwitchLeft_;
  jint mSwitchTop_;
  jint mSwitchRight_;
  jint mSwitchBottom_;
  ADSwitch_Layout *mOnLayout_;
  ADSwitch_Layout *mOffLayout_;
  ADRect *mTempRect_;
  NSString *text_Switch_;
  jint intrinsicWidth_;
  jint intrinsicHeight_;
}

- (void)applyTrackTint;

- (void)applyThumbTint;

@end

J2OBJC_FIELD_SETTER(ADSwitch, mThumbDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADSwitch, mThumbTintList_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADSwitch, mTrackDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADSwitch, mTrackTintList_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ADSwitch, mTextOn_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADSwitch, mTextOff_, id<JavaLangCharSequence>)
J2OBJC_FIELD_SETTER(ADSwitch, mOnLayout_, ADSwitch_Layout *)
J2OBJC_FIELD_SETTER(ADSwitch, mOffLayout_, ADSwitch_Layout *)
J2OBJC_FIELD_SETTER(ADSwitch, mTempRect_, ADRect *)
J2OBJC_FIELD_SETTER(ADSwitch, text_Switch_, NSString *)

inline jint ADSwitch_get_THUMB_ANIMATION_DURATION(void);
#define ADSwitch_THUMB_ANIMATION_DURATION 250
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, THUMB_ANIMATION_DURATION, jint)

inline jint ADSwitch_get_TOUCH_MODE_IDLE(void);
#define ADSwitch_TOUCH_MODE_IDLE 0
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, TOUCH_MODE_IDLE, jint)

inline jint ADSwitch_get_TOUCH_MODE_DOWN(void);
#define ADSwitch_TOUCH_MODE_DOWN 1
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, TOUCH_MODE_DOWN, jint)

inline jint ADSwitch_get_TOUCH_MODE_DRAGGING(void);
#define ADSwitch_TOUCH_MODE_DRAGGING 2
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, TOUCH_MODE_DRAGGING, jint)

inline jint ADSwitch_get_SANS(void);
#define ADSwitch_SANS 1
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, SANS, jint)

inline jint ADSwitch_get_SERIF(void);
#define ADSwitch_SERIF 2
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, SERIF, jint)

inline jint ADSwitch_get_MONOSPACE(void);
#define ADSwitch_MONOSPACE 3
J2OBJC_STATIC_FIELD_CONSTANT(ADSwitch, MONOSPACE, jint)

__attribute__((unused)) static void ADSwitch_applyTrackTint(ADSwitch *self);

__attribute__((unused)) static void ADSwitch_applyThumbTint(ADSwitch *self);

@implementation ADSwitch

- (void)setSwitchPaddingWithInt:(jint)pixels {
  mSwitchPadding_ = pixels;
  [self requestLayout];
}

- (jint)getSwitchPadding {
  return mSwitchPadding_;
}

- (void)setSwitchMinWidthWithInt:(jint)pixels {
  mSwitchMinWidth_ = pixels;
  [self requestLayout];
}

- (jint)getSwitchMinWidth {
  return mSwitchMinWidth_;
}

- (void)setTrackTintListWithADColorStateList:(ADColorStateList *)tint {
  JreStrongAssign(&mTrackTintList_, tint);
  mHasTrackTint_ = true;
  ADSwitch_applyTrackTint(self);
}

- (ADColorStateList *)getTrackTintList {
  return mTrackTintList_;
}

- (void)setThumbTintListWithADColorStateList:(ADColorStateList *)tint {
  JreStrongAssign(&mThumbTintList_, tint);
  mHasThumbTint_ = true;
  ADSwitch_applyThumbTint(self);
}

- (ADColorStateList *)getThumbTintList {
  return mThumbTintList_;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  if (mShowText_) {
    if (mOnLayout_ == nil) {
      JreStrongAssign(&mOnLayout_, [self makeLayoutWithJavaLangCharSequence:mTextOn_]);
    }
    if (mOffLayout_ == nil) {
      JreStrongAssign(&mOffLayout_, [self makeLayoutWithJavaLangCharSequence:mTextOff_]);
    }
  }
  ADRect *padding = mTempRect_;
  jint thumbWidth;
  jint thumbHeight;
  if (mThumbDrawable_ != nil) {
    [mThumbDrawable_ getPaddingWithADRect:padding];
    thumbWidth = [((ADDrawable *) nil_chk(mThumbDrawable_)) getIntrinsicWidth] - ((ADRect *) nil_chk(padding))->left_ - padding->right_;
    thumbHeight = [((ADDrawable *) nil_chk(mThumbDrawable_)) getIntrinsicHeight];
  }
  else {
    thumbWidth = 0;
    thumbHeight = 0;
  }
  jint maxTextWidth;
  if (mShowText_) {
    maxTextWidth = JavaLangMath_maxWithInt_withInt_([((ADSwitch_Layout *) nil_chk(mOnLayout_)) getWidth], [((ADSwitch_Layout *) nil_chk(mOffLayout_)) getWidth]) + mThumbTextPadding_ * 2;
  }
  else {
    maxTextWidth = 0;
  }
  mThumbWidth_ = JavaLangMath_maxWithInt_withInt_(maxTextWidth, thumbWidth);
  jint trackHeight;
  if (mTrackDrawable_ != nil) {
    [mTrackDrawable_ getPaddingWithADRect:padding];
    trackHeight = [((ADDrawable *) nil_chk(mTrackDrawable_)) getIntrinsicHeight];
  }
  else {
    [((ADRect *) nil_chk(padding)) setEmpty];
    trackHeight = 0;
  }
  jint paddingLeft = ((ADRect *) nil_chk(padding))->left_;
  jint paddingRight = padding->right_;
  if (mThumbDrawable_ != nil) {
    ADInsets *inset = [mThumbDrawable_ getOpticalInsets];
    paddingLeft = JavaLangMath_maxWithInt_withInt_(paddingLeft, ((ADInsets *) nil_chk(inset))->left_);
    paddingRight = JavaLangMath_maxWithInt_withInt_(paddingRight, inset->right_);
  }
  jint switchWidth = JavaLangMath_maxWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(mSwitchMinWidth_, 2 * mThumbWidth_ + paddingLeft + paddingRight), intrinsicWidth_);
  jint switchHeight = JavaLangMath_maxWithInt_withInt_(JavaLangMath_maxWithInt_withInt_(trackHeight, thumbHeight), intrinsicHeight_);
  mSwitchWidth_ = switchWidth;
  mSwitchHeight_ = switchHeight;
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  jint measuredHeight = [self getMeasuredHeight];
  if (measuredHeight < switchHeight) {
    [self setMeasuredDimensionWithInt:[self getMeasuredWidthAndState] withInt:switchHeight];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  [super onLayoutWithBoolean:changed withInt:left withInt:top withInt:right withInt:bottom];
  jint opticalInsetLeft = 0;
  jint opticalInsetRight = 0;
  if (mThumbDrawable_ != nil) {
    ADRect *trackPadding = mTempRect_;
    if (mTrackDrawable_ != nil) {
      [mTrackDrawable_ getPaddingWithADRect:trackPadding];
    }
    else {
      [((ADRect *) nil_chk(trackPadding)) setEmpty];
    }
    ADInsets *insets = [((ADDrawable *) nil_chk(mThumbDrawable_)) getOpticalInsets];
    opticalInsetLeft = JavaLangMath_maxWithInt_withInt_(0, ((ADInsets *) nil_chk(insets))->left_ - ((ADRect *) nil_chk(trackPadding))->left_);
    opticalInsetRight = JavaLangMath_maxWithInt_withInt_(0, insets->right_ - trackPadding->right_);
  }
  jint switchRight;
  jint switchLeft;
  if ([self isLayoutRtl]) {
    switchLeft = [self getPaddingLeft] + opticalInsetLeft;
    switchRight = switchLeft + mSwitchWidth_ - opticalInsetLeft - opticalInsetRight;
  }
  else {
    switchRight = [self getWidth] - [self getPaddingRight] - opticalInsetRight;
    switchLeft = switchRight - mSwitchWidth_ + opticalInsetLeft + opticalInsetRight;
  }
  jint switchTop;
  jint switchBottom;
  switch ([self getGravity] & ADGravity_VERTICAL_GRAVITY_MASK) {
    default:
    case ADGravity_TOP:
    switchTop = [self getPaddingTop];
    switchBottom = switchTop + mSwitchHeight_;
    break;
    case ADGravity_CENTER_VERTICAL:
    switchTop = JreIntDiv(([self getPaddingTop] + [self getHeight] - [self getPaddingBottom]), 2) - JreIntDiv(mSwitchHeight_, 2);
    switchBottom = switchTop + mSwitchHeight_;
    break;
    case ADGravity_BOTTOM:
    switchBottom = [self getHeight] - [self getPaddingBottom];
    switchTop = switchBottom - mSwitchHeight_;
    break;
  }
  mSwitchLeft_ = switchLeft;
  mSwitchTop_ = switchTop;
  mSwitchBottom_ = switchBottom;
  mSwitchRight_ = switchRight;
}

- (jint)getCompoundPaddingLeft {
  if (![self isLayoutRtl]) {
    return [super getCompoundPaddingLeft];
  }
  jint padding = [super getCompoundPaddingLeft] + mSwitchWidth_;
  if (!ADTextUtils_isEmptyWithNSString_([self getText])) {
    padding += mSwitchPadding_;
  }
  return padding;
}

- (jint)getCompoundPaddingRight {
  if ([self isLayoutRtl]) {
    return [super getCompoundPaddingRight];
  }
  jint padding = [super getCompoundPaddingRight] + mSwitchWidth_;
  if (!ADTextUtils_isEmptyWithNSString_([self getText])) {
    padding += mSwitchPadding_;
  }
  return padding;
}

- (NSString *)getText {
  return text_Switch_;
}

- (void)setTextWithNSString:(NSString *)text {
  JreStrongAssign(&self->text_Switch_, text);
}

- (void)setIntrinsicWidthWithInt:(jint)intrinsicWidth {
  self->intrinsicWidth_ = intrinsicWidth;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)widget {
  ADSwitch_initWithASIWidget_(self, widget);
  return self;
}

- (void)setIntrinsicHeightWithInt:(jint)intrinsicHeight {
  self->intrinsicHeight_ = intrinsicHeight;
}

- (ADRect *)getSwitchBounds {
  return create_ADRect_initWithInt_withInt_withInt_withInt_(mSwitchLeft_, mSwitchTop_, mSwitchRight_, mSwitchBottom_);
}

- (ADSwitch_Layout *)makeLayoutWithJavaLangCharSequence:(id<JavaLangCharSequence>)text {
  return create_ADSwitch_Layout_initWithADSwitch_(self);
}

- (ASRectM *)getRightDrawableBoundsWithInt:(jint)x
                                   withInt:(jint)y
                                   withInt:(jint)width
                                   withInt:(jint)height {
  ASRectM *rightBounds = [super getRightDrawableBoundsWithInt:x withInt:y withInt:width withInt:height];
  ((ASRectM *) nil_chk(rightBounds))->x_ = rightBounds->x_ - intrinsicWidth_;
  return rightBounds;
}

- (ASRectM *)getBottomDrawableBoundsWithInt:(jint)x
                                    withInt:(jint)y
                                    withInt:(jint)width
                                    withInt:(jint)height {
  ASRectM *bottomBounds = [super getBottomDrawableBoundsWithInt:x - intrinsicWidth_ withInt:y withInt:width - intrinsicWidth_ withInt:height];
  return bottomBounds;
}

- (ASRectM *)getTopDrawableBoundsWithInt:(jint)x
                                 withInt:(jint)y
                                 withInt:(jint)width
                                 withInt:(jint)height {
  ASRectM *topBounds = [super getTopDrawableBoundsWithInt:x - intrinsicWidth_ withInt:y withInt:width - intrinsicWidth_ withInt:height];
  return topBounds;
}

- (void)applyTrackTint {
  ADSwitch_applyTrackTint(self);
}

- (void)applyThumbTint {
  ADSwitch_applyThumbTint(self);
}

- (void)dealloc {
  RELEASE_(mThumbDrawable_);
  RELEASE_(mThumbTintList_);
  RELEASE_(mTrackDrawable_);
  RELEASE_(mTrackTintList_);
  RELEASE_(mTextOn_);
  RELEASE_(mTextOff_);
  RELEASE_(mOnLayout_);
  RELEASE_(mOffLayout_);
  RELEASE_(mTempRect_);
  RELEASE_(text_Switch_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 8, 9, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 13, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADSwitch_Layout;", 0x0, 15, 16, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 17, 18, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 19, 18, -1, -1, -1, -1 },
    { NULL, "LASRectM;", 0x1, 20, 18, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(setSwitchPaddingWithInt:);
  methods[1].selector = @selector(getSwitchPadding);
  methods[2].selector = @selector(setSwitchMinWidthWithInt:);
  methods[3].selector = @selector(getSwitchMinWidth);
  methods[4].selector = @selector(setTrackTintListWithADColorStateList:);
  methods[5].selector = @selector(getTrackTintList);
  methods[6].selector = @selector(setThumbTintListWithADColorStateList:);
  methods[7].selector = @selector(getThumbTintList);
  methods[8].selector = @selector(onMeasureWithInt:withInt:);
  methods[9].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[10].selector = @selector(getCompoundPaddingLeft);
  methods[11].selector = @selector(getCompoundPaddingRight);
  methods[12].selector = @selector(getText);
  methods[13].selector = @selector(setTextWithNSString:);
  methods[14].selector = @selector(setIntrinsicWidthWithInt:);
  methods[15].selector = @selector(initWithASIWidget:);
  methods[16].selector = @selector(setIntrinsicHeightWithInt:);
  methods[17].selector = @selector(getSwitchBounds);
  methods[18].selector = @selector(makeLayoutWithJavaLangCharSequence:);
  methods[19].selector = @selector(getRightDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[20].selector = @selector(getBottomDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[21].selector = @selector(getTopDrawableBoundsWithInt:withInt:withInt:withInt:);
  methods[22].selector = @selector(applyTrackTint);
  methods[23].selector = @selector(applyThumbTint);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "THUMB_ANIMATION_DURATION", "I", .constantValue.asInt = ADSwitch_THUMB_ANIMATION_DURATION, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_MODE_IDLE", "I", .constantValue.asInt = ADSwitch_TOUCH_MODE_IDLE, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_MODE_DOWN", "I", .constantValue.asInt = ADSwitch_TOUCH_MODE_DOWN, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_MODE_DRAGGING", "I", .constantValue.asInt = ADSwitch_TOUCH_MODE_DRAGGING, 0x1a, -1, -1, -1, -1 },
    { "SANS", "I", .constantValue.asInt = ADSwitch_SANS, 0x1a, -1, -1, -1, -1 },
    { "SERIF", "I", .constantValue.asInt = ADSwitch_SERIF, 0x1a, -1, -1, -1, -1 },
    { "MONOSPACE", "I", .constantValue.asInt = ADSwitch_MONOSPACE, 0x1a, -1, -1, -1, -1 },
    { "mThumbDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mThumbTintList_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasThumbTint_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasThumbTintMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTrackDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTrackTintList_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasTrackTint_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mHasTrackTintMode_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mThumbTextPadding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchMinWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchPadding_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSplitTrack_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTextOn_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTextOff_", "LJavaLangCharSequence;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mShowText_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUseFallbackLineSpacing_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_Switch_", "I", .constantValue.asLong = 0, 0x2, 21, -1, -1, -1 },
    { "mMinFlingVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mThumbWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSwitchBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOnLayout_", "LADSwitch_Layout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOffLayout_", "LADSwitch_Layout;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTempRect_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "text_Switch_", "LNSString;", .constantValue.asLong = 0, 0x2, 22, -1, -1, -1 },
    { "intrinsicWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "intrinsicHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setSwitchPadding", "I", "setSwitchMinWidth", "setTrackTintList", "LADColorStateList;", "setThumbTintList", "onMeasure", "II", "onLayout", "ZIIII", "setText", "LNSString;", "setIntrinsicWidth", "LASIWidget;", "setIntrinsicHeight", "makeLayout", "LJavaLangCharSequence;", "getRightDrawableBounds", "IIII", "getBottomDrawableBounds", "getTopDrawableBounds", "mTouchSlop", "text", "LADSwitch_Layout;" };
  static const J2ObjcClassInfo _ADSwitch = { "Switch", "r.android.widget", ptrTable, methods, fields, 7, 0x401, 24, 39, -1, 23, -1, -1, -1 };
  return &_ADSwitch;
}

@end

void ADSwitch_initWithASIWidget_(ADSwitch *self, id<ASIWidget> widget) {
  ADCompoundButton_initWithASIWidget_(self, widget);
  JreStrongAssign(&self->mThumbTintList_, nil);
  self->mHasThumbTint_ = false;
  self->mHasThumbTintMode_ = false;
  JreStrongAssign(&self->mTrackTintList_, nil);
  self->mHasTrackTint_ = false;
  self->mHasTrackTintMode_ = false;
  JreStrongAssignAndConsume(&self->mTempRect_, new_ADRect_init());
}

void ADSwitch_applyTrackTint(ADSwitch *self) {
}

void ADSwitch_applyThumbTint(ADSwitch *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADSwitch)

@implementation ADSwitch_Layout

- (instancetype)initWithADSwitch:(ADSwitch *)outer$ {
  ADSwitch_Layout_initWithADSwitch_(self, outer$);
  return self;
}

- (jint)getWidth {
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "I", 0x0, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADSwitch:);
  methods[1].selector = @selector(getWidth);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADSwitch;" };
  static const J2ObjcClassInfo _ADSwitch_Layout = { "Layout", "r.android.widget", ptrTable, methods, NULL, 7, 0x0, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADSwitch_Layout;
}

@end

void ADSwitch_Layout_initWithADSwitch_(ADSwitch_Layout *self, ADSwitch *outer$) {
  NSObject_init(self);
}

ADSwitch_Layout *new_ADSwitch_Layout_initWithADSwitch_(ADSwitch *outer$) {
  J2OBJC_NEW_IMPL(ADSwitch_Layout, initWithADSwitch_, outer$)
}

ADSwitch_Layout *create_ADSwitch_Layout_initWithADSwitch_(ADSwitch *outer$) {
  J2OBJC_CREATE_IMPL(ADSwitch_Layout, initWithADSwitch_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADSwitch_Layout)
