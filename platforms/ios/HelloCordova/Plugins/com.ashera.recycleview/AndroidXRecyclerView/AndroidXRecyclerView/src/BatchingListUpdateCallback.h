//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\androidx\recyclerview\widget\BatchingListUpdateCallback.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_BatchingListUpdateCallback")
#ifdef RESTRICT_BatchingListUpdateCallback
#define INCLUDE_ALL_BatchingListUpdateCallback 0
#else
#define INCLUDE_ALL_BatchingListUpdateCallback 1
#endif
#undef RESTRICT_BatchingListUpdateCallback

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXBatchingListUpdateCallback_) && (INCLUDE_ALL_BatchingListUpdateCallback || defined(INCLUDE_ADXBatchingListUpdateCallback))
#define ADXBatchingListUpdateCallback_

#define RESTRICT_ListUpdateCallback 1
#define INCLUDE_ADXListUpdateCallback 1
#include "ListUpdateCallback.h"

/*!
 @brief Wraps a <code>ListUpdateCallback</code> callback and batches operations that can be merged.
 <p>
  For instance, when 2 add operations comes that adds 2 consecutive elements,
  BatchingListUpdateCallback merges them and calls the wrapped callback only once. 
 <p>
  This is a general purpose class and is also used by 
 <code>DiffResult</code> and 
 <code>SortedList</code> to minimize the number of updates that are dispatched. 
 <p>
  If you use this class to batch updates, you must call <code>dispatchLastEvent()</code> when the
  stream of update events drain.
 */
@interface ADXBatchingListUpdateCallback : NSObject < ADXListUpdateCallback > {
 @public
  id<ADXListUpdateCallback> mWrapped_;
  jint mLastEventType_;
  jint mLastEventPosition_;
  jint mLastEventCount_;
  id mLastEventPayload_;
}

#pragma mark Public

- (instancetype)initWithADXListUpdateCallback:(id<ADXListUpdateCallback>)callback;

/*!
 @brief BatchingListUpdateCallback holds onto the last event to see if it can be merged with the
  next one.When stream of events finish, you should call this method to dispatch the last
  event.
 */
- (void)dispatchLastEvent;

- (void)onChangedWithInt:(jint)position
                 withInt:(jint)count
                  withId:(id)payload;

- (void)onInsertedWithInt:(jint)position
                  withInt:(jint)count;

- (void)onMovedWithInt:(jint)fromPosition
               withInt:(jint)toPosition;

- (void)onRemovedWithInt:(jint)position
                 withInt:(jint)count;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXBatchingListUpdateCallback)

J2OBJC_FIELD_SETTER(ADXBatchingListUpdateCallback, mWrapped_, id<ADXListUpdateCallback>)
J2OBJC_FIELD_SETTER(ADXBatchingListUpdateCallback, mLastEventPayload_, id)

FOUNDATION_EXPORT void ADXBatchingListUpdateCallback_initWithADXListUpdateCallback_(ADXBatchingListUpdateCallback *self, id<ADXListUpdateCallback> callback);

FOUNDATION_EXPORT ADXBatchingListUpdateCallback *new_ADXBatchingListUpdateCallback_initWithADXListUpdateCallback_(id<ADXListUpdateCallback> callback) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXBatchingListUpdateCallback *create_ADXBatchingListUpdateCallback_initWithADXListUpdateCallback_(id<ADXListUpdateCallback> callback);

J2OBJC_TYPE_LITERAL_HEADER(ADXBatchingListUpdateCallback)

@compatibility_alias AndroidxRecyclerviewWidgetBatchingListUpdateCallback ADXBatchingListUpdateCallback;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_BatchingListUpdateCallback")
