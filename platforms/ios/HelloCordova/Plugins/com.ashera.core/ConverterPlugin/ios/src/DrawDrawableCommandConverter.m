//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSConverter\src\main\java\com\ashera\converter\DrawDrawableCommandConverter.java
//

#include "AttributeCommand.h"
#include "BaseAttributeCommand.h"
#include "BaseMeasurableView.h"
#include "CompoundButton.h"
#include "DrawDrawableCommandConverter.h"
#include "Drawable.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "J2ObjC_source.h"
#include "RectM.h"

#include <UIKit/UIKit.h>


@interface ASDrawDrawableCommandConverter () {
 @public
  NSString *drawable_;
}

- (void)drawDrawableWithId:(id)image
                   withInt:(jint)x
                   withInt:(jint)y
                   withInt:(jint)width
                   withInt:(jint)height;

@end

J2OBJC_FIELD_SETTER(ASDrawDrawableCommandConverter, drawable_, NSString *)

__attribute__((unused)) static void ASDrawDrawableCommandConverter_drawDrawableWithId_withInt_withInt_withInt_withInt_(ASDrawDrawableCommandConverter *self, id image, jint x, jint y, jint width, jint height);

@implementation ASDrawDrawableCommandConverter

- (instancetype)initWithNSString:(NSString *)id_ {
  ASDrawDrawableCommandConverter_initWithNSString_(self, id_);
  return self;
}

- (id)modifyValueWithASIWidget:(id<ASIWidget>)widget
                        withId:(id)nativeView
                  withNSString:(NSString *)phase
                  withNSString:(NSString *)attributeName
                        withId:(id)value {
  if (value == nil || drawable_ == nil || [value isEqual:@"@null"]) {
    return value;
  }
  ASBaseMeasurableView *measurableView = (ASBaseMeasurableView *) cast_chk([((id<ASIWidget>) nil_chk(widget)) asWidget], [ASBaseMeasurableView class]);
  ASRectM *bounds = nil;
  switch (JreIndexOfStr(drawable_, (id[]){ @"left", @"right", @"top", @"bottom", @"button" }, 5)) {
    case 0:
    bounds = [((ASBaseMeasurableView *) nil_chk(measurableView)) getLeftDrawableBoundsWithInt:[measurableView getTop] withInt:[measurableView getLeft] withInt:[measurableView getWidth] withInt:[measurableView getHeight]];
    break;
    case 1:
    bounds = [((ASBaseMeasurableView *) nil_chk(measurableView)) getRightDrawableBoundsWithInt:[measurableView getTop] withInt:[measurableView getLeft] withInt:[measurableView getWidth] withInt:[measurableView getHeight]];
    break;
    case 2:
    bounds = [((ASBaseMeasurableView *) nil_chk(measurableView)) getTopDrawableBoundsWithInt:[measurableView getTop] withInt:[measurableView getLeft] withInt:[measurableView getWidth] withInt:[measurableView getHeight]];
    break;
    case 3:
    bounds = [((ASBaseMeasurableView *) nil_chk(measurableView)) getBottomDrawableBoundsWithInt:[measurableView getTop] withInt:[measurableView getLeft] withInt:[measurableView getWidth] withInt:[measurableView getHeight]];
    break;
    case 4:
    if ([measurableView isKindOfClass:[ADCompoundButton class]]) {
      ADDrawable *drawable = [((ADCompoundButton *) nil_chk(((ADCompoundButton *) measurableView))) getButtonDrawable];
      bounds = new_ASRectM_initWithInt_withInt_withInt_withInt_([((ADDrawable *) nil_chk(drawable)) getLeft], [drawable getTop], [drawable getRight] - [drawable getLeft], [drawable getBottom] - [drawable getTop]);
    }
    break;
    default:
    break;
  }
  if ([value isKindOfClass:[ADDrawable class]]) {
    value = [((ADDrawable *) value) getDrawable];
  }
  ASDrawDrawableCommandConverter_drawDrawableWithId_withInt_withInt_withInt_withInt_(self, value, ((ASRectM *) nil_chk(bounds))->x_, bounds->y_, bounds->width_, bounds->height_);
  return value;
}

- (jboolean)executeAfterPostMeasure {
  return true;
}

- (id<ASAttributeCommand>)newInstanceWithNSObjectArray:(IOSObjectArray *)args {
  ASDrawDrawableCommandConverter *drawDrawableCommandConverter = new_ASDrawDrawableCommandConverter_initWithNSString_(self->id__);
  [drawDrawableCommandConverter setPriorityWithInt:1000];
  [drawDrawableCommandConverter updateArgsWithNSObjectArray:args];
  return drawDrawableCommandConverter;
}

- (void)updateArgsWithNSObjectArray:(IOSObjectArray *)args {
  self->drawable_ = (NSString *) cast_chk(IOSObjectArray_Get(nil_chk(args), 0), [NSString class]);
}

- (void)drawDrawableWithId:(id)image
                   withInt:(jint)x
                   withInt:(jint)y
                   withInt:(jint)width
                   withInt:(jint)height {
  ASDrawDrawableCommandConverter_drawDrawableWithId_withInt_withInt_withInt_withInt_(self, image, x, y, width, height);
}

- (void)updatePhaseArgsWithNSObjectArray:(IOSObjectArray *)args {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASAttributeCommand;", 0x81, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 8, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithNSString:);
  methods[1].selector = @selector(modifyValueWithASIWidget:withId:withNSString:withNSString:withId:);
  methods[2].selector = @selector(executeAfterPostMeasure);
  methods[3].selector = @selector(newInstanceWithNSObjectArray:);
  methods[4].selector = @selector(updateArgsWithNSObjectArray:);
  methods[5].selector = @selector(drawDrawableWithId:withInt:withInt:withInt:withInt:);
  methods[6].selector = @selector(updatePhaseArgsWithNSObjectArray:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "drawable_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LNSString;", "modifyValue", "LASIWidget;LNSObject;LNSString;LNSString;LNSObject;", "newInstance", "[LNSObject;", "updateArgs", "drawDrawable", "LNSObject;IIII", "updatePhaseArgs" };
  static const J2ObjcClassInfo _ASDrawDrawableCommandConverter = { "DrawDrawableCommandConverter", "com.ashera.converter", ptrTable, methods, fields, 7, 0x1, 7, 1, -1, -1, -1, -1, -1 };
  return &_ASDrawDrawableCommandConverter;
}

@end

void ASDrawDrawableCommandConverter_initWithNSString_(ASDrawDrawableCommandConverter *self, NSString *id_) {
  ASBaseAttributeCommand_initWithNSString_(self, id_);
}

ASDrawDrawableCommandConverter *new_ASDrawDrawableCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_NEW_IMPL(ASDrawDrawableCommandConverter, initWithNSString_, id_)
}

ASDrawDrawableCommandConverter *create_ASDrawDrawableCommandConverter_initWithNSString_(NSString *id_) {
  J2OBJC_CREATE_IMPL(ASDrawDrawableCommandConverter, initWithNSString_, id_)
}

void ASDrawDrawableCommandConverter_drawDrawableWithId_withInt_withInt_withInt_withInt_(ASDrawDrawableCommandConverter *self, id image, jint x, jint y, jint width, jint height) {
  if ([image isKindOfClass:UIImage.class]) {
    CGRect rect = CGRectMake(x, y, width, height);
    [((UIImage*) image) drawInRect:rect];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASDrawDrawableCommandConverter)
