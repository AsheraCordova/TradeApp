//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\EventCommandFactory.java
//

#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "J2ObjC_source.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@protocol JavaUtilMap;


inline id<JavaUtilMap> ASEventCommandFactory_get_commandMap(void);
inline id<JavaUtilMap> ASEventCommandFactory_set_commandMap(id<JavaUtilMap> value);
static id<JavaUtilMap> ASEventCommandFactory_commandMap;
J2OBJC_STATIC_FIELD_OBJ(ASEventCommandFactory, commandMap, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(ASEventCommandFactory)

@implementation ASEventCommandFactory

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASEventCommandFactory_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)registerCommandWithNSString:(NSString *)name
                 withASEventCommand:(id<ASEventCommand>)eventCommand {
  ASEventCommandFactory_registerCommandWithNSString_withASEventCommand_(name, eventCommand);
}

+ (id<ASEventCommand>)getCommandWithNSString:(NSString *)name {
  return ASEventCommandFactory_getCommandWithNSString_(name);
}

+ (jboolean)hasCommandWithNSString:(NSString *)name {
  return ASEventCommandFactory_hasCommandWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LASEventCommand;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 4, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(registerCommandWithNSString:withASEventCommand:);
  methods[2].selector = @selector(getCommandWithNSString:);
  methods[3].selector = @selector(hasCommandWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "commandMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 5, 6, -1 },
  };
  static const void *ptrTable[] = { "registerCommand", "LNSString;LASEventCommand;", "getCommand", "LNSString;", "hasCommand", &ASEventCommandFactory_commandMap, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/widget/EventCommand;>;" };
  static const J2ObjcClassInfo _ASEventCommandFactory = { "EventCommandFactory", "com.ashera.widget", ptrTable, methods, fields, 7, 0x1, 4, 1, -1, -1, -1, -1, -1 };
  return &_ASEventCommandFactory;
}

+ (void)initialize {
  if (self == [ASEventCommandFactory class]) {
    JreStrongAssignAndConsume(&ASEventCommandFactory_commandMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ASEventCommandFactory)
  }
}

@end

void ASEventCommandFactory_init(ASEventCommandFactory *self) {
  NSObject_init(self);
}

ASEventCommandFactory *new_ASEventCommandFactory_init() {
  J2OBJC_NEW_IMPL(ASEventCommandFactory, init)
}

ASEventCommandFactory *create_ASEventCommandFactory_init() {
  J2OBJC_CREATE_IMPL(ASEventCommandFactory, init)
}

void ASEventCommandFactory_registerCommandWithNSString_withASEventCommand_(NSString *name, id<ASEventCommand> eventCommand) {
  ASEventCommandFactory_initialize();
  [((id<JavaUtilMap>) nil_chk(ASEventCommandFactory_commandMap)) putWithId:name withId:eventCommand];
}

id<ASEventCommand> ASEventCommandFactory_getCommandWithNSString_(NSString *name) {
  ASEventCommandFactory_initialize();
  id<ASEventCommand> eventCommand = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(ASEventCommandFactory_commandMap)) getWithId:name]);
  return eventCommand;
}

jboolean ASEventCommandFactory_hasCommandWithNSString_(NSString *name) {
  ASEventCommandFactory_initialize();
  return [((id<JavaUtilMap>) nil_chk(ASEventCommandFactory_commandMap)) containsKeyWithId:name];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASEventCommandFactory)
