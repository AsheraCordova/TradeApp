//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\converter\AbstractBitFlagConverter.java
//

#include "AbstractBitFlagConverter.h"
#include "IFragment.h"
#include "IOSObjectArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Integer.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/util/Collection.h"
#include "java/util/LinkedHashSet.h"
#include "java/util/List.h"
#include "java/util/Map.h"
#include "java/util/Set.h"


@implementation ASAbstractBitFlagConverter

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASAbstractBitFlagConverter_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (JavaLangInteger *)convertFromWithId:(NSString *)value
                       withJavaUtilMap:(id<JavaUtilMap>)dependentAttributesMap
                       withASIFragment:(id<ASIFragment>)fragment {
  id<JavaUtilMap> mapping = JreRetainedLocalValue([self getMapping]);
  if (value == nil) {
    return [self getDefault];
  }
  else {
    IOSObjectArray *values = [value java_split:@"\\|"];
    jint returnInt = 0;
    for (jint i = 0; i < ((IOSObjectArray *) nil_chk(values))->size_; i++) {
      if ([((id<JavaUtilMap>) nil_chk(mapping)) containsKeyWithId:IOSObjectArray_Get(values, i)]) {
        returnInt |= [((JavaLangInteger *) nil_chk([mapping getWithId:IOSObjectArray_Get(values, i)])) intValue];
      }
      else {
        @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Invalid mapping found ", IOSObjectArray_Get(values, i)));
      }
    }
    return JavaLangInteger_valueOfWithInt_(returnInt);
  }
}

- (NSString *)convertToWithId:(JavaLangInteger *)value
              withASIFragment:(id<ASIFragment>)fragment {
  id<JavaUtilMap> mapping = JreRetainedLocalValue([self getMapping]);
  JavaUtilLinkedHashSet *values = create_JavaUtilLinkedHashSet_init();
  for (JavaLangInteger * __strong flag in nil_chk([self getReverseMappingFlags])) {
    if ([((JavaLangInteger *) nil_chk(flag)) intValue] != 0) {
      JavaLangInteger *maskedValue = JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk(value)) intValue] & [flag intValue]);
      id<JavaUtilSet> keySet = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(mapping)) keySet]);
      for (NSString * __strong key in nil_chk(keySet)) {
        JavaLangInteger *mask = JreRetainedLocalValue([mapping getWithId:key]);
        if ([value intValue] == 0 && value == mask) {
          [values addWithId:key];
          goto break_outer;
        }
        else if ([value intValue] != 0 && [((JavaLangInteger *) nil_chk(mask)) intValue] != 0 && [maskedValue intValue] == [mask intValue]) {
          [values addWithId:key];
        }
        NSString *allOption = JreRetainedLocalValue([self getAllOption]);
        if (allOption != nil && [values containsWithId:allOption]) {
          [values clear];
          [values addWithId:allOption];
          break;
        }
      }
    }
  }
  break_outer: ;
  JavaLangStringBuilder *stringBuilder = create_JavaLangStringBuilder_init();
  NSString *seperator = @"";
  for (NSString * __strong str in values) {
    [((JavaLangStringBuilder *) nil_chk([stringBuilder appendWithNSString:seperator])) appendWithNSString:str];
    seperator = @"|";
  }
  return [stringBuilder description];
}

- (NSString *)getAllOption {
  return nil;
}

- (id<JavaUtilList>)getDependentAttributes {
  return nil;
}

- (id<JavaUtilMap>)getMapping {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (JavaLangInteger *)getDefault {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (id<JavaUtilCollection>)getReverseMappingFlags {
  return [((id<JavaUtilMap>) nil_chk([self getMapping])) values];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, 0, 1, -1, 2, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 5, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x401, -1, -1, -1, 6, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x401, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilCollection;", 0x1, -1, -1, -1, 7, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(convertFromWithId:withJavaUtilMap:withASIFragment:);
  methods[2].selector = @selector(convertToWithId:withASIFragment:);
  methods[3].selector = @selector(getAllOption);
  methods[4].selector = @selector(getDependentAttributes);
  methods[5].selector = @selector(getMapping);
  methods[6].selector = @selector(getDefault);
  methods[7].selector = @selector(getReverseMappingFlags);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "convertFrom", "LNSString;LJavaUtilMap;LASIFragment;", "(Ljava/lang/String;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;Lcom/ashera/core/IFragment;)Ljava/lang/Integer;", "convertTo", "LJavaLangInteger;LASIFragment;", "()Ljava/util/List<Ljava/lang/String;>;", "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "()Ljava/util/Collection<Ljava/lang/Integer;>;", "Ljava/lang/Object;Lcom/ashera/converter/IConverter<Ljava/lang/Integer;Ljava/lang/String;>;" };
  static const J2ObjcClassInfo _ASAbstractBitFlagConverter = { "AbstractBitFlagConverter", "com.ashera.converter", ptrTable, methods, NULL, 7, 0x401, 8, 0, -1, -1, -1, 8, -1 };
  return &_ASAbstractBitFlagConverter;
}

@end

void ASAbstractBitFlagConverter_init(ASAbstractBitFlagConverter *self) {
  NSObject_init(self);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASAbstractBitFlagConverter)
