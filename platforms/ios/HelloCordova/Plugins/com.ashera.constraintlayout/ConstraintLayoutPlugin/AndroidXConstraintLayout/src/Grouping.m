//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\widgets\analyzer\Grouping.java
//

#include "BasicMeasure.h"
#include "ConstraintAnchor.h"
#include "ConstraintWidget.h"
#include "ConstraintWidgetContainer.h"
#include "CoreBarrier.h"
#include "CoreFlow.h"
#include "CoreGuideline.h"
#include "Grouping.h"
#include "HelperWidget.h"
#include "J2ObjC_source.h"
#include "LinearSystem.h"
#include "Metrics.h"
#include "WidgetGroup.h"
#include "java/util/ArrayList.h"
#include "java/util/HashSet.h"

@class JavaUtilArrayList;


@interface ADXGrouping ()

+ (ADXWidgetGroup *)findGroupWithJavaUtilArrayList:(JavaUtilArrayList *)horizontalDependencyLists
                                           withInt:(jint)groupId;

@end

inline jboolean ADXGrouping_get_DEBUG(void);
#define ADXGrouping_DEBUG false
J2OBJC_STATIC_FIELD_CONSTANT(ADXGrouping, DEBUG, jboolean)

inline jboolean ADXGrouping_get_DEBUG_GROUPING(void);
#define ADXGrouping_DEBUG_GROUPING false
J2OBJC_STATIC_FIELD_CONSTANT(ADXGrouping, DEBUG_GROUPING, jboolean)

__attribute__((unused)) static ADXWidgetGroup *ADXGrouping_findGroupWithJavaUtilArrayList_withInt_(JavaUtilArrayList *horizontalDependencyLists, jint groupId);

@implementation ADXGrouping

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXGrouping_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)validInGroupWithADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)layoutHorizontal
                        withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)layoutVertical
                        withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)widgetHorizontal
                        withADXConstraintWidget_DimensionBehaviour:(ADXConstraintWidget_DimensionBehaviour *)widgetVertical {
  return ADXGrouping_validInGroupWithADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_(layoutHorizontal, layoutVertical, widgetHorizontal, widgetVertical);
}

+ (jboolean)simpleSolvingPassWithADXConstraintWidgetContainer:(ADXConstraintWidgetContainer *)layout
                                 withADXBasicMeasure_Measurer:(id<ADXBasicMeasure_Measurer>)measurer {
  return ADXGrouping_simpleSolvingPassWithADXConstraintWidgetContainer_withADXBasicMeasure_Measurer_(layout, measurer);
}

+ (ADXWidgetGroup *)findGroupWithJavaUtilArrayList:(JavaUtilArrayList *)horizontalDependencyLists
                                           withInt:(jint)groupId {
  return ADXGrouping_findGroupWithJavaUtilArrayList_withInt_(horizontalDependencyLists, groupId);
}

+ (ADXWidgetGroup *)findDependentsWithADXConstraintWidget:(ADXConstraintWidget *)constraintWidget
                                                  withInt:(jint)orientation
                                    withJavaUtilArrayList:(JavaUtilArrayList *)list
                                       withADXWidgetGroup:(ADXWidgetGroup *)group {
  return ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(constraintWidget, orientation, list, group);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "LADXWidgetGroup;", 0xa, 4, 5, -1, 6, -1, -1 },
    { NULL, "LADXWidgetGroup;", 0x9, 7, 8, -1, 9, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(validInGroupWithADXConstraintWidget_DimensionBehaviour:withADXConstraintWidget_DimensionBehaviour:withADXConstraintWidget_DimensionBehaviour:withADXConstraintWidget_DimensionBehaviour:);
  methods[2].selector = @selector(simpleSolvingPassWithADXConstraintWidgetContainer:withADXBasicMeasure_Measurer:);
  methods[3].selector = @selector(findGroupWithJavaUtilArrayList:withInt:);
  methods[4].selector = @selector(findDependentsWithADXConstraintWidget:withInt:withJavaUtilArrayList:withADXWidgetGroup:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "Z", .constantValue.asBOOL = ADXGrouping_DEBUG, 0x1a, -1, -1, -1, -1 },
    { "DEBUG_GROUPING", "Z", .constantValue.asBOOL = ADXGrouping_DEBUG_GROUPING, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "validInGroup", "LADXConstraintWidget_DimensionBehaviour;LADXConstraintWidget_DimensionBehaviour;LADXConstraintWidget_DimensionBehaviour;LADXConstraintWidget_DimensionBehaviour;", "simpleSolvingPass", "LADXConstraintWidgetContainer;LADXBasicMeasure_Measurer;", "findGroup", "LJavaUtilArrayList;I", "(Ljava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;>;I)Landroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;", "findDependents", "LADXConstraintWidget;ILJavaUtilArrayList;LADXWidgetGroup;", "(Landroidx/constraintlayout/core/widgets/ConstraintWidget;ILjava/util/ArrayList<Landroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;>;Landroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;)Landroidx/constraintlayout/core/widgets/analyzer/WidgetGroup;" };
  static const J2ObjcClassInfo _ADXGrouping = { "Grouping", "androidx.constraintlayout.core.widgets.analyzer", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ADXGrouping;
}

@end

void ADXGrouping_init(ADXGrouping *self) {
  NSObject_init(self);
}

ADXGrouping *new_ADXGrouping_init() {
  J2OBJC_NEW_IMPL(ADXGrouping, init)
}

ADXGrouping *create_ADXGrouping_init() {
  J2OBJC_CREATE_IMPL(ADXGrouping, init)
}

jboolean ADXGrouping_validInGroupWithADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_(ADXConstraintWidget_DimensionBehaviour *layoutHorizontal, ADXConstraintWidget_DimensionBehaviour *layoutVertical, ADXConstraintWidget_DimensionBehaviour *widgetHorizontal, ADXConstraintWidget_DimensionBehaviour *widgetVertical) {
  ADXGrouping_initialize();
  jboolean fixedHorizontal = widgetHorizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || widgetHorizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || (widgetHorizontal == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT) && layoutHorizontal != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
  jboolean fixedVertical = widgetVertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED) || widgetVertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT) || (widgetVertical == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, MATCH_PARENT) && layoutVertical != JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT));
  if (fixedHorizontal || fixedVertical) {
    return true;
  }
  return false;
}

jboolean ADXGrouping_simpleSolvingPassWithADXConstraintWidgetContainer_withADXBasicMeasure_Measurer_(ADXConstraintWidgetContainer *layout, id<ADXBasicMeasure_Measurer> measurer) {
  ADXGrouping_initialize();
  JavaUtilArrayList *children = JreRetainedLocalValue([((ADXConstraintWidgetContainer *) nil_chk(layout)) getChildren]);
  jint count = [((JavaUtilArrayList *) nil_chk(children)) size];
  JavaUtilArrayList *verticalGuidelines = nil;
  JavaUtilArrayList *horizontalGuidelines = nil;
  JavaUtilArrayList *horizontalBarriers = nil;
  JavaUtilArrayList *verticalBarriers = nil;
  JavaUtilArrayList *isolatedHorizontalChildren = nil;
  JavaUtilArrayList *isolatedVerticalChildren = nil;
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *child = JreRetainedLocalValue([children getWithInt:i]);
    if (!ADXGrouping_validInGroupWithADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_([layout getHorizontalDimensionBehaviour], [layout getVerticalDimensionBehaviour], [((ADXConstraintWidget *) nil_chk(child)) getHorizontalDimensionBehaviour], [child getVerticalDimensionBehaviour])) {
      return false;
    }
    if ([child isKindOfClass:[ADXCoreFlow class]]) {
      return false;
    }
  }
  if (layout->mMetrics_ != nil) {
    layout->mMetrics_->grouping_++;
  }
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *child = JreRetainedLocalValue([children getWithInt:i]);
    if (!ADXGrouping_validInGroupWithADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_withADXConstraintWidget_DimensionBehaviour_([layout getHorizontalDimensionBehaviour], [layout getVerticalDimensionBehaviour], [((ADXConstraintWidget *) nil_chk(child)) getHorizontalDimensionBehaviour], [child getVerticalDimensionBehaviour])) {
      ADXConstraintWidgetContainer_measureWithInt_withADXConstraintWidget_withADXBasicMeasure_Measurer_withADXBasicMeasure_Measure_withInt_(0, child, measurer, layout->mMeasure_, JreLoadStatic(ADXBasicMeasure_Measure, SELF_DIMENSIONS));
    }
    if ([child isKindOfClass:[ADXCoreGuideline class]]) {
      ADXCoreGuideline *guideline = (ADXCoreGuideline *) child;
      if ([guideline getOrientation] == ADXConstraintWidget_HORIZONTAL) {
        if (horizontalGuidelines == nil) {
          horizontalGuidelines = create_JavaUtilArrayList_init();
        }
        [horizontalGuidelines addWithId:guideline];
      }
      if ([guideline getOrientation] == ADXConstraintWidget_VERTICAL) {
        if (verticalGuidelines == nil) {
          verticalGuidelines = create_JavaUtilArrayList_init();
        }
        [verticalGuidelines addWithId:guideline];
      }
    }
    if ([child isKindOfClass:[ADXHelperWidget class]]) {
      if ([child isKindOfClass:[ADXCoreBarrier class]]) {
        ADXCoreBarrier *barrier = (ADXCoreBarrier *) child;
        if ([barrier getOrientation] == ADXConstraintWidget_HORIZONTAL) {
          if (horizontalBarriers == nil) {
            horizontalBarriers = create_JavaUtilArrayList_init();
          }
          [horizontalBarriers addWithId:barrier];
        }
        if ([barrier getOrientation] == ADXConstraintWidget_VERTICAL) {
          if (verticalBarriers == nil) {
            verticalBarriers = create_JavaUtilArrayList_init();
          }
          [verticalBarriers addWithId:barrier];
        }
      }
      else {
        ADXHelperWidget *helper = (ADXHelperWidget *) child;
        if (horizontalBarriers == nil) {
          horizontalBarriers = create_JavaUtilArrayList_init();
        }
        [horizontalBarriers addWithId:helper];
        if (verticalBarriers == nil) {
          verticalBarriers = create_JavaUtilArrayList_init();
        }
        [verticalBarriers addWithId:helper];
      }
    }
    if (((ADXConstraintAnchor *) nil_chk(child->mLeft_))->mTarget_ == nil && ((ADXConstraintAnchor *) nil_chk(child->mRight_))->mTarget_ == nil && !([child isKindOfClass:[ADXCoreGuideline class]]) && !([child isKindOfClass:[ADXCoreBarrier class]])) {
      if (isolatedHorizontalChildren == nil) {
        isolatedHorizontalChildren = create_JavaUtilArrayList_init();
      }
      [isolatedHorizontalChildren addWithId:child];
    }
    if (((ADXConstraintAnchor *) nil_chk(child->mTop_))->mTarget_ == nil && ((ADXConstraintAnchor *) nil_chk(child->mBottom_))->mTarget_ == nil && ((ADXConstraintAnchor *) nil_chk(child->mBaseline_))->mTarget_ == nil && !([child isKindOfClass:[ADXCoreGuideline class]]) && !([child isKindOfClass:[ADXCoreBarrier class]])) {
      if (isolatedVerticalChildren == nil) {
        isolatedVerticalChildren = create_JavaUtilArrayList_init();
      }
      [isolatedVerticalChildren addWithId:child];
    }
  }
  JavaUtilArrayList *allDependencyLists = create_JavaUtilArrayList_init();
  {
    JavaUtilArrayList *dependencyLists = JreRetainedLocalValue(allDependencyLists);
    if (verticalGuidelines != nil) {
      for (ADXCoreGuideline * __strong guideline in verticalGuidelines) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(guideline, ADXConstraintWidget_HORIZONTAL, dependencyLists, nil);
      }
    }
    if (horizontalBarriers != nil) {
      for (ADXHelperWidget * __strong barrier in horizontalBarriers) {
        ADXWidgetGroup *group = ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(barrier, ADXConstraintWidget_HORIZONTAL, dependencyLists, nil);
        [((ADXHelperWidget *) nil_chk(barrier)) addDependentsWithJavaUtilArrayList:dependencyLists withInt:ADXConstraintWidget_HORIZONTAL withADXWidgetGroup:group];
        [((ADXWidgetGroup *) nil_chk(group)) cleanupWithJavaUtilArrayList:dependencyLists];
      }
    }
    ADXConstraintAnchor *left = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, LEFT)]);
    if ([((ADXConstraintAnchor *) nil_chk(left)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([left getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_HORIZONTAL, dependencyLists, nil);
      }
    }
    ADXConstraintAnchor *right = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, RIGHT)]);
    if ([((ADXConstraintAnchor *) nil_chk(right)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([right getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_HORIZONTAL, dependencyLists, nil);
      }
    }
    ADXConstraintAnchor *center = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
    if ([((ADXConstraintAnchor *) nil_chk(center)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([center getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_HORIZONTAL, dependencyLists, nil);
      }
    }
    if (isolatedHorizontalChildren != nil) {
      for (ADXConstraintWidget * __strong widget in isolatedHorizontalChildren) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(widget, ADXConstraintWidget_HORIZONTAL, dependencyLists, nil);
      }
    }
  }
  {
    JavaUtilArrayList *dependencyLists = JreRetainedLocalValue(allDependencyLists);
    if (horizontalGuidelines != nil) {
      for (ADXCoreGuideline * __strong guideline in horizontalGuidelines) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(guideline, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
      }
    }
    if (verticalBarriers != nil) {
      for (ADXHelperWidget * __strong barrier in verticalBarriers) {
        ADXWidgetGroup *group = ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(barrier, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
        [((ADXHelperWidget *) nil_chk(barrier)) addDependentsWithJavaUtilArrayList:dependencyLists withInt:ADXConstraintWidget_VERTICAL withADXWidgetGroup:group];
        [((ADXWidgetGroup *) nil_chk(group)) cleanupWithJavaUtilArrayList:dependencyLists];
      }
    }
    ADXConstraintAnchor *top = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, TOP)]);
    if ([((ADXConstraintAnchor *) nil_chk(top)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([top getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
      }
    }
    ADXConstraintAnchor *baseline = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BASELINE)]);
    if ([((ADXConstraintAnchor *) nil_chk(baseline)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([baseline getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
      }
    }
    ADXConstraintAnchor *bottom = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, BOTTOM)]);
    if ([((ADXConstraintAnchor *) nil_chk(bottom)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([bottom getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
      }
    }
    ADXConstraintAnchor *center = JreRetainedLocalValue([layout getAnchorWithADXConstraintAnchor_Type:JreLoadEnum(ADXConstraintAnchor_Type, CENTER)]);
    if ([((ADXConstraintAnchor *) nil_chk(center)) getDependents] != nil) {
      for (ADXConstraintAnchor * __strong first in nil_chk([center getDependents])) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(((ADXConstraintAnchor *) nil_chk(first))->mOwner_, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
      }
    }
    if (isolatedVerticalChildren != nil) {
      for (ADXConstraintWidget * __strong widget in isolatedVerticalChildren) {
        ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(widget, ADXConstraintWidget_VERTICAL, dependencyLists, nil);
      }
    }
  }
  for (jint i = 0; i < count; i++) {
    ADXConstraintWidget *child = JreRetainedLocalValue([children getWithInt:i]);
    if ([((ADXConstraintWidget *) nil_chk(child)) oppositeDimensionsTied]) {
      ADXWidgetGroup *horizontalGroup = ADXGrouping_findGroupWithJavaUtilArrayList_withInt_(allDependencyLists, child->horizontalGroup_);
      ADXWidgetGroup *verticalGroup = ADXGrouping_findGroupWithJavaUtilArrayList_withInt_(allDependencyLists, child->verticalGroup_);
      if (horizontalGroup != nil && verticalGroup != nil) {
        [horizontalGroup moveToWithInt:ADXConstraintWidget_HORIZONTAL withADXWidgetGroup:verticalGroup];
        [verticalGroup setOrientationWithInt:ADXConstraintWidget_BOTH];
        [allDependencyLists removeWithId:horizontalGroup];
      }
    }
  }
  if ([allDependencyLists size] <= 1) {
    return false;
  }
  ADXWidgetGroup *horizontalPick = nil;
  ADXWidgetGroup *verticalPick = nil;
  if ([layout getHorizontalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
    jint maxWrap = 0;
    ADXWidgetGroup *picked = nil;
    for (ADXWidgetGroup * __strong list in allDependencyLists) {
      if ([((ADXWidgetGroup *) nil_chk(list)) getOrientation] == ADXConstraintWidget_VERTICAL) {
        continue;
      }
      [list setAuthoritativeWithBoolean:false];
      jint wrap = [list measureWrapWithADXLinearSystem:[layout getSystem] withInt:ADXConstraintWidget_HORIZONTAL];
      if (wrap > maxWrap) {
        picked = list;
        maxWrap = wrap;
      }
    }
    if (picked != nil) {
      [layout setHorizontalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
      [layout setWidthWithInt:maxWrap];
      [picked setAuthoritativeWithBoolean:true];
      horizontalPick = picked;
    }
  }
  if ([layout getVerticalDimensionBehaviour] == JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, WRAP_CONTENT)) {
    jint maxWrap = 0;
    ADXWidgetGroup *picked = nil;
    for (ADXWidgetGroup * __strong list in allDependencyLists) {
      if ([((ADXWidgetGroup *) nil_chk(list)) getOrientation] == ADXConstraintWidget_HORIZONTAL) {
        continue;
      }
      [list setAuthoritativeWithBoolean:false];
      jint wrap = [list measureWrapWithADXLinearSystem:[layout getSystem] withInt:ADXConstraintWidget_VERTICAL];
      if (wrap > maxWrap) {
        picked = list;
        maxWrap = wrap;
      }
    }
    if (picked != nil) {
      [layout setVerticalDimensionBehaviourWithADXConstraintWidget_DimensionBehaviour:JreLoadEnum(ADXConstraintWidget_DimensionBehaviour, FIXED)];
      [layout setHeightWithInt:maxWrap];
      [picked setAuthoritativeWithBoolean:true];
      verticalPick = picked;
    }
  }
  return horizontalPick != nil || verticalPick != nil;
}

ADXWidgetGroup *ADXGrouping_findGroupWithJavaUtilArrayList_withInt_(JavaUtilArrayList *horizontalDependencyLists, jint groupId) {
  ADXGrouping_initialize();
  jint count = [((JavaUtilArrayList *) nil_chk(horizontalDependencyLists)) size];
  for (jint i = 0; i < count; i++) {
    ADXWidgetGroup *group = JreRetainedLocalValue([horizontalDependencyLists getWithInt:i]);
    if (groupId == ((ADXWidgetGroup *) nil_chk(group))->id__) {
      return group;
    }
  }
  return nil;
}

ADXWidgetGroup *ADXGrouping_findDependentsWithADXConstraintWidget_withInt_withJavaUtilArrayList_withADXWidgetGroup_(ADXConstraintWidget *constraintWidget, jint orientation, JavaUtilArrayList *list, ADXWidgetGroup *group) {
  ADXGrouping_initialize();
  jint groupId = -1;
  if (orientation == ADXConstraintWidget_HORIZONTAL) {
    groupId = ((ADXConstraintWidget *) nil_chk(constraintWidget))->horizontalGroup_;
  }
  else {
    groupId = ((ADXConstraintWidget *) nil_chk(constraintWidget))->verticalGroup_;
  }
  if (groupId != -1 && (group == nil || (groupId != group->id__))) {
    for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(list)) size]; i++) {
      ADXWidgetGroup *widgetGroup = JreRetainedLocalValue([list getWithInt:i]);
      if ([((ADXWidgetGroup *) nil_chk(widgetGroup)) getId] == groupId) {
        if (group != nil) {
          [group moveToWithInt:orientation withADXWidgetGroup:widgetGroup];
          [list removeWithId:group];
        }
        group = widgetGroup;
        break;
      }
    }
  }
  else if (groupId != -1) {
    return group;
  }
  if (group == nil) {
    if ([constraintWidget isKindOfClass:[ADXHelperWidget class]]) {
      ADXHelperWidget *helper = (ADXHelperWidget *) constraintWidget;
      groupId = [helper findGroupInDependentsWithInt:orientation];
      if (groupId != -1) {
        for (jint i = 0; i < [((JavaUtilArrayList *) nil_chk(list)) size]; i++) {
          ADXWidgetGroup *widgetGroup = JreRetainedLocalValue([list getWithInt:i]);
          if ([((ADXWidgetGroup *) nil_chk(widgetGroup)) getId] == groupId) {
            group = widgetGroup;
            break;
          }
        }
      }
    }
    if (group == nil) {
      group = create_ADXWidgetGroup_initWithInt_(orientation);
    }
    [((JavaUtilArrayList *) nil_chk(list)) addWithId:group];
  }
  if ([group addWithADXConstraintWidget:constraintWidget]) {
    if ([constraintWidget isKindOfClass:[ADXCoreGuideline class]]) {
      ADXCoreGuideline *guideline = (ADXCoreGuideline *) constraintWidget;
      [((ADXConstraintAnchor *) nil_chk([guideline getAnchor])) findDependentsWithInt:[guideline getOrientation] == ADXCoreGuideline_HORIZONTAL ? ADXConstraintWidget_VERTICAL : ADXConstraintWidget_HORIZONTAL withJavaUtilArrayList:list withADXWidgetGroup:group];
    }
    if (orientation == ADXConstraintWidget_HORIZONTAL) {
      constraintWidget->horizontalGroup_ = [group getId];
      [((ADXConstraintAnchor *) nil_chk(constraintWidget->mLeft_)) findDependentsWithInt:orientation withJavaUtilArrayList:list withADXWidgetGroup:group];
      [((ADXConstraintAnchor *) nil_chk(constraintWidget->mRight_)) findDependentsWithInt:orientation withJavaUtilArrayList:list withADXWidgetGroup:group];
    }
    else {
      constraintWidget->verticalGroup_ = [group getId];
      [((ADXConstraintAnchor *) nil_chk(constraintWidget->mTop_)) findDependentsWithInt:orientation withJavaUtilArrayList:list withADXWidgetGroup:group];
      [((ADXConstraintAnchor *) nil_chk(constraintWidget->mBaseline_)) findDependentsWithInt:orientation withJavaUtilArrayList:list withADXWidgetGroup:group];
      [((ADXConstraintAnchor *) nil_chk(constraintWidget->mBottom_)) findDependentsWithInt:orientation withJavaUtilArrayList:list withADXWidgetGroup:group];
    }
    [((ADXConstraintAnchor *) nil_chk(constraintWidget->mCenter_)) findDependentsWithInt:orientation withJavaUtilArrayList:list withADXWidgetGroup:group];
  }
  return group;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXGrouping)
