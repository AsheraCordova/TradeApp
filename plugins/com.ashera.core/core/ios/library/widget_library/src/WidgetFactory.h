//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\widget\WidgetFactory.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_WidgetFactory")
#ifdef RESTRICT_WidgetFactory
#define INCLUDE_ALL_WidgetFactory 0
#else
#define INCLUDE_ALL_WidgetFactory 1
#endif
#undef RESTRICT_WidgetFactory

#if !defined (ASWidgetFactory_) && (INCLUDE_ALL_WidgetFactory || defined(INCLUDE_ASWidgetFactory))
#define ASWidgetFactory_

@class ASWidgetAttribute;
@class ASWidgetAttributeMap;
@class ASWidgetAttribute_Builder;
@class IOSObjectArray;
@protocol ASHasWidgets;
@protocol ASIAttributable;
@protocol ASIBehavior;
@protocol ASICompositeDecorator;
@protocol ASIDecorator;
@protocol ASIFragment;
@protocol ASILifeCycleDecorator;
@protocol ASIWidget;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

@interface ASWidgetFactory : NSObject

#pragma mark Public

- (instancetype)init;

+ (id<ASIWidget>)createWidgetWithNSString:(NSString *)localName
                             withNSString:(NSString *)themeName
                         withASHasWidgets:(id<ASHasWidgets>)parent
                              withBoolean:(jboolean)addNativeOnly;

+ (id<ASIWidget>)getWithNSString:(NSString *)localname
                     withBoolean:(jboolean)isLazy;

+ (id<ASIAttributable>)getAttributableWithNSString:(NSString *)localname;

+ (id<JavaUtilList>)getAttributablesWithNSStringArray:(IOSObjectArray *)localnames;

+ (ASWidgetAttribute *)getAttributeWithNSString:(NSString *)localname
                                   withNSString:(NSString *)attributeName;

+ (id<ASIBehavior>)getBehaviorWithNSString:(NSString *)behavior;

+ (id<ASICompositeDecorator>)getCompositeDecorator;

+ (id<JavaUtilSet>)getConstructorAttributesWithNSString:(NSString *)localname;

+ (id<ASIDecorator>)getDecoratorWithASICompositeDecorator:(id<ASICompositeDecorator>)wrappingWidget
                                            withASIWidget:(id<ASIWidget>)wrappedWidget
                                             withNSString:(NSString *)localname;

+ (id<ASILifeCycleDecorator>)getLifeCycleDecorWithNSString:(NSString *)lifeCycleDecorator
                                             withASIWidget:(id<ASIWidget>)widget;

+ (jboolean)isAttributeLoadedWithNSString:(NSString *)localname;

+ (void)loadWidgetWithASIWidget:(id<ASIWidget>)widget
       withASWidgetAttributeMap:(ASWidgetAttributeMap *)attributes
                withASIFragment:(id<ASIFragment>)fragment
                withJavaUtilMap:(id<JavaUtilMap>)params;

+ (void)register__WithASICompositeDecorator:(id<ASICompositeDecorator>)compositeDecorator;

+ (void)register__WithASIWidget:(id<ASIWidget>)ui;

+ (void)registerAttributableForWithNSString:(NSString *)localName
                        withASIAttributable:(id<ASIAttributable>)attributable;

+ (void)registerAttributeWithNSString:(NSString *)localname
        withASWidgetAttribute_Builder:(ASWidgetAttribute_Builder *)builder;

+ (void)registerAttributeWithNSString:(NSString *)localname
                withASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

+ (void)registerBehaviorWithNSString:(NSString *)decorator
                     withASIBehavior:(id<ASIBehavior>)behavior;

+ (void)registerConstructorAttributeWithNSString:(NSString *)localname
                   withASWidgetAttribute_Builder:(ASWidgetAttribute_Builder *)builder;

+ (void)registerDecoratorWithASIDecorator:(id<ASIDecorator>)ui;

+ (void)registerLifeCycleDecoratorWithNSString:(NSString *)decorator
                     withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)lifeCycleDecorator;

@end

J2OBJC_STATIC_INIT(ASWidgetFactory)

FOUNDATION_EXPORT void ASWidgetFactory_init(ASWidgetFactory *self);

FOUNDATION_EXPORT ASWidgetFactory *new_ASWidgetFactory_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASWidgetFactory *create_ASWidgetFactory_init(void);

FOUNDATION_EXPORT id<ASIWidget> ASWidgetFactory_createWidgetWithNSString_withNSString_withASHasWidgets_withBoolean_(NSString *localName, NSString *themeName, id<ASHasWidgets> parent, jboolean addNativeOnly);

FOUNDATION_EXPORT id<JavaUtilSet> ASWidgetFactory_getConstructorAttributesWithNSString_(NSString *localname);

FOUNDATION_EXPORT void ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(NSString *localname, ASWidgetAttribute_Builder *builder);

FOUNDATION_EXPORT id<ASICompositeDecorator> ASWidgetFactory_getCompositeDecorator(void);

FOUNDATION_EXPORT void ASWidgetFactory_register__WithASICompositeDecorator_(id<ASICompositeDecorator> compositeDecorator);

FOUNDATION_EXPORT id<ASIAttributable> ASWidgetFactory_getAttributableWithNSString_(NSString *localname);

FOUNDATION_EXPORT id<JavaUtilList> ASWidgetFactory_getAttributablesWithNSStringArray_(IOSObjectArray *localnames);

FOUNDATION_EXPORT id<ASIWidget> ASWidgetFactory_getWithNSString_withBoolean_(NSString *localname, jboolean isLazy);

FOUNDATION_EXPORT id<ASIDecorator> ASWidgetFactory_getDecoratorWithASICompositeDecorator_withASIWidget_withNSString_(id<ASICompositeDecorator> wrappingWidget, id<ASIWidget> wrappedWidget, NSString *localname);

FOUNDATION_EXPORT void ASWidgetFactory_loadWidgetWithASIWidget_withASWidgetAttributeMap_withASIFragment_withJavaUtilMap_(id<ASIWidget> widget, ASWidgetAttributeMap *attributes, id<ASIFragment> fragment, id<JavaUtilMap> params);

FOUNDATION_EXPORT void ASWidgetFactory_register__WithASIWidget_(id<ASIWidget> ui);

FOUNDATION_EXPORT void ASWidgetFactory_registerDecoratorWithASIDecorator_(id<ASIDecorator> ui);

FOUNDATION_EXPORT jboolean ASWidgetFactory_isAttributeLoadedWithNSString_(NSString *localname);

FOUNDATION_EXPORT void ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(NSString *localname, ASWidgetAttribute_Builder *builder);

FOUNDATION_EXPORT void ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_(NSString *localname, ASWidgetAttribute *widgetAttribute);

FOUNDATION_EXPORT ASWidgetAttribute *ASWidgetFactory_getAttributeWithNSString_withNSString_(NSString *localname, NSString *attributeName);

FOUNDATION_EXPORT id<ASILifeCycleDecorator> ASWidgetFactory_getLifeCycleDecorWithNSString_withASIWidget_(NSString *lifeCycleDecorator, id<ASIWidget> widget);

FOUNDATION_EXPORT void ASWidgetFactory_registerLifeCycleDecoratorWithNSString_withASILifeCycleDecorator_(NSString *decorator, id<ASILifeCycleDecorator> lifeCycleDecorator);

FOUNDATION_EXPORT void ASWidgetFactory_registerBehaviorWithNSString_withASIBehavior_(NSString *decorator, id<ASIBehavior> behavior);

FOUNDATION_EXPORT id<ASIBehavior> ASWidgetFactory_getBehaviorWithNSString_(NSString *behavior);

FOUNDATION_EXPORT void ASWidgetFactory_registerAttributableForWithNSString_withASIAttributable_(NSString *localName, id<ASIAttributable> attributable);

J2OBJC_TYPE_LITERAL_HEADER(ASWidgetFactory)

@compatibility_alias ComAsheraWidgetWidgetFactory ASWidgetFactory;

#endif

#pragma pop_macro("INCLUDE_ALL_WidgetFactory")
