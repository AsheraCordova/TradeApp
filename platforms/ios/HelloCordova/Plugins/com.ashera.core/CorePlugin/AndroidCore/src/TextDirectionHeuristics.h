//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\text\TextDirectionHeuristics.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_TextDirectionHeuristics")
#ifdef RESTRICT_TextDirectionHeuristics
#define INCLUDE_ALL_TextDirectionHeuristics 0
#else
#define INCLUDE_ALL_TextDirectionHeuristics 1
#endif
#undef RESTRICT_TextDirectionHeuristics

#if !defined (ADTextDirectionHeuristics_) && (INCLUDE_ALL_TextDirectionHeuristics || defined(INCLUDE_ADTextDirectionHeuristics))
#define ADTextDirectionHeuristics_

@protocol ADTextDirectionHeuristic;

/*!
 @brief Some objects that implement <code>TextDirectionHeuristic</code>.Use these with
  the <code>unicodeWrap()</code> methods in <code>BidiFormatter</code>.
 Also notice that these direction heuristics correspond to the same types of constants
  provided in the <code>r.android.view.View</code> class for <code>setTextDirection()</code>
 , such as <code>r.android.view.View.TEXT_DIRECTION_RTL</code>.
  <p>To support versions lower than <code>r.android.os.Build.VERSION_CODES.JELLY_BEAN_MR2</code>,
  you can use the support library's <code>r.android.support.v4.text.TextDirectionHeuristicsCompat</code>
  class.
 */
@interface ADTextDirectionHeuristics : NSObject

#pragma mark Public

- (instancetype)init;

@end

J2OBJC_STATIC_INIT(ADTextDirectionHeuristics)

/*!
 @brief Always decides that the direction is left to right.
 */
inline id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_get_LTR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_LTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics, LTR, id<ADTextDirectionHeuristic>)

/*!
 @brief Always decides that the direction is right to left.
 */
inline id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_get_RTL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_RTL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics, RTL, id<ADTextDirectionHeuristic>)

/*!
 @brief Determines the direction based on the first strong directional character, including bidi
  format chars, falling back to left to right if it finds none.This is the default behavior
  of the Unicode Bidirectional Algorithm.
 */
inline id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_get_FIRSTSTRONG_LTR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_FIRSTSTRONG_LTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics, FIRSTSTRONG_LTR, id<ADTextDirectionHeuristic>)

/*!
 @brief Determines the direction based on the first strong directional character, including bidi
  format chars, falling back to right to left if it finds none.This is similar to the default
  behavior of the Unicode Bidirectional Algorithm, just with different fallback behavior.
 */
inline id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_get_FIRSTSTRONG_RTL(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_FIRSTSTRONG_RTL;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics, FIRSTSTRONG_RTL, id<ADTextDirectionHeuristic>)

/*!
 @brief If the text contains any strong right to left non-format character, determines that the
  direction is right to left, falling back to left to right if it finds none.
 */
inline id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_get_ANYRTL_LTR(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_ANYRTL_LTR;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics, ANYRTL_LTR, id<ADTextDirectionHeuristic>)

/*!
 @brief Force the paragraph direction to the Locale direction.Falls back to left to right.
 */
inline id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_get_LOCALE(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT id<ADTextDirectionHeuristic> ADTextDirectionHeuristics_LOCALE;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADTextDirectionHeuristics, LOCALE, id<ADTextDirectionHeuristic>)

FOUNDATION_EXPORT void ADTextDirectionHeuristics_init(ADTextDirectionHeuristics *self);

FOUNDATION_EXPORT ADTextDirectionHeuristics *new_ADTextDirectionHeuristics_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADTextDirectionHeuristics *create_ADTextDirectionHeuristics_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADTextDirectionHeuristics)

@compatibility_alias RAndroidTextTextDirectionHeuristics ADTextDirectionHeuristics;

#endif

#pragma pop_macro("INCLUDE_ALL_TextDirectionHeuristics")
