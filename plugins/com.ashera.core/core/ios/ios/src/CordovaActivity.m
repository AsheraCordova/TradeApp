//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCorePlugin\src\main\java\com\ashera\core\CordovaActivity.java
//

#include "Activity.h"
#include "CordovaActivity.h"
#include "IActivity.h"
#include "IFragment.h"
#include "J2ObjC_source.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@protocol JavaUtilMap;


@interface ASCordovaActivity () {
 @public
  __unsafe_unretained id<ASIActivity> delegate_;
  id<JavaUtilMap> userData_;
  id<JavaUtilMap> tempCache_;
}

@end

J2OBJC_FIELD_SETTER(ASCordovaActivity, userData_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASCordovaActivity, tempCache_, id<JavaUtilMap>)

@implementation ASCordovaActivity

- (instancetype)initWithASIActivity:(id<ASIActivity>)delegate {
  ASCordovaActivity_initWithASIActivity_(self, delegate);
  return self;
}

- (void)onDeviceReady {
  [((id<ASIActivity>) nil_chk(delegate_)) onDeviceReady];
}

- (id<ASIFragment>)getActiveRootFragment {
  return [((id<ASIActivity>) nil_chk(delegate_)) getActiveRootFragment];
}

- (void)sendEventMessageWithJavaUtilMap:(id<JavaUtilMap>)dataMap {
  [((id<ASIActivity>) nil_chk(delegate_)) sendEventMessageWithJavaUtilMap:dataMap];
}

- (NSString *)getAssetMode {
  return [((id<ASIActivity>) nil_chk(delegate_)) getAssetMode];
}

- (NSString *)getDevServerIp {
  return [((id<ASIActivity>) nil_chk(delegate_)) getDevServerIp];
}

- (id)getUserDataWithNSString:(NSString *)key {
  if (userData_ == nil) {
    userData_ = new_JavaUtilHashMap_init();
  }
  return [userData_ getWithId:key];
}

- (void)storeUserDataWithNSString:(NSString *)key
                           withId:(id)object {
  if (userData_ == nil) {
    userData_ = new_JavaUtilHashMap_init();
  }
  (void) [userData_ putWithId:key withId:object];
}

- (void)storeInTempCacheWithNSString:(NSString *)key
                              withId:(id)object {
  if (tempCache_ == nil) {
    tempCache_ = new_JavaUtilHashMap_init();
  }
  (void) [tempCache_ putWithId:key withId:object];
}

- (id)getFromTempCacheWithNSString:(NSString *)key {
  if (tempCache_ == nil) {
    return nil;
  }
  return [tempCache_ getWithId:key];
}

- (id)getRootWidget {
  @throw new_JavaLangRuntimeException_initWithNSString_(@"Method not implemented in ios");
}

- (jfloat)getScaleFactor {
  return (jfloat) [((id<ASIActivity>) nil_chk(delegate_)) getScaleFactor];
}

- (NSString *)getPreferenceWithNSString:(NSString *)name {
  return [((id<ASIActivity>) nil_chk(delegate_)) getPreferenceWithNSString:name];
}

- (void)__javaClone:(ASCordovaActivity *)original {
  [super __javaClone:original];
  JreRelease(delegate_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASIFragment;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, 3, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 7, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 10, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASIActivity:);
  methods[1].selector = @selector(onDeviceReady);
  methods[2].selector = @selector(getActiveRootFragment);
  methods[3].selector = @selector(sendEventMessageWithJavaUtilMap:);
  methods[4].selector = @selector(getAssetMode);
  methods[5].selector = @selector(getDevServerIp);
  methods[6].selector = @selector(getUserDataWithNSString:);
  methods[7].selector = @selector(storeUserDataWithNSString:withId:);
  methods[8].selector = @selector(storeInTempCacheWithNSString:withId:);
  methods[9].selector = @selector(getFromTempCacheWithNSString:);
  methods[10].selector = @selector(getRootWidget);
  methods[11].selector = @selector(getScaleFactor);
  methods[12].selector = @selector(getPreferenceWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "delegate_", "LASIActivity;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "userData_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
    { "tempCache_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 11, -1 },
  };
  static const void *ptrTable[] = { "LASIActivity;", "sendEventMessage", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "getUserData", "LNSString;", "storeUserData", "LNSString;LNSObject;", "storeInTempCache", "getFromTempCache", "getPreference", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;" };
  static const J2ObjcClassInfo _ASCordovaActivity = { "CordovaActivity", "com.ashera.core", ptrTable, methods, fields, 7, 0x1, 13, 3, -1, -1, -1, -1, -1 };
  return &_ASCordovaActivity;
}

@end

void ASCordovaActivity_initWithASIActivity_(ASCordovaActivity *self, id<ASIActivity> delegate) {
  ADActivity_init(self);
  self->delegate_ = delegate;
}

ASCordovaActivity *new_ASCordovaActivity_initWithASIActivity_(id<ASIActivity> delegate) {
  J2OBJC_NEW_IMPL(ASCordovaActivity, initWithASIActivity_, delegate)
}

ASCordovaActivity *create_ASCordovaActivity_initWithASIActivity_(id<ASIActivity> delegate) {
  J2OBJC_CREATE_IMPL(ASCordovaActivity, initWithASIActivity_, delegate)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASCordovaActivity)
