//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ChronometerImpl.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_ChronometerImpl")
#ifdef RESTRICT_ChronometerImpl
#define INCLUDE_ALL_ChronometerImpl 0
#else
#define INCLUDE_ALL_ChronometerImpl 1
#endif
#undef RESTRICT_ChronometerImpl

#if !defined (ASChronometerImpl_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl))
#define ASChronometerImpl_

#define RESTRICT_BaseWidget 1
#define INCLUDE_ASBaseWidget 1
#include "BaseWidget.h"

@class ADChronometer;
@class ASChronometerImpl_ChronometerBean;
@class ASChronometerImpl_ChronometerCommandBuilder;
@class ASMeasurableTextView;
@class ASWidgetAttribute;
@protocol ASIFragment;
@protocol ASILifeCycleDecorator;
@protocol ASIWidget;
@protocol JavaUtilMap;

@interface ASChronometerImpl : ASBaseWidget {
 @public
  id uiView_;
  ASMeasurableTextView *measurableTextView_;
  ADChronometer *chronometer_;
}
@property id uiView;

#pragma mark Public

- (instancetype)init;

- (id)asNativeWidget;

- (id)asWidget;

- (jboolean)checkIosVersionWithNSString:(NSString *)v;

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params;

- (void)drawableStateChanged;

- (id)getAdjustsFontSizeToFitWidth;

- (id)getAllowsDefaultTighteningForTruncation;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (jint)getBaseLine;

- (ASChronometerImpl_ChronometerBean *)getBean;

- (jint)getBorderPadding;

- (ASChronometerImpl_ChronometerCommandBuilder *)getBuilder;

- (id)getHighlightedTextColor;

- (id)getIsEnabled;

- (id)getIsHighlighted;

- (id)getIsUserInteractionEnabled;

- (jint)getLineHeightPadding;

- (jint)getMaxEms;

- (jint)getMaxHeight;

- (jint)getMaxLines;

- (jint)getMaxWidth;

- (jint)getMinEms;

- (id)getMinimumScaleFactor;

- (jint)getMinLines;

- (id)getNumberOfLines;

- (id)getPluginWithNSString:(NSString *)plugin;

- (id)getPreferredMaxLayoutWidth;

- (id)getShadowColor;

- (id)getText;

- (id)getTextColor;

- (void)invalidate;

- (void)loadAttributesWithNSString:(NSString *)attributeName;

- (id<ASIWidget>)newInstance OBJC_METHOD_FAMILY_NONE;

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection;

- (void)requestLayout;

- (void)setAdjustsFontSizeToFitWidthWithId:(id)nativeWidget
                                    withId:(id)value;

- (void)setAllowsDefaultTighteningForTruncationWithId:(id)nativeWidget
                                               withId:(id)value;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setHighlightedTextColorWithId:(id)nativeWidget
                               withId:(id)value;

- (void)setIdWithNSString:(NSString *)id_;

- (void)setIsEnabledWithId:(id)nativeWidget
                    withId:(id)value;

- (void)setIsHighlightedWithId:(id)nativeWidget
                        withId:(id)value;

- (void)setIsUserInteractionEnabledWithId:(id)nativeWidget
                                   withId:(id)value;

- (void)setMinimumScaleFactorWithId:(id)nativeWidget
                             withId:(id)value;

- (void)setNumberOfLinesWithId:(id)nativeWidget
                        withId:(id)value;

- (void)setPaddingWithId:(id)objValue;

- (void)setPaddingBottomWithId:(id)objValue;

- (void)setPaddingLeftWithId:(id)objValue;

- (void)setPaddingRightWithId:(id)objValue;

- (void)setPaddingTopWithId:(id)objValue;

- (void)setPreferredMaxLayoutWidthWithId:(id)nativeWidget
                                  withId:(id)value;

- (void)setShadowColorWithId:(id)nativeWidget
                      withId:(id)value;

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value;

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value;

+ (NSString *)toUpperCaseWithNSString:(NSString *)text;

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height;

- (void)updatePadding;

#pragma mark Package-Private

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0
                    withNSString:(NSString *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(ASChronometerImpl)

J2OBJC_FIELD_SETTER(ASChronometerImpl, uiView_, id)
J2OBJC_FIELD_SETTER(ASChronometerImpl, measurableTextView_, ASMeasurableTextView *)
J2OBJC_FIELD_SETTER(ASChronometerImpl, chronometer_, ADChronometer *)

inline NSString *ASChronometerImpl_get_LOCAL_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASChronometerImpl_LOCAL_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASChronometerImpl, LOCAL_NAME, NSString *)

inline NSString *ASChronometerImpl_get_GROUP_NAME(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *ASChronometerImpl_GROUP_NAME;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASChronometerImpl, GROUP_NAME, NSString *)

FOUNDATION_EXPORT void ASChronometerImpl_init(ASChronometerImpl *self);

FOUNDATION_EXPORT ASChronometerImpl *new_ASChronometerImpl_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl *create_ASChronometerImpl_init(void);

FOUNDATION_EXPORT NSString *ASChronometerImpl_toUpperCaseWithNSString_(NSString *text);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl)

@compatibility_alias ComAsheraLayoutChronometerImpl ASChronometerImpl;

#endif

#if !defined (ASChronometerImpl_DallocHandler_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_DallocHandler))
#define ASChronometerImpl_DallocHandler_

#define RESTRICT_EventBusHandler 1
#define INCLUDE_ASEventBusHandler 1
#include "EventBusHandler.h"

@class ASChronometerImpl;

@interface ASChronometerImpl_DallocHandler : ASEventBusHandler

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$
                             withNSString:(NSString *)type;

#pragma mark Protected

- (void)doPerformWithId:(id)payload;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_DallocHandler)

FOUNDATION_EXPORT void ASChronometerImpl_DallocHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl_DallocHandler *self, ASChronometerImpl *outer$, NSString *type);

FOUNDATION_EXPORT ASChronometerImpl_DallocHandler *new_ASChronometerImpl_DallocHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_DallocHandler *create_ASChronometerImpl_DallocHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_DallocHandler)

#endif

#if !defined (ASChronometerImpl_JustificationMode_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_JustificationMode))
#define ASChronometerImpl_JustificationMode_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_JustificationMode : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_JustificationMode)

FOUNDATION_EXPORT void ASChronometerImpl_JustificationMode_init(ASChronometerImpl_JustificationMode *self);

FOUNDATION_EXPORT ASChronometerImpl_JustificationMode *new_ASChronometerImpl_JustificationMode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_JustificationMode *create_ASChronometerImpl_JustificationMode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_JustificationMode)

#endif

#if !defined (ASChronometerImpl_Font_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_Font))
#define ASChronometerImpl_Font_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_Font : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_Font)

FOUNDATION_EXPORT void ASChronometerImpl_Font_init(ASChronometerImpl_Font *self);

FOUNDATION_EXPORT ASChronometerImpl_Font *new_ASChronometerImpl_Font_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_Font *create_ASChronometerImpl_Font_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_Font)

#endif

#if !defined (ASChronometerImpl_TextStyle_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_TextStyle))
#define ASChronometerImpl_TextStyle_

#define RESTRICT_AbstractBitFlagConverter 1
#define INCLUDE_ASAbstractBitFlagConverter 1
#include "AbstractBitFlagConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_TextStyle : ASAbstractBitFlagConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_TextStyle)

FOUNDATION_EXPORT void ASChronometerImpl_TextStyle_init(ASChronometerImpl_TextStyle *self);

FOUNDATION_EXPORT ASChronometerImpl_TextStyle *new_ASChronometerImpl_TextStyle_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_TextStyle *create_ASChronometerImpl_TextStyle_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_TextStyle)

#endif

#if !defined (ASChronometerImpl_DrawableTintMode_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_DrawableTintMode))
#define ASChronometerImpl_DrawableTintMode_

#define RESTRICT_AbstractEnumToIntConverter 1
#define INCLUDE_ASAbstractEnumToIntConverter 1
#include "AbstractEnumToIntConverter.h"

@class JavaLangInteger;
@protocol JavaUtilMap;

@interface ASChronometerImpl_DrawableTintMode : ASAbstractEnumToIntConverter

#pragma mark Public

- (JavaLangInteger *)getDefault;

- (id<JavaUtilMap>)getMapping;

#pragma mark Package-Private

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_DrawableTintMode)

FOUNDATION_EXPORT void ASChronometerImpl_DrawableTintMode_init(ASChronometerImpl_DrawableTintMode *self);

FOUNDATION_EXPORT ASChronometerImpl_DrawableTintMode *new_ASChronometerImpl_DrawableTintMode_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_DrawableTintMode *create_ASChronometerImpl_DrawableTintMode_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_DrawableTintMode)

#endif

#if !defined (ASChronometerImpl_ChronometerExt_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_ChronometerExt))
#define ASChronometerImpl_ChronometerExt_

#define RESTRICT_MeasurableTextView 1
#define INCLUDE_ASMeasurableTextView 1
#include "MeasurableTextView.h"

#define RESTRICT_ILifeCycleDecorator 1
#define INCLUDE_ASILifeCycleDecorator 1
#include "ILifeCycleDecorator.h"

@class ADRectF;
@class ASChronometerImpl;
@class ASWidgetAttribute;
@class IOSObjectArray;
@protocol ASIWidget;
@protocol JavaUtilList;

@interface ASChronometerImpl_ChronometerExt : ASMeasurableTextView < ASILifeCycleDecorator >

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$;

- (void)drawableStateChanged;

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas;

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute;

- (jint)getBorderPadding;

- (jint)getBorderWidth;

- (jint)getLineHeight;

- (jint)getLineHeightPadding;

- (id<JavaUtilList>)getMethods;

- (void)initialized OBJC_METHOD_FAMILY_NONE;

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget OBJC_METHOD_FAMILY_NONE;

- (void)offsetLeftAndRightWithInt:(jint)offset;

- (void)offsetTopAndBottomWithInt:(jint)offset;

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec;

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection;

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue;

- (void)setVisibilityWithInt:(jint)visibility;

- (jboolean)suggestedSizeFitsInSpaceWithInt:(jint)mAutoSizeTextSizeInPx
                                withADRectF:(ADRectF *)availableSpace;

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height;

#pragma mark Protected

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b;

- (void)setTextSizeInternalWithInt:(jint)unit
                         withFloat:(jfloat)optimalTextSize
                       withBoolean:(jboolean)b;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithASIWidget:(id<ASIWidget>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_ChronometerExt)

FOUNDATION_EXPORT void ASChronometerImpl_ChronometerExt_initWithASChronometerImpl_(ASChronometerImpl_ChronometerExt *self, ASChronometerImpl *outer$);

FOUNDATION_EXPORT ASChronometerImpl_ChronometerExt *new_ASChronometerImpl_ChronometerExt_initWithASChronometerImpl_(ASChronometerImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_ChronometerExt *create_ASChronometerImpl_ChronometerExt_initWithASChronometerImpl_(ASChronometerImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_ChronometerExt)

#endif

#if !defined (ASChronometerImpl_PostMeasureHandler_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_PostMeasureHandler))
#define ASChronometerImpl_PostMeasureHandler_

#define RESTRICT_EventBusHandler 1
#define INCLUDE_ASEventBusHandler 1
#include "EventBusHandler.h"

@class ASChronometerImpl;

@interface ASChronometerImpl_PostMeasureHandler : ASEventBusHandler

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$
                             withNSString:(NSString *)type;

#pragma mark Protected

- (void)doPerformWithId:(id)payload;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_PostMeasureHandler)

FOUNDATION_EXPORT void ASChronometerImpl_PostMeasureHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl_PostMeasureHandler *self, ASChronometerImpl *outer$, NSString *type);

FOUNDATION_EXPORT ASChronometerImpl_PostMeasureHandler *new_ASChronometerImpl_PostMeasureHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_PostMeasureHandler *create_ASChronometerImpl_PostMeasureHandler_initWithASChronometerImpl_withNSString_(ASChronometerImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_PostMeasureHandler)

#endif

#if !defined (ASChronometerImpl_ChronometerCommandBuilder_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_ChronometerCommandBuilder))
#define ASChronometerImpl_ChronometerCommandBuilder_

#define RESTRICT_ViewImpl 1
#define INCLUDE_ASViewImpl_ViewCommandBuilder 1
#include "ViewImpl.h"

@class ASChronometerImpl;

@interface ASChronometerImpl_ChronometerCommandBuilder : ASViewImpl_ViewCommandBuilder

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$;

- (ASChronometerImpl_ChronometerCommandBuilder *)executeWithBoolean:(jboolean)setter;

- (id)getDrawablePadding;

- (id)getEnabled;

- (id)getFirstBaselineToTopHeight;

- (id)getGravity;

- (id)getHeight;

- (id)getIosHighlightedTextColor;

- (id)getIosMinimumScaleFactor;

- (id)getIosNumberOfLines;

- (id)getIosPreferredMaxLayoutWidth;

- (id)getIosShadowColor;

- (id)getIosText;

- (id)getIosTextColor;

- (id)getJustificationMode;

- (id)getLastBaselineToBottomHeight;

- (id)getMaxEms;

- (id)getMaxHeight;

- (id)getMaxLines;

- (id)getMaxWidth;

- (id)getMinEms;

- (id)getMinHeight;

- (id)getMinLines;

- (id)getMinWidth;

- (id)getPaddingBottom;

- (id)getPaddingEnd;

- (id)getPaddingLeft;

- (id)getPaddingRight;

- (id)getPaddingStart;

- (id)getPaddingTop;

- (id)getShadowColor;

- (id)getShadowDx;

- (id)getShadowDy;

- (id)getText;

- (id)getTextColor;

- (id)getTextColorHighlight;

- (id)getTextSize;

- (id)getWidth;

- (ASChronometerImpl_ChronometerCommandBuilder *)invalidate;

- (id)isIosAdjustsFontSizeToFitWidth;

- (id)isIosAllowsDefaultTighteningForTruncation;

- (id)isIosIsEnabled;

- (id)isIosIsHighlighted;

- (id)isIosIsUserInteractionEnabled;

- (ASChronometerImpl_ChronometerCommandBuilder *)notifyDataSetChangedWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)refreshUiFromModelWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)requestLayout;

- (ASChronometerImpl_ChronometerCommandBuilder *)reset;

- (ASChronometerImpl_ChronometerCommandBuilder *)setAlphaWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setAsDragSourceWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setAttributeUnderTestWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setBackgroundRepeatWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setBackgroundTintModeWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setBackgroundTintWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setBackgroundWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setBaseElapsedTimeInMillisWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setClickableWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setContentDescriptionWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setCountDownWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setCustomErrorMessageKeysWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setCustomErrorMessageValuesWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableBottomWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableEndWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableLeftWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawablePaddingWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableRightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableStartWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableTintWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableTintModeWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDrawableTopWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setDuplicateParentStateWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setEmsWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setEnabledWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setErrorStyleWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setFirstBaselineToTopHeightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setFocusableWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setFontFamilyWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setForegroundGravityWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setForegroundRepeatWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setForegroundTintModeWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setForegroundTintWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setForegroundWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setFormatWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setGravityWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setHeightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIdWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setInvalidateOnFrameChangeWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAccessibilityHintWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAccessibilityIgnoresInvertColorsWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAccessibilityLabelWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAccessibilityTraitsWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAccessibilityValueWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAdjustsFontSizeToFitWidthWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAllowsDefaultTighteningForTruncationWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAlphaWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosAutoresizesSubviewsWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosBackgroundColorWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosClearsContextBeforeDrawingWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosClipsToBoundsWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosContentScaleFactorWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosHighlightedTextColorWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosInsetsLayoutMarginsFromSafeAreaWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsAccessibilityElementWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsEnabledWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsExclusiveTouchWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsHiddenWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsHighlightedWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsMultipleTouchEnabledWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsOpaqueWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosIsUserInteractionEnabledWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosLargeContentImageWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosLargeContentTitleWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosLayerBorderColorWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosLayerBorderWidthWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosLayerCornerRadiusWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosLayerMasksToBoundsWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosMinimumScaleFactorWithFloat:(jfloat)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosNumberOfLinesWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosPreferredMaxLayoutWidthWithFloat:(jfloat)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosPreservesSuperviewLayoutMarginsWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosRestorationIdentifierWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosScalesLargeContentImageWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosShadowColorWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosShowsLargeContentViewerWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosTagWithInt:(jint)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosTextWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosTextColorWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosTintColorWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setIosTranslatesAutoresizingMaskIntoConstraintsWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setJustificationModeWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setKeepScreenOnWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setLastBaselineToBottomHeightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setLayoutDirectionWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setLinesWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setLongClickableWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMaxEmsWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMaxHeightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMaxLinesWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMaxWidthWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMinEmsWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMinHeightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMinLinesWithInt:(jint)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setMinWidthWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setModelParamWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setModelPojoToUiParamsWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setModelPojoToUiWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setModelSyncEventsWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setModelUiToPojoEventIdsWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setModelUiToPojoWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setOnChronometerTickWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setOnClickWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setOnDragWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setOnKeyWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setOnLongClickWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setOnTouchWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingEndWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingRightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingStartWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingTopWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setRotationWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setRotationXWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setRotationYWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setScaleXWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setScaleYWithFloat:(jfloat)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setScrollHorizontallyWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setSelectedWithBoolean:(jboolean)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setShadowColorWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setShadowDxWithFloat:(jfloat)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setShadowDyWithFloat:(jfloat)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setSingleLineWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setStartStopWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setStopWhenReachedWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setStyleWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextAlignmentWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextAllCapsWithBoolean:(jboolean)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextColorWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextColorHighlightWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextDirectionWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextSizeWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTextStyleWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTransformPivotXWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTransformPivotYWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTranslationXWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTranslationYWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTranslationZWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setTypefaceWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_maxlengthWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_maxWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_minlengthWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_minWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_patternWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_requiredWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setV_typeWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setValidationErrorDisplayTypeWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setValidationWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setVisibilityWithNSString:(NSString *)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)setWidthWithNSString:(NSString *)value;

- (ASChronometerImpl_ChronometerCommandBuilder *)setZIndexWithInt:(jint)arg0;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetAlpha;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetBackground;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetBackgroundTint;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetBackgroundTintMode;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetClickable;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetContentDescription;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetDrawablePadding;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetDuplicateParentState;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetEnabled;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetFirstBaselineToTopHeight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetFocusable;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetForeground;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetForegroundGravity;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetForegroundTint;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetForegroundTintMode;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetGravity;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetHeight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetId;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAccessibilityHint;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAccessibilityIgnoresInvertColors;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAccessibilityLabel;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAccessibilityTraits;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAccessibilityValue;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAdjustsFontSizeToFitWidth;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAllowsDefaultTighteningForTruncation;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAlpha;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosAutoresizesSubviews;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosBackgroundColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosClearsContextBeforeDrawing;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosClipsToBounds;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosContentScaleFactor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosHighlightedTextColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosInsetsLayoutMarginsFromSafeArea;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsAccessibilityElement;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsEnabled;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsExclusiveTouch;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsFocused;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsHidden;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsHighlighted;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsMultipleTouchEnabled;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsOpaque;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosIsUserInteractionEnabled;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosLargeContentImage;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosLargeContentTitle;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosMinimumScaleFactor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosNumberOfLines;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosPreferredMaxLayoutWidth;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosPreservesSuperviewLayoutMargins;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosRestorationIdentifier;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosScalesLargeContentImage;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosShadowColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosShowsLargeContentViewer;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosTag;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosText;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosTextColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosTintColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetIosTranslatesAutoresizingMaskIntoConstraints;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetJustificationMode;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetKeepScreenOn;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetLastBaselineToBottomHeight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetLayoutDirection;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetLongClickable;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMaxEms;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMaxHeight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMaxLines;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMaxWidth;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMinEms;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMinHeight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMinLines;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetMinWidth;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetModelParam;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetModelPojoToUi;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetModelSyncEvents;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetModelUiToPojo;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetPaddingBottom;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetPaddingEnd;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetPaddingLeft;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetPaddingRight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetPaddingStart;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetPaddingTop;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetRotation;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetRotationX;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetRotationY;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetScaleX;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetScaleY;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetSelected;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetShadowColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetShadowDx;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetShadowDy;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetText;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTextAlignment;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTextColor;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTextColorHighlight;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTextDirection;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTextSize;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTransformPivotX;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTransformPivotY;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTranslationX;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTranslationY;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetTranslationZ;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetValidateForm;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetVisibility;

- (ASChronometerImpl_ChronometerCommandBuilder *)tryGetWidth;

- (ASChronometerImpl_ChronometerCommandBuilder *)updateModelDataWithNSString:(NSString *)arg0
                                                                      withId:(id)arg1;

- (ASChronometerImpl_ChronometerCommandBuilder *)validateFormWithNSString:(NSString *)arg0;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_ChronometerCommandBuilder)

FOUNDATION_EXPORT void ASChronometerImpl_ChronometerCommandBuilder_initWithASChronometerImpl_(ASChronometerImpl_ChronometerCommandBuilder *self, ASChronometerImpl *outer$);

FOUNDATION_EXPORT ASChronometerImpl_ChronometerCommandBuilder *new_ASChronometerImpl_ChronometerCommandBuilder_initWithASChronometerImpl_(ASChronometerImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_ChronometerCommandBuilder *create_ASChronometerImpl_ChronometerCommandBuilder_initWithASChronometerImpl_(ASChronometerImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_ChronometerCommandBuilder)

#endif

#if !defined (ASChronometerImpl_ChronometerBean_) && (INCLUDE_ALL_ChronometerImpl || defined(INCLUDE_ASChronometerImpl_ChronometerBean))
#define ASChronometerImpl_ChronometerBean_

#define RESTRICT_ViewImpl 1
#define INCLUDE_ASViewImpl_ViewBean 1
#include "ViewImpl.h"

@class ASChronometerImpl;
@protocol ASIWidget;

@interface ASChronometerImpl_ChronometerBean : ASViewImpl_ViewBean

#pragma mark Public

- (instancetype)initWithASChronometerImpl:(ASChronometerImpl *)outer$;

- (id)getDrawablePadding;

- (id)getEnabled;

- (id)getFirstBaselineToTopHeight;

- (id)getGravity;

- (id)getHeight;

- (id)getIosHighlightedTextColor;

- (id)getIosMinimumScaleFactor;

- (id)getIosNumberOfLines;

- (id)getIosPreferredMaxLayoutWidth;

- (id)getIosShadowColor;

- (id)getIosText;

- (id)getIosTextColor;

- (id)getJustificationMode;

- (id)getLastBaselineToBottomHeight;

- (id)getMaxEms;

- (id)getMaxHeight;

- (id)getMaxLines;

- (id)getMaxWidth;

- (id)getMinEms;

- (id)getMinHeight;

- (id)getMinLines;

- (id)getMinWidth;

- (id)getPaddingBottom;

- (id)getPaddingEnd;

- (id)getPaddingLeft;

- (id)getPaddingRight;

- (id)getPaddingStart;

- (id)getPaddingTop;

- (id)getShadowColor;

- (id)getShadowDx;

- (id)getShadowDy;

- (id)getText;

- (id)getTextColor;

- (id)getTextColorHighlight;

- (id)getTextSize;

- (id)getWidth;

- (id)isIosAdjustsFontSizeToFitWidth;

- (id)isIosAllowsDefaultTighteningForTruncation;

- (id)isIosIsEnabled;

- (id)isIosIsHighlighted;

- (id)isIosIsUserInteractionEnabled;

- (void)setBaseElapsedTimeInMillisWithInt:(jint)value;

- (void)setCountDownWithBoolean:(jboolean)value;

- (void)setDrawableBottomWithNSString:(NSString *)value;

- (void)setDrawableEndWithNSString:(NSString *)value;

- (void)setDrawableLeftWithNSString:(NSString *)value;

- (void)setDrawablePaddingWithNSString:(NSString *)value;

- (void)setDrawableRightWithNSString:(NSString *)value;

- (void)setDrawableStartWithNSString:(NSString *)value;

- (void)setDrawableTintWithNSString:(NSString *)value;

- (void)setDrawableTintModeWithNSString:(NSString *)value;

- (void)setDrawableTopWithNSString:(NSString *)value;

- (void)setEmsWithInt:(jint)value;

- (void)setEnabledWithBoolean:(jboolean)value;

- (void)setFirstBaselineToTopHeightWithNSString:(NSString *)value;

- (void)setFontFamilyWithNSString:(NSString *)value;

- (void)setFormatWithNSString:(NSString *)value;

- (void)setGravityWithNSString:(NSString *)value;

- (void)setHeightWithNSString:(NSString *)value;

- (void)setIosAdjustsFontSizeToFitWidthWithBoolean:(jboolean)value;

- (void)setIosAllowsDefaultTighteningForTruncationWithBoolean:(jboolean)value;

- (void)setIosHighlightedTextColorWithNSString:(NSString *)value;

- (void)setIosIsEnabledWithBoolean:(jboolean)value;

- (void)setIosIsHighlightedWithBoolean:(jboolean)value;

- (void)setIosIsUserInteractionEnabledWithBoolean:(jboolean)value;

- (void)setIosMinimumScaleFactorWithFloat:(jfloat)value;

- (void)setIosNumberOfLinesWithInt:(jint)value;

- (void)setIosPreferredMaxLayoutWidthWithFloat:(jfloat)value;

- (void)setIosShadowColorWithNSString:(NSString *)value;

- (void)setIosTextWithNSString:(NSString *)value;

- (void)setIosTextColorWithNSString:(NSString *)value;

- (void)setJustificationModeWithNSString:(NSString *)value;

- (void)setLastBaselineToBottomHeightWithNSString:(NSString *)value;

- (void)setLinesWithInt:(jint)value;

- (void)setMaxEmsWithInt:(jint)value;

- (void)setMaxHeightWithNSString:(NSString *)value;

- (void)setMaxLinesWithInt:(jint)value;

- (void)setMaxWidthWithNSString:(NSString *)value;

- (void)setMinEmsWithInt:(jint)value;

- (void)setMinHeightWithNSString:(NSString *)value;

- (void)setMinLinesWithInt:(jint)value;

- (void)setMinWidthWithNSString:(NSString *)value;

- (void)setOnChronometerTickWithNSString:(NSString *)value;

- (void)setPaddingWithNSString:(NSString *)value;

- (void)setPaddingBottomWithNSString:(NSString *)value;

- (void)setPaddingEndWithNSString:(NSString *)value;

- (void)setPaddingHorizontalWithNSString:(NSString *)value;

- (void)setPaddingLeftWithNSString:(NSString *)value;

- (void)setPaddingRightWithNSString:(NSString *)value;

- (void)setPaddingStartWithNSString:(NSString *)value;

- (void)setPaddingTopWithNSString:(NSString *)value;

- (void)setPaddingVerticalWithNSString:(NSString *)value;

- (void)setScrollHorizontallyWithBoolean:(jboolean)value;

- (void)setShadowColorWithNSString:(NSString *)value;

- (void)setShadowDxWithFloat:(jfloat)value;

- (void)setShadowDyWithFloat:(jfloat)value;

- (void)setSingleLineWithBoolean:(jboolean)value;

- (void)setStartStopWithBoolean:(jboolean)value;

- (void)setStopWhenReachedWithNSString:(NSString *)value;

- (void)setTextWithNSString:(NSString *)value;

- (void)setTextAllCapsWithBoolean:(jboolean)value;

- (void)setTextColorWithNSString:(NSString *)value;

- (void)setTextColorHighlightWithNSString:(NSString *)value;

- (void)setTextSizeWithNSString:(NSString *)value;

- (void)setTextStyleWithNSString:(NSString *)value;

- (void)setTypefaceWithNSString:(NSString *)value;

- (void)setWidthWithNSString:(NSString *)value;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithASIWidget:(id<ASIWidget>)arg0 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASChronometerImpl_ChronometerBean)

FOUNDATION_EXPORT void ASChronometerImpl_ChronometerBean_initWithASChronometerImpl_(ASChronometerImpl_ChronometerBean *self, ASChronometerImpl *outer$);

FOUNDATION_EXPORT ASChronometerImpl_ChronometerBean *new_ASChronometerImpl_ChronometerBean_initWithASChronometerImpl_(ASChronometerImpl *outer$) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASChronometerImpl_ChronometerBean *create_ASChronometerImpl_ChronometerBean_initWithASChronometerImpl_(ASChronometerImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASChronometerImpl_ChronometerBean)

#endif

#pragma pop_macro("INCLUDE_ALL_ChronometerImpl")
