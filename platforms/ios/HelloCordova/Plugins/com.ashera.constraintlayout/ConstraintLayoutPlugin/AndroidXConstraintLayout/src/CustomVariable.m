//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\CustomVariable.java
//

#include "CustomVariable.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "MotionWidget.h"
#include "TypedValues.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/RuntimeException.h"


@interface ADXCustomVariable () {
 @public
  jint mType_;
  jint mIntegerValue_;
  jfloat mFloatValue_;
  NSString *mStringValue_;
}

+ (jint)clampWithInt:(jint)c;

@end

J2OBJC_FIELD_SETTER(ADXCustomVariable, mStringValue_, NSString *)

inline NSString *ADXCustomVariable_get_TAG(void);
static NSString *ADXCustomVariable_TAG = @"TransitionLayout";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXCustomVariable, TAG, NSString *)

__attribute__((unused)) static jint ADXCustomVariable_clampWithInt_(jint c);

@implementation ADXCustomVariable

- (ADXCustomVariable *)copy__ {
  return create_ADXCustomVariable_initWithADXCustomVariable_(self);
}

- (instancetype)initWithADXCustomVariable:(ADXCustomVariable *)c {
  ADXCustomVariable_initWithADXCustomVariable_(self, c);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)type
                    withNSString:(NSString *)value {
  ADXCustomVariable_initWithNSString_withInt_withNSString_(self, name, type, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)type
                         withInt:(jint)value {
  ADXCustomVariable_initWithNSString_withInt_withInt_(self, name, type, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)type
                       withFloat:(jfloat)value {
  ADXCustomVariable_initWithNSString_withInt_withFloat_(self, name, type, value);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)type
                     withBoolean:(jboolean)value {
  ADXCustomVariable_initWithNSString_withInt_withBoolean_(self, name, type, value);
  return self;
}

+ (NSString *)colorStringWithInt:(jint)v {
  return ADXCustomVariable_colorStringWithInt_(v);
}

- (NSString *)description {
  NSString *str = JreStrcat("$C", mName_, ':');
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_INT:
    return JreStrcat("$I", str, mIntegerValue_);
    case ADXTypedValues_Custom_TYPE_FLOAT:
    return JreStrcat("$F", str, mFloatValue_);
    case ADXTypedValues_Custom_TYPE_COLOR:
    return JreStrcat("$$", str, ADXCustomVariable_colorStringWithInt_(mIntegerValue_));
    case ADXTypedValues_Custom_TYPE_STRING:
    return JreStrcat("$$", str, mStringValue_);
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    return JreStrcat("$@", str, JavaLangBoolean_valueOfWithBoolean_(mBooleanValue_));
    case ADXTypedValues_Custom_TYPE_DIMENSION:
    return JreStrcat("$F", str, mFloatValue_);
  }
  return JreStrcat("$$", str, @"????");
}

- (jint)getType {
  return mType_;
}

- (jboolean)getBooleanValue {
  return mBooleanValue_;
}

- (jfloat)getFloatValue {
  return mFloatValue_;
}

- (jint)getColorValue {
  return mIntegerValue_;
}

- (jint)getIntegerValue {
  return mIntegerValue_;
}

- (NSString *)getStringValue {
  return mStringValue_;
}

- (jboolean)isContinuous {
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_REFERENCE:
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    case ADXTypedValues_Custom_TYPE_STRING:
    return false;
    default:
    return true;
  }
}

- (void)setFloatValueWithFloat:(jfloat)value {
  mFloatValue_ = value;
}

- (void)setBooleanValueWithBoolean:(jboolean)value {
  mBooleanValue_ = value;
}

- (void)setIntValueWithInt:(jint)value {
  mIntegerValue_ = value;
}

- (void)setStringValueWithNSString:(NSString *)value {
  JreStrongAssign(&mStringValue_, value);
}

- (jint)numberOfInterpolatedValues {
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_COLOR:
    return 4;
    default:
    return 1;
  }
}

- (jfloat)getValueToInterpolate {
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_INT:
    return mIntegerValue_;
    case ADXTypedValues_Custom_TYPE_FLOAT:
    return mFloatValue_;
    case ADXTypedValues_Custom_TYPE_COLOR:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Color does not have a single color to interpolate");
    case ADXTypedValues_Custom_TYPE_STRING:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Cannot interpolate String");
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    return mBooleanValue_ ? 1 : 0;
    case ADXTypedValues_Custom_TYPE_DIMENSION:
    return mFloatValue_;
  }
  return JavaLangFloat_NaN;
}

- (void)getValuesToInterpolateWithFloatArray:(IOSFloatArray *)ret {
  {
    jint a;
    jint r;
    jint g;
    jint b;
    jfloat f_r;
    jfloat f_g;
    jfloat f_b;
    switch (mType_) {
      case ADXTypedValues_Custom_TYPE_INT:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mIntegerValue_;
      break;
      case ADXTypedValues_Custom_TYPE_FLOAT:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mFloatValue_;
      break;
      case ADXTypedValues_Custom_TYPE_COLOR:
      a = (jint) 0xFF & (JreRShift32(mIntegerValue_, 24));
      r = (jint) 0xFF & (JreRShift32(mIntegerValue_, 16));
      g = (jint) 0xFF & (JreRShift32(mIntegerValue_, 8));
      b = (jint) 0xFF & (mIntegerValue_);
      f_r = (jfloat) JavaLangMath_powWithDouble_withDouble_(r / 255.0f, 2.2);
      f_g = (jfloat) JavaLangMath_powWithDouble_withDouble_(g / 255.0f, 2.2);
      f_b = (jfloat) JavaLangMath_powWithDouble_withDouble_(b / 255.0f, 2.2);
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = f_r;
      *IOSFloatArray_GetRef(ret, 1) = f_g;
      *IOSFloatArray_GetRef(ret, 2) = f_b;
      *IOSFloatArray_GetRef(ret, 3) = a / 255.0f;
      break;
      case ADXTypedValues_Custom_TYPE_STRING:
      @throw create_JavaLangRuntimeException_initWithNSString_(@"Color does not have a single color to interpolate");
      case ADXTypedValues_Custom_TYPE_BOOLEAN:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mBooleanValue_ ? 1 : 0;
      break;
      case ADXTypedValues_Custom_TYPE_DIMENSION:
      *IOSFloatArray_GetRef(nil_chk(ret), 0) = mFloatValue_;
      break;
    }
  }
}

- (void)setValueWithFloatArray:(IOSFloatArray *)value {
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_REFERENCE:
    case ADXTypedValues_Custom_TYPE_INT:
    mIntegerValue_ = JreFpToInt(IOSFloatArray_Get(nil_chk(value), 0));
    break;
    case ADXTypedValues_Custom_TYPE_FLOAT:
    case ADXTypedValues_Custom_TYPE_DIMENSION:
    mFloatValue_ = IOSFloatArray_Get(nil_chk(value), 0);
    break;
    case ADXTypedValues_Custom_TYPE_COLOR:
    mIntegerValue_ = ADXCustomVariable_hsvToRgbWithFloat_withFloat_withFloat_(IOSFloatArray_Get(nil_chk(value), 0), IOSFloatArray_Get(value, 1), IOSFloatArray_Get(value, 2));
    mIntegerValue_ = (mIntegerValue_ & (jint) 0xFFFFFF) | (JreLShift32(ADXCustomVariable_clampWithInt_(JreFpToInt(((jint) 0xFF * IOSFloatArray_Get(value, 3)))), 24));
    break;
    case ADXTypedValues_Custom_TYPE_STRING:
    @throw create_JavaLangRuntimeException_initWithNSString_(@"Color does not have a single color to interpolate");
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    mBooleanValue_ = (IOSFloatArray_Get(nil_chk(value), 0) > 0.5);
    break;
  }
}

+ (jint)hsvToRgbWithFloat:(jfloat)hue
                withFloat:(jfloat)saturation
                withFloat:(jfloat)value {
  return ADXCustomVariable_hsvToRgbWithFloat_withFloat_withFloat_(hue, saturation, value);
}

- (jboolean)diffWithADXCustomVariable:(ADXCustomVariable *)CustomAttribute {
  if (CustomAttribute == nil || mType_ != CustomAttribute->mType_) {
    return false;
  }
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_INT:
    case ADXTypedValues_Custom_TYPE_REFERENCE:
    return mIntegerValue_ == CustomAttribute->mIntegerValue_;
    case ADXTypedValues_Custom_TYPE_FLOAT:
    return mFloatValue_ == CustomAttribute->mFloatValue_;
    case ADXTypedValues_Custom_TYPE_COLOR:
    return mIntegerValue_ == CustomAttribute->mIntegerValue_;
    case ADXTypedValues_Custom_TYPE_STRING:
    return mIntegerValue_ == CustomAttribute->mIntegerValue_;
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    return mBooleanValue_ == CustomAttribute->mBooleanValue_;
    case ADXTypedValues_Custom_TYPE_DIMENSION:
    return mFloatValue_ == CustomAttribute->mFloatValue_;
  }
  return false;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)attributeType {
  ADXCustomVariable_initWithNSString_withInt_(self, name, attributeType);
  return self;
}

- (instancetype)initWithNSString:(NSString *)name
                         withInt:(jint)attributeType
                          withId:(id)value {
  ADXCustomVariable_initWithNSString_withInt_withId_(self, name, attributeType, value);
  return self;
}

- (instancetype)initWithADXCustomVariable:(ADXCustomVariable *)source
                                   withId:(id)value {
  ADXCustomVariable_initWithADXCustomVariable_withId_(self, source, value);
  return self;
}

- (void)setValueWithId:(id)value {
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_REFERENCE:
    case ADXTypedValues_Custom_TYPE_INT:
    mIntegerValue_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
    break;
    case ADXTypedValues_Custom_TYPE_FLOAT:
    mFloatValue_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(value, [JavaLangFloat class]))) floatValue];
    break;
    case ADXTypedValues_Custom_TYPE_COLOR:
    mIntegerValue_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(value, [JavaLangInteger class]))) intValue];
    break;
    case ADXTypedValues_Custom_TYPE_STRING:
    JreStrongAssign(&mStringValue_, (NSString *) cast_chk(value, [NSString class]));
    break;
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    mBooleanValue_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(value, [JavaLangBoolean class]))) booleanValue];
    break;
    case ADXTypedValues_Custom_TYPE_DIMENSION:
    mFloatValue_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(value, [JavaLangFloat class]))) floatValue];
    break;
  }
}

+ (jint)clampWithInt:(jint)c {
  return ADXCustomVariable_clampWithInt_(c);
}

- (jint)getInterpolatedColorWithFloatArray:(IOSFloatArray *)value {
  jint r = ADXCustomVariable_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(nil_chk(value), 0), 1.0 / 2.2) * 255.0f)));
  jint g = ADXCustomVariable_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 1), 1.0 / 2.2) * 255.0f)));
  jint b = ADXCustomVariable_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 2), 1.0 / 2.2) * 255.0f)));
  jint a = ADXCustomVariable_clampWithInt_(JreFpToInt((IOSFloatArray_Get(value, 3) * 255.0f)));
  jint color = (JreLShift32(a, 24)) | (JreLShift32(r, 16)) | (JreLShift32(g, 8)) | b;
  return color;
}

- (void)setInterpolatedValueWithADXMotionWidget:(ADXMotionWidget *)view
                                 withFloatArray:(IOSFloatArray *)value {
  {
    jint r;
    jint g;
    jint b;
    jint a;
    jint color;
    switch (mType_) {
      case ADXTypedValues_Custom_TYPE_INT:
      [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withInt:JreFpToInt(IOSFloatArray_Get(nil_chk(value), 0))];
      break;
      case ADXTypedValues_Custom_TYPE_COLOR:
      r = ADXCustomVariable_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(nil_chk(value), 0), 1.0 / 2.2) * 255.0f)));
      g = ADXCustomVariable_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 1), 1.0 / 2.2) * 255.0f)));
      b = ADXCustomVariable_clampWithInt_(JreFpToInt(((jfloat) JavaLangMath_powWithDouble_withDouble_(IOSFloatArray_Get(value, 2), 1.0 / 2.2) * 255.0f)));
      a = ADXCustomVariable_clampWithInt_(JreFpToInt((IOSFloatArray_Get(value, 3) * 255.0f)));
      color = (JreLShift32(a, 24)) | (JreLShift32(r, 16)) | (JreLShift32(g, 8)) | b;
      [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withInt:color];
      break;
      case ADXTypedValues_Custom_TYPE_REFERENCE:
      case ADXTypedValues_Custom_TYPE_STRING:
      @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"unable to interpolate ", mName_));
      case ADXTypedValues_Custom_TYPE_BOOLEAN:
      [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withBoolean:IOSFloatArray_Get(nil_chk(value), 0) > 0.5f];
      break;
      case ADXTypedValues_Custom_TYPE_DIMENSION:
      case ADXTypedValues_Custom_TYPE_FLOAT:
      [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withFloat:IOSFloatArray_Get(nil_chk(value), 0)];
      break;
    }
  }
}

+ (jint)rgbaTocColorWithFloat:(jfloat)r
                    withFloat:(jfloat)g
                    withFloat:(jfloat)b
                    withFloat:(jfloat)a {
  return ADXCustomVariable_rgbaTocColorWithFloat_withFloat_withFloat_withFloat_(r, g, b, a);
}

- (void)applyToWidgetWithADXMotionWidget:(ADXMotionWidget *)view {
  switch (mType_) {
    case ADXTypedValues_Custom_TYPE_INT:
    case ADXTypedValues_Custom_TYPE_COLOR:
    case ADXTypedValues_Custom_TYPE_REFERENCE:
    [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withInt:mIntegerValue_];
    break;
    case ADXTypedValues_Custom_TYPE_STRING:
    [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withNSString:mStringValue_];
    break;
    case ADXTypedValues_Custom_TYPE_BOOLEAN:
    [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withBoolean:mBooleanValue_];
    break;
    case ADXTypedValues_Custom_TYPE_DIMENSION:
    case ADXTypedValues_Custom_TYPE_FLOAT:
    [((ADXMotionWidget *) nil_chk(view)) setCustomAttributeWithNSString:mName_ withInt:mType_ withFloat:mFloatValue_];
    break;
  }
}

- (NSString *)getName {
  return mName_;
}

- (void)dealloc {
  RELEASE_(mName_);
  RELEASE_(mStringValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADXCustomVariable;", 0x1, 0, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 2, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 4, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 6, 7, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 8, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 19, 20, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 21, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 22, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 23, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 24, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 25, -1, -1, -1, -1 },
    { NULL, "I", 0xa, 26, 7, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 27, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 30, 31, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(copy__);
  methods[1].selector = @selector(initWithADXCustomVariable:);
  methods[2].selector = @selector(initWithNSString:withInt:withNSString:);
  methods[3].selector = @selector(initWithNSString:withInt:withInt:);
  methods[4].selector = @selector(initWithNSString:withInt:withFloat:);
  methods[5].selector = @selector(initWithNSString:withInt:withBoolean:);
  methods[6].selector = @selector(colorStringWithInt:);
  methods[7].selector = @selector(description);
  methods[8].selector = @selector(getType);
  methods[9].selector = @selector(getBooleanValue);
  methods[10].selector = @selector(getFloatValue);
  methods[11].selector = @selector(getColorValue);
  methods[12].selector = @selector(getIntegerValue);
  methods[13].selector = @selector(getStringValue);
  methods[14].selector = @selector(isContinuous);
  methods[15].selector = @selector(setFloatValueWithFloat:);
  methods[16].selector = @selector(setBooleanValueWithBoolean:);
  methods[17].selector = @selector(setIntValueWithInt:);
  methods[18].selector = @selector(setStringValueWithNSString:);
  methods[19].selector = @selector(numberOfInterpolatedValues);
  methods[20].selector = @selector(getValueToInterpolate);
  methods[21].selector = @selector(getValuesToInterpolateWithFloatArray:);
  methods[22].selector = @selector(setValueWithFloatArray:);
  methods[23].selector = @selector(hsvToRgbWithFloat:withFloat:withFloat:);
  methods[24].selector = @selector(diffWithADXCustomVariable:);
  methods[25].selector = @selector(initWithNSString:withInt:);
  methods[26].selector = @selector(initWithNSString:withInt:withId:);
  methods[27].selector = @selector(initWithADXCustomVariable:withId:);
  methods[28].selector = @selector(setValueWithId:);
  methods[29].selector = @selector(clampWithInt:);
  methods[30].selector = @selector(getInterpolatedColorWithFloatArray:);
  methods[31].selector = @selector(setInterpolatedValueWithADXMotionWidget:withFloatArray:);
  methods[32].selector = @selector(rgbaTocColorWithFloat:withFloat:withFloat:withFloat:);
  methods[33].selector = @selector(applyToWidgetWithADXMotionWidget:);
  methods[34].selector = @selector(getName);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 34, -1, -1 },
    { "mName_", "LNSString;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mType_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIntegerValue_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFloatValue_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mStringValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBooleanValue_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "copy", "LADXCustomVariable;", "LNSString;ILNSString;", "LNSString;II", "LNSString;IF", "LNSString;IZ", "colorString", "I", "toString", "setFloatValue", "F", "setBooleanValue", "Z", "setIntValue", "setStringValue", "LNSString;", "getValuesToInterpolate", "[F", "setValue", "hsvToRgb", "FFF", "diff", "LNSString;I", "LNSString;ILNSObject;", "LADXCustomVariable;LNSObject;", "LNSObject;", "clamp", "getInterpolatedColor", "setInterpolatedValue", "LADXMotionWidget;[F", "rgbaTocColor", "FFFF", "applyToWidget", "LADXMotionWidget;", &ADXCustomVariable_TAG };
  static const J2ObjcClassInfo _ADXCustomVariable = { "CustomVariable", "androidx.constraintlayout.core.motion", ptrTable, methods, fields, 7, 0x1, 35, 7, -1, -1, -1, -1, -1 };
  return &_ADXCustomVariable;
}

@end

void ADXCustomVariable_initWithADXCustomVariable_(ADXCustomVariable *self, ADXCustomVariable *c) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, ((ADXCustomVariable *) nil_chk(c))->mName_);
  self->mType_ = c->mType_;
  self->mIntegerValue_ = c->mIntegerValue_;
  self->mFloatValue_ = c->mFloatValue_;
  JreStrongAssign(&self->mStringValue_, c->mStringValue_);
  self->mBooleanValue_ = c->mBooleanValue_;
}

ADXCustomVariable *new_ADXCustomVariable_initWithADXCustomVariable_(ADXCustomVariable *c) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithADXCustomVariable_, c)
}

ADXCustomVariable *create_ADXCustomVariable_initWithADXCustomVariable_(ADXCustomVariable *c) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithADXCustomVariable_, c)
}

void ADXCustomVariable_initWithNSString_withInt_withNSString_(ADXCustomVariable *self, NSString *name, jint type, NSString *value) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, name);
  self->mType_ = type;
  JreStrongAssign(&self->mStringValue_, value);
}

ADXCustomVariable *new_ADXCustomVariable_initWithNSString_withInt_withNSString_(NSString *name, jint type, NSString *value) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithNSString_withInt_withNSString_, name, type, value)
}

ADXCustomVariable *create_ADXCustomVariable_initWithNSString_withInt_withNSString_(NSString *name, jint type, NSString *value) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithNSString_withInt_withNSString_, name, type, value)
}

void ADXCustomVariable_initWithNSString_withInt_withInt_(ADXCustomVariable *self, NSString *name, jint type, jint value) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, name);
  self->mType_ = type;
  if (type == ADXTypedValues_Custom_TYPE_FLOAT) {
    self->mFloatValue_ = value;
  }
  else {
    self->mIntegerValue_ = value;
  }
}

ADXCustomVariable *new_ADXCustomVariable_initWithNSString_withInt_withInt_(NSString *name, jint type, jint value) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithNSString_withInt_withInt_, name, type, value)
}

ADXCustomVariable *create_ADXCustomVariable_initWithNSString_withInt_withInt_(NSString *name, jint type, jint value) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithNSString_withInt_withInt_, name, type, value)
}

void ADXCustomVariable_initWithNSString_withInt_withFloat_(ADXCustomVariable *self, NSString *name, jint type, jfloat value) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, name);
  self->mType_ = type;
  self->mFloatValue_ = value;
}

ADXCustomVariable *new_ADXCustomVariable_initWithNSString_withInt_withFloat_(NSString *name, jint type, jfloat value) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithNSString_withInt_withFloat_, name, type, value)
}

ADXCustomVariable *create_ADXCustomVariable_initWithNSString_withInt_withFloat_(NSString *name, jint type, jfloat value) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithNSString_withInt_withFloat_, name, type, value)
}

void ADXCustomVariable_initWithNSString_withInt_withBoolean_(ADXCustomVariable *self, NSString *name, jint type, jboolean value) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, name);
  self->mType_ = type;
  self->mBooleanValue_ = value;
}

ADXCustomVariable *new_ADXCustomVariable_initWithNSString_withInt_withBoolean_(NSString *name, jint type, jboolean value) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithNSString_withInt_withBoolean_, name, type, value)
}

ADXCustomVariable *create_ADXCustomVariable_initWithNSString_withInt_withBoolean_(NSString *name, jint type, jboolean value) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithNSString_withInt_withBoolean_, name, type, value)
}

NSString *ADXCustomVariable_colorStringWithInt_(jint v) {
  ADXCustomVariable_initialize();
  NSString *str = JreStrcat("$$", @"00000000", JavaLangInteger_toHexStringWithInt_(v));
  return JreStrcat("C$", '#', [str java_substring:[str java_length] - 8]);
}

jint ADXCustomVariable_hsvToRgbWithFloat_withFloat_withFloat_(jfloat hue, jfloat saturation, jfloat value) {
  ADXCustomVariable_initialize();
  jint h = JreFpToInt((hue * 6));
  jfloat f = hue * 6 - h;
  jint p = JreFpToInt((0.5f + 255 * value * (1 - saturation)));
  jint q = JreFpToInt((0.5f + 255 * value * (1 - f * saturation)));
  jint t = JreFpToInt((0.5f + 255 * value * (1 - (1 - f) * saturation)));
  jint v = JreFpToInt((0.5f + 255 * value));
  switch (h) {
    case 0:
    return 0XFF000000 | ((JreLShift32(v, 16)) + (JreLShift32(t, 8)) + p);
    case 1:
    return 0XFF000000 | ((JreLShift32(q, 16)) + (JreLShift32(v, 8)) + p);
    case 2:
    return 0XFF000000 | ((JreLShift32(p, 16)) + (JreLShift32(v, 8)) + t);
    case 3:
    return 0XFF000000 | ((JreLShift32(p, 16)) + (JreLShift32(q, 8)) + v);
    case 4:
    return 0XFF000000 | ((JreLShift32(t, 16)) + (JreLShift32(p, 8)) + v);
    case 5:
    return 0XFF000000 | ((JreLShift32(v, 16)) + (JreLShift32(p, 8)) + q);
  }
  return 0;
}

void ADXCustomVariable_initWithNSString_withInt_(ADXCustomVariable *self, NSString *name, jint attributeType) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, name);
  self->mType_ = attributeType;
}

ADXCustomVariable *new_ADXCustomVariable_initWithNSString_withInt_(NSString *name, jint attributeType) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithNSString_withInt_, name, attributeType)
}

ADXCustomVariable *create_ADXCustomVariable_initWithNSString_withInt_(NSString *name, jint attributeType) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithNSString_withInt_, name, attributeType)
}

void ADXCustomVariable_initWithNSString_withInt_withId_(ADXCustomVariable *self, NSString *name, jint attributeType, id value) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, name);
  self->mType_ = attributeType;
  [self setValueWithId:value];
}

ADXCustomVariable *new_ADXCustomVariable_initWithNSString_withInt_withId_(NSString *name, jint attributeType, id value) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithNSString_withInt_withId_, name, attributeType, value)
}

ADXCustomVariable *create_ADXCustomVariable_initWithNSString_withInt_withId_(NSString *name, jint attributeType, id value) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithNSString_withInt_withId_, name, attributeType, value)
}

void ADXCustomVariable_initWithADXCustomVariable_withId_(ADXCustomVariable *self, ADXCustomVariable *source, id value) {
  NSObject_init(self);
  self->mIntegerValue_ = JavaLangInteger_MIN_VALUE;
  self->mFloatValue_ = JavaLangFloat_NaN;
  JreStrongAssign(&self->mStringValue_, nil);
  JreStrongAssign(&self->mName_, ((ADXCustomVariable *) nil_chk(source))->mName_);
  self->mType_ = source->mType_;
  [self setValueWithId:value];
}

ADXCustomVariable *new_ADXCustomVariable_initWithADXCustomVariable_withId_(ADXCustomVariable *source, id value) {
  J2OBJC_NEW_IMPL(ADXCustomVariable, initWithADXCustomVariable_withId_, source, value)
}

ADXCustomVariable *create_ADXCustomVariable_initWithADXCustomVariable_withId_(ADXCustomVariable *source, id value) {
  J2OBJC_CREATE_IMPL(ADXCustomVariable, initWithADXCustomVariable_withId_, source, value)
}

jint ADXCustomVariable_clampWithInt_(jint c) {
  ADXCustomVariable_initialize();
  jint N = 255;
  c &= ~(JreRShift32(c, 31));
  c -= N;
  c &= (JreRShift32(c, 31));
  c += N;
  return c;
}

jint ADXCustomVariable_rgbaTocColorWithFloat_withFloat_withFloat_withFloat_(jfloat r, jfloat g, jfloat b, jfloat a) {
  ADXCustomVariable_initialize();
  jint ir = ADXCustomVariable_clampWithInt_(JreFpToInt((r * 255.0f)));
  jint ig = ADXCustomVariable_clampWithInt_(JreFpToInt((g * 255.0f)));
  jint ib = ADXCustomVariable_clampWithInt_(JreFpToInt((b * 255.0f)));
  jint ia = ADXCustomVariable_clampWithInt_(JreFpToInt((a * 255.0f)));
  jint color = (JreLShift32(ia, 24)) | (JreLShift32(ir, 16)) | (JreLShift32(ig, 8)) | ib;
  return color;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCustomVariable)
