//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\com\xwray\groupie\GroupAdapter.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_GroupAdapter")
#ifdef RESTRICT_GroupAdapter
#define INCLUDE_ALL_GroupAdapter 0
#else
#define INCLUDE_ALL_GroupAdapter 1
#endif
#undef RESTRICT_GroupAdapter

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability"
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (ADXGroupAdapter_) && (INCLUDE_ALL_GroupAdapter || defined(INCLUDE_ADXGroupAdapter))
#define ADXGroupAdapter_

#define RESTRICT_RecyclerView 1
#define INCLUDE_ADXRecyclerView_Adapter 1
#include "RecyclerView.h"

#define RESTRICT_GroupDataObserver 1
#define INCLUDE_ADXGroupDataObserver 1
#include "GroupDataObserver.h"

@class ADViewGroup;
@class ADXGridLayoutManager_SpanSizeLookup;
@class ADXGroupieViewHolder;
@class ADXItem;
@protocol ADXOnAsyncUpdateListener;
@protocol ADXOnItemClickListener;
@protocol ADXOnItemLongClickListener;
@protocol ADXRVGroup;
@protocol JavaUtilCollection;
@protocol JavaUtilList;

/*!
 @brief An adapter that holds a list of Groups.
 */
@interface ADXGroupAdapter : ADXRecyclerView_Adapter < ADXGroupDataObserver >

#pragma mark Public

- (instancetype)init;

- (void)addWithInt:(jint)index
    withADXRVGroup:(id<ADXRVGroup>)group;

- (void)addWithADXRVGroup:(id<ADXRVGroup>)group;

/*!
 @brief Adds the contents of the list of groups, in order, to the end of the adapter contents.
 All groups in the list must be non-null.
 @param groups
 */
- (void)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups;

- (void)clear;

- (ADXGroupieViewHolder *)createViewHolderWithADViewGroup:(ADViewGroup *)arg0
                                                  withInt:(jint)arg1;

- (jint)getAdapterPositionWithADXItem:(ADXItem *)contentItem;

/*!
 @brief The position in the flat list of individual items at which the group starts
 @param group
 */
- (jint)getAdapterPositionWithADXRVGroup:(id<ADXRVGroup>)group;

/*!
 @brief Get group, given a raw adapter position.If you want to get a top level group by position
  then use <code>getTopLevelGroup(int)</code>
 @param adapterPosition raw adapter position
 @return Group at that position or throws <code>IndexOutOfBoundsException</code>
 */
- (id<ADXRVGroup>)getGroupWithInt:(jint)adapterPosition;

/*!
 @brief Returns the Group which contains this item or throws an <code>IndexOutOfBoundsException</code> if not present.
 This is the item's <b>direct</b> parent, not necessarily one of the top level groups present in this adapter.
 @param contentItem Item to find the parent group for.
 @return Parent group of this item.
 */
- (id<ADXRVGroup>)getGroupWithADXItem:(ADXItem *)contentItem;

/*!
 @brief Get group, given a raw adapter position.If you want to get a top level group by position
  then use <code>getTopLevelGroup(int)</code>
 @param position raw adapter position
 @return Group at that position or throws <code>IndexOutOfBoundsException</code>
 */
- (id<ADXRVGroup>)getGroupAtAdapterPositionWithInt:(jint)position;

/*!
 @brief Returns the number of top-level groups present in the adapter.
 */
- (jint)getGroupCount;

- (ADXItem *)getItemWithInt:(jint)position;

- (ADXItem *)getItemWithADXGroupieViewHolder:(ADXGroupieViewHolder *)holder;

/*!
 @brief This returns the total number of items contained in all groups in this adapter
 */
- (jint)getItemCount;

/*!
 @brief This returns the total number of items contained in the top level group at the passed index
 */
- (jint)getItemCountWithInt:(jint)groupIndex;

/*!
 @brief This returns the total number of items contained in the top level group at the passed index
 */
- (jint)getItemCountForGroupWithInt:(jint)groupIndex;

/*!
 @brief This idea was copied from Epoxy.
 :wave: Bright idea guys! 
 <p>
  Find the model that has the given view type so we can create a viewholder for that model. 
 <p>
  To make this efficient, we rely on the RecyclerView implementation detail that <code>GroupAdapter.getItemViewType(int)</code>
  is called immediately before <code>GroupAdapter.onCreateViewHolder(r.android.view.ViewGroup, int)</code>
 . We cache the last model
  that had its view type looked up, and unless that implementation changes we expect to have a
  very fast lookup for the correct model. 
 <p>
  To be safe, we fallback to searching through all models for a view type match. This is slow and
  shouldn't be needed, but is a guard against RecyclerView behavior changing.
 */
- (ADXItem *)getItemForViewTypeWithInt:(jint)viewType;

- (jlong)getItemIdWithInt:(jint)position;

- (jint)getItemViewTypeWithInt:(jint)position;

- (jint)getSpanCount;

- (ADXGridLayoutManager_SpanSizeLookup *)getSpanSizeLookup;

/*!
 @brief Get group, given a top level group position.If you want to get a group at an adapter position
  then use <code>getGroupAtAdapterPosition(int)</code>
 @param position Top level group position
 @return Group at that position or throws <code>IndexOutOfBoundsException</code>
 */
- (id<ADXRVGroup>)getTopLevelGroupWithInt:(jint)position;

- (void)onBindViewHolderWithADXRecyclerView_ViewHolder:(ADXGroupieViewHolder *)holder
                                               withInt:(jint)position;

- (void)onBindViewHolderWithADXRecyclerView_ViewHolder:(ADXGroupieViewHolder *)holder
                                               withInt:(jint)position
                                      withJavaUtilList:(id<JavaUtilList>)payloads;

- (void)onChangedWithADXRVGroup:(id<ADXRVGroup>)group;

- (ADXGroupieViewHolder *)onCreateViewHolderWithADViewGroup:(ADViewGroup *)parent
                                                    withInt:(jint)viewType;

- (void)onDataSetInvalidated;

- (jboolean)onFailedToRecycleViewWithADXRecyclerView_ViewHolder:(ADXGroupieViewHolder *)holder;

- (void)onItemChangedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position;

- (void)onItemChangedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position
                             withId:(id)payload;

- (void)onItemInsertedWithADXRVGroup:(id<ADXRVGroup>)group
                             withInt:(jint)position;

- (void)onItemMovedWithADXRVGroup:(id<ADXRVGroup>)group
                          withInt:(jint)fromPosition
                          withInt:(jint)toPosition;

- (void)onItemRangeChangedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount;

- (void)onItemRangeChangedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount
                                  withId:(id)payload;

- (void)onItemRangeInsertedWithADXRVGroup:(id<ADXRVGroup>)group
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount;

- (void)onItemRangeRemovedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount;

- (void)onItemRemovedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position;

- (void)onViewAttachedToWindowWithADXRecyclerView_ViewHolder:(ADXGroupieViewHolder *)holder;

- (void)onViewDetachedFromWindowWithADXRecyclerView_ViewHolder:(ADXGroupieViewHolder *)holder;

- (void)onViewRecycledWithADXRecyclerView_ViewHolder:(ADXGroupieViewHolder *)holder;

- (void)removeWithADXRVGroup:(id<ADXRVGroup>)group;

- (void)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups;

/*!
 @brief Remove a Group at a raw adapter position.
 @param adapterPosition raw adapter position of Group to remove.
 */
- (void)removeGroupWithInt:(jint)adapterPosition;

/*!
 @brief Remove a Group at a raw adapter position
 @param position raw adapter position of Group to remove
 */
- (void)removeGroupAtAdapterPositionWithInt:(jint)position;

/*!
 @brief Replaces the groups within the adapter without using DiffUtil, and therefore without animations.
 For animation support, use <code>GroupAdapter.update(Collection)</code> or <code>GroupAdapter.updateAsync(List)</code> instead.
 @param newGroups List of <code>Group</code>
 */
- (void)replaceAllWithJavaUtilCollection:(id<JavaUtilCollection>)newGroups;

/*!
 @brief Optionally register an <code>OnItemClickListener</code> that listens to click at the root of
  each Item where <code>Item.isClickable()</code> returns true
 @param onItemClickListener The click listener to set
 */
- (void)setOnItemClickListenerWithADXOnItemClickListener:(id<ADXOnItemClickListener>)onItemClickListener;

/*!
 @brief Optionally register an <code>OnItemLongClickListener</code> that listens to long click at the root of
  each Item where <code>Item.isLongClickable()</code> returns true
 @param onItemLongClickListener The long click listener to set
 */
- (void)setOnItemLongClickListenerWithADXOnItemLongClickListener:(id<ADXOnItemLongClickListener>)onItemLongClickListener;

- (void)setSpanCountWithInt:(jint)spanCount;

/*!
 @brief Updates the adapter with a new list that will be diffed on the <em>main</em> thread
  and displayed once diff results are calculated.Not recommended for huge lists.
 This will default detectMoves to true.
 @param newGroups List of <code>Group</code>
 */
- (void)updateWithJavaUtilCollection:(id<JavaUtilCollection>)newGroups;

/*!
 @brief Updates the adapter with a new list that will be diffed on the <em>main</em> thread
  and displayed once diff results are calculated.Not recommended for huge lists.
 @param newGroups List of <code>Group</code>
 @param detectMoves is passed to <code>DiffUtil.calculateDiff(DiffUtil.Callback, boolean)</code> . Set to false
                      if you don't want DiffUtil to detect moved items.
 */
- (void)updateWithJavaUtilCollection:(id<JavaUtilCollection>)newGroups
                         withBoolean:(jboolean)detectMoves;

/*!
 @brief Updates the adapter with a new list that will be diffed on a background thread
  and displayed once diff results are calculated.
 NOTE: This update method is NOT compatible with partial updates (change notifications
  driven by individual groups and items).  If you update using this method, all partial
  updates will no longer work and you must use this method to update exclusively. 
 <br> <br>
  If you want to receive a callback once the update is complete call the 
 <code>updateAsync(List, boolean, OnAsyncUpdateListener)</code> version
  This will default detectMoves to true.
 @param newGroups List of <code>Group</code>
 */
- (void)updateAsyncWithJavaUtilList:(id<JavaUtilList>)newGroups;

/*!
 @brief Updates the adapter with a new list that will be diffed on a background thread
  and displayed once diff results are calculated.
 NOTE: This update method is NOT compatible with partial updates (change notifications
  driven by individual groups and items).  If you update using this method, all partial
  updates will no longer work and you must use this method to update exclusively.
 @param newGroups List of <code>Group</code>
 @param onAsyncUpdateListener Optional callback for when the async update is complete
 @param detectMoves Boolean is passed to <code>DiffUtil.calculateDiff(DiffUtil.Callback, boolean)</code> . Set to true
                      if you want DiffUtil to detect moved items.
 */
- (void)updateAsyncWithJavaUtilList:(id<JavaUtilList>)newGroups
                        withBoolean:(jboolean)detectMoves
       withADXOnAsyncUpdateListener:(id<ADXOnAsyncUpdateListener>)onAsyncUpdateListener;

/*!
 @brief Updates the adapter with a new list that will be diffed on a background thread
  and displayed once diff results are calculated.
 NOTE: This update method is NOT compatible with partial updates (change notifications
  driven by individual groups and items).  If you update using this method, all partial
  updates will no longer work and you must use this method to update exclusively. 
 <br> <br>
  This will default detectMoves to true.
 - seealso: #updateAsync(List, boolean, OnAsyncUpdateListener)
 @param newGroups List of <code>Group</code>
 */
- (void)updateAsyncWithJavaUtilList:(id<JavaUtilList>)newGroups
       withADXOnAsyncUpdateListener:(id<ADXOnAsyncUpdateListener>)onAsyncUpdateListener;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXGroupAdapter)

FOUNDATION_EXPORT void ADXGroupAdapter_init(ADXGroupAdapter *self);

FOUNDATION_EXPORT ADXGroupAdapter *new_ADXGroupAdapter_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ADXGroupAdapter *create_ADXGroupAdapter_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADXGroupAdapter)

@compatibility_alias ComXwrayGroupieGroupAdapter ADXGroupAdapter;

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_GroupAdapter")
