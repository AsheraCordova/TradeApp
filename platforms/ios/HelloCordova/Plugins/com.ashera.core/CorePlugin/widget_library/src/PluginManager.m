//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\plugin\PluginManager.java
//

#include "IPlugin.h"
#include "J2ObjC_source.h"
#include "PluginManager.h"
#include "java/lang/RuntimeException.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"

@protocol JavaUtilMap;


inline id<JavaUtilMap> ASPluginManager_get_registrationMap(void);
inline id<JavaUtilMap> ASPluginManager_set_registrationMap(id<JavaUtilMap> value);
static id<JavaUtilMap> ASPluginManager_registrationMap;
J2OBJC_STATIC_FIELD_OBJ(ASPluginManager, registrationMap, id<JavaUtilMap>)

J2OBJC_INITIALIZED_DEFN(ASPluginManager)

@implementation ASPluginManager

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASPluginManager_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (void)register__WithASIPlugin:(id<ASIPlugin>)plugin {
  ASPluginManager_register__WithASIPlugin_(plugin);
}

+ (id<ASIPlugin>)getWithNSString:(NSString *)name {
  return ASPluginManager_getWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LASIPlugin;", 0x9, 2, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(register__WithASIPlugin:);
  methods[2].selector = @selector(getWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "registrationMap", "LJavaUtilMap;", .constantValue.asLong = 0, 0xa, -1, 4, 5, -1 },
  };
  static const void *ptrTable[] = { "register", "LASIPlugin;", "get", "LNSString;", &ASPluginManager_registrationMap, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/plugin/IPlugin;>;" };
  static const J2ObjcClassInfo _ASPluginManager = { "PluginManager", "com.ashera.plugin", ptrTable, methods, fields, 7, 0x1, 3, 1, -1, -1, -1, -1, -1 };
  return &_ASPluginManager;
}

+ (void)initialize {
  if (self == [ASPluginManager class]) {
    JreStrongAssignAndConsume(&ASPluginManager_registrationMap, new_JavaUtilHashMap_init());
    J2OBJC_SET_INITIALIZED(ASPluginManager)
  }
}

@end

void ASPluginManager_init(ASPluginManager *self) {
  NSObject_init(self);
}

ASPluginManager *new_ASPluginManager_init() {
  J2OBJC_NEW_IMPL(ASPluginManager, init)
}

ASPluginManager *create_ASPluginManager_init() {
  J2OBJC_CREATE_IMPL(ASPluginManager, init)
}

void ASPluginManager_register__WithASIPlugin_(id<ASIPlugin> plugin) {
  ASPluginManager_initialize();
  [((id<JavaUtilMap>) nil_chk(ASPluginManager_registrationMap)) putWithId:[((id<ASIPlugin>) nil_chk(plugin)) getName] withId:plugin];
}

id<ASIPlugin> ASPluginManager_getWithNSString_(NSString *name) {
  ASPluginManager_initialize();
  id<ASIPlugin> plugin = JreRetainedLocalValue([((id<JavaUtilMap>) nil_chk(ASPluginManager_registrationMap)) getWithId:name]);
  if (plugin == nil) {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$$", @"Unable to find registration for plugin: ", name));
  }
  return plugin;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASPluginManager)
