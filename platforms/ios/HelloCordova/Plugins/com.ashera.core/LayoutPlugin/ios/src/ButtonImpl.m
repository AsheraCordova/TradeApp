//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ButtonImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributeCommand.h"
#include "BaseMeasurableView.h"
#include "BaseWidget.h"
#include "ButtonImpl.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "GravityConverter.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "MarqueeCommandConverter.h"
#include "MeasurableTextView.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "TextDirectionHeuristic.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIButton.h"

@class ASButtonImpl_DellocHandler;
@class ASButtonImpl_MarqueeTask;
@class JavaLangFloat;
@class JavaLangInteger;
@protocol JavaLangRunnable;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASButtonImpl () {
 @public
  id<JavaUtilMap> fontDescriptors_;
  jboolean html_;
  jboolean escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  ASButtonImpl_MarqueeTask *marqueeTask_;
  jint marqueeRepeatLimit_;
  ASMarqueeCommandConverter *marqueeCommandConverter_;
  ADColorStateList *drawableTint_;
  NSString *ellipsize_;
  id timer_;
  jboolean isDisposed_;
  ASButtonImpl_DellocHandler *dellocHandler_;
  ASButtonImpl_ButtonCommandBuilder *builder_;
  ASButtonImpl_ButtonBean *bean_;
}

- (void)setWidgetOnNativeClass;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (jint)getHeight;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (void)setMaxLengthWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (jboolean)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (jint)calcNumberOfWhiteSpaces;

- (void)cancelTimer;

- (void)startTimer;

- (id)getMarqueeRepeatLimit;

- (void)setMarqueeRepeatLimitWithId:(id)objValue;

- (void)startOrStopMarqueeWithId:(id)objValue;

- (jint)getLabelWidth;

- (jboolean)isLabelMeasured;

- (void)setTextFormatWithId:(id)objValue;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (void)setSingleLineWithId:(id)objValue;

- (id)getEllipsize;

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (jboolean)canMarquee;

- (void)cancelNativeTimer;

- (jboolean)isDisposed;

- (void)addDeallocHandler;

- (void)schedule;

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)createNativeWidgetWithJavaUtilMap:(id<JavaUtilMap>)params;

- (jint)nativeMeasureHeightButtonWithId:(id)uiView
                                withInt:(jint)width;

- (void)nativeSetTextWithId:(id)uiView
               withNSString:(NSString *)text;

- (id)getMyText;

- (id)getTitleLabel;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentLeft;

- (void)setVerticalAligmentCenter;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)nativeSetVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (jint)getTextAlignment;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeSetPaddingBottomWithInt:(jint)value;

- (void)nativeSetPaddingLeftWithInt:(jint)value;

- (void)nativeSetPaddingRightWithInt:(jint)value;

- (void)nativeSetPaddingTopWithInt:(jint)value;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setTextColorWithId:(id)uiView
                    withId:(id)color;

- (void)addMinMaxListener;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

- (void)syncPlaceholderLabel;

- (void)setHintColorWithInt:(jint)currentHintTextColor;

- (void)setEnabledWithId:(id)objValue;

- (void)nativeSetEnabledWithBoolean:(jboolean)enabled;

- (jint)nativeMeasureWidthButtonWithId:(id)uiView;

- (void)setNumberOfLinesWithId:(id)uiView
                       withInt:(jint)lines;

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode;

- (id)nativeGetLinBreakMode;

- (id)getSingleLine;

- (id)getFont;

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue;

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment;

- (id)getJustificationMode;

- (JavaLangInteger *)nativeGetTextAligment;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (id)getShadowColor;

- (void)setShadowColorWithId:(id)objValue
                withNSString:(NSString *)strValue;

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (id)getShadowDy;

- (id)getShadowDx;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

@end

J2OBJC_FIELD_SETTER(ASButtonImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASButtonImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASButtonImpl, marqueeTask_, ASButtonImpl_MarqueeTask *)
J2OBJC_FIELD_SETTER(ASButtonImpl, marqueeCommandConverter_, ASMarqueeCommandConverter *)
J2OBJC_FIELD_SETTER(ASButtonImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASButtonImpl, ellipsize_, NSString *)
J2OBJC_FIELD_SETTER(ASButtonImpl, timer_, id)
J2OBJC_FIELD_SETTER(ASButtonImpl, dellocHandler_, ASButtonImpl_DellocHandler *)
J2OBJC_FIELD_SETTER(ASButtonImpl, builder_, ASButtonImpl_ButtonCommandBuilder *)
J2OBJC_FIELD_SETTER(ASButtonImpl, bean_, ASButtonImpl_ButtonBean *)

inline jint ASButtonImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASButtonImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASButtonImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASButtonImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASButtonImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASButtonImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASButtonImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASButtonImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASButtonImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASButtonImpl, BOLD_FONT_TRAIT, jint)

inline jint ASButtonImpl_get_NORMAL_FONT_TRAIT(void);
#define ASButtonImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASButtonImpl, NORMAL_FONT_TRAIT, jint)

inline jint ASButtonImpl_get_TEXT_ALIGN_CENTER(void);
#define ASButtonImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASButtonImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASButtonImpl_get_TEXT_ALIGN_LEFT(void);
#define ASButtonImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASButtonImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASButtonImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASButtonImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASButtonImpl, TEXT_ALIGN_RIGHT, jint)

__attribute__((unused)) static void ASButtonImpl_setWidgetOnNativeClass(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setGravityWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_updateTextAlignment(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getGravity(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getMinHeight(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getMinWidth(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setEmsWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMinEmsWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMaxEmsWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setWidthWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setHeightWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMaxLinesWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setLinesWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMinLinesWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMaxHeightWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMaxWidthWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMinHeightWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMinWidthWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getWidth(ASButtonImpl *self);

__attribute__((unused)) static jint ASButtonImpl_getHeight(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setTypeFaceWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASButtonImpl_setFontFamilyWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASButtonImpl_setTextStyleWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setMaxLengthWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setTextAllCapsWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setFirstBaselineToTopHeightWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static jboolean ASButtonImpl_getIncludeFontPadding(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getFirstBaselineToTopHeight(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setLastBaselineToBottomHeightWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getLastBaselineToBottomHeight(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_initHtmlWithJavaUtilMap_(ASButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static jint ASButtonImpl_calcNumberOfWhiteSpaces(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_cancelTimer(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_startTimer(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getMarqueeRepeatLimit(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setMarqueeRepeatLimitWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_startOrStopMarqueeWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASButtonImpl_getLabelWidth(ASButtonImpl *self);

__attribute__((unused)) static jboolean ASButtonImpl_isLabelMeasured(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setTextFormatWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getTextSize(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setMyTextSizeWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_nativeSetTextSizeWithInt_(ASButtonImpl *self, jint value);

__attribute__((unused)) static void ASButtonImpl_setTextColorWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getTextColorState(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setDrawablePaddingWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setDrawableBottomWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setDrawableTopWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setDrawableRightWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASButtonImpl_setDrawableRightInternalWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASButtonImpl_setDrawableLeftWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASButtonImpl_setDrawableLeftInternalWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASButtonImpl_getImageHeightWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASButtonImpl_getImageWidthWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getDrawablePadding(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setDrawableTintModeWithId_(ASButtonImpl *self, id value);

__attribute__((unused)) static void ASButtonImpl_setDrawableTintWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(ASButtonImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static jint ASButtonImpl_nativeGetFontSize(ASButtonImpl *self);

__attribute__((unused)) static jint ASButtonImpl_nativeGetFontStyle(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASButtonImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASButtonImpl_nativeSetFontStyleWithInt_(ASButtonImpl *self, jint style);

__attribute__((unused)) static void ASButtonImpl_setSingleLineWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getEllipsize(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setEllipsizeWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static jint ASButtonImpl_getLineHeight(ASButtonImpl *self);

__attribute__((unused)) static jint ASButtonImpl_getBorderWidth(ASButtonImpl *self);

__attribute__((unused)) static jboolean ASButtonImpl_canMarquee(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_cancelNativeTimer(ASButtonImpl *self);

__attribute__((unused)) static jboolean ASButtonImpl_isDisposed(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_addDeallocHandler(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_schedule(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_executeOnMainThreadWithJavaLangRunnable_(ASButtonImpl *self, id<JavaLangRunnable> runnable);

__attribute__((unused)) static void ASButtonImpl_nativeCreateWithJavaUtilMap_(ASButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASButtonImpl_createNativeWidgetWithJavaUtilMap_(ASButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static jint ASButtonImpl_nativeMeasureHeightButtonWithId_withInt_(ASButtonImpl *self, id uiView, jint width);

__attribute__((unused)) static void ASButtonImpl_nativeSetTextWithId_withNSString_(ASButtonImpl *self, id uiView, NSString *text);

__attribute__((unused)) static id ASButtonImpl_getMyText(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getTitleLabel(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setHorizontalAligmentCenter(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setHorizontalAligmentRight(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setHorizontalAligmentLeft(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setVerticalAligmentCenter(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_nativeSetVerticalAligmentBottom(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_nativeSetVerticalAligmentTop(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_nativeSetVerticalAligmentCenter(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setVerticalAligmentBottom(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setVerticalAligmentTop(ASButtonImpl *self);

__attribute__((unused)) static jint ASButtonImpl_getTextAlignment(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getPaddingEnd(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getPaddingStart(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setPaddingVerticalWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setPaddingHorizontalWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setPaddingEndWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setPaddingStartWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_setPaddingWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_nativeSetPaddingBottomWithInt_(ASButtonImpl *self, jint value);

__attribute__((unused)) static void ASButtonImpl_nativeSetPaddingLeftWithInt_(ASButtonImpl *self, jint value);

__attribute__((unused)) static void ASButtonImpl_nativeSetPaddingRightWithInt_(ASButtonImpl *self, jint value);

__attribute__((unused)) static void ASButtonImpl_nativeSetPaddingTopWithInt_(ASButtonImpl *self, jint value);

__attribute__((unused)) static void ASButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASButtonImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASButtonImpl_setTextColorWithId_withId_(ASButtonImpl *self, id uiView, id color);

__attribute__((unused)) static void ASButtonImpl_addMinMaxListener(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setTextColorLinkWithADColorStateList_(ASButtonImpl *self, ADColorStateList *linkTextColors);

__attribute__((unused)) static void ASButtonImpl_syncPlaceholderLabel(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setHintColorWithInt_(ASButtonImpl *self, jint currentHintTextColor);

__attribute__((unused)) static void ASButtonImpl_setEnabledWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static void ASButtonImpl_nativeSetEnabledWithBoolean_(ASButtonImpl *self, jboolean enabled);

__attribute__((unused)) static jint ASButtonImpl_nativeMeasureWidthButtonWithId_(ASButtonImpl *self, id uiView);

__attribute__((unused)) static void ASButtonImpl_setNumberOfLinesWithId_withInt_(ASButtonImpl *self, id uiView, jint lines);

__attribute__((unused)) static void ASButtonImpl_nativeSetLineBreakModeWithInt_(ASButtonImpl *self, jint lineBreakMode);

__attribute__((unused)) static id ASButtonImpl_nativeGetLinBreakMode(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getSingleLine(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getFont(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setJustificationModeWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASButtonImpl_nativeSetTextAligmentWithInt_(ASButtonImpl *self, jint textAlignment);

__attribute__((unused)) static id ASButtonImpl_getJustificationMode(ASButtonImpl *self);

__attribute__((unused)) static JavaLangInteger *ASButtonImpl_nativeGetTextAligment(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setScrollHorizontallyWithId_(ASButtonImpl *self, id objValue);

__attribute__((unused)) static id ASButtonImpl_getShadowColor(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_setShadowColorWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(ASButtonImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static void ASButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(ASButtonImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static id ASButtonImpl_getShadowDy(ASButtonImpl *self);

__attribute__((unused)) static id ASButtonImpl_getShadowDx(ASButtonImpl *self);

__attribute__((unused)) static void ASButtonImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASButtonImpl *self, jint l, jint t, jint r, jint b);

@interface ASButtonImpl_Ellipsize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_Ellipsize, mapping_, id<JavaUtilMap>)

@interface ASButtonImpl_JustificationMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_JustificationMode, mapping_, id<JavaUtilMap>)

@interface ASButtonImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASButtonImpl_MarqueeRepeatLimit () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_MarqueeRepeatLimit, mapping_, id<JavaUtilMap>)

@interface ASButtonImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASButtonImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASButtonImpl_ButtonExt () {
 @public
  __unsafe_unretained ASButtonImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
}

@end

J2OBJC_FIELD_SETTER(ASButtonImpl_ButtonExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASButtonImpl_ButtonExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASButtonImpl_MarqueeTask : NSObject < JavaLangRunnable > {
 @public
  __unsafe_unretained ASButtonImpl *this$0_;
  jint slideLength_;
  jint cycles_;
  jboolean cancel_;
  NSString *direction_;
}

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$
                        withNSString:(NSString *)direction;

- (void)cancel;

- (void)restart;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASButtonImpl_MarqueeTask)

J2OBJC_FIELD_SETTER(ASButtonImpl_MarqueeTask, direction_, NSString *)

__attribute__((unused)) static void ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(ASButtonImpl_MarqueeTask *self, ASButtonImpl *outer$, NSString *direction);

__attribute__((unused)) static ASButtonImpl_MarqueeTask *new_ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *direction) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASButtonImpl_MarqueeTask *create_ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *direction);

J2OBJC_TYPE_LITERAL_HEADER(ASButtonImpl_MarqueeTask)

@interface ASButtonImpl_MarqueeTask_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ASButtonImpl_MarqueeTask *this$0_;
  jint val$numberOfBlankSpaces_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASButtonImpl_MarqueeTask_$Lambda$1)

__attribute__((unused)) static void ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(ASButtonImpl_MarqueeTask_$Lambda$1 *self, ASButtonImpl_MarqueeTask *outer$, jint capture$0);

__attribute__((unused)) static ASButtonImpl_MarqueeTask_$Lambda$1 *new_ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(ASButtonImpl_MarqueeTask *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASButtonImpl_MarqueeTask_$Lambda$1 *create_ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(ASButtonImpl_MarqueeTask *outer$, jint capture$0);

@interface ASButtonImpl_DellocHandler : ASEventBusHandler {
 @public
  __unsafe_unretained ASButtonImpl *this$0_;
}

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$
                        withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASButtonImpl_DellocHandler)

__attribute__((unused)) static void ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(ASButtonImpl_DellocHandler *self, ASButtonImpl *outer$, NSString *type);

__attribute__((unused)) static ASButtonImpl_DellocHandler *new_ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASButtonImpl_DellocHandler *create_ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASButtonImpl_DellocHandler)

@interface ASButtonImpl_ButtonCommandBuilder () {
 @public
  ASButtonImpl *this$0_;
}

@end

@interface ASButtonImpl_ButtonBean () {
 @public
  ASButtonImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASButtonImpl)

NSString *ASButtonImpl_LOCAL_NAME = @"Button";
NSString *ASButtonImpl_GROUP_NAME = @"Button";

@implementation ASButtonImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Button.ellipsize", new_ASButtonImpl_Ellipsize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ellipsize"])) withTypeWithNSString:@"Button.ellipsize"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Button.justificationMode", new_ASButtonImpl_JustificationMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"justificationMode"])) withTypeWithNSString:@"Button.justificationMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDx"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDy"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableLeft"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableRight"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Button.drawableTintMode", new_ASButtonImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"Button.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Button.marqueeRepeatLimit", new_ASButtonImpl_MarqueeRepeatLimit_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"marqueeRepeatLimit"])) withTypeWithNSString:@"Button.marqueeRepeatLimit"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Button.font", new_ASButtonImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"Button.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"Button.textStyle", new_ASButtonImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"Button.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASButtonImpl_ButtonExt *) nil_chk(((ASButtonImpl_ButtonExt *) cast_chk(measurableTextView_, [ASButtonImpl_ButtonExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASButtonImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableTextView_ = new_ASButtonImpl_ButtonExt_initWithASButtonImpl_(self);
  ASButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"text", @"gravity", @"textSize", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"textColor", @"textAllCaps", @"singleLine", @"ellipsize", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"justificationMode", @"scrollHorizontally", @"shadowDx", @"shadowDy", @"shadowColor", @"drawableLeft", @"drawableStart", @"drawableRight", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"marqueeRepeatLimit", @"editable", @"maxLength", @"typeface", @"textStyle", @"fontFamily", @"textFormat", @"enabled" }, 52)) {
    case 0:
    {
      [self setMyTextWithId:objValue];
    }
    break;
    case 1:
    {
      ASButtonImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASButtonImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASButtonImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 4:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 5:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 6:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 7:
    {
      ASButtonImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 8:
    {
      ASButtonImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 9:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 10:
    {
      ASButtonImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASButtonImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASButtonImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASButtonImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASButtonImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASButtonImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 16:
    {
      ASButtonImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASButtonImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASButtonImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 19:
    {
      ASButtonImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 21:
    {
      ASButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 22:
    {
      ASButtonImpl_setShadowColorWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 23:
    {
      ASButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", objValue);
    }
    break;
    case 24:
    {
      ASButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 25:
    {
      ASButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", objValue);
    }
    break;
    case 26:
    {
      ASButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 27:
    {
      ASButtonImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASButtonImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 29:
    {
      ASButtonImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASButtonImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASButtonImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASButtonImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASButtonImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASButtonImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASButtonImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASButtonImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASButtonImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASButtonImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASButtonImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASButtonImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASButtonImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASButtonImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASButtonImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASButtonImpl_setMarqueeRepeatLimitWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASButtonImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASButtonImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 47:
    {
      ASButtonImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 48:
    {
      ASButtonImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 49:
    {
      ASButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 50:
    {
      ASButtonImpl_setTextFormatWithId_(self, objValue);
    }
    break;
    case 51:
    {
      ASButtonImpl_setEnabledWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"text", @"gravity", @"textSize", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"textColor", @"ellipsize", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"justificationMode", @"shadowDx", @"shadowDy", @"shadowColor", @"drawablePadding", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"marqueeRepeatLimit" }, 29)) {
    case 0:
    {
      return ASButtonImpl_getMyText(self);
    }
    case 1:
    {
      return ASButtonImpl_getGravity(self);
    }
    case 2:
    {
      return ASButtonImpl_getTextSize(self);
    }
    case 3:
    {
      return [self getPaddingBottom];
    }
    case 4:
    {
      return [self getPaddingRight];
    }
    case 5:
    {
      return [self getPaddingLeft];
    }
    case 6:
    {
      return ASButtonImpl_getPaddingStart(self);
    }
    case 7:
    {
      return ASButtonImpl_getPaddingEnd(self);
    }
    case 8:
    {
      return [self getPaddingTop];
    }
    case 9:
    {
      return ASButtonImpl_getTextColorState(self);
    }
    case 10:
    {
      return ASButtonImpl_getEllipsize(self);
    }
    case 11:
    {
      return ASButtonImpl_getFirstBaselineToTopHeight(self);
    }
    case 12:
    {
      return ASButtonImpl_getLastBaselineToBottomHeight(self);
    }
    case 13:
    {
      return ASButtonImpl_getJustificationMode(self);
    }
    case 14:
    {
      return ASButtonImpl_getShadowDx(self);
    }
    case 15:
    {
      return ASButtonImpl_getShadowDy(self);
    }
    case 16:
    {
      return ASButtonImpl_getShadowColor(self);
    }
    case 17:
    {
      return ASButtonImpl_getDrawablePadding(self);
    }
    case 18:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 19:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 20:
    {
      return ASButtonImpl_getMinWidth(self);
    }
    case 21:
    {
      return ASButtonImpl_getMinHeight(self);
    }
    case 22:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 23:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 24:
    {
      return JavaLangInteger_valueOfWithInt_(ASButtonImpl_getHeight(self));
    }
    case 25:
    {
      return ASButtonImpl_getWidth(self);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 28:
    {
      return ASButtonImpl_getMarqueeRepeatLimit(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableTextView_;
}

- (void)setGravityWithId:(id)objValue {
  ASButtonImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASButtonImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASButtonImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRawTextAlignment] != 0 || [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRawLayoutDirection] != 0) {
    ASButtonImpl_updateTextAlignment(self);
  }
}

- (id)getMinHeight {
  return ASButtonImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASButtonImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASButtonImpl_setEmsWithId_(self, objValue);
}

- (jint)getMaxEms {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxEms];
}

- (jint)getMinEms {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASButtonImpl_setMinEmsWithId_(self, objValue);
}

- (jint)getMinLines {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMinLines];
}

- (jint)getMaxLines {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASButtonImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASButtonImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASButtonImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASButtonImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASButtonImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASButtonImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASButtonImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASButtonImpl_setMaxWidthWithId_(self, objValue);
}

- (jint)getMaxWidth {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxWidth];
}

- (jint)getMaxHeight {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASButtonImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASButtonImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASButtonImpl_getWidth(self);
}

- (jint)getHeight {
  return ASButtonImpl_getHeight(self);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASButtonImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASButtonImpl_setTextStyleWithId_(self, objValue);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASButtonImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASButtonImpl_setTextAllCapsWithId_(self, objValue);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASButtonImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (jboolean)getIncludeFontPadding {
  return ASButtonImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASButtonImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASButtonImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASButtonImpl_getLastBaselineToBottomHeight(self);
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASButtonImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (jint)calcNumberOfWhiteSpaces {
  return ASButtonImpl_calcNumberOfWhiteSpaces(self);
}

- (void)cancelTimer {
  ASButtonImpl_cancelTimer(self);
}

- (void)startTimer {
  ASButtonImpl_startTimer(self);
}

- (id)getMarqueeRepeatLimit {
  return ASButtonImpl_getMarqueeRepeatLimit(self);
}

- (void)setMarqueeRepeatLimitWithId:(id)objValue {
  ASButtonImpl_setMarqueeRepeatLimitWithId_(self, objValue);
}

- (void)startOrStopMarqueeWithId:(id)objValue {
  ASButtonImpl_startOrStopMarqueeWithId_(self, objValue);
}

- (jint)getLabelWidth {
  return ASButtonImpl_getLabelWidth(self);
}

- (jboolean)isLabelMeasured {
  return ASButtonImpl_isLabelMeasured(self);
}

- (void)setTextFormatWithId:(id)objValue {
  ASButtonImpl_setTextFormatWithId_(self, objValue);
}

- (id)getTextSize {
  return ASButtonImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASButtonImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASButtonImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setTextColorWithId:(id)objValue {
  ASButtonImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASButtonImpl_getTextColorState(self);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASButtonImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASButtonImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASButtonImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASButtonImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASButtonImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASButtonImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASButtonImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASButtonImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASButtonImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASButtonImpl_setDrawableTintWithId_(self, objValue);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getBottomDrawable]);
  ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLeftDrawable]);
  ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRightDrawable]);
  ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTopDrawable]);
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTextColors])) isStateful]) {
    ASButtonImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCurrentTextColor]));
  }
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getHintTextColors])) isStateful]) {
    ASButtonImpl_setHintColorWithInt_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCurrentHintTextColor]);
    ASButtonImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASButtonImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors])) isStateful]) {
    ASButtonImpl_setTextColorLinkWithADColorStateList_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (jint)nativeGetFontSize {
  return ASButtonImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASButtonImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASButtonImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setSingleLineWithId:(id)objValue {
  ASButtonImpl_setSingleLineWithId_(self, objValue);
}

- (id)getEllipsize {
  return ASButtonImpl_getEllipsize(self);
}

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue {
  ASButtonImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
}

- (jint)getBorderPadding {
  return 0;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASButtonImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASButtonImpl_getBorderWidth(self);
}

- (jboolean)canMarquee {
  return ASButtonImpl_canMarquee(self);
}

- (void)cancelNativeTimer {
  ASButtonImpl_cancelNativeTimer(self);
}

- (jboolean)isDisposed {
  return ASButtonImpl_isDisposed(self);
}

- (void)addDeallocHandler {
  ASButtonImpl_addDeallocHandler(self);
}

- (void)schedule {
  ASButtonImpl_schedule(self);
}

- (void)onTick:(NSTimer *)timer {
  [self executeOnMainThreadWithJavaLangRunnable:self->marqueeTask_];
}

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ASButtonImpl_executeOnMainThreadWithJavaLangRunnable_(self, runnable);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableTextView *) nil_chk(measurableTextView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASButtonImpl_ButtonBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASButtonImpl_ButtonBean_initWithASButtonImpl_(self);
  }
  return bean_;
}

- (ASButtonImpl_ButtonCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASButtonImpl_ButtonCommandBuilder_initWithASButtonImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)createNativeWidgetWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASButtonImpl_createNativeWidgetWithJavaUtilMap_(self, params);
}

- (jint)measureHeightWithInt:(jint)width {
  return ASButtonImpl_nativeMeasureHeightButtonWithId_withInt_(self, [self asNativeWidget], width);
}

- (jint)nativeMeasureHeightButtonWithId:(id)uiView
                                withInt:(jint)width {
  return ASButtonImpl_nativeMeasureHeightButtonWithId_withInt_(self, uiView, width);
}

- (void)setMyTextWithId:(id)text {
  ASButtonImpl_nativeSetTextWithId_withNSString_(self, [self asNativeWidget], (NSString *) cast_chk(text, [NSString class]));
}

- (void)nativeSetTextWithId:(id)uiView
               withNSString:(NSString *)text {
  ASButtonImpl_nativeSetTextWithId_withNSString_(self, uiView, text);
}

- (id)getMyText {
  return ASButtonImpl_getMyText(self);
}

- (id)getTitleLabel {
  return ASButtonImpl_getTitleLabel(self);
}

- (void)setHorizontalAligmentCenter {
  ASButtonImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASButtonImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentLeft {
  ASButtonImpl_setHorizontalAligmentLeft(self);
}

- (void)setVerticalAligmentCenter {
  ASButtonImpl_setVerticalAligmentCenter(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASButtonImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASButtonImpl_nativeSetVerticalAligmentTop(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASButtonImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASButtonImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASButtonImpl_setVerticalAligmentTop(self);
}

- (jint)getTextAlignment {
  return ASButtonImpl_getTextAlignment(self);
}

- (id)getPaddingLeft {
  return ASViewImpl_getPaddingLeftWithASIWidget_withADView_(self, measurableTextView_);
}

- (void)setPaddingLeftWithId:(id)paddingLeft {
  ASViewImpl_setPaddingLeftWithId_withADView_(paddingLeft, measurableTextView_);
  ASButtonImpl_nativeSetPaddingLeftWithInt_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingLeft]);
}

- (id)getPaddingRight {
  return ASViewImpl_getPaddingRightWithASIWidget_withADView_(self, measurableTextView_);
}

- (void)setPaddingRightWithId:(id)paddingRight {
  ASViewImpl_setPaddingRightWithId_withADView_(paddingRight, measurableTextView_);
  ASButtonImpl_nativeSetPaddingRightWithInt_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingRight]);
}

- (id)getPaddingTop {
  return ASViewImpl_getPaddingTopWithASIWidget_withADView_(self, measurableTextView_);
}

- (void)setPaddingTopWithId:(id)paddingTop {
  ASViewImpl_setPaddingTopWithId_withADView_(paddingTop, measurableTextView_);
  ASButtonImpl_nativeSetPaddingTopWithInt_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingTop]);
}

- (id)getPaddingBottom {
  return ASViewImpl_getPaddingBottomWithASIWidget_withADView_(self, measurableTextView_);
}

- (id)getPaddingEnd {
  return ASButtonImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASButtonImpl_getPaddingStart(self);
}

- (void)setPaddingBottomWithId:(id)paddingBottom {
  ASViewImpl_setPaddingBottomWithId_withADView_(paddingBottom, measurableTextView_);
  ASButtonImpl_nativeSetPaddingBottomWithInt_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingBottom]);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASButtonImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASButtonImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASButtonImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASButtonImpl_setPaddingWithId_(self, objValue);
}

- (void)updatePadding {
  [self setPaddingLeftWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingLeft])];
  [self setPaddingRightWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingRight])];
  [self setPaddingTopWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingTop])];
  [self setPaddingBottomWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingBottom])];
}

- (void)nativeSetPaddingBottomWithInt:(jint)value {
  ASButtonImpl_nativeSetPaddingBottomWithInt_(self, value);
}

- (void)nativeSetPaddingLeftWithInt:(jint)value {
  ASButtonImpl_nativeSetPaddingLeftWithInt_(self, value);
}

- (void)nativeSetPaddingRightWithInt:(jint)value {
  ASButtonImpl_nativeSetPaddingRightWithInt_(self, value);
}

- (void)nativeSetPaddingTopWithInt:(jint)value {
  ASButtonImpl_nativeSetPaddingTopWithInt_(self, value);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setTextColorWithId:(id)uiView
                    withId:(id)color {
  ASButtonImpl_setTextColorWithId_withId_(self, uiView, color);
}

- (void)addMinMaxListener {
  ASButtonImpl_addMinMaxListener(self);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASButtonImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

- (void)syncPlaceholderLabel {
  ASButtonImpl_syncPlaceholderLabel(self);
}

- (void)setHintColorWithInt:(jint)currentHintTextColor {
  ASButtonImpl_setHintColorWithInt_(self, currentHintTextColor);
}

- (void)setEnabledWithId:(id)objValue {
  ASButtonImpl_setEnabledWithId_(self, objValue);
}

- (void)nativeSetEnabledWithBoolean:(jboolean)enabled {
  ASButtonImpl_nativeSetEnabledWithBoolean_(self, enabled);
}

- (jint)measureWidth {
  return ASButtonImpl_nativeMeasureWidthButtonWithId_(self, [self asNativeWidget]);
}

- (jint)nativeMeasureWidthButtonWithId:(id)uiView {
  return ASButtonImpl_nativeMeasureWidthButtonWithId_(self, uiView);
}

- (void)setNumberOfLinesWithId:(id)uiView
                       withInt:(jint)lines {
  ASButtonImpl_setNumberOfLinesWithId_withInt_(self, uiView, lines);
}

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode {
  ASButtonImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
}

- (id)nativeGetLinBreakMode {
  return ASButtonImpl_nativeGetLinBreakMode(self);
}

- (id)getSingleLine {
  return ASButtonImpl_getSingleLine(self);
}

- (id)getFont {
  return ASButtonImpl_getFont(self);
}

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue {
  ASButtonImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment {
  ASButtonImpl_nativeSetTextAligmentWithInt_(self, textAlignment);
}

- (id)getJustificationMode {
  return ASButtonImpl_getJustificationMode(self);
}

- (JavaLangInteger *)nativeGetTextAligment {
  return ASButtonImpl_nativeGetTextAligment(self);
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASButtonImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (id)getShadowColor {
  return ASButtonImpl_getShadowColor(self);
}

- (void)setShadowColorWithId:(id)objValue
                withNSString:(NSString *)strValue {
  ASButtonImpl_setShadowColorWithId_withNSString_(self, objValue, strValue);
}

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (id)getShadowDy {
  return ASButtonImpl_getShadowDy(self);
}

- (id)getShadowDx {
  return ASButtonImpl_getShadowDx(self);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASButtonImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 36, -1, 37, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 42, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 44, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 48, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 48, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 52, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 53, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 57, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 60, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 28, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 64, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 65, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 67, 1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 36, -1, 37, -1, -1 },
    { NULL, "V", 0x102, 69, 36, -1, 37, -1, -1 },
    { NULL, "I", 0x1, 70, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 71, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 74, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 83, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 84, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 85, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 86, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 87, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 88, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 43, 89, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 91, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 92, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 94, 95, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 96, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 97, 72, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 98, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 99, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 100, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 102, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 103, 104, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 105, 104, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 106, 107, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(setGravityWithId:);
  methods[10].selector = @selector(updateTextAlignment);
  methods[11].selector = @selector(getGravity);
  methods[12].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[13].selector = @selector(getMinHeight);
  methods[14].selector = @selector(getMinWidth);
  methods[15].selector = @selector(setEmsWithId:);
  methods[16].selector = @selector(getMaxEms);
  methods[17].selector = @selector(getMinEms);
  methods[18].selector = @selector(setMinEmsWithId:);
  methods[19].selector = @selector(getMinLines);
  methods[20].selector = @selector(getMaxLines);
  methods[21].selector = @selector(setMaxEmsWithId:);
  methods[22].selector = @selector(setWidthWithId:);
  methods[23].selector = @selector(setHeightWithId:);
  methods[24].selector = @selector(setMaxLinesWithId:);
  methods[25].selector = @selector(setLinesWithId:);
  methods[26].selector = @selector(setMinLinesWithId:);
  methods[27].selector = @selector(setMaxHeightWithId:);
  methods[28].selector = @selector(setMaxWidthWithId:);
  methods[29].selector = @selector(getMaxWidth);
  methods[30].selector = @selector(getMaxHeight);
  methods[31].selector = @selector(setMinHeightWithId:);
  methods[32].selector = @selector(setMinWidthWithId:);
  methods[33].selector = @selector(getWidth);
  methods[34].selector = @selector(getHeight);
  methods[35].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[36].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[37].selector = @selector(setTextStyleWithId:);
  methods[38].selector = @selector(setMaxLengthWithId:);
  methods[39].selector = @selector(setTextAllCapsWithId:);
  methods[40].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[41].selector = @selector(getIncludeFontPadding);
  methods[42].selector = @selector(getFirstBaselineToTopHeight);
  methods[43].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[44].selector = @selector(getLastBaselineToBottomHeight);
  methods[45].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[46].selector = @selector(calcNumberOfWhiteSpaces);
  methods[47].selector = @selector(cancelTimer);
  methods[48].selector = @selector(startTimer);
  methods[49].selector = @selector(getMarqueeRepeatLimit);
  methods[50].selector = @selector(setMarqueeRepeatLimitWithId:);
  methods[51].selector = @selector(startOrStopMarqueeWithId:);
  methods[52].selector = @selector(getLabelWidth);
  methods[53].selector = @selector(isLabelMeasured);
  methods[54].selector = @selector(setTextFormatWithId:);
  methods[55].selector = @selector(getTextSize);
  methods[56].selector = @selector(setMyTextSizeWithId:);
  methods[57].selector = @selector(nativeSetTextSizeWithInt:);
  methods[58].selector = @selector(setTextColorWithId:);
  methods[59].selector = @selector(getTextColorState);
  methods[60].selector = @selector(setDrawablePaddingWithId:);
  methods[61].selector = @selector(setDrawableBottomWithId:);
  methods[62].selector = @selector(setDrawableTopWithId:);
  methods[63].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[64].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[65].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[66].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[67].selector = @selector(getImageHeightWithId:);
  methods[68].selector = @selector(getImageWidthWithId:);
  methods[69].selector = @selector(getDrawablePadding);
  methods[70].selector = @selector(setDrawableTintModeWithId:);
  methods[71].selector = @selector(setDrawableTintWithId:);
  methods[72].selector = @selector(drawableStateChanged);
  methods[73].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[74].selector = @selector(nativeGetFontSize);
  methods[75].selector = @selector(nativeGetFontStyle);
  methods[76].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[77].selector = @selector(nativeSetFontStyleWithInt:);
  methods[78].selector = @selector(setSingleLineWithId:);
  methods[79].selector = @selector(getEllipsize);
  methods[80].selector = @selector(setEllipsizeWithId:withNSString:);
  methods[81].selector = @selector(getBorderPadding);
  methods[82].selector = @selector(getLineHeightPadding);
  methods[83].selector = @selector(getLineHeight);
  methods[84].selector = @selector(getBorderWidth);
  methods[85].selector = @selector(canMarquee);
  methods[86].selector = @selector(cancelNativeTimer);
  methods[87].selector = @selector(isDisposed);
  methods[88].selector = @selector(addDeallocHandler);
  methods[89].selector = @selector(schedule);
  methods[90].selector = @selector(executeOnMainThreadWithJavaLangRunnable:);
  methods[91].selector = @selector(asNativeWidget);
  methods[92].selector = @selector(checkIosVersionWithNSString:);
  methods[93].selector = @selector(setIdWithNSString:);
  methods[94].selector = @selector(requestLayout);
  methods[95].selector = @selector(invalidate);
  methods[96].selector = @selector(getPluginWithNSString:);
  methods[97].selector = @selector(getBean);
  methods[98].selector = @selector(getBuilder);
  methods[99].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[100].selector = @selector(createNativeWidgetWithJavaUtilMap:);
  methods[101].selector = @selector(measureHeightWithInt:);
  methods[102].selector = @selector(nativeMeasureHeightButtonWithId:withInt:);
  methods[103].selector = @selector(setMyTextWithId:);
  methods[104].selector = @selector(nativeSetTextWithId:withNSString:);
  methods[105].selector = @selector(getMyText);
  methods[106].selector = @selector(getTitleLabel);
  methods[107].selector = @selector(setHorizontalAligmentCenter);
  methods[108].selector = @selector(setHorizontalAligmentRight);
  methods[109].selector = @selector(setHorizontalAligmentLeft);
  methods[110].selector = @selector(setVerticalAligmentCenter);
  methods[111].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[112].selector = @selector(nativeSetVerticalAligmentTop);
  methods[113].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[114].selector = @selector(setVerticalAligmentBottom);
  methods[115].selector = @selector(setVerticalAligmentTop);
  methods[116].selector = @selector(getTextAlignment);
  methods[117].selector = @selector(getPaddingLeft);
  methods[118].selector = @selector(setPaddingLeftWithId:);
  methods[119].selector = @selector(getPaddingRight);
  methods[120].selector = @selector(setPaddingRightWithId:);
  methods[121].selector = @selector(getPaddingTop);
  methods[122].selector = @selector(setPaddingTopWithId:);
  methods[123].selector = @selector(getPaddingBottom);
  methods[124].selector = @selector(getPaddingEnd);
  methods[125].selector = @selector(getPaddingStart);
  methods[126].selector = @selector(setPaddingBottomWithId:);
  methods[127].selector = @selector(setPaddingVerticalWithId:);
  methods[128].selector = @selector(setPaddingHorizontalWithId:);
  methods[129].selector = @selector(setPaddingEndWithId:);
  methods[130].selector = @selector(setPaddingStartWithId:);
  methods[131].selector = @selector(setPaddingWithId:);
  methods[132].selector = @selector(updatePadding);
  methods[133].selector = @selector(nativeSetPaddingBottomWithInt:);
  methods[134].selector = @selector(nativeSetPaddingLeftWithInt:);
  methods[135].selector = @selector(nativeSetPaddingRightWithInt:);
  methods[136].selector = @selector(nativeSetPaddingTopWithInt:);
  methods[137].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[138].selector = @selector(setTextColorWithId:withId:);
  methods[139].selector = @selector(addMinMaxListener);
  methods[140].selector = @selector(setTextColorLinkWithADColorStateList:);
  methods[141].selector = @selector(syncPlaceholderLabel);
  methods[142].selector = @selector(setHintColorWithInt:);
  methods[143].selector = @selector(setEnabledWithId:);
  methods[144].selector = @selector(nativeSetEnabledWithBoolean:);
  methods[145].selector = @selector(measureWidth);
  methods[146].selector = @selector(nativeMeasureWidthButtonWithId:);
  methods[147].selector = @selector(setNumberOfLinesWithId:withInt:);
  methods[148].selector = @selector(nativeSetLineBreakModeWithInt:);
  methods[149].selector = @selector(nativeGetLinBreakMode);
  methods[150].selector = @selector(getSingleLine);
  methods[151].selector = @selector(getFont);
  methods[152].selector = @selector(setJustificationModeWithId:withNSString:);
  methods[153].selector = @selector(nativeSetTextAligmentWithInt:);
  methods[154].selector = @selector(getJustificationMode);
  methods[155].selector = @selector(nativeGetTextAligment);
  methods[156].selector = @selector(setScrollHorizontallyWithId:);
  methods[157].selector = @selector(getShadowColor);
  methods[158].selector = @selector(setShadowColorWithId:withNSString:);
  methods[159].selector = @selector(setShadowDyWithJavaLangFloat:withNSString:);
  methods[160].selector = @selector(setShadowDxWithJavaLangFloat:withNSString:);
  methods[161].selector = @selector(getShadowDy);
  methods[162].selector = @selector(getShadowDx);
  methods[163].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 108, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 109, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableTextView_", "LASMeasurableTextView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 110, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 111, -1 },
    { "marqueeTask_", "LASButtonImpl_MarqueeTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeRepeatLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeCommandConverter_", "LASMarqueeCommandConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 112, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 113, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASButtonImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "ellipsize_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timer_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isDisposed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dellocHandler_", "LASButtonImpl_DellocHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASButtonImpl_ButtonCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASButtonImpl_ButtonBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASButtonImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASButtonImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASButtonImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setGravity", "LNSObject;", "onRtlPropertiesChanged", "I", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "setTypeFace", "LNSObject;LNSString;", "setFontFamily", "setTextStyle", "setMaxLength", "setTextAllCaps", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "initHtml", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setMarqueeRepeatLimit", "startOrStopMarquee", "setTextFormat", "setMyTextSize", "nativeSetTextSize", "setTextColor", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "drawableStateChange", "LNSString;LADDrawable;", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setSingleLine", "setEllipsize", "executeOnMainThread", "LJavaLangRunnable;", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "createNativeWidget", "measureHeight", "nativeMeasureHeightButton", "LNSObject;I", "setMyText", "nativeSetText", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setPadding", "nativeSetPaddingBottom", "nativeSetPaddingLeft", "nativeSetPaddingRight", "nativeSetPaddingTop", "postSetAttribute", "LNSObject;LNSObject;", "setTextColorLink", "LADColorStateList;", "setHintColor", "setEnabled", "nativeSetEnabled", "Z", "nativeMeasureWidthButton", "setNumberOfLines", "nativeSetLineBreakMode", "setJustificationMode", "nativeSetTextAligment", "setScrollHorizontally", "setShadowColor", "setShadowDy", "LJavaLangFloat;LNSString;", "setShadowDx", "nativeMakeFrameForChildWidget", "IIII", &ASButtonImpl_LOCAL_NAME, &ASButtonImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", &ASButtonImpl_ITALIC_FONT_TRAIT, &ASButtonImpl_BOLD_FONT_TRAIT, "LASButtonImpl_Ellipsize;LASButtonImpl_JustificationMode;LASButtonImpl_DrawableTintMode;LASButtonImpl_MarqueeRepeatLimit;LASButtonImpl_Font;LASButtonImpl_TextStyle;LASButtonImpl_ButtonExt;LASButtonImpl_MarqueeTask;LASButtonImpl_DellocHandler;LASButtonImpl_ButtonCommandBuilder;LASButtonImpl_ButtonBean;" };
  static const J2ObjcClassInfo _ASButtonImpl = { "ButtonImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 164, 24, -1, 114, -1, -1, -1 };
  return &_ASButtonImpl;
}

+ (void)initialize {
  if (self == [ASButtonImpl class]) {
    ASButtonImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASButtonImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASButtonImpl)
  }
}

@end

void ASButtonImpl_init(ASButtonImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASButtonImpl_GROUP_NAME, ASButtonImpl_LOCAL_NAME);
}

ASButtonImpl *new_ASButtonImpl_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl, init)
}

ASButtonImpl *create_ASButtonImpl_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl, init)
}

void ASButtonImpl_setWidgetOnNativeClass(ASButtonImpl *self) {
  ((ASUIButton*) self.uiView).widget = self;
}

void ASButtonImpl_setGravityWithId_(ASButtonImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASButtonImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASButtonImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASButtonImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASButtonImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASButtonImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASButtonImpl_updateTextAlignment(ASButtonImpl *self) {
  ADLayout_Alignment *minor = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASButtonImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASButtonImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASButtonImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASButtonImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASButtonImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASButtonImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASButtonImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASButtonImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASButtonImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASButtonImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASButtonImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASButtonImpl_getGravity(ASButtonImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASButtonImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASButtonImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASButtonImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASButtonImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

id ASButtonImpl_getMinHeight(ASButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinHeight]);
}

id ASButtonImpl_getMinWidth(ASButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinWidth]);
}

void ASButtonImpl_setEmsWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_setMinEmsWithId_(self, objValue);
  ASButtonImpl_setMaxEmsWithId_(self, objValue);
}

void ASButtonImpl_setMinEmsWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setMaxEmsWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setWidthWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_setMinWidthWithId_(self, objValue);
  ASButtonImpl_setMaxWidthWithId_(self, objValue);
}

void ASButtonImpl_setHeightWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_setMinHeightWithId_(self, objValue);
  ASButtonImpl_setMaxHeightWithId_(self, objValue);
}

void ASButtonImpl_setMaxLinesWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setLinesWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_setMinLinesWithId_(self, objValue);
  ASButtonImpl_setMaxLinesWithId_(self, objValue);
}

void ASButtonImpl_setMinLinesWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setMaxHeightWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setMaxWidthWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setMinHeightWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

void ASButtonImpl_setMinWidthWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASButtonImpl_addMinMaxListener(self);
}

id ASButtonImpl_getWidth(ASButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getWidth]);
}

jint ASButtonImpl_getHeight(ASButtonImpl *self) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getHeight];
}

void ASButtonImpl_setTypeFaceWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue) {
  ASButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASButtonImpl_setFontFamilyWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASButtonImpl_nativeGetFontStyle(self);
  jint height = ASButtonImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASButtonImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASButtonImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASButtonImpl_setTextStyleWithId_(ASButtonImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASButtonImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASButtonImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASButtonImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASButtonImpl_ITALIC_FONT_TRAIT;
    }
    ASButtonImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

void ASButtonImpl_setMaxLengthWithId_(ASButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_maxlength withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"maxLength" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"maxLength" withId:objValue];
  }
}

void ASButtonImpl_setTextAllCapsWithId_(ASButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_uppercase withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textAllCaps" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"textAllCaps" withId:objValue];
  }
}

void ASButtonImpl_setFirstBaselineToTopHeightWithId_(ASButtonImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASButtonImpl_getFont(self));
  jint firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsTop;
  if (ASButtonImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    jint paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue]];
  }
}

jboolean ASButtonImpl_getIncludeFontPadding(ASButtonImpl *self) {
  return false;
}

id ASButtonImpl_getFirstBaselineToTopHeight(ASButtonImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASButtonImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASButtonImpl_setLastBaselineToBottomHeightWithId_(ASButtonImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASButtonImpl_getFont(self));
  jint lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsBottom;
  if (ASButtonImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    jint paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASButtonImpl_getLastBaselineToBottomHeight(ASButtonImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASButtonImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASButtonImpl_initHtmlWithJavaUtilMap_(ASButtonImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

jint ASButtonImpl_calcNumberOfWhiteSpaces(ASButtonImpl *self) {
  if (!ASButtonImpl_isLabelMeasured(self)) {
    return 0;
  }
  jfloat blankSpaceWidth = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(ASButtonImpl_getTextSize(self), [NSNumber class])))) floatValue];
  jint width = JreIntDiv(ASButtonImpl_getLabelWidth(self), 3);
  jint numberOfBlankSpaces = JreFpToInt(JavaLangMath_ceilWithDouble_(width / (blankSpaceWidth * 1.0f)));
  return numberOfBlankSpaces;
}

void ASButtonImpl_cancelTimer(ASButtonImpl *self) {
  ASButtonImpl_cancelNativeTimer(self);
  if (self->marqueeTask_ != nil) {
    [self->marqueeTask_ cancel];
  }
  if (self->marqueeCommandConverter_ != nil) {
    [self->marqueeCommandConverter_ updateArgsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:NSObject_class_()]];
  }
}

void ASButtonImpl_startTimer(ASButtonImpl *self) {
  if (ASButtonImpl_canMarquee(self)) {
    ASButtonImpl_addDeallocHandler(self);
    if (self->marqueeTask_ != nil) {
      [self->marqueeTask_ restart];
    }
    else {
      NSString *direction = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? @"reverse" : @"forward";
      self->marqueeTask_ = new_ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(self, direction);
    }
    ASButtonImpl_schedule(self);
  }
}

id ASButtonImpl_getMarqueeRepeatLimit(ASButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->marqueeRepeatLimit_);
}

void ASButtonImpl_setMarqueeRepeatLimitWithId_(ASButtonImpl *self, id objValue) {
  self->marqueeRepeatLimit_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASButtonImpl_startOrStopMarqueeWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_cancelTimer(self);
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASButtonImpl_startTimer(self);
  }
}

jint ASButtonImpl_getLabelWidth(ASButtonImpl *self) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) isIgnoreDrawableHeight]) {
    return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMeasuredWidth] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingLeft] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingRight];
  }
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMeasuredWidth] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingRight] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingLeft];
}

jboolean ASButtonImpl_isLabelMeasured(ASButtonImpl *self) {
  return !ASButtonImpl_isDisposed(self) && ASButtonImpl_getLabelWidth(self) > 0;
}

void ASButtonImpl_setTextFormatWithId_(ASButtonImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

id ASButtonImpl_getTextSize(ASButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUIButton*)self.uiView).font.pointSize];
}

void ASButtonImpl_setMyTextSizeWithId_(ASButtonImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASButtonImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASButtonImpl_nativeSetTextSizeWithInt_(ASButtonImpl *self, jint value) {
  [((ASUIButton*)self.uiView) setFont: [((ASUIButton*)self.uiView).font fontWithSize: value]];
}

void ASButtonImpl_setTextColorWithId_(ASButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCurrentTextColor]);
  }
  ASButtonImpl_setTextColorWithId_withId_(self, self->uiView_, ASViewImpl_getColorWithId_(objValue));
}

id ASButtonImpl_getTextColorState(ASButtonImpl *self) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTextColors];
}

void ASButtonImpl_setDrawablePaddingWithId_(ASButtonImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [self updatePadding];
}

void ASButtonImpl_setDrawableBottomWithId_(ASButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASButtonImpl_setDrawableTopWithId_(ASButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASButtonImpl_setDrawableRightWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASButtonImpl_setDrawableRightInternalWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASButtonImpl_setDrawableLeftWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASButtonImpl_setDrawableLeftInternalWithNSString_withId_(ASButtonImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

jint ASButtonImpl_getImageHeightWithId_(ASButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASButtonImpl_getImageWidthWithId_(ASButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASButtonImpl_getDrawablePadding(ASButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawablePadding]);
}

void ASButtonImpl_setDrawableTintModeWithId_(ASButtonImpl *self, id value) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASButtonImpl_setDrawableTintWithId_(ASButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASButtonImpl_drawableStateChangeWithNSString_withADDrawable_(ASButtonImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASButtonImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASButtonImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

jint ASButtonImpl_nativeGetFontSize(ASButtonImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASButtonImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASButtonImpl_nativeGetFontStyle(ASButtonImpl *self) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASButtonImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUIButton*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUIButton*)label).font = font;
  }
}

void ASButtonImpl_nativeSetFontStyleWithInt_(ASButtonImpl *self, jint style) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUIButton*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

void ASButtonImpl_setSingleLineWithId_(ASButtonImpl *self, id objValue) {
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASButtonImpl_setNumberOfLinesWithId_withInt_(self, [self asNativeWidget], 1);
  }
  else {
    ASButtonImpl_setNumberOfLinesWithId_withInt_(self, [self asNativeWidget], 0);
  }
}

id ASButtonImpl_getEllipsize(ASButtonImpl *self) {
  if ([((NSString *) nil_chk(self->ellipsize_)) isEqual:@"marquee"]) {
    return JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee));
  }
  return ASButtonImpl_nativeGetLinBreakMode(self);
}

void ASButtonImpl_setEllipsizeWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue) {
  self->ellipsize_ = strValue;
  jint lineBreakMode = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee)) {
    lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping);
  }
  if (ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self)) {
    if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead);
    }
    else if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail);
    }
  }
  ASButtonImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
  ASButtonImpl_cancelTimer(self);
  if ([((NSString *) nil_chk(strValue)) isEqual:@"marquee"]) {
    ASButtonImpl_startTimer(self);
  }
}

jint ASButtonImpl_getLineHeight(ASButtonImpl *self) {
  return ceil(((ASUIButton*)self.uiView).font.lineHeight);
}

jint ASButtonImpl_getBorderWidth(ASButtonImpl *self) {
  return 0;
}

jboolean ASButtonImpl_canMarquee(ASButtonImpl *self) {
  return [nil_chk(ASButtonImpl_getSingleLine(self)) isEqual:JreLoadStatic(JavaLangBoolean, TRUE)];
}

void ASButtonImpl_cancelNativeTimer(ASButtonImpl *self) {
  if (self->timer_ != nil) {
    [(NSTimer*) self->timer_ invalidate];
    self->timer_ = nil;
  }
}

jboolean ASButtonImpl_isDisposed(ASButtonImpl *self) {
  return self->isDisposed_;
}

void ASButtonImpl_addDeallocHandler(ASButtonImpl *self) {
  if (self->dellocHandler_ == nil) {
    NSString *type = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    self->dellocHandler_ = new_ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(self, type);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:type withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->dellocHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASButtonImpl_schedule(ASButtonImpl *self) {
  if (self->timer_ == nil) {
    self->timer_ = [NSTimer scheduledTimerWithTimeInterval:0.1
    target:self
    selector:@selector(onTick:)
    userInfo:nil
    repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:self->timer_ forMode:NSRunLoopCommonModes];
  }
}

void ASButtonImpl_executeOnMainThreadWithJavaLangRunnable_(ASButtonImpl *self, id<JavaLangRunnable> runnable) {
  [((id<JavaLangRunnable>) nil_chk(runnable)) run];
}

void ASButtonImpl_nativeCreateWithJavaUtilMap_(ASButtonImpl *self, id<JavaUtilMap> params) {
  ASButtonImpl_createNativeWidgetWithJavaUtilMap_(self, params);
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"text" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
}

void ASButtonImpl_createNativeWidgetWithJavaUtilMap_(ASButtonImpl *self, id<JavaUtilMap> params) {
  self.uiView = [ASUIButton buttonWithType:UIButtonTypeCustom];
  ((ASUIButton*)self.uiView).titleLabel.numberOfLines = 0;
  ((ASUIButton*)self.uiView).titleLabel.textAlignment = NSTextAlignmentCenter;
  ((ASUIButton*)self.uiView).titleLabel.lineBreakMode = NSLineBreakByCharWrapping;
  ((ASUIButton*)self.uiView).contentEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
  ((ASUIButton*)self.uiView).titleEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
  //((ASUIButton*)self.uiView).titleLabel.backgroundColor = [UIColor redColor];
  //((ASUIButton*)self.uiView).backgroundColor = [UIColor yellowColor];
  ((ASUIButton*)self.uiView).clipsToBounds = YES;
  [((ASUIButton*)self.uiView) setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
}

jint ASButtonImpl_nativeMeasureHeightButtonWithId_withInt_(ASButtonImpl *self, id uiView, jint width) {
  CGSize maximumLabelSize = CGSizeMake(width,CGFLOAT_MAX);
  CGSize requiredSize = [((ASUIButton*)uiView).titleLabel sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.height);
}

void ASButtonImpl_nativeSetTextWithId_withNSString_(ASButtonImpl *self, id uiView, NSString *text) {
  ((ASUIButton*)uiView).titleLabel.text = text;
  [((ASUIButton*)uiView) setTitle:text forState:UIControlStateNormal];
}

id ASButtonImpl_getMyText(ASButtonImpl *self) {
  return ((ASUIButton*)self.uiView).titleLabel.text;
}

id ASButtonImpl_getTitleLabel(ASButtonImpl *self) {
  return ((ASUIButton*)self.uiView).titleLabel;
}

void ASButtonImpl_setHorizontalAligmentCenter(ASButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter;
}

void ASButtonImpl_setHorizontalAligmentRight(ASButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentRight;
}

void ASButtonImpl_setHorizontalAligmentLeft(ASButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
}

void ASButtonImpl_setVerticalAligmentCenter(ASButtonImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASButtonImpl_nativeSetVerticalAligmentCenter(self);
}

void ASButtonImpl_nativeSetVerticalAligmentBottom(ASButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentBottom;
}

void ASButtonImpl_nativeSetVerticalAligmentTop(ASButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentTop;
}

void ASButtonImpl_nativeSetVerticalAligmentCenter(ASButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
}

void ASButtonImpl_setVerticalAligmentBottom(ASButtonImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASButtonImpl_nativeSetVerticalAligmentBottom(self);
}

void ASButtonImpl_setVerticalAligmentTop(ASButtonImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASButtonImpl_nativeSetVerticalAligmentTop(self);
}

jint ASButtonImpl_getTextAlignment(ASButtonImpl *self) {
  int alignment = (int) ((ASUIButton*)self.uiView).contentHorizontalAlignment;
  
  if (alignment == UIControlContentHorizontalAlignmentCenter) {
    return 2;
  }
  
  if (alignment == UIControlContentHorizontalAlignmentLeft) {
    return 0;
  }
  
  if (alignment == UIControlContentHorizontalAlignmentRight) {
    return 1;
  }
  
  return 0;
}

id ASButtonImpl_getPaddingEnd(ASButtonImpl *self) {
  return [self getPaddingRight];
}

id ASButtonImpl_getPaddingStart(ASButtonImpl *self) {
  return [self getPaddingLeft];
}

void ASButtonImpl_setPaddingVerticalWithId_(ASButtonImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASButtonImpl_setPaddingHorizontalWithId_(ASButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASButtonImpl_setPaddingEndWithId_(ASButtonImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASButtonImpl_setPaddingStartWithId_(ASButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

void ASButtonImpl_setPaddingWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_setPaddingVerticalWithId_(self, objValue);
  ASButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

void ASButtonImpl_nativeSetPaddingBottomWithInt_(ASButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, value, edgeInsets.right)];
}

void ASButtonImpl_nativeSetPaddingLeftWithInt_(ASButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, value, edgeInsets.bottom, edgeInsets.right)];
}

void ASButtonImpl_nativeSetPaddingRightWithInt_(ASButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, edgeInsets.bottom, value)];
}

void ASButtonImpl_nativeSetPaddingTopWithInt_(ASButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(value, edgeInsets.left, edgeInsets.bottom, edgeInsets.right)];
}

void ASButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASButtonImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
}

void ASButtonImpl_setTextColorWithId_withId_(ASButtonImpl *self, id uiView, id color) {
  [((ASUIButton*)uiView) setTitleColor:color forState:UIControlStateNormal];
}

void ASButtonImpl_addMinMaxListener(ASButtonImpl *self) {
}

void ASButtonImpl_setTextColorLinkWithADColorStateList_(ASButtonImpl *self, ADColorStateList *linkTextColors) {
}

void ASButtonImpl_syncPlaceholderLabel(ASButtonImpl *self) {
}

void ASButtonImpl_setHintColorWithInt_(ASButtonImpl *self, jint currentHintTextColor) {
}

void ASButtonImpl_setEnabledWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_nativeSetEnabledWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASButtonImpl_nativeSetEnabledWithBoolean_(ASButtonImpl *self, jboolean enabled) {
  [((ASUIButton*)self.uiView) setEnabled:enabled];
}

jint ASButtonImpl_nativeMeasureWidthButtonWithId_(ASButtonImpl *self, id uiView) {
  CGSize maximumLabelSize = CGSizeMake(CGFLOAT_MAX,CGFLOAT_MAX);
  CGSize requiredSize = [((ASUIButton*)uiView).titleLabel sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.width);
}

void ASButtonImpl_setNumberOfLinesWithId_withInt_(ASButtonImpl *self, id uiView, jint lines) {
  ((ASUIButton*)uiView).titleLabel.numberOfLines = lines;
}

void ASButtonImpl_nativeSetLineBreakModeWithInt_(ASButtonImpl *self, jint lineBreakMode) {
  ((ASUIButton*)self.uiView).titleLabel.lineBreakMode = lineBreakMode;
  ((ASUIButton*)self.uiView).titleLabel.adjustsFontSizeToFitWidth = false;
}

id ASButtonImpl_nativeGetLinBreakMode(ASButtonImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUIButton*)self.uiView).titleLabel.lineBreakMode];
}

id ASButtonImpl_getSingleLine(ASButtonImpl *self) {
  return [JavaLangBoolean valueOfWithBoolean:((ASUIButton*)self.uiView).titleLabel.numberOfLines == 1];
}

id ASButtonImpl_getFont(ASButtonImpl *self) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  return label.font;
}

void ASButtonImpl_setJustificationModeWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue) {
  ASButtonImpl_nativeSetTextAligmentWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASButtonImpl_nativeSetTextAligmentWithInt_(ASButtonImpl *self, jint textAlignment) {
  [((ASUIButton*)self->uiView_).titleLabel setTextAlignment:textAlignment];
}

id ASButtonImpl_getJustificationMode(ASButtonImpl *self) {
  return ASButtonImpl_nativeGetTextAligment(self);
}

JavaLangInteger *ASButtonImpl_nativeGetTextAligment(ASButtonImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUIButton*)self->uiView_).titleLabel.textAlignment];
}

void ASButtonImpl_setScrollHorizontallyWithId_(ASButtonImpl *self, id objValue) {
  ASButtonImpl_setNumberOfLinesWithId_withInt_(self, self->uiView_, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] ? 1 : 0);
}

id ASButtonImpl_getShadowColor(ASButtonImpl *self) {
  return ((ASUIButton*)self->uiView_).titleLabel.shadowColor;
}

void ASButtonImpl_setShadowColorWithId_withNSString_(ASButtonImpl *self, id objValue, NSString *strValue) {
  [((ASUIButton*)self->uiView_) setTitleShadowColor:(UIColor*) objValue forState:UIControlStateNormal] ;
}

void ASButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(ASButtonImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  UILabel* label = ((ASUIButton*)self->uiView_).titleLabel;
  [label setShadowOffset:CGSizeMake(label.shadowOffset.width, [objValue floatValue])];
}

void ASButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(ASButtonImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  UILabel* label = ((ASUIButton*)self->uiView_).titleLabel;
  [label setShadowOffset:CGSizeMake([objValue floatValue], label.shadowOffset.height)];
}

id ASButtonImpl_getShadowDy(ASButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUIButton*)self->uiView_).titleLabel.shadowOffset.height];
}

id ASButtonImpl_getShadowDx(ASButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUIButton*)self->uiView_).titleLabel.shadowOffset.width];
}

void ASButtonImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASButtonImpl *self, jint l, jint t, jint r, jint b) {
  if ([self isInitialised]) {
    [self updatePadding];
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl)

@implementation ASButtonImpl_Ellipsize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_Ellipsize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_Ellipsize = { "Ellipsize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASButtonImpl_Ellipsize;
}

@end

void ASButtonImpl_Ellipsize_init(ASButtonImpl_Ellipsize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"marquee" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingMiddle))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead))];
  }
}

ASButtonImpl_Ellipsize *new_ASButtonImpl_Ellipsize_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl_Ellipsize, init)
}

ASButtonImpl_Ellipsize *create_ASButtonImpl_Ellipsize_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl_Ellipsize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_Ellipsize)

@implementation ASButtonImpl_JustificationMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_JustificationMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_JustificationMode = { "JustificationMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASButtonImpl_JustificationMode;
}

@end

void ASButtonImpl_JustificationMode_init(ASButtonImpl_JustificationMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inter_word" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentJustified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentLeft))];
  }
}

ASButtonImpl_JustificationMode *new_ASButtonImpl_JustificationMode_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl_JustificationMode, init)
}

ASButtonImpl_JustificationMode *create_ASButtonImpl_JustificationMode_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl_JustificationMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_JustificationMode)

@implementation ASButtonImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASButtonImpl_DrawableTintMode;
}

@end

void ASButtonImpl_DrawableTintMode_init(ASButtonImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASButtonImpl_DrawableTintMode *new_ASButtonImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl_DrawableTintMode, init)
}

ASButtonImpl_DrawableTintMode *create_ASButtonImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_DrawableTintMode)

@implementation ASButtonImpl_MarqueeRepeatLimit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_MarqueeRepeatLimit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

- (jboolean)supportsIntAlso {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  methods[3].selector = @selector(supportsIntAlso);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_MarqueeRepeatLimit = { "MarqueeRepeatLimit", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ASButtonImpl_MarqueeRepeatLimit;
}

@end

void ASButtonImpl_MarqueeRepeatLimit_init(ASButtonImpl_MarqueeRepeatLimit *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"marquee_forever" withId:JavaLangInteger_valueOfWithInt_((jint) 0xffffffff)];
  }
}

ASButtonImpl_MarqueeRepeatLimit *new_ASButtonImpl_MarqueeRepeatLimit_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl_MarqueeRepeatLimit, init)
}

ASButtonImpl_MarqueeRepeatLimit *create_ASButtonImpl_MarqueeRepeatLimit_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl_MarqueeRepeatLimit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_MarqueeRepeatLimit)

@implementation ASButtonImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASButtonImpl_Font;
}

@end

void ASButtonImpl_Font_init(ASButtonImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASButtonImpl_Font *new_ASButtonImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl_Font, init)
}

ASButtonImpl_Font *create_ASButtonImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_Font)

@implementation ASButtonImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASButtonImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASButtonImpl_TextStyle;
}

@end

void ASButtonImpl_TextStyle_init(ASButtonImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASButtonImpl_TextStyle *new_ASButtonImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASButtonImpl_TextStyle, init)
}

ASButtonImpl_TextStyle *create_ASButtonImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASButtonImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_TextStyle)

@implementation ASButtonImpl_ButtonExt

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$ {
  ASButtonImpl_ButtonExt_initWithASButtonImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASButtonImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (jint)getLineHeight {
  return ASButtonImpl_getLineHeight(this$0_);
}

- (jint)getBorderWidth {
  return ASButtonImpl_getBorderWidth(this$0_);
}

- (jint)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (void)__javaClone:(ASButtonImpl_ButtonExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASButtonImpl:);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[5].selector = @selector(newInstanceWithASIWidget:);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[7].selector = @selector(getMethods);
  methods[8].selector = @selector(initialized);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[10].selector = @selector(drawableStateChanged);
  methods[11].selector = @selector(offsetTopAndBottomWithInt:);
  methods[12].selector = @selector(offsetLeftAndRightWithInt:);
  methods[13].selector = @selector(setVisibilityWithInt:);
  methods[14].selector = @selector(getBorderPadding);
  methods[15].selector = @selector(getLineHeight);
  methods[16].selector = @selector(getBorderWidth);
  methods[17].selector = @selector(getLineHeightPadding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASButtonImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASButtonImpl_ButtonExt = { "ButtonExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 3, 0, -1, -1, -1, -1 };
  return &_ASButtonImpl_ButtonExt;
}

@end

void ASButtonImpl_ButtonExt_initWithASButtonImpl_(ASButtonImpl_ButtonExt *self, ASButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableTextView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASButtonImpl_ButtonExt *new_ASButtonImpl_ButtonExt_initWithASButtonImpl_(ASButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASButtonImpl_ButtonExt, initWithASButtonImpl_, outer$)
}

ASButtonImpl_ButtonExt *create_ASButtonImpl_ButtonExt_initWithASButtonImpl_(ASButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASButtonImpl_ButtonExt, initWithASButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_ButtonExt)

@implementation ASButtonImpl_MarqueeTask

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$
                        withNSString:(NSString *)direction {
  ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(self, outer$, direction);
  return self;
}

- (void)cancel {
  cancel_ = true;
}

- (void)restart {
  cancel_ = false;
  slideLength_ = 0;
  cycles_ = 0;
}

- (void)run {
  jint numberOfBlankSpaces = ASButtonImpl_calcNumberOfWhiteSpaces(this$0_);
  if (this$0_->marqueeCommandConverter_ == nil) {
    this$0_->marqueeCommandConverter_ = (ASMarqueeCommandConverter *) cast_chk([this$0_ getAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfBlankSpaces), JavaLangInteger_valueOfWithInt_(0), direction_ } count:3 type:NSObject_class_()]], [ASMarqueeCommandConverter class]);
  }
  slideLength_ = [((ASMarqueeCommandConverter *) nil_chk(this$0_->marqueeCommandConverter_)) getOffset];
  if (numberOfBlankSpaces > 0) {
    NSString *str = (NSString *) cast_chk(ASButtonImpl_getMyText(this$0_), [NSString class]);
    if (slideLength_ == [((NSString *) nil_chk(str)) java_length]) {
      slideLength_ = 0;
      cycles_++;
    }
    if ((this$0_->marqueeRepeatLimit_ > 0 && cycles_ >= this$0_->marqueeRepeatLimit_)) {
      ASButtonImpl_cancelTimer(this$0_);
      return;
    }
    slideLength_++;
    ASButtonImpl_executeOnMainThreadWithJavaLangRunnable_(this$0_, new_ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(self, numberOfBlankSpaces));
  }
  else {
    ASButtonImpl_schedule(this$0_);
  }
}

- (void)__javaClone:(ASButtonImpl_MarqueeTask *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASButtonImpl:withNSString:);
  methods[1].selector = @selector(cancel);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "slideLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cycles_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASButtonImpl;LNSString;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_MarqueeTask = { "MarqueeTask", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 4, 5, 1, -1, -1, -1, -1 };
  return &_ASButtonImpl_MarqueeTask;
}

@end

void ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(ASButtonImpl_MarqueeTask *self, ASButtonImpl *outer$, NSString *direction) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->slideLength_ = 0;
  self->cycles_ = 0;
  self->cancel_ = false;
  self->direction_ = direction;
}

ASButtonImpl_MarqueeTask *new_ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *direction) {
  J2OBJC_NEW_IMPL(ASButtonImpl_MarqueeTask, initWithASButtonImpl_withNSString_, outer$, direction)
}

ASButtonImpl_MarqueeTask *create_ASButtonImpl_MarqueeTask_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *direction) {
  J2OBJC_CREATE_IMPL(ASButtonImpl_MarqueeTask, initWithASButtonImpl_withNSString_, outer$, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_MarqueeTask)

@implementation ASButtonImpl_MarqueeTask_$Lambda$1

- (void)run {
  if (!this$0_->cancel_) {
    [this$0_->this$0_ applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"ellipsize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(val$numberOfBlankSpaces_), JavaLangInteger_valueOfWithInt_(this$0_->slideLength_), this$0_->direction_ } count:3 type:NSObject_class_()]];
    ASButtonImpl_schedule(this$0_->this$0_);
  }
}

@end

void ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(ASButtonImpl_MarqueeTask_$Lambda$1 *self, ASButtonImpl_MarqueeTask *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$numberOfBlankSpaces_ = capture$0;
  NSObject_init(self);
}

ASButtonImpl_MarqueeTask_$Lambda$1 *new_ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(ASButtonImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(ASButtonImpl_MarqueeTask_$Lambda$1, initWithASButtonImpl_MarqueeTask_withInt_, outer$, capture$0)
}

ASButtonImpl_MarqueeTask_$Lambda$1 *create_ASButtonImpl_MarqueeTask_$Lambda$1_initWithASButtonImpl_MarqueeTask_withInt_(ASButtonImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(ASButtonImpl_MarqueeTask_$Lambda$1, initWithASButtonImpl_MarqueeTask_withInt_, outer$, capture$0)
}

@implementation ASButtonImpl_DellocHandler

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$
                        withNSString:(NSString *)type {
  ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASButtonImpl_cancelTimer(this$0_);
  this$0_->isDisposed_ = true;
}

- (void)__javaClone:(ASButtonImpl_DellocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASButtonImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASButtonImpl;LNSString;", "doPerform", "LNSObject;", "LASButtonImpl;" };
  static const J2ObjcClassInfo _ASButtonImpl_DellocHandler = { "DellocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASButtonImpl_DellocHandler;
}

@end

void ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(ASButtonImpl_DellocHandler *self, ASButtonImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASButtonImpl_DellocHandler *new_ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASButtonImpl_DellocHandler, initWithASButtonImpl_withNSString_, outer$, type)
}

ASButtonImpl_DellocHandler *create_ASButtonImpl_DellocHandler_initWithASButtonImpl_withNSString_(ASButtonImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASButtonImpl_DellocHandler, initWithASButtonImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_DellocHandler)

@implementation ASButtonImpl_ButtonCommandBuilder

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$ {
  ASButtonImpl_ButtonCommandBuilder_initWithASButtonImpl_(self, outer$);
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setTextAllCapsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAllCaps"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setSingleLineWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"singleLine"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetEllipsize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getEllipsize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setEllipsizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetJustificationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getJustificationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setJustificationModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setScrollHorizontallyWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollHorizontally"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetShadowDx {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDx"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShadowDx {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDx"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setShadowDxWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDx"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetShadowDy {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDy"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShadowDy {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDy"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setShadowDyWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDy"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetShadowColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShadowColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setShadowColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawablePaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setDrawableTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMinLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMaxLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMinHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMaxEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMinEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ems"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)tryGetMarqueeRepeatLimit {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMarqueeRepeatLimit {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASButtonImpl_ButtonCommandBuilder *)setMarqueeRepeatLimitWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"editable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setMaxLengthWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setTypefaceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"typeface"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setTextStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setFontFamilyWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fontFamily"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setTextFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASButtonImpl_ButtonCommandBuilder *)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 24, 25, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 26, 25, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 29, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 30, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 37, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 39, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 40, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 41, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 44, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 45, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 46, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 47, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 48, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 49, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 50, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 51, 2, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 52, 38, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 53, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 54, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 55, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 56, 4, -1, -1, -1, -1 },
    { NULL, "LASButtonImpl_ButtonCommandBuilder;", 0x1, 57, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASButtonImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetText);
  methods[3].selector = @selector(getText);
  methods[4].selector = @selector(setTextWithNSString:);
  methods[5].selector = @selector(tryGetGravity);
  methods[6].selector = @selector(getGravity);
  methods[7].selector = @selector(setGravityWithNSString:);
  methods[8].selector = @selector(tryGetTextSize);
  methods[9].selector = @selector(getTextSize);
  methods[10].selector = @selector(setTextSizeWithNSString:);
  methods[11].selector = @selector(setPaddingWithNSString:);
  methods[12].selector = @selector(tryGetPaddingBottom);
  methods[13].selector = @selector(getPaddingBottom);
  methods[14].selector = @selector(setPaddingBottomWithNSString:);
  methods[15].selector = @selector(tryGetPaddingRight);
  methods[16].selector = @selector(getPaddingRight);
  methods[17].selector = @selector(setPaddingRightWithNSString:);
  methods[18].selector = @selector(tryGetPaddingLeft);
  methods[19].selector = @selector(getPaddingLeft);
  methods[20].selector = @selector(setPaddingLeftWithNSString:);
  methods[21].selector = @selector(tryGetPaddingStart);
  methods[22].selector = @selector(getPaddingStart);
  methods[23].selector = @selector(setPaddingStartWithNSString:);
  methods[24].selector = @selector(tryGetPaddingEnd);
  methods[25].selector = @selector(getPaddingEnd);
  methods[26].selector = @selector(setPaddingEndWithNSString:);
  methods[27].selector = @selector(tryGetPaddingTop);
  methods[28].selector = @selector(getPaddingTop);
  methods[29].selector = @selector(setPaddingTopWithNSString:);
  methods[30].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[31].selector = @selector(setPaddingVerticalWithNSString:);
  methods[32].selector = @selector(tryGetTextColor);
  methods[33].selector = @selector(getTextColor);
  methods[34].selector = @selector(setTextColorWithNSString:);
  methods[35].selector = @selector(setTextAllCapsWithBoolean:);
  methods[36].selector = @selector(setSingleLineWithBoolean:);
  methods[37].selector = @selector(tryGetEllipsize);
  methods[38].selector = @selector(getEllipsize);
  methods[39].selector = @selector(setEllipsizeWithNSString:);
  methods[40].selector = @selector(tryGetFirstBaselineToTopHeight);
  methods[41].selector = @selector(getFirstBaselineToTopHeight);
  methods[42].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[43].selector = @selector(tryGetLastBaselineToBottomHeight);
  methods[44].selector = @selector(getLastBaselineToBottomHeight);
  methods[45].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[46].selector = @selector(tryGetJustificationMode);
  methods[47].selector = @selector(getJustificationMode);
  methods[48].selector = @selector(setJustificationModeWithNSString:);
  methods[49].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[50].selector = @selector(tryGetShadowDx);
  methods[51].selector = @selector(getShadowDx);
  methods[52].selector = @selector(setShadowDxWithFloat:);
  methods[53].selector = @selector(tryGetShadowDy);
  methods[54].selector = @selector(getShadowDy);
  methods[55].selector = @selector(setShadowDyWithFloat:);
  methods[56].selector = @selector(tryGetShadowColor);
  methods[57].selector = @selector(getShadowColor);
  methods[58].selector = @selector(setShadowColorWithNSString:);
  methods[59].selector = @selector(setDrawableLeftWithNSString:);
  methods[60].selector = @selector(setDrawableStartWithNSString:);
  methods[61].selector = @selector(setDrawableRightWithNSString:);
  methods[62].selector = @selector(setDrawableEndWithNSString:);
  methods[63].selector = @selector(setDrawableTopWithNSString:);
  methods[64].selector = @selector(setDrawableBottomWithNSString:);
  methods[65].selector = @selector(tryGetDrawablePadding);
  methods[66].selector = @selector(getDrawablePadding);
  methods[67].selector = @selector(setDrawablePaddingWithNSString:);
  methods[68].selector = @selector(setDrawableTintWithNSString:);
  methods[69].selector = @selector(setDrawableTintModeWithNSString:);
  methods[70].selector = @selector(tryGetMinLines);
  methods[71].selector = @selector(getMinLines);
  methods[72].selector = @selector(setMinLinesWithInt:);
  methods[73].selector = @selector(setLinesWithInt:);
  methods[74].selector = @selector(tryGetMaxLines);
  methods[75].selector = @selector(getMaxLines);
  methods[76].selector = @selector(setMaxLinesWithInt:);
  methods[77].selector = @selector(tryGetMinWidth);
  methods[78].selector = @selector(getMinWidth);
  methods[79].selector = @selector(setMinWidthWithNSString:);
  methods[80].selector = @selector(tryGetMinHeight);
  methods[81].selector = @selector(getMinHeight);
  methods[82].selector = @selector(setMinHeightWithNSString:);
  methods[83].selector = @selector(tryGetMaxWidth);
  methods[84].selector = @selector(getMaxWidth);
  methods[85].selector = @selector(setMaxWidthWithNSString:);
  methods[86].selector = @selector(tryGetMaxHeight);
  methods[87].selector = @selector(getMaxHeight);
  methods[88].selector = @selector(setMaxHeightWithNSString:);
  methods[89].selector = @selector(tryGetHeight);
  methods[90].selector = @selector(getHeight);
  methods[91].selector = @selector(setHeightWithNSString:);
  methods[92].selector = @selector(tryGetWidth);
  methods[93].selector = @selector(getWidth);
  methods[94].selector = @selector(setWidthWithNSString:);
  methods[95].selector = @selector(tryGetMaxEms);
  methods[96].selector = @selector(getMaxEms);
  methods[97].selector = @selector(setMaxEmsWithInt:);
  methods[98].selector = @selector(tryGetMinEms);
  methods[99].selector = @selector(getMinEms);
  methods[100].selector = @selector(setMinEmsWithInt:);
  methods[101].selector = @selector(setEmsWithInt:);
  methods[102].selector = @selector(tryGetMarqueeRepeatLimit);
  methods[103].selector = @selector(getMarqueeRepeatLimit);
  methods[104].selector = @selector(setMarqueeRepeatLimitWithNSString:);
  methods[105].selector = @selector(setEditableWithBoolean:);
  methods[106].selector = @selector(setMaxLengthWithInt:);
  methods[107].selector = @selector(setTypefaceWithNSString:);
  methods[108].selector = @selector(setTextStyleWithNSString:);
  methods[109].selector = @selector(setFontFamilyWithNSString:);
  methods[110].selector = @selector(setTextFormatWithNSString:);
  methods[111].selector = @selector(setEnabledWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASButtonImpl;", "execute", "Z", "setText", "LNSString;", "setGravity", "setTextSize", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setTextColor", "setTextAllCaps", "setSingleLine", "setEllipsize", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setJustificationMode", "setScrollHorizontally", "setShadowDx", "F", "setShadowDy", "setShadowColor", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setMarqueeRepeatLimit", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setTextFormat", "setEnabled", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/ButtonImpl$ButtonCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASButtonImpl_ButtonCommandBuilder = { "ButtonCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 112, 1, 0, -1, -1, 58, -1 };
  return &_ASButtonImpl_ButtonCommandBuilder;
}

@end

void ASButtonImpl_ButtonCommandBuilder_initWithASButtonImpl_(ASButtonImpl_ButtonCommandBuilder *self, ASButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASButtonImpl_ButtonCommandBuilder *new_ASButtonImpl_ButtonCommandBuilder_initWithASButtonImpl_(ASButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASButtonImpl_ButtonCommandBuilder, initWithASButtonImpl_, outer$)
}

ASButtonImpl_ButtonCommandBuilder *create_ASButtonImpl_ButtonCommandBuilder_initWithASButtonImpl_(ASButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASButtonImpl_ButtonCommandBuilder, initWithASButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_ButtonCommandBuilder)

@implementation ASButtonImpl_ButtonBean

- (instancetype)initWithASButtonImpl:(ASButtonImpl *)outer$ {
  ASButtonImpl_ButtonBean_initWithASButtonImpl_(self, outer$);
  return self;
}

- (id)getText {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetText])) executeWithBoolean:false])) getText];
}

- (void)setTextWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextSize {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextSize])) executeWithBoolean:false])) getTextSize];
}

- (void)setTextSizeWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextColor {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColor])) executeWithBoolean:false])) getTextColor];
}

- (void)setTextColorWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextAllCapsWithBoolean:(jboolean)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextAllCapsWithBoolean:value])) executeWithBoolean:true];
}

- (void)setSingleLineWithBoolean:(jboolean)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSingleLineWithBoolean:value])) executeWithBoolean:true];
}

- (id)getEllipsize {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetEllipsize])) executeWithBoolean:false])) getEllipsize];
}

- (void)setEllipsizeWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEllipsizeWithNSString:value])) executeWithBoolean:true];
}

- (id)getFirstBaselineToTopHeight {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetFirstBaselineToTopHeight])) executeWithBoolean:false])) getFirstBaselineToTopHeight];
}

- (void)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFirstBaselineToTopHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getLastBaselineToBottomHeight {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLastBaselineToBottomHeight])) executeWithBoolean:false])) getLastBaselineToBottomHeight];
}

- (void)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLastBaselineToBottomHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getJustificationMode {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetJustificationMode])) executeWithBoolean:false])) getJustificationMode];
}

- (void)setJustificationModeWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setJustificationModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setScrollHorizontallyWithBoolean:(jboolean)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollHorizontallyWithBoolean:value])) executeWithBoolean:true];
}

- (id)getShadowDx {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShadowDx])) executeWithBoolean:false])) getShadowDx];
}

- (void)setShadowDxWithFloat:(jfloat)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShadowDxWithFloat:value])) executeWithBoolean:true];
}

- (id)getShadowDy {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShadowDy])) executeWithBoolean:false])) getShadowDy];
}

- (void)setShadowDyWithFloat:(jfloat)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShadowDyWithFloat:value])) executeWithBoolean:true];
}

- (id)getShadowColor {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShadowColor])) executeWithBoolean:false])) getShadowColor];
}

- (void)setShadowColorWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShadowColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableLeftWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableLeftWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableStartWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableRightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableRightWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableEndWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTopWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableBottomWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getDrawablePadding {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDrawablePadding])) executeWithBoolean:false])) getDrawablePadding];
}

- (void)setDrawablePaddingWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawablePaddingWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintModeWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintModeWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinLines {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinLines])) executeWithBoolean:false])) getMinLines];
}

- (void)setMinLinesWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinLinesWithInt:value])) executeWithBoolean:true];
}

- (void)setLinesWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMaxLines {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxLines])) executeWithBoolean:false])) getMaxLines];
}

- (void)setMaxLinesWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMinWidth {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinWidth])) executeWithBoolean:false])) getMinWidth];
}

- (void)setMinWidthWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinHeight {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinHeight])) executeWithBoolean:false])) getMinHeight];
}

- (void)setMinHeightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getHeight {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHeight])) executeWithBoolean:false])) getHeight];
}

- (void)setHeightWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getWidth {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWidth])) executeWithBoolean:false])) getWidth];
}

- (void)setWidthWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxEms {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxEms])) executeWithBoolean:false])) getMaxEms];
}

- (void)setMaxEmsWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMinEms {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinEms])) executeWithBoolean:false])) getMinEms];
}

- (void)setMinEmsWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEmsWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMarqueeRepeatLimit {
  return [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMarqueeRepeatLimit])) executeWithBoolean:false])) getMarqueeRepeatLimit];
}

- (void)setMarqueeRepeatLimitWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMarqueeRepeatLimitWithNSString:value])) executeWithBoolean:true];
}

- (void)setEditableWithBoolean:(jboolean)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEditableWithBoolean:value])) executeWithBoolean:true];
}

- (void)setMaxLengthWithInt:(jint)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLengthWithInt:value])) executeWithBoolean:true];
}

- (void)setTypefaceWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTypefaceWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextStyleWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFontFamilyWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFontFamilyWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextFormatWithNSString:(NSString *)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextFormatWithNSString:value])) executeWithBoolean:true];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([((ASButtonImpl_ButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 24, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 37, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASButtonImpl:);
  methods[1].selector = @selector(getText);
  methods[2].selector = @selector(setTextWithNSString:);
  methods[3].selector = @selector(getGravity);
  methods[4].selector = @selector(setGravityWithNSString:);
  methods[5].selector = @selector(getTextSize);
  methods[6].selector = @selector(setTextSizeWithNSString:);
  methods[7].selector = @selector(setPaddingWithNSString:);
  methods[8].selector = @selector(getPaddingBottom);
  methods[9].selector = @selector(setPaddingBottomWithNSString:);
  methods[10].selector = @selector(getPaddingRight);
  methods[11].selector = @selector(setPaddingRightWithNSString:);
  methods[12].selector = @selector(getPaddingLeft);
  methods[13].selector = @selector(setPaddingLeftWithNSString:);
  methods[14].selector = @selector(getPaddingStart);
  methods[15].selector = @selector(setPaddingStartWithNSString:);
  methods[16].selector = @selector(getPaddingEnd);
  methods[17].selector = @selector(setPaddingEndWithNSString:);
  methods[18].selector = @selector(getPaddingTop);
  methods[19].selector = @selector(setPaddingTopWithNSString:);
  methods[20].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[21].selector = @selector(setPaddingVerticalWithNSString:);
  methods[22].selector = @selector(getTextColor);
  methods[23].selector = @selector(setTextColorWithNSString:);
  methods[24].selector = @selector(setTextAllCapsWithBoolean:);
  methods[25].selector = @selector(setSingleLineWithBoolean:);
  methods[26].selector = @selector(getEllipsize);
  methods[27].selector = @selector(setEllipsizeWithNSString:);
  methods[28].selector = @selector(getFirstBaselineToTopHeight);
  methods[29].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[30].selector = @selector(getLastBaselineToBottomHeight);
  methods[31].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[32].selector = @selector(getJustificationMode);
  methods[33].selector = @selector(setJustificationModeWithNSString:);
  methods[34].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[35].selector = @selector(getShadowDx);
  methods[36].selector = @selector(setShadowDxWithFloat:);
  methods[37].selector = @selector(getShadowDy);
  methods[38].selector = @selector(setShadowDyWithFloat:);
  methods[39].selector = @selector(getShadowColor);
  methods[40].selector = @selector(setShadowColorWithNSString:);
  methods[41].selector = @selector(setDrawableLeftWithNSString:);
  methods[42].selector = @selector(setDrawableStartWithNSString:);
  methods[43].selector = @selector(setDrawableRightWithNSString:);
  methods[44].selector = @selector(setDrawableEndWithNSString:);
  methods[45].selector = @selector(setDrawableTopWithNSString:);
  methods[46].selector = @selector(setDrawableBottomWithNSString:);
  methods[47].selector = @selector(getDrawablePadding);
  methods[48].selector = @selector(setDrawablePaddingWithNSString:);
  methods[49].selector = @selector(setDrawableTintWithNSString:);
  methods[50].selector = @selector(setDrawableTintModeWithNSString:);
  methods[51].selector = @selector(getMinLines);
  methods[52].selector = @selector(setMinLinesWithInt:);
  methods[53].selector = @selector(setLinesWithInt:);
  methods[54].selector = @selector(getMaxLines);
  methods[55].selector = @selector(setMaxLinesWithInt:);
  methods[56].selector = @selector(getMinWidth);
  methods[57].selector = @selector(setMinWidthWithNSString:);
  methods[58].selector = @selector(getMinHeight);
  methods[59].selector = @selector(setMinHeightWithNSString:);
  methods[60].selector = @selector(getMaxWidth);
  methods[61].selector = @selector(setMaxWidthWithNSString:);
  methods[62].selector = @selector(getMaxHeight);
  methods[63].selector = @selector(setMaxHeightWithNSString:);
  methods[64].selector = @selector(getHeight);
  methods[65].selector = @selector(setHeightWithNSString:);
  methods[66].selector = @selector(getWidth);
  methods[67].selector = @selector(setWidthWithNSString:);
  methods[68].selector = @selector(getMaxEms);
  methods[69].selector = @selector(setMaxEmsWithInt:);
  methods[70].selector = @selector(getMinEms);
  methods[71].selector = @selector(setMinEmsWithInt:);
  methods[72].selector = @selector(setEmsWithInt:);
  methods[73].selector = @selector(getMarqueeRepeatLimit);
  methods[74].selector = @selector(setMarqueeRepeatLimitWithNSString:);
  methods[75].selector = @selector(setEditableWithBoolean:);
  methods[76].selector = @selector(setMaxLengthWithInt:);
  methods[77].selector = @selector(setTypefaceWithNSString:);
  methods[78].selector = @selector(setTextStyleWithNSString:);
  methods[79].selector = @selector(setFontFamilyWithNSString:);
  methods[80].selector = @selector(setTextFormatWithNSString:);
  methods[81].selector = @selector(setEnabledWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASButtonImpl;", "setText", "LNSString;", "setGravity", "setTextSize", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setTextColor", "setTextAllCaps", "Z", "setSingleLine", "setEllipsize", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setJustificationMode", "setScrollHorizontally", "setShadowDx", "F", "setShadowDy", "setShadowColor", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setMarqueeRepeatLimit", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setTextFormat", "setEnabled" };
  static const J2ObjcClassInfo _ASButtonImpl_ButtonBean = { "ButtonBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 82, 1, 0, -1, -1, -1, -1 };
  return &_ASButtonImpl_ButtonBean;
}

@end

void ASButtonImpl_ButtonBean_initWithASButtonImpl_(ASButtonImpl_ButtonBean *self, ASButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASButtonImpl_ButtonBean *new_ASButtonImpl_ButtonBean_initWithASButtonImpl_(ASButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASButtonImpl_ButtonBean, initWithASButtonImpl_, outer$)
}

ASButtonImpl_ButtonBean *create_ASButtonImpl_ButtonBean_initWithASButtonImpl_(ASButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASButtonImpl_ButtonBean, initWithASButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASButtonImpl_ButtonBean)
