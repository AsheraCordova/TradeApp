//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\Plugin_Converter\src\com\ashera\validations\InRange.java
//

#include "BaseValidator.h"
#include "IFragment.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IWidget.h"
#include "InRange.h"
#include "J2ObjC_source.h"
#include "ResourceBundleUtils.h"
#include "Validation.h"
#include "java/lang/Integer.h"
#include "java/lang/NumberFormatException.h"


@interface ASInRange () {
 @public
  jint mMin_;
  jint mMax_;
}

- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max;

@end

__attribute__((unused)) static void ASInRange_initWithInt_withInt_(ASInRange *self, jint min, jint max);

__attribute__((unused)) static ASInRange *new_ASInRange_initWithInt_withInt_(jint min, jint max) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASInRange *create_ASInRange_initWithInt_withInt_(jint min, jint max);

@implementation ASInRange

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASInRange_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<ASValidation>)newInstanceWithNSStringArray:(IOSObjectArray *)argument {
  return create_ASInRange_initWithInt_withInt_(JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(nil_chk(argument), 0)), JavaLangInteger_parseIntWithNSString_(IOSObjectArray_Get(argument, 1)));
}

- (instancetype)initWithInt:(jint)min
                    withInt:(jint)max {
  ASInRange_initWithInt_withInt_(self, min, max);
  return self;
}

- (NSString *)getDefaultErrorMessageWithASIWidget:(id<ASIWidget>)widget {
  NSString *res = ASResourceBundleUtils_getStringWithNSString_withNSString_withNSString_withASIFragment_(@"values/strings", @"string", @"@string/inrange_error_message", [((id<ASIWidget>) nil_chk(widget)) getFragment]);
  return NSString_java_formatWithNSString_withNSObjectArray_(res, [IOSObjectArray arrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(mMin_), JavaLangInteger_valueOfWithInt_(mMax_) } count:2 type:NSObject_class_()]);
}

- (jboolean)isValidWithNSString:(NSString *)text
                  withASIWidget:(id<ASIWidget>)widget {
  if (text == nil || [text java_isEmpty]) {
    return true;
  }
  @try {
    jint value = JavaLangInteger_parseIntWithNSString_(text);
    if ((value >= mMin_) && (value <= mMax_)) {
      return true;
    }
  }
  @catch (JavaLangNumberFormatException *ignored) {
  }
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASValidation;", 0x81, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 2, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(newInstanceWithNSStringArray:);
  methods[2].selector = @selector(initWithInt:withInt:);
  methods[3].selector = @selector(getDefaultErrorMessageWithASIWidget:);
  methods[4].selector = @selector(isValidWithNSString:withASIWidget:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mMin_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mMax_", "I", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "newInstance", "[LNSString;", "II", "getDefaultErrorMessage", "LASIWidget;", "isValid", "LNSString;LASIWidget;" };
  static const J2ObjcClassInfo _ASInRange = { "InRange", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 5, 2, -1, -1, -1, -1, -1 };
  return &_ASInRange;
}

@end

void ASInRange_init(ASInRange *self) {
  ASBaseValidator_init(self);
  self->mMin_ = 0;
  self->mMax_ = 0;
}

ASInRange *new_ASInRange_init() {
  J2OBJC_NEW_IMPL(ASInRange, init)
}

ASInRange *create_ASInRange_init() {
  J2OBJC_CREATE_IMPL(ASInRange, init)
}

void ASInRange_initWithInt_withInt_(ASInRange *self, jint min, jint max) {
  ASBaseValidator_init(self);
  self->mMin_ = min;
  self->mMax_ = max;
}

ASInRange *new_ASInRange_initWithInt_withInt_(jint min, jint max) {
  J2OBJC_NEW_IMPL(ASInRange, initWithInt_withInt_, min, max)
}

ASInRange *create_ASInRange_initWithInt_withInt_(jint min, jint max) {
  J2OBJC_CREATE_IMPL(ASInRange, initWithInt_withInt_, min, max)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASInRange)
