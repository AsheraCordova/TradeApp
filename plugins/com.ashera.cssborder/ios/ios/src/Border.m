//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\IOSCSSBorderPlugin\src\main\java\com\ashera\layout\decorator\Border.java
//

#include "Border.h"
#include "J2ObjC_source.h"


@interface ASBorder () {
 @public
  id color_;
  NSString *style_;
  jint width_;
  jint dashWidth_;
  jint dashSpacing_;
  jfloat topLeftRadius_;
  jfloat topRightRadius_;
  jfloat bottomLeftRadius_;
  jfloat bottomRightRadius_;
}

@end

J2OBJC_FIELD_SETTER(ASBorder, color_, id)
J2OBJC_FIELD_SETTER(ASBorder, style_, NSString *)

@implementation ASBorder

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASBorder_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jfloat)getTopLeftRadius {
  return topLeftRadius_;
}

- (void)setTopLeftRadiusWithFloat:(jfloat)topLeftRadius {
  self->topLeftRadius_ = topLeftRadius;
}

- (jfloat)getTopRightRadius {
  return topRightRadius_;
}

- (void)setTopRightRadiusWithFloat:(jfloat)topRightRadius {
  self->topRightRadius_ = topRightRadius;
}

- (jfloat)getBottomLeftRadius {
  return bottomLeftRadius_;
}

- (void)setBottomLeftRadiusWithFloat:(jfloat)bottomLeftRadius {
  self->bottomLeftRadius_ = bottomLeftRadius;
}

- (jfloat)getBottomRightRadius {
  return bottomRightRadius_;
}

- (void)setBottomRightRadiusWithFloat:(jfloat)bottomRightRadius {
  self->bottomRightRadius_ = bottomRightRadius;
}

- (jint)getWidth {
  return width_;
}

- (void)setWidthWithInt:(jint)width {
  self->width_ = width;
}

- (id)getColor {
  return color_;
}

- (void)setColorWithId:(id)color {
  self->color_ = color;
}

- (NSString *)getStyle {
  return style_;
}

- (void)setStyleWithNSString:(NSString *)style {
  self->style_ = style;
}

- (jint)getDashSpacing {
  return dashSpacing_;
}

- (void)setDashSpacingWithInt:(jint)dashSpacing {
  self->dashSpacing_ = dashSpacing;
}

- (jint)getDashWidth {
  return dashWidth_;
}

- (void)setDashWidthWithInt:(jint)dashWidth {
  self->dashWidth_ = dashWidth;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 6, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getTopLeftRadius);
  methods[2].selector = @selector(setTopLeftRadiusWithFloat:);
  methods[3].selector = @selector(getTopRightRadius);
  methods[4].selector = @selector(setTopRightRadiusWithFloat:);
  methods[5].selector = @selector(getBottomLeftRadius);
  methods[6].selector = @selector(setBottomLeftRadiusWithFloat:);
  methods[7].selector = @selector(getBottomRightRadius);
  methods[8].selector = @selector(setBottomRightRadiusWithFloat:);
  methods[9].selector = @selector(getWidth);
  methods[10].selector = @selector(setWidthWithInt:);
  methods[11].selector = @selector(getColor);
  methods[12].selector = @selector(setColorWithId:);
  methods[13].selector = @selector(getStyle);
  methods[14].selector = @selector(setStyleWithNSString:);
  methods[15].selector = @selector(getDashSpacing);
  methods[16].selector = @selector(setDashSpacingWithInt:);
  methods[17].selector = @selector(getDashWidth);
  methods[18].selector = @selector(setDashWidthWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "color_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "style_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "width_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dashWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dashSpacing_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topLeftRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "topRightRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottomLeftRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bottomRightRadius_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setTopLeftRadius", "F", "setTopRightRadius", "setBottomLeftRadius", "setBottomRightRadius", "setWidth", "I", "setColor", "LNSObject;", "setStyle", "LNSString;", "setDashSpacing", "setDashWidth" };
  static const J2ObjcClassInfo _ASBorder = { "Border", "com.ashera.layout.decorator", ptrTable, methods, fields, 7, 0x1, 19, 9, -1, -1, -1, -1, -1 };
  return &_ASBorder;
}

@end

void ASBorder_init(ASBorder *self) {
  NSObject_init(self);
  self->style_ = @"solid";
  self->dashWidth_ = -1;
  self->dashSpacing_ = -1;
  self->topLeftRadius_ = 0;
  self->topRightRadius_ = 0;
  self->bottomLeftRadius_ = 0;
  self->bottomRightRadius_ = 0;
}

ASBorder *new_ASBorder_init() {
  J2OBJC_NEW_IMPL(ASBorder, init)
}

ASBorder *create_ASBorder_init() {
  J2OBJC_CREATE_IMPL(ASBorder, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASBorder)
