//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\validations\Field.java
//

#include "Field.h"
#include "FieldValidationException.h"
#include "FormElement.h"
#include "J2ObjC_source.h"
#include "Validation.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/util/LinkedList.h"
#include "java/util/List.h"

@protocol JavaUtilList;


@interface ASField () {
 @public
  __unsafe_unretained id<ASFormElement> mViewWrapper_;
  id<JavaUtilList> mValidations_;
  id metaData_;
  jint mOrder_;
}

- (instancetype)initWithASFormElement:(id<ASFormElement>)viewWrapper
                              withInt:(jint)order;

@end

J2OBJC_FIELD_SETTER(ASField, mValidations_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(ASField, metaData_, id)

__attribute__((unused)) static void ASField_initWithASFormElement_withInt_(ASField *self, id<ASFormElement> viewWrapper, jint order);

__attribute__((unused)) static ASField *new_ASField_initWithASFormElement_withInt_(id<ASFormElement> viewWrapper, jint order) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASField *create_ASField_initWithASFormElement_withInt_(id<ASFormElement> viewWrapper, jint order);

@implementation ASField

- (jint)getOrder {
  return mOrder_;
}

+ (ASField *)using__WithASFormElement:(id<ASFormElement>)viewWrapper
                              withInt:(jint)order {
  return ASField_using__WithASFormElement_withInt_(viewWrapper, order);
}

- (instancetype)initWithASFormElement:(id<ASFormElement>)viewWrapper
                              withInt:(jint)order {
  ASField_initWithASFormElement_withInt_(self, viewWrapper, order);
  return self;
}

- (ASField *)addValidatorWithASValidation:(id<ASValidation>)what {
  [((id<JavaUtilList>) nil_chk(mValidations_)) addWithId:what];
  return self;
}

- (id<ASFormElement>)getViewWrapper {
  return mViewWrapper_;
}

- (jboolean)isValid {
  if ([((id<ASFormElement>) nil_chk(mViewWrapper_)) isViewVisible]) {
    for (id<ASValidation> __strong validation in nil_chk(mValidations_)) {
      if (![((id<ASValidation>) nil_chk(validation)) isValidWithNSString:[mViewWrapper_ getTextEntered] withASIWidget:mViewWrapper_]) {
        NSString *errorMessage = [validation getErrorMessageWithASIWidget:mViewWrapper_];
        @throw create_ASFieldValidationException_initWithNSString_withASFormElement_(errorMessage, mViewWrapper_);
      }
    }
  }
  return true;
}

- (void)setMetaDataWithId:(id)metaData {
  JreStrongAssign(&self->metaData_, metaData);
}

- (void)__javaClone:(ASField *)original {
  [super __javaClone:original];
  [mViewWrapper_ release];
}

- (void)dealloc {
  RELEASE_(mValidations_);
  RELEASE_(metaData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASField;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x2, -1, 1, -1, -1, -1, -1 },
    { NULL, "LASField;", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASFormElement;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, 4, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getOrder);
  methods[1].selector = @selector(using__WithASFormElement:withInt:);
  methods[2].selector = @selector(initWithASFormElement:withInt:);
  methods[3].selector = @selector(addValidatorWithASValidation:);
  methods[4].selector = @selector(getViewWrapper);
  methods[5].selector = @selector(isValid);
  methods[6].selector = @selector(setMetaDataWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEFAULT_ORDER", "I", .constantValue.asInt = ASField_DEFAULT_ORDER, 0x19, -1, -1, -1, -1 },
    { "mViewWrapper_", "LASFormElement;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mValidations_", "LJavaUtilList;", .constantValue.asLong = 0, 0x12, -1, -1, 7, -1 },
    { "metaData_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOrder_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "using", "LASFormElement;I", "addValidator", "LASValidation;", "LASFieldValidationException;", "setMetaData", "LNSObject;", "Ljava/util/List<Lcom/ashera/validations/Validation;>;" };
  static const J2ObjcClassInfo _ASField = { "Field", "com.ashera.validations", ptrTable, methods, fields, 7, 0x1, 7, 5, -1, -1, -1, -1, -1 };
  return &_ASField;
}

@end

ASField *ASField_using__WithASFormElement_withInt_(id<ASFormElement> viewWrapper, jint order) {
  ASField_initialize();
  if (viewWrapper == nil) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"EditText field may not be null");
  }
  return create_ASField_initWithASFormElement_withInt_(viewWrapper, order);
}

void ASField_initWithASFormElement_withInt_(ASField *self, id<ASFormElement> viewWrapper, jint order) {
  NSObject_init(self);
  self->mOrder_ = 0;
  self->mOrder_ = order;
  self->mViewWrapper_ = viewWrapper;
  JreStrongAssignAndConsume(&self->mValidations_, new_JavaUtilLinkedList_init());
}

ASField *new_ASField_initWithASFormElement_withInt_(id<ASFormElement> viewWrapper, jint order) {
  J2OBJC_NEW_IMPL(ASField, initWithASFormElement_withInt_, viewWrapper, order)
}

ASField *create_ASField_initWithASFormElement_withInt_(id<ASFormElement> viewWrapper, jint order) {
  J2OBJC_CREATE_IMPL(ASField, initWithASFormElement_withInt_, viewWrapper, order)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASField)
