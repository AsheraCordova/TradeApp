//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\ToggleButtonImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributeCommand.h"
#include "BaseMeasurableView.h"
#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "CompoundButton.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "GravityConverter.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "MarqueeCommandConverter.h"
#include "MeasurableCompoundButton.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "TextDirectionHeuristic.h"
#include "ToggleButtonImpl.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUIButton.h"

@class ASToggleButtonImpl_DellocHandler;
@class ASToggleButtonImpl_MarqueeTask;
@class JavaLangFloat;
@class JavaLangInteger;
@protocol JavaLangRunnable;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASToggleButtonImpl () {
 @public
  NSString *textOff_;
  NSString *textOn_;
  id<ADCompoundButton_OnCheckedChangeListener> onCheckedChangeListener_;
  id<JavaUtilMap> fontDescriptors_;
  jboolean html_;
  jboolean escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  ASToggleButtonImpl_MarqueeTask *marqueeTask_;
  jint marqueeRepeatLimit_;
  ASMarqueeCommandConverter *marqueeCommandConverter_;
  ADColorStateList *drawableTint_;
  NSString *ellipsize_;
  id timer_;
  jboolean isDisposed_;
  ASToggleButtonImpl_DellocHandler *dellocHandler_;
  ASToggleButtonImpl_ToggleButtonCommandBuilder *builder_;
  ASToggleButtonImpl_ToggleButtonBean *bean_;
  jboolean checked_;
}

- (void)setWidgetOnNativeClass;

- (void)createNativeWidgetWithJavaUtilMap:(id<JavaUtilMap>)params;

- (jint)nativeMeasureHeightButtonWithId:(id)uiView
                                withInt:(jint)width;

- (void)nativeSetTextWithId:(id)uiView
               withNSString:(NSString *)text;

- (id)getMyText;

- (id)getTitleLabel;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentLeft;

- (void)setVerticalAligmentCenter;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)nativeSetVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (jint)getTextAlignment;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeSetPaddingBottomWithInt:(jint)value;

- (void)nativeSetPaddingLeftWithInt:(jint)value;

- (void)nativeSetPaddingRightWithInt:(jint)value;

- (void)nativeSetPaddingTopWithInt:(jint)value;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)setTextColorWithId:(id)uiView
                    withId:(id)color;

- (void)addMinMaxListener;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

- (void)syncPlaceholderLabel;

- (void)setHintColorWithInt:(jint)currentHintTextColor;

- (void)setEnabledWithId:(id)objValue;

- (void)nativeSetEnabledWithBoolean:(jboolean)enabled;

- (jint)nativeMeasureWidthButtonWithId:(id)uiView;

- (void)setNumberOfLinesWithId:(id)uiView
                       withInt:(jint)lines;

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode;

- (id)nativeGetLinBreakMode;

- (id)getSingleLine;

- (id)getFont;

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue;

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment;

- (id)getJustificationMode;

- (JavaLangInteger *)nativeGetTextAligment;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (id)getShadowColor;

- (void)setShadowColorWithId:(id)objValue
                withNSString:(NSString *)strValue;

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue;

- (id)getShadowDy;

- (id)getShadowDx;

- (void)setTextOffWithId:(id)objValue;

- (void)setTextOnWithId:(id)objValue;

- (id)getTextOff;

- (id)getTextOn;

- (void)initTextOnOff OBJC_METHOD_FAMILY_NONE;

- (void)toggle;

- (void)setOnCheckedWithId:(id)objValue;

- (void)remeasure;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (jint)getHeight;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (void)setMaxLengthWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (jboolean)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (jint)calcNumberOfWhiteSpaces;

- (void)cancelTimer;

- (void)startTimer;

- (id)getMarqueeRepeatLimit;

- (void)setMarqueeRepeatLimitWithId:(id)objValue;

- (void)startOrStopMarqueeWithId:(id)objValue;

- (jint)getLabelWidth;

- (jboolean)isLabelMeasured;

- (void)setTextFormatWithId:(id)objValue;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (void)setSingleLineWithId:(id)objValue;

- (id)getEllipsize;

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (jboolean)canMarquee;

- (void)cancelNativeTimer;

- (jboolean)isDisposed;

- (void)addDeallocHandler;

- (void)schedule;

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)setCheckedWithId:(id)objValue;

- (id)getChecked;

- (jboolean)toggleChecked;

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl, textOff_, NSString *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, textOn_, NSString *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, onCheckedChangeListener_, id<ADCompoundButton_OnCheckedChangeListener>)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, marqueeTask_, ASToggleButtonImpl_MarqueeTask *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, marqueeCommandConverter_, ASMarqueeCommandConverter *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, ellipsize_, NSString *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, timer_, id)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, dellocHandler_, ASToggleButtonImpl_DellocHandler *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, builder_, ASToggleButtonImpl_ToggleButtonCommandBuilder *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl, bean_, ASToggleButtonImpl_ToggleButtonBean *)

inline jint ASToggleButtonImpl_get_TEXT_ALIGN_CENTER(void);
#define ASToggleButtonImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASToggleButtonImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASToggleButtonImpl_get_TEXT_ALIGN_LEFT(void);
#define ASToggleButtonImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASToggleButtonImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASToggleButtonImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASToggleButtonImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASToggleButtonImpl, TEXT_ALIGN_RIGHT, jint)

inline jint ASToggleButtonImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASToggleButtonImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASToggleButtonImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASToggleButtonImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASToggleButtonImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASToggleButtonImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASToggleButtonImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASToggleButtonImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASToggleButtonImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASToggleButtonImpl, BOLD_FONT_TRAIT, jint)

inline jint ASToggleButtonImpl_get_NORMAL_FONT_TRAIT(void);
#define ASToggleButtonImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASToggleButtonImpl, NORMAL_FONT_TRAIT, jint)

__attribute__((unused)) static void ASToggleButtonImpl_setWidgetOnNativeClass(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_createNativeWidgetWithJavaUtilMap_(ASToggleButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static jint ASToggleButtonImpl_nativeMeasureHeightButtonWithId_withInt_(ASToggleButtonImpl *self, id uiView, jint width);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetTextWithId_withNSString_(ASToggleButtonImpl *self, id uiView, NSString *text);

__attribute__((unused)) static id ASToggleButtonImpl_getMyText(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getTitleLabel(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setHorizontalAligmentCenter(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setHorizontalAligmentRight(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setHorizontalAligmentLeft(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setVerticalAligmentCenter(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetVerticalAligmentBottom(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetVerticalAligmentTop(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetVerticalAligmentCenter(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setVerticalAligmentBottom(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setVerticalAligmentTop(ASToggleButtonImpl *self);

__attribute__((unused)) static jint ASToggleButtonImpl_getTextAlignment(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getPaddingEnd(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getPaddingStart(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setPaddingVerticalWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setPaddingHorizontalWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setPaddingEndWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setPaddingStartWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setPaddingWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetPaddingBottomWithInt_(ASToggleButtonImpl *self, jint value);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetPaddingLeftWithInt_(ASToggleButtonImpl *self, jint value);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetPaddingRightWithInt_(ASToggleButtonImpl *self, jint value);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetPaddingTopWithInt_(ASToggleButtonImpl *self, jint value);

__attribute__((unused)) static void ASToggleButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToggleButtonImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASToggleButtonImpl_setTextColorWithId_withId_(ASToggleButtonImpl *self, id uiView, id color);

__attribute__((unused)) static void ASToggleButtonImpl_addMinMaxListener(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setTextColorLinkWithADColorStateList_(ASToggleButtonImpl *self, ADColorStateList *linkTextColors);

__attribute__((unused)) static void ASToggleButtonImpl_syncPlaceholderLabel(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setHintColorWithInt_(ASToggleButtonImpl *self, jint currentHintTextColor);

__attribute__((unused)) static void ASToggleButtonImpl_setEnabledWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetEnabledWithBoolean_(ASToggleButtonImpl *self, jboolean enabled);

__attribute__((unused)) static jint ASToggleButtonImpl_nativeMeasureWidthButtonWithId_(ASToggleButtonImpl *self, id uiView);

__attribute__((unused)) static void ASToggleButtonImpl_setNumberOfLinesWithId_withInt_(ASToggleButtonImpl *self, id uiView, jint lines);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetLineBreakModeWithInt_(ASToggleButtonImpl *self, jint lineBreakMode);

__attribute__((unused)) static id ASToggleButtonImpl_nativeGetLinBreakMode(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getSingleLine(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getFont(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setJustificationModeWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetTextAligmentWithInt_(ASToggleButtonImpl *self, jint textAlignment);

__attribute__((unused)) static id ASToggleButtonImpl_getJustificationMode(ASToggleButtonImpl *self);

__attribute__((unused)) static JavaLangInteger *ASToggleButtonImpl_nativeGetTextAligment(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setScrollHorizontallyWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getShadowColor(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setShadowColorWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASToggleButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(ASToggleButtonImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static void ASToggleButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(ASToggleButtonImpl *self, JavaLangFloat *objValue, NSString *strValue);

__attribute__((unused)) static id ASToggleButtonImpl_getShadowDy(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getShadowDx(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setTextOffWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setTextOnWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getTextOff(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getTextOn(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_initTextOnOff(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_toggle(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setOnCheckedWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_remeasure(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setGravityWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_updateTextAlignment(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getGravity(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getMinHeight(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getMinWidth(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setEmsWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMinEmsWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMaxEmsWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setWidthWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setHeightWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMaxLinesWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setLinesWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMinLinesWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMaxHeightWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMaxWidthWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMinHeightWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMinWidthWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getWidth(ASToggleButtonImpl *self);

__attribute__((unused)) static jint ASToggleButtonImpl_getHeight(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setTypeFaceWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASToggleButtonImpl_setFontFamilyWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASToggleButtonImpl_setTextStyleWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setMaxLengthWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setTextAllCapsWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setFirstBaselineToTopHeightWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static jboolean ASToggleButtonImpl_getIncludeFontPadding(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getFirstBaselineToTopHeight(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setLastBaselineToBottomHeightWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getLastBaselineToBottomHeight(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_initHtmlWithJavaUtilMap_(ASToggleButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static jint ASToggleButtonImpl_calcNumberOfWhiteSpaces(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_cancelTimer(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_startTimer(ASToggleButtonImpl *self);

__attribute__((unused)) static id ASToggleButtonImpl_getMarqueeRepeatLimit(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setMarqueeRepeatLimitWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_startOrStopMarqueeWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASToggleButtonImpl_getLabelWidth(ASToggleButtonImpl *self);

__attribute__((unused)) static jboolean ASToggleButtonImpl_isLabelMeasured(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setTextFormatWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getTextSize(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setMyTextSizeWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetTextSizeWithInt_(ASToggleButtonImpl *self, jint value);

__attribute__((unused)) static void ASToggleButtonImpl_setTextColorWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getTextColorState(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawablePaddingWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableBottomWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableTopWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableRightWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableRightInternalWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableLeftWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableLeftInternalWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASToggleButtonImpl_getImageHeightWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static jint ASToggleButtonImpl_getImageWidthWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getDrawablePadding(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableTintModeWithId_(ASToggleButtonImpl *self, id value);

__attribute__((unused)) static void ASToggleButtonImpl_setDrawableTintWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static void ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(ASToggleButtonImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static jint ASToggleButtonImpl_nativeGetFontSize(ASToggleButtonImpl *self);

__attribute__((unused)) static jint ASToggleButtonImpl_nativeGetFontStyle(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASToggleButtonImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASToggleButtonImpl_nativeSetFontStyleWithInt_(ASToggleButtonImpl *self, jint style);

__attribute__((unused)) static void ASToggleButtonImpl_setSingleLineWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getEllipsize(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_setEllipsizeWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static jint ASToggleButtonImpl_getLineHeight(ASToggleButtonImpl *self);

__attribute__((unused)) static jint ASToggleButtonImpl_getBorderWidth(ASToggleButtonImpl *self);

__attribute__((unused)) static jboolean ASToggleButtonImpl_canMarquee(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_cancelNativeTimer(ASToggleButtonImpl *self);

__attribute__((unused)) static jboolean ASToggleButtonImpl_isDisposed(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_addDeallocHandler(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_schedule(ASToggleButtonImpl *self);

__attribute__((unused)) static void ASToggleButtonImpl_executeOnMainThreadWithJavaLangRunnable_(ASToggleButtonImpl *self, id<JavaLangRunnable> runnable);

__attribute__((unused)) static void ASToggleButtonImpl_nativeCreateWithJavaUtilMap_(ASToggleButtonImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASToggleButtonImpl_setCheckedWithId_(ASToggleButtonImpl *self, id objValue);

__attribute__((unused)) static id ASToggleButtonImpl_getChecked(ASToggleButtonImpl *self);

__attribute__((unused)) static jboolean ASToggleButtonImpl_toggleChecked(ASToggleButtonImpl *self);

@interface ASToggleButtonImpl_Ellipsize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_Ellipsize, mapping_, id<JavaUtilMap>)

@interface ASToggleButtonImpl_JustificationMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_JustificationMode, mapping_, id<JavaUtilMap>)

@interface ASToggleButtonImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASToggleButtonImpl_MarqueeRepeatLimit () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_MarqueeRepeatLimit, mapping_, id<JavaUtilMap>)

@interface ASToggleButtonImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASToggleButtonImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASToggleButtonImpl_ToggleButtonExt () {
 @public
  __unsafe_unretained ASToggleButtonImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
}

@end

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_ToggleButtonExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl_ToggleButtonExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASToggleButtonImpl_MarqueeTask : NSObject < JavaLangRunnable > {
 @public
  __unsafe_unretained ASToggleButtonImpl *this$0_;
  jint slideLength_;
  jint cycles_;
  jboolean cancel_;
  NSString *direction_;
}

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$
                              withNSString:(NSString *)direction;

- (void)cancel;

- (void)restart;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToggleButtonImpl_MarqueeTask)

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_MarqueeTask, direction_, NSString *)

__attribute__((unused)) static void ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl_MarqueeTask *self, ASToggleButtonImpl *outer$, NSString *direction);

__attribute__((unused)) static ASToggleButtonImpl_MarqueeTask *new_ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *direction) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToggleButtonImpl_MarqueeTask *create_ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *direction);

J2OBJC_TYPE_LITERAL_HEADER(ASToggleButtonImpl_MarqueeTask)

@interface ASToggleButtonImpl_MarqueeTask_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ASToggleButtonImpl_MarqueeTask *this$0_;
  jint val$numberOfBlankSpaces_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToggleButtonImpl_MarqueeTask_$Lambda$1)

__attribute__((unused)) static void ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(ASToggleButtonImpl_MarqueeTask_$Lambda$1 *self, ASToggleButtonImpl_MarqueeTask *outer$, jint capture$0);

__attribute__((unused)) static ASToggleButtonImpl_MarqueeTask_$Lambda$1 *new_ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(ASToggleButtonImpl_MarqueeTask *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToggleButtonImpl_MarqueeTask_$Lambda$1 *create_ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(ASToggleButtonImpl_MarqueeTask *outer$, jint capture$0);

@interface ASToggleButtonImpl_DellocHandler : ASEventBusHandler {
 @public
  __unsafe_unretained ASToggleButtonImpl *this$0_;
}

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$
                              withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToggleButtonImpl_DellocHandler)

__attribute__((unused)) static void ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl_DellocHandler *self, ASToggleButtonImpl *outer$, NSString *type);

__attribute__((unused)) static ASToggleButtonImpl_DellocHandler *new_ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToggleButtonImpl_DellocHandler *create_ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASToggleButtonImpl_DellocHandler)

@interface ASToggleButtonImpl_OnCheckedChangeListener : NSObject < ADCompoundButton_OnCheckedChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onCheckedChangedWithADCompoundButton:(ADCompoundButton *)buttonView
                                 withBoolean:(jboolean)isChecked;

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADCompoundButton:(ADCompoundButton *)buttonView
                                                      withBoolean:(jboolean)isChecked;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToggleButtonImpl_OnCheckedChangeListener)

J2OBJC_FIELD_SETTER(ASToggleButtonImpl_OnCheckedChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl_OnCheckedChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl_OnCheckedChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASToggleButtonImpl_OnCheckedChangeListener, action_, NSString *)

__attribute__((unused)) static void ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASToggleButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASToggleButtonImpl_OnCheckedChangeListener *new_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToggleButtonImpl_OnCheckedChangeListener *create_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASToggleButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASToggleButtonImpl_OnCheckedChangeListener *new_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToggleButtonImpl_OnCheckedChangeListener *create_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASToggleButtonImpl_OnCheckedChangeListener)

@interface ASToggleButtonImpl_ToggleButtonCommandBuilder () {
 @public
  ASToggleButtonImpl *this$0_;
}

@end

@interface ASToggleButtonImpl_ToggleButtonBean () {
 @public
  ASToggleButtonImpl *this$0_;
}

@end

@interface ASToggleButtonImpl_StateToggler : NSObject < ADView_OnClickListener > {
 @public
  __unsafe_unretained ASToggleButtonImpl *this$0_;
}

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$;

- (void)onClickWithADView:(ADView *)v;

@end

J2OBJC_EMPTY_STATIC_INIT(ASToggleButtonImpl_StateToggler)

__attribute__((unused)) static void ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(ASToggleButtonImpl_StateToggler *self, ASToggleButtonImpl *outer$);

__attribute__((unused)) static ASToggleButtonImpl_StateToggler *new_ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASToggleButtonImpl_StateToggler *create_ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$);

J2OBJC_TYPE_LITERAL_HEADER(ASToggleButtonImpl_StateToggler)

J2OBJC_INITIALIZED_DEFN(ASToggleButtonImpl)

NSString *ASToggleButtonImpl_LOCAL_NAME = @"ToggleButton";
NSString *ASToggleButtonImpl_GROUP_NAME = @"ToggleButton";

@implementation ASToggleButtonImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onCheckedChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"checked"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textOn"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textOff"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ToggleButton.ellipsize", new_ASToggleButtonImpl_Ellipsize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ellipsize"])) withTypeWithNSString:@"ToggleButton.ellipsize"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ToggleButton.justificationMode", new_ASToggleButtonImpl_JustificationMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"justificationMode"])) withTypeWithNSString:@"ToggleButton.justificationMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDx"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowDy"])) withTypeWithNSString:@"float"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"shadowColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableLeft"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableRight"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ToggleButton.drawableTintMode", new_ASToggleButtonImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"ToggleButton.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ToggleButton.marqueeRepeatLimit", new_ASToggleButtonImpl_MarqueeRepeatLimit_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"marqueeRepeatLimit"])) withTypeWithNSString:@"ToggleButton.marqueeRepeatLimit"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ToggleButton.font", new_ASToggleButtonImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"ToggleButton.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"ToggleButton.textStyle", new_ASToggleButtonImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"ToggleButton.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASToggleButtonImpl_ToggleButtonExt *) nil_chk(((ASToggleButtonImpl_ToggleButtonExt *) cast_chk(measurableCompoundButton_, [ASToggleButtonImpl_ToggleButtonExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASToggleButtonImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableCompoundButton_ = new_ASToggleButtonImpl_ToggleButtonExt_initWithASToggleButtonImpl_(self);
  ASToggleButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASToggleButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASToggleButtonImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"onCheckedChange", @"checked", @"textOn", @"textOff", @"text", @"gravity", @"textSize", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"textColor", @"textAllCaps", @"singleLine", @"ellipsize", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"justificationMode", @"scrollHorizontally", @"shadowDx", @"shadowDy", @"shadowColor", @"drawableLeft", @"drawableStart", @"drawableRight", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"marqueeRepeatLimit", @"editable", @"maxLength", @"typeface", @"textStyle", @"fontFamily", @"textFormat", @"enabled" }, 56)) {
    case 0:
    {
      ASToggleButtonImpl_setOnCheckedWithId_(self, objValue);
    }
    break;
    case 1:
    {
      ASToggleButtonImpl_setCheckedWithId_(self, objValue);
    }
    break;
    case 2:
    {
      ASToggleButtonImpl_setTextOnWithId_(self, objValue);
    }
    break;
    case 3:
    {
      ASToggleButtonImpl_setTextOffWithId_(self, objValue);
    }
    break;
    case 4:
    {
      [self setMyTextWithId:objValue];
    }
    break;
    case 5:
    {
      ASToggleButtonImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 6:
    {
      ASToggleButtonImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 7:
    {
      ASToggleButtonImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 8:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 9:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 10:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 11:
    {
      ASToggleButtonImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASToggleButtonImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 13:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 14:
    {
      ASToggleButtonImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASToggleButtonImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASToggleButtonImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASToggleButtonImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASToggleButtonImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASToggleButtonImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 20:
    {
      ASToggleButtonImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASToggleButtonImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASToggleButtonImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 23:
    {
      ASToggleButtonImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 24:
    {
      ASToggleButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 25:
    {
      ASToggleButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(self, (JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]), strValue);
    }
    break;
    case 26:
    {
      ASToggleButtonImpl_setShadowColorWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 27:
    {
      ASToggleButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", objValue);
    }
    break;
    case 28:
    {
      ASToggleButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 29:
    {
      ASToggleButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", objValue);
    }
    break;
    case 30:
    {
      ASToggleButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 31:
    {
      ASToggleButtonImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASToggleButtonImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASToggleButtonImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASToggleButtonImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASToggleButtonImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASToggleButtonImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASToggleButtonImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASToggleButtonImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASToggleButtonImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASToggleButtonImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 41:
    {
      ASToggleButtonImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASToggleButtonImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASToggleButtonImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASToggleButtonImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASToggleButtonImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASToggleButtonImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 47:
    {
      ASToggleButtonImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 48:
    {
      ASToggleButtonImpl_setMarqueeRepeatLimitWithId_(self, objValue);
    }
    break;
    case 49:
    {
      ASToggleButtonImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 50:
    {
      ASToggleButtonImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 51:
    {
      ASToggleButtonImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 52:
    {
      ASToggleButtonImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 53:
    {
      ASToggleButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 54:
    {
      ASToggleButtonImpl_setTextFormatWithId_(self, objValue);
    }
    break;
    case 55:
    {
      ASToggleButtonImpl_setEnabledWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASToggleButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"checked", @"textOn", @"textOff", @"text", @"gravity", @"textSize", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"textColor", @"ellipsize", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"justificationMode", @"shadowDx", @"shadowDy", @"shadowColor", @"drawablePadding", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"marqueeRepeatLimit" }, 32)) {
    case 0:
    {
      return ASToggleButtonImpl_getChecked(self);
    }
    case 1:
    {
      return ASToggleButtonImpl_getTextOn(self);
    }
    case 2:
    {
      return ASToggleButtonImpl_getTextOff(self);
    }
    case 3:
    {
      return ASToggleButtonImpl_getMyText(self);
    }
    case 4:
    {
      return ASToggleButtonImpl_getGravity(self);
    }
    case 5:
    {
      return ASToggleButtonImpl_getTextSize(self);
    }
    case 6:
    {
      return [self getPaddingBottom];
    }
    case 7:
    {
      return [self getPaddingRight];
    }
    case 8:
    {
      return [self getPaddingLeft];
    }
    case 9:
    {
      return ASToggleButtonImpl_getPaddingStart(self);
    }
    case 10:
    {
      return ASToggleButtonImpl_getPaddingEnd(self);
    }
    case 11:
    {
      return [self getPaddingTop];
    }
    case 12:
    {
      return ASToggleButtonImpl_getTextColorState(self);
    }
    case 13:
    {
      return ASToggleButtonImpl_getEllipsize(self);
    }
    case 14:
    {
      return ASToggleButtonImpl_getFirstBaselineToTopHeight(self);
    }
    case 15:
    {
      return ASToggleButtonImpl_getLastBaselineToBottomHeight(self);
    }
    case 16:
    {
      return ASToggleButtonImpl_getJustificationMode(self);
    }
    case 17:
    {
      return ASToggleButtonImpl_getShadowDx(self);
    }
    case 18:
    {
      return ASToggleButtonImpl_getShadowDy(self);
    }
    case 19:
    {
      return ASToggleButtonImpl_getShadowColor(self);
    }
    case 20:
    {
      return ASToggleButtonImpl_getDrawablePadding(self);
    }
    case 21:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 22:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 23:
    {
      return ASToggleButtonImpl_getMinWidth(self);
    }
    case 24:
    {
      return ASToggleButtonImpl_getMinHeight(self);
    }
    case 25:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_(ASToggleButtonImpl_getHeight(self));
    }
    case 28:
    {
      return ASToggleButtonImpl_getWidth(self);
    }
    case 29:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 31:
    {
      return ASToggleButtonImpl_getMarqueeRepeatLimit(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableCompoundButton_;
}

- (void)createNativeWidgetWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASToggleButtonImpl_createNativeWidgetWithJavaUtilMap_(self, params);
}

- (jint)measureHeightWithInt:(jint)width {
  return ASToggleButtonImpl_nativeMeasureHeightButtonWithId_withInt_(self, [self asNativeWidget], width);
}

- (jint)nativeMeasureHeightButtonWithId:(id)uiView
                                withInt:(jint)width {
  return ASToggleButtonImpl_nativeMeasureHeightButtonWithId_withInt_(self, uiView, width);
}

- (void)setMyTextWithId:(id)text {
  ASToggleButtonImpl_nativeSetTextWithId_withNSString_(self, [self asNativeWidget], (NSString *) cast_chk(text, [NSString class]));
}

- (void)nativeSetTextWithId:(id)uiView
               withNSString:(NSString *)text {
  ASToggleButtonImpl_nativeSetTextWithId_withNSString_(self, uiView, text);
}

- (id)getMyText {
  return ASToggleButtonImpl_getMyText(self);
}

- (id)getTitleLabel {
  return ASToggleButtonImpl_getTitleLabel(self);
}

- (void)setHorizontalAligmentCenter {
  ASToggleButtonImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASToggleButtonImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentLeft {
  ASToggleButtonImpl_setHorizontalAligmentLeft(self);
}

- (void)setVerticalAligmentCenter {
  ASToggleButtonImpl_setVerticalAligmentCenter(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASToggleButtonImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASToggleButtonImpl_nativeSetVerticalAligmentTop(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASToggleButtonImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASToggleButtonImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASToggleButtonImpl_setVerticalAligmentTop(self);
}

- (jint)getTextAlignment {
  return ASToggleButtonImpl_getTextAlignment(self);
}

- (id)getPaddingLeft {
  return ASViewImpl_getPaddingLeftWithASIWidget_withADView_(self, measurableCompoundButton_);
}

- (void)setPaddingLeftWithId:(id)paddingLeft {
  ASViewImpl_setPaddingLeftWithId_withADView_(paddingLeft, measurableCompoundButton_);
  ASToggleButtonImpl_nativeSetPaddingLeftWithInt_(self, [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getCompoundPaddingLeft]);
}

- (id)getPaddingRight {
  return ASViewImpl_getPaddingRightWithASIWidget_withADView_(self, measurableCompoundButton_);
}

- (void)setPaddingRightWithId:(id)paddingRight {
  ASViewImpl_setPaddingRightWithId_withADView_(paddingRight, measurableCompoundButton_);
  ASToggleButtonImpl_nativeSetPaddingRightWithInt_(self, [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getCompoundPaddingRight]);
}

- (id)getPaddingTop {
  return ASViewImpl_getPaddingTopWithASIWidget_withADView_(self, measurableCompoundButton_);
}

- (void)setPaddingTopWithId:(id)paddingTop {
  ASViewImpl_setPaddingTopWithId_withADView_(paddingTop, measurableCompoundButton_);
  ASToggleButtonImpl_nativeSetPaddingTopWithInt_(self, [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getCompoundPaddingTop]);
}

- (id)getPaddingBottom {
  return ASViewImpl_getPaddingBottomWithASIWidget_withADView_(self, measurableCompoundButton_);
}

- (id)getPaddingEnd {
  return ASToggleButtonImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASToggleButtonImpl_getPaddingStart(self);
}

- (void)setPaddingBottomWithId:(id)paddingBottom {
  ASViewImpl_setPaddingBottomWithId_withADView_(paddingBottom, measurableCompoundButton_);
  ASToggleButtonImpl_nativeSetPaddingBottomWithInt_(self, [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getCompoundPaddingBottom]);
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASToggleButtonImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASToggleButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASToggleButtonImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASToggleButtonImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASToggleButtonImpl_setPaddingWithId_(self, objValue);
}

- (void)updatePadding {
  [self setPaddingLeftWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getPaddingLeft])];
  [self setPaddingRightWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getPaddingRight])];
  [self setPaddingTopWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getPaddingTop])];
  [self setPaddingBottomWithId:JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getPaddingBottom])];
}

- (void)nativeSetPaddingBottomWithInt:(jint)value {
  ASToggleButtonImpl_nativeSetPaddingBottomWithInt_(self, value);
}

- (void)nativeSetPaddingLeftWithInt:(jint)value {
  ASToggleButtonImpl_nativeSetPaddingLeftWithInt_(self, value);
}

- (void)nativeSetPaddingRightWithInt:(jint)value {
  ASToggleButtonImpl_nativeSetPaddingRightWithInt_(self, value);
}

- (void)nativeSetPaddingTopWithInt:(jint)value {
  ASToggleButtonImpl_nativeSetPaddingTopWithInt_(self, value);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASToggleButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (void)setTextColorWithId:(id)uiView
                    withId:(id)color {
  ASToggleButtonImpl_setTextColorWithId_withId_(self, uiView, color);
}

- (void)addMinMaxListener {
  ASToggleButtonImpl_addMinMaxListener(self);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASToggleButtonImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

- (void)syncPlaceholderLabel {
  ASToggleButtonImpl_syncPlaceholderLabel(self);
}

- (void)setHintColorWithInt:(jint)currentHintTextColor {
  ASToggleButtonImpl_setHintColorWithInt_(self, currentHintTextColor);
}

- (void)setEnabledWithId:(id)objValue {
  ASToggleButtonImpl_setEnabledWithId_(self, objValue);
}

- (void)nativeSetEnabledWithBoolean:(jboolean)enabled {
  ASToggleButtonImpl_nativeSetEnabledWithBoolean_(self, enabled);
}

- (jint)measureWidth {
  return ASToggleButtonImpl_nativeMeasureWidthButtonWithId_(self, [self asNativeWidget]);
}

- (jint)nativeMeasureWidthButtonWithId:(id)uiView {
  return ASToggleButtonImpl_nativeMeasureWidthButtonWithId_(self, uiView);
}

- (void)setNumberOfLinesWithId:(id)uiView
                       withInt:(jint)lines {
  ASToggleButtonImpl_setNumberOfLinesWithId_withInt_(self, uiView, lines);
}

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode {
  ASToggleButtonImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
}

- (id)nativeGetLinBreakMode {
  return ASToggleButtonImpl_nativeGetLinBreakMode(self);
}

- (id)getSingleLine {
  return ASToggleButtonImpl_getSingleLine(self);
}

- (id)getFont {
  return ASToggleButtonImpl_getFont(self);
}

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment {
  ASToggleButtonImpl_nativeSetTextAligmentWithInt_(self, textAlignment);
}

- (id)getJustificationMode {
  return ASToggleButtonImpl_getJustificationMode(self);
}

- (JavaLangInteger *)nativeGetTextAligment {
  return ASToggleButtonImpl_nativeGetTextAligment(self);
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASToggleButtonImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (id)getShadowColor {
  return ASToggleButtonImpl_getShadowColor(self);
}

- (void)setShadowColorWithId:(id)objValue
                withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setShadowColorWithId_withNSString_(self, objValue, strValue);
}

- (void)setShadowDyWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (void)setShadowDxWithJavaLangFloat:(JavaLangFloat *)objValue
                        withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(self, objValue, strValue);
}

- (id)getShadowDy {
  return ASToggleButtonImpl_getShadowDy(self);
}

- (id)getShadowDx {
  return ASToggleButtonImpl_getShadowDx(self);
}

- (void)setTextOffWithId:(id)objValue {
  ASToggleButtonImpl_setTextOffWithId_(self, objValue);
}

- (void)setTextOnWithId:(id)objValue {
  ASToggleButtonImpl_setTextOnWithId_(self, objValue);
}

- (id)getTextOff {
  return ASToggleButtonImpl_getTextOff(self);
}

- (id)getTextOn {
  return ASToggleButtonImpl_getTextOn(self);
}

- (void)initTextOnOff {
  ASToggleButtonImpl_initTextOnOff(self);
}

- (void)toggle {
  ASToggleButtonImpl_toggle(self);
}

- (void)setOnCheckedWithId:(id)objValue {
  ASToggleButtonImpl_setOnCheckedWithId_(self, objValue);
}

- (void)remeasure {
  ASToggleButtonImpl_remeasure(self);
}

- (void)setGravityWithId:(id)objValue {
  ASToggleButtonImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASToggleButtonImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASToggleButtonImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getRawTextAlignment] != 0 || [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getRawLayoutDirection] != 0) {
    ASToggleButtonImpl_updateTextAlignment(self);
  }
}

- (id)getMinHeight {
  return ASToggleButtonImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASToggleButtonImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASToggleButtonImpl_setEmsWithId_(self, objValue);
}

- (jint)getMaxEms {
  return [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getMaxEms];
}

- (jint)getMinEms {
  return [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASToggleButtonImpl_setMinEmsWithId_(self, objValue);
}

- (jint)getMinLines {
  return [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getMinLines];
}

- (jint)getMaxLines {
  return [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASToggleButtonImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASToggleButtonImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASToggleButtonImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASToggleButtonImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASToggleButtonImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASToggleButtonImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASToggleButtonImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASToggleButtonImpl_setMaxWidthWithId_(self, objValue);
}

- (jint)getMaxWidth {
  return [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getMaxWidth];
}

- (jint)getMaxHeight {
  return [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASToggleButtonImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASToggleButtonImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASToggleButtonImpl_getWidth(self);
}

- (jint)getHeight {
  return ASToggleButtonImpl_getHeight(self);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASToggleButtonImpl_setTextStyleWithId_(self, objValue);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASToggleButtonImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASToggleButtonImpl_setTextAllCapsWithId_(self, objValue);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASToggleButtonImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (jboolean)getIncludeFontPadding {
  return ASToggleButtonImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASToggleButtonImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASToggleButtonImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASToggleButtonImpl_getLastBaselineToBottomHeight(self);
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASToggleButtonImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (jint)calcNumberOfWhiteSpaces {
  return ASToggleButtonImpl_calcNumberOfWhiteSpaces(self);
}

- (void)cancelTimer {
  ASToggleButtonImpl_cancelTimer(self);
}

- (void)startTimer {
  ASToggleButtonImpl_startTimer(self);
}

- (id)getMarqueeRepeatLimit {
  return ASToggleButtonImpl_getMarqueeRepeatLimit(self);
}

- (void)setMarqueeRepeatLimitWithId:(id)objValue {
  ASToggleButtonImpl_setMarqueeRepeatLimitWithId_(self, objValue);
}

- (void)startOrStopMarqueeWithId:(id)objValue {
  ASToggleButtonImpl_startOrStopMarqueeWithId_(self, objValue);
}

- (jint)getLabelWidth {
  return ASToggleButtonImpl_getLabelWidth(self);
}

- (jboolean)isLabelMeasured {
  return ASToggleButtonImpl_isLabelMeasured(self);
}

- (void)setTextFormatWithId:(id)objValue {
  ASToggleButtonImpl_setTextFormatWithId_(self, objValue);
}

- (id)getTextSize {
  return ASToggleButtonImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASToggleButtonImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASToggleButtonImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setTextColorWithId:(id)objValue {
  ASToggleButtonImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASToggleButtonImpl_getTextColorState(self);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASToggleButtonImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASToggleButtonImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASToggleButtonImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASToggleButtonImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASToggleButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASToggleButtonImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASToggleButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASToggleButtonImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASToggleButtonImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASToggleButtonImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASToggleButtonImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASToggleButtonImpl_setDrawableTintWithId_(self, objValue);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getBottomDrawable]);
  ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getLeftDrawable]);
  ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getRightDrawable]);
  ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getTopDrawable]);
  if ([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getTextColors])) isStateful]) {
    ASToggleButtonImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getCurrentTextColor]));
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getHintTextColors])) isStateful]) {
    ASToggleButtonImpl_setHintColorWithInt_(self, [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getCurrentHintTextColor]);
    ASToggleButtonImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASToggleButtonImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getLinkTextColors])) isStateful]) {
    ASToggleButtonImpl_setTextColorLinkWithADColorStateList_(self, [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (jint)nativeGetFontSize {
  return ASToggleButtonImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASToggleButtonImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASToggleButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASToggleButtonImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setSingleLineWithId:(id)objValue {
  ASToggleButtonImpl_setSingleLineWithId_(self, objValue);
}

- (id)getEllipsize {
  return ASToggleButtonImpl_getEllipsize(self);
}

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue {
  ASToggleButtonImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
}

- (jint)getBorderPadding {
  return 0;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASToggleButtonImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASToggleButtonImpl_getBorderWidth(self);
}

- (jboolean)canMarquee {
  return ASToggleButtonImpl_canMarquee(self);
}

- (void)cancelNativeTimer {
  ASToggleButtonImpl_cancelNativeTimer(self);
}

- (jboolean)isDisposed {
  return ASToggleButtonImpl_isDisposed(self);
}

- (void)addDeallocHandler {
  ASToggleButtonImpl_addDeallocHandler(self);
}

- (void)schedule {
  ASToggleButtonImpl_schedule(self);
}

- (void)onTick:(NSTimer *)timer {
  [self executeOnMainThreadWithJavaLangRunnable:self->marqueeTask_];
}

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ASToggleButtonImpl_executeOnMainThreadWithJavaLangRunnable_(self, runnable);
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableCompoundButton *) nil_chk(measurableCompoundButton_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASToggleButtonImpl_ToggleButtonBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASToggleButtonImpl_ToggleButtonBean_initWithASToggleButtonImpl_(self);
  }
  return bean_;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASToggleButtonImpl_ToggleButtonCommandBuilder_initWithASToggleButtonImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASToggleButtonImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)setCheckedWithId:(id)objValue {
  ASToggleButtonImpl_setCheckedWithId_(self, objValue);
}

- (id)getChecked {
  return ASToggleButtonImpl_getChecked(self);
}

- (jboolean)toggleChecked {
  return ASToggleButtonImpl_toggleChecked(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 11, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x1, 14, 15, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 16, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 20, 21, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 31, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 32, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 33, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 34, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 8, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 36, 37, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 39, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 42, 43, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 44, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 45, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 46, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 48, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 50, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 51, 52, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 53, 52, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 15, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 59, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 61, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 65, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 12, -1, 13, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 81, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 83, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 36, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 85, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 86, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 90, 88, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 88, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 92, 19, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 93, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 94, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 97, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 98, 99, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 100, 15, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 104, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 105, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 107, 1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 12, -1, 13, -1, -1 },
    { NULL, "V", 0x2, 109, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(createNativeWidgetWithJavaUtilMap:);
  methods[10].selector = @selector(measureHeightWithInt:);
  methods[11].selector = @selector(nativeMeasureHeightButtonWithId:withInt:);
  methods[12].selector = @selector(setMyTextWithId:);
  methods[13].selector = @selector(nativeSetTextWithId:withNSString:);
  methods[14].selector = @selector(getMyText);
  methods[15].selector = @selector(getTitleLabel);
  methods[16].selector = @selector(setHorizontalAligmentCenter);
  methods[17].selector = @selector(setHorizontalAligmentRight);
  methods[18].selector = @selector(setHorizontalAligmentLeft);
  methods[19].selector = @selector(setVerticalAligmentCenter);
  methods[20].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[21].selector = @selector(nativeSetVerticalAligmentTop);
  methods[22].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[23].selector = @selector(setVerticalAligmentBottom);
  methods[24].selector = @selector(setVerticalAligmentTop);
  methods[25].selector = @selector(getTextAlignment);
  methods[26].selector = @selector(getPaddingLeft);
  methods[27].selector = @selector(setPaddingLeftWithId:);
  methods[28].selector = @selector(getPaddingRight);
  methods[29].selector = @selector(setPaddingRightWithId:);
  methods[30].selector = @selector(getPaddingTop);
  methods[31].selector = @selector(setPaddingTopWithId:);
  methods[32].selector = @selector(getPaddingBottom);
  methods[33].selector = @selector(getPaddingEnd);
  methods[34].selector = @selector(getPaddingStart);
  methods[35].selector = @selector(setPaddingBottomWithId:);
  methods[36].selector = @selector(setPaddingVerticalWithId:);
  methods[37].selector = @selector(setPaddingHorizontalWithId:);
  methods[38].selector = @selector(setPaddingEndWithId:);
  methods[39].selector = @selector(setPaddingStartWithId:);
  methods[40].selector = @selector(setPaddingWithId:);
  methods[41].selector = @selector(updatePadding);
  methods[42].selector = @selector(nativeSetPaddingBottomWithInt:);
  methods[43].selector = @selector(nativeSetPaddingLeftWithInt:);
  methods[44].selector = @selector(nativeSetPaddingRightWithInt:);
  methods[45].selector = @selector(nativeSetPaddingTopWithInt:);
  methods[46].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[47].selector = @selector(setTextColorWithId:withId:);
  methods[48].selector = @selector(addMinMaxListener);
  methods[49].selector = @selector(setTextColorLinkWithADColorStateList:);
  methods[50].selector = @selector(syncPlaceholderLabel);
  methods[51].selector = @selector(setHintColorWithInt:);
  methods[52].selector = @selector(setEnabledWithId:);
  methods[53].selector = @selector(nativeSetEnabledWithBoolean:);
  methods[54].selector = @selector(measureWidth);
  methods[55].selector = @selector(nativeMeasureWidthButtonWithId:);
  methods[56].selector = @selector(setNumberOfLinesWithId:withInt:);
  methods[57].selector = @selector(nativeSetLineBreakModeWithInt:);
  methods[58].selector = @selector(nativeGetLinBreakMode);
  methods[59].selector = @selector(getSingleLine);
  methods[60].selector = @selector(getFont);
  methods[61].selector = @selector(setJustificationModeWithId:withNSString:);
  methods[62].selector = @selector(nativeSetTextAligmentWithInt:);
  methods[63].selector = @selector(getJustificationMode);
  methods[64].selector = @selector(nativeGetTextAligment);
  methods[65].selector = @selector(setScrollHorizontallyWithId:);
  methods[66].selector = @selector(getShadowColor);
  methods[67].selector = @selector(setShadowColorWithId:withNSString:);
  methods[68].selector = @selector(setShadowDyWithJavaLangFloat:withNSString:);
  methods[69].selector = @selector(setShadowDxWithJavaLangFloat:withNSString:);
  methods[70].selector = @selector(getShadowDy);
  methods[71].selector = @selector(getShadowDx);
  methods[72].selector = @selector(setTextOffWithId:);
  methods[73].selector = @selector(setTextOnWithId:);
  methods[74].selector = @selector(getTextOff);
  methods[75].selector = @selector(getTextOn);
  methods[76].selector = @selector(initTextOnOff);
  methods[77].selector = @selector(toggle);
  methods[78].selector = @selector(setOnCheckedWithId:);
  methods[79].selector = @selector(remeasure);
  methods[80].selector = @selector(setGravityWithId:);
  methods[81].selector = @selector(updateTextAlignment);
  methods[82].selector = @selector(getGravity);
  methods[83].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[84].selector = @selector(getMinHeight);
  methods[85].selector = @selector(getMinWidth);
  methods[86].selector = @selector(setEmsWithId:);
  methods[87].selector = @selector(getMaxEms);
  methods[88].selector = @selector(getMinEms);
  methods[89].selector = @selector(setMinEmsWithId:);
  methods[90].selector = @selector(getMinLines);
  methods[91].selector = @selector(getMaxLines);
  methods[92].selector = @selector(setMaxEmsWithId:);
  methods[93].selector = @selector(setWidthWithId:);
  methods[94].selector = @selector(setHeightWithId:);
  methods[95].selector = @selector(setMaxLinesWithId:);
  methods[96].selector = @selector(setLinesWithId:);
  methods[97].selector = @selector(setMinLinesWithId:);
  methods[98].selector = @selector(setMaxHeightWithId:);
  methods[99].selector = @selector(setMaxWidthWithId:);
  methods[100].selector = @selector(getMaxWidth);
  methods[101].selector = @selector(getMaxHeight);
  methods[102].selector = @selector(setMinHeightWithId:);
  methods[103].selector = @selector(setMinWidthWithId:);
  methods[104].selector = @selector(getWidth);
  methods[105].selector = @selector(getHeight);
  methods[106].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[107].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[108].selector = @selector(setTextStyleWithId:);
  methods[109].selector = @selector(setMaxLengthWithId:);
  methods[110].selector = @selector(setTextAllCapsWithId:);
  methods[111].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[112].selector = @selector(getIncludeFontPadding);
  methods[113].selector = @selector(getFirstBaselineToTopHeight);
  methods[114].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[115].selector = @selector(getLastBaselineToBottomHeight);
  methods[116].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[117].selector = @selector(calcNumberOfWhiteSpaces);
  methods[118].selector = @selector(cancelTimer);
  methods[119].selector = @selector(startTimer);
  methods[120].selector = @selector(getMarqueeRepeatLimit);
  methods[121].selector = @selector(setMarqueeRepeatLimitWithId:);
  methods[122].selector = @selector(startOrStopMarqueeWithId:);
  methods[123].selector = @selector(getLabelWidth);
  methods[124].selector = @selector(isLabelMeasured);
  methods[125].selector = @selector(setTextFormatWithId:);
  methods[126].selector = @selector(getTextSize);
  methods[127].selector = @selector(setMyTextSizeWithId:);
  methods[128].selector = @selector(nativeSetTextSizeWithInt:);
  methods[129].selector = @selector(setTextColorWithId:);
  methods[130].selector = @selector(getTextColorState);
  methods[131].selector = @selector(setDrawablePaddingWithId:);
  methods[132].selector = @selector(setDrawableBottomWithId:);
  methods[133].selector = @selector(setDrawableTopWithId:);
  methods[134].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[135].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[136].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[137].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[138].selector = @selector(getImageHeightWithId:);
  methods[139].selector = @selector(getImageWidthWithId:);
  methods[140].selector = @selector(getDrawablePadding);
  methods[141].selector = @selector(setDrawableTintModeWithId:);
  methods[142].selector = @selector(setDrawableTintWithId:);
  methods[143].selector = @selector(drawableStateChanged);
  methods[144].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[145].selector = @selector(nativeGetFontSize);
  methods[146].selector = @selector(nativeGetFontStyle);
  methods[147].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[148].selector = @selector(nativeSetFontStyleWithInt:);
  methods[149].selector = @selector(setSingleLineWithId:);
  methods[150].selector = @selector(getEllipsize);
  methods[151].selector = @selector(setEllipsizeWithId:withNSString:);
  methods[152].selector = @selector(getBorderPadding);
  methods[153].selector = @selector(getLineHeightPadding);
  methods[154].selector = @selector(getLineHeight);
  methods[155].selector = @selector(getBorderWidth);
  methods[156].selector = @selector(canMarquee);
  methods[157].selector = @selector(cancelNativeTimer);
  methods[158].selector = @selector(isDisposed);
  methods[159].selector = @selector(addDeallocHandler);
  methods[160].selector = @selector(schedule);
  methods[161].selector = @selector(executeOnMainThreadWithJavaLangRunnable:);
  methods[162].selector = @selector(asNativeWidget);
  methods[163].selector = @selector(checkIosVersionWithNSString:);
  methods[164].selector = @selector(setIdWithNSString:);
  methods[165].selector = @selector(requestLayout);
  methods[166].selector = @selector(invalidate);
  methods[167].selector = @selector(getPluginWithNSString:);
  methods[168].selector = @selector(getBean);
  methods[169].selector = @selector(getBuilder);
  methods[170].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[171].selector = @selector(setCheckedWithId:);
  methods[172].selector = @selector(getChecked);
  methods[173].selector = @selector(toggleChecked);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 110, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 111, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableCompoundButton_", "LASMeasurableCompoundButton;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASToggleButtonImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASToggleButtonImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASToggleButtonImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "textOff_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textOn_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onCheckedChangeListener_", "LADCompoundButton_OnCheckedChangeListener;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 112, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 113, -1 },
    { "marqueeTask_", "LASToggleButtonImpl_MarqueeTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeRepeatLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeCommandConverter_", "LASMarqueeCommandConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 114, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 115, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASToggleButtonImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "ellipsize_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "timer_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isDisposed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dellocHandler_", "LASToggleButtonImpl_DellocHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASToggleButtonImpl_ToggleButtonCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASToggleButtonImpl_ToggleButtonBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "checked_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "createNativeWidget", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "measureHeight", "I", "nativeMeasureHeightButton", "LNSObject;I", "setMyText", "LNSObject;", "nativeSetText", "LNSObject;LNSString;", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setPadding", "nativeSetPaddingBottom", "nativeSetPaddingLeft", "nativeSetPaddingRight", "nativeSetPaddingTop", "postSetAttribute", "setTextColor", "LNSObject;LNSObject;", "setTextColorLink", "LADColorStateList;", "setHintColor", "setEnabled", "nativeSetEnabled", "Z", "nativeMeasureWidthButton", "setNumberOfLines", "nativeSetLineBreakMode", "setJustificationMode", "nativeSetTextAligment", "setScrollHorizontally", "setShadowColor", "setShadowDy", "LJavaLangFloat;LNSString;", "setShadowDx", "setTextOff", "setTextOn", "setOnChecked", "setGravity", "onRtlPropertiesChanged", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "setTypeFace", "setFontFamily", "setTextStyle", "setMaxLength", "setTextAllCaps", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "initHtml", "setMarqueeRepeatLimit", "startOrStopMarquee", "setTextFormat", "setMyTextSize", "nativeSetTextSize", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "drawableStateChange", "LNSString;LADDrawable;", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setSingleLine", "setEllipsize", "executeOnMainThread", "LJavaLangRunnable;", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "setChecked", &ASToggleButtonImpl_LOCAL_NAME, &ASToggleButtonImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", &ASToggleButtonImpl_ITALIC_FONT_TRAIT, &ASToggleButtonImpl_BOLD_FONT_TRAIT, "LASToggleButtonImpl_Ellipsize;LASToggleButtonImpl_JustificationMode;LASToggleButtonImpl_DrawableTintMode;LASToggleButtonImpl_MarqueeRepeatLimit;LASToggleButtonImpl_Font;LASToggleButtonImpl_TextStyle;LASToggleButtonImpl_ToggleButtonExt;LASToggleButtonImpl_MarqueeTask;LASToggleButtonImpl_DellocHandler;LASToggleButtonImpl_OnCheckedChangeListener;LASToggleButtonImpl_ToggleButtonCommandBuilder;LASToggleButtonImpl_ToggleButtonBean;LASToggleButtonImpl_StateToggler;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl = { "ToggleButtonImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 174, 28, -1, 116, -1, -1, -1 };
  return &_ASToggleButtonImpl;
}

+ (void)initialize {
  if (self == [ASToggleButtonImpl class]) {
    ASToggleButtonImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASToggleButtonImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASToggleButtonImpl)
  }
}

@end

void ASToggleButtonImpl_init(ASToggleButtonImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASToggleButtonImpl_GROUP_NAME, ASToggleButtonImpl_LOCAL_NAME);
}

ASToggleButtonImpl *new_ASToggleButtonImpl_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl, init)
}

ASToggleButtonImpl *create_ASToggleButtonImpl_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl, init)
}

void ASToggleButtonImpl_setWidgetOnNativeClass(ASToggleButtonImpl *self) {
  ((ASUIButton*) self.uiView).widget = self;
}

void ASToggleButtonImpl_createNativeWidgetWithJavaUtilMap_(ASToggleButtonImpl *self, id<JavaUtilMap> params) {
  self.uiView = [ASUIButton buttonWithType:UIButtonTypeCustom];
  ((ASUIButton*)self.uiView).titleLabel.numberOfLines = 0;
  ((ASUIButton*)self.uiView).titleLabel.textAlignment = NSTextAlignmentCenter;
  ((ASUIButton*)self.uiView).titleLabel.lineBreakMode = NSLineBreakByCharWrapping;
  ((ASUIButton*)self.uiView).contentEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
  ((ASUIButton*)self.uiView).titleEdgeInsets = UIEdgeInsetsMake(0, 0, 0, 0);
  //((ASUIButton*)self.uiView).titleLabel.backgroundColor = [UIColor redColor];
  //((ASUIButton*)self.uiView).backgroundColor = [UIColor yellowColor];
  ((ASUIButton*)self.uiView).clipsToBounds = YES;
  [((ASUIButton*)self.uiView) setTitleColor:[UIColor blackColor] forState:UIControlStateNormal];
}

jint ASToggleButtonImpl_nativeMeasureHeightButtonWithId_withInt_(ASToggleButtonImpl *self, id uiView, jint width) {
  CGSize maximumLabelSize = CGSizeMake(width,CGFLOAT_MAX);
  CGSize requiredSize = [((ASUIButton*)uiView).titleLabel sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.height);
}

void ASToggleButtonImpl_nativeSetTextWithId_withNSString_(ASToggleButtonImpl *self, id uiView, NSString *text) {
  ((ASUIButton*)uiView).titleLabel.text = text;
  [((ASUIButton*)uiView) setTitle:text forState:UIControlStateNormal];
}

id ASToggleButtonImpl_getMyText(ASToggleButtonImpl *self) {
  return ((ASUIButton*)self.uiView).titleLabel.text;
}

id ASToggleButtonImpl_getTitleLabel(ASToggleButtonImpl *self) {
  return ((ASUIButton*)self.uiView).titleLabel;
}

void ASToggleButtonImpl_setHorizontalAligmentCenter(ASToggleButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentCenter;
}

void ASToggleButtonImpl_setHorizontalAligmentRight(ASToggleButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentRight;
}

void ASToggleButtonImpl_setHorizontalAligmentLeft(ASToggleButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentHorizontalAlignment = UIControlContentHorizontalAlignmentLeft;
}

void ASToggleButtonImpl_setVerticalAligmentCenter(ASToggleButtonImpl *self) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASToggleButtonImpl_nativeSetVerticalAligmentCenter(self);
}

void ASToggleButtonImpl_nativeSetVerticalAligmentBottom(ASToggleButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentBottom;
}

void ASToggleButtonImpl_nativeSetVerticalAligmentTop(ASToggleButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentTop;
}

void ASToggleButtonImpl_nativeSetVerticalAligmentCenter(ASToggleButtonImpl *self) {
  ((ASUIButton*)self.uiView).contentVerticalAlignment = UIControlContentVerticalAlignmentCenter;
}

void ASToggleButtonImpl_setVerticalAligmentBottom(ASToggleButtonImpl *self) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASToggleButtonImpl_nativeSetVerticalAligmentBottom(self);
}

void ASToggleButtonImpl_setVerticalAligmentTop(ASToggleButtonImpl *self) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASToggleButtonImpl_nativeSetVerticalAligmentTop(self);
}

jint ASToggleButtonImpl_getTextAlignment(ASToggleButtonImpl *self) {
  int alignment = (int) ((ASUIButton*)self.uiView).contentHorizontalAlignment;
  
  if (alignment == UIControlContentHorizontalAlignmentCenter) {
    return 2;
  }
  
  if (alignment == UIControlContentHorizontalAlignmentLeft) {
    return 0;
  }
  
  if (alignment == UIControlContentHorizontalAlignmentRight) {
    return 1;
  }
  
  return 0;
}

id ASToggleButtonImpl_getPaddingEnd(ASToggleButtonImpl *self) {
  return [self getPaddingRight];
}

id ASToggleButtonImpl_getPaddingStart(ASToggleButtonImpl *self) {
  return [self getPaddingLeft];
}

void ASToggleButtonImpl_setPaddingVerticalWithId_(ASToggleButtonImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASToggleButtonImpl_setPaddingHorizontalWithId_(ASToggleButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASToggleButtonImpl_setPaddingEndWithId_(ASToggleButtonImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASToggleButtonImpl_setPaddingStartWithId_(ASToggleButtonImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

void ASToggleButtonImpl_setPaddingWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_setPaddingVerticalWithId_(self, objValue);
  ASToggleButtonImpl_setPaddingHorizontalWithId_(self, objValue);
}

void ASToggleButtonImpl_nativeSetPaddingBottomWithInt_(ASToggleButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, value, edgeInsets.right)];
}

void ASToggleButtonImpl_nativeSetPaddingLeftWithInt_(ASToggleButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, value, edgeInsets.bottom, edgeInsets.right)];
}

void ASToggleButtonImpl_nativeSetPaddingRightWithInt_(ASToggleButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, edgeInsets.bottom, value)];
}

void ASToggleButtonImpl_nativeSetPaddingTopWithInt_(ASToggleButtonImpl *self, jint value) {
  ASUIButton* label = ((ASUIButton*) self.uiView);
  UIEdgeInsets edgeInsets = label.titleEdgeInsets;
  [label setTitleEdgeInsets:UIEdgeInsetsMake(value, edgeInsets.left, edgeInsets.bottom, edgeInsets.right)];
}

void ASToggleButtonImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASToggleButtonImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
}

void ASToggleButtonImpl_setTextColorWithId_withId_(ASToggleButtonImpl *self, id uiView, id color) {
  [((ASUIButton*)uiView) setTitleColor:color forState:UIControlStateNormal];
}

void ASToggleButtonImpl_addMinMaxListener(ASToggleButtonImpl *self) {
}

void ASToggleButtonImpl_setTextColorLinkWithADColorStateList_(ASToggleButtonImpl *self, ADColorStateList *linkTextColors) {
}

void ASToggleButtonImpl_syncPlaceholderLabel(ASToggleButtonImpl *self) {
}

void ASToggleButtonImpl_setHintColorWithInt_(ASToggleButtonImpl *self, jint currentHintTextColor) {
}

void ASToggleButtonImpl_setEnabledWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_nativeSetEnabledWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASToggleButtonImpl_nativeSetEnabledWithBoolean_(ASToggleButtonImpl *self, jboolean enabled) {
  [((ASUIButton*)self.uiView) setEnabled:enabled];
}

jint ASToggleButtonImpl_nativeMeasureWidthButtonWithId_(ASToggleButtonImpl *self, id uiView) {
  CGSize maximumLabelSize = CGSizeMake(CGFLOAT_MAX,CGFLOAT_MAX);
  CGSize requiredSize = [((ASUIButton*)uiView).titleLabel sizeThatFits:maximumLabelSize];
  return ceil(requiredSize.width);
}

void ASToggleButtonImpl_setNumberOfLinesWithId_withInt_(ASToggleButtonImpl *self, id uiView, jint lines) {
  ((ASUIButton*)uiView).titleLabel.numberOfLines = lines;
}

void ASToggleButtonImpl_nativeSetLineBreakModeWithInt_(ASToggleButtonImpl *self, jint lineBreakMode) {
  ((ASUIButton*)self.uiView).titleLabel.lineBreakMode = lineBreakMode;
  ((ASUIButton*)self.uiView).titleLabel.adjustsFontSizeToFitWidth = false;
}

id ASToggleButtonImpl_nativeGetLinBreakMode(ASToggleButtonImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUIButton*)self.uiView).titleLabel.lineBreakMode];
}

id ASToggleButtonImpl_getSingleLine(ASToggleButtonImpl *self) {
  return [JavaLangBoolean valueOfWithBoolean:((ASUIButton*)self.uiView).titleLabel.numberOfLines == 1];
}

id ASToggleButtonImpl_getFont(ASToggleButtonImpl *self) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  return label.font;
}

void ASToggleButtonImpl_setJustificationModeWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue) {
  ASToggleButtonImpl_nativeSetTextAligmentWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASToggleButtonImpl_nativeSetTextAligmentWithInt_(ASToggleButtonImpl *self, jint textAlignment) {
  [((ASUIButton*)self->uiView_).titleLabel setTextAlignment:textAlignment];
}

id ASToggleButtonImpl_getJustificationMode(ASToggleButtonImpl *self) {
  return ASToggleButtonImpl_nativeGetTextAligment(self);
}

JavaLangInteger *ASToggleButtonImpl_nativeGetTextAligment(ASToggleButtonImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUIButton*)self->uiView_).titleLabel.textAlignment];
}

void ASToggleButtonImpl_setScrollHorizontallyWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_setNumberOfLinesWithId_withInt_(self, self->uiView_, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] ? 1 : 0);
}

id ASToggleButtonImpl_getShadowColor(ASToggleButtonImpl *self) {
  return ((ASUIButton*)self->uiView_).titleLabel.shadowColor;
}

void ASToggleButtonImpl_setShadowColorWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue) {
  [((ASUIButton*)self->uiView_) setTitleShadowColor:(UIColor*) objValue forState:UIControlStateNormal] ;
}

void ASToggleButtonImpl_setShadowDyWithJavaLangFloat_withNSString_(ASToggleButtonImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  UILabel* label = ((ASUIButton*)self->uiView_).titleLabel;
  [label setShadowOffset:CGSizeMake(label.shadowOffset.width, [objValue floatValue])];
}

void ASToggleButtonImpl_setShadowDxWithJavaLangFloat_withNSString_(ASToggleButtonImpl *self, JavaLangFloat *objValue, NSString *strValue) {
  UILabel* label = ((ASUIButton*)self->uiView_).titleLabel;
  [label setShadowOffset:CGSizeMake([objValue floatValue], label.shadowOffset.height)];
}

id ASToggleButtonImpl_getShadowDy(ASToggleButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUIButton*)self->uiView_).titleLabel.shadowOffset.height];
}

id ASToggleButtonImpl_getShadowDx(ASToggleButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:(jint)((ASUIButton*)self->uiView_).titleLabel.shadowOffset.width];
}

void ASToggleButtonImpl_setTextOffWithId_(ASToggleButtonImpl *self, id objValue) {
  self->textOff_ = (NSString *) cast_chk(objValue, [NSString class]);
}

void ASToggleButtonImpl_setTextOnWithId_(ASToggleButtonImpl *self, id objValue) {
  self->textOn_ = (NSString *) cast_chk(objValue, [NSString class]);
}

id ASToggleButtonImpl_getTextOff(ASToggleButtonImpl *self) {
  return self->textOff_;
}

id ASToggleButtonImpl_getTextOn(ASToggleButtonImpl *self) {
  return self->textOn_;
}

void ASToggleButtonImpl_initTextOnOff(ASToggleButtonImpl *self) {
  self->textOff_ = (NSString *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_resourcestring))) convertFromWithId:@"@string/default_textOff" withJavaUtilMap:nil withASIFragment:self->fragment_], [NSString class]);
  self->textOn_ = (NSString *) cast_chk([((id<ASIConverter>) nil_chk(ASConverterFactory_getWithNSString_(ASCommonConverters_resourcestring))) convertFromWithId:@"@string/default_textOn" withJavaUtilMap:nil withASIFragment:self->fragment_], [NSString class]);
}

void ASToggleButtonImpl_toggle(ASToggleButtonImpl *self) {
  ASToggleButtonImpl_setCheckedWithId_(self, JavaLangBoolean_valueOfWithBoolean_(ASToggleButtonImpl_toggleChecked(self)));
  if (self->onCheckedChangeListener_ != nil) {
    [self->onCheckedChangeListener_ onCheckedChangedWithADCompoundButton:self->measurableCompoundButton_ withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(ASToggleButtonImpl_getChecked(self), [JavaLangBoolean class]))) booleanValue]];
  }
}

void ASToggleButtonImpl_setOnCheckedWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[NSString class]]) {
    self->onCheckedChangeListener_ = new_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    self->onCheckedChangeListener_ = (id<ADCompoundButton_OnCheckedChangeListener>) cast_check(objValue, ADCompoundButton_OnCheckedChangeListener_class_());
  }
}

void ASToggleButtonImpl_remeasure(ASToggleButtonImpl *self) {
  if ([((id<ASIFragment>) nil_chk(self->fragment_)) isViewLoaded] && [self isInitialised]) {
    [self requestLayout];
    [((id<ASIFragment>) nil_chk(self->fragment_)) remeasure];
  }
}

void ASToggleButtonImpl_setGravityWithId_(ASToggleButtonImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASToggleButtonImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASToggleButtonImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASToggleButtonImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASToggleButtonImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASToggleButtonImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASToggleButtonImpl_updateTextAlignment(ASToggleButtonImpl *self) {
  ADLayout_Alignment *minor = [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASToggleButtonImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASToggleButtonImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASToggleButtonImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASToggleButtonImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASToggleButtonImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASToggleButtonImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASToggleButtonImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASToggleButtonImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASToggleButtonImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASToggleButtonImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASToggleButtonImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASToggleButtonImpl_getGravity(ASToggleButtonImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASToggleButtonImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASToggleButtonImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASToggleButtonImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASToggleButtonImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

id ASToggleButtonImpl_getMinHeight(ASToggleButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getMinHeight]);
}

id ASToggleButtonImpl_getMinWidth(ASToggleButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getMinWidth]);
}

void ASToggleButtonImpl_setEmsWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_setMinEmsWithId_(self, objValue);
  ASToggleButtonImpl_setMaxEmsWithId_(self, objValue);
}

void ASToggleButtonImpl_setMinEmsWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setMaxEmsWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setWidthWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_setMinWidthWithId_(self, objValue);
  ASToggleButtonImpl_setMaxWidthWithId_(self, objValue);
}

void ASToggleButtonImpl_setHeightWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_setMinHeightWithId_(self, objValue);
  ASToggleButtonImpl_setMaxHeightWithId_(self, objValue);
}

void ASToggleButtonImpl_setMaxLinesWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setLinesWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_setMinLinesWithId_(self, objValue);
  ASToggleButtonImpl_setMaxLinesWithId_(self, objValue);
}

void ASToggleButtonImpl_setMinLinesWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setMaxHeightWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setMaxWidthWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setMinHeightWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

void ASToggleButtonImpl_setMinWidthWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASToggleButtonImpl_addMinMaxListener(self);
}

id ASToggleButtonImpl_getWidth(ASToggleButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getWidth]);
}

jint ASToggleButtonImpl_getHeight(ASToggleButtonImpl *self) {
  return [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getHeight];
}

void ASToggleButtonImpl_setTypeFaceWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue) {
  ASToggleButtonImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASToggleButtonImpl_setFontFamilyWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASToggleButtonImpl_nativeGetFontStyle(self);
  jint height = ASToggleButtonImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASToggleButtonImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASToggleButtonImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASToggleButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASToggleButtonImpl_setTextStyleWithId_(ASToggleButtonImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASToggleButtonImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASToggleButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASToggleButtonImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASToggleButtonImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASToggleButtonImpl_ITALIC_FONT_TRAIT;
    }
    ASToggleButtonImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

void ASToggleButtonImpl_setMaxLengthWithId_(ASToggleButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_maxlength withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"maxLength" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"maxLength" withId:objValue];
  }
}

void ASToggleButtonImpl_setTextAllCapsWithId_(ASToggleButtonImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_uppercase withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textAllCaps" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"textAllCaps" withId:objValue];
  }
}

void ASToggleButtonImpl_setFirstBaselineToTopHeightWithId_(ASToggleButtonImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASToggleButtonImpl_getFont(self));
  jint firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsTop;
  if (ASToggleButtonImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    jint paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue]];
  }
}

jboolean ASToggleButtonImpl_getIncludeFontPadding(ASToggleButtonImpl *self) {
  return false;
}

id ASToggleButtonImpl_getFirstBaselineToTopHeight(ASToggleButtonImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASToggleButtonImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASToggleButtonImpl_setLastBaselineToBottomHeightWithId_(ASToggleButtonImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASToggleButtonImpl_getFont(self));
  jint lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsBottom;
  if (ASToggleButtonImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    jint paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASToggleButtonImpl_getLastBaselineToBottomHeight(ASToggleButtonImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASToggleButtonImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASToggleButtonImpl_initHtmlWithJavaUtilMap_(ASToggleButtonImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

jint ASToggleButtonImpl_calcNumberOfWhiteSpaces(ASToggleButtonImpl *self) {
  if (!ASToggleButtonImpl_isLabelMeasured(self)) {
    return 0;
  }
  jfloat blankSpaceWidth = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(ASToggleButtonImpl_getTextSize(self), [NSNumber class])))) floatValue];
  jint width = JreIntDiv(ASToggleButtonImpl_getLabelWidth(self), 3);
  jint numberOfBlankSpaces = JreFpToInt(JavaLangMath_ceilWithDouble_(width / (blankSpaceWidth * 1.0f)));
  return numberOfBlankSpaces;
}

void ASToggleButtonImpl_cancelTimer(ASToggleButtonImpl *self) {
  ASToggleButtonImpl_cancelNativeTimer(self);
  if (self->marqueeTask_ != nil) {
    [self->marqueeTask_ cancel];
  }
  if (self->marqueeCommandConverter_ != nil) {
    [self->marqueeCommandConverter_ updateArgsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:NSObject_class_()]];
  }
}

void ASToggleButtonImpl_startTimer(ASToggleButtonImpl *self) {
  if (ASToggleButtonImpl_canMarquee(self)) {
    ASToggleButtonImpl_addDeallocHandler(self);
    if (self->marqueeTask_ != nil) {
      [self->marqueeTask_ restart];
    }
    else {
      NSString *direction = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? @"reverse" : @"forward";
      self->marqueeTask_ = new_ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(self, direction);
    }
    ASToggleButtonImpl_schedule(self);
  }
}

id ASToggleButtonImpl_getMarqueeRepeatLimit(ASToggleButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->marqueeRepeatLimit_);
}

void ASToggleButtonImpl_setMarqueeRepeatLimitWithId_(ASToggleButtonImpl *self, id objValue) {
  self->marqueeRepeatLimit_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASToggleButtonImpl_startOrStopMarqueeWithId_(ASToggleButtonImpl *self, id objValue) {
  ASToggleButtonImpl_cancelTimer(self);
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASToggleButtonImpl_startTimer(self);
  }
}

jint ASToggleButtonImpl_getLabelWidth(ASToggleButtonImpl *self) {
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) isIgnoreDrawableHeight]) {
    return [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getMeasuredWidth] - [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getPaddingLeft] - [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getPaddingRight];
  }
  return [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getMeasuredWidth] - [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getCompoundPaddingRight] - [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getCompoundPaddingLeft];
}

jboolean ASToggleButtonImpl_isLabelMeasured(ASToggleButtonImpl *self) {
  return !ASToggleButtonImpl_isDisposed(self) && ASToggleButtonImpl_getLabelWidth(self) > 0;
}

void ASToggleButtonImpl_setTextFormatWithId_(ASToggleButtonImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

id ASToggleButtonImpl_getTextSize(ASToggleButtonImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUIButton*)self.uiView).font.pointSize];
}

void ASToggleButtonImpl_setMyTextSizeWithId_(ASToggleButtonImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASToggleButtonImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASToggleButtonImpl_nativeSetTextSizeWithInt_(ASToggleButtonImpl *self, jint value) {
  [((ASUIButton*)self.uiView) setFont: [((ASUIButton*)self.uiView).font fontWithSize: value]];
}

void ASToggleButtonImpl_setTextColorWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getCurrentTextColor]);
  }
  ASToggleButtonImpl_setTextColorWithId_withId_(self, self->uiView_, ASViewImpl_getColorWithId_(objValue));
}

id ASToggleButtonImpl_getTextColorState(ASToggleButtonImpl *self) {
  return [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getTextColors];
}

void ASToggleButtonImpl_setDrawablePaddingWithId_(ASToggleButtonImpl *self, id objValue) {
  [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [self updatePadding];
}

void ASToggleButtonImpl_setDrawableBottomWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASToggleButtonImpl_setDrawableTopWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASToggleButtonImpl_setDrawableRightWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASToggleButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASToggleButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASToggleButtonImpl_setDrawableRightInternalWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASToggleButtonImpl_setDrawableLeftWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASToggleButtonImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASToggleButtonImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASToggleButtonImpl_setDrawableLeftInternalWithNSString_withId_(ASToggleButtonImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

jint ASToggleButtonImpl_getImageHeightWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASToggleButtonImpl_getImageWidthWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASToggleButtonImpl_getDrawablePadding(ASToggleButtonImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getDrawablePadding]);
}

void ASToggleButtonImpl_setDrawableTintModeWithId_(ASToggleButtonImpl *self, id value) {
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASToggleButtonImpl_setDrawableTintWithId_(ASToggleButtonImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASToggleButtonImpl_drawableStateChangeWithNSString_withADDrawable_(ASToggleButtonImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ASMeasurableCompoundButton *) nil_chk(self->measurableCompoundButton_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASToggleButtonImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASToggleButtonImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASToggleButtonImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASToggleButtonImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

jint ASToggleButtonImpl_nativeGetFontSize(ASToggleButtonImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASToggleButtonImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASToggleButtonImpl_nativeGetFontStyle(ASToggleButtonImpl *self) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASToggleButtonImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASToggleButtonImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUIButton*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUIButton*)label).font = font;
  }
}

void ASToggleButtonImpl_nativeSetFontStyleWithInt_(ASToggleButtonImpl *self, jint style) {
  ASUIButton* label = ((ASUIButton*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUIButton*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

void ASToggleButtonImpl_setSingleLineWithId_(ASToggleButtonImpl *self, id objValue) {
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASToggleButtonImpl_setNumberOfLinesWithId_withInt_(self, [self asNativeWidget], 1);
  }
  else {
    ASToggleButtonImpl_setNumberOfLinesWithId_withInt_(self, [self asNativeWidget], 0);
  }
}

id ASToggleButtonImpl_getEllipsize(ASToggleButtonImpl *self) {
  if ([((NSString *) nil_chk(self->ellipsize_)) isEqual:@"marquee"]) {
    return JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee));
  }
  return ASToggleButtonImpl_nativeGetLinBreakMode(self);
}

void ASToggleButtonImpl_setEllipsizeWithId_withNSString_(ASToggleButtonImpl *self, id objValue, NSString *strValue) {
  self->ellipsize_ = strValue;
  jint lineBreakMode = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee)) {
    lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping);
  }
  if (ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self)) {
    if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead);
    }
    else if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail);
    }
  }
  ASToggleButtonImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
  ASToggleButtonImpl_cancelTimer(self);
  if ([((NSString *) nil_chk(strValue)) isEqual:@"marquee"]) {
    ASToggleButtonImpl_startTimer(self);
  }
}

jint ASToggleButtonImpl_getLineHeight(ASToggleButtonImpl *self) {
  return ceil(((ASUIButton*)self.uiView).font.lineHeight);
}

jint ASToggleButtonImpl_getBorderWidth(ASToggleButtonImpl *self) {
  return 0;
}

jboolean ASToggleButtonImpl_canMarquee(ASToggleButtonImpl *self) {
  return [nil_chk(ASToggleButtonImpl_getSingleLine(self)) isEqual:JreLoadStatic(JavaLangBoolean, TRUE)];
}

void ASToggleButtonImpl_cancelNativeTimer(ASToggleButtonImpl *self) {
  if (self->timer_ != nil) {
    [(NSTimer*) self->timer_ invalidate];
    self->timer_ = nil;
  }
}

jboolean ASToggleButtonImpl_isDisposed(ASToggleButtonImpl *self) {
  return self->isDisposed_;
}

void ASToggleButtonImpl_addDeallocHandler(ASToggleButtonImpl *self) {
  if (self->dellocHandler_ == nil) {
    NSString *type = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    self->dellocHandler_ = new_ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(self, type);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:type withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->dellocHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASToggleButtonImpl_schedule(ASToggleButtonImpl *self) {
  if (self->timer_ == nil) {
    self->timer_ = [NSTimer scheduledTimerWithTimeInterval:0.1
    target:self
    selector:@selector(onTick:)
    userInfo:nil
    repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:self->timer_ forMode:NSRunLoopCommonModes];
  }
}

void ASToggleButtonImpl_executeOnMainThreadWithJavaLangRunnable_(ASToggleButtonImpl *self, id<JavaLangRunnable> runnable) {
  [((id<JavaLangRunnable>) nil_chk(runnable)) run];
}

void ASToggleButtonImpl_nativeCreateWithJavaUtilMap_(ASToggleButtonImpl *self, id<JavaUtilMap> params) {
  ASToggleButtonImpl_initTextOnOff(self);
  ASToggleButtonImpl_createNativeWidgetWithJavaUtilMap_(self, params);
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"text" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
  ASViewImpl_setOnClickWithASIWidget_withNSString_withId_withADView_OnClickListener_(self, @"statetoggler", self->uiView_, new_ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(self));
}

void ASToggleButtonImpl_setCheckedWithId_(ASToggleButtonImpl *self, id objValue) {
  self->checked_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  [self setMyTextWithId:self->checked_ ? self->textOn_ : self->textOff_];
  ASToggleButtonImpl_remeasure(self);
}

id ASToggleButtonImpl_getChecked(ASToggleButtonImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_(self->checked_);
}

jboolean ASToggleButtonImpl_toggleChecked(ASToggleButtonImpl *self) {
  return !self->checked_;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl)

@implementation ASToggleButtonImpl_Ellipsize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_Ellipsize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_Ellipsize = { "Ellipsize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_Ellipsize;
}

@end

void ASToggleButtonImpl_Ellipsize_init(ASToggleButtonImpl_Ellipsize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"marquee" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingMiddle))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead))];
  }
}

ASToggleButtonImpl_Ellipsize *new_ASToggleButtonImpl_Ellipsize_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_Ellipsize, init)
}

ASToggleButtonImpl_Ellipsize *create_ASToggleButtonImpl_Ellipsize_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_Ellipsize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_Ellipsize)

@implementation ASToggleButtonImpl_JustificationMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_JustificationMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_JustificationMode = { "JustificationMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_JustificationMode;
}

@end

void ASToggleButtonImpl_JustificationMode_init(ASToggleButtonImpl_JustificationMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inter_word" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentJustified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentLeft))];
  }
}

ASToggleButtonImpl_JustificationMode *new_ASToggleButtonImpl_JustificationMode_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_JustificationMode, init)
}

ASToggleButtonImpl_JustificationMode *create_ASToggleButtonImpl_JustificationMode_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_JustificationMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_JustificationMode)

@implementation ASToggleButtonImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_DrawableTintMode;
}

@end

void ASToggleButtonImpl_DrawableTintMode_init(ASToggleButtonImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASToggleButtonImpl_DrawableTintMode *new_ASToggleButtonImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_DrawableTintMode, init)
}

ASToggleButtonImpl_DrawableTintMode *create_ASToggleButtonImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_DrawableTintMode)

@implementation ASToggleButtonImpl_MarqueeRepeatLimit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_MarqueeRepeatLimit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

- (jboolean)supportsIntAlso {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  methods[3].selector = @selector(supportsIntAlso);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_MarqueeRepeatLimit = { "MarqueeRepeatLimit", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_MarqueeRepeatLimit;
}

@end

void ASToggleButtonImpl_MarqueeRepeatLimit_init(ASToggleButtonImpl_MarqueeRepeatLimit *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"marquee_forever" withId:JavaLangInteger_valueOfWithInt_((jint) 0xffffffff)];
  }
}

ASToggleButtonImpl_MarqueeRepeatLimit *new_ASToggleButtonImpl_MarqueeRepeatLimit_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_MarqueeRepeatLimit, init)
}

ASToggleButtonImpl_MarqueeRepeatLimit *create_ASToggleButtonImpl_MarqueeRepeatLimit_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_MarqueeRepeatLimit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_MarqueeRepeatLimit)

@implementation ASToggleButtonImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_Font;
}

@end

void ASToggleButtonImpl_Font_init(ASToggleButtonImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASToggleButtonImpl_Font *new_ASToggleButtonImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_Font, init)
}

ASToggleButtonImpl_Font *create_ASToggleButtonImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_Font)

@implementation ASToggleButtonImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASToggleButtonImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_TextStyle;
}

@end

void ASToggleButtonImpl_TextStyle_init(ASToggleButtonImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASToggleButtonImpl_TextStyle *new_ASToggleButtonImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_TextStyle, init)
}

ASToggleButtonImpl_TextStyle *create_ASToggleButtonImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_TextStyle)

@implementation ASToggleButtonImpl_ToggleButtonExt

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$ {
  ASToggleButtonImpl_ToggleButtonExt_initWithASToggleButtonImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (jint)getLineHeight {
  return ASToggleButtonImpl_getLineHeight(this$0_);
}

- (jint)getBorderWidth {
  return ASToggleButtonImpl_getBorderWidth(this$0_);
}

- (jint)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (void)__javaClone:(ASToggleButtonImpl_ToggleButtonExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToggleButtonImpl:);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[5].selector = @selector(newInstanceWithASIWidget:);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[7].selector = @selector(getMethods);
  methods[8].selector = @selector(initialized);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[10].selector = @selector(drawableStateChanged);
  methods[11].selector = @selector(offsetTopAndBottomWithInt:);
  methods[12].selector = @selector(offsetLeftAndRightWithInt:);
  methods[13].selector = @selector(setVisibilityWithInt:);
  methods[14].selector = @selector(getBorderPadding);
  methods[15].selector = @selector(getLineHeight);
  methods[16].selector = @selector(getBorderWidth);
  methods[17].selector = @selector(getLineHeightPadding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToggleButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToggleButtonImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_ToggleButtonExt = { "ToggleButtonExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 3, 0, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_ToggleButtonExt;
}

@end

void ASToggleButtonImpl_ToggleButtonExt_initWithASToggleButtonImpl_(ASToggleButtonImpl_ToggleButtonExt *self, ASToggleButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableCompoundButton_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASToggleButtonImpl_ToggleButtonExt *new_ASToggleButtonImpl_ToggleButtonExt_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_ToggleButtonExt, initWithASToggleButtonImpl_, outer$)
}

ASToggleButtonImpl_ToggleButtonExt *create_ASToggleButtonImpl_ToggleButtonExt_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_ToggleButtonExt, initWithASToggleButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_ToggleButtonExt)

@implementation ASToggleButtonImpl_MarqueeTask

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$
                              withNSString:(NSString *)direction {
  ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(self, outer$, direction);
  return self;
}

- (void)cancel {
  cancel_ = true;
}

- (void)restart {
  cancel_ = false;
  slideLength_ = 0;
  cycles_ = 0;
}

- (void)run {
  jint numberOfBlankSpaces = ASToggleButtonImpl_calcNumberOfWhiteSpaces(this$0_);
  if (this$0_->marqueeCommandConverter_ == nil) {
    this$0_->marqueeCommandConverter_ = (ASMarqueeCommandConverter *) cast_chk([this$0_ getAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfBlankSpaces), JavaLangInteger_valueOfWithInt_(0), direction_ } count:3 type:NSObject_class_()]], [ASMarqueeCommandConverter class]);
  }
  slideLength_ = [((ASMarqueeCommandConverter *) nil_chk(this$0_->marqueeCommandConverter_)) getOffset];
  if (numberOfBlankSpaces > 0) {
    NSString *str = (NSString *) cast_chk(ASToggleButtonImpl_getMyText(this$0_), [NSString class]);
    if (slideLength_ == [((NSString *) nil_chk(str)) java_length]) {
      slideLength_ = 0;
      cycles_++;
    }
    if ((this$0_->marqueeRepeatLimit_ > 0 && cycles_ >= this$0_->marqueeRepeatLimit_)) {
      ASToggleButtonImpl_cancelTimer(this$0_);
      return;
    }
    slideLength_++;
    ASToggleButtonImpl_executeOnMainThreadWithJavaLangRunnable_(this$0_, new_ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(self, numberOfBlankSpaces));
  }
  else {
    ASToggleButtonImpl_schedule(this$0_);
  }
}

- (void)__javaClone:(ASToggleButtonImpl_MarqueeTask *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToggleButtonImpl:withNSString:);
  methods[1].selector = @selector(cancel);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToggleButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "slideLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cycles_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToggleButtonImpl;LNSString;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_MarqueeTask = { "MarqueeTask", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 4, 5, 1, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_MarqueeTask;
}

@end

void ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl_MarqueeTask *self, ASToggleButtonImpl *outer$, NSString *direction) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->slideLength_ = 0;
  self->cycles_ = 0;
  self->cancel_ = false;
  self->direction_ = direction;
}

ASToggleButtonImpl_MarqueeTask *new_ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *direction) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_MarqueeTask, initWithASToggleButtonImpl_withNSString_, outer$, direction)
}

ASToggleButtonImpl_MarqueeTask *create_ASToggleButtonImpl_MarqueeTask_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *direction) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_MarqueeTask, initWithASToggleButtonImpl_withNSString_, outer$, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_MarqueeTask)

@implementation ASToggleButtonImpl_MarqueeTask_$Lambda$1

- (void)run {
  if (!this$0_->cancel_) {
    [this$0_->this$0_ applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"ellipsize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(val$numberOfBlankSpaces_), JavaLangInteger_valueOfWithInt_(this$0_->slideLength_), this$0_->direction_ } count:3 type:NSObject_class_()]];
    ASToggleButtonImpl_schedule(this$0_->this$0_);
  }
}

@end

void ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(ASToggleButtonImpl_MarqueeTask_$Lambda$1 *self, ASToggleButtonImpl_MarqueeTask *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$numberOfBlankSpaces_ = capture$0;
  NSObject_init(self);
}

ASToggleButtonImpl_MarqueeTask_$Lambda$1 *new_ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(ASToggleButtonImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_MarqueeTask_$Lambda$1, initWithASToggleButtonImpl_MarqueeTask_withInt_, outer$, capture$0)
}

ASToggleButtonImpl_MarqueeTask_$Lambda$1 *create_ASToggleButtonImpl_MarqueeTask_$Lambda$1_initWithASToggleButtonImpl_MarqueeTask_withInt_(ASToggleButtonImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_MarqueeTask_$Lambda$1, initWithASToggleButtonImpl_MarqueeTask_withInt_, outer$, capture$0)
}

@implementation ASToggleButtonImpl_DellocHandler

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$
                              withNSString:(NSString *)type {
  ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASToggleButtonImpl_cancelTimer(this$0_);
  this$0_->isDisposed_ = true;
}

- (void)__javaClone:(ASToggleButtonImpl_DellocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToggleButtonImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToggleButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToggleButtonImpl;LNSString;", "doPerform", "LNSObject;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_DellocHandler = { "DellocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_DellocHandler;
}

@end

void ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl_DellocHandler *self, ASToggleButtonImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASToggleButtonImpl_DellocHandler *new_ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_DellocHandler, initWithASToggleButtonImpl_withNSString_, outer$, type)
}

ASToggleButtonImpl_DellocHandler *create_ASToggleButtonImpl_DellocHandler_initWithASToggleButtonImpl_withNSString_(ASToggleButtonImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_DellocHandler, initWithASToggleButtonImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_DellocHandler)

@implementation ASToggleButtonImpl_OnCheckedChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onCheckedChangedWithADCompoundButton:(ADCompoundButton *)buttonView
                                 withBoolean:(jboolean)isChecked {
  if (action_ == nil || [action_ isEqual:@"onCheckedChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onCheckedChange"];
    id<JavaUtilMap> obj = [self getOnCheckedChangeEventObjWithADCompoundButton:buttonView withBoolean:isChecked];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ buttonView, JavaLangBoolean_valueOfWithBoolean_(isChecked) } count:2 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnCheckedChangeEventObjWithADCompoundButton:(ADCompoundButton *)buttonView
                                                      withBoolean:(jboolean)isChecked {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"checkedchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"isChecked", JavaLangBoolean_valueOfWithBoolean_(isChecked));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onCheckedChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onCheckedChangedWithADCompoundButton:withBoolean:);
  methods[4].selector = @selector(getOnCheckedChangeEventObjWithADCompoundButton:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onCheckedChanged", "LADCompoundButton;Z", "getOnCheckedChangeEventObj", "(Lr/android/widget/CompoundButton;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASToggleButtonImpl;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_OnCheckedChangeListener = { "OnCheckedChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_OnCheckedChangeListener;
}

@end

void ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(ASToggleButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASToggleButtonImpl_OnCheckedChangeListener *new_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASToggleButtonImpl_OnCheckedChangeListener *create_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(ASToggleButtonImpl_OnCheckedChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASToggleButtonImpl_OnCheckedChangeListener *new_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASToggleButtonImpl_OnCheckedChangeListener *create_ASToggleButtonImpl_OnCheckedChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_OnCheckedChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_OnCheckedChangeListener)

@implementation ASToggleButtonImpl_ToggleButtonCommandBuilder

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$ {
  ASToggleButtonImpl_ToggleButtonCommandBuilder_initWithASToggleButtonImpl_(self, outer$);
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setOnCheckedChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onCheckedChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetChecked {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"checked"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isChecked {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"checked"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setCheckedWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"checked"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetTextOn {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textOn"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextOn {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textOn"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextOnWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textOn"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetTextOff {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textOff"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextOff {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textOff"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextOffWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textOff"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextAllCapsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAllCaps"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setSingleLineWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"singleLine"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetEllipsize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getEllipsize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setEllipsizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetJustificationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getJustificationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setJustificationModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setScrollHorizontallyWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollHorizontally"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetShadowDx {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDx"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShadowDx {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDx"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setShadowDxWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDx"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetShadowDy {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDy"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShadowDy {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDy"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setShadowDyWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowDy"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetShadowColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getShadowColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setShadowColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"shadowColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawablePaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setDrawableTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMinLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMaxLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMinHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMaxEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMinEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ems"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)tryGetMarqueeRepeatLimit {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMarqueeRepeatLimit {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMarqueeRepeatLimitWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"editable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setMaxLengthWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTypefaceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"typeface"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setFontFamilyWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fontFamily"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setTextFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASToggleButtonImpl_ToggleButtonCommandBuilder *)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 6, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 7, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 8, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 9, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 10, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 11, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 30, 29, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 39, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 40, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 41, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 43, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 44, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 45, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 46, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 47, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 48, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 49, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 50, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 51, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 52, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 53, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 54, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 55, 2, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 56, 42, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 57, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 58, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 59, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 60, 4, -1, -1, -1, -1 },
    { NULL, "LASToggleButtonImpl_ToggleButtonCommandBuilder;", 0x1, 61, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToggleButtonImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(setOnCheckedChangeWithNSString:);
  methods[3].selector = @selector(tryGetChecked);
  methods[4].selector = @selector(isChecked);
  methods[5].selector = @selector(setCheckedWithBoolean:);
  methods[6].selector = @selector(tryGetTextOn);
  methods[7].selector = @selector(getTextOn);
  methods[8].selector = @selector(setTextOnWithNSString:);
  methods[9].selector = @selector(tryGetTextOff);
  methods[10].selector = @selector(getTextOff);
  methods[11].selector = @selector(setTextOffWithNSString:);
  methods[12].selector = @selector(tryGetText);
  methods[13].selector = @selector(getText);
  methods[14].selector = @selector(setTextWithNSString:);
  methods[15].selector = @selector(tryGetGravity);
  methods[16].selector = @selector(getGravity);
  methods[17].selector = @selector(setGravityWithNSString:);
  methods[18].selector = @selector(tryGetTextSize);
  methods[19].selector = @selector(getTextSize);
  methods[20].selector = @selector(setTextSizeWithNSString:);
  methods[21].selector = @selector(setPaddingWithNSString:);
  methods[22].selector = @selector(tryGetPaddingBottom);
  methods[23].selector = @selector(getPaddingBottom);
  methods[24].selector = @selector(setPaddingBottomWithNSString:);
  methods[25].selector = @selector(tryGetPaddingRight);
  methods[26].selector = @selector(getPaddingRight);
  methods[27].selector = @selector(setPaddingRightWithNSString:);
  methods[28].selector = @selector(tryGetPaddingLeft);
  methods[29].selector = @selector(getPaddingLeft);
  methods[30].selector = @selector(setPaddingLeftWithNSString:);
  methods[31].selector = @selector(tryGetPaddingStart);
  methods[32].selector = @selector(getPaddingStart);
  methods[33].selector = @selector(setPaddingStartWithNSString:);
  methods[34].selector = @selector(tryGetPaddingEnd);
  methods[35].selector = @selector(getPaddingEnd);
  methods[36].selector = @selector(setPaddingEndWithNSString:);
  methods[37].selector = @selector(tryGetPaddingTop);
  methods[38].selector = @selector(getPaddingTop);
  methods[39].selector = @selector(setPaddingTopWithNSString:);
  methods[40].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[41].selector = @selector(setPaddingVerticalWithNSString:);
  methods[42].selector = @selector(tryGetTextColor);
  methods[43].selector = @selector(getTextColor);
  methods[44].selector = @selector(setTextColorWithNSString:);
  methods[45].selector = @selector(setTextAllCapsWithBoolean:);
  methods[46].selector = @selector(setSingleLineWithBoolean:);
  methods[47].selector = @selector(tryGetEllipsize);
  methods[48].selector = @selector(getEllipsize);
  methods[49].selector = @selector(setEllipsizeWithNSString:);
  methods[50].selector = @selector(tryGetFirstBaselineToTopHeight);
  methods[51].selector = @selector(getFirstBaselineToTopHeight);
  methods[52].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[53].selector = @selector(tryGetLastBaselineToBottomHeight);
  methods[54].selector = @selector(getLastBaselineToBottomHeight);
  methods[55].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[56].selector = @selector(tryGetJustificationMode);
  methods[57].selector = @selector(getJustificationMode);
  methods[58].selector = @selector(setJustificationModeWithNSString:);
  methods[59].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[60].selector = @selector(tryGetShadowDx);
  methods[61].selector = @selector(getShadowDx);
  methods[62].selector = @selector(setShadowDxWithFloat:);
  methods[63].selector = @selector(tryGetShadowDy);
  methods[64].selector = @selector(getShadowDy);
  methods[65].selector = @selector(setShadowDyWithFloat:);
  methods[66].selector = @selector(tryGetShadowColor);
  methods[67].selector = @selector(getShadowColor);
  methods[68].selector = @selector(setShadowColorWithNSString:);
  methods[69].selector = @selector(setDrawableLeftWithNSString:);
  methods[70].selector = @selector(setDrawableStartWithNSString:);
  methods[71].selector = @selector(setDrawableRightWithNSString:);
  methods[72].selector = @selector(setDrawableEndWithNSString:);
  methods[73].selector = @selector(setDrawableTopWithNSString:);
  methods[74].selector = @selector(setDrawableBottomWithNSString:);
  methods[75].selector = @selector(tryGetDrawablePadding);
  methods[76].selector = @selector(getDrawablePadding);
  methods[77].selector = @selector(setDrawablePaddingWithNSString:);
  methods[78].selector = @selector(setDrawableTintWithNSString:);
  methods[79].selector = @selector(setDrawableTintModeWithNSString:);
  methods[80].selector = @selector(tryGetMinLines);
  methods[81].selector = @selector(getMinLines);
  methods[82].selector = @selector(setMinLinesWithInt:);
  methods[83].selector = @selector(setLinesWithInt:);
  methods[84].selector = @selector(tryGetMaxLines);
  methods[85].selector = @selector(getMaxLines);
  methods[86].selector = @selector(setMaxLinesWithInt:);
  methods[87].selector = @selector(tryGetMinWidth);
  methods[88].selector = @selector(getMinWidth);
  methods[89].selector = @selector(setMinWidthWithNSString:);
  methods[90].selector = @selector(tryGetMinHeight);
  methods[91].selector = @selector(getMinHeight);
  methods[92].selector = @selector(setMinHeightWithNSString:);
  methods[93].selector = @selector(tryGetMaxWidth);
  methods[94].selector = @selector(getMaxWidth);
  methods[95].selector = @selector(setMaxWidthWithNSString:);
  methods[96].selector = @selector(tryGetMaxHeight);
  methods[97].selector = @selector(getMaxHeight);
  methods[98].selector = @selector(setMaxHeightWithNSString:);
  methods[99].selector = @selector(tryGetHeight);
  methods[100].selector = @selector(getHeight);
  methods[101].selector = @selector(setHeightWithNSString:);
  methods[102].selector = @selector(tryGetWidth);
  methods[103].selector = @selector(getWidth);
  methods[104].selector = @selector(setWidthWithNSString:);
  methods[105].selector = @selector(tryGetMaxEms);
  methods[106].selector = @selector(getMaxEms);
  methods[107].selector = @selector(setMaxEmsWithInt:);
  methods[108].selector = @selector(tryGetMinEms);
  methods[109].selector = @selector(getMinEms);
  methods[110].selector = @selector(setMinEmsWithInt:);
  methods[111].selector = @selector(setEmsWithInt:);
  methods[112].selector = @selector(tryGetMarqueeRepeatLimit);
  methods[113].selector = @selector(getMarqueeRepeatLimit);
  methods[114].selector = @selector(setMarqueeRepeatLimitWithNSString:);
  methods[115].selector = @selector(setEditableWithBoolean:);
  methods[116].selector = @selector(setMaxLengthWithInt:);
  methods[117].selector = @selector(setTypefaceWithNSString:);
  methods[118].selector = @selector(setTextStyleWithNSString:);
  methods[119].selector = @selector(setFontFamilyWithNSString:);
  methods[120].selector = @selector(setTextFormatWithNSString:);
  methods[121].selector = @selector(setEnabledWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToggleButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToggleButtonImpl;", "execute", "Z", "setOnCheckedChange", "LNSString;", "setChecked", "setTextOn", "setTextOff", "setText", "setGravity", "setTextSize", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setTextColor", "setTextAllCaps", "setSingleLine", "setEllipsize", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setJustificationMode", "setScrollHorizontally", "setShadowDx", "F", "setShadowDy", "setShadowColor", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setMarqueeRepeatLimit", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setTextFormat", "setEnabled", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/ToggleButtonImpl$ToggleButtonCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_ToggleButtonCommandBuilder = { "ToggleButtonCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 122, 1, 0, -1, -1, 62, -1 };
  return &_ASToggleButtonImpl_ToggleButtonCommandBuilder;
}

@end

void ASToggleButtonImpl_ToggleButtonCommandBuilder_initWithASToggleButtonImpl_(ASToggleButtonImpl_ToggleButtonCommandBuilder *self, ASToggleButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASToggleButtonImpl_ToggleButtonCommandBuilder *new_ASToggleButtonImpl_ToggleButtonCommandBuilder_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_ToggleButtonCommandBuilder, initWithASToggleButtonImpl_, outer$)
}

ASToggleButtonImpl_ToggleButtonCommandBuilder *create_ASToggleButtonImpl_ToggleButtonCommandBuilder_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_ToggleButtonCommandBuilder, initWithASToggleButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_ToggleButtonCommandBuilder)

@implementation ASToggleButtonImpl_ToggleButtonBean

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$ {
  ASToggleButtonImpl_ToggleButtonBean_initWithASToggleButtonImpl_(self, outer$);
  return self;
}

- (void)setOnCheckedChangeWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnCheckedChangeWithNSString:value])) executeWithBoolean:true];
}

- (id)isChecked {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetChecked])) executeWithBoolean:false])) isChecked];
}

- (void)setCheckedWithBoolean:(jboolean)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCheckedWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTextOn {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextOn])) executeWithBoolean:false])) getTextOn];
}

- (void)setTextOnWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextOnWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextOff {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextOff])) executeWithBoolean:false])) getTextOff];
}

- (void)setTextOffWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextOffWithNSString:value])) executeWithBoolean:true];
}

- (id)getText {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetText])) executeWithBoolean:false])) getText];
}

- (void)setTextWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextSize {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextSize])) executeWithBoolean:false])) getTextSize];
}

- (void)setTextSizeWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextColor {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColor])) executeWithBoolean:false])) getTextColor];
}

- (void)setTextColorWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextAllCapsWithBoolean:(jboolean)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextAllCapsWithBoolean:value])) executeWithBoolean:true];
}

- (void)setSingleLineWithBoolean:(jboolean)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSingleLineWithBoolean:value])) executeWithBoolean:true];
}

- (id)getEllipsize {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetEllipsize])) executeWithBoolean:false])) getEllipsize];
}

- (void)setEllipsizeWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEllipsizeWithNSString:value])) executeWithBoolean:true];
}

- (id)getFirstBaselineToTopHeight {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetFirstBaselineToTopHeight])) executeWithBoolean:false])) getFirstBaselineToTopHeight];
}

- (void)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFirstBaselineToTopHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getLastBaselineToBottomHeight {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLastBaselineToBottomHeight])) executeWithBoolean:false])) getLastBaselineToBottomHeight];
}

- (void)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLastBaselineToBottomHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getJustificationMode {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetJustificationMode])) executeWithBoolean:false])) getJustificationMode];
}

- (void)setJustificationModeWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setJustificationModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setScrollHorizontallyWithBoolean:(jboolean)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollHorizontallyWithBoolean:value])) executeWithBoolean:true];
}

- (id)getShadowDx {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShadowDx])) executeWithBoolean:false])) getShadowDx];
}

- (void)setShadowDxWithFloat:(jfloat)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShadowDxWithFloat:value])) executeWithBoolean:true];
}

- (id)getShadowDy {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShadowDy])) executeWithBoolean:false])) getShadowDy];
}

- (void)setShadowDyWithFloat:(jfloat)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShadowDyWithFloat:value])) executeWithBoolean:true];
}

- (id)getShadowColor {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetShadowColor])) executeWithBoolean:false])) getShadowColor];
}

- (void)setShadowColorWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setShadowColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableLeftWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableLeftWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableStartWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableRightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableRightWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableEndWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTopWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableBottomWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getDrawablePadding {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDrawablePadding])) executeWithBoolean:false])) getDrawablePadding];
}

- (void)setDrawablePaddingWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawablePaddingWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintModeWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintModeWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinLines {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinLines])) executeWithBoolean:false])) getMinLines];
}

- (void)setMinLinesWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinLinesWithInt:value])) executeWithBoolean:true];
}

- (void)setLinesWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMaxLines {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxLines])) executeWithBoolean:false])) getMaxLines];
}

- (void)setMaxLinesWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMinWidth {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinWidth])) executeWithBoolean:false])) getMinWidth];
}

- (void)setMinWidthWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinHeight {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinHeight])) executeWithBoolean:false])) getMinHeight];
}

- (void)setMinHeightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getHeight {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHeight])) executeWithBoolean:false])) getHeight];
}

- (void)setHeightWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getWidth {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWidth])) executeWithBoolean:false])) getWidth];
}

- (void)setWidthWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxEms {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxEms])) executeWithBoolean:false])) getMaxEms];
}

- (void)setMaxEmsWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMinEms {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinEms])) executeWithBoolean:false])) getMinEms];
}

- (void)setMinEmsWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEmsWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMarqueeRepeatLimit {
  return [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMarqueeRepeatLimit])) executeWithBoolean:false])) getMarqueeRepeatLimit];
}

- (void)setMarqueeRepeatLimitWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMarqueeRepeatLimitWithNSString:value])) executeWithBoolean:true];
}

- (void)setEditableWithBoolean:(jboolean)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEditableWithBoolean:value])) executeWithBoolean:true];
}

- (void)setMaxLengthWithInt:(jint)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLengthWithInt:value])) executeWithBoolean:true];
}

- (void)setTypefaceWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTypefaceWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextStyleWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFontFamilyWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFontFamilyWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextFormatWithNSString:(NSString *)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextFormatWithNSString:value])) executeWithBoolean:true];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([((ASToggleButtonImpl_ToggleButtonCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 28, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 41, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 41, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 41, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 41, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToggleButtonImpl:);
  methods[1].selector = @selector(setOnCheckedChangeWithNSString:);
  methods[2].selector = @selector(isChecked);
  methods[3].selector = @selector(setCheckedWithBoolean:);
  methods[4].selector = @selector(getTextOn);
  methods[5].selector = @selector(setTextOnWithNSString:);
  methods[6].selector = @selector(getTextOff);
  methods[7].selector = @selector(setTextOffWithNSString:);
  methods[8].selector = @selector(getText);
  methods[9].selector = @selector(setTextWithNSString:);
  methods[10].selector = @selector(getGravity);
  methods[11].selector = @selector(setGravityWithNSString:);
  methods[12].selector = @selector(getTextSize);
  methods[13].selector = @selector(setTextSizeWithNSString:);
  methods[14].selector = @selector(setPaddingWithNSString:);
  methods[15].selector = @selector(getPaddingBottom);
  methods[16].selector = @selector(setPaddingBottomWithNSString:);
  methods[17].selector = @selector(getPaddingRight);
  methods[18].selector = @selector(setPaddingRightWithNSString:);
  methods[19].selector = @selector(getPaddingLeft);
  methods[20].selector = @selector(setPaddingLeftWithNSString:);
  methods[21].selector = @selector(getPaddingStart);
  methods[22].selector = @selector(setPaddingStartWithNSString:);
  methods[23].selector = @selector(getPaddingEnd);
  methods[24].selector = @selector(setPaddingEndWithNSString:);
  methods[25].selector = @selector(getPaddingTop);
  methods[26].selector = @selector(setPaddingTopWithNSString:);
  methods[27].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[28].selector = @selector(setPaddingVerticalWithNSString:);
  methods[29].selector = @selector(getTextColor);
  methods[30].selector = @selector(setTextColorWithNSString:);
  methods[31].selector = @selector(setTextAllCapsWithBoolean:);
  methods[32].selector = @selector(setSingleLineWithBoolean:);
  methods[33].selector = @selector(getEllipsize);
  methods[34].selector = @selector(setEllipsizeWithNSString:);
  methods[35].selector = @selector(getFirstBaselineToTopHeight);
  methods[36].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[37].selector = @selector(getLastBaselineToBottomHeight);
  methods[38].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[39].selector = @selector(getJustificationMode);
  methods[40].selector = @selector(setJustificationModeWithNSString:);
  methods[41].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[42].selector = @selector(getShadowDx);
  methods[43].selector = @selector(setShadowDxWithFloat:);
  methods[44].selector = @selector(getShadowDy);
  methods[45].selector = @selector(setShadowDyWithFloat:);
  methods[46].selector = @selector(getShadowColor);
  methods[47].selector = @selector(setShadowColorWithNSString:);
  methods[48].selector = @selector(setDrawableLeftWithNSString:);
  methods[49].selector = @selector(setDrawableStartWithNSString:);
  methods[50].selector = @selector(setDrawableRightWithNSString:);
  methods[51].selector = @selector(setDrawableEndWithNSString:);
  methods[52].selector = @selector(setDrawableTopWithNSString:);
  methods[53].selector = @selector(setDrawableBottomWithNSString:);
  methods[54].selector = @selector(getDrawablePadding);
  methods[55].selector = @selector(setDrawablePaddingWithNSString:);
  methods[56].selector = @selector(setDrawableTintWithNSString:);
  methods[57].selector = @selector(setDrawableTintModeWithNSString:);
  methods[58].selector = @selector(getMinLines);
  methods[59].selector = @selector(setMinLinesWithInt:);
  methods[60].selector = @selector(setLinesWithInt:);
  methods[61].selector = @selector(getMaxLines);
  methods[62].selector = @selector(setMaxLinesWithInt:);
  methods[63].selector = @selector(getMinWidth);
  methods[64].selector = @selector(setMinWidthWithNSString:);
  methods[65].selector = @selector(getMinHeight);
  methods[66].selector = @selector(setMinHeightWithNSString:);
  methods[67].selector = @selector(getMaxWidth);
  methods[68].selector = @selector(setMaxWidthWithNSString:);
  methods[69].selector = @selector(getMaxHeight);
  methods[70].selector = @selector(setMaxHeightWithNSString:);
  methods[71].selector = @selector(getHeight);
  methods[72].selector = @selector(setHeightWithNSString:);
  methods[73].selector = @selector(getWidth);
  methods[74].selector = @selector(setWidthWithNSString:);
  methods[75].selector = @selector(getMaxEms);
  methods[76].selector = @selector(setMaxEmsWithInt:);
  methods[77].selector = @selector(getMinEms);
  methods[78].selector = @selector(setMinEmsWithInt:);
  methods[79].selector = @selector(setEmsWithInt:);
  methods[80].selector = @selector(getMarqueeRepeatLimit);
  methods[81].selector = @selector(setMarqueeRepeatLimitWithNSString:);
  methods[82].selector = @selector(setEditableWithBoolean:);
  methods[83].selector = @selector(setMaxLengthWithInt:);
  methods[84].selector = @selector(setTypefaceWithNSString:);
  methods[85].selector = @selector(setTextStyleWithNSString:);
  methods[86].selector = @selector(setFontFamilyWithNSString:);
  methods[87].selector = @selector(setTextFormatWithNSString:);
  methods[88].selector = @selector(setEnabledWithBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToggleButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToggleButtonImpl;", "setOnCheckedChange", "LNSString;", "setChecked", "Z", "setTextOn", "setTextOff", "setText", "setGravity", "setTextSize", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setTextColor", "setTextAllCaps", "setSingleLine", "setEllipsize", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setJustificationMode", "setScrollHorizontally", "setShadowDx", "F", "setShadowDy", "setShadowColor", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setMarqueeRepeatLimit", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setTextFormat", "setEnabled" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_ToggleButtonBean = { "ToggleButtonBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 89, 1, 0, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_ToggleButtonBean;
}

@end

void ASToggleButtonImpl_ToggleButtonBean_initWithASToggleButtonImpl_(ASToggleButtonImpl_ToggleButtonBean *self, ASToggleButtonImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASToggleButtonImpl_ToggleButtonBean *new_ASToggleButtonImpl_ToggleButtonBean_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_ToggleButtonBean, initWithASToggleButtonImpl_, outer$)
}

ASToggleButtonImpl_ToggleButtonBean *create_ASToggleButtonImpl_ToggleButtonBean_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_ToggleButtonBean, initWithASToggleButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_ToggleButtonBean)

@implementation ASToggleButtonImpl_StateToggler

- (instancetype)initWithASToggleButtonImpl:(ASToggleButtonImpl *)outer$ {
  ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(self, outer$);
  return self;
}

- (void)onClickWithADView:(ADView *)v {
  ASToggleButtonImpl_toggle(this$0_);
}

- (void)__javaClone:(ASToggleButtonImpl_StateToggler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASToggleButtonImpl:);
  methods[1].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASToggleButtonImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASToggleButtonImpl;", "onClick", "LADView;" };
  static const J2ObjcClassInfo _ASToggleButtonImpl_StateToggler = { "StateToggler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x2, 2, 1, 0, -1, -1, -1, -1 };
  return &_ASToggleButtonImpl_StateToggler;
}

@end

void ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(ASToggleButtonImpl_StateToggler *self, ASToggleButtonImpl *outer$) {
  self->this$0_ = outer$;
  NSObject_init(self);
}

ASToggleButtonImpl_StateToggler *new_ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_NEW_IMPL(ASToggleButtonImpl_StateToggler, initWithASToggleButtonImpl_, outer$)
}

ASToggleButtonImpl_StateToggler *create_ASToggleButtonImpl_StateToggler_initWithASToggleButtonImpl_(ASToggleButtonImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASToggleButtonImpl_StateToggler, initWithASToggleButtonImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASToggleButtonImpl_StateToggler)
