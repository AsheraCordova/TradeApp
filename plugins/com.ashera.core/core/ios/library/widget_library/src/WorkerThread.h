//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\utils\WorkerThread.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_WorkerThread")
#ifdef RESTRICT_WorkerThread
#define INCLUDE_ALL_WorkerThread 0
#else
#define INCLUDE_ALL_WorkerThread 1
#endif
#undef RESTRICT_WorkerThread

#if !defined (ASWorkerThread_) && (INCLUDE_ALL_WorkerThread || defined(INCLUDE_ASWorkerThread))
#define ASWorkerThread_

#define RESTRICT_JavaLangRunnable 1
#define INCLUDE_JavaLangRunnable 1
#include "java/lang/Runnable.h"

@class JavaUtilConcurrentCountDownLatch;
@protocol JavaUtilMap;

@interface ASWorkerThread : NSObject < JavaLangRunnable >

#pragma mark Public

- (instancetype)initWithNSString:(NSString *)url
withJavaUtilConcurrentCountDownLatch:(JavaUtilConcurrentCountDownLatch *)countDownLatch
                    withNSString:(NSString *)key
                 withJavaUtilMap:(id<JavaUtilMap>)resultMap;

- (void)run;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(ASWorkerThread)

FOUNDATION_EXPORT void ASWorkerThread_initWithNSString_withJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilMap_(ASWorkerThread *self, NSString *url, JavaUtilConcurrentCountDownLatch *countDownLatch, NSString *key, id<JavaUtilMap> resultMap);

FOUNDATION_EXPORT ASWorkerThread *new_ASWorkerThread_initWithNSString_withJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilMap_(NSString *url, JavaUtilConcurrentCountDownLatch *countDownLatch, NSString *key, id<JavaUtilMap> resultMap) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT ASWorkerThread *create_ASWorkerThread_initWithNSString_withJavaUtilConcurrentCountDownLatch_withNSString_withJavaUtilMap_(NSString *url, JavaUtilConcurrentCountDownLatch *countDownLatch, NSString *key, id<JavaUtilMap> resultMap);

J2OBJC_TYPE_LITERAL_HEADER(ASWorkerThread)

@compatibility_alias ComAsheraUtilsWorkerThread ASWorkerThread;

#endif

#pragma pop_macro("INCLUDE_ALL_WorkerThread")
