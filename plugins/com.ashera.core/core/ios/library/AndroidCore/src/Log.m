//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\util\Log.java
//

#include "J2ObjC_source.h"
#include "Log.h"
#include "java/lang/Throwable.h"


@implementation ADLog

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADLog_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isLoggableWithNSString:(NSString *)tag
                           withInt:(jint)debug2 {
  return ADLog_isLoggableWithNSString_withInt_(tag, debug2);
}

+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)string {
  ADLog_dWithNSString_withNSString_(tag, string);
}

+ (void)eWithNSString:(NSString *)viewLogTag
         withNSString:(NSString *)string
withJavaLangThrowable:(JavaLangThrowable *)e {
  ADLog_eWithNSString_withNSString_withJavaLangThrowable_(viewLogTag, string, e);
}

+ (void)eWithNSString:(NSString *)viewLogTag
         withNSString:(NSString *)string {
  ADLog_eWithNSString_withNSString_(viewLogTag, string);
}

+ (void)iWithNSString:(NSString *)string
         withNSString:(NSString *)string2 {
  ADLog_iWithNSString_withNSString_(string, string2);
}

+ (void)vWithNSString:(NSString *)tag
         withNSString:(NSString *)s {
  ADLog_vWithNSString_withNSString_(tag, s);
}

+ (void)vWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e {
  ADLog_vWithNSString_withNSString_withJavaLangThrowable_(tag, s, e);
}

+ (void)dWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e {
  ADLog_dWithNSString_withNSString_withJavaLangThrowable_(tag, s, e);
}

+ (void)wWithNSString:(NSString *)tag
withJavaLangThrowable:(JavaLangThrowable *)e {
  ADLog_wWithNSString_withJavaLangThrowable_(tag, e);
}

+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e {
  ADLog_wWithNSString_withNSString_withJavaLangThrowable_(tag, s, e);
}

+ (void)wWithNSString:(NSString *)tag
         withNSString:(NSString *)format {
  ADLog_wWithNSString_withNSString_(tag, format);
}

+ (void)iWithNSString:(NSString *)tag
         withNSString:(NSString *)s
withJavaLangThrowable:(JavaLangThrowable *)e {
  ADLog_iWithNSString_withNSString_withJavaLangThrowable_(tag, s, e);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 4, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 7, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 2, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 8, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x9, 6, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isLoggableWithNSString:withInt:);
  methods[2].selector = @selector(dWithNSString:withNSString:);
  methods[3].selector = @selector(eWithNSString:withNSString:withJavaLangThrowable:);
  methods[4].selector = @selector(eWithNSString:withNSString:);
  methods[5].selector = @selector(iWithNSString:withNSString:);
  methods[6].selector = @selector(vWithNSString:withNSString:);
  methods[7].selector = @selector(vWithNSString:withNSString:withJavaLangThrowable:);
  methods[8].selector = @selector(dWithNSString:withNSString:withJavaLangThrowable:);
  methods[9].selector = @selector(wWithNSString:withJavaLangThrowable:);
  methods[10].selector = @selector(wWithNSString:withNSString:withJavaLangThrowable:);
  methods[11].selector = @selector(wWithNSString:withNSString:);
  methods[12].selector = @selector(iWithNSString:withNSString:withJavaLangThrowable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DEBUG", "I", .constantValue.asInt = ADLog_DEBUG, 0x19, -1, -1, -1, -1 },
    { "VERBOSE", "I", .constantValue.asInt = ADLog_VERBOSE, 0x19, -1, -1, -1, -1 },
    { "INFO", "I", .constantValue.asInt = ADLog_INFO, 0x19, -1, -1, -1, -1 },
    { "WARN", "I", .constantValue.asInt = ADLog_WARN, 0x19, -1, -1, -1, -1 },
    { "ERROR", "I", .constantValue.asInt = ADLog_ERROR, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "isLoggable", "LNSString;I", "d", "LNSString;LNSString;", "e", "LNSString;LNSString;LJavaLangThrowable;", "i", "v", "w", "LNSString;LJavaLangThrowable;" };
  static const J2ObjcClassInfo _ADLog = { "Log", "r.android.util", ptrTable, methods, fields, 7, 0x1, 13, 5, -1, -1, -1, -1, -1 };
  return &_ADLog;
}

@end

void ADLog_init(ADLog *self) {
  NSObject_init(self);
}

ADLog *new_ADLog_init() {
  J2OBJC_NEW_IMPL(ADLog, init)
}

ADLog *create_ADLog_init() {
  J2OBJC_CREATE_IMPL(ADLog, init)
}

jboolean ADLog_isLoggableWithNSString_withInt_(NSString *tag, jint debug2) {
  ADLog_initialize();
  return false;
}

void ADLog_dWithNSString_withNSString_(NSString *tag, NSString *string) {
  ADLog_initialize();
}

void ADLog_eWithNSString_withNSString_withJavaLangThrowable_(NSString *viewLogTag, NSString *string, JavaLangThrowable *e) {
  ADLog_initialize();
}

void ADLog_eWithNSString_withNSString_(NSString *viewLogTag, NSString *string) {
  ADLog_initialize();
}

void ADLog_iWithNSString_withNSString_(NSString *string, NSString *string2) {
  ADLog_initialize();
}

void ADLog_vWithNSString_withNSString_(NSString *tag, NSString *s) {
  ADLog_initialize();
}

void ADLog_vWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e) {
  ADLog_initialize();
}

void ADLog_dWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e) {
  ADLog_initialize();
}

void ADLog_wWithNSString_withJavaLangThrowable_(NSString *tag, JavaLangThrowable *e) {
  ADLog_initialize();
}

void ADLog_wWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e) {
  ADLog_initialize();
}

void ADLog_wWithNSString_withNSString_(NSString *tag, NSString *format) {
  ADLog_initialize();
}

void ADLog_iWithNSString_withNSString_withJavaLangThrowable_(NSString *tag, NSString *s, JavaLangThrowable *e) {
  ADLog_initialize();
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADLog)
