//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\view\View.java
//

#include "AccessibilityEvent.h"
#include "ApplicationInfo.h"
#include "Build.h"
#include "Canvas.h"
#include "ColorStateList.h"
#include "Context.h"
#include "Drawable.h"
#include "Gravity.h"
#include "IOSClass.h"
#include "IOSPrimitiveArray.h"
#include "Insets.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "Log.h"
#include "LongSparseLongArray.h"
#include "Rect.h"
#include "RenderNode.h"
#include "Resources.h"
#include "SparseArray.h"
#include "StateSet.h"
#include "View.h"
#include "ViewGroup.h"
#include "ViewParent.h"
#include "java/lang/AbstractMethodError.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/IllegalStateException.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/NullPointerException.h"
#include "java/lang/RuntimeException.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/System.h"
#include "java/util/ArrayList.h"
#include "java/util/Locale.h"

@class ADView_ForegroundInfo;


@interface ADView () {
 @public
  ADSparseArray *mKeyedTags_;
  jint mAutofillViewId_;
  jint mAccessibilityViewId_;
  jint mAccessibilityCursorPosition_;
  jint mOverScrollMode_;
  jboolean mLastIsOpaque_;
  ADInsets *mLayoutInsets_;
  jint mLabelForId_;
  jint mAccessibilityTraversalBeforeId_;
  jint mAccessibilityTraversalAfterId_;
  jboolean mLeftPaddingDefined_;
  jboolean mRightPaddingDefined_;
  ADLongSparseLongArray *mMeasureCache_;
  ADDrawable *mBackground_;
  ADView_TintInfo *mBackgroundTint_;
  ADView_ForegroundInfo *mForegroundInfo_;
  jint mBackgroundResource_;
  jboolean mBackgroundSizeChanged_;
  ADDrawable *mDefaultFocusHighlight_;
  jboolean mDefaultFocusHighlightSizeChanged_;
  IOSIntArray *mDrawableState_;
  jint mNextFocusLeftId_;
  jint mNextFocusRightId_;
  jint mNextFocusUpId_;
  jint mNextFocusDownId_;
  jboolean mHasPerformedLongPress_;
  jboolean mInContextButtonPress_;
  jboolean mIgnoreNextUpEvent_;
  jint mMinHeight_;
  jint mMinWidth_;
  jint mDrawingCacheBackgroundColor_;
  jint mTouchSlop_;
  jint mVerticalScrollbarPosition_;
  jboolean mSendingHoverAccessibilityEvents_;
  ADView_RoundScrollbarRenderer *mRoundScrollbarRenderer_;
  id mCurrentAnimation_;
  ADView *mGhostView_;
  jint verticalScrollbarWidth_;
  jint horizontalScrollbarHeight_;
}

- (void)setPressedWithBoolean:(jboolean)pressed
                    withFloat:(jfloat)x
                    withFloat:(jfloat)y;

- (jboolean)hasSize;

- (jboolean)canTakeFocus;

- (jboolean)skipInvalidate;

- (ADView *)getProjectionReceiver;

- (jboolean)isProjectionReceiver;

- (jboolean)needRtlPropertiesResolution;

- (jboolean)setOpticalFrameWithInt:(jint)left
                           withInt:(jint)top
                           withInt:(jint)right
                           withInt:(jint)bottom;

- (jboolean)hasParentWantsFocus;

- (void)setKeyedTagWithInt:(jint)key
                    withId:(id)tag;

- (void)setMeasuredDimensionRawWithInt:(jint)measuredWidth
                               withInt:(jint)measuredHeight;

- (jboolean)restoreDefaultFocus;

- (void)notifyEnterOrExitForAutoFillIfNeededWithBoolean:(jboolean)b;

- (jfloat)getFinalAlpha;

- (jboolean)hasRtlSupport;

- (jboolean)isRtlCompatibilityMode;

- (void)sizeChangeWithInt:(jint)newWidth
                  withInt:(jint)newHeight
                  withInt:(jint)oldWidth
                  withInt:(jint)oldHeight;

- (void)resetPressedState;

@end

J2OBJC_FIELD_SETTER(ADView, mKeyedTags_, ADSparseArray *)
J2OBJC_FIELD_SETTER(ADView, mLayoutInsets_, ADInsets *)
J2OBJC_FIELD_SETTER(ADView, mMeasureCache_, ADLongSparseLongArray *)
J2OBJC_FIELD_SETTER(ADView, mBackground_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADView, mBackgroundTint_, ADView_TintInfo *)
J2OBJC_FIELD_SETTER(ADView, mForegroundInfo_, ADView_ForegroundInfo *)
J2OBJC_FIELD_SETTER(ADView, mDefaultFocusHighlight_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADView, mDrawableState_, IOSIntArray *)
J2OBJC_FIELD_SETTER(ADView, mRoundScrollbarRenderer_, ADView_RoundScrollbarRenderer *)
J2OBJC_FIELD_SETTER(ADView, mCurrentAnimation_, id)
J2OBJC_FIELD_SETTER(ADView, mGhostView_, ADView *)

inline jboolean ADView_get_DBG(void);
#define ADView_DBG false
J2OBJC_STATIC_FIELD_CONSTANT(ADView, DBG, jboolean)

inline jboolean ADView_get_sCompatibilityDone(void);
inline jboolean ADView_set_sCompatibilityDone(jboolean value);
inline jboolean *ADView_getRef_sCompatibilityDone(void);
static jboolean ADView_sCompatibilityDone = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sCompatibilityDone, jboolean)

inline jboolean ADView_get_sUseBrokenMakeMeasureSpec(void);
inline jboolean ADView_set_sUseBrokenMakeMeasureSpec(jboolean value);
inline jboolean *ADView_getRef_sUseBrokenMakeMeasureSpec(void);
static jboolean ADView_sUseBrokenMakeMeasureSpec = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sUseBrokenMakeMeasureSpec, jboolean)

inline jboolean ADView_get_sIgnoreMeasureCache(void);
inline jboolean ADView_set_sIgnoreMeasureCache(jboolean value);
inline jboolean *ADView_getRef_sIgnoreMeasureCache(void);
static jboolean ADView_sIgnoreMeasureCache = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sIgnoreMeasureCache, jboolean)

inline jboolean ADView_get_sAlwaysRemeasureExactly(void);
inline jboolean ADView_set_sAlwaysRemeasureExactly(jboolean value);
inline jboolean *ADView_getRef_sAlwaysRemeasureExactly(void);
static jboolean ADView_sAlwaysRemeasureExactly = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sAlwaysRemeasureExactly, jboolean)

inline jboolean ADView_get_sLayoutParamsAlwaysChanged(void);
inline jboolean ADView_set_sLayoutParamsAlwaysChanged(jboolean value);
inline jboolean *ADView_getRef_sLayoutParamsAlwaysChanged(void);
static jboolean ADView_sLayoutParamsAlwaysChanged = false;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sLayoutParamsAlwaysChanged, jboolean)

inline jboolean ADView_get_sAutoFocusableOffUIThreadWontNotifyParents(void);
inline jboolean ADView_set_sAutoFocusableOffUIThreadWontNotifyParents(jboolean value);
inline jboolean *ADView_getRef_sAutoFocusableOffUIThreadWontNotifyParents(void);
static jboolean ADView_sAutoFocusableOffUIThreadWontNotifyParents;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sAutoFocusableOffUIThreadWontNotifyParents, jboolean)

inline jboolean ADView_get_sThrowOnInvalidFloatProperties(void);
inline jboolean ADView_set_sThrowOnInvalidFloatProperties(jboolean value);
inline jboolean *ADView_getRef_sThrowOnInvalidFloatProperties(void);
static jboolean ADView_sThrowOnInvalidFloatProperties;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sThrowOnInvalidFloatProperties, jboolean)

inline jboolean ADView_get_sAcceptZeroSizeDragShadow(void);
inline jboolean ADView_set_sAcceptZeroSizeDragShadow(jboolean value);
inline jboolean *ADView_getRef_sAcceptZeroSizeDragShadow(void);
static jboolean ADView_sAcceptZeroSizeDragShadow;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sAcceptZeroSizeDragShadow, jboolean)

inline jint ADView_get_FOCUSABLE_MASK(void);
#define ADView_FOCUSABLE_MASK 17
J2OBJC_STATIC_FIELD_CONSTANT(ADView, FOCUSABLE_MASK, jint)

inline jint ADView_get_FITS_SYSTEM_WINDOWS(void);
#define ADView_FITS_SYSTEM_WINDOWS 2
J2OBJC_STATIC_FIELD_CONSTANT(ADView, FITS_SYSTEM_WINDOWS, jint)

inline jint ADView_get_sNextAccessibilityViewId(void);
inline jint ADView_set_sNextAccessibilityViewId(jint value);
inline jint *ADView_getRef_sNextAccessibilityViewId(void);
static jint ADView_sNextAccessibilityViewId;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sNextAccessibilityViewId, jint)

inline jint ADView_get_PFLAG_PRESSED(void);
#define ADView_PFLAG_PRESSED 16384
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG_PRESSED, jint)

inline jint ADView_get_PFLAG_SAVE_STATE_CALLED(void);
#define ADView_PFLAG_SAVE_STATE_CALLED 131072
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG_SAVE_STATE_CALLED, jint)

inline jint ADView_get_PFLAG_PREPRESSED(void);
#define ADView_PFLAG_PREPRESSED 33554432
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG_PREPRESSED, jint)

inline jint ADView_get_PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH(void);
#define ADView_PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH 134217728
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH, jint)

inline jint ADView_get_PFLAG_HOVERED(void);
#define ADView_PFLAG_HOVERED 268435456
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG_HOVERED, jint)

inline jint ADView_get_PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK(void);
#define ADView_PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK 536870912
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK, jint)

inline jint ADView_get_LAYOUT_DIRECTION_DEFAULT(void);
#define ADView_LAYOUT_DIRECTION_DEFAULT 2
J2OBJC_STATIC_FIELD_CONSTANT(ADView, LAYOUT_DIRECTION_DEFAULT, jint)

inline jint ADView_get_TEXT_DIRECTION_DEFAULT(void);
#define ADView_TEXT_DIRECTION_DEFAULT 0
J2OBJC_STATIC_FIELD_CONSTANT(ADView, TEXT_DIRECTION_DEFAULT, jint)

inline jint ADView_get_TEXT_ALIGNMENT_DEFAULT(void);
#define ADView_TEXT_ALIGNMENT_DEFAULT 1
J2OBJC_STATIC_FIELD_CONSTANT(ADView, TEXT_ALIGNMENT_DEFAULT, jint)

inline jint ADView_get_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT(void);
#define ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT 131072
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT, jint)

inline jint ADView_get_PFLAG3_CLUSTER(void);
#define ADView_PFLAG3_CLUSTER 32768
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_CLUSTER, jint)

inline jint ADView_get_PFLAG3_IS_AUTOFILLED(void);
#define ADView_PFLAG3_IS_AUTOFILLED 65536
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_IS_AUTOFILLED, jint)

inline jint ADView_get_PFLAG3_FINGER_DOWN(void);
#define ADView_PFLAG3_FINGER_DOWN 131072
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_FINGER_DOWN, jint)

inline jint ADView_get_PFLAG3_FOCUSED_BY_DEFAULT(void);
#define ADView_PFLAG3_FOCUSED_BY_DEFAULT 262144
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_FOCUSED_BY_DEFAULT, jint)

inline jint ADView_get_PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE(void);
#define ADView_PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE 8388608
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE, jint)

inline jint ADView_get_PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED(void);
#define ADView_PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED 16777216
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED, jint)

inline jint ADView_get_PFLAG3_NO_REVEAL_ON_FOCUS(void);
#define ADView_PFLAG3_NO_REVEAL_ON_FOCUS 67108864
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_NO_REVEAL_ON_FOCUS, jint)

inline jint ADView_get_PFLAG3_SCREEN_READER_FOCUSABLE(void);
#define ADView_PFLAG3_SCREEN_READER_FOCUSABLE 268435456
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_SCREEN_READER_FOCUSABLE, jint)

inline jint ADView_get_PFLAG3_AGGREGATED_VISIBLE(void);
#define ADView_PFLAG3_AGGREGATED_VISIBLE 536870912
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_AGGREGATED_VISIBLE, jint)

inline jint ADView_get_PFLAG3_AUTOFILLID_EXPLICITLY_SET(void);
#define ADView_PFLAG3_AUTOFILLID_EXPLICITLY_SET 1073741824
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_AUTOFILLID_EXPLICITLY_SET, jint)

inline jint ADView_get_PFLAG3_ACCESSIBILITY_HEADING(void);
#define ADView_PFLAG3_ACCESSIBILITY_HEADING ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PFLAG3_ACCESSIBILITY_HEADING, jint)

inline jint ADView_get_SYSTEM_UI_RESERVED_LEGACY1(void);
#define ADView_SYSTEM_UI_RESERVED_LEGACY1 16384
J2OBJC_STATIC_FIELD_CONSTANT(ADView, SYSTEM_UI_RESERVED_LEGACY1, jint)

inline jint ADView_get_SYSTEM_UI_RESERVED_LEGACY2(void);
#define ADView_SYSTEM_UI_RESERVED_LEGACY2 65536
J2OBJC_STATIC_FIELD_CONSTANT(ADView, SYSTEM_UI_RESERVED_LEGACY2, jint)

inline jint ADView_get_UNDEFINED_PADDING(void);
#define ADView_UNDEFINED_PADDING ((jint) 0x80000000)
J2OBJC_STATIC_FIELD_CONSTANT(ADView, UNDEFINED_PADDING, jint)

inline jboolean ADView_get_sUseDefaultFocusHighlight(void);
inline jboolean ADView_set_sUseDefaultFocusHighlight(jboolean value);
inline jboolean *ADView_getRef_sUseDefaultFocusHighlight(void);
static jboolean ADView_sUseDefaultFocusHighlight;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sUseDefaultFocusHighlight, jboolean)

inline jboolean ADView_get_sCanFocusZeroSized(void);
inline jboolean ADView_set_sCanFocusZeroSized(jboolean value);
inline jboolean *ADView_getRef_sCanFocusZeroSized(void);
static jboolean ADView_sCanFocusZeroSized;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sCanFocusZeroSized, jboolean)

inline jboolean ADView_get_sAlwaysAssignFocus(void);
inline jboolean ADView_set_sAlwaysAssignFocus(jboolean value);
inline jboolean *ADView_getRef_sAlwaysAssignFocus(void);
static jboolean ADView_sAlwaysAssignFocus;
J2OBJC_STATIC_FIELD_PRIMITIVE(ADView, sAlwaysAssignFocus, jboolean)

inline jint ADView_get_PROVIDER_BACKGROUND(void);
#define ADView_PROVIDER_BACKGROUND 0
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PROVIDER_BACKGROUND, jint)

inline jint ADView_get_PROVIDER_NONE(void);
#define ADView_PROVIDER_NONE 1
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PROVIDER_NONE, jint)

inline jint ADView_get_PROVIDER_BOUNDS(void);
#define ADView_PROVIDER_BOUNDS 2
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PROVIDER_BOUNDS, jint)

inline jint ADView_get_PROVIDER_PADDED_BOUNDS(void);
#define ADView_PROVIDER_PADDED_BOUNDS 3
J2OBJC_STATIC_FIELD_CONSTANT(ADView, PROVIDER_PADDED_BOUNDS, jint)

__attribute__((unused)) static void ADView_setPressedWithBoolean_withFloat_withFloat_(ADView *self, jboolean pressed, jfloat x, jfloat y);

__attribute__((unused)) static jboolean ADView_hasSize(ADView *self);

__attribute__((unused)) static jboolean ADView_canTakeFocus(ADView *self);

__attribute__((unused)) static id<ADViewParent> ADView_getParent(ADView *self);

__attribute__((unused)) static jint ADView_getWidth(ADView *self);

__attribute__((unused)) static jint ADView_getHeight(ADView *self);

__attribute__((unused)) static jint ADView_getMeasuredWidth(ADView *self);

__attribute__((unused)) static jint ADView_getMeasuredHeight(ADView *self);

__attribute__((unused)) static jboolean ADView_skipInvalidate(ADView *self);

__attribute__((unused)) static ADView *ADView_getProjectionReceiver(ADView *self);

__attribute__((unused)) static jboolean ADView_isProjectionReceiver(ADView *self);

__attribute__((unused)) static jboolean ADView_needRtlPropertiesResolution(ADView *self);

__attribute__((unused)) static jboolean ADView_setOpticalFrameWithInt_withInt_withInt_withInt_(ADView *self, jint left, jint top, jint right, jint bottom);

__attribute__((unused)) static jboolean ADView_hasParentWantsFocus(ADView *self);

__attribute__((unused)) static IOSIntArray *ADView_getDrawableState(ADView *self);

__attribute__((unused)) static void ADView_setKeyedTagWithInt_withId_(ADView *self, jint key, id tag);

__attribute__((unused)) static void ADView_setMeasuredDimensionWithInt_withInt_(ADView *self, jint measuredWidth, jint measuredHeight);

__attribute__((unused)) static void ADView_setMeasuredDimensionRawWithInt_withInt_(ADView *self, jint measuredWidth, jint measuredHeight);

__attribute__((unused)) static jboolean ADView_restoreDefaultFocus(ADView *self);

__attribute__((unused)) static void ADView_notifyEnterOrExitForAutoFillIfNeededWithBoolean_(ADView *self, jboolean b);

__attribute__((unused)) static jfloat ADView_getFinalAlpha(ADView *self);

__attribute__((unused)) static jboolean ADView_hasRtlSupport(ADView *self);

__attribute__((unused)) static jboolean ADView_isRtlCompatibilityMode(ADView *self);

__attribute__((unused)) static void ADView_sizeChangeWithInt_withInt_withInt_withInt_(ADView *self, jint newWidth, jint newHeight, jint oldWidth, jint oldHeight);

__attribute__((unused)) static void ADView_resetPressedState(ADView *self);

@interface ADView_ForegroundInfo : NSObject {
 @public
  ADDrawable *mDrawable_;
  ADView_TintInfo *mTintInfo_;
  jint mGravity_;
  jboolean mInsidePadding_;
  jboolean mBoundsChanged_;
  ADRect *mSelfBounds_;
  ADRect *mOverlayBounds_;
}

- (instancetype)init;

@end

J2OBJC_EMPTY_STATIC_INIT(ADView_ForegroundInfo)

J2OBJC_FIELD_SETTER(ADView_ForegroundInfo, mDrawable_, ADDrawable *)
J2OBJC_FIELD_SETTER(ADView_ForegroundInfo, mTintInfo_, ADView_TintInfo *)
J2OBJC_FIELD_SETTER(ADView_ForegroundInfo, mSelfBounds_, ADRect *)
J2OBJC_FIELD_SETTER(ADView_ForegroundInfo, mOverlayBounds_, ADRect *)

__attribute__((unused)) static void ADView_ForegroundInfo_init(ADView_ForegroundInfo *self);

__attribute__((unused)) static ADView_ForegroundInfo *new_ADView_ForegroundInfo_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADView_ForegroundInfo *create_ADView_ForegroundInfo_init(void);

J2OBJC_TYPE_LITERAL_HEADER(ADView_ForegroundInfo)

@interface ADView_OnScrollChangeListener : NSObject

@end

inline jint ADView_MeasureSpec_get_MODE_SHIFT(void);
#define ADView_MeasureSpec_MODE_SHIFT 30
J2OBJC_STATIC_FIELD_CONSTANT(ADView_MeasureSpec, MODE_SHIFT, jint)

inline jint ADView_MeasureSpec_get_MODE_MASK(void);
#define ADView_MeasureSpec_MODE_MASK -1073741824
J2OBJC_STATIC_FIELD_CONSTANT(ADView_MeasureSpec, MODE_MASK, jint)

@interface ADView_OnKeyListener : NSObject

@end

@interface ADView_OnTouchListener : NSObject

@end

@interface ADView_OnHoverListener : NSObject

@end

@interface ADView_OnLongClickListener : NSObject

@end

@interface ADView_OnDragListener : NSObject

@end

@interface ADView_OnFocusChangeListener : NSObject

@end

@interface ADView_OnClickListener : NSObject

@end

@interface ADView_OnContextClickListener : NSObject

@end

@interface ADView_MotionEvent () {
 @public
  jint x_;
  jint y_;
  jint rawX_;
  jint rawY_;
  jint action_;
}

@end

@interface ADView_DragEvent () {
 @public
  jint x_;
  jint y_;
  jint action_;
  NSString *clipData_;
}

@end

J2OBJC_FIELD_SETTER(ADView_DragEvent, clipData_, NSString *)

jboolean ADView_DEBUG_DRAW = false;
NSString *ADView_VIEW_LOG_TAG = @"View";
jboolean ADView_mDebugViewAttributes = false;
jboolean ADView_sUseZeroUnspecifiedMeasureSpec = false;
jboolean ADView_sTextureViewIgnoresDrawableSetters = false;
jboolean ADView_sPreserveMarginParamsInLayoutParamConversion;
jboolean ADView_sCascadedDragDrop;
jboolean ADView_sHasFocusableExcludeAutoFocusable;

@implementation ADView

- (ADView_ListenerInfo *)getListenerInfo {
  if (mListenerInfo_ != nil) {
    return mListenerInfo_;
  }
  JreStrongAssignAndConsume(&mListenerInfo_, new_ADView_ListenerInfo_initWithADView_(self));
  return mListenerInfo_;
}

- (void)setOnKeyListenerWithADView_OnKeyListener:(id<ADView_OnKeyListener>)l {
  JreStrongAssign(&((ADView_ListenerInfo *) nil_chk([self getListenerInfo]))->mOnKeyListener_, l);
}

- (jboolean)isFocused {
  return (mPrivateFlags_ & ADView_PFLAG_FOCUSED) != 0;
}

- (jboolean)isShown {
  ADView *current = self;
  do {
    if ((current->mViewFlags_ & ADView_VISIBILITY_MASK) != ADView_VISIBLE) {
      return false;
    }
    id<ADViewParent> parent = JreRetainedLocalValue(current->mParent_);
    if (parent == nil) {
      return false;
    }
    if (!([parent isKindOfClass:[ADView class]])) {
      return true;
    }
    current = (ADView *) cast_chk(parent, [ADView class]);
  }
  while (current != nil);
  return false;
}

- (jint)getVisibility {
  return mViewFlags_ & ADView_VISIBILITY_MASK;
}

- (void)setVisibilityWithInt:(jint)visibility {
  [self setFlagsWithInt:visibility withInt:ADView_VISIBILITY_MASK];
}

- (jboolean)isEnabled {
  return (mViewFlags_ & ADView_ENABLED_MASK) == ADView_ENABLED;
}

- (void)setEnabledWithBoolean:(jboolean)enabled {
  if (enabled == [self isEnabled]) return;
  [self setFlagsWithInt:enabled ? ADView_ENABLED : ADView_DISABLED withInt:ADView_ENABLED_MASK];
  [self refreshDrawableState];
  [self invalidateWithBoolean:true];
  if (!enabled) {
    [self cancelPendingInputEvents];
  }
}

- (void)setFocusableWithBoolean:(jboolean)focusable {
  [self setFocusableWithInt:focusable ? ADView_FOCUSABLE : ADView_NOT_FOCUSABLE];
}

- (void)setFocusableWithInt:(jint)focusable {
  if ((focusable & (ADView_FOCUSABLE_AUTO | ADView_FOCUSABLE)) == 0) {
    [self setFlagsWithInt:0 withInt:ADView_FOCUSABLE_IN_TOUCH_MODE];
  }
  [self setFlagsWithInt:focusable withInt:ADView_FOCUSABLE_MASK];
}

- (jint)getRawLayoutDirection {
  return JreRShift32((mPrivateFlags2_ & ADView_PFLAG2_LAYOUT_DIRECTION_MASK), ADView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT);
}

- (void)setLayoutDirectionWithInt:(jint)layoutDirection {
  if ([self getRawLayoutDirection] != layoutDirection) {
    mPrivateFlags2_ &= ~ADView_PFLAG2_LAYOUT_DIRECTION_MASK;
    [self resetRtlProperties];
    mPrivateFlags2_ |= ((JreLShift32(layoutDirection, ADView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT)) & ADView_PFLAG2_LAYOUT_DIRECTION_MASK);
    [self resolveRtlPropertiesIfNeeded];
    [self requestLayout];
    [self invalidateWithBoolean:true];
  }
}

- (jint)getLayoutDirection {
  jint targetSdkVersion = ((ADApplicationInfo *) nil_chk([((ADContext *) nil_chk([self getContext])) getApplicationInfo]))->targetSdkVersion_;
  if (targetSdkVersion < ADBuild_VERSION_CODES_JELLY_BEAN_MR1) {
    mPrivateFlags2_ |= ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED;
    return ADView_LAYOUT_DIRECTION_RESOLVED_DEFAULT;
  }
  return ((mPrivateFlags2_ & ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL) == ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL) ? ADView_LAYOUT_DIRECTION_RTL : ADView_LAYOUT_DIRECTION_LTR;
}

- (jboolean)isLayoutRtl {
  return [self getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL;
}

- (jboolean)isLaidOut {
  return (mPrivateFlags3_ & ADView_PFLAG3_IS_LAID_OUT) == ADView_PFLAG3_IS_LAID_OUT;
}

- (jboolean)isLayoutValid {
  return [self isLaidOut] && ((mPrivateFlags_ & ADView_PFLAG_FORCE_LAYOUT) == 0);
}

- (void)setWillNotDrawWithBoolean:(jboolean)willNotDraw {
  [self setFlagsWithInt:willNotDraw ? ADView_WILL_NOT_DRAW : 0 withInt:ADView_DRAW_MASK];
}

- (jboolean)isClickable {
  return (mViewFlags_ & ADView_CLICKABLE) == ADView_CLICKABLE;
}

- (void)setClickableWithBoolean:(jboolean)clickable {
  [self setFlagsWithInt:clickable ? ADView_CLICKABLE : 0 withInt:ADView_CLICKABLE];
}

- (jboolean)isLongClickable {
  return (mViewFlags_ & ADView_LONG_CLICKABLE) == ADView_LONG_CLICKABLE;
}

- (void)setLongClickableWithBoolean:(jboolean)longClickable {
  [self setFlagsWithInt:longClickable ? ADView_LONG_CLICKABLE : 0 withInt:ADView_LONG_CLICKABLE];
}

- (void)setPressedWithBoolean:(jboolean)pressed
                    withFloat:(jfloat)x
                    withFloat:(jfloat)y {
  ADView_setPressedWithBoolean_withFloat_withFloat_(self, pressed, x, y);
}

- (void)setPressedWithBoolean:(jboolean)pressed {
  jboolean needsRefresh = pressed != ((mPrivateFlags_ & ADView_PFLAG_PRESSED) == ADView_PFLAG_PRESSED);
  if (pressed) {
    mPrivateFlags_ |= ADView_PFLAG_PRESSED;
  }
  else {
    mPrivateFlags_ &= ~ADView_PFLAG_PRESSED;
  }
  if (needsRefresh) {
    [self refreshDrawableState];
  }
  [self dispatchSetPressedWithBoolean:pressed];
}

- (void)dispatchSetPressedWithBoolean:(jboolean)pressed {
}

- (jboolean)isPressed {
  return (mPrivateFlags_ & ADView_PFLAG_PRESSED) == ADView_PFLAG_PRESSED;
}

- (jboolean)isFocusable {
  return ADView_FOCUSABLE == (mViewFlags_ & ADView_FOCUSABLE);
}

- (void)clearParentsWantFocus {
  if ([mParent_ isKindOfClass:[ADView class]]) {
    ((ADView *) nil_chk(((ADView *) mParent_)))->mPrivateFlags_ &= ~ADView_PFLAG_WANTS_FOCUS;
    [((ADView *) nil_chk(((ADView *) mParent_))) clearParentsWantFocus];
  }
}

- (jint)getWindowVisibility {
  return mAttachInfo_ != nil ? mAttachInfo_->mWindowVisibility_ : ADView_GONE;
}

- (jboolean)isHovered {
  return (mPrivateFlags_ & ADView_PFLAG_HOVERED) != 0;
}

- (void)setHoveredWithBoolean:(jboolean)hovered {
  if (hovered) {
    if ((mPrivateFlags_ & ADView_PFLAG_HOVERED) == 0) {
      mPrivateFlags_ |= ADView_PFLAG_HOVERED;
      [self refreshDrawableState];
      [self onHoverChangedWithBoolean:true];
    }
  }
  else {
    if ((mPrivateFlags_ & ADView_PFLAG_HOVERED) != 0) {
      mPrivateFlags_ &= ~ADView_PFLAG_HOVERED;
      [self refreshDrawableState];
      [self onHoverChangedWithBoolean:false];
    }
  }
}

- (void)onHoverChangedWithBoolean:(jboolean)hovered {
}

- (jboolean)hasSize {
  return ADView_hasSize(self);
}

- (jboolean)canTakeFocus {
  return ADView_canTakeFocus(self);
}

- (void)onSizeChangedWithInt:(jint)w
                     withInt:(jint)h
                     withInt:(jint)oldw
                     withInt:(jint)oldh {
}

- (id<ADViewParent>)getParent {
  return ADView_getParent(self);
}

- (jint)getWidth {
  return ADView_getWidth(self);
}

- (jint)getHeight {
  return ADView_getHeight(self);
}

- (jint)getMeasuredWidth {
  return ADView_getMeasuredWidth(self);
}

- (jint)getMeasuredWidthAndState {
  return mMeasuredWidth_;
}

- (jint)getMeasuredHeight {
  return ADView_getMeasuredHeight(self);
}

- (jint)getMeasuredState {
  return (mMeasuredWidth_ & ADView_MEASURED_STATE_MASK) | ((JreRShift32(mMeasuredHeight_, ADView_MEASURED_HEIGHT_STATE_SHIFT)) & (JreRShift32(ADView_MEASURED_STATE_MASK, ADView_MEASURED_HEIGHT_STATE_SHIFT)));
}

- (jint)getTop {
  return mTop_;
}

- (jint)getBottom {
  return mBottom_;
}

- (jint)getLeft {
  return mLeft_;
}

- (jint)getRight {
  return mRight_;
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  if (offset != 0) {
    jboolean matrixIsIdentity = [self hasIdentityMatrix];
    if (matrixIsIdentity) {
      if ([self isHardwareAccelerated]) {
        [self invalidateViewPropertyWithBoolean:false withBoolean:false];
      }
      else {
        id<ADViewParent> p = mParent_;
        if (p != nil && mAttachInfo_ != nil) {
          ADRect *r = mAttachInfo_->mTmpInvalRect_;
          jint minTop;
          jint maxBottom;
          jint yLoc;
          if (offset < 0) {
            minTop = mTop_ + offset;
            maxBottom = mBottom_;
            yLoc = offset;
          }
          else {
            minTop = mTop_;
            maxBottom = mBottom_ + offset;
            yLoc = 0;
          }
          [((ADRect *) nil_chk(r)) setWithInt:0 withInt:yLoc withInt:mRight_ - mLeft_ withInt:maxBottom - minTop];
          [p invalidateChildWithADView:self withADRect:r];
        }
      }
    }
    else {
      [self invalidateViewPropertyWithBoolean:false withBoolean:false];
    }
    mTop_ += offset;
    mBottom_ += offset;
    [((ADRenderNode *) nil_chk(mRenderNode_)) offsetTopAndBottomWithInt:offset];
    if ([self isHardwareAccelerated]) {
      [self invalidateViewPropertyWithBoolean:false withBoolean:false];
      [self invalidateParentIfNeededAndWasQuickRejected];
    }
    else {
      if (!matrixIsIdentity) {
        [self invalidateViewPropertyWithBoolean:false withBoolean:true];
      }
      [self invalidateParentIfNeeded];
    }
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  if (offset != 0) {
    jboolean matrixIsIdentity = [self hasIdentityMatrix];
    if (matrixIsIdentity) {
      if ([self isHardwareAccelerated]) {
        [self invalidateViewPropertyWithBoolean:false withBoolean:false];
      }
      else {
        id<ADViewParent> p = mParent_;
        if (p != nil && mAttachInfo_ != nil) {
          ADRect *r = mAttachInfo_->mTmpInvalRect_;
          jint minLeft;
          jint maxRight;
          if (offset < 0) {
            minLeft = mLeft_ + offset;
            maxRight = mRight_;
          }
          else {
            minLeft = mLeft_;
            maxRight = mRight_ + offset;
          }
          [((ADRect *) nil_chk(r)) setWithInt:0 withInt:0 withInt:maxRight - minLeft withInt:mBottom_ - mTop_];
          [p invalidateChildWithADView:self withADRect:r];
        }
      }
    }
    else {
      [self invalidateViewPropertyWithBoolean:false withBoolean:false];
    }
    mLeft_ += offset;
    mRight_ += offset;
    [((ADRenderNode *) nil_chk(mRenderNode_)) offsetLeftAndRightWithInt:offset];
    if ([self isHardwareAccelerated]) {
      [self invalidateViewPropertyWithBoolean:false withBoolean:false];
      [self invalidateParentIfNeededAndWasQuickRejected];
    }
    else {
      if (!matrixIsIdentity) {
        [self invalidateViewPropertyWithBoolean:false withBoolean:true];
      }
      [self invalidateParentIfNeeded];
    }
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
}

- (ADViewGroup_LayoutParams *)getLayoutParams {
  return mLayoutParams_;
}

- (void)setLayoutParamsWithADViewGroup_LayoutParams:(ADViewGroup_LayoutParams *)params {
  if (params == nil) {
    @throw create_JavaLangNullPointerException_initWithNSString_(@"Layout parameters cannot be null");
  }
  JreStrongAssign(&mLayoutParams_, params);
  [self resolveLayoutParams];
  if ([mParent_ isKindOfClass:[ADViewGroup class]]) {
    [((ADViewGroup *) nil_chk(((ADViewGroup *) mParent_))) onSetLayoutParamsWithADView:self withADViewGroup_LayoutParams:params];
  }
  [self requestLayout];
}

- (void)resolveLayoutParams {
  if (mLayoutParams_ != nil) {
    [mLayoutParams_ resolveLayoutDirectionWithInt:[self getLayoutDirection]];
  }
}

- (jboolean)skipInvalidate {
  return ADView_skipInvalidate(self);
}

- (void)invalidateWithADRect:(ADRect *)dirty {
  jint scrollX = mScrollX_;
  jint scrollY = mScrollY_;
  [self invalidateInternalWithInt:((ADRect *) nil_chk(dirty))->left_ - scrollX withInt:dirty->top_ - scrollY withInt:dirty->right_ - scrollX withInt:dirty->bottom_ - scrollY withBoolean:true withBoolean:false];
}

- (void)invalidateWithInt:(jint)l
                  withInt:(jint)t
                  withInt:(jint)r
                  withInt:(jint)b {
  jint scrollX = mScrollX_;
  jint scrollY = mScrollY_;
  [self invalidateInternalWithInt:l - scrollX withInt:t - scrollY withInt:r - scrollX withInt:b - scrollY withBoolean:true withBoolean:false];
}

- (void)invalidate {
  [self invalidateWithBoolean:true];
}

- (void)invalidateWithBoolean:(jboolean)invalidateCache {
  [self invalidateInternalWithInt:0 withInt:0 withInt:mRight_ - mLeft_ withInt:mBottom_ - mTop_ withBoolean:invalidateCache withBoolean:true];
}

- (void)invalidateInternalWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b
                      withBoolean:(jboolean)invalidateCache
                      withBoolean:(jboolean)fullInvalidate {
  if (mGhostView_ != nil) {
    [mGhostView_ invalidateWithBoolean:true];
    return;
  }
  if (ADView_skipInvalidate(self)) {
    return;
  }
  if ((mPrivateFlags_ & (ADView_PFLAG_DRAWN | ADView_PFLAG_HAS_BOUNDS)) == (ADView_PFLAG_DRAWN | ADView_PFLAG_HAS_BOUNDS) || (invalidateCache && (mPrivateFlags_ & ADView_PFLAG_DRAWING_CACHE_VALID) == ADView_PFLAG_DRAWING_CACHE_VALID) || (mPrivateFlags_ & ADView_PFLAG_INVALIDATED) != ADView_PFLAG_INVALIDATED || (fullInvalidate && [self isOpaque] != mLastIsOpaque_)) {
    if (fullInvalidate) {
      mLastIsOpaque_ = [self isOpaque];
      mPrivateFlags_ &= ~ADView_PFLAG_DRAWN;
    }
    mPrivateFlags_ |= ADView_PFLAG_DIRTY;
    if (invalidateCache) {
      mPrivateFlags_ |= ADView_PFLAG_INVALIDATED;
      mPrivateFlags_ &= ~ADView_PFLAG_DRAWING_CACHE_VALID;
    }
    ADView_AttachInfo *ai = mAttachInfo_;
    id<ADViewParent> p = mParent_;
    if (p != nil && ai != nil && l < r && t < b) {
      ADRect *damage = ai->mTmpInvalRect_;
      [((ADRect *) nil_chk(damage)) setWithInt:l withInt:t withInt:r withInt:b];
      [p invalidateChildWithADView:self withADRect:damage];
    }
    if (mBackground_ != nil && [mBackground_ isProjected]) {
      ADView *receiver = ADView_getProjectionReceiver(self);
      if (receiver != nil) {
        [receiver damageInParent];
      }
    }
  }
}

- (ADView *)getProjectionReceiver {
  return ADView_getProjectionReceiver(self);
}

- (jboolean)isProjectionReceiver {
  return ADView_isProjectionReceiver(self);
}

- (void)invalidateViewPropertyWithBoolean:(jboolean)invalidateParent
                              withBoolean:(jboolean)forceRedraw {
  if (![self isHardwareAccelerated] || ![((ADRenderNode *) nil_chk(mRenderNode_)) isValid] || (mPrivateFlags_ & ADView_PFLAG_DRAW_ANIMATION) != 0) {
    if (invalidateParent) {
      [self invalidateParentCaches];
    }
    if (forceRedraw) {
      mPrivateFlags_ |= ADView_PFLAG_DRAWN;
    }
    [self invalidateWithBoolean:false];
  }
  else {
    [self damageInParent];
  }
}

- (void)invalidateParentCaches {
  if ([mParent_ isKindOfClass:[ADView class]]) {
    ((ADView *) nil_chk(((ADView *) mParent_)))->mPrivateFlags_ |= ADView_PFLAG_INVALIDATED;
  }
}

- (void)invalidateParentIfNeeded {
  if ([self isHardwareAccelerated] && [mParent_ isKindOfClass:[ADView class]]) {
    [((ADView *) nil_chk(((ADView *) cast_chk(mParent_, [ADView class])))) invalidateWithBoolean:true];
  }
}

- (void)invalidateParentIfNeededAndWasQuickRejected {
  if ((mPrivateFlags2_ & ADView_PFLAG2_VIEW_QUICK_REJECTED) != 0) {
    [self invalidateParentIfNeeded];
  }
}

- (jboolean)isOpaque {
  return (mPrivateFlags_ & ADView_PFLAG_OPAQUE_MASK) == ADView_PFLAG_OPAQUE_MASK && ADView_getFinalAlpha(self) >= 1.0f;
}

- (jint)computeHorizontalScrollRange {
  return ADView_getWidth(self);
}

- (jint)computeHorizontalScrollOffset {
  return mScrollX_;
}

- (jint)computeHorizontalScrollExtent {
  return ADView_getWidth(self);
}

- (jint)computeVerticalScrollRange {
  return ADView_getHeight(self);
}

- (jint)computeVerticalScrollOffset {
  return mScrollY_;
}

- (jint)computeVerticalScrollExtent {
  return ADView_getHeight(self);
}

- (jboolean)canScrollHorizontallyWithInt:(jint)direction {
  jint offset = [self computeHorizontalScrollOffset];
  jint range = [self computeHorizontalScrollRange] - [self computeHorizontalScrollExtent];
  if (range == 0) return false;
  if (direction < 0) {
    return offset > 0;
  }
  else {
    return offset < range - 1;
  }
}

- (jboolean)canScrollVerticallyWithInt:(jint)direction {
  jint offset = [self computeVerticalScrollOffset];
  jint range = [self computeVerticalScrollRange] - [self computeVerticalScrollExtent];
  if (range == 0) return false;
  if (direction < 0) {
    return offset > 0;
  }
  else {
    return offset < range - 1;
  }
}

- (void)assignParentWithADViewParent:(id<ADViewParent>)parent {
  if (mParent_ == nil) {
    mParent_ = parent;
  }
  else if (parent == nil) {
    mParent_ = nil;
  }
  else {
    @throw create_JavaLangRuntimeException_initWithNSString_(JreStrcat("$@$", @"view ", self, @" being added, but it already has a parent"));
  }
}

- (jboolean)resolveRtlPropertiesIfNeeded {
  if (!ADView_needRtlPropertiesResolution(self)) return false;
  if (![self isLayoutDirectionResolved]) {
    [self resolveLayoutDirection];
    [self resolveLayoutParams];
  }
  if (![self isTextDirectionResolved]) {
    [self resolveTextDirection];
  }
  if (![self isTextAlignmentResolved]) {
    [self resolveTextAlignment];
  }
  if (![self areDrawablesResolved]) {
    [self resolveDrawables];
  }
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  [self onRtlPropertiesChangedWithInt:[self getLayoutDirection]];
  return true;
}

- (void)resetRtlProperties {
  [self resetResolvedLayoutDirection];
  [self resetResolvedTextDirection];
  [self resetResolvedTextAlignment];
  [self resetResolvedPadding];
  [self resetResolvedDrawables];
}

- (jboolean)needRtlPropertiesResolution {
  return ADView_needRtlPropertiesResolution(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
}

- (jboolean)resolveLayoutDirection {
  mPrivateFlags2_ &= ~ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
  if (ADView_hasRtlSupport(self)) {
    switch (JreRShift32((mPrivateFlags2_ & ADView_PFLAG2_LAYOUT_DIRECTION_MASK), ADView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT)) {
      case ADView_LAYOUT_DIRECTION_INHERIT:
      if (![self canResolveLayoutDirection]) return false;
      @try {
        if (![((id<ADViewParent>) nil_chk(mParent_)) isLayoutDirectionResolved]) return false;
        if ([((id<ADViewParent>) nil_chk(mParent_)) getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL) {
          mPrivateFlags2_ |= ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
        }
      }
      @catch (JavaLangAbstractMethodError *e) {
        ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
      }
      break;
      case ADView_LAYOUT_DIRECTION_RTL:
      mPrivateFlags2_ |= ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
      break;
      case ADView_LAYOUT_DIRECTION_LOCALE:
      if (ADView_LAYOUT_DIRECTION_RTL == ADView_TextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(JavaUtilLocale_getDefault())) {
        mPrivateFlags2_ |= ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL;
      }
      break;
      default:
      ;
    }
  }
  mPrivateFlags2_ |= ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED;
  return true;
}

- (jboolean)canResolveLayoutDirection {
  switch ([self getRawLayoutDirection]) {
    case ADView_LAYOUT_DIRECTION_INHERIT:
    if (mParent_ != nil) {
      @try {
        return [mParent_ canResolveLayoutDirection];
      }
      @catch (JavaLangAbstractMethodError *e) {
        ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
      }
    }
    return false;
    default:
    return true;
  }
}

- (void)resetResolvedLayoutDirection {
  mPrivateFlags2_ &= ~ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK;
}

- (jboolean)isLayoutDirectionInherited {
  return [self getRawLayoutDirection] == ADView_LAYOUT_DIRECTION_INHERIT;
}

- (jboolean)isLayoutDirectionResolved {
  return (mPrivateFlags2_ & ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED) == ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED;
}

- (jboolean)isPaddingResolved {
  return (mPrivateFlags2_ & ADView_PFLAG2_PADDING_RESOLVED) == ADView_PFLAG2_PADDING_RESOLVED;
}

- (void)resolvePadding {
  jint resolvedLayoutDirection = [self getLayoutDirection];
  if (!ADView_isRtlCompatibilityMode(self)) {
    if (mBackground_ != nil && (!mLeftPaddingDefined_ || !mRightPaddingDefined_)) {
      ADRect *padding = JreRetainedLocalValue([((ADView_ThreadLocal *) nil_chk(sThreadLocal_)) get]);
      if (padding == nil) {
        padding = create_ADRect_init();
        [((ADView_ThreadLocal *) nil_chk(sThreadLocal_)) setWithADRect:padding];
      }
      [((ADDrawable *) nil_chk(mBackground_)) getPaddingWithADRect:padding];
      if (!mLeftPaddingDefined_) {
        mUserPaddingLeftInitial_ = padding->left_;
      }
      if (!mRightPaddingDefined_) {
        mUserPaddingRightInitial_ = padding->right_;
      }
    }
    switch (resolvedLayoutDirection) {
      case ADView_LAYOUT_DIRECTION_RTL:
      if (mUserPaddingStart_ != ADView_UNDEFINED_PADDING) {
        mUserPaddingRight_ = mUserPaddingStart_;
      }
      else {
        mUserPaddingRight_ = mUserPaddingRightInitial_;
      }
      if (mUserPaddingEnd_ != ADView_UNDEFINED_PADDING) {
        mUserPaddingLeft_ = mUserPaddingEnd_;
      }
      else {
        mUserPaddingLeft_ = mUserPaddingLeftInitial_;
      }
      break;
      case ADView_LAYOUT_DIRECTION_LTR:
      default:
      if (mUserPaddingStart_ != ADView_UNDEFINED_PADDING) {
        mUserPaddingLeft_ = mUserPaddingStart_;
      }
      else {
        mUserPaddingLeft_ = mUserPaddingLeftInitial_;
      }
      if (mUserPaddingEnd_ != ADView_UNDEFINED_PADDING) {
        mUserPaddingRight_ = mUserPaddingEnd_;
      }
      else {
        mUserPaddingRight_ = mUserPaddingRightInitial_;
      }
    }
    mUserPaddingBottom_ = (mUserPaddingBottom_ >= 0) ? mUserPaddingBottom_ : mPaddingBottom_;
  }
  [self internalSetPaddingWithInt:mUserPaddingLeft_ withInt:mPaddingTop_ withInt:mUserPaddingRight_ withInt:mUserPaddingBottom_];
  [self onRtlPropertiesChangedWithInt:resolvedLayoutDirection];
  mPrivateFlags2_ |= ADView_PFLAG2_PADDING_RESOLVED;
}

- (void)resetResolvedPadding {
  [self resetResolvedPaddingInternal];
}

- (void)resetResolvedPaddingInternal {
  mPrivateFlags2_ &= ~ADView_PFLAG2_PADDING_RESOLVED;
}

- (void)invalidateInheritedLayoutModeWithInt:(jint)layoutModeOfRoot {
}

- (void)setDuplicateParentStateEnabledWithBoolean:(jboolean)enabled {
  [self setFlagsWithInt:enabled ? ADView_DUPLICATE_PARENT_STATE : 0 withInt:ADView_DUPLICATE_PARENT_STATE];
}

- (jboolean)isDuplicateParentStateEnabled {
  return (mViewFlags_ & ADView_DUPLICATE_PARENT_STATE) == ADView_DUPLICATE_PARENT_STATE;
}

- (jboolean)isLayoutRequested {
  return (mPrivateFlags_ & ADView_PFLAG_FORCE_LAYOUT) == ADView_PFLAG_FORCE_LAYOUT;
}

+ (jboolean)isLayoutModeOpticalWithId:(id)o {
  return ADView_isLayoutModeOpticalWithId_(o);
}

- (jboolean)setOpticalFrameWithInt:(jint)left
                           withInt:(jint)top
                           withInt:(jint)right
                           withInt:(jint)bottom {
  return ADView_setOpticalFrameWithInt_withInt_withInt_withInt_(self, left, top, right, bottom);
}

- (void)layoutWithInt:(jint)l
              withInt:(jint)t
              withInt:(jint)r
              withInt:(jint)b {
  if ((mPrivateFlags3_ & ADView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT) != 0) {
    [self onMeasureWithInt:mOldWidthMeasureSpec_ withInt:mOldHeightMeasureSpec_];
    mPrivateFlags3_ &= ~ADView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
  }
  jint oldL = mLeft_;
  jint oldT = mTop_;
  jint oldB = mBottom_;
  jint oldR = mRight_;
  jboolean changed = ADView_isLayoutModeOpticalWithId_(mParent_) ? ADView_setOpticalFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b) : [self setFrameWithInt:l withInt:t withInt:r withInt:b];
  if (changed || (mPrivateFlags_ & ADView_PFLAG_LAYOUT_REQUIRED) == ADView_PFLAG_LAYOUT_REQUIRED) {
    [self onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
    if ([self shouldDrawRoundScrollbar]) {
      if (mRoundScrollbarRenderer_ == nil) {
        JreStrongAssignAndConsume(&mRoundScrollbarRenderer_, new_ADView_RoundScrollbarRenderer_initWithADView_withADView_(self, self));
      }
    }
    else {
      JreStrongAssign(&mRoundScrollbarRenderer_, nil);
    }
    mPrivateFlags_ &= ~ADView_PFLAG_LAYOUT_REQUIRED;
    ADView_ListenerInfo *li = JreRetainedLocalValue(mListenerInfo_);
    if (li != nil && li->mOnLayoutChangeListeners_ != nil) {
      JavaUtilArrayList *listenersCopy = (JavaUtilArrayList *) cast_chk([li->mOnLayoutChangeListeners_ java_clone], [JavaUtilArrayList class]);
      jint numListeners = [((JavaUtilArrayList *) nil_chk(listenersCopy)) size];
      for (jint i = 0; i < numListeners; ++i) {
        [((ADView_OnLayoutChangeListener *) nil_chk([listenersCopy getWithInt:i])) onLayoutChangeWithADView:self withInt:l withInt:t withInt:r withInt:b withInt:oldL withInt:oldT withInt:oldR withInt:oldB];
      }
    }
  }
  jboolean wasLayoutValid = [self isLayoutValid];
  mPrivateFlags_ &= ~ADView_PFLAG_FORCE_LAYOUT;
  mPrivateFlags3_ |= ADView_PFLAG3_IS_LAID_OUT;
  if (!wasLayoutValid && [self isFocused]) {
    mPrivateFlags_ &= ~ADView_PFLAG_WANTS_FOCUS;
    if (ADView_canTakeFocus(self)) {
      [self clearParentsWantFocus];
    }
    else if ([self getViewRootImpl] == nil || ![((ADView_ViewRootImpl *) nil_chk([self getViewRootImpl])) isInLayout]) {
      [self clearFocusInternalWithADView:nil withBoolean:true withBoolean:false];
      [self clearParentsWantFocus];
    }
    else if (!ADView_hasParentWantsFocus(self)) {
      [self clearFocusInternalWithADView:nil withBoolean:true withBoolean:false];
    }
  }
  else if ((mPrivateFlags_ & ADView_PFLAG_WANTS_FOCUS) != 0) {
    mPrivateFlags_ &= ~ADView_PFLAG_WANTS_FOCUS;
    ADView *focused = JreRetainedLocalValue([self findFocus]);
    if (focused != nil) {
      if (!ADView_restoreDefaultFocus(self) && !ADView_hasParentWantsFocus(self)) {
        [focused clearFocusInternalWithADView:nil withBoolean:true withBoolean:false];
      }
    }
  }
  if ((mPrivateFlags3_ & ADView_PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT) != 0) {
    mPrivateFlags3_ &= ~ADView_PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT;
    ADView_notifyEnterOrExitForAutoFillIfNeededWithBoolean_(self, true);
  }
}

- (jboolean)hasParentWantsFocus {
  return ADView_hasParentWantsFocus(self);
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
}

- (jboolean)setFrameWithInt:(jint)left
                    withInt:(jint)top
                    withInt:(jint)right
                    withInt:(jint)bottom {
  jboolean changed = false;
  if (mLeft_ != left || mRight_ != right || mTop_ != top || mBottom_ != bottom) {
    changed = true;
    jint drawn = mPrivateFlags_ & ADView_PFLAG_DRAWN;
    jint oldWidth = mRight_ - mLeft_;
    jint oldHeight = mBottom_ - mTop_;
    jint newWidth = right - left;
    jint newHeight = bottom - top;
    jboolean sizeChanged = (newWidth != oldWidth) || (newHeight != oldHeight);
    [self invalidateWithBoolean:sizeChanged];
    mLeft_ = left;
    mTop_ = top;
    mRight_ = right;
    mBottom_ = bottom;
    [((ADRenderNode *) nil_chk(mRenderNode_)) setLeftTopRightBottomWithInt:mLeft_ withInt:mTop_ withInt:mRight_ withInt:mBottom_];
    mPrivateFlags_ |= ADView_PFLAG_HAS_BOUNDS;
    if (sizeChanged) {
      ADView_sizeChangeWithInt_withInt_withInt_withInt_(self, newWidth, newHeight, oldWidth, oldHeight);
    }
    if ((mViewFlags_ & ADView_VISIBILITY_MASK) == ADView_VISIBLE || mGhostView_ != nil) {
      mPrivateFlags_ |= ADView_PFLAG_DRAWN;
      [self invalidateWithBoolean:sizeChanged];
      [self invalidateParentCaches];
    }
    mPrivateFlags_ |= drawn;
    mBackgroundSizeChanged_ = true;
    mDefaultFocusHighlightSizeChanged_ = true;
    if (mForegroundInfo_ != nil) {
      mForegroundInfo_->mBoundsChanged_ = true;
    }
    [self notifySubtreeAccessibilityStateChangedIfNeeded];
  }
  return changed;
}

- (void)resolveDrawables {
  if (![self isLayoutDirectionResolved] && [self getRawLayoutDirection] == ADView_LAYOUT_DIRECTION_INHERIT) {
    return;
  }
  jint layoutDirection = [self isLayoutDirectionResolved] ? [self getLayoutDirection] : [self getRawLayoutDirection];
  if (mBackground_ != nil) {
    [mBackground_ setLayoutDirectionWithInt:layoutDirection];
  }
  if (mForegroundInfo_ != nil && mForegroundInfo_->mDrawable_ != nil) {
    [mForegroundInfo_->mDrawable_ setLayoutDirectionWithInt:layoutDirection];
  }
  if (mDefaultFocusHighlight_ != nil) {
    [mDefaultFocusHighlight_ setLayoutDirectionWithInt:layoutDirection];
  }
  mPrivateFlags2_ |= ADView_PFLAG2_DRAWABLE_RESOLVED;
  [self onResolveDrawablesWithInt:layoutDirection];
}

- (jboolean)areDrawablesResolved {
  return (mPrivateFlags2_ & ADView_PFLAG2_DRAWABLE_RESOLVED) == ADView_PFLAG2_DRAWABLE_RESOLVED;
}

- (void)resetResolvedDrawables {
  [self resetResolvedDrawablesInternal];
}

- (void)resetResolvedDrawablesInternal {
  mPrivateFlags2_ &= ~ADView_PFLAG2_DRAWABLE_RESOLVED;
}

- (void)refreshDrawableState {
  mPrivateFlags_ |= ADView_PFLAG_DRAWABLE_STATE_DIRTY;
  [self drawableStateChanged];
  id<ADViewParent> parent = JreRetainedLocalValue(mParent_);
  if (parent != nil) {
    [parent childDrawableStateChangedWithADView:self];
  }
}

- (IOSIntArray *)getDrawableState {
  return ADView_getDrawableState(self);
}

- (IOSIntArray *)onCreateDrawableStateWithInt:(jint)extraSpace {
  if ((mViewFlags_ & ADView_DUPLICATE_PARENT_STATE) == ADView_DUPLICATE_PARENT_STATE && [mParent_ isKindOfClass:[ADView class]]) {
    return [((ADView *) nil_chk(((ADView *) cast_chk(mParent_, [ADView class])))) onCreateDrawableStateWithInt:extraSpace];
  }
  IOSIntArray *drawableState;
  jint privateFlags = mPrivateFlags_;
  jint viewStateIndex = 0;
  if ((privateFlags & ADView_PFLAG_PRESSED) != 0) viewStateIndex |= ADStateSet_VIEW_STATE_PRESSED;
  if ((mViewFlags_ & ADView_ENABLED_MASK) == ADView_ENABLED) viewStateIndex |= ADStateSet_VIEW_STATE_ENABLED;
  if ([self isFocused]) viewStateIndex |= ADStateSet_VIEW_STATE_FOCUSED;
  if ((privateFlags & ADView_PFLAG_SELECTED) != 0) viewStateIndex |= ADStateSet_VIEW_STATE_SELECTED;
  if ([self hasWindowFocus]) viewStateIndex |= ADStateSet_VIEW_STATE_WINDOW_FOCUSED;
  if ((privateFlags & ADView_PFLAG_ACTIVATED) != 0) viewStateIndex |= ADStateSet_VIEW_STATE_ACTIVATED;
  if (mAttachInfo_ != nil && mAttachInfo_->mHardwareAccelerationRequested_ && ADView_ThreadedRenderer_isAvailable()) {
    viewStateIndex |= ADStateSet_VIEW_STATE_ACCELERATED;
  }
  if ((privateFlags & ADView_PFLAG_HOVERED) != 0) viewStateIndex |= ADStateSet_VIEW_STATE_HOVERED;
  jint privateFlags2 = mPrivateFlags2_;
  if ((privateFlags2 & ADView_PFLAG2_DRAG_CAN_ACCEPT) != 0) {
    viewStateIndex |= ADStateSet_VIEW_STATE_DRAG_CAN_ACCEPT;
  }
  if ((privateFlags2 & ADView_PFLAG2_DRAG_HOVERED) != 0) {
    viewStateIndex |= ADStateSet_VIEW_STATE_DRAG_HOVERED;
  }
  drawableState = ADStateSet_getWithInt_(viewStateIndex);
  if (extraSpace == 0) {
    return drawableState;
  }
  IOSIntArray *fullState;
  if (drawableState != nil) {
    fullState = [IOSIntArray arrayWithLength:drawableState->size_ + extraSpace];
    JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(drawableState, 0, fullState, 0, drawableState->size_);
  }
  else {
    fullState = [IOSIntArray arrayWithLength:extraSpace];
  }
  return fullState;
}

+ (IOSIntArray *)mergeDrawableStatesWithIntArray:(IOSIntArray *)baseState
                                    withIntArray:(IOSIntArray *)additionalState {
  return ADView_mergeDrawableStatesWithIntArray_withIntArray_(baseState, additionalState);
}

- (void)setBackgroundTintListWithADColorStateList:(ADColorStateList *)tint {
  if (mBackgroundTint_ == nil) {
    JreStrongAssignAndConsume(&mBackgroundTint_, new_ADView_TintInfo_initWithADView_(self));
  }
  JreStrongAssign(&mBackgroundTint_->mTintList_, tint);
  mBackgroundTint_->mHasTintList_ = true;
  [self applyBackgroundTint];
}

- (ADColorStateList *)getBackgroundTintList {
  return mBackgroundTint_ != nil ? mBackgroundTint_->mTintList_ : nil;
}

- (ADDrawable *)getForeground {
  return mForegroundInfo_ != nil ? mForegroundInfo_->mDrawable_ : nil;
}

- (void)setForegroundWithADDrawable:(ADDrawable *)foreground {
  if (mForegroundInfo_ == nil) {
    if (foreground == nil) {
      return;
    }
    JreStrongAssignAndConsume(&mForegroundInfo_, new_ADView_ForegroundInfo_init());
  }
  if (foreground == mForegroundInfo_->mDrawable_) {
    return;
  }
  if (mForegroundInfo_->mDrawable_ != nil) {
    if ([self isAttachedToWindow]) {
      [((ADDrawable *) nil_chk(((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mDrawable_)) setVisibleWithBoolean:false withBoolean:false];
    }
    [((ADDrawable *) nil_chk(((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mDrawable_)) setCallbackWithId:nil];
    [self unscheduleDrawableWithId:((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mDrawable_];
  }
  JreStrongAssign(&((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mDrawable_, foreground);
  mForegroundInfo_->mBoundsChanged_ = true;
  if (foreground != nil) {
    if ((mPrivateFlags_ & ADView_PFLAG_SKIP_DRAW) != 0) {
      mPrivateFlags_ &= ~ADView_PFLAG_SKIP_DRAW;
    }
    [foreground setLayoutDirectionWithInt:[self getLayoutDirection]];
    if ([foreground isStateful]) {
      [foreground setStateWithIntArray:ADView_getDrawableState(self)];
    }
    [self applyForegroundTint];
    if ([self isAttachedToWindow]) {
      [foreground setVisibleWithBoolean:[self getWindowVisibility] == ADView_VISIBLE && [self isShown] withBoolean:false];
    }
    [foreground setCallbackWithId:self];
  }
  else if ((mViewFlags_ & ADView_WILL_NOT_DRAW) != 0 && mBackground_ == nil && (mDefaultFocusHighlight_ == nil)) {
    mPrivateFlags_ |= ADView_PFLAG_SKIP_DRAW;
  }
  [self requestLayout];
  [self invalidate];
}

- (jboolean)isForegroundInsidePadding {
  return mForegroundInfo_ != nil ? mForegroundInfo_->mInsidePadding_ : true;
}

- (jint)getForegroundGravity {
  return mForegroundInfo_ != nil ? mForegroundInfo_->mGravity_ : ADGravity_START | ADGravity_TOP;
}

- (void)setForegroundGravityWithInt:(jint)gravity {
  if (mForegroundInfo_ == nil) {
    JreStrongAssignAndConsume(&mForegroundInfo_, new_ADView_ForegroundInfo_init());
  }
  if (mForegroundInfo_->mGravity_ != gravity) {
    if ((gravity & ADGravity_RELATIVE_HORIZONTAL_GRAVITY_MASK) == 0) {
      gravity |= ADGravity_START;
    }
    if ((gravity & ADGravity_VERTICAL_GRAVITY_MASK) == 0) {
      gravity |= ADGravity_TOP;
    }
    mForegroundInfo_->mGravity_ = gravity;
    [self requestLayout];
  }
}

- (void)setForegroundTintListWithADColorStateList:(ADColorStateList *)tint {
  if (mForegroundInfo_ == nil) {
    JreStrongAssignAndConsume(&mForegroundInfo_, new_ADView_ForegroundInfo_init());
  }
  if (mForegroundInfo_->mTintInfo_ == nil) {
    JreStrongAssignAndConsume(&mForegroundInfo_->mTintInfo_, new_ADView_TintInfo_initWithADView_(self));
  }
  JreStrongAssign(&((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mTintInfo_->mTintList_, tint);
  mForegroundInfo_->mTintInfo_->mHasTintList_ = true;
  [self applyForegroundTint];
}

- (ADColorStateList *)getForegroundTintList {
  return mForegroundInfo_ != nil && mForegroundInfo_->mTintInfo_ != nil ? mForegroundInfo_->mTintInfo_->mTintList_ : nil;
}

- (void)setPaddingWithInt:(jint)left
                  withInt:(jint)top
                  withInt:(jint)right
                  withInt:(jint)bottom {
  [self resetResolvedPaddingInternal];
  mUserPaddingStart_ = ADView_UNDEFINED_PADDING;
  mUserPaddingEnd_ = ADView_UNDEFINED_PADDING;
  mUserPaddingLeftInitial_ = left;
  mUserPaddingRightInitial_ = right;
  mLeftPaddingDefined_ = true;
  mRightPaddingDefined_ = true;
  [self internalSetPaddingWithInt:left withInt:top withInt:right withInt:bottom];
}

- (void)internalSetPaddingWithInt:(jint)left
                          withInt:(jint)top
                          withInt:(jint)right
                          withInt:(jint)bottom {
  mUserPaddingLeft_ = left;
  mUserPaddingRight_ = right;
  mUserPaddingBottom_ = bottom;
  jint viewFlags = mViewFlags_;
  jboolean changed = false;
  if ((viewFlags & (ADView_SCROLLBARS_VERTICAL | ADView_SCROLLBARS_HORIZONTAL)) != 0) {
    if ((viewFlags & ADView_SCROLLBARS_VERTICAL) != 0) {
      jint offset = (viewFlags & ADView_SCROLLBARS_INSET_MASK) == 0 ? 0 : [self getVerticalScrollbarWidth];
      switch (mVerticalScrollbarPosition_) {
        case ADView_SCROLLBAR_POSITION_DEFAULT:
        if ([self isLayoutRtl]) {
          left += offset;
        }
        else {
          right += offset;
        }
        break;
        case ADView_SCROLLBAR_POSITION_RIGHT:
        right += offset;
        break;
        case ADView_SCROLLBAR_POSITION_LEFT:
        left += offset;
        break;
      }
    }
    if ((viewFlags & ADView_SCROLLBARS_HORIZONTAL) != 0) {
      bottom += (viewFlags & ADView_SCROLLBARS_INSET_MASK) == 0 ? 0 : [self getHorizontalScrollbarHeight];
    }
  }
  if (mPaddingLeft_ != left) {
    changed = true;
    mPaddingLeft_ = left;
  }
  if (mPaddingTop_ != top) {
    changed = true;
    mPaddingTop_ = top;
  }
  if (mPaddingRight_ != right) {
    changed = true;
    mPaddingRight_ = right;
  }
  if (mPaddingBottom_ != bottom) {
    changed = true;
    mPaddingBottom_ = bottom;
  }
  if (changed) {
    [self requestLayout];
    [self invalidateOutline];
  }
}

- (void)setPaddingRelativeWithInt:(jint)start
                          withInt:(jint)top
                          withInt:(jint)end
                          withInt:(jint)bottom {
  [self resetResolvedPaddingInternal];
  mUserPaddingStart_ = start;
  mUserPaddingEnd_ = end;
  mLeftPaddingDefined_ = true;
  mRightPaddingDefined_ = true;
  switch ([self getLayoutDirection]) {
    case ADView_LAYOUT_DIRECTION_RTL:
    mUserPaddingLeftInitial_ = end;
    mUserPaddingRightInitial_ = start;
    [self internalSetPaddingWithInt:end withInt:top withInt:start withInt:bottom];
    break;
    case ADView_LAYOUT_DIRECTION_LTR:
    default:
    mUserPaddingLeftInitial_ = start;
    mUserPaddingRightInitial_ = end;
    [self internalSetPaddingWithInt:start withInt:top withInt:end withInt:bottom];
  }
}

- (jint)getPaddingTop {
  return mPaddingTop_;
}

- (jint)getPaddingBottom {
  return mPaddingBottom_;
}

- (jint)getPaddingLeft {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return mPaddingLeft_;
}

- (jint)getPaddingStart {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return ([self getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL) ? mPaddingRight_ : mPaddingLeft_;
}

- (jint)getPaddingRight {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return mPaddingRight_;
}

- (jint)getPaddingEnd {
  if (![self isPaddingResolved]) {
    [self resolvePadding];
  }
  return ([self getLayoutDirection] == ADView_LAYOUT_DIRECTION_RTL) ? mPaddingLeft_ : mPaddingRight_;
}

- (ADInsets *)computeOpticalInsets {
  return (mBackground_ == nil) ? JreLoadStatic(ADInsets, NONE) : [((ADDrawable *) nil_chk(mBackground_)) getOpticalInsets];
}

- (ADInsets *)getOpticalInsets {
  if (mLayoutInsets_ == nil) {
    JreStrongAssign(&mLayoutInsets_, [self computeOpticalInsets]);
  }
  return mLayoutInsets_;
}

- (void)setSelectedWithBoolean:(jboolean)selected {
  if (((mPrivateFlags_ & ADView_PFLAG_SELECTED) != 0) != selected) {
    mPrivateFlags_ = (mPrivateFlags_ & ~ADView_PFLAG_SELECTED) | (selected ? ADView_PFLAG_SELECTED : 0);
    if (!selected) ADView_resetPressedState(self);
    [self invalidateWithBoolean:true];
    [self refreshDrawableState];
    [self dispatchSetSelectedWithBoolean:selected];
    if (selected) {
      [self sendAccessibilityEventWithInt:ADAccessibilityEvent_TYPE_VIEW_SELECTED];
    }
    else {
      [self notifyViewAccessibilityStateChangedIfNeededWithInt:ADAccessibilityEvent_CONTENT_CHANGE_TYPE_UNDEFINED];
    }
  }
}

- (void)dispatchSetSelectedWithBoolean:(jboolean)selected {
}

- (jboolean)isSelected {
  return (mPrivateFlags_ & ADView_PFLAG_SELECTED) != 0;
}

- (void)setActivatedWithBoolean:(jboolean)activated {
  if (((mPrivateFlags_ & ADView_PFLAG_ACTIVATED) != 0) != activated) {
    mPrivateFlags_ = (mPrivateFlags_ & ~ADView_PFLAG_ACTIVATED) | (activated ? ADView_PFLAG_ACTIVATED : 0);
    [self invalidateWithBoolean:true];
    [self refreshDrawableState];
    [self dispatchSetActivatedWithBoolean:activated];
  }
}

- (void)dispatchSetActivatedWithBoolean:(jboolean)activated {
}

- (jboolean)isActivated {
  return (mPrivateFlags_ & ADView_PFLAG_ACTIVATED) != 0;
}

- (ADView *)getRootView {
  if (mAttachInfo_ != nil) {
    ADView *v = mAttachInfo_->mRootView_;
    if (v != nil) {
      return v;
    }
  }
  ADView *parent = self;
  while (parent->mParent_ != nil && [parent->mParent_ isKindOfClass:[ADView class]]) {
    parent = (ADView *) cast_chk(parent->mParent_, [ADView class]);
  }
  return parent;
}

- (ADView *)findViewTraversalWithInt:(jint)id_ {
  if (id_ == mID_) {
    return self;
  }
  return nil;
}

- (ADView *)findViewByIdWithInt:(jint)id_ {
  if (id_ == ADView_NO_ID) {
    return nil;
  }
  return [self findViewTraversalWithInt:id_];
}

- (id)getTag {
  return mTag_;
}

- (void)setTagWithId:(id)tag {
  mTag_ = tag;
}

- (id)getTagWithInt:(jint)key {
  if (mKeyedTags_ != nil) return [mKeyedTags_ getWithInt:key];
  return nil;
}

- (void)setTagWithInt:(jint)key
               withId:(id)tag {
  if ((JreURShift32(key, 24)) < 2) {
    @throw create_JavaLangIllegalArgumentException_initWithNSString_(@"The key must be an application-specific resource id.");
  }
  ADView_setKeyedTagWithInt_withId_(self, key, tag);
}

- (void)setKeyedTagWithInt:(jint)key
                    withId:(id)tag {
  ADView_setKeyedTagWithInt_withId_(self, key, tag);
}

- (jint)getBaseline {
  return -1;
}

- (void)requestLayout {
  if (mMeasureCache_ != nil) [mMeasureCache_ clear];
  if (mAttachInfo_ != nil && mAttachInfo_->mViewRequestingLayout_ == nil) {
    ADView_ViewRootImpl *viewRoot = JreRetainedLocalValue([self getViewRootImpl]);
    if (viewRoot != nil && [viewRoot isInLayout]) {
      if (![viewRoot requestLayoutDuringLayoutWithADView:self]) {
        return;
      }
    }
    JreStrongAssign(&((ADView_AttachInfo *) nil_chk(mAttachInfo_))->mViewRequestingLayout_, self);
  }
  mPrivateFlags_ |= ADView_PFLAG_FORCE_LAYOUT;
  mPrivateFlags_ |= ADView_PFLAG_INVALIDATED;
  if (mParent_ != nil && ![mParent_ isLayoutRequested]) {
    [mParent_ requestLayout];
  }
  if (mAttachInfo_ != nil && mAttachInfo_->mViewRequestingLayout_ == self) {
    JreStrongAssign(&mAttachInfo_->mViewRequestingLayout_, nil);
  }
}

- (void)forceLayout {
  if (mMeasureCache_ != nil) [mMeasureCache_ clear];
  mPrivateFlags_ |= ADView_PFLAG_FORCE_LAYOUT;
  mPrivateFlags_ |= ADView_PFLAG_INVALIDATED;
}

- (void)measureWithInt:(jint)widthMeasureSpec
               withInt:(jint)heightMeasureSpec {
  jboolean optical = ADView_isLayoutModeOpticalWithId_(self);
  if (optical != ADView_isLayoutModeOpticalWithId_(mParent_)) {
    ADInsets *insets = JreRetainedLocalValue([self getOpticalInsets]);
    jint oWidth = ((ADInsets *) nil_chk(insets))->left_ + insets->right_;
    jint oHeight = insets->top_ + insets->bottom_;
    widthMeasureSpec = ADView_MeasureSpec_adjustWithInt_withInt_(widthMeasureSpec, optical ? -oWidth : oWidth);
    heightMeasureSpec = ADView_MeasureSpec_adjustWithInt_withInt_(heightMeasureSpec, optical ? -oHeight : oHeight);
  }
  jlong key = (JreLShift64((jlong) widthMeasureSpec, 32)) | ((jlong) heightMeasureSpec & (jlong) 0xffffffffLL);
  if (mMeasureCache_ == nil) JreStrongAssignAndConsume(&mMeasureCache_, new_ADLongSparseLongArray_initWithInt_(2));
  jboolean forceLayout = (mPrivateFlags_ & ADView_PFLAG_FORCE_LAYOUT) == ADView_PFLAG_FORCE_LAYOUT;
  jboolean specChanged = widthMeasureSpec != mOldWidthMeasureSpec_ || heightMeasureSpec != mOldHeightMeasureSpec_;
  jboolean isSpecExactly = ADView_MeasureSpec_getModeWithInt_(widthMeasureSpec) == ADView_MeasureSpec_EXACTLY && ADView_MeasureSpec_getModeWithInt_(heightMeasureSpec) == ADView_MeasureSpec_EXACTLY;
  jboolean matchesSpecSize = ADView_getMeasuredWidth(self) == ADView_MeasureSpec_getSizeWithInt_(widthMeasureSpec) && ADView_getMeasuredHeight(self) == ADView_MeasureSpec_getSizeWithInt_(heightMeasureSpec);
  jboolean needsLayout = specChanged && (ADView_sAlwaysRemeasureExactly || !isSpecExactly || !matchesSpecSize);
  if (forceLayout || needsLayout) {
    mPrivateFlags_ &= ~ADView_PFLAG_MEASURED_DIMENSION_SET;
    [self resolveRtlPropertiesIfNeeded];
    jint cacheIndex = forceLayout ? -1 : [((ADLongSparseLongArray *) nil_chk(mMeasureCache_)) indexOfKeyWithLong:key];
    if (cacheIndex < 0 || ADView_sIgnoreMeasureCache) {
      [self onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
      mPrivateFlags3_ &= ~ADView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    }
    else {
      jlong value = [((ADLongSparseLongArray *) nil_chk(mMeasureCache_)) valueAtWithInt:cacheIndex];
      ADView_setMeasuredDimensionRawWithInt_withInt_(self, (jint) (JreRShift64(value, 32)), (jint) value);
      mPrivateFlags3_ |= ADView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT;
    }
    if ((mPrivateFlags_ & ADView_PFLAG_MEASURED_DIMENSION_SET) != ADView_PFLAG_MEASURED_DIMENSION_SET) {
      @throw create_JavaLangIllegalStateException_initWithNSString_(JreStrcat("$I$$$", @"View with id ", [self getId], @": ", [[self java_getClass] getName], @"#onMeasure() did not set the measured dimension by calling setMeasuredDimension()"));
    }
    mPrivateFlags_ |= ADView_PFLAG_LAYOUT_REQUIRED;
  }
  mOldWidthMeasureSpec_ = widthMeasureSpec;
  mOldHeightMeasureSpec_ = heightMeasureSpec;
  [((ADLongSparseLongArray *) nil_chk(mMeasureCache_)) putWithLong:key withLong:(JreLShift64(((jlong) mMeasuredWidth_), 32)) | ((jlong) mMeasuredHeight_ & (jlong) 0xffffffffLL)];
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  ADView_setMeasuredDimensionWithInt_withInt_(self, ADView_getDefaultSizeWithInt_withInt_([self getSuggestedMinimumWidth], widthMeasureSpec), ADView_getDefaultSizeWithInt_withInt_([self getSuggestedMinimumHeight], heightMeasureSpec));
}

- (void)setMeasuredDimensionWithInt:(jint)measuredWidth
                            withInt:(jint)measuredHeight {
  ADView_setMeasuredDimensionWithInt_withInt_(self, measuredWidth, measuredHeight);
}

- (void)setMeasuredDimensionRawWithInt:(jint)measuredWidth
                               withInt:(jint)measuredHeight {
  ADView_setMeasuredDimensionRawWithInt_withInt_(self, measuredWidth, measuredHeight);
}

+ (jint)combineMeasuredStatesWithInt:(jint)curState
                             withInt:(jint)newState {
  return ADView_combineMeasuredStatesWithInt_withInt_(curState, newState);
}

+ (jint)resolveSizeWithInt:(jint)size
                   withInt:(jint)measureSpec {
  return ADView_resolveSizeWithInt_withInt_(size, measureSpec);
}

+ (jint)resolveSizeAndStateWithInt:(jint)size
                           withInt:(jint)measureSpec
                           withInt:(jint)childMeasuredState {
  return ADView_resolveSizeAndStateWithInt_withInt_withInt_(size, measureSpec, childMeasuredState);
}

+ (jint)getDefaultSizeWithInt:(jint)size
                      withInt:(jint)measureSpec {
  return ADView_getDefaultSizeWithInt_withInt_(size, measureSpec);
}

- (jint)getSuggestedMinimumHeight {
  return (mBackground_ == nil) ? mMinHeight_ : JavaLangMath_maxWithInt_withInt_(mMinHeight_, [((ADDrawable *) nil_chk(mBackground_)) getMinimumHeight]);
}

- (jint)getSuggestedMinimumWidth {
  return (mBackground_ == nil) ? mMinWidth_ : JavaLangMath_maxWithInt_withInt_(mMinWidth_, [((ADDrawable *) nil_chk(mBackground_)) getMinimumWidth]);
}

- (jint)getMinimumHeight {
  return mMinHeight_;
}

- (void)setMinimumHeightWithInt:(jint)minHeight {
  mMinHeight_ = minHeight;
  [self requestLayout];
}

- (jint)getMinimumWidth {
  return mMinWidth_;
}

- (void)setMinimumWidthWithInt:(jint)minWidth {
  mMinWidth_ = minWidth;
  [self requestLayout];
}

- (jint)getRawTextDirection {
  return JreRShift32((mPrivateFlags2_ & ADView_PFLAG2_TEXT_DIRECTION_MASK), ADView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT);
}

- (void)setTextDirectionWithInt:(jint)textDirection {
  if ([self getRawTextDirection] != textDirection) {
    mPrivateFlags2_ &= ~ADView_PFLAG2_TEXT_DIRECTION_MASK;
    [self resetResolvedTextDirection];
    mPrivateFlags2_ |= ((JreLShift32(textDirection, ADView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT)) & ADView_PFLAG2_TEXT_DIRECTION_MASK);
    [self resolveTextDirection];
    [self onRtlPropertiesChangedWithInt:[self getLayoutDirection]];
    [self requestLayout];
    [self invalidateWithBoolean:true];
  }
}

- (jint)getTextDirection {
  return JreRShift32((mPrivateFlags2_ & ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK), ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT);
}

- (jboolean)resolveTextDirection {
  mPrivateFlags2_ &= ~(ADView_PFLAG2_TEXT_DIRECTION_RESOLVED | ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK);
  if (ADView_hasRtlSupport(self)) {
    jint textDirection = [self getRawTextDirection];
    {
      jint parentResolvedDirection;
      switch (textDirection) {
        case ADView_TEXT_DIRECTION_INHERIT:
        if (![self canResolveTextDirection]) {
          mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
          return false;
        }
        @try {
          if (![((id<ADViewParent>) nil_chk(mParent_)) isTextDirectionResolved]) {
            mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
            return false;
          }
        }
        @catch (JavaLangAbstractMethodError *e) {
          ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
          mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED | ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
          return true;
        }
        @try {
          parentResolvedDirection = [((id<ADViewParent>) nil_chk(mParent_)) getTextDirection];
        }
        @catch (JavaLangAbstractMethodError *e) {
          ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
          parentResolvedDirection = ADView_TEXT_DIRECTION_LTR;
        }
        switch (parentResolvedDirection) {
          case ADView_TEXT_DIRECTION_FIRST_STRONG:
          case ADView_TEXT_DIRECTION_ANY_RTL:
          case ADView_TEXT_DIRECTION_LTR:
          case ADView_TEXT_DIRECTION_RTL:
          case ADView_TEXT_DIRECTION_LOCALE:
          case ADView_TEXT_DIRECTION_FIRST_STRONG_LTR:
          case ADView_TEXT_DIRECTION_FIRST_STRONG_RTL:
          mPrivateFlags2_ |= (JreLShift32(parentResolvedDirection, ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT));
          break;
          default:
          mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
        }
        break;
        case ADView_TEXT_DIRECTION_FIRST_STRONG:
        case ADView_TEXT_DIRECTION_ANY_RTL:
        case ADView_TEXT_DIRECTION_LTR:
        case ADView_TEXT_DIRECTION_RTL:
        case ADView_TEXT_DIRECTION_LOCALE:
        case ADView_TEXT_DIRECTION_FIRST_STRONG_LTR:
        case ADView_TEXT_DIRECTION_FIRST_STRONG_RTL:
        mPrivateFlags2_ |= (JreLShift32(textDirection, ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT));
        break;
        default:
        mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
      }
    }
  }
  else {
    mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
  }
  mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED;
  return true;
}

- (jboolean)canResolveTextDirection {
  switch ([self getRawTextDirection]) {
    case ADView_TEXT_DIRECTION_INHERIT:
    if (mParent_ != nil) {
      @try {
        return [mParent_ canResolveTextDirection];
      }
      @catch (JavaLangAbstractMethodError *e) {
        ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
      }
    }
    return false;
    default:
    return true;
  }
}

- (void)resetResolvedTextDirection {
  mPrivateFlags2_ &= ~(ADView_PFLAG2_TEXT_DIRECTION_RESOLVED | ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK);
  mPrivateFlags2_ |= ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT;
}

- (jboolean)isTextDirectionResolved {
  return (mPrivateFlags2_ & ADView_PFLAG2_TEXT_DIRECTION_RESOLVED) == ADView_PFLAG2_TEXT_DIRECTION_RESOLVED;
}

- (jint)getRawTextAlignment {
  return JreRShift32((mPrivateFlags2_ & ADView_PFLAG2_TEXT_ALIGNMENT_MASK), ADView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT);
}

- (void)setTextAlignmentWithInt:(jint)textAlignment {
  if (textAlignment != [self getRawTextAlignment]) {
    mPrivateFlags2_ &= ~ADView_PFLAG2_TEXT_ALIGNMENT_MASK;
    [self resetResolvedTextAlignment];
    mPrivateFlags2_ |= ((JreLShift32(textAlignment, ADView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT)) & ADView_PFLAG2_TEXT_ALIGNMENT_MASK);
    [self resolveTextAlignment];
    [self onRtlPropertiesChangedWithInt:[self getLayoutDirection]];
    [self requestLayout];
    [self invalidateWithBoolean:true];
  }
}

- (jint)getTextAlignment {
  return JreRShift32((mPrivateFlags2_ & ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK), ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT);
}

- (jboolean)resolveTextAlignment {
  mPrivateFlags2_ &= ~(ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED | ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK);
  if (ADView_hasRtlSupport(self)) {
    jint textAlignment = [self getRawTextAlignment];
    {
      jint parentResolvedTextAlignment;
      switch (textAlignment) {
        case ADView_TEXT_ALIGNMENT_INHERIT:
        if (![self canResolveTextAlignment]) {
          mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
          return false;
        }
        @try {
          if (![((id<ADViewParent>) nil_chk(mParent_)) isTextAlignmentResolved]) {
            mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
            return false;
          }
        }
        @catch (JavaLangAbstractMethodError *e) {
          ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
          mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED | ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
          return true;
        }
        @try {
          parentResolvedTextAlignment = [((id<ADViewParent>) nil_chk(mParent_)) getTextAlignment];
        }
        @catch (JavaLangAbstractMethodError *e) {
          ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
          parentResolvedTextAlignment = ADView_TEXT_ALIGNMENT_GRAVITY;
        }
        switch (parentResolvedTextAlignment) {
          case ADView_TEXT_ALIGNMENT_GRAVITY:
          case ADView_TEXT_ALIGNMENT_TEXT_START:
          case ADView_TEXT_ALIGNMENT_TEXT_END:
          case ADView_TEXT_ALIGNMENT_CENTER:
          case ADView_TEXT_ALIGNMENT_VIEW_START:
          case ADView_TEXT_ALIGNMENT_VIEW_END:
          mPrivateFlags2_ |= (JreLShift32(parentResolvedTextAlignment, ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT));
          break;
          default:
          mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
        }
        break;
        case ADView_TEXT_ALIGNMENT_GRAVITY:
        case ADView_TEXT_ALIGNMENT_TEXT_START:
        case ADView_TEXT_ALIGNMENT_TEXT_END:
        case ADView_TEXT_ALIGNMENT_CENTER:
        case ADView_TEXT_ALIGNMENT_VIEW_START:
        case ADView_TEXT_ALIGNMENT_VIEW_END:
        mPrivateFlags2_ |= (JreLShift32(textAlignment, ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT));
        break;
        default:
        mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
      }
    }
  }
  else {
    mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
  }
  mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED;
  return true;
}

- (jboolean)canResolveTextAlignment {
  switch ([self getRawTextAlignment]) {
    case ADView_TEXT_DIRECTION_INHERIT:
    if (mParent_ != nil) {
      @try {
        return [mParent_ canResolveTextAlignment];
      }
      @catch (JavaLangAbstractMethodError *e) {
        ADLog_eWithNSString_withNSString_withJavaLangThrowable_(ADView_VIEW_LOG_TAG, JreStrcat("$$", [[((id<ADViewParent>) nil_chk(mParent_)) java_getClass] getSimpleName], @" does not fully implement ViewParent"), e);
      }
    }
    return false;
    default:
    return true;
  }
}

- (void)resetResolvedTextAlignment {
  mPrivateFlags2_ &= ~(ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED | ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK);
  mPrivateFlags2_ |= ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT;
}

- (jboolean)isTextAlignmentResolved {
  return (mPrivateFlags2_ & ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED) == ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED;
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)onDrawWithADCanvas:(id<ADCanvas>)canvas {
}

- (ADResources *)getResources {
  return create_ADResources_init();
}

- (jboolean)isInEditMode {
  return false;
}

- (jfloat)getAlpha {
  return 0;
}

- (jfloat)getRotation {
  return 0;
}

- (jfloat)getRotationX {
  return 0;
}

- (jfloat)getRotationY {
  return 0;
}

- (jfloat)getScaleX {
  return 0;
}

- (jfloat)getScaleY {
  return 0;
}

- (jfloat)getPivotX {
  return 0;
}

- (jfloat)getPivotY {
  return 0;
}

- (jfloat)getTranslationX {
  return 0;
}

- (jfloat)getTranslationY {
  return 0;
}

- (jfloat)getTranslationZ {
  return 0;
}

- (jfloat)getElevation {
  return 0;
}

- (void)setAlphaWithFloat:(jfloat)alpha {
}

- (void)setRotationWithFloat:(jfloat)rotation {
}

- (void)setRotationXWithFloat:(jfloat)rotationX {
}

- (void)setRotationYWithFloat:(jfloat)rotationY {
}

- (void)setScaleXWithFloat:(jfloat)scaleX {
}

- (void)setScaleYWithFloat:(jfloat)scaleY {
}

- (void)setPivotXWithFloat:(jfloat)transformPivotX {
}

- (void)setPivotYWithFloat:(jfloat)transformPivotY {
}

- (void)setTranslationXWithFloat:(jfloat)translationX {
}

- (void)setTranslationYWithFloat:(jfloat)translationY {
}

- (void)setTranslationZWithFloat:(jfloat)translationZ {
}

- (void)setElevationWithFloat:(jfloat)elevation {
}

- (jboolean)hasUnhandledKeyListener {
  return false;
}

- (jboolean)hasDefaultFocus {
  return false;
}

- (void)clearFocusInternalWithADView:(ADView *)focused
                         withBoolean:(jboolean)propagate
                         withBoolean:(jboolean)refocus {
}

- (jboolean)restoreDefaultFocus {
  return ADView_restoreDefaultFocus(self);
}

- (void)notifyEnterOrExitForAutoFillIfNeededWithBoolean:(jboolean)b {
  ADView_notifyEnterOrExitForAutoFillIfNeededWithBoolean_(self, b);
}

- (jboolean)shouldDrawRoundScrollbar {
  return false;
}

- (void)setBackgroundColorWithInt:(jint)backgroundColor {
}

- (void)requestFocusFromTouch {
}

- (jboolean)requestFocus {
  return false;
}

- (void)setSystemUiVisibilityWithInt:(jint)uiOptions {
}

- (void)setOverScrollModeWithInt:(jint)overScrollNever {
}

- (void)cancelPendingInputEvents {
}

- (jint)getVerticalScrollbarWidth {
  return self->verticalScrollbarWidth_;
}

- (void)setVerticalScrollbarWidthWithInt:(jint)verticalScrollbarWidth {
  self->verticalScrollbarWidth_ = verticalScrollbarWidth;
}

- (jint)getHorizontalScrollbarHeight {
  return self->horizontalScrollbarHeight_;
}

- (void)setHorizontalScrollbarHeightWithInt:(jint)horizontalScrollbarHeight {
  self->horizontalScrollbarHeight_ = horizontalScrollbarHeight;
}

- (jfloat)getFinalAlpha {
  return ADView_getFinalAlpha(self);
}

- (void)setFlagsWithInt:(jint)flags
                withInt:(jint)mask {
  jint old = mViewFlags_;
  mViewFlags_ = (mViewFlags_ & ~mask) | (flags & mask);
  jint changed = mViewFlags_ ^ old;
  if (changed == 0) {
    return;
  }
  jint privateFlags = mPrivateFlags_;
}

- (void)invalidateOutline {
}

- (jboolean)isHardwareAccelerated {
  return false;
}

- (jint)getZ {
  return 0;
}

- (void)damageShadowReceiver {
}

- (void)damageInParent {
}

- (jboolean)hasRtlSupport {
  return ADView_hasRtlSupport(self);
}

- (jboolean)isRtlCompatibilityMode {
  return ADView_isRtlCompatibilityMode(self);
}

- (void)notifySubtreeAccessibilityStateChangedIfNeeded {
}

- (void)sizeChangeWithInt:(jint)newWidth
                  withInt:(jint)newHeight
                  withInt:(jint)oldWidth
                  withInt:(jint)oldHeight {
  ADView_sizeChangeWithInt_withInt_withInt_withInt_(self, newWidth, newHeight, oldWidth, oldHeight);
}

- (void)onResolveDrawablesWithInt:(jint)layoutDirection {
}

- (ADView_ViewRootImpl *)getViewRootImpl {
  return nil;
}

- (jint)getId {
  return mID_;
}

- (void)setIdWithInt:(jint)id_ {
  self->mID_ = id_;
}

- (ADContext *)getContext {
  return create_ADContext_init();
}

- (jboolean)hasFocus {
  return false;
}

- (ADView *)findFocus {
  return nil;
}

- (void)unFocusWithId:(id)obj {
}

- (void)dispatchAttachedToWindowWithADView_AttachInfo:(ADView_AttachInfo *)mAttachInfo2
                                              withInt:(jint)i {
}

- (jboolean)hasTransientState {
  return false;
}

- (void)clearAccessibilityFocus {
}

- (id)getAnimation {
  return nil;
}

- (void)dispatchDetachedFromWindow {
}

- (void)setBackgroundWithADDrawable:(ADDrawable *)background {
  JreStrongAssign(&mBackground_, background);
}

- (ADDrawable *)getBackground {
  return mBackground_;
}

- (jboolean)hasIdentityMatrix {
  return false;
}

- (void)setAccessibilityDelegateWithId:(id)delegate {
}

- (id)getAccessibilityDelegate {
  return nil;
}

- (void)dispatchStartTemporaryDetach {
}

- (void)dispatchFinishTemporaryDetach {
}

- (void)setDrawingCacheBackgroundColorWithId:(id)color {
}

- (jint)getImportantForAccessibility {
  return 999;
}

- (void)setImportantForAccessibilityWithInt:(jint)test {
}

- (void)onStartTemporaryDetach {
}

- (jboolean)clearFocus {
  return false;
}

- (jboolean)isAttachedToWindow {
  return false;
}

- (ADView_AccessibilityNodeProvider *)getAccessibilityNodeProvider {
  return nil;
}

- (void)requestAccessibilityFocus {
}

- (void)onFinishTemporaryDetach {
}

- (id)getWindowToken {
  return nil;
}

- (jboolean)isDrawingCacheEnabled {
  return false;
}

- (void)setDrawingCacheEnabledWithBoolean:(jboolean)b {
}

- (void)jumpDrawablesToCurrentState {
}

- (jboolean)dispatchKeyEventWithADKeyEvent:(ADKeyEvent *)event {
  return false;
}

- (void)applyForegroundTint {
}

- (void)unscheduleDrawableWithId:(id)obj {
}

- (void)drawableStateChanged {
}

- (void)drawableHotspotChangedWithFloat:(jfloat)x
                              withFloat:(jfloat)y {
}

- (jboolean)hasWindowFocus {
  return false;
}

- (void)setFocusedWithBoolean:(jboolean)hovered {
  if (hovered) {
    if ((mPrivateFlags_ & ADView_PFLAG_FOCUSED) == 0) {
      mPrivateFlags_ |= ADView_PFLAG_FOCUSED;
      [self refreshDrawableState];
      [self onFocusChangedWithBoolean:true];
    }
  }
  else {
    if ((mPrivateFlags_ & ADView_PFLAG_FOCUSED) != 0) {
      mPrivateFlags_ &= ~ADView_PFLAG_FOCUSED;
      [self refreshDrawableState];
      [self onFocusChangedWithBoolean:false];
    }
  }
}

- (void)onFocusChangedWithBoolean:(jboolean)focus {
}

- (void)setDragHoveredWithBoolean:(jboolean)hovered {
  if (hovered) {
    if ((mPrivateFlags2_ & ADView_PFLAG2_DRAG_HOVERED) == 0) {
      mPrivateFlags2_ |= ADView_PFLAG2_DRAG_HOVERED;
      [self refreshDrawableState];
      [self onDragHoveredWithBoolean:true];
    }
  }
  else {
    if ((mPrivateFlags2_ & ADView_PFLAG2_DRAG_HOVERED) != 0) {
      mPrivateFlags2_ &= ~ADView_PFLAG2_DRAG_HOVERED;
      [self refreshDrawableState];
      [self onDragHoveredWithBoolean:false];
    }
  }
}

- (void)onDragHoveredWithBoolean:(jboolean)focus {
}

- (void)setDragCanAcceptWithBoolean:(jboolean)hovered {
  if (hovered) {
    if ((mPrivateFlags2_ & ADView_PFLAG2_DRAG_CAN_ACCEPT) == 0) {
      mPrivateFlags2_ |= ADView_PFLAG2_DRAG_CAN_ACCEPT;
      [self refreshDrawableState];
      [self onDragCanAcceptWithBoolean:true];
    }
  }
  else {
    if ((mPrivateFlags2_ & ADView_PFLAG2_DRAG_CAN_ACCEPT) != 0) {
      mPrivateFlags2_ &= ~ADView_PFLAG2_DRAG_CAN_ACCEPT;
      [self refreshDrawableState];
      [self onDragCanAcceptWithBoolean:false];
    }
  }
}

- (void)onDragCanAcceptWithBoolean:(jboolean)focus {
}

- (ADRect *)getForegroundBoundsWithInt:(jint)imageWidth
                               withInt:(jint)imageHeight {
  ADDrawable *foreground = mForegroundInfo_ != nil ? mForegroundInfo_->mDrawable_ : nil;
  if (foreground != nil) {
    ((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mBoundsChanged_ = false;
    ADRect *selfBounds = mForegroundInfo_->mSelfBounds_;
    ADRect *overlayBounds = mForegroundInfo_->mOverlayBounds_;
    if (mForegroundInfo_->mInsidePadding_) {
      [((ADRect *) nil_chk(selfBounds)) setWithInt:0 withInt:0 withInt:ADView_getWidth(self) withInt:ADView_getHeight(self)];
    }
    else {
      [((ADRect *) nil_chk(selfBounds)) setWithInt:[self getPaddingLeft] withInt:[self getPaddingTop] withInt:ADView_getWidth(self) - [self getPaddingRight] withInt:ADView_getHeight(self) - [self getPaddingBottom]];
    }
    jint ld = [self getLayoutDirection];
    ADGravity_applyWithInt_withInt_withInt_withADRect_withADRect_withInt_(((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mGravity_, imageWidth, imageHeight, selfBounds, overlayBounds, ld);
    return ((ADView_ForegroundInfo *) nil_chk(mForegroundInfo_))->mOverlayBounds_;
  }
  return nil;
}

- (void)onAttachedToWindow {
}

- (void)applyBackgroundTint {
}

- (jboolean)hasOnKeyListener {
  return [self getOnKeyListener] != nil;
}

- (id<ADView_OnKeyListener>)getOnKeyListener {
  if (mListenerInfo_ != nil) {
    return mListenerInfo_->mOnKeyListener_;
  }
  return nil;
}

- (void)invokeKeyListenerDownWithInt:(jint)keyCode {
  id<ADView_OnKeyListener> onKeyListener = JreRetainedLocalValue([self getOnKeyListener]);
  if (onKeyListener != nil) {
    ADKeyEvent *keyEvent = create_ADKeyEvent_init();
    [keyEvent setActionWithInt:ADKeyEvent_ACTION_DOWN];
    [keyEvent setKeyCodeWithInt:keyCode];
    [onKeyListener onKeyWithADView:self withInt:keyCode withADKeyEvent:keyEvent];
  }
}

- (void)invokeKeyListenerUpWithInt:(jint)keyCode {
}

- (void)resetPressedState {
  ADView_resetPressedState(self);
}

- (void)sendAccessibilityEventWithInt:(jint)eventType {
}

- (void)notifyViewAccessibilityStateChangedIfNeededWithInt:(jint)changeType {
}

- (void)__javaClone:(ADView *)original {
  [super __javaClone:original];
  [mTag_ release];
  [mParent_ release];
}

- (void)dealloc {
  RELEASE_(mKeyedTags_);
  RELEASE_(mLayoutParams_);
  RELEASE_(mLayoutInsets_);
  RELEASE_(mMeasureCache_);
  RELEASE_(mBackground_);
  RELEASE_(mBackgroundTint_);
  RELEASE_(mForegroundInfo_);
  RELEASE_(mDefaultFocusHighlight_);
  RELEASE_(mContext_);
  RELEASE_(mDrawableState_);
  RELEASE_(mRoundScrollbarRenderer_);
  RELEASE_(mCurrentAnimation_);
  RELEASE_(mGhostView_);
  RELEASE_(mRenderNode_);
  RELEASE_(mAttachInfo_);
  RELEASE_(sThreadLocal_);
  RELEASE_(mListenerInfo_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LADView_ListenerInfo;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 13, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 16, 17, -1, -1, -1, -1 },
    { NULL, "LADViewParent;", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 3, -1, -1, -1, -1 },
    { NULL, "LADViewGroup_LayoutParams;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 24, 25, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 28, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 29, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 30, 31, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 33, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 35, 36, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 37, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 17, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 39, 40, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, 41, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x11, -1, -1, -1, -1, -1, -1 },
    { NULL, "[I", 0x4, 42, 3, -1, -1, -1, -1 },
    { NULL, "[I", 0xc, 43, 44, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 46, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 46, -1, -1, -1, -1 },
    { NULL, "LADColorStateList;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 52, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 17, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADInsets;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADInsets;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 55, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 57, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x4, 58, 3, -1, 59, -1, -1 },
    { NULL, "LADView;", 0x11, 60, 3, -1, 59, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 36, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 62, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 63, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 64, 63, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x11, 65, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 67, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x14, 68, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 66, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 70, 66, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 71, 66, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 72, 73, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 74, 66, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 79, 80, -1, -1, -1, -1 },
    { NULL, "LADResources;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "F", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 83, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 84, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 85, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 86, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 87, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 88, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 89, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 90, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 82, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 93, 82, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 94, 95, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 5, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 100, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 101, 3, -1, -1, -1, -1 },
    { NULL, "F", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 102, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 17, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 104, 3, -1, -1, -1, -1 },
    { NULL, "LADView_ViewRootImpl;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 105, 3, -1, -1, -1, -1 },
    { NULL, "LADContext;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 106, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 107, 108, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 109, 48, -1, -1, -1, -1 },
    { NULL, "LADDrawable;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 110, 36, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 111, 36, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 112, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView_AccessibilityNodeProvider;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 113, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 114, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 116, 36, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 117, 118, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 119, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 120, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 121, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 122, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 123, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 124, 5, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x1, 125, 66, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADView_OnKeyListener;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 126, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 127, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 128, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 129, 3, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getListenerInfo);
  methods[1].selector = @selector(setOnKeyListenerWithADView_OnKeyListener:);
  methods[2].selector = @selector(isFocused);
  methods[3].selector = @selector(isShown);
  methods[4].selector = @selector(getVisibility);
  methods[5].selector = @selector(setVisibilityWithInt:);
  methods[6].selector = @selector(isEnabled);
  methods[7].selector = @selector(setEnabledWithBoolean:);
  methods[8].selector = @selector(setFocusableWithBoolean:);
  methods[9].selector = @selector(setFocusableWithInt:);
  methods[10].selector = @selector(getRawLayoutDirection);
  methods[11].selector = @selector(setLayoutDirectionWithInt:);
  methods[12].selector = @selector(getLayoutDirection);
  methods[13].selector = @selector(isLayoutRtl);
  methods[14].selector = @selector(isLaidOut);
  methods[15].selector = @selector(isLayoutValid);
  methods[16].selector = @selector(setWillNotDrawWithBoolean:);
  methods[17].selector = @selector(isClickable);
  methods[18].selector = @selector(setClickableWithBoolean:);
  methods[19].selector = @selector(isLongClickable);
  methods[20].selector = @selector(setLongClickableWithBoolean:);
  methods[21].selector = @selector(setPressedWithBoolean:withFloat:withFloat:);
  methods[22].selector = @selector(setPressedWithBoolean:);
  methods[23].selector = @selector(dispatchSetPressedWithBoolean:);
  methods[24].selector = @selector(isPressed);
  methods[25].selector = @selector(isFocusable);
  methods[26].selector = @selector(clearParentsWantFocus);
  methods[27].selector = @selector(getWindowVisibility);
  methods[28].selector = @selector(isHovered);
  methods[29].selector = @selector(setHoveredWithBoolean:);
  methods[30].selector = @selector(onHoverChangedWithBoolean:);
  methods[31].selector = @selector(hasSize);
  methods[32].selector = @selector(canTakeFocus);
  methods[33].selector = @selector(onSizeChangedWithInt:withInt:withInt:withInt:);
  methods[34].selector = @selector(getParent);
  methods[35].selector = @selector(getWidth);
  methods[36].selector = @selector(getHeight);
  methods[37].selector = @selector(getMeasuredWidth);
  methods[38].selector = @selector(getMeasuredWidthAndState);
  methods[39].selector = @selector(getMeasuredHeight);
  methods[40].selector = @selector(getMeasuredState);
  methods[41].selector = @selector(getTop);
  methods[42].selector = @selector(getBottom);
  methods[43].selector = @selector(getLeft);
  methods[44].selector = @selector(getRight);
  methods[45].selector = @selector(offsetTopAndBottomWithInt:);
  methods[46].selector = @selector(offsetLeftAndRightWithInt:);
  methods[47].selector = @selector(getLayoutParams);
  methods[48].selector = @selector(setLayoutParamsWithADViewGroup_LayoutParams:);
  methods[49].selector = @selector(resolveLayoutParams);
  methods[50].selector = @selector(skipInvalidate);
  methods[51].selector = @selector(invalidateWithADRect:);
  methods[52].selector = @selector(invalidateWithInt:withInt:withInt:withInt:);
  methods[53].selector = @selector(invalidate);
  methods[54].selector = @selector(invalidateWithBoolean:);
  methods[55].selector = @selector(invalidateInternalWithInt:withInt:withInt:withInt:withBoolean:withBoolean:);
  methods[56].selector = @selector(getProjectionReceiver);
  methods[57].selector = @selector(isProjectionReceiver);
  methods[58].selector = @selector(invalidateViewPropertyWithBoolean:withBoolean:);
  methods[59].selector = @selector(invalidateParentCaches);
  methods[60].selector = @selector(invalidateParentIfNeeded);
  methods[61].selector = @selector(invalidateParentIfNeededAndWasQuickRejected);
  methods[62].selector = @selector(isOpaque);
  methods[63].selector = @selector(computeHorizontalScrollRange);
  methods[64].selector = @selector(computeHorizontalScrollOffset);
  methods[65].selector = @selector(computeHorizontalScrollExtent);
  methods[66].selector = @selector(computeVerticalScrollRange);
  methods[67].selector = @selector(computeVerticalScrollOffset);
  methods[68].selector = @selector(computeVerticalScrollExtent);
  methods[69].selector = @selector(canScrollHorizontallyWithInt:);
  methods[70].selector = @selector(canScrollVerticallyWithInt:);
  methods[71].selector = @selector(assignParentWithADViewParent:);
  methods[72].selector = @selector(resolveRtlPropertiesIfNeeded);
  methods[73].selector = @selector(resetRtlProperties);
  methods[74].selector = @selector(needRtlPropertiesResolution);
  methods[75].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[76].selector = @selector(resolveLayoutDirection);
  methods[77].selector = @selector(canResolveLayoutDirection);
  methods[78].selector = @selector(resetResolvedLayoutDirection);
  methods[79].selector = @selector(isLayoutDirectionInherited);
  methods[80].selector = @selector(isLayoutDirectionResolved);
  methods[81].selector = @selector(isPaddingResolved);
  methods[82].selector = @selector(resolvePadding);
  methods[83].selector = @selector(resetResolvedPadding);
  methods[84].selector = @selector(resetResolvedPaddingInternal);
  methods[85].selector = @selector(invalidateInheritedLayoutModeWithInt:);
  methods[86].selector = @selector(setDuplicateParentStateEnabledWithBoolean:);
  methods[87].selector = @selector(isDuplicateParentStateEnabled);
  methods[88].selector = @selector(isLayoutRequested);
  methods[89].selector = @selector(isLayoutModeOpticalWithId:);
  methods[90].selector = @selector(setOpticalFrameWithInt:withInt:withInt:withInt:);
  methods[91].selector = @selector(layoutWithInt:withInt:withInt:withInt:);
  methods[92].selector = @selector(hasParentWantsFocus);
  methods[93].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[94].selector = @selector(setFrameWithInt:withInt:withInt:withInt:);
  methods[95].selector = @selector(resolveDrawables);
  methods[96].selector = @selector(areDrawablesResolved);
  methods[97].selector = @selector(resetResolvedDrawables);
  methods[98].selector = @selector(resetResolvedDrawablesInternal);
  methods[99].selector = @selector(refreshDrawableState);
  methods[100].selector = @selector(getDrawableState);
  methods[101].selector = @selector(onCreateDrawableStateWithInt:);
  methods[102].selector = @selector(mergeDrawableStatesWithIntArray:withIntArray:);
  methods[103].selector = @selector(setBackgroundTintListWithADColorStateList:);
  methods[104].selector = @selector(getBackgroundTintList);
  methods[105].selector = @selector(getForeground);
  methods[106].selector = @selector(setForegroundWithADDrawable:);
  methods[107].selector = @selector(isForegroundInsidePadding);
  methods[108].selector = @selector(getForegroundGravity);
  methods[109].selector = @selector(setForegroundGravityWithInt:);
  methods[110].selector = @selector(setForegroundTintListWithADColorStateList:);
  methods[111].selector = @selector(getForegroundTintList);
  methods[112].selector = @selector(setPaddingWithInt:withInt:withInt:withInt:);
  methods[113].selector = @selector(internalSetPaddingWithInt:withInt:withInt:withInt:);
  methods[114].selector = @selector(setPaddingRelativeWithInt:withInt:withInt:withInt:);
  methods[115].selector = @selector(getPaddingTop);
  methods[116].selector = @selector(getPaddingBottom);
  methods[117].selector = @selector(getPaddingLeft);
  methods[118].selector = @selector(getPaddingStart);
  methods[119].selector = @selector(getPaddingRight);
  methods[120].selector = @selector(getPaddingEnd);
  methods[121].selector = @selector(computeOpticalInsets);
  methods[122].selector = @selector(getOpticalInsets);
  methods[123].selector = @selector(setSelectedWithBoolean:);
  methods[124].selector = @selector(dispatchSetSelectedWithBoolean:);
  methods[125].selector = @selector(isSelected);
  methods[126].selector = @selector(setActivatedWithBoolean:);
  methods[127].selector = @selector(dispatchSetActivatedWithBoolean:);
  methods[128].selector = @selector(isActivated);
  methods[129].selector = @selector(getRootView);
  methods[130].selector = @selector(findViewTraversalWithInt:);
  methods[131].selector = @selector(findViewByIdWithInt:);
  methods[132].selector = @selector(getTag);
  methods[133].selector = @selector(setTagWithId:);
  methods[134].selector = @selector(getTagWithInt:);
  methods[135].selector = @selector(setTagWithInt:withId:);
  methods[136].selector = @selector(setKeyedTagWithInt:withId:);
  methods[137].selector = @selector(getBaseline);
  methods[138].selector = @selector(requestLayout);
  methods[139].selector = @selector(forceLayout);
  methods[140].selector = @selector(measureWithInt:withInt:);
  methods[141].selector = @selector(onMeasureWithInt:withInt:);
  methods[142].selector = @selector(setMeasuredDimensionWithInt:withInt:);
  methods[143].selector = @selector(setMeasuredDimensionRawWithInt:withInt:);
  methods[144].selector = @selector(combineMeasuredStatesWithInt:withInt:);
  methods[145].selector = @selector(resolveSizeWithInt:withInt:);
  methods[146].selector = @selector(resolveSizeAndStateWithInt:withInt:withInt:);
  methods[147].selector = @selector(getDefaultSizeWithInt:withInt:);
  methods[148].selector = @selector(getSuggestedMinimumHeight);
  methods[149].selector = @selector(getSuggestedMinimumWidth);
  methods[150].selector = @selector(getMinimumHeight);
  methods[151].selector = @selector(setMinimumHeightWithInt:);
  methods[152].selector = @selector(getMinimumWidth);
  methods[153].selector = @selector(setMinimumWidthWithInt:);
  methods[154].selector = @selector(getRawTextDirection);
  methods[155].selector = @selector(setTextDirectionWithInt:);
  methods[156].selector = @selector(getTextDirection);
  methods[157].selector = @selector(resolveTextDirection);
  methods[158].selector = @selector(canResolveTextDirection);
  methods[159].selector = @selector(resetResolvedTextDirection);
  methods[160].selector = @selector(isTextDirectionResolved);
  methods[161].selector = @selector(getRawTextAlignment);
  methods[162].selector = @selector(setTextAlignmentWithInt:);
  methods[163].selector = @selector(getTextAlignment);
  methods[164].selector = @selector(resolveTextAlignment);
  methods[165].selector = @selector(canResolveTextAlignment);
  methods[166].selector = @selector(resetResolvedTextAlignment);
  methods[167].selector = @selector(isTextAlignmentResolved);
  methods[168].selector = @selector(init);
  methods[169].selector = @selector(onDrawWithADCanvas:);
  methods[170].selector = @selector(getResources);
  methods[171].selector = @selector(isInEditMode);
  methods[172].selector = @selector(getAlpha);
  methods[173].selector = @selector(getRotation);
  methods[174].selector = @selector(getRotationX);
  methods[175].selector = @selector(getRotationY);
  methods[176].selector = @selector(getScaleX);
  methods[177].selector = @selector(getScaleY);
  methods[178].selector = @selector(getPivotX);
  methods[179].selector = @selector(getPivotY);
  methods[180].selector = @selector(getTranslationX);
  methods[181].selector = @selector(getTranslationY);
  methods[182].selector = @selector(getTranslationZ);
  methods[183].selector = @selector(getElevation);
  methods[184].selector = @selector(setAlphaWithFloat:);
  methods[185].selector = @selector(setRotationWithFloat:);
  methods[186].selector = @selector(setRotationXWithFloat:);
  methods[187].selector = @selector(setRotationYWithFloat:);
  methods[188].selector = @selector(setScaleXWithFloat:);
  methods[189].selector = @selector(setScaleYWithFloat:);
  methods[190].selector = @selector(setPivotXWithFloat:);
  methods[191].selector = @selector(setPivotYWithFloat:);
  methods[192].selector = @selector(setTranslationXWithFloat:);
  methods[193].selector = @selector(setTranslationYWithFloat:);
  methods[194].selector = @selector(setTranslationZWithFloat:);
  methods[195].selector = @selector(setElevationWithFloat:);
  methods[196].selector = @selector(hasUnhandledKeyListener);
  methods[197].selector = @selector(hasDefaultFocus);
  methods[198].selector = @selector(clearFocusInternalWithADView:withBoolean:withBoolean:);
  methods[199].selector = @selector(restoreDefaultFocus);
  methods[200].selector = @selector(notifyEnterOrExitForAutoFillIfNeededWithBoolean:);
  methods[201].selector = @selector(shouldDrawRoundScrollbar);
  methods[202].selector = @selector(setBackgroundColorWithInt:);
  methods[203].selector = @selector(requestFocusFromTouch);
  methods[204].selector = @selector(requestFocus);
  methods[205].selector = @selector(setSystemUiVisibilityWithInt:);
  methods[206].selector = @selector(setOverScrollModeWithInt:);
  methods[207].selector = @selector(cancelPendingInputEvents);
  methods[208].selector = @selector(getVerticalScrollbarWidth);
  methods[209].selector = @selector(setVerticalScrollbarWidthWithInt:);
  methods[210].selector = @selector(getHorizontalScrollbarHeight);
  methods[211].selector = @selector(setHorizontalScrollbarHeightWithInt:);
  methods[212].selector = @selector(getFinalAlpha);
  methods[213].selector = @selector(setFlagsWithInt:withInt:);
  methods[214].selector = @selector(invalidateOutline);
  methods[215].selector = @selector(isHardwareAccelerated);
  methods[216].selector = @selector(getZ);
  methods[217].selector = @selector(damageShadowReceiver);
  methods[218].selector = @selector(damageInParent);
  methods[219].selector = @selector(hasRtlSupport);
  methods[220].selector = @selector(isRtlCompatibilityMode);
  methods[221].selector = @selector(notifySubtreeAccessibilityStateChangedIfNeeded);
  methods[222].selector = @selector(sizeChangeWithInt:withInt:withInt:withInt:);
  methods[223].selector = @selector(onResolveDrawablesWithInt:);
  methods[224].selector = @selector(getViewRootImpl);
  methods[225].selector = @selector(getId);
  methods[226].selector = @selector(setIdWithInt:);
  methods[227].selector = @selector(getContext);
  methods[228].selector = @selector(hasFocus);
  methods[229].selector = @selector(findFocus);
  methods[230].selector = @selector(unFocusWithId:);
  methods[231].selector = @selector(dispatchAttachedToWindowWithADView_AttachInfo:withInt:);
  methods[232].selector = @selector(hasTransientState);
  methods[233].selector = @selector(clearAccessibilityFocus);
  methods[234].selector = @selector(getAnimation);
  methods[235].selector = @selector(dispatchDetachedFromWindow);
  methods[236].selector = @selector(setBackgroundWithADDrawable:);
  methods[237].selector = @selector(getBackground);
  methods[238].selector = @selector(hasIdentityMatrix);
  methods[239].selector = @selector(setAccessibilityDelegateWithId:);
  methods[240].selector = @selector(getAccessibilityDelegate);
  methods[241].selector = @selector(dispatchStartTemporaryDetach);
  methods[242].selector = @selector(dispatchFinishTemporaryDetach);
  methods[243].selector = @selector(setDrawingCacheBackgroundColorWithId:);
  methods[244].selector = @selector(getImportantForAccessibility);
  methods[245].selector = @selector(setImportantForAccessibilityWithInt:);
  methods[246].selector = @selector(onStartTemporaryDetach);
  methods[247].selector = @selector(clearFocus);
  methods[248].selector = @selector(isAttachedToWindow);
  methods[249].selector = @selector(getAccessibilityNodeProvider);
  methods[250].selector = @selector(requestAccessibilityFocus);
  methods[251].selector = @selector(onFinishTemporaryDetach);
  methods[252].selector = @selector(getWindowToken);
  methods[253].selector = @selector(isDrawingCacheEnabled);
  methods[254].selector = @selector(setDrawingCacheEnabledWithBoolean:);
  methods[255].selector = @selector(jumpDrawablesToCurrentState);
  methods[256].selector = @selector(dispatchKeyEventWithADKeyEvent:);
  methods[257].selector = @selector(applyForegroundTint);
  methods[258].selector = @selector(unscheduleDrawableWithId:);
  methods[259].selector = @selector(drawableStateChanged);
  methods[260].selector = @selector(drawableHotspotChangedWithFloat:withFloat:);
  methods[261].selector = @selector(hasWindowFocus);
  methods[262].selector = @selector(setFocusedWithBoolean:);
  methods[263].selector = @selector(onFocusChangedWithBoolean:);
  methods[264].selector = @selector(setDragHoveredWithBoolean:);
  methods[265].selector = @selector(onDragHoveredWithBoolean:);
  methods[266].selector = @selector(setDragCanAcceptWithBoolean:);
  methods[267].selector = @selector(onDragCanAcceptWithBoolean:);
  methods[268].selector = @selector(getForegroundBoundsWithInt:withInt:);
  methods[269].selector = @selector(onAttachedToWindow);
  methods[270].selector = @selector(applyBackgroundTint);
  methods[271].selector = @selector(hasOnKeyListener);
  methods[272].selector = @selector(getOnKeyListener);
  methods[273].selector = @selector(invokeKeyListenerDownWithInt:);
  methods[274].selector = @selector(invokeKeyListenerUpWithInt:);
  methods[275].selector = @selector(resetPressedState);
  methods[276].selector = @selector(sendAccessibilityEventWithInt:);
  methods[277].selector = @selector(notifyViewAccessibilityStateChangedIfNeededWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "DBG", "Z", .constantValue.asBOOL = ADView_DBG, 0x1a, -1, -1, -1, -1 },
    { "DEBUG_DRAW", "Z", .constantValue.asLong = 0, 0x9, -1, 130, -1, -1 },
    { "VIEW_LOG_TAG", "LNSString;", .constantValue.asLong = 0, 0x1c, -1, 131, -1, -1 },
    { "mDebugViewAttributes", "Z", .constantValue.asLong = 0, 0x9, -1, 132, -1, -1 },
    { "NO_ID", "I", .constantValue.asInt = ADView_NO_ID, 0x19, -1, -1, -1, -1 },
    { "LAST_APP_AUTOFILL_ID", "I", .constantValue.asInt = ADView_LAST_APP_AUTOFILL_ID, 0x19, -1, -1, -1, -1 },
    { "sCompatibilityDone", "Z", .constantValue.asLong = 0, 0xa, -1, 133, -1, -1 },
    { "sUseBrokenMakeMeasureSpec", "Z", .constantValue.asLong = 0, 0xa, -1, 134, -1, -1 },
    { "sUseZeroUnspecifiedMeasureSpec", "Z", .constantValue.asLong = 0, 0x8, -1, 135, -1, -1 },
    { "sIgnoreMeasureCache", "Z", .constantValue.asLong = 0, 0xa, -1, 136, -1, -1 },
    { "sAlwaysRemeasureExactly", "Z", .constantValue.asLong = 0, 0xa, -1, 137, -1, -1 },
    { "sLayoutParamsAlwaysChanged", "Z", .constantValue.asLong = 0, 0xa, -1, 138, -1, -1 },
    { "sTextureViewIgnoresDrawableSetters", "Z", .constantValue.asLong = 0, 0x8, -1, 139, -1, -1 },
    { "sPreserveMarginParamsInLayoutParamConversion", "Z", .constantValue.asLong = 0, 0xc, -1, 140, -1, -1 },
    { "sCascadedDragDrop", "Z", .constantValue.asLong = 0, 0x8, -1, 141, -1, -1 },
    { "sHasFocusableExcludeAutoFocusable", "Z", .constantValue.asLong = 0, 0x8, -1, 142, -1, -1 },
    { "sAutoFocusableOffUIThreadWontNotifyParents", "Z", .constantValue.asLong = 0, 0xa, -1, 143, -1, -1 },
    { "sThrowOnInvalidFloatProperties", "Z", .constantValue.asLong = 0, 0xa, -1, 144, -1, -1 },
    { "sAcceptZeroSizeDragShadow", "Z", .constantValue.asLong = 0, 0xa, -1, 145, -1, -1 },
    { "NOT_FOCUSABLE", "I", .constantValue.asInt = ADView_NOT_FOCUSABLE, 0x19, -1, -1, -1, -1 },
    { "FOCUSABLE", "I", .constantValue.asInt = ADView_FOCUSABLE, 0x19, -1, -1, -1, -1 },
    { "FOCUSABLE_AUTO", "I", .constantValue.asInt = ADView_FOCUSABLE_AUTO, 0x19, -1, -1, -1, -1 },
    { "FOCUSABLE_MASK", "I", .constantValue.asInt = ADView_FOCUSABLE_MASK, 0x1a, -1, -1, -1, -1 },
    { "FITS_SYSTEM_WINDOWS", "I", .constantValue.asInt = ADView_FITS_SYSTEM_WINDOWS, 0x1a, -1, -1, -1, -1 },
    { "VISIBLE", "I", .constantValue.asInt = ADView_VISIBLE, 0x19, -1, -1, -1, -1 },
    { "INVISIBLE", "I", .constantValue.asInt = ADView_INVISIBLE, 0x19, -1, -1, -1, -1 },
    { "GONE", "I", .constantValue.asInt = ADView_GONE, 0x19, -1, -1, -1, -1 },
    { "VISIBILITY_MASK", "I", .constantValue.asInt = ADView_VISIBILITY_MASK, 0x18, -1, -1, -1, -1 },
    { "AUTOFILL_TYPE_NONE", "I", .constantValue.asInt = ADView_AUTOFILL_TYPE_NONE, 0x19, -1, -1, -1, -1 },
    { "AUTOFILL_TYPE_TEXT", "I", .constantValue.asInt = ADView_AUTOFILL_TYPE_TEXT, 0x19, -1, -1, -1, -1 },
    { "AUTOFILL_TYPE_TOGGLE", "I", .constantValue.asInt = ADView_AUTOFILL_TYPE_TOGGLE, 0x19, -1, -1, -1, -1 },
    { "AUTOFILL_TYPE_LIST", "I", .constantValue.asInt = ADView_AUTOFILL_TYPE_LIST, 0x19, -1, -1, -1, -1 },
    { "AUTOFILL_TYPE_DATE", "I", .constantValue.asInt = ADView_AUTOFILL_TYPE_DATE, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_AUTOFILL_AUTO", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_AUTOFILL_AUTO, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_AUTOFILL_YES", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_AUTOFILL_YES, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_AUTOFILL_NO", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_AUTOFILL_NO, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_AUTOFILL_YES_EXCLUDE_DESCENDANTS, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_AUTOFILL_NO_EXCLUDE_DESCENDANTS, 0x19, -1, -1, -1, -1 },
    { "AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS", "I", .constantValue.asInt = ADView_AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS, 0x19, -1, -1, -1, -1 },
    { "ENABLED", "I", .constantValue.asInt = ADView_ENABLED, 0x18, -1, -1, -1, -1 },
    { "DISABLED", "I", .constantValue.asInt = ADView_DISABLED, 0x18, -1, -1, -1, -1 },
    { "ENABLED_MASK", "I", .constantValue.asInt = ADView_ENABLED_MASK, 0x18, -1, -1, -1, -1 },
    { "WILL_NOT_DRAW", "I", .constantValue.asInt = ADView_WILL_NOT_DRAW, 0x18, -1, -1, -1, -1 },
    { "DRAW_MASK", "I", .constantValue.asInt = ADView_DRAW_MASK, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_NONE", "I", .constantValue.asInt = ADView_SCROLLBARS_NONE, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_HORIZONTAL", "I", .constantValue.asInt = ADView_SCROLLBARS_HORIZONTAL, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_VERTICAL", "I", .constantValue.asInt = ADView_SCROLLBARS_VERTICAL, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_MASK", "I", .constantValue.asInt = ADView_SCROLLBARS_MASK, 0x18, -1, -1, -1, -1 },
    { "FILTER_TOUCHES_WHEN_OBSCURED", "I", .constantValue.asInt = ADView_FILTER_TOUCHES_WHEN_OBSCURED, 0x18, -1, -1, -1, -1 },
    { "OPTIONAL_FITS_SYSTEM_WINDOWS", "I", .constantValue.asInt = ADView_OPTIONAL_FITS_SYSTEM_WINDOWS, 0x18, -1, -1, -1, -1 },
    { "FADING_EDGE_NONE", "I", .constantValue.asInt = ADView_FADING_EDGE_NONE, 0x18, -1, -1, -1, -1 },
    { "FADING_EDGE_HORIZONTAL", "I", .constantValue.asInt = ADView_FADING_EDGE_HORIZONTAL, 0x18, -1, -1, -1, -1 },
    { "FADING_EDGE_VERTICAL", "I", .constantValue.asInt = ADView_FADING_EDGE_VERTICAL, 0x18, -1, -1, -1, -1 },
    { "FADING_EDGE_MASK", "I", .constantValue.asInt = ADView_FADING_EDGE_MASK, 0x18, -1, -1, -1, -1 },
    { "CLICKABLE", "I", .constantValue.asInt = ADView_CLICKABLE, 0x18, -1, -1, -1, -1 },
    { "DRAWING_CACHE_ENABLED", "I", .constantValue.asInt = ADView_DRAWING_CACHE_ENABLED, 0x18, -1, -1, -1, -1 },
    { "SAVE_DISABLED", "I", .constantValue.asInt = ADView_SAVE_DISABLED, 0x18, -1, -1, -1, -1 },
    { "SAVE_DISABLED_MASK", "I", .constantValue.asInt = ADView_SAVE_DISABLED_MASK, 0x18, -1, -1, -1, -1 },
    { "WILL_NOT_CACHE_DRAWING", "I", .constantValue.asInt = ADView_WILL_NOT_CACHE_DRAWING, 0x18, -1, -1, -1, -1 },
    { "FOCUSABLE_IN_TOUCH_MODE", "I", .constantValue.asInt = ADView_FOCUSABLE_IN_TOUCH_MODE, 0x18, -1, -1, -1, -1 },
    { "DRAWING_CACHE_QUALITY_LOW", "I", .constantValue.asInt = ADView_DRAWING_CACHE_QUALITY_LOW, 0x19, -1, -1, -1, -1 },
    { "DRAWING_CACHE_QUALITY_HIGH", "I", .constantValue.asInt = ADView_DRAWING_CACHE_QUALITY_HIGH, 0x19, -1, -1, -1, -1 },
    { "DRAWING_CACHE_QUALITY_AUTO", "I", .constantValue.asInt = ADView_DRAWING_CACHE_QUALITY_AUTO, 0x19, -1, -1, -1, -1 },
    { "DRAWING_CACHE_QUALITY_MASK", "I", .constantValue.asInt = ADView_DRAWING_CACHE_QUALITY_MASK, 0x18, -1, -1, -1, -1 },
    { "LONG_CLICKABLE", "I", .constantValue.asInt = ADView_LONG_CLICKABLE, 0x18, -1, -1, -1, -1 },
    { "DUPLICATE_PARENT_STATE", "I", .constantValue.asInt = ADView_DUPLICATE_PARENT_STATE, 0x18, -1, -1, -1, -1 },
    { "CONTEXT_CLICKABLE", "I", .constantValue.asInt = ADView_CONTEXT_CLICKABLE, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_INSIDE_OVERLAY", "I", .constantValue.asInt = ADView_SCROLLBARS_INSIDE_OVERLAY, 0x19, -1, -1, -1, -1 },
    { "SCROLLBARS_INSIDE_INSET", "I", .constantValue.asInt = ADView_SCROLLBARS_INSIDE_INSET, 0x19, -1, -1, -1, -1 },
    { "SCROLLBARS_OUTSIDE_OVERLAY", "I", .constantValue.asInt = ADView_SCROLLBARS_OUTSIDE_OVERLAY, 0x19, -1, -1, -1, -1 },
    { "SCROLLBARS_OUTSIDE_INSET", "I", .constantValue.asInt = ADView_SCROLLBARS_OUTSIDE_INSET, 0x19, -1, -1, -1, -1 },
    { "SCROLLBARS_INSET_MASK", "I", .constantValue.asInt = ADView_SCROLLBARS_INSET_MASK, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_OUTSIDE_MASK", "I", .constantValue.asInt = ADView_SCROLLBARS_OUTSIDE_MASK, 0x18, -1, -1, -1, -1 },
    { "SCROLLBARS_STYLE_MASK", "I", .constantValue.asInt = ADView_SCROLLBARS_STYLE_MASK, 0x18, -1, -1, -1, -1 },
    { "KEEP_SCREEN_ON", "I", .constantValue.asInt = ADView_KEEP_SCREEN_ON, 0x19, -1, -1, -1, -1 },
    { "SOUND_EFFECTS_ENABLED", "I", .constantValue.asInt = ADView_SOUND_EFFECTS_ENABLED, 0x19, -1, -1, -1, -1 },
    { "HAPTIC_FEEDBACK_ENABLED", "I", .constantValue.asInt = ADView_HAPTIC_FEEDBACK_ENABLED, 0x19, -1, -1, -1, -1 },
    { "PARENT_SAVE_DISABLED", "I", .constantValue.asInt = ADView_PARENT_SAVE_DISABLED, 0x18, -1, -1, -1, -1 },
    { "PARENT_SAVE_DISABLED_MASK", "I", .constantValue.asInt = ADView_PARENT_SAVE_DISABLED_MASK, 0x18, -1, -1, -1, -1 },
    { "TOOLTIP", "I", .constantValue.asInt = ADView_TOOLTIP, 0x18, -1, -1, -1, -1 },
    { "FOCUSABLES_ALL", "I", .constantValue.asInt = ADView_FOCUSABLES_ALL, 0x19, -1, -1, -1, -1 },
    { "FOCUSABLES_TOUCH_MODE", "I", .constantValue.asInt = ADView_FOCUSABLES_TOUCH_MODE, 0x19, -1, -1, -1, -1 },
    { "FOCUS_BACKWARD", "I", .constantValue.asInt = ADView_FOCUS_BACKWARD, 0x19, -1, -1, -1, -1 },
    { "FOCUS_FORWARD", "I", .constantValue.asInt = ADView_FOCUS_FORWARD, 0x19, -1, -1, -1, -1 },
    { "FOCUS_LEFT", "I", .constantValue.asInt = ADView_FOCUS_LEFT, 0x19, -1, -1, -1, -1 },
    { "FOCUS_UP", "I", .constantValue.asInt = ADView_FOCUS_UP, 0x19, -1, -1, -1, -1 },
    { "FOCUS_RIGHT", "I", .constantValue.asInt = ADView_FOCUS_RIGHT, 0x19, -1, -1, -1, -1 },
    { "FOCUS_DOWN", "I", .constantValue.asInt = ADView_FOCUS_DOWN, 0x19, -1, -1, -1, -1 },
    { "MEASURED_SIZE_MASK", "I", .constantValue.asInt = ADView_MEASURED_SIZE_MASK, 0x19, -1, -1, -1, -1 },
    { "MEASURED_STATE_MASK", "I", .constantValue.asInt = ADView_MEASURED_STATE_MASK, 0x19, -1, -1, -1, -1 },
    { "MEASURED_HEIGHT_STATE_SHIFT", "I", .constantValue.asInt = ADView_MEASURED_HEIGHT_STATE_SHIFT, 0x19, -1, -1, -1, -1 },
    { "MEASURED_STATE_TOO_SMALL", "I", .constantValue.asInt = ADView_MEASURED_STATE_TOO_SMALL, 0x19, -1, -1, -1, -1 },
    { "DEBUG_CORNERS_SIZE_DIP", "I", .constantValue.asInt = ADView_DEBUG_CORNERS_SIZE_DIP, 0x18, -1, -1, -1, -1 },
    { "mKeyedTags_", "LADSparseArray;", .constantValue.asLong = 0, 0x2, -1, -1, 146, -1 },
    { "sNextAccessibilityViewId", "I", .constantValue.asLong = 0, 0xa, -1, 147, -1, -1 },
    { "mMeasuredWidth_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMeasuredHeight_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mRecreateDisplayList_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mID_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAutofillViewId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAccessibilityViewId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAccessibilityCursorPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTag_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "PFLAG_WANTS_FOCUS", "I", .constantValue.asInt = ADView_PFLAG_WANTS_FOCUS, 0x18, -1, -1, -1, -1 },
    { "PFLAG_FOCUSED", "I", .constantValue.asInt = ADView_PFLAG_FOCUSED, 0x18, -1, -1, -1, -1 },
    { "PFLAG_SELECTED", "I", .constantValue.asInt = ADView_PFLAG_SELECTED, 0x18, -1, -1, -1, -1 },
    { "PFLAG_IS_ROOT_NAMESPACE", "I", .constantValue.asInt = ADView_PFLAG_IS_ROOT_NAMESPACE, 0x18, -1, -1, -1, -1 },
    { "PFLAG_HAS_BOUNDS", "I", .constantValue.asInt = ADView_PFLAG_HAS_BOUNDS, 0x18, -1, -1, -1, -1 },
    { "PFLAG_DRAWN", "I", .constantValue.asInt = ADView_PFLAG_DRAWN, 0x18, -1, -1, -1, -1 },
    { "PFLAG_DRAW_ANIMATION", "I", .constantValue.asInt = ADView_PFLAG_DRAW_ANIMATION, 0x18, -1, -1, -1, -1 },
    { "PFLAG_SKIP_DRAW", "I", .constantValue.asInt = ADView_PFLAG_SKIP_DRAW, 0x18, -1, -1, -1, -1 },
    { "PFLAG_REQUEST_TRANSPARENT_REGIONS", "I", .constantValue.asInt = ADView_PFLAG_REQUEST_TRANSPARENT_REGIONS, 0x18, -1, -1, -1, -1 },
    { "PFLAG_DRAWABLE_STATE_DIRTY", "I", .constantValue.asInt = ADView_PFLAG_DRAWABLE_STATE_DIRTY, 0x18, -1, -1, -1, -1 },
    { "PFLAG_MEASURED_DIMENSION_SET", "I", .constantValue.asInt = ADView_PFLAG_MEASURED_DIMENSION_SET, 0x18, -1, -1, -1, -1 },
    { "PFLAG_FORCE_LAYOUT", "I", .constantValue.asInt = ADView_PFLAG_FORCE_LAYOUT, 0x18, -1, -1, -1, -1 },
    { "PFLAG_LAYOUT_REQUIRED", "I", .constantValue.asInt = ADView_PFLAG_LAYOUT_REQUIRED, 0x18, -1, -1, -1, -1 },
    { "PFLAG_PRESSED", "I", .constantValue.asInt = ADView_PFLAG_PRESSED, 0x1a, -1, -1, -1, -1 },
    { "PFLAG_DRAWING_CACHE_VALID", "I", .constantValue.asInt = ADView_PFLAG_DRAWING_CACHE_VALID, 0x18, -1, -1, -1, -1 },
    { "PFLAG_ANIMATION_STARTED", "I", .constantValue.asInt = ADView_PFLAG_ANIMATION_STARTED, 0x18, -1, -1, -1, -1 },
    { "PFLAG_SAVE_STATE_CALLED", "I", .constantValue.asInt = ADView_PFLAG_SAVE_STATE_CALLED, 0x1a, -1, -1, -1, -1 },
    { "PFLAG_ALPHA_SET", "I", .constantValue.asInt = ADView_PFLAG_ALPHA_SET, 0x18, -1, -1, -1, -1 },
    { "PFLAG_SCROLL_CONTAINER", "I", .constantValue.asInt = ADView_PFLAG_SCROLL_CONTAINER, 0x18, -1, -1, -1, -1 },
    { "PFLAG_SCROLL_CONTAINER_ADDED", "I", .constantValue.asInt = ADView_PFLAG_SCROLL_CONTAINER_ADDED, 0x18, -1, -1, -1, -1 },
    { "PFLAG_DIRTY", "I", .constantValue.asInt = ADView_PFLAG_DIRTY, 0x18, -1, -1, -1, -1 },
    { "PFLAG_DIRTY_OPAQUE", "I", .constantValue.asInt = ADView_PFLAG_DIRTY_OPAQUE, 0x18, -1, -1, -1, -1 },
    { "PFLAG_DIRTY_MASK", "I", .constantValue.asInt = ADView_PFLAG_DIRTY_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG_OPAQUE_BACKGROUND", "I", .constantValue.asInt = ADView_PFLAG_OPAQUE_BACKGROUND, 0x18, -1, -1, -1, -1 },
    { "PFLAG_OPAQUE_SCROLLBARS", "I", .constantValue.asInt = ADView_PFLAG_OPAQUE_SCROLLBARS, 0x18, -1, -1, -1, -1 },
    { "PFLAG_OPAQUE_MASK", "I", .constantValue.asInt = ADView_PFLAG_OPAQUE_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG_PREPRESSED", "I", .constantValue.asInt = ADView_PFLAG_PREPRESSED, 0x1a, -1, -1, -1, -1 },
    { "PFLAG_CANCEL_NEXT_UP_EVENT", "I", .constantValue.asInt = ADView_PFLAG_CANCEL_NEXT_UP_EVENT, 0x18, -1, -1, -1, -1 },
    { "PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH", "I", .constantValue.asInt = ADView_PFLAG_AWAKEN_SCROLL_BARS_ON_ATTACH, 0x1a, -1, -1, -1, -1 },
    { "PFLAG_HOVERED", "I", .constantValue.asInt = ADView_PFLAG_HOVERED, 0x1a, -1, -1, -1, -1 },
    { "PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK", "I", .constantValue.asInt = ADView_PFLAG_NOTIFY_AUTOFILL_MANAGER_ON_CLICK, 0x1a, -1, -1, -1, -1 },
    { "PFLAG_ACTIVATED", "I", .constantValue.asInt = ADView_PFLAG_ACTIVATED, 0x18, -1, -1, -1, -1 },
    { "PFLAG_INVALIDATED", "I", .constantValue.asInt = ADView_PFLAG_INVALIDATED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_DRAG_CAN_ACCEPT", "I", .constantValue.asInt = ADView_PFLAG2_DRAG_CAN_ACCEPT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_DRAG_HOVERED", "I", .constantValue.asInt = ADView_PFLAG2_DRAG_HOVERED, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_UNDEFINED", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_UNDEFINED, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_LTR", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_LTR, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_RTL", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_RTL, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_INHERIT", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_INHERIT, 0x19, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_LOCALE", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_LOCALE, 0x19, -1, -1, -1, -1 },
    { "PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_LAYOUT_DIRECTION_MASK", "I", .constantValue.asInt = ADView_PFLAG2_LAYOUT_DIRECTION_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL", "I", .constantValue.asInt = ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_RTL, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_LAYOUT_DIRECTION_RESOLVED", "I", .constantValue.asInt = ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK", "I", .constantValue.asInt = ADView_PFLAG2_LAYOUT_DIRECTION_RESOLVED_MASK, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_DEFAULT", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "LAYOUT_DIRECTION_RESOLVED_DEFAULT", "I", .constantValue.asInt = ADView_LAYOUT_DIRECTION_RESOLVED_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_INHERIT", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_INHERIT, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_FIRST_STRONG", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_FIRST_STRONG, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_ANY_RTL", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_ANY_RTL, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_LTR", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_LTR, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_RTL", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_RTL, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_LOCALE", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_LOCALE, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_FIRST_STRONG_LTR", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_FIRST_STRONG_LTR, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_FIRST_STRONG_RTL", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_FIRST_STRONG_RTL, 0x19, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_DEFAULT", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_DIRECTION_RESOLVED_DEFAULT", "I", .constantValue.asInt = ADView_TEXT_DIRECTION_RESOLVED_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_DIRECTION_MASK_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_DIRECTION_MASK", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_DIRECTION_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_DIRECTION_RESOLVED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_MASK", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_INHERIT", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_INHERIT, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_GRAVITY", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_GRAVITY, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_TEXT_START", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_TEXT_START, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_TEXT_END", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_TEXT_END, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_CENTER", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_CENTER, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_VIEW_START", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_VIEW_START, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_VIEW_END", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_VIEW_END, 0x19, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_DEFAULT", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGNMENT_RESOLVED_DEFAULT", "I", .constantValue.asInt = ADView_TEXT_ALIGNMENT_RESOLVED_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_ALIGNMENT_MASK", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_ALIGNMENT_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK_SHIFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT", "I", .constantValue.asInt = ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT, 0x18, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_ACCESSIBILITY_AUTO", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_ACCESSIBILITY_AUTO, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_ACCESSIBILITY_YES", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_ACCESSIBILITY_YES, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_ACCESSIBILITY_NO", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_ACCESSIBILITY_NO, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS, 0x19, -1, -1, -1, -1 },
    { "IMPORTANT_FOR_ACCESSIBILITY_DEFAULT", "I", .constantValue.asInt = ADView_IMPORTANT_FOR_ACCESSIBILITY_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK", "I", .constantValue.asInt = ADView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT", "I", .constantValue.asInt = ADView_PFLAG2_ACCESSIBILITY_LIVE_REGION_SHIFT, 0x18, -1, -1, -1, -1 },
    { "ACCESSIBILITY_LIVE_REGION_NONE", "I", .constantValue.asInt = ADView_ACCESSIBILITY_LIVE_REGION_NONE, 0x19, -1, -1, -1, -1 },
    { "ACCESSIBILITY_LIVE_REGION_POLITE", "I", .constantValue.asInt = ADView_ACCESSIBILITY_LIVE_REGION_POLITE, 0x19, -1, -1, -1, -1 },
    { "ACCESSIBILITY_LIVE_REGION_ASSERTIVE", "I", .constantValue.asInt = ADView_ACCESSIBILITY_LIVE_REGION_ASSERTIVE, 0x19, -1, -1, -1, -1 },
    { "ACCESSIBILITY_LIVE_REGION_DEFAULT", "I", .constantValue.asInt = ADView_ACCESSIBILITY_LIVE_REGION_DEFAULT, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK", "I", .constantValue.asInt = ADView_PFLAG2_ACCESSIBILITY_LIVE_REGION_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_ACCESSIBILITY_FOCUSED", "I", .constantValue.asInt = ADView_PFLAG2_ACCESSIBILITY_FOCUSED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED", "I", .constantValue.asInt = ADView_PFLAG2_SUBTREE_ACCESSIBILITY_STATE_CHANGED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_VIEW_QUICK_REJECTED", "I", .constantValue.asInt = ADView_PFLAG2_VIEW_QUICK_REJECTED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_PADDING_RESOLVED", "I", .constantValue.asInt = ADView_PFLAG2_PADDING_RESOLVED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_DRAWABLE_RESOLVED", "I", .constantValue.asInt = ADView_PFLAG2_DRAWABLE_RESOLVED, 0x18, -1, -1, -1, -1 },
    { "PFLAG2_HAS_TRANSIENT_STATE", "I", .constantValue.asInt = ADView_PFLAG2_HAS_TRANSIENT_STATE, 0x18, -1, -1, -1, -1 },
    { "ALL_RTL_PROPERTIES_RESOLVED", "I", .constantValue.asInt = ADView_ALL_RTL_PROPERTIES_RESOLVED, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_VIEW_IS_ANIMATING_TRANSFORM", "I", .constantValue.asInt = ADView_PFLAG3_VIEW_IS_ANIMATING_TRANSFORM, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_VIEW_IS_ANIMATING_ALPHA", "I", .constantValue.asInt = ADView_PFLAG3_VIEW_IS_ANIMATING_ALPHA, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_IS_LAID_OUT", "I", .constantValue.asInt = ADView_PFLAG3_IS_LAID_OUT, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT", "I", .constantValue.asInt = ADView_PFLAG3_MEASURE_NEEDED_BEFORE_LAYOUT, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_CALLED_SUPER", "I", .constantValue.asInt = ADView_PFLAG3_CALLED_SUPER, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_APPLYING_INSETS", "I", .constantValue.asInt = ADView_PFLAG3_APPLYING_INSETS, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_FITTING_SYSTEM_WINDOWS", "I", .constantValue.asInt = ADView_PFLAG3_FITTING_SYSTEM_WINDOWS, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_NESTED_SCROLLING_ENABLED", "I", .constantValue.asInt = ADView_PFLAG3_NESTED_SCROLLING_ENABLED, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCROLL_INDICATOR_TOP", "I", .constantValue.asInt = ADView_PFLAG3_SCROLL_INDICATOR_TOP, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCROLL_INDICATOR_BOTTOM", "I", .constantValue.asInt = ADView_PFLAG3_SCROLL_INDICATOR_BOTTOM, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCROLL_INDICATOR_LEFT", "I", .constantValue.asInt = ADView_PFLAG3_SCROLL_INDICATOR_LEFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCROLL_INDICATOR_RIGHT", "I", .constantValue.asInt = ADView_PFLAG3_SCROLL_INDICATOR_RIGHT, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCROLL_INDICATOR_START", "I", .constantValue.asInt = ADView_PFLAG3_SCROLL_INDICATOR_START, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCROLL_INDICATOR_END", "I", .constantValue.asInt = ADView_PFLAG3_SCROLL_INDICATOR_END, 0x18, -1, -1, -1, -1 },
    { "DRAG_MASK", "I", .constantValue.asInt = ADView_DRAG_MASK, 0x18, -1, -1, -1, -1 },
    { "SCROLL_INDICATORS_NONE", "I", .constantValue.asInt = ADView_SCROLL_INDICATORS_NONE, 0x18, -1, -1, -1, -1 },
    { "SCROLL_INDICATORS_PFLAG3_MASK", "I", .constantValue.asInt = ADView_SCROLL_INDICATORS_PFLAG3_MASK, 0x18, -1, -1, -1, -1 },
    { "SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT", "I", .constantValue.asInt = ADView_SCROLL_INDICATORS_TO_PFLAGS3_LSHIFT, 0x18, -1, -1, -1, -1 },
    { "SCROLL_INDICATOR_TOP", "I", .constantValue.asInt = ADView_SCROLL_INDICATOR_TOP, 0x19, -1, -1, -1, -1 },
    { "SCROLL_INDICATOR_BOTTOM", "I", .constantValue.asInt = ADView_SCROLL_INDICATOR_BOTTOM, 0x19, -1, -1, -1, -1 },
    { "SCROLL_INDICATOR_LEFT", "I", .constantValue.asInt = ADView_SCROLL_INDICATOR_LEFT, 0x19, -1, -1, -1, -1 },
    { "SCROLL_INDICATOR_RIGHT", "I", .constantValue.asInt = ADView_SCROLL_INDICATOR_RIGHT, 0x19, -1, -1, -1, -1 },
    { "SCROLL_INDICATOR_START", "I", .constantValue.asInt = ADView_SCROLL_INDICATOR_START, 0x19, -1, -1, -1, -1 },
    { "SCROLL_INDICATOR_END", "I", .constantValue.asInt = ADView_SCROLL_INDICATOR_END, 0x19, -1, -1, -1, -1 },
    { "PFLAG3_ASSIST_BLOCKED", "I", .constantValue.asInt = ADView_PFLAG3_ASSIST_BLOCKED, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_CLUSTER", "I", .constantValue.asInt = ADView_PFLAG3_CLUSTER, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_IS_AUTOFILLED", "I", .constantValue.asInt = ADView_PFLAG3_IS_AUTOFILLED, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_FINGER_DOWN", "I", .constantValue.asInt = ADView_PFLAG3_FINGER_DOWN, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_FOCUSED_BY_DEFAULT", "I", .constantValue.asInt = ADView_PFLAG3_FOCUSED_BY_DEFAULT, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_IMPORTANT_FOR_AUTOFILL_SHIFT", "I", .constantValue.asInt = ADView_PFLAG3_IMPORTANT_FOR_AUTOFILL_SHIFT, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_IMPORTANT_FOR_AUTOFILL_MASK", "I", .constantValue.asInt = ADView_PFLAG3_IMPORTANT_FOR_AUTOFILL_MASK, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE", "I", .constantValue.asInt = ADView_PFLAG3_OVERLAPPING_RENDERING_FORCED_VALUE, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED", "I", .constantValue.asInt = ADView_PFLAG3_HAS_OVERLAPPING_RENDERING_FORCED, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_TEMPORARY_DETACH", "I", .constantValue.asInt = ADView_PFLAG3_TEMPORARY_DETACH, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_NO_REVEAL_ON_FOCUS", "I", .constantValue.asInt = ADView_PFLAG3_NO_REVEAL_ON_FOCUS, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT", "I", .constantValue.asInt = ADView_PFLAG3_NOTIFY_AUTOFILL_ENTER_ON_LAYOUT, 0x18, -1, -1, -1, -1 },
    { "PFLAG3_SCREEN_READER_FOCUSABLE", "I", .constantValue.asInt = ADView_PFLAG3_SCREEN_READER_FOCUSABLE, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_AGGREGATED_VISIBLE", "I", .constantValue.asInt = ADView_PFLAG3_AGGREGATED_VISIBLE, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_AUTOFILLID_EXPLICITLY_SET", "I", .constantValue.asInt = ADView_PFLAG3_AUTOFILLID_EXPLICITLY_SET, 0x1a, -1, -1, -1, -1 },
    { "PFLAG3_ACCESSIBILITY_HEADING", "I", .constantValue.asInt = ADView_PFLAG3_ACCESSIBILITY_HEADING, 0x1a, -1, -1, -1, -1 },
    { "OVER_SCROLL_ALWAYS", "I", .constantValue.asInt = ADView_OVER_SCROLL_ALWAYS, 0x19, -1, -1, -1, -1 },
    { "OVER_SCROLL_IF_CONTENT_SCROLLS", "I", .constantValue.asInt = ADView_OVER_SCROLL_IF_CONTENT_SCROLLS, 0x19, -1, -1, -1, -1 },
    { "OVER_SCROLL_NEVER", "I", .constantValue.asInt = ADView_OVER_SCROLL_NEVER, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_VISIBLE", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_VISIBLE, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_LOW_PROFILE", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_LOW_PROFILE, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_HIDE_NAVIGATION", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_HIDE_NAVIGATION, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_FULLSCREEN", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_FULLSCREEN, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_LAYOUT_STABLE", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_LAYOUT_STABLE, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_IMMERSIVE", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_IMMERSIVE, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_IMMERSIVE_STICKY", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_IMMERSIVE_STICKY, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_LIGHT_STATUS_BAR", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_LIGHT_STATUS_BAR, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_RESERVED_LEGACY1", "I", .constantValue.asInt = ADView_SYSTEM_UI_RESERVED_LEGACY1, 0x1a, -1, -1, -1, -1 },
    { "SYSTEM_UI_RESERVED_LEGACY2", "I", .constantValue.asInt = ADView_SYSTEM_UI_RESERVED_LEGACY2, 0x1a, -1, -1, -1, -1 },
    { "SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR", "I", .constantValue.asInt = ADView_SYSTEM_UI_FLAG_LIGHT_NAVIGATION_BAR, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_HIDDEN", "I", .constantValue.asInt = ADView_STATUS_BAR_HIDDEN, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_VISIBLE", "I", .constantValue.asInt = ADView_STATUS_BAR_VISIBLE, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_EXPAND", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_EXPAND, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_NOTIFICATION_ICONS", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_NOTIFICATION_ICONS, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_NOTIFICATION_ALERTS", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_NOTIFICATION_ALERTS, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_NOTIFICATION_TICKER", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_NOTIFICATION_TICKER, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_SYSTEM_INFO", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_SYSTEM_INFO, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_HOME", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_HOME, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_BACK", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_BACK, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_CLOCK", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_CLOCK, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_RECENT", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_RECENT, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_DISABLE_SEARCH", "I", .constantValue.asInt = ADView_STATUS_BAR_DISABLE_SEARCH, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_TRANSIENT", "I", .constantValue.asInt = ADView_STATUS_BAR_TRANSIENT, 0x19, -1, -1, -1, -1 },
    { "NAVIGATION_BAR_TRANSIENT", "I", .constantValue.asInt = ADView_NAVIGATION_BAR_TRANSIENT, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_UNHIDE", "I", .constantValue.asInt = ADView_STATUS_BAR_UNHIDE, 0x19, -1, -1, -1, -1 },
    { "NAVIGATION_BAR_UNHIDE", "I", .constantValue.asInt = ADView_NAVIGATION_BAR_UNHIDE, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_TRANSLUCENT", "I", .constantValue.asInt = ADView_STATUS_BAR_TRANSLUCENT, 0x19, -1, -1, -1, -1 },
    { "NAVIGATION_BAR_TRANSLUCENT", "I", .constantValue.asInt = ADView_NAVIGATION_BAR_TRANSLUCENT, 0x19, -1, -1, -1, -1 },
    { "NAVIGATION_BAR_TRANSPARENT", "I", .constantValue.asInt = ADView_NAVIGATION_BAR_TRANSPARENT, 0x19, -1, -1, -1, -1 },
    { "STATUS_BAR_TRANSPARENT", "I", .constantValue.asInt = ADView_STATUS_BAR_TRANSPARENT, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_TRANSPARENT", "I", .constantValue.asInt = ADView_SYSTEM_UI_TRANSPARENT, 0x19, -1, -1, -1, -1 },
    { "PUBLIC_STATUS_BAR_VISIBILITY_MASK", "I", .constantValue.asInt = ADView_PUBLIC_STATUS_BAR_VISIBILITY_MASK, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_CLEARABLE_FLAGS", "I", .constantValue.asInt = ADView_SYSTEM_UI_CLEARABLE_FLAGS, 0x19, -1, -1, -1, -1 },
    { "SYSTEM_UI_LAYOUT_FLAGS", "I", .constantValue.asInt = ADView_SYSTEM_UI_LAYOUT_FLAGS, 0x19, -1, -1, -1, -1 },
    { "FIND_VIEWS_WITH_TEXT", "I", .constantValue.asInt = ADView_FIND_VIEWS_WITH_TEXT, 0x19, -1, -1, -1, -1 },
    { "FIND_VIEWS_WITH_CONTENT_DESCRIPTION", "I", .constantValue.asInt = ADView_FIND_VIEWS_WITH_CONTENT_DESCRIPTION, 0x19, -1, -1, -1, -1 },
    { "FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS", "I", .constantValue.asInt = ADView_FIND_VIEWS_WITH_ACCESSIBILITY_NODE_PROVIDERS, 0x19, -1, -1, -1, -1 },
    { "ACCESSIBILITY_CURSOR_POSITION_UNDEFINED", "I", .constantValue.asInt = ADView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED, 0x19, -1, -1, -1, -1 },
    { "SCREEN_STATE_OFF", "I", .constantValue.asInt = ADView_SCREEN_STATE_OFF, 0x19, -1, -1, -1, -1 },
    { "SCREEN_STATE_ON", "I", .constantValue.asInt = ADView_SCREEN_STATE_ON, 0x19, -1, -1, -1, -1 },
    { "SCROLL_AXIS_NONE", "I", .constantValue.asInt = ADView_SCROLL_AXIS_NONE, 0x19, -1, -1, -1, -1 },
    { "SCROLL_AXIS_HORIZONTAL", "I", .constantValue.asInt = ADView_SCROLL_AXIS_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "SCROLL_AXIS_VERTICAL", "I", .constantValue.asInt = ADView_SCROLL_AXIS_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "mOverScrollMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mParent_", "LADViewParent;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPrivateFlags_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mPrivateFlags2_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mPrivateFlags3_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSystemUiVisibility_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTransientStateCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWindowAttachCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLayoutParams_", "LADViewGroup_LayoutParams;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mViewFlags_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastIsOpaque_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLeft_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mRight_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mTop_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mBottom_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mScrollX_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mScrollY_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPaddingLeft_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPaddingRight_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPaddingTop_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mPaddingBottom_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mLayoutInsets_", "LADInsets;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLabelForId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAccessibilityTraversalBeforeId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAccessibilityTraversalAfterId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mUserPaddingRight_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUserPaddingBottom_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUserPaddingLeft_", "I", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mUserPaddingStart_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUserPaddingEnd_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUserPaddingLeftInitial_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mUserPaddingRightInitial_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "UNDEFINED_PADDING", "I", .constantValue.asInt = ADView_UNDEFINED_PADDING, 0x1a, -1, -1, -1, -1 },
    { "mLeftPaddingDefined_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRightPaddingDefined_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mOldWidthMeasureSpec_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOldHeightMeasureSpec_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMeasureCache_", "LADLongSparseLongArray;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackground_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackgroundTint_", "LADView_TintInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mForegroundInfo_", "LADView_ForegroundInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackgroundResource_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBackgroundSizeChanged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultFocusHighlight_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDefaultFocusHighlightSizeChanged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "sUseDefaultFocusHighlight", "Z", .constantValue.asLong = 0, 0xa, -1, 148, -1, -1 },
    { "sCanFocusZeroSized", "Z", .constantValue.asLong = 0, 0xa, -1, 149, -1, -1 },
    { "sAlwaysAssignFocus", "Z", .constantValue.asLong = 0, 0xa, -1, 150, -1, -1 },
    { "mContext_", "LADContext;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "mDrawableState_", "[I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNextFocusLeftId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNextFocusRightId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNextFocusUpId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNextFocusDownId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNextFocusForwardId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mNextClusterForwardId_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mDefaultFocusHighlightEnabled_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mHasPerformedLongPress_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInContextButtonPress_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mIgnoreNextUpEvent_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMinWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDrawingCacheBackgroundColor_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "DRAG_FLAG_GLOBAL", "I", .constantValue.asInt = ADView_DRAG_FLAG_GLOBAL, 0x19, -1, -1, -1, -1 },
    { "DRAG_FLAG_GLOBAL_URI_READ", "I", .constantValue.asInt = ADView_DRAG_FLAG_GLOBAL_URI_READ, 0x19, -1, -1, -1, -1 },
    { "DRAG_FLAG_GLOBAL_URI_WRITE", "I", .constantValue.asInt = ADView_DRAG_FLAG_GLOBAL_URI_WRITE, 0x19, -1, -1, -1, -1 },
    { "DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION", "I", .constantValue.asInt = ADView_DRAG_FLAG_GLOBAL_PERSISTABLE_URI_PERMISSION, 0x19, -1, -1, -1, -1 },
    { "DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION", "I", .constantValue.asInt = ADView_DRAG_FLAG_GLOBAL_PREFIX_URI_PERMISSION, 0x19, -1, -1, -1, -1 },
    { "DRAG_FLAG_OPAQUE", "I", .constantValue.asInt = ADView_DRAG_FLAG_OPAQUE, 0x19, -1, -1, -1, -1 },
    { "mVerticalScrollbarPosition_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "SCROLLBAR_POSITION_DEFAULT", "I", .constantValue.asInt = ADView_SCROLLBAR_POSITION_DEFAULT, 0x19, -1, -1, -1, -1 },
    { "SCROLLBAR_POSITION_LEFT", "I", .constantValue.asInt = ADView_SCROLLBAR_POSITION_LEFT, 0x19, -1, -1, -1, -1 },
    { "SCROLLBAR_POSITION_RIGHT", "I", .constantValue.asInt = ADView_SCROLLBAR_POSITION_RIGHT, 0x19, -1, -1, -1, -1 },
    { "LAYER_TYPE_NONE", "I", .constantValue.asInt = ADView_LAYER_TYPE_NONE, 0x19, -1, -1, -1, -1 },
    { "LAYER_TYPE_SOFTWARE", "I", .constantValue.asInt = ADView_LAYER_TYPE_SOFTWARE, 0x19, -1, -1, -1, -1 },
    { "LAYER_TYPE_HARDWARE", "I", .constantValue.asInt = ADView_LAYER_TYPE_HARDWARE, 0x19, -1, -1, -1, -1 },
    { "mLayerType_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCachingFailed_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mSendingHoverAccessibilityEvents_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRoundScrollbarRenderer_", "LADView_RoundScrollbarRenderer;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "PROVIDER_BACKGROUND", "I", .constantValue.asInt = ADView_PROVIDER_BACKGROUND, 0x1a, -1, -1, -1, -1 },
    { "PROVIDER_NONE", "I", .constantValue.asInt = ADView_PROVIDER_NONE, 0x1a, -1, -1, -1, -1 },
    { "PROVIDER_BOUNDS", "I", .constantValue.asInt = ADView_PROVIDER_BOUNDS, 0x1a, -1, -1, -1, -1 },
    { "PROVIDER_PADDED_BOUNDS", "I", .constantValue.asInt = ADView_PROVIDER_PADDED_BOUNDS, 0x1a, -1, -1, -1, -1 },
    { "mCurrentAnimation_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGhostView_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mRenderNode_", "LADRenderNode;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "verticalScrollbarWidth_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "horizontalScrollbarHeight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mAttachInfo_", "LADView_AttachInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "sThreadLocal_", "LADView_ThreadLocal;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mListenerInfo_", "LADView_ListenerInfo;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setOnKeyListener", "LADView_OnKeyListener;", "setVisibility", "I", "setEnabled", "Z", "setFocusable", "setLayoutDirection", "setWillNotDraw", "setClickable", "setLongClickable", "setPressed", "ZFF", "dispatchSetPressed", "setHovered", "onHoverChanged", "onSizeChanged", "IIII", "offsetTopAndBottom", "offsetLeftAndRight", "setLayoutParams", "LADViewGroup_LayoutParams;", "invalidate", "LADRect;", "invalidateInternal", "IIIIZZ", "invalidateViewProperty", "ZZ", "canScrollHorizontally", "canScrollVertically", "assignParent", "LADViewParent;", "onRtlPropertiesChanged", "invalidateInheritedLayoutMode", "setDuplicateParentStateEnabled", "isLayoutModeOptical", "LNSObject;", "setOpticalFrame", "layout", "onLayout", "ZIIII", "setFrame", "onCreateDrawableState", "mergeDrawableStates", "[I[I", "setBackgroundTintList", "LADColorStateList;", "setForeground", "LADDrawable;", "setForegroundGravity", "setForegroundTintList", "setPadding", "internalSetPadding", "setPaddingRelative", "setSelected", "dispatchSetSelected", "setActivated", "dispatchSetActivated", "findViewTraversal", "<T:Lr/android/view/View;>(I)TT;", "findViewById", "setTag", "getTag", "ILNSObject;", "setKeyedTag", "measure", "II", "onMeasure", "setMeasuredDimension", "setMeasuredDimensionRaw", "combineMeasuredStates", "resolveSize", "resolveSizeAndState", "III", "getDefaultSize", "setMinimumHeight", "setMinimumWidth", "setTextDirection", "setTextAlignment", "onDraw", "LADCanvas;", "setAlpha", "F", "setRotation", "setRotationX", "setRotationY", "setScaleX", "setScaleY", "setPivotX", "setPivotY", "setTranslationX", "setTranslationY", "setTranslationZ", "setElevation", "clearFocusInternal", "LADView;ZZ", "notifyEnterOrExitForAutoFillIfNeeded", "setBackgroundColor", "setSystemUiVisibility", "setOverScrollMode", "setVerticalScrollbarWidth", "setHorizontalScrollbarHeight", "setFlags", "sizeChange", "onResolveDrawables", "setId", "unFocus", "dispatchAttachedToWindow", "LADView_AttachInfo;I", "setBackground", "setAccessibilityDelegate", "setDrawingCacheBackgroundColor", "setImportantForAccessibility", "setDrawingCacheEnabled", "dispatchKeyEvent", "LADKeyEvent;", "unscheduleDrawable", "drawableHotspotChanged", "FF", "setFocused", "onFocusChanged", "setDragHovered", "onDragHovered", "setDragCanAccept", "onDragCanAccept", "getForegroundBounds", "invokeKeyListenerDown", "invokeKeyListenerUp", "sendAccessibilityEvent", "notifyViewAccessibilityStateChangedIfNeeded", &ADView_DEBUG_DRAW, &ADView_VIEW_LOG_TAG, &ADView_mDebugViewAttributes, &ADView_sCompatibilityDone, &ADView_sUseBrokenMakeMeasureSpec, &ADView_sUseZeroUnspecifiedMeasureSpec, &ADView_sIgnoreMeasureCache, &ADView_sAlwaysRemeasureExactly, &ADView_sLayoutParamsAlwaysChanged, &ADView_sTextureViewIgnoresDrawableSetters, &ADView_sPreserveMarginParamsInLayoutParamConversion, &ADView_sCascadedDragDrop, &ADView_sHasFocusableExcludeAutoFocusable, &ADView_sAutoFocusableOffUIThreadWontNotifyParents, &ADView_sThrowOnInvalidFloatProperties, &ADView_sAcceptZeroSizeDragShadow, "Lr/android/util/SparseArray<Ljava/lang/Object;>;", &ADView_sNextAccessibilityViewId, &ADView_sUseDefaultFocusHighlight, &ADView_sCanFocusZeroSized, &ADView_sAlwaysAssignFocus, "LADView_ForegroundInfo;LADView_OnScrollChangeListener;LADView_MeasureSpec;LADView_OnKeyListener;LADView_OnTouchListener;LADView_OnHoverListener;LADView_OnLongClickListener;LADView_OnDragListener;LADView_OnFocusChangeListener;LADView_OnClickListener;LADView_OnContextClickListener;LADView_ThreadedRenderer;LADView_AttachInfo;LADView_ThreadLocal;LADView_TextUtils;LADView_ViewRootImpl;LADView_ListenerInfo;LADView_OnLayoutChangeListener;LADView_AccessibilityNodeInfo;LADView_AccessibilityNodeProvider;LADView_RoundScrollbarRenderer;LADView_MotionEvent;LADView_DragEvent;LADView_TintInfo;" };
  static const J2ObjcClassInfo _ADView = { "View", "r.android.view", ptrTable, methods, fields, 7, 0x1, 278, 383, -1, 151, -1, -1, -1 };
  return &_ADView;
}

@end

void ADView_setPressedWithBoolean_withFloat_withFloat_(ADView *self, jboolean pressed, jfloat x, jfloat y) {
  if (pressed) {
    [self drawableHotspotChangedWithFloat:x withFloat:y];
  }
  [self setPressedWithBoolean:pressed];
}

jboolean ADView_hasSize(ADView *self) {
  return (self->mBottom_ > self->mTop_) && (self->mRight_ > self->mLeft_);
}

jboolean ADView_canTakeFocus(ADView *self) {
  return ((self->mViewFlags_ & ADView_VISIBILITY_MASK) == ADView_VISIBLE) && ((self->mViewFlags_ & ADView_FOCUSABLE) == ADView_FOCUSABLE) && ((self->mViewFlags_ & ADView_ENABLED_MASK) == ADView_ENABLED) && (ADView_sCanFocusZeroSized || ![self isLayoutValid] || ADView_hasSize(self));
}

id<ADViewParent> ADView_getParent(ADView *self) {
  return self->mParent_;
}

jint ADView_getWidth(ADView *self) {
  return self->mRight_ - self->mLeft_;
}

jint ADView_getHeight(ADView *self) {
  return self->mBottom_ - self->mTop_;
}

jint ADView_getMeasuredWidth(ADView *self) {
  return self->mMeasuredWidth_ & ADView_MEASURED_SIZE_MASK;
}

jint ADView_getMeasuredHeight(ADView *self) {
  return self->mMeasuredHeight_ & ADView_MEASURED_SIZE_MASK;
}

jboolean ADView_skipInvalidate(ADView *self) {
  return (self->mViewFlags_ & ADView_VISIBILITY_MASK) != ADView_VISIBLE && self->mCurrentAnimation_ == nil && (!([self->mParent_ isKindOfClass:[ADViewGroup class]]) || ![((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(self->mParent_, [ADViewGroup class])))) isViewTransitioningWithADView:self]);
}

ADView *ADView_getProjectionReceiver(ADView *self) {
  id<ADViewParent> p = ADView_getParent(self);
  while (p != nil && [p isKindOfClass:[ADView class]]) {
    ADView *v = (ADView *) cast_chk(p, [ADView class]);
    if (ADView_isProjectionReceiver(v)) {
      return v;
    }
    p = [p getParent];
  }
  return nil;
}

jboolean ADView_isProjectionReceiver(ADView *self) {
  return self->mBackground_ != nil;
}

jboolean ADView_needRtlPropertiesResolution(ADView *self) {
  return (self->mPrivateFlags2_ & ADView_ALL_RTL_PROPERTIES_RESOLVED) != ADView_ALL_RTL_PROPERTIES_RESOLVED;
}

jboolean ADView_isLayoutModeOpticalWithId_(id o) {
  ADView_initialize();
  return [o isKindOfClass:[ADViewGroup class]] && [((ADViewGroup *) nil_chk(((ADViewGroup *) cast_chk(o, [ADViewGroup class])))) isLayoutModeOptical];
}

jboolean ADView_setOpticalFrameWithInt_withInt_withInt_withInt_(ADView *self, jint left, jint top, jint right, jint bottom) {
  ADInsets *parentInsets = [self->mParent_ isKindOfClass:[ADView class]] ? [((ADView *) nil_chk(((ADView *) cast_chk(self->mParent_, [ADView class])))) getOpticalInsets] : JreLoadStatic(ADInsets, NONE);
  ADInsets *childInsets = JreRetainedLocalValue([self getOpticalInsets]);
  return [self setFrameWithInt:left + parentInsets->left_ - ((ADInsets *) nil_chk(childInsets))->left_ withInt:top + parentInsets->top_ - childInsets->top_ withInt:right + parentInsets->left_ + childInsets->right_ withInt:bottom + parentInsets->top_ + childInsets->bottom_];
}

jboolean ADView_hasParentWantsFocus(ADView *self) {
  id<ADViewParent> parent = JreRetainedLocalValue(self->mParent_);
  while ([parent isKindOfClass:[ADViewGroup class]]) {
    ADViewGroup *pv = (ADViewGroup *) cast_chk(parent, [ADViewGroup class]);
    if ((((ADViewGroup *) nil_chk(pv))->mPrivateFlags_ & ADView_PFLAG_WANTS_FOCUS) != 0) {
      return true;
    }
    parent = pv->mParent_;
  }
  return false;
}

IOSIntArray *ADView_getDrawableState(ADView *self) {
  if ((self->mDrawableState_ != nil) && ((self->mPrivateFlags_ & ADView_PFLAG_DRAWABLE_STATE_DIRTY) == 0)) {
    return self->mDrawableState_;
  }
  else {
    JreStrongAssign(&self->mDrawableState_, [self onCreateDrawableStateWithInt:0]);
    self->mPrivateFlags_ &= ~ADView_PFLAG_DRAWABLE_STATE_DIRTY;
    return self->mDrawableState_;
  }
}

IOSIntArray *ADView_mergeDrawableStatesWithIntArray_withIntArray_(IOSIntArray *baseState, IOSIntArray *additionalState) {
  ADView_initialize();
  jint N = ((IOSIntArray *) nil_chk(baseState))->size_;
  jint i = N - 1;
  while (i >= 0 && IOSIntArray_Get(baseState, i) == 0) {
    i--;
  }
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(additionalState, 0, baseState, i + 1, ((IOSIntArray *) nil_chk(additionalState))->size_);
  return baseState;
}

void ADView_setKeyedTagWithInt_withId_(ADView *self, jint key, id tag) {
  if (self->mKeyedTags_ == nil) {
    JreStrongAssignAndConsume(&self->mKeyedTags_, new_ADSparseArray_initWithInt_(2));
  }
  [self->mKeyedTags_ putWithInt:key withId:tag];
}

void ADView_setMeasuredDimensionWithInt_withInt_(ADView *self, jint measuredWidth, jint measuredHeight) {
  jboolean optical = ADView_isLayoutModeOpticalWithId_(self);
  if (optical != ADView_isLayoutModeOpticalWithId_(self->mParent_)) {
    ADInsets *insets = JreRetainedLocalValue([self getOpticalInsets]);
    jint opticalWidth = ((ADInsets *) nil_chk(insets))->left_ + insets->right_;
    jint opticalHeight = insets->top_ + insets->bottom_;
    measuredWidth += optical ? opticalWidth : -opticalWidth;
    measuredHeight += optical ? opticalHeight : -opticalHeight;
  }
  ADView_setMeasuredDimensionRawWithInt_withInt_(self, measuredWidth, measuredHeight);
}

void ADView_setMeasuredDimensionRawWithInt_withInt_(ADView *self, jint measuredWidth, jint measuredHeight) {
  self->mMeasuredWidth_ = measuredWidth;
  self->mMeasuredHeight_ = measuredHeight;
  self->mPrivateFlags_ |= ADView_PFLAG_MEASURED_DIMENSION_SET;
}

jint ADView_combineMeasuredStatesWithInt_withInt_(jint curState, jint newState) {
  ADView_initialize();
  return curState | newState;
}

jint ADView_resolveSizeWithInt_withInt_(jint size, jint measureSpec) {
  ADView_initialize();
  return ADView_resolveSizeAndStateWithInt_withInt_withInt_(size, measureSpec, 0) & ADView_MEASURED_SIZE_MASK;
}

jint ADView_resolveSizeAndStateWithInt_withInt_withInt_(jint size, jint measureSpec, jint childMeasuredState) {
  ADView_initialize();
  jint specMode = ADView_MeasureSpec_getModeWithInt_(measureSpec);
  jint specSize = ADView_MeasureSpec_getSizeWithInt_(measureSpec);
  jint result;
  switch (specMode) {
    case ADView_MeasureSpec_AT_MOST:
    if (specSize < size) {
      result = specSize | ADView_MEASURED_STATE_TOO_SMALL;
    }
    else {
      result = size;
    }
    break;
    case ADView_MeasureSpec_EXACTLY:
    result = specSize;
    break;
    case ADView_MeasureSpec_UNSPECIFIED:
    default:
    result = size;
  }
  return result | (childMeasuredState & ADView_MEASURED_STATE_MASK);
}

jint ADView_getDefaultSizeWithInt_withInt_(jint size, jint measureSpec) {
  ADView_initialize();
  jint result = size;
  jint specMode = ADView_MeasureSpec_getModeWithInt_(measureSpec);
  jint specSize = ADView_MeasureSpec_getSizeWithInt_(measureSpec);
  switch (specMode) {
    case ADView_MeasureSpec_UNSPECIFIED:
    result = size;
    break;
    case ADView_MeasureSpec_AT_MOST:
    case ADView_MeasureSpec_EXACTLY:
    result = specSize;
    break;
  }
  return result;
}

void ADView_init(ADView *self) {
  NSObject_init(self);
  self->mRecreateDisplayList_ = false;
  self->mID_ = ADView_NO_ID;
  self->mAutofillViewId_ = ADView_NO_ID;
  self->mAccessibilityViewId_ = ADView_NO_ID;
  self->mAccessibilityCursorPosition_ = ADView_ACCESSIBILITY_CURSOR_POSITION_UNDEFINED;
  self->mTag_ = nil;
  self->mTransientStateCount_ = 0;
  self->mPaddingLeft_ = 0;
  self->mPaddingRight_ = 0;
  self->mLabelForId_ = ADView_NO_ID;
  self->mAccessibilityTraversalBeforeId_ = ADView_NO_ID;
  self->mAccessibilityTraversalAfterId_ = ADView_NO_ID;
  self->mLeftPaddingDefined_ = false;
  self->mRightPaddingDefined_ = false;
  self->mOldWidthMeasureSpec_ = JavaLangInteger_MIN_VALUE;
  self->mOldHeightMeasureSpec_ = JavaLangInteger_MIN_VALUE;
  JreStrongAssign(&self->mDrawableState_, nil);
  self->mNextFocusLeftId_ = ADView_NO_ID;
  self->mNextFocusRightId_ = ADView_NO_ID;
  self->mNextFocusUpId_ = ADView_NO_ID;
  self->mNextFocusDownId_ = ADView_NO_ID;
  self->mNextFocusForwardId_ = ADView_NO_ID;
  self->mNextClusterForwardId_ = ADView_NO_ID;
  self->mDefaultFocusHighlightEnabled_ = true;
  self->mDrawingCacheBackgroundColor_ = 0;
  self->mLayerType_ = ADView_LAYER_TYPE_NONE;
  JreStrongAssign(&self->mGhostView_, nil);
  JreStrongAssignAndConsume(&self->mRenderNode_, new_ADRenderNode_init());
  JreStrongAssignAndConsume(&self->sThreadLocal_, new_ADView_ThreadLocal_initWithADView_(self));
  self->mViewFlags_ = ADView_SOUND_EFFECTS_ENABLED | ADView_HAPTIC_FEEDBACK_ENABLED;
  self->mPrivateFlags2_ = (JreLShift32(ADView_LAYOUT_DIRECTION_DEFAULT, ADView_PFLAG2_LAYOUT_DIRECTION_MASK_SHIFT)) | (JreLShift32(ADView_TEXT_DIRECTION_DEFAULT, ADView_PFLAG2_TEXT_DIRECTION_MASK_SHIFT)) | (ADView_PFLAG2_TEXT_DIRECTION_RESOLVED_DEFAULT) | (JreLShift32(ADView_TEXT_ALIGNMENT_DEFAULT, ADView_PFLAG2_TEXT_ALIGNMENT_MASK_SHIFT)) | (ADView_PFLAG2_TEXT_ALIGNMENT_RESOLVED_DEFAULT) | (JreLShift32(ADView_IMPORTANT_FOR_ACCESSIBILITY_DEFAULT, ADView_PFLAG2_IMPORTANT_FOR_ACCESSIBILITY_SHIFT));
}

ADView *new_ADView_init() {
  J2OBJC_NEW_IMPL(ADView, init)
}

ADView *create_ADView_init() {
  J2OBJC_CREATE_IMPL(ADView, init)
}

jboolean ADView_restoreDefaultFocus(ADView *self) {
  return false;
}

void ADView_notifyEnterOrExitForAutoFillIfNeededWithBoolean_(ADView *self, jboolean b) {
}

jfloat ADView_getFinalAlpha(ADView *self) {
  return 1;
}

jboolean ADView_hasRtlSupport(ADView *self) {
  return true;
}

jboolean ADView_isRtlCompatibilityMode(ADView *self) {
  return !ADView_hasRtlSupport(self);
}

void ADView_sizeChangeWithInt_withInt_withInt_withInt_(ADView *self, jint newWidth, jint newHeight, jint oldWidth, jint oldHeight) {
  [self onSizeChangedWithInt:newWidth withInt:newHeight withInt:oldWidth withInt:oldHeight];
}

void ADView_resetPressedState(ADView *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView)

@implementation ADView_ForegroundInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_ForegroundInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)dealloc {
  RELEASE_(mDrawable_);
  RELEASE_(mTintInfo_);
  RELEASE_(mSelfBounds_);
  RELEASE_(mOverlayBounds_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mDrawable_", "LADDrawable;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTintInfo_", "LADView_TintInfo;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mGravity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mInsidePadding_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mBoundsChanged_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSelfBounds_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mOverlayBounds_", "LADRect;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADView;" };
  static const J2ObjcClassInfo _ADView_ForegroundInfo = { "ForegroundInfo", "r.android.view", ptrTable, methods, fields, 7, 0xa, 1, 7, 0, -1, -1, -1, -1 };
  return &_ADView_ForegroundInfo;
}

@end

void ADView_ForegroundInfo_init(ADView_ForegroundInfo *self) {
  NSObject_init(self);
  self->mGravity_ = ADGravity_FILL;
  self->mInsidePadding_ = true;
  self->mBoundsChanged_ = true;
  JreStrongAssignAndConsume(&self->mSelfBounds_, new_ADRect_init());
  JreStrongAssignAndConsume(&self->mOverlayBounds_, new_ADRect_init());
}

ADView_ForegroundInfo *new_ADView_ForegroundInfo_init() {
  J2OBJC_NEW_IMPL(ADView_ForegroundInfo, init)
}

ADView_ForegroundInfo *create_ADView_ForegroundInfo_init() {
  J2OBJC_CREATE_IMPL(ADView_ForegroundInfo, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_ForegroundInfo)

@implementation ADView_OnScrollChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onScrollChangeWithADView:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onScrollChange", "LADView;IIII", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnScrollChangeListener = { "OnScrollChangeListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADView_OnScrollChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnScrollChangeListener)

@implementation ADView_MeasureSpec

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_MeasureSpec_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)makeMeasureSpecWithInt:(jint)size
                       withInt:(jint)mode {
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, mode);
}

+ (jint)makeSafeMeasureSpecWithInt:(jint)size
                           withInt:(jint)mode {
  return ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(size, mode);
}

+ (jint)getModeWithInt:(jint)measureSpec {
  return ADView_MeasureSpec_getModeWithInt_(measureSpec);
}

+ (jint)getSizeWithInt:(jint)measureSpec {
  return ADView_MeasureSpec_getSizeWithInt_(measureSpec);
}

+ (jint)adjustWithInt:(jint)measureSpec
              withInt:(jint)delta {
  return ADView_MeasureSpec_adjustWithInt_withInt_(measureSpec, delta);
}

+ (NSString *)toStringWithInt:(jint)measureSpec {
  return ADView_MeasureSpec_toStringWithInt_(measureSpec);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 5, 4, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 6, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 7, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(makeMeasureSpecWithInt:withInt:);
  methods[2].selector = @selector(makeSafeMeasureSpecWithInt:withInt:);
  methods[3].selector = @selector(getModeWithInt:);
  methods[4].selector = @selector(getSizeWithInt:);
  methods[5].selector = @selector(adjustWithInt:withInt:);
  methods[6].selector = @selector(toStringWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "MODE_SHIFT", "I", .constantValue.asInt = ADView_MeasureSpec_MODE_SHIFT, 0x1a, -1, -1, -1, -1 },
    { "MODE_MASK", "I", .constantValue.asInt = ADView_MeasureSpec_MODE_MASK, 0x1a, -1, -1, -1, -1 },
    { "UNSPECIFIED", "I", .constantValue.asInt = ADView_MeasureSpec_UNSPECIFIED, 0x19, -1, -1, -1, -1 },
    { "EXACTLY", "I", .constantValue.asInt = ADView_MeasureSpec_EXACTLY, 0x19, -1, -1, -1, -1 },
    { "AT_MOST", "I", .constantValue.asInt = ADView_MeasureSpec_AT_MOST, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "makeMeasureSpec", "II", "makeSafeMeasureSpec", "getMode", "I", "getSize", "adjust", "toString", "LADView;" };
  static const J2ObjcClassInfo _ADView_MeasureSpec = { "MeasureSpec", "r.android.view", ptrTable, methods, fields, 7, 0x9, 7, 5, 8, -1, -1, -1, -1 };
  return &_ADView_MeasureSpec;
}

@end

void ADView_MeasureSpec_init(ADView_MeasureSpec *self) {
  NSObject_init(self);
}

ADView_MeasureSpec *new_ADView_MeasureSpec_init() {
  J2OBJC_NEW_IMPL(ADView_MeasureSpec, init)
}

ADView_MeasureSpec *create_ADView_MeasureSpec_init() {
  J2OBJC_CREATE_IMPL(ADView_MeasureSpec, init)
}

jint ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(jint size, jint mode) {
  ADView_MeasureSpec_initialize();
  if (JreLoadStatic(ADView, sUseBrokenMakeMeasureSpec)) {
    return size + mode;
  }
  else {
    return (size & ~ADView_MeasureSpec_MODE_MASK) | (mode & ADView_MeasureSpec_MODE_MASK);
  }
}

jint ADView_MeasureSpec_makeSafeMeasureSpecWithInt_withInt_(jint size, jint mode) {
  ADView_MeasureSpec_initialize();
  if (JreLoadStatic(ADView, sUseZeroUnspecifiedMeasureSpec) && mode == ADView_MeasureSpec_UNSPECIFIED) {
    return 0;
  }
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, mode);
}

jint ADView_MeasureSpec_getModeWithInt_(jint measureSpec) {
  ADView_MeasureSpec_initialize();
  return (measureSpec & ADView_MeasureSpec_MODE_MASK);
}

jint ADView_MeasureSpec_getSizeWithInt_(jint measureSpec) {
  ADView_MeasureSpec_initialize();
  return (measureSpec & ~ADView_MeasureSpec_MODE_MASK);
}

jint ADView_MeasureSpec_adjustWithInt_withInt_(jint measureSpec, jint delta) {
  ADView_MeasureSpec_initialize();
  jint mode = ADView_MeasureSpec_getModeWithInt_(measureSpec);
  jint size = ADView_MeasureSpec_getSizeWithInt_(measureSpec);
  if (mode == ADView_MeasureSpec_UNSPECIFIED) {
    return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, ADView_MeasureSpec_UNSPECIFIED);
  }
  size += delta;
  if (size < 0) {
    ADLog_eWithNSString_withNSString_(ADView_VIEW_LOG_TAG, JreStrcat("$I$$$I", @"MeasureSpec.adjust: new size would be negative! (", size, @") spec: ", ADView_MeasureSpec_toStringWithInt_(measureSpec), @" delta: ", delta));
    size = 0;
  }
  return ADView_MeasureSpec_makeMeasureSpecWithInt_withInt_(size, mode);
}

NSString *ADView_MeasureSpec_toStringWithInt_(jint measureSpec) {
  ADView_MeasureSpec_initialize();
  jint mode = ADView_MeasureSpec_getModeWithInt_(measureSpec);
  jint size = ADView_MeasureSpec_getSizeWithInt_(measureSpec);
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithNSString_(@"MeasureSpec: ");
  if (mode == ADView_MeasureSpec_UNSPECIFIED) [sb appendWithNSString:@"UNSPECIFIED "];
  else if (mode == ADView_MeasureSpec_EXACTLY) [sb appendWithNSString:@"EXACTLY "];
  else if (mode == ADView_MeasureSpec_AT_MOST) [sb appendWithNSString:@"AT_MOST "];
  else [((JavaLangStringBuilder *) nil_chk([sb appendWithInt:mode])) appendWithNSString:@" "];
  [sb appendWithInt:size];
  return [sb description];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_MeasureSpec)

@implementation ADView_OnKeyListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onKeyWithADView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onKey", "LADView;ILADKeyEvent;", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnKeyListener = { "OnKeyListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADView_OnKeyListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnKeyListener)

@implementation ADView_OnTouchListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onTouchWithADView:withADView_MotionEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onTouch", "LADView;LADView_MotionEvent;", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnTouchListener = { "OnTouchListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADView_OnTouchListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnTouchListener)

@implementation ADView_OnHoverListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onHoverWithADView:withADView_MotionEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onHover", "LADView;LADView_MotionEvent;", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnHoverListener = { "OnHoverListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADView_OnHoverListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnHoverListener)

@implementation ADView_OnLongClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onLongClickWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onLongClick", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnLongClickListener = { "OnLongClickListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_ADView_OnLongClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnLongClickListener)

@implementation ADView_OnDragListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onDragWithADView:withADView_DragEvent:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onDrag", "LADView;LADView_DragEvent;", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnDragListener = { "OnDragListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADView_OnDragListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnDragListener)

@implementation ADView_OnFocusChangeListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onFocusChangeWithADView:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onFocusChange", "LADView;Z", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnFocusChangeListener = { "OnFocusChangeListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADView_OnFocusChangeListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnFocusChangeListener)

@implementation ADView_OnClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onClickWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onClick", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnClickListener = { "OnClickListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_ADView_OnClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnClickListener)

@implementation ADView_OnContextClickListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "Z", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onContextClickWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onContextClick", "LADView;" };
  static const J2ObjcClassInfo _ADView_OnContextClickListener = { "OnContextClickListener", "r.android.view", ptrTable, methods, NULL, 7, 0x609, 1, 0, 1, -1, -1, -1, -1 };
  return &_ADView_OnContextClickListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADView_OnContextClickListener)

@implementation ADView_ThreadedRenderer

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_ThreadedRenderer_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isAvailable {
  return ADView_ThreadedRenderer_isAvailable();
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isAvailable);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADView;" };
  static const J2ObjcClassInfo _ADView_ThreadedRenderer = { "ThreadedRenderer", "r.android.view", ptrTable, methods, NULL, 7, 0x8, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADView_ThreadedRenderer;
}

@end

void ADView_ThreadedRenderer_init(ADView_ThreadedRenderer *self) {
  NSObject_init(self);
}

ADView_ThreadedRenderer *new_ADView_ThreadedRenderer_init() {
  J2OBJC_NEW_IMPL(ADView_ThreadedRenderer, init)
}

ADView_ThreadedRenderer *create_ADView_ThreadedRenderer_init() {
  J2OBJC_CREATE_IMPL(ADView_ThreadedRenderer, init)
}

jboolean ADView_ThreadedRenderer_isAvailable() {
  ADView_ThreadedRenderer_initialize();
  return false;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_ThreadedRenderer)

@implementation ADView_AttachInfo

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_AttachInfo_initWithADView_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(mRootView_);
  RELEASE_(mTmpInvalRect_);
  RELEASE_(mViewRequestingLayout_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mRootView_", "LADView;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mHardwareAccelerationRequested_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mWindowVisibility_", "I", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTmpInvalRect_", "LADRect;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mViewRequestingLayout_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mKeepScreenOn_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADView;" };
  static const J2ObjcClassInfo _ADView_AttachInfo = { "AttachInfo", "r.android.view", ptrTable, methods, fields, 7, 0x0, 1, 6, 0, -1, -1, -1, -1 };
  return &_ADView_AttachInfo;
}

@end

void ADView_AttachInfo_initWithADView_(ADView_AttachInfo *self, ADView *outer$) {
  NSObject_init(self);
  self->mWindowVisibility_ = ADView_VISIBLE;
}

ADView_AttachInfo *new_ADView_AttachInfo_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_AttachInfo, initWithADView_, outer$)
}

ADView_AttachInfo *create_ADView_AttachInfo_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_AttachInfo, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_AttachInfo)

@implementation ADView_ThreadLocal

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_ThreadLocal_initWithADView_(self, outer$);
  return self;
}

- (ADRect *)get {
  return obj_;
}

- (void)setWithADRect:(ADRect *)obj {
  JreStrongAssign(&self->obj_, obj);
}

- (void)dealloc {
  RELEASE_(obj_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LADRect;", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(get);
  methods[2].selector = @selector(setWithADRect:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "obj_", "LADRect;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADView;", "set", "LADRect;" };
  static const J2ObjcClassInfo _ADView_ThreadLocal = { "ThreadLocal", "r.android.view", ptrTable, methods, fields, 7, 0x0, 3, 1, 0, -1, -1, -1, -1 };
  return &_ADView_ThreadLocal;
}

@end

void ADView_ThreadLocal_initWithADView_(ADView_ThreadLocal *self, ADView *outer$) {
  NSObject_init(self);
}

ADView_ThreadLocal *new_ADView_ThreadLocal_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_ThreadLocal, initWithADView_, outer$)
}

ADView_ThreadLocal *create_ADView_ThreadLocal_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_ThreadLocal, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_ThreadLocal)

@implementation ADView_TextUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_TextUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jint)getLayoutDirectionFromLocaleWithJavaUtilLocale:(JavaUtilLocale *)l {
  return ADView_TextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(l);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x8, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getLayoutDirectionFromLocaleWithJavaUtilLocale:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "getLayoutDirectionFromLocale", "LJavaUtilLocale;", "LADView;" };
  static const J2ObjcClassInfo _ADView_TextUtils = { "TextUtils", "r.android.view", ptrTable, methods, NULL, 7, 0x8, 2, 0, 2, -1, -1, -1, -1 };
  return &_ADView_TextUtils;
}

@end

void ADView_TextUtils_init(ADView_TextUtils *self) {
  NSObject_init(self);
}

ADView_TextUtils *new_ADView_TextUtils_init() {
  J2OBJC_NEW_IMPL(ADView_TextUtils, init)
}

ADView_TextUtils *create_ADView_TextUtils_init() {
  J2OBJC_CREATE_IMPL(ADView_TextUtils, init)
}

jint ADView_TextUtils_getLayoutDirectionFromLocaleWithJavaUtilLocale_(JavaUtilLocale *l) {
  ADView_TextUtils_initialize();
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_TextUtils)

@implementation ADView_ViewRootImpl

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_ViewRootImpl_initWithADView_(self, outer$);
  return self;
}

- (jboolean)isInLayout {
  return false;
}

- (jboolean)requestLayoutDuringLayoutWithADView:(ADView *)view {
  return false;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x0, 1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(isInLayout);
  methods[2].selector = @selector(requestLayoutDuringLayoutWithADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADView;", "requestLayoutDuringLayout" };
  static const J2ObjcClassInfo _ADView_ViewRootImpl = { "ViewRootImpl", "r.android.view", ptrTable, methods, NULL, 7, 0x0, 3, 0, 0, -1, -1, -1, -1 };
  return &_ADView_ViewRootImpl;
}

@end

void ADView_ViewRootImpl_initWithADView_(ADView_ViewRootImpl *self, ADView *outer$) {
  NSObject_init(self);
}

ADView_ViewRootImpl *new_ADView_ViewRootImpl_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_ViewRootImpl, initWithADView_, outer$)
}

ADView_ViewRootImpl *create_ADView_ViewRootImpl_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_ViewRootImpl, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_ViewRootImpl)

@implementation ADView_ListenerInfo

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_ListenerInfo_initWithADView_(self, outer$);
  return self;
}

- (id)java_clone {
  return nil;
}

- (void)dealloc {
  RELEASE_(mOnLayoutChangeListeners_);
  RELEASE_(mOnKeyListener_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(java_clone);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mOnLayoutChangeListeners_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x0, -1, -1, 2, -1 },
    { "mOnKeyListener_", "LADView_OnKeyListener;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADView;", "clone", "Ljava/util/ArrayList<Lr/android/view/View$OnLayoutChangeListener;>;" };
  static const J2ObjcClassInfo _ADView_ListenerInfo = { "ListenerInfo", "r.android.view", ptrTable, methods, fields, 7, 0x0, 2, 2, 0, -1, -1, -1, -1 };
  return &_ADView_ListenerInfo;
}

@end

void ADView_ListenerInfo_initWithADView_(ADView_ListenerInfo *self, ADView *outer$) {
  NSObject_init(self);
}

ADView_ListenerInfo *new_ADView_ListenerInfo_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_ListenerInfo, initWithADView_, outer$)
}

ADView_ListenerInfo *create_ADView_ListenerInfo_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_ListenerInfo, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_ListenerInfo)

@implementation ADView_OnLayoutChangeListener

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_OnLayoutChangeListener_initWithADView_(self, outer$);
  return self;
}

- (void)onLayoutChangeWithADView:(ADView *)v
                         withInt:(jint)l
                         withInt:(jint)t
                         withInt:(jint)r
                         withInt:(jint)b
                         withInt:(jint)oldL
                         withInt:(jint)oldT
                         withInt:(jint)oldR
                         withInt:(jint)oldB {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(onLayoutChangeWithADView:withInt:withInt:withInt:withInt:withInt:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADView;", "onLayoutChange", "LADView;IIIIIIII" };
  static const J2ObjcClassInfo _ADView_OnLayoutChangeListener = { "OnLayoutChangeListener", "r.android.view", ptrTable, methods, NULL, 7, 0x0, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADView_OnLayoutChangeListener;
}

@end

void ADView_OnLayoutChangeListener_initWithADView_(ADView_OnLayoutChangeListener *self, ADView *outer$) {
  NSObject_init(self);
}

ADView_OnLayoutChangeListener *new_ADView_OnLayoutChangeListener_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_OnLayoutChangeListener, initWithADView_, outer$)
}

ADView_OnLayoutChangeListener *create_ADView_OnLayoutChangeListener_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_OnLayoutChangeListener, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_OnLayoutChangeListener)

@implementation ADView_AccessibilityNodeInfo

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_AccessibilityNodeInfo_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id)getSourceNodeId {
  return nil;
}

+ (jint)getVirtualDescendantIdWithId:(id)sourceNodeId {
  return ADView_AccessibilityNodeInfo_getVirtualDescendantIdWithId_(sourceNodeId);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x9, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getSourceNodeId);
  methods[2].selector = @selector(getVirtualDescendantIdWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACTION_ACCESSIBILITY_FOCUS", "I", .constantValue.asInt = ADView_AccessibilityNodeInfo_ACTION_ACCESSIBILITY_FOCUS, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getVirtualDescendantId", "LNSObject;", "LADView;" };
  static const J2ObjcClassInfo _ADView_AccessibilityNodeInfo = { "AccessibilityNodeInfo", "r.android.view", ptrTable, methods, fields, 7, 0x9, 3, 1, 2, -1, -1, -1, -1 };
  return &_ADView_AccessibilityNodeInfo;
}

@end

void ADView_AccessibilityNodeInfo_init(ADView_AccessibilityNodeInfo *self) {
  NSObject_init(self);
}

ADView_AccessibilityNodeInfo *new_ADView_AccessibilityNodeInfo_init() {
  J2OBJC_NEW_IMPL(ADView_AccessibilityNodeInfo, init)
}

ADView_AccessibilityNodeInfo *create_ADView_AccessibilityNodeInfo_init() {
  J2OBJC_CREATE_IMPL(ADView_AccessibilityNodeInfo, init)
}

jint ADView_AccessibilityNodeInfo_getVirtualDescendantIdWithId_(id sourceNodeId) {
  ADView_AccessibilityNodeInfo_initialize();
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_AccessibilityNodeInfo)

@implementation ADView_AccessibilityNodeProvider

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_AccessibilityNodeProvider_initWithADView_(self, outer$);
  return self;
}

- (void)performActionWithInt:(jint)virtualViewId
                     withInt:(jint)actionAccessibilityFocus
                      withId:(id)object {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  methods[1].selector = @selector(performActionWithInt:withInt:withId:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADView;", "performAction", "IILNSObject;" };
  static const J2ObjcClassInfo _ADView_AccessibilityNodeProvider = { "AccessibilityNodeProvider", "r.android.view", ptrTable, methods, NULL, 7, 0x1, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADView_AccessibilityNodeProvider;
}

@end

void ADView_AccessibilityNodeProvider_initWithADView_(ADView_AccessibilityNodeProvider *self, ADView *outer$) {
  NSObject_init(self);
}

ADView_AccessibilityNodeProvider *new_ADView_AccessibilityNodeProvider_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_AccessibilityNodeProvider, initWithADView_, outer$)
}

ADView_AccessibilityNodeProvider *create_ADView_AccessibilityNodeProvider_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_AccessibilityNodeProvider, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_AccessibilityNodeProvider)

@implementation ADView_RoundScrollbarRenderer

- (instancetype)initWithADView:(ADView *)outer$
                    withADView:(ADView *)view {
  ADView_RoundScrollbarRenderer_initWithADView_withADView_(self, outer$, view);
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:withADView:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADView;LADView;", "LADView;" };
  static const J2ObjcClassInfo _ADView_RoundScrollbarRenderer = { "RoundScrollbarRenderer", "r.android.view", ptrTable, methods, NULL, 7, 0x0, 1, 0, 1, -1, -1, -1, -1 };
  return &_ADView_RoundScrollbarRenderer;
}

@end

void ADView_RoundScrollbarRenderer_initWithADView_withADView_(ADView_RoundScrollbarRenderer *self, ADView *outer$, ADView *view) {
  NSObject_init(self);
}

ADView_RoundScrollbarRenderer *new_ADView_RoundScrollbarRenderer_initWithADView_withADView_(ADView *outer$, ADView *view) {
  J2OBJC_NEW_IMPL(ADView_RoundScrollbarRenderer, initWithADView_withADView_, outer$, view)
}

ADView_RoundScrollbarRenderer *create_ADView_RoundScrollbarRenderer_initWithADView_withADView_(ADView *outer$, ADView *view) {
  J2OBJC_CREATE_IMPL(ADView_RoundScrollbarRenderer, initWithADView_withADView_, outer$, view)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_RoundScrollbarRenderer)

@implementation ADView_MotionEvent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_MotionEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (jint)getAction {
  return action_;
}

- (void)setActionWithInt:(jint)action {
  self->action_ = action;
}

- (jint)getX {
  return x_;
}

- (void)setXWithInt:(jint)x {
  self->x_ = x;
}

- (jint)getY {
  return y_;
}

- (void)setYWithInt:(jint)y {
  self->y_ = y;
}

- (jint)getRawX {
  return rawX_;
}

- (void)setRawXWithInt:(jint)rawX {
  self->rawX_ = rawX;
}

- (jint)getRawY {
  return rawY_;
}

- (void)setRawYWithInt:(jint)rawY {
  self->rawY_ = rawY;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getAction);
  methods[2].selector = @selector(setActionWithInt:);
  methods[3].selector = @selector(getX);
  methods[4].selector = @selector(setXWithInt:);
  methods[5].selector = @selector(getY);
  methods[6].selector = @selector(setYWithInt:);
  methods[7].selector = @selector(getRawX);
  methods[8].selector = @selector(setRawXWithInt:);
  methods[9].selector = @selector(getRawY);
  methods[10].selector = @selector(setRawYWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ACTION_DOWN", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_DOWN, 0x19, -1, -1, -1, -1 },
    { "ACTION_UP", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_UP, 0x19, -1, -1, -1, -1 },
    { "ACTION_MOVE", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_MOVE, 0x19, -1, -1, -1, -1 },
    { "ACTION_CANCEL", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_CANCEL, 0x19, -1, -1, -1, -1 },
    { "ACTION_OUTSIDE", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_OUTSIDE, 0x19, -1, -1, -1, -1 },
    { "ACTION_SCROLL", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_SCROLL, 0x19, -1, -1, -1, -1 },
    { "ACTION_BUTTON_PRESS", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_BUTTON_PRESS, 0x19, -1, -1, -1, -1 },
    { "ACTION_BUTTON_RELEASE", "I", .constantValue.asInt = ADView_MotionEvent_ACTION_BUTTON_RELEASE, 0x19, -1, -1, -1, -1 },
    { "x_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "y_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rawX_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "rawY_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAction", "I", "setX", "setY", "setRawX", "setRawY", "LADView;" };
  static const J2ObjcClassInfo _ADView_MotionEvent = { "MotionEvent", "r.android.view", ptrTable, methods, fields, 7, 0x9, 11, 13, 6, -1, -1, -1, -1 };
  return &_ADView_MotionEvent;
}

@end

void ADView_MotionEvent_init(ADView_MotionEvent *self) {
  NSObject_init(self);
}

ADView_MotionEvent *new_ADView_MotionEvent_init() {
  J2OBJC_NEW_IMPL(ADView_MotionEvent, init)
}

ADView_MotionEvent *create_ADView_MotionEvent_init() {
  J2OBJC_CREATE_IMPL(ADView_MotionEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_MotionEvent)

@implementation ADView_DragEvent

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADView_DragEvent_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setClipDataWithNSString:(NSString *)clipData {
  JreStrongAssign(&self->clipData_, clipData);
}

- (jint)getAction {
  return action_;
}

- (void)setActionWithInt:(jint)action {
  self->action_ = action;
}

- (jint)getX {
  return x_;
}

- (void)setXWithInt:(jint)x {
  self->x_ = x;
}

- (jint)getY {
  return y_;
}

- (void)setYWithInt:(jint)y {
  self->y_ = y;
}

- (NSString *)getClipData {
  return clipData_;
}

- (void)dealloc {
  RELEASE_(clipData_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 3, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setClipDataWithNSString:);
  methods[2].selector = @selector(getAction);
  methods[3].selector = @selector(setActionWithInt:);
  methods[4].selector = @selector(getX);
  methods[5].selector = @selector(setXWithInt:);
  methods[6].selector = @selector(getY);
  methods[7].selector = @selector(setYWithInt:);
  methods[8].selector = @selector(getClipData);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "x_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "y_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "clipData_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ACTION_DRAG_STARTED", "I", .constantValue.asInt = ADView_DragEvent_ACTION_DRAG_STARTED, 0x19, -1, -1, -1, -1 },
    { "ACTION_DRAG_LOCATION", "I", .constantValue.asInt = ADView_DragEvent_ACTION_DRAG_LOCATION, 0x19, -1, -1, -1, -1 },
    { "ACTION_DROP", "I", .constantValue.asInt = ADView_DragEvent_ACTION_DROP, 0x19, -1, -1, -1, -1 },
    { "ACTION_DRAG_ENDED", "I", .constantValue.asInt = ADView_DragEvent_ACTION_DRAG_ENDED, 0x19, -1, -1, -1, -1 },
    { "ACTION_DRAG_ENTERED", "I", .constantValue.asInt = ADView_DragEvent_ACTION_DRAG_ENTERED, 0x19, -1, -1, -1, -1 },
    { "ACTION_DRAG_EXITED", "I", .constantValue.asInt = ADView_DragEvent_ACTION_DRAG_EXITED, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setClipData", "LNSString;", "setAction", "I", "setX", "setY", "LADView;" };
  static const J2ObjcClassInfo _ADView_DragEvent = { "DragEvent", "r.android.view", ptrTable, methods, fields, 7, 0x9, 9, 10, 6, -1, -1, -1, -1 };
  return &_ADView_DragEvent;
}

@end

void ADView_DragEvent_init(ADView_DragEvent *self) {
  NSObject_init(self);
}

ADView_DragEvent *new_ADView_DragEvent_init() {
  J2OBJC_NEW_IMPL(ADView_DragEvent, init)
}

ADView_DragEvent *create_ADView_DragEvent_init() {
  J2OBJC_CREATE_IMPL(ADView_DragEvent, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_DragEvent)

@implementation ADView_TintInfo

- (instancetype)initWithADView:(ADView *)outer$ {
  ADView_TintInfo_initWithADView_(self, outer$);
  return self;
}

- (void)dealloc {
  RELEASE_(mTintList_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADView:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mHasTintList_", "Z", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
    { "mTintList_", "LADColorStateList;", .constantValue.asLong = 0, 0x1, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADView;" };
  static const J2ObjcClassInfo _ADView_TintInfo = { "TintInfo", "r.android.view", ptrTable, methods, fields, 7, 0x1, 1, 2, 0, -1, -1, -1, -1 };
  return &_ADView_TintInfo;
}

@end

void ADView_TintInfo_initWithADView_(ADView_TintInfo *self, ADView *outer$) {
  NSObject_init(self);
}

ADView_TintInfo *new_ADView_TintInfo_initWithADView_(ADView *outer$) {
  J2OBJC_NEW_IMPL(ADView_TintInfo, initWithADView_, outer$)
}

ADView_TintInfo *create_ADView_TintInfo_initWithADView_(ADView *outer$) {
  J2OBJC_CREATE_IMPL(ADView_TintInfo, initWithADView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADView_TintInfo)
