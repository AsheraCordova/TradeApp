//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\ArcCurveFit.java
//

#include "ArcCurveFit.h"
#include "CurveFit.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/lang/Double.h"
#include "java/lang/Math.h"
#include "java/util/Arrays.h"


@interface ADXArcCurveFit () {
 @public
  IOSDoubleArray *mTime_;
  jboolean mExtrapolate_;
}

@end

J2OBJC_FIELD_SETTER(ADXArcCurveFit, mTime_, IOSDoubleArray *)

inline jint ADXArcCurveFit_get_START_VERTICAL(void);
#define ADXArcCurveFit_START_VERTICAL 1
J2OBJC_STATIC_FIELD_CONSTANT(ADXArcCurveFit, START_VERTICAL, jint)

inline jint ADXArcCurveFit_get_START_HORIZONTAL(void);
#define ADXArcCurveFit_START_HORIZONTAL 2
J2OBJC_STATIC_FIELD_CONSTANT(ADXArcCurveFit, START_HORIZONTAL, jint)

inline jint ADXArcCurveFit_get_START_LINEAR(void);
#define ADXArcCurveFit_START_LINEAR 3
J2OBJC_STATIC_FIELD_CONSTANT(ADXArcCurveFit, START_LINEAR, jint)

@interface ADXArcCurveFit_Arc : NSObject {
 @public
  IOSDoubleArray *mLut_;
  jdouble mArcDistance_;
  jdouble mTime1_;
  jdouble mTime2_;
  jdouble mX1_;
  jdouble mX2_;
  jdouble mY1_;
  jdouble mY2_;
  jdouble mOneOverDeltaTime_;
  jdouble mEllipseA_;
  jdouble mEllipseB_;
  jdouble mEllipseCenterX_;
  jdouble mEllipseCenterY_;
  jdouble mArcVelocity_;
  jdouble mTmpSinAngle_;
  jdouble mTmpCosAngle_;
  jboolean mVertical_;
  jboolean linear_;
}

- (instancetype)initWithInt:(jint)mode
                 withDouble:(jdouble)t1
                 withDouble:(jdouble)t2
                 withDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2;

- (void)setPointWithDouble:(jdouble)time;

- (jdouble)getX;

- (jdouble)getY;

- (jdouble)getDX;

- (jdouble)getDY;

- (jdouble)getLinearXWithDouble:(jdouble)t;

- (jdouble)getLinearYWithDouble:(jdouble)t;

- (jdouble)getLinearDXWithDouble:(jdouble)t;

- (jdouble)getLinearDYWithDouble:(jdouble)t;

- (jdouble)lookupWithDouble:(jdouble)v;

- (void)buildTableWithDouble:(jdouble)x1
                  withDouble:(jdouble)y1
                  withDouble:(jdouble)x2
                  withDouble:(jdouble)y2;

@end

J2OBJC_STATIC_INIT(ADXArcCurveFit_Arc)

J2OBJC_FIELD_SETTER(ADXArcCurveFit_Arc, mLut_, IOSDoubleArray *)

inline NSString *ADXArcCurveFit_Arc_get_TAG(void);
static NSString *ADXArcCurveFit_Arc_TAG = @"Arc";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ADXArcCurveFit_Arc, TAG, NSString *)

inline IOSDoubleArray *ADXArcCurveFit_Arc_get_ourPercent(void);
inline IOSDoubleArray *ADXArcCurveFit_Arc_set_ourPercent(IOSDoubleArray *value);
static IOSDoubleArray *ADXArcCurveFit_Arc_ourPercent;
J2OBJC_STATIC_FIELD_OBJ(ADXArcCurveFit_Arc, ourPercent, IOSDoubleArray *)

inline jdouble ADXArcCurveFit_Arc_get_EPSILON(void);
#define ADXArcCurveFit_Arc_EPSILON 0.001
J2OBJC_STATIC_FIELD_CONSTANT(ADXArcCurveFit_Arc, EPSILON, jdouble)

__attribute__((unused)) static void ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(ADXArcCurveFit_Arc *self, jint mode, jdouble t1, jdouble t2, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

__attribute__((unused)) static ADXArcCurveFit_Arc *new_ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jint mode, jdouble t1, jdouble t2, jdouble x1, jdouble y1, jdouble x2, jdouble y2) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXArcCurveFit_Arc *create_ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jint mode, jdouble t1, jdouble t2, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

__attribute__((unused)) static void ADXArcCurveFit_Arc_buildTableWithDouble_withDouble_withDouble_withDouble_(ADXArcCurveFit_Arc *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2);

J2OBJC_TYPE_LITERAL_HEADER(ADXArcCurveFit_Arc)

@implementation ADXArcCurveFit

- (void)getPosWithDouble:(jdouble)t
         withDoubleArray:(IOSDoubleArray *)v {
  if (mExtrapolate_) {
    if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
      jdouble t0 = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
      jdouble dt = t - ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
      jint p = 0;
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p)))->linear_) {
        *IOSDoubleArray_GetRef(nil_chk(v), 0) = ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearXWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDXWithDouble:t0]);
        *IOSDoubleArray_GetRef(v, 1) = ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearYWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDYWithDouble:t0]);
      }
      else {
        [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) setPointWithDouble:t0];
        *IOSDoubleArray_GetRef(nil_chk(v), 0) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getX] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDX];
        *IOSDoubleArray_GetRef(v, 1) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getY] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDY];
      }
      return;
    }
    if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
      jdouble t0 = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
      jdouble dt = t - t0;
      jint p = mArcs_->size_ - 1;
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p)))->linear_) {
        *IOSDoubleArray_GetRef(nil_chk(v), 0) = ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearXWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDXWithDouble:t0]);
        *IOSDoubleArray_GetRef(v, 1) = ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearYWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDYWithDouble:t0]);
      }
      else {
        [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) setPointWithDouble:t];
        *IOSDoubleArray_GetRef(nil_chk(v), 0) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getX] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDX];
        *IOSDoubleArray_GetRef(v, 1) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getY] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDY];
      }
      return;
    }
  }
  else {
    if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
      t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
    }
    if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
      t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
    }
  }
  for (jint i = 0; i < mArcs_->size_; i++) {
    if (t <= ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->mTime2_) {
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->linear_) {
        *IOSDoubleArray_GetRef(nil_chk(v), 0) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearXWithDouble:t];
        *IOSDoubleArray_GetRef(v, 1) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getLinearYWithDouble:t];
        return;
      }
      [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) setPointWithDouble:t];
      *IOSDoubleArray_GetRef(nil_chk(v), 0) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getX];
      *IOSDoubleArray_GetRef(v, 1) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getY];
      return;
    }
  }
}

- (void)getPosWithDouble:(jdouble)t
          withFloatArray:(IOSFloatArray *)v {
  if (mExtrapolate_) {
    if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
      jdouble t0 = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
      jdouble dt = t - ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
      jint p = 0;
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p)))->linear_) {
        *IOSFloatArray_GetRef(nil_chk(v), 0) = (jfloat) ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearXWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDXWithDouble:t0]);
        *IOSFloatArray_GetRef(v, 1) = (jfloat) ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearYWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDYWithDouble:t0]);
      }
      else {
        [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) setPointWithDouble:t0];
        *IOSFloatArray_GetRef(nil_chk(v), 0) = (jfloat) ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getX] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDX]);
        *IOSFloatArray_GetRef(v, 1) = (jfloat) ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getY] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDY]);
      }
      return;
    }
    if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
      jdouble t0 = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
      jdouble dt = t - t0;
      jint p = mArcs_->size_ - 1;
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p)))->linear_) {
        *IOSFloatArray_GetRef(nil_chk(v), 0) = (jfloat) ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearXWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDXWithDouble:t0]);
        *IOSFloatArray_GetRef(v, 1) = (jfloat) ([((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearYWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDYWithDouble:t0]);
      }
      else {
        [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) setPointWithDouble:t];
        *IOSFloatArray_GetRef(nil_chk(v), 0) = (jfloat) [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getX];
        *IOSFloatArray_GetRef(v, 1) = (jfloat) [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getY];
      }
      return;
    }
  }
  else {
    if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
      t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
    }
    else if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
      t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
    }
  }
  for (jint i = 0; i < mArcs_->size_; i++) {
    if (t <= ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->mTime2_) {
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->linear_) {
        *IOSFloatArray_GetRef(nil_chk(v), 0) = (jfloat) [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearXWithDouble:t];
        *IOSFloatArray_GetRef(v, 1) = (jfloat) [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getLinearYWithDouble:t];
        return;
      }
      [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) setPointWithDouble:t];
      *IOSFloatArray_GetRef(nil_chk(v), 0) = (jfloat) [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getX];
      *IOSFloatArray_GetRef(v, 1) = (jfloat) [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getY];
      return;
    }
  }
}

- (void)getSlopeWithDouble:(jdouble)t
           withDoubleArray:(IOSDoubleArray *)v {
  if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
    t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
  }
  else if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
    t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
  }
  for (jint i = 0; i < mArcs_->size_; i++) {
    if (t <= ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->mTime2_) {
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->linear_) {
        *IOSDoubleArray_GetRef(nil_chk(v), 0) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearDXWithDouble:t];
        *IOSDoubleArray_GetRef(v, 1) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getLinearDYWithDouble:t];
        return;
      }
      [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) setPointWithDouble:t];
      *IOSDoubleArray_GetRef(nil_chk(v), 0) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getDX];
      *IOSDoubleArray_GetRef(v, 1) = [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getDY];
      return;
    }
  }
}

- (jdouble)getPosWithDouble:(jdouble)t
                    withInt:(jint)j {
  if (mExtrapolate_) {
    if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
      jdouble t0 = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
      jdouble dt = t - ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
      jint p = 0;
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p)))->linear_) {
        if (j == 0) {
          return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearXWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDXWithDouble:t0];
        }
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearYWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDYWithDouble:t0];
      }
      else {
        [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) setPointWithDouble:t0];
        if (j == 0) {
          return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getX] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDX];
        }
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getY] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getDY];
      }
    }
    if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
      jdouble t0 = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
      jdouble dt = t - t0;
      jint p = mArcs_->size_ - 1;
      if (j == 0) {
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearXWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDXWithDouble:t0];
      }
      return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, p))) getLinearYWithDouble:t0] + dt * [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), p))) getLinearDYWithDouble:t0];
    }
  }
  else {
    if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
      t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
    }
    else if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
      t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
    }
  }
  for (jint i = 0; i < mArcs_->size_; i++) {
    if (t <= ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->mTime2_) {
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->linear_) {
        if (j == 0) {
          return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearXWithDouble:t];
        }
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearYWithDouble:t];
      }
      [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) setPointWithDouble:t];
      if (j == 0) {
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getX];
      }
      return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getY];
    }
  }
  return JavaLangDouble_NaN;
}

- (jdouble)getSlopeWithDouble:(jdouble)t
                      withInt:(jint)j {
  if (t < ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), 0)))->mTime1_) {
    t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, 0)))->mTime1_;
  }
  if (t > ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_) {
    t = ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, mArcs_->size_ - 1)))->mTime2_;
  }
  for (jint i = 0; i < mArcs_->size_; i++) {
    if (t <= ((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->mTime2_) {
      if (((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i)))->linear_) {
        if (j == 0) {
          return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearDXWithDouble:t];
        }
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) getLinearDYWithDouble:t];
      }
      [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(mArcs_, i))) setPointWithDouble:t];
      if (j == 0) {
        return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getDX];
      }
      return [((ADXArcCurveFit_Arc *) nil_chk(IOSObjectArray_Get(nil_chk(mArcs_), i))) getDY];
    }
  }
  return JavaLangDouble_NaN;
}

- (IOSDoubleArray *)getTimePoints {
  return mTime_;
}

- (instancetype)initWithIntArray:(IOSIntArray *)arcModes
                 withDoubleArray:(IOSDoubleArray *)time
                withDoubleArray2:(IOSObjectArray *)y {
  ADXArcCurveFit_initWithIntArray_withDoubleArray_withDoubleArray2_(self, arcModes, time, y);
  return self;
}

- (void)dealloc {
  RELEASE_(mTime_);
  RELEASE_(mArcs_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 0, 4, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 5, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getPosWithDouble:withDoubleArray:);
  methods[1].selector = @selector(getPosWithDouble:withFloatArray:);
  methods[2].selector = @selector(getSlopeWithDouble:withDoubleArray:);
  methods[3].selector = @selector(getPosWithDouble:withInt:);
  methods[4].selector = @selector(getSlopeWithDouble:withInt:);
  methods[5].selector = @selector(getTimePoints);
  methods[6].selector = @selector(initWithIntArray:withDoubleArray:withDoubleArray2:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ARC_START_VERTICAL", "I", .constantValue.asInt = ADXArcCurveFit_ARC_START_VERTICAL, 0x19, -1, -1, -1, -1 },
    { "ARC_START_HORIZONTAL", "I", .constantValue.asInt = ADXArcCurveFit_ARC_START_HORIZONTAL, 0x19, -1, -1, -1, -1 },
    { "ARC_START_FLIP", "I", .constantValue.asInt = ADXArcCurveFit_ARC_START_FLIP, 0x19, -1, -1, -1, -1 },
    { "ARC_START_LINEAR", "I", .constantValue.asInt = ADXArcCurveFit_ARC_START_LINEAR, 0x19, -1, -1, -1, -1 },
    { "START_VERTICAL", "I", .constantValue.asInt = ADXArcCurveFit_START_VERTICAL, 0x1a, -1, -1, -1, -1 },
    { "START_HORIZONTAL", "I", .constantValue.asInt = ADXArcCurveFit_START_HORIZONTAL, 0x1a, -1, -1, -1, -1 },
    { "START_LINEAR", "I", .constantValue.asInt = ADXArcCurveFit_START_LINEAR, 0x1a, -1, -1, -1, -1 },
    { "mTime_", "[D", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "mArcs_", "[LADXArcCurveFit_Arc;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mExtrapolate_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "getPos", "D[D", "D[F", "getSlope", "DI", "[I[D[[D", "LADXArcCurveFit_Arc;" };
  static const J2ObjcClassInfo _ADXArcCurveFit = { "ArcCurveFit", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x1, 7, 10, -1, 6, -1, -1, -1 };
  return &_ADXArcCurveFit;
}

@end

void ADXArcCurveFit_initWithIntArray_withDoubleArray_withDoubleArray2_(ADXArcCurveFit *self, IOSIntArray *arcModes, IOSDoubleArray *time, IOSObjectArray *y) {
  ADXCurveFit_init(self);
  self->mExtrapolate_ = true;
  JreStrongAssign(&self->mTime_, time);
  JreStrongAssignAndConsume(&self->mArcs_, [IOSObjectArray newArrayWithLength:((IOSDoubleArray *) nil_chk(time))->size_ - 1 type:ADXArcCurveFit_Arc_class_()]);
  jint mode = ADXArcCurveFit_START_VERTICAL;
  jint last = ADXArcCurveFit_START_VERTICAL;
  for (jint i = 0; i < ((IOSObjectArray *) nil_chk(self->mArcs_))->size_; i++) {
    switch (IOSIntArray_Get(nil_chk(arcModes), i)) {
      case ADXArcCurveFit_ARC_START_VERTICAL:
      last = mode = ADXArcCurveFit_START_VERTICAL;
      break;
      case ADXArcCurveFit_ARC_START_HORIZONTAL:
      last = mode = ADXArcCurveFit_START_HORIZONTAL;
      break;
      case ADXArcCurveFit_ARC_START_FLIP:
      mode = (last == ADXArcCurveFit_START_VERTICAL) ? ADXArcCurveFit_START_HORIZONTAL : ADXArcCurveFit_START_VERTICAL;
      last = mode;
      break;
      case ADXArcCurveFit_ARC_START_LINEAR:
      mode = ADXArcCurveFit_START_LINEAR;
    }
    IOSObjectArray_SetAndConsume(self->mArcs_, i, new_ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(mode, IOSDoubleArray_Get(time, i), IOSDoubleArray_Get(time, i + 1), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(nil_chk(y), i)), 0), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i)), 1), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i + 1)), 0), IOSDoubleArray_Get(nil_chk(IOSObjectArray_Get(y, i + 1)), 1)));
  }
}

ADXArcCurveFit *new_ADXArcCurveFit_initWithIntArray_withDoubleArray_withDoubleArray2_(IOSIntArray *arcModes, IOSDoubleArray *time, IOSObjectArray *y) {
  J2OBJC_NEW_IMPL(ADXArcCurveFit, initWithIntArray_withDoubleArray_withDoubleArray2_, arcModes, time, y)
}

ADXArcCurveFit *create_ADXArcCurveFit_initWithIntArray_withDoubleArray_withDoubleArray2_(IOSIntArray *arcModes, IOSDoubleArray *time, IOSObjectArray *y) {
  J2OBJC_CREATE_IMPL(ADXArcCurveFit, initWithIntArray_withDoubleArray_withDoubleArray2_, arcModes, time, y)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXArcCurveFit)

J2OBJC_INITIALIZED_DEFN(ADXArcCurveFit_Arc)

@implementation ADXArcCurveFit_Arc

- (instancetype)initWithInt:(jint)mode
                 withDouble:(jdouble)t1
                 withDouble:(jdouble)t2
                 withDouble:(jdouble)x1
                 withDouble:(jdouble)y1
                 withDouble:(jdouble)x2
                 withDouble:(jdouble)y2 {
  ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(self, mode, t1, t2, x1, y1, x2, y2);
  return self;
}

- (void)setPointWithDouble:(jdouble)time {
  jdouble percent = (mVertical_ ? (mTime2_ - time) : (time - mTime1_)) * mOneOverDeltaTime_;
  jdouble angle = JavaLangMath_PI * 0.5 * [self lookupWithDouble:percent];
  mTmpSinAngle_ = JavaLangMath_sinWithDouble_(angle);
  mTmpCosAngle_ = JavaLangMath_cosWithDouble_(angle);
}

- (jdouble)getX {
  return mEllipseCenterX_ + mEllipseA_ * mTmpSinAngle_;
}

- (jdouble)getY {
  return mEllipseCenterY_ + mEllipseB_ * mTmpCosAngle_;
}

- (jdouble)getDX {
  jdouble vx = mEllipseA_ * mTmpCosAngle_;
  jdouble vy = -mEllipseB_ * mTmpSinAngle_;
  jdouble norm = mArcVelocity_ / JavaLangMath_hypotWithDouble_withDouble_(vx, vy);
  return mVertical_ ? -vx * norm : vx * norm;
}

- (jdouble)getDY {
  jdouble vx = mEllipseA_ * mTmpCosAngle_;
  jdouble vy = -mEllipseB_ * mTmpSinAngle_;
  jdouble norm = mArcVelocity_ / JavaLangMath_hypotWithDouble_withDouble_(vx, vy);
  return mVertical_ ? -vy * norm : vy * norm;
}

- (jdouble)getLinearXWithDouble:(jdouble)t {
  t = (t - mTime1_) * mOneOverDeltaTime_;
  return mX1_ + t * (mX2_ - mX1_);
}

- (jdouble)getLinearYWithDouble:(jdouble)t {
  t = (t - mTime1_) * mOneOverDeltaTime_;
  return mY1_ + t * (mY2_ - mY1_);
}

- (jdouble)getLinearDXWithDouble:(jdouble)t {
  return mEllipseCenterX_;
}

- (jdouble)getLinearDYWithDouble:(jdouble)t {
  return mEllipseCenterY_;
}

- (jdouble)lookupWithDouble:(jdouble)v {
  if (v <= 0) {
    return 0;
  }
  if (v >= 1) {
    return 1;
  }
  jdouble pos = v * (((IOSDoubleArray *) nil_chk(mLut_))->size_ - 1);
  jint iv = JreFpToInt((pos));
  jdouble off = pos - JreFpToInt((pos));
  return IOSDoubleArray_Get(mLut_, iv) + (off * (IOSDoubleArray_Get(mLut_, iv + 1) - IOSDoubleArray_Get(mLut_, iv)));
}

- (void)buildTableWithDouble:(jdouble)x1
                  withDouble:(jdouble)y1
                  withDouble:(jdouble)x2
                  withDouble:(jdouble)y2 {
  ADXArcCurveFit_Arc_buildTableWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
}

- (void)dealloc {
  RELEASE_(mLut_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, 1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 5, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x0, 7, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 8, 9, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithInt:withDouble:withDouble:withDouble:withDouble:withDouble:withDouble:);
  methods[1].selector = @selector(setPointWithDouble:);
  methods[2].selector = @selector(getX);
  methods[3].selector = @selector(getY);
  methods[4].selector = @selector(getDX);
  methods[5].selector = @selector(getDY);
  methods[6].selector = @selector(getLinearXWithDouble:);
  methods[7].selector = @selector(getLinearYWithDouble:);
  methods[8].selector = @selector(getLinearDXWithDouble:);
  methods[9].selector = @selector(getLinearDYWithDouble:);
  methods[10].selector = @selector(lookupWithDouble:);
  methods[11].selector = @selector(buildTableWithDouble:withDouble:withDouble:withDouble:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TAG", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 10, -1, -1 },
    { "ourPercent", "[D", .constantValue.asLong = 0, 0xa, -1, 11, -1, -1 },
    { "mLut_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mArcDistance_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTime1_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTime2_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mX1_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mX2_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mY1_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mY2_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOneOverDeltaTime_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEllipseA_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEllipseB_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEllipseCenterX_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mEllipseCenterY_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mArcVelocity_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTmpSinAngle_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTmpCosAngle_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mVertical_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "linear_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "EPSILON", "D", .constantValue.asDouble = ADXArcCurveFit_Arc_EPSILON, 0x1a, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "IDDDDDD", "setPoint", "D", "getLinearX", "getLinearY", "getLinearDX", "getLinearDY", "lookup", "buildTable", "DDDD", &ADXArcCurveFit_Arc_TAG, &ADXArcCurveFit_Arc_ourPercent, "LADXArcCurveFit;" };
  static const J2ObjcClassInfo _ADXArcCurveFit_Arc = { "Arc", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0xa, 12, 21, 12, -1, -1, -1, -1 };
  return &_ADXArcCurveFit_Arc;
}

+ (void)initialize {
  if (self == [ADXArcCurveFit_Arc class]) {
    JreStrongAssignAndConsume(&ADXArcCurveFit_Arc_ourPercent, [IOSDoubleArray newArrayWithLength:91]);
    J2OBJC_SET_INITIALIZED(ADXArcCurveFit_Arc)
  }
}

@end

void ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(ADXArcCurveFit_Arc *self, jint mode, jdouble t1, jdouble t2, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  NSObject_init(self);
  self->linear_ = false;
  self->mVertical_ = (mode == ADXArcCurveFit_START_VERTICAL);
  self->mTime1_ = t1;
  self->mTime2_ = t2;
  self->mOneOverDeltaTime_ = 1 / (self->mTime2_ - self->mTime1_);
  if (ADXArcCurveFit_START_LINEAR == mode) {
    self->linear_ = true;
  }
  jdouble dx = x2 - x1;
  jdouble dy = y2 - y1;
  if (self->linear_ || JavaLangMath_absWithDouble_(dx) < ADXArcCurveFit_Arc_EPSILON || JavaLangMath_absWithDouble_(dy) < ADXArcCurveFit_Arc_EPSILON) {
    self->linear_ = true;
    self->mX1_ = x1;
    self->mX2_ = x2;
    self->mY1_ = y1;
    self->mY2_ = y2;
    self->mArcDistance_ = JavaLangMath_hypotWithDouble_withDouble_(dy, dx);
    self->mArcVelocity_ = self->mArcDistance_ * self->mOneOverDeltaTime_;
    self->mEllipseCenterX_ = dx / (self->mTime2_ - self->mTime1_);
    self->mEllipseCenterY_ = dy / (self->mTime2_ - self->mTime1_);
    return;
  }
  JreStrongAssignAndConsume(&self->mLut_, [IOSDoubleArray newArrayWithLength:101]);
  self->mEllipseA_ = (dx) * ((self->mVertical_) ? -1 : 1);
  self->mEllipseB_ = (dy) * ((self->mVertical_) ? 1 : -1);
  self->mEllipseCenterX_ = (self->mVertical_) ? x2 : x1;
  self->mEllipseCenterY_ = (self->mVertical_) ? y1 : y2;
  ADXArcCurveFit_Arc_buildTableWithDouble_withDouble_withDouble_withDouble_(self, x1, y1, x2, y2);
  self->mArcVelocity_ = self->mArcDistance_ * self->mOneOverDeltaTime_;
}

ADXArcCurveFit_Arc *new_ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jint mode, jdouble t1, jdouble t2, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  J2OBJC_NEW_IMPL(ADXArcCurveFit_Arc, initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, mode, t1, t2, x1, y1, x2, y2)
}

ADXArcCurveFit_Arc *create_ADXArcCurveFit_Arc_initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_(jint mode, jdouble t1, jdouble t2, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  J2OBJC_CREATE_IMPL(ADXArcCurveFit_Arc, initWithInt_withDouble_withDouble_withDouble_withDouble_withDouble_withDouble_, mode, t1, t2, x1, y1, x2, y2)
}

void ADXArcCurveFit_Arc_buildTableWithDouble_withDouble_withDouble_withDouble_(ADXArcCurveFit_Arc *self, jdouble x1, jdouble y1, jdouble x2, jdouble y2) {
  jdouble a = x2 - x1;
  jdouble b = y1 - y2;
  jdouble lx = 0;
  jdouble ly = 0;
  jdouble dist = 0;
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(ADXArcCurveFit_Arc_ourPercent))->size_; i++) {
    jdouble angle = JavaLangMath_toRadiansWithDouble_(90.0 * i / (ADXArcCurveFit_Arc_ourPercent->size_ - 1));
    jdouble s = JavaLangMath_sinWithDouble_(angle);
    jdouble c = JavaLangMath_cosWithDouble_(angle);
    jdouble px = a * s;
    jdouble py = b * c;
    if (i > 0) {
      JrePlusAssignDoubleD(&dist, JavaLangMath_hypotWithDouble_withDouble_(px - lx, py - ly));
      *IOSDoubleArray_GetRef(nil_chk(ADXArcCurveFit_Arc_ourPercent), i) = dist;
    }
    lx = px;
    ly = py;
  }
  self->mArcDistance_ = dist;
  for (jint i = 0; i < ADXArcCurveFit_Arc_ourPercent->size_; i++) {
    JreDivideAssignDoubleD(IOSDoubleArray_GetRef(ADXArcCurveFit_Arc_ourPercent, i), dist);
  }
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(self->mLut_))->size_; i++) {
    jdouble pos = i / (jdouble) (self->mLut_->size_ - 1);
    jint index = JavaUtilArrays_binarySearchWithDoubleArray_withDouble_(ADXArcCurveFit_Arc_ourPercent, pos);
    if (index >= 0) {
      *IOSDoubleArray_GetRef(nil_chk(self->mLut_), i) = index / (jdouble) (((IOSDoubleArray *) nil_chk(ADXArcCurveFit_Arc_ourPercent))->size_ - 1);
    }
    else if (index == -1) {
      *IOSDoubleArray_GetRef(nil_chk(self->mLut_), i) = 0;
    }
    else {
      jint p1 = -index - 2;
      jint p2 = -index - 1;
      jdouble ans = (p1 + (pos - IOSDoubleArray_Get(nil_chk(ADXArcCurveFit_Arc_ourPercent), p1)) / (IOSDoubleArray_Get(ADXArcCurveFit_Arc_ourPercent, p2) - IOSDoubleArray_Get(ADXArcCurveFit_Arc_ourPercent, p1))) / (ADXArcCurveFit_Arc_ourPercent->size_ - 1);
      *IOSDoubleArray_GetRef(nil_chk(self->mLut_), i) = ans;
    }
  }
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXArcCurveFit_Arc)
