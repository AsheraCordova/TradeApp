//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\UITextViewLabelImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributeCommand.h"
#include "AttributedString.h"
#include "BaseMeasurableView.h"
#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Event.h"
#include "EventBus.h"
#include "EventBusHandler.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "GravityConverter.h"
#include "Html.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "MarqueeCommandConverter.h"
#include "MeasurableTextView.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "RectF.h"
#include "RectM.h"
#include "TextDirectionHeuristic.h"
#include "TextView.h"
#include "UITextViewLabelImpl.h"
#include "View.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/Runnable.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"

#include "ASUITextViewLabel.h"

@class ASUITextViewLabelImpl_DellocHandler;
@class ASUITextViewLabelImpl_MarqueeTask;
@class JavaLangInteger;
@protocol JavaLangRunnable;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wprotocol"
#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASUITextViewLabelImpl () {
 @public
  NSString *ellipsize_;
  id timer_;
  jboolean isDisposed_;
  ASUITextViewLabelImpl_DellocHandler *dellocHandler_;
  ADColorStateList *drawableTint_;
  jboolean html_;
  jboolean escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  ASUITextViewLabelImpl_PostMeasureHandler *postMeasureHandler_;
  NSString *POST_MEASURE_EVENT_;
  ASUITextViewLabelImpl_MarqueeTask *marqueeTask_;
  jint marqueeRepeatLimit_;
  ASMarqueeCommandConverter *marqueeCommandConverter_;
  id<JavaUtilMap> fontDescriptors_;
  jint autoSizeMin_;
  jint autoSizeMax_;
  jint autoSizeGranular_;
  ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *builder_;
  ASUITextViewLabelImpl_UITextViewLabelBean *bean_;
  jint paddingLeft_;
  jint paddingRight_;
  jint paddingTop_;
  jint paddingBottom_;
  ASBaseMeasurableView_VerticalAligment *preVerticalAligment_;
}

- (void)setWidgetOnNativeClass;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (void)handleHtmlTextWithNSString:(NSString *)text;

- (void)nativeSetTextWithNSString:(NSString *)text;

- (void)nativeSetHtmlTextWithId:(id)text;

- (id)getMyText;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (id)getEllipsize;

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (void)setVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentRightInternal;

- (void)setHorizontalAligmentLeft;

- (void)setHorizontalAligmentLeftInternal;

- (jint)getTextAlignment;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)nativeSetVerticalAligmentCenter;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (jboolean)canMarquee;

- (void)cancelNativeTimer;

- (jboolean)isDisposed;

- (void)addDeallocHandler;

- (void)schedule;

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (jint)getHeight;

- (jint)getAutoSizeTextTypeWithASMeasurableTextView:(ASMeasurableTextView *)measurableTextView;

- (void)setAutoSizeTextTypeInternalWithInt:(jint)autoTextType;

- (jboolean)suggestedSizeFitsInSpaceWithInt:(jint)suggestedSizeInPx
                                  withFloat:(jfloat)width
                                  withFloat:(jfloat)height;

- (void)setAutoSizePresetSizesWithId:(id)objValue;

- (void)addAutoResizeListener;

- (void)removeResizeListener;

- (jint)computeSizeWithFloat:(jfloat)width;

- (void)setMaxLengthWithId:(id)objValue;

- (void)setPasswordWithId:(id)objValue;

- (void)setMyTextWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (jint)calcNumberOfWhiteSpaces;

- (void)cancelTimer;

- (void)startTimer;

- (id)getMarqueeRepeatLimit;

- (void)setMarqueeRepeatLimitWithId:(id)objValue;

- (void)startOrStopMarqueeWithId:(id)objValue;

- (jint)getLabelWidth;

- (jboolean)isLabelMeasured;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (jboolean)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)setAutoSizeStepGranularityWithId:(id)objValue;

- (void)setAutoMinTextSizeWithId:(id)objValue;

- (void)setAutoMaxTextSizeWithId:(id)objValue;

- (void)setAutoSizeTextTypeWithId:(id)objValue;

- (id)getAutoSizeStepGranularity;

- (id)getAutoMinTextSize;

- (id)getAutoMaxTextSize;

- (id)getAutoSizeTextType;

- (void)setTextFormatWithId:(id)objValue;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)createNativeWidgetWithJavaUtilMap:(id<JavaUtilMap>)params;

- (void)addMinMaxListener;

- (void)setTextColorHighlightWithId:(id)objValue;

- (id)getTextColorHighlight;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeSetPaddingBottomWithInt:(jint)value;

- (void)nativeSetPaddingLeftWithInt:(jint)value;

- (void)nativeSetPaddingRightWithInt:(jint)value;

- (void)nativeSetPaddingTopWithInt:(jint)value;

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode;

- (JavaLangInteger *)nativeGetLinBreakMode;

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue;

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment;

- (id)getJustificationMode;

- (JavaLangInteger *)nativeGetTextAligment;

- (void)setSingleLineWithId:(id)objValue;

- (void)setNumberOfLinesWithId:(id)asNativeWidget
                       withInt:(jint)numberOfLines;

- (id)getSingleLine;

- (void)setAutoLinkWithId:(id)objValue;

- (void)nativeSetAutoLinkWithInt:(jint)autolinkFlags;

- (id)getAutoLink;

- (void)setEnabledWithId:(id)objValue;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (void)nativeSetScrollHorizontallyWithBoolean:(jboolean)scrollHorizontally;

- (void)setTextColorLinkWithId:(id)objValue;

- (void)nativesetTextColorLinkWithId:(id)objValue;

- (void)setLinksClickableWithId:(id)objValue;

- (void)nativeSetLinksClickableWithBoolean:(jboolean)linksClickable;

- (id)getLinksClickable;

- (jint)nativeGetBaseLine;

- (id)getFont;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (void)adjustContentSizeWithInt:(jint)width
                         withInt:(jint)height;

- (jboolean)isContentOffsetCorrectionNeededWithId:(id)view;

- (void)setContentOffsetWithInt:(jint)topCorrect
                         withId:(id)view;

- (void)setHintColorWithInt:(jint)currentHintTextColor;

- (void)syncPlaceholderLabel;

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, ellipsize_, NSString *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, timer_, id)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, dellocHandler_, ASUITextViewLabelImpl_DellocHandler *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, postMeasureHandler_, ASUITextViewLabelImpl_PostMeasureHandler *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, POST_MEASURE_EVENT_, NSString *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, marqueeTask_, ASUITextViewLabelImpl_MarqueeTask *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, marqueeCommandConverter_, ASMarqueeCommandConverter *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, builder_, ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, bean_, ASUITextViewLabelImpl_UITextViewLabelBean *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl, preVerticalAligment_, ASBaseMeasurableView_VerticalAligment *)

inline jint ASUITextViewLabelImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASUITextViewLabelImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASUITextViewLabelImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASUITextViewLabelImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASUITextViewLabelImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASUITextViewLabelImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASUITextViewLabelImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASUITextViewLabelImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASUITextViewLabelImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASUITextViewLabelImpl, BOLD_FONT_TRAIT, jint)

inline jint ASUITextViewLabelImpl_get_NORMAL_FONT_TRAIT(void);
#define ASUITextViewLabelImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewLabelImpl, NORMAL_FONT_TRAIT, jint)

inline jint ASUITextViewLabelImpl_get_TEXT_ALIGN_CENTER(void);
#define ASUITextViewLabelImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewLabelImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASUITextViewLabelImpl_get_TEXT_ALIGN_LEFT(void);
#define ASUITextViewLabelImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewLabelImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASUITextViewLabelImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASUITextViewLabelImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewLabelImpl, TEXT_ALIGN_RIGHT, jint)

__attribute__((unused)) static void ASUITextViewLabelImpl_setWidgetOnNativeClass(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(ASUITextViewLabelImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static void ASUITextViewLabelImpl_handleHtmlTextWithNSString_(ASUITextViewLabelImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetTextWithNSString_(ASUITextViewLabelImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetHtmlTextWithId_(ASUITextViewLabelImpl *self, id text);

__attribute__((unused)) static id ASUITextViewLabelImpl_getMyText(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getTextSize(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMyTextSizeWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetTextSizeWithInt_(ASUITextViewLabelImpl *self, jint value);

__attribute__((unused)) static id ASUITextViewLabelImpl_getEllipsize(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setEllipsizeWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static jint ASUITextViewLabelImpl_nativeGetFontSize(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_nativeGetFontStyle(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASUITextViewLabelImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetFontStyleWithInt_(ASUITextViewLabelImpl *self, jint style);

__attribute__((unused)) static void ASUITextViewLabelImpl_setVerticalAligmentCenter(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setVerticalAligmentBottom(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setVerticalAligmentTop(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHorizontalAligmentCenter(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHorizontalAligmentRight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHorizontalAligmentRightInternal(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHorizontalAligmentLeft(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHorizontalAligmentLeftInternal(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getTextAlignment(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetVerticalAligmentBottom(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetVerticalAligmentTop(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetVerticalAligmentCenter(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getLineHeight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getBorderWidth(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jboolean ASUITextViewLabelImpl_canMarquee(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_cancelNativeTimer(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jboolean ASUITextViewLabelImpl_isDisposed(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_addDeallocHandler(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_schedule(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_executeOnMainThreadWithJavaLangRunnable_(ASUITextViewLabelImpl *self, id<JavaLangRunnable> runnable);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawablePaddingWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableBottomWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableTopWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableRightWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableRightInternalWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableLeftWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableLeftInternalWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getImageHeightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getImageWidthWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewLabelImpl_getDrawablePadding(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableTintModeWithId_(ASUITextViewLabelImpl *self, id value);

__attribute__((unused)) static void ASUITextViewLabelImpl_setDrawableTintWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTextColorWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewLabelImpl_getTextColorState(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setGravityWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_updateTextAlignment(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getGravity(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_initHtmlWithJavaUtilMap_(ASUITextViewLabelImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static id ASUITextViewLabelImpl_getMinHeight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getMinWidth(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setEmsWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMinEmsWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMaxEmsWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setWidthWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHeightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMaxLinesWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setLinesWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMinLinesWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMaxHeightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMaxWidthWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMinHeightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMinWidthWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewLabelImpl_getWidth(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getHeight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(ASUITextViewLabelImpl *self, ASMeasurableTextView *measurableTextView);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(ASUITextViewLabelImpl *self, jint autoTextType);

__attribute__((unused)) static jboolean ASUITextViewLabelImpl_suggestedSizeFitsInSpaceWithInt_withFloat_withFloat_(ASUITextViewLabelImpl *self, jint suggestedSizeInPx, jfloat width, jfloat height);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoSizePresetSizesWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_addAutoResizeListener(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_removeResizeListener(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_computeSizeWithFloat_(ASUITextViewLabelImpl *self, jfloat width);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMaxLengthWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setPasswordWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMyTextWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTextAllCapsWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static jint ASUITextViewLabelImpl_calcNumberOfWhiteSpaces(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_cancelTimer(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_startTimer(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getMarqueeRepeatLimit(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setMarqueeRepeatLimitWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_startOrStopMarqueeWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static jint ASUITextViewLabelImpl_getLabelWidth(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jboolean ASUITextViewLabelImpl_isLabelMeasured(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTypeFaceWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setFontFamilyWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTextStyleWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setFirstBaselineToTopHeightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static jboolean ASUITextViewLabelImpl_getIncludeFontPadding(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getFirstBaselineToTopHeight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setLastBaselineToBottomHeightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewLabelImpl_getLastBaselineToBottomHeight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoSizeStepGranularityWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoMinTextSizeWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoMaxTextSizeWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoSizeTextTypeWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewLabelImpl_getAutoSizeStepGranularity(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getAutoMinTextSize(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getAutoMaxTextSize(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getAutoSizeTextType(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTextFormatWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeCreateWithJavaUtilMap_(ASUITextViewLabelImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASUITextViewLabelImpl_createNativeWidgetWithJavaUtilMap_(ASUITextViewLabelImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASUITextViewLabelImpl_addMinMaxListener(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTextColorHighlightWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewLabelImpl_getTextColorHighlight(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getPaddingEnd(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getPaddingStart(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setPaddingVerticalWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setPaddingHorizontalWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setPaddingEndWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setPaddingStartWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setPaddingWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetPaddingBottomWithInt_(ASUITextViewLabelImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetPaddingLeftWithInt_(ASUITextViewLabelImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetPaddingRightWithInt_(ASUITextViewLabelImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetPaddingTopWithInt_(ASUITextViewLabelImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetLineBreakModeWithInt_(ASUITextViewLabelImpl *self, jint lineBreakMode);

__attribute__((unused)) static JavaLangInteger *ASUITextViewLabelImpl_nativeGetLinBreakMode(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setJustificationModeWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetTextAligmentWithInt_(ASUITextViewLabelImpl *self, jint textAlignment);

__attribute__((unused)) static id ASUITextViewLabelImpl_getJustificationMode(ASUITextViewLabelImpl *self);

__attribute__((unused)) static JavaLangInteger *ASUITextViewLabelImpl_nativeGetTextAligment(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setSingleLineWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setNumberOfLinesWithId_withInt_(ASUITextViewLabelImpl *self, id asNativeWidget, jint numberOfLines);

__attribute__((unused)) static id ASUITextViewLabelImpl_getSingleLine(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setAutoLinkWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetAutoLinkWithInt_(ASUITextViewLabelImpl *self, jint autolinkFlags);

__attribute__((unused)) static id ASUITextViewLabelImpl_getAutoLink(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_setEnabledWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setScrollHorizontallyWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetScrollHorizontallyWithBoolean_(ASUITextViewLabelImpl *self, jboolean scrollHorizontally);

__attribute__((unused)) static void ASUITextViewLabelImpl_setTextColorLinkWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativesetTextColorLinkWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_setLinksClickableWithId_(ASUITextViewLabelImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeSetLinksClickableWithBoolean_(ASUITextViewLabelImpl *self, jboolean linksClickable);

__attribute__((unused)) static id ASUITextViewLabelImpl_getLinksClickable(ASUITextViewLabelImpl *self);

__attribute__((unused)) static jint ASUITextViewLabelImpl_nativeGetBaseLine(ASUITextViewLabelImpl *self);

__attribute__((unused)) static id ASUITextViewLabelImpl_getFont(ASUITextViewLabelImpl *self);

__attribute__((unused)) static void ASUITextViewLabelImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUITextViewLabelImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASUITextViewLabelImpl_adjustContentSizeWithInt_withInt_(ASUITextViewLabelImpl *self, jint width, jint height);

__attribute__((unused)) static jboolean ASUITextViewLabelImpl_isContentOffsetCorrectionNeededWithId_(ASUITextViewLabelImpl *self, id view);

__attribute__((unused)) static void ASUITextViewLabelImpl_setContentOffsetWithInt_withId_(ASUITextViewLabelImpl *self, jint topCorrect, id view);

__attribute__((unused)) static void ASUITextViewLabelImpl_setHintColorWithInt_(ASUITextViewLabelImpl *self, jint currentHintTextColor);

__attribute__((unused)) static void ASUITextViewLabelImpl_syncPlaceholderLabel(ASUITextViewLabelImpl *self);

@interface ASUITextViewLabelImpl_AutoSizeTextType () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_AutoSizeTextType, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_Ellipsize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_Ellipsize, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_MarqueeRepeatLimit () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_MarqueeRepeatLimit, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_JustificationMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_JustificationMode, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_AutoLink () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_AutoLink, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASUITextViewLabelImpl_UITextViewLabelExt () {
 @public
  __unsafe_unretained ASUITextViewLabelImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_UITextViewLabelExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_UITextViewLabelExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASUITextViewLabelImpl_DellocHandler : ASEventBusHandler {
 @public
  __unsafe_unretained ASUITextViewLabelImpl *this$0_;
}

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$
                                 withNSString:(NSString *)type;

- (void)doPerformWithId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ASUITextViewLabelImpl_DellocHandler)

__attribute__((unused)) static void ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl_DellocHandler *self, ASUITextViewLabelImpl *outer$, NSString *type);

__attribute__((unused)) static ASUITextViewLabelImpl_DellocHandler *new_ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *type) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewLabelImpl_DellocHandler *create_ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *type);

J2OBJC_TYPE_LITERAL_HEADER(ASUITextViewLabelImpl_DellocHandler)

@interface ASUITextViewLabelImpl_PostMeasureHandler () {
 @public
  __unsafe_unretained ASUITextViewLabelImpl *this$0_;
  jboolean onlyOnce_;
}

@end

@interface ASUITextViewLabelImpl_MarqueeTask : NSObject < JavaLangRunnable > {
 @public
  __unsafe_unretained ASUITextViewLabelImpl *this$0_;
  jint slideLength_;
  jint cycles_;
  jboolean cancel_;
  NSString *direction_;
}

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$
                                 withNSString:(NSString *)direction;

- (void)cancel;

- (void)restart;

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASUITextViewLabelImpl_MarqueeTask)

J2OBJC_FIELD_SETTER(ASUITextViewLabelImpl_MarqueeTask, direction_, NSString *)

__attribute__((unused)) static void ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl_MarqueeTask *self, ASUITextViewLabelImpl *outer$, NSString *direction);

__attribute__((unused)) static ASUITextViewLabelImpl_MarqueeTask *new_ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *direction) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewLabelImpl_MarqueeTask *create_ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *direction);

J2OBJC_TYPE_LITERAL_HEADER(ASUITextViewLabelImpl_MarqueeTask)

@interface ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 : NSObject < JavaLangRunnable > {
 @public
  ASUITextViewLabelImpl_MarqueeTask *this$0_;
  jint val$numberOfBlankSpaces_;
}

- (void)run;

@end

J2OBJC_EMPTY_STATIC_INIT(ASUITextViewLabelImpl_MarqueeTask_$Lambda$1)

__attribute__((unused)) static void ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 *self, ASUITextViewLabelImpl_MarqueeTask *outer$, jint capture$0);

__attribute__((unused)) static ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 *new_ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(ASUITextViewLabelImpl_MarqueeTask *outer$, jint capture$0) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 *create_ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(ASUITextViewLabelImpl_MarqueeTask *outer$, jint capture$0);

@interface ASUITextViewLabelImpl_UITextViewLabelCommandBuilder () {
 @public
  ASUITextViewLabelImpl *this$0_;
}

@end

@interface ASUITextViewLabelImpl_UITextViewLabelBean () {
 @public
  ASUITextViewLabelImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASUITextViewLabelImpl)

NSString *ASUITextViewLabelImpl_LOCAL_NAME = @"UITextViewLabel";
NSString *ASUITextViewLabelImpl_GROUP_NAME = @"TextView";

@implementation ASUITextViewLabelImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosUsesStandardTextScaling"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEditable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsEditingTextAttributes"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsOnInsertion"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsSelectable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textIsSelectable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.autoSizeTextType", new_ASUITextViewLabelImpl_AutoSizeTextType_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeTextType"])) withTypeWithNSString:@"UITextViewLabel.autoSizeTextType"])) withOrderWithInt:1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeMaxTextSize"])) withTypeWithNSString:@"dimensionsppxint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeMinTextSize"])) withTypeWithNSString:@"dimensionsppxint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizeStepGranularity"])) withTypeWithNSString:@"dimensionsppxint"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoSizePresetSizes"])) withTypeWithNSString:@"array"])) withArrayTypeWithNSString:@"dimensionsppxint"])) withArrayListToFinalTypeWithNSString:@"listtointarray"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.ellipsize", new_ASUITextViewLabelImpl_Ellipsize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ellipsize"])) withTypeWithNSString:@"UITextViewLabel.ellipsize"])) withOrderWithInt:100]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"startOrStopMarquee"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.marqueeRepeatLimit", new_ASUITextViewLabelImpl_MarqueeRepeatLimit_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"marqueeRepeatLimit"])) withTypeWithNSString:@"UITextViewLabel.marqueeRepeatLimit"])) withOrderWithInt:100]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.justificationMode", new_ASUITextViewLabelImpl_JustificationMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"justificationMode"])) withTypeWithNSString:@"UITextViewLabel.justificationMode"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"password"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.autoLink", new_ASUITextViewLabelImpl_AutoLink_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoLink"])) withTypeWithNSString:@"UITextViewLabel.autoLink"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.font", new_ASUITextViewLabelImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"UITextViewLabel.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.textStyle", new_ASUITextViewLabelImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"UITextViewLabel.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableLeft"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableRight"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextViewLabel.drawableTintMode", new_ASUITextViewLabelImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"UITextViewLabel.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"linksClickable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorLink"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHighlight"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerConstructorAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"html"])) withTypeWithNSString:@"boolean"]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASUITextViewLabelImpl_UITextViewLabelExt *) nil_chk(((ASUITextViewLabelImpl_UITextViewLabelExt *) cast_chk(measurableTextView_, [ASUITextViewLabelImpl_UITextViewLabelExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASUITextViewLabelImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableTextView_ = new_ASUITextViewLabelImpl_UITextViewLabelExt_initWithASUITextViewLabelImpl_(self);
  ASUITextViewLabelImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASUITextViewLabelImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASUITextViewLabelImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  ASViewImpl_setAttributeWithASIWidget_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"iosUsesStandardTextScaling", @"iosIsEditable", @"iosAllowsEditingTextAttributes", @"iosClearsOnInsertion", @"textIsSelectable", @"iosIsSelectable", @"text", @"gravity", @"textSize", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"autoSizeTextType", @"autoSizeMaxTextSize", @"autoSizeMinTextSize", @"autoSizeStepGranularity", @"autoSizePresetSizes", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"ellipsize", @"startOrStopMarquee", @"marqueeRepeatLimit", @"justificationMode", @"singleLine", @"password", @"autoLink", @"textAllCaps", @"maxLength", @"typeface", @"textStyle", @"fontFamily", @"drawableLeft", @"drawableStart", @"drawableRight", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"linksClickable", @"textColorLink", @"scrollHorizontally", @"enabled", @"editable", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"textColorHighlight", @"textColor", @"textFormat" }, 68)) {
    case 0:
    {
      [self setTextWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    {
      if ([self checkIosVersionWithNSString:@"13.0"]) {
        [self setUsesStandardTextScalingWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 3:
    {
      [self setIsEditableWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setAllowsEditingTextAttributesWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setClearsOnInsertionWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    case 7:
    {
      [self setIsSelectableWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    {
      ASUITextViewLabelImpl_setMyTextWithId_(self, objValue);
    }
    break;
    case 9:
    {
      ASUITextViewLabelImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASUITextViewLabelImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASUITextViewLabelImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 12:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 13:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 14:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 15:
    {
      ASUITextViewLabelImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASUITextViewLabelImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 17:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 18:
    {
      ASUITextViewLabelImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASUITextViewLabelImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASUITextViewLabelImpl_setAutoSizeTextTypeWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASUITextViewLabelImpl_setAutoMaxTextSizeWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASUITextViewLabelImpl_setAutoMinTextSizeWithId_(self, objValue);
    }
    break;
    case 23:
    {
      ASUITextViewLabelImpl_setAutoSizeStepGranularityWithId_(self, objValue);
    }
    break;
    case 24:
    {
      ASUITextViewLabelImpl_setAutoSizePresetSizesWithId_(self, objValue);
    }
    break;
    case 25:
    {
      ASUITextViewLabelImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 26:
    {
      ASUITextViewLabelImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASUITextViewLabelImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 28:
    {
      ASUITextViewLabelImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 29:
    {
      ASUITextViewLabelImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASUITextViewLabelImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASUITextViewLabelImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 32:
    {
      ASUITextViewLabelImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 33:
    {
      ASUITextViewLabelImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 34:
    {
      ASUITextViewLabelImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 35:
    {
      ASUITextViewLabelImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASUITextViewLabelImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASUITextViewLabelImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 38:
    {
      ASUITextViewLabelImpl_startOrStopMarqueeWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASUITextViewLabelImpl_setMarqueeRepeatLimitWithId_(self, objValue);
    }
    break;
    case 40:
    {
      ASUITextViewLabelImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 41:
    {
      ASUITextViewLabelImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASUITextViewLabelImpl_setPasswordWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASUITextViewLabelImpl_setAutoLinkWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASUITextViewLabelImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASUITextViewLabelImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASUITextViewLabelImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 47:
    {
      ASUITextViewLabelImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 48:
    {
      ASUITextViewLabelImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 49:
    {
      ASUITextViewLabelImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", objValue);
    }
    break;
    case 50:
    {
      ASUITextViewLabelImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 51:
    {
      ASUITextViewLabelImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", objValue);
    }
    break;
    case 52:
    {
      ASUITextViewLabelImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 53:
    {
      ASUITextViewLabelImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 54:
    {
      ASUITextViewLabelImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 55:
    {
      ASUITextViewLabelImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 56:
    {
      ASUITextViewLabelImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 57:
    {
      ASUITextViewLabelImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 58:
    {
      ASUITextViewLabelImpl_setLinksClickableWithId_(self, objValue);
    }
    break;
    case 59:
    {
      ASUITextViewLabelImpl_setTextColorLinkWithId_(self, objValue);
    }
    break;
    case 60:
    {
      ASUITextViewLabelImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 61:
    {
      ASUITextViewLabelImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 62:
    {
      ASUITextViewLabelImpl_setEnabledWithId_(self, objValue);
    }
    break;
    case 63:
    {
      ASUITextViewLabelImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 64:
    {
      ASUITextViewLabelImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    case 65:
    {
      ASUITextViewLabelImpl_setTextColorHighlightWithId_(self, objValue);
    }
    break;
    case 66:
    {
      ASUITextViewLabelImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 67:
    {
      ASUITextViewLabelImpl_setTextFormatWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [self asNativeWidget];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"iosUsesStandardTextScaling", @"iosIsEditable", @"iosAllowsEditingTextAttributes", @"iosClearsOnInsertion", @"textIsSelectable", @"iosIsSelectable", @"text", @"gravity", @"textSize", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"autoSizeTextType", @"autoSizeMaxTextSize", @"autoSizeMinTextSize", @"autoSizeStepGranularity", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ellipsize", @"marqueeRepeatLimit", @"justificationMode", @"autoLink", @"drawablePadding", @"linksClickable", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight", @"textColorHighlight", @"textColor" }, 41)) {
    case 0:
    {
      return [self getText];
    }
    case 1:
    {
      return [self getTextColor];
    }
    case 2:
    {
      if ([self checkIosVersionWithNSString:@"13.0"]) {
        return [self getUsesStandardTextScaling];
      }
      break;
    }
    case 3:
    {
      return [self getIsEditable];
    }
    case 4:
    {
      return [self getAllowsEditingTextAttributes];
    }
    case 5:
    {
      return [self getClearsOnInsertion];
    }
    case 6:
    case 7:
    {
      return [self getIsSelectable];
    }
    case 8:
    {
      return ASUITextViewLabelImpl_getMyText(self);
    }
    case 9:
    {
      return ASUITextViewLabelImpl_getGravity(self);
    }
    case 10:
    {
      return ASUITextViewLabelImpl_getTextSize(self);
    }
    case 11:
    {
      return [self getPaddingBottom];
    }
    case 12:
    {
      return [self getPaddingRight];
    }
    case 13:
    {
      return [self getPaddingLeft];
    }
    case 14:
    {
      return ASUITextViewLabelImpl_getPaddingStart(self);
    }
    case 15:
    {
      return ASUITextViewLabelImpl_getPaddingEnd(self);
    }
    case 16:
    {
      return [self getPaddingTop];
    }
    case 17:
    {
      return ASUITextViewLabelImpl_getAutoSizeTextType(self);
    }
    case 18:
    {
      return ASUITextViewLabelImpl_getAutoMaxTextSize(self);
    }
    case 19:
    {
      return ASUITextViewLabelImpl_getAutoMinTextSize(self);
    }
    case 20:
    {
      return ASUITextViewLabelImpl_getAutoSizeStepGranularity(self);
    }
    case 21:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 22:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 23:
    {
      return ASUITextViewLabelImpl_getMinWidth(self);
    }
    case 24:
    {
      return ASUITextViewLabelImpl_getMinHeight(self);
    }
    case 25:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_(ASUITextViewLabelImpl_getHeight(self));
    }
    case 28:
    {
      return ASUITextViewLabelImpl_getWidth(self);
    }
    case 29:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 31:
    {
      return ASUITextViewLabelImpl_getEllipsize(self);
    }
    case 32:
    {
      return ASUITextViewLabelImpl_getMarqueeRepeatLimit(self);
    }
    case 33:
    {
      return ASUITextViewLabelImpl_getJustificationMode(self);
    }
    case 34:
    {
      return ASUITextViewLabelImpl_getAutoLink(self);
    }
    case 35:
    {
      return ASUITextViewLabelImpl_getDrawablePadding(self);
    }
    case 36:
    {
      return ASUITextViewLabelImpl_getLinksClickable(self);
    }
    case 37:
    {
      return ASUITextViewLabelImpl_getFirstBaselineToTopHeight(self);
    }
    case 38:
    {
      return ASUITextViewLabelImpl_getLastBaselineToBottomHeight(self);
    }
    case 39:
    {
      return ASUITextViewLabelImpl_getTextColorHighlight(self);
    }
    case 40:
    {
      return ASUITextViewLabelImpl_getTextColorState(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableTextView_;
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getBottomDrawable]);
  ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLeftDrawable]);
  ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRightDrawable]);
  ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTopDrawable]);
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTextColors])) isStateful]) {
    ASUITextViewLabelImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCurrentTextColor]));
  }
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getHintTextColors])) isStateful]) {
    ASUITextViewLabelImpl_setHintColorWithInt_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCurrentHintTextColor]);
    ASUITextViewLabelImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASUITextViewLabelImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors])) isStateful]) {
    ASUITextViewLabelImpl_setTextColorLinkWithId_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (void)handleHtmlTextWithNSString:(NSString *)text {
  ASUITextViewLabelImpl_handleHtmlTextWithNSString_(self, text);
}

- (void)nativeSetTextWithNSString:(NSString *)text {
  ASUITextViewLabelImpl_nativeSetTextWithNSString_(self, text);
}

- (void)nativeSetHtmlTextWithId:(id)text {
  ASUITextViewLabelImpl_nativeSetHtmlTextWithId_(self, text);
}

- (id)getMyText {
  return ASUITextViewLabelImpl_getMyText(self);
}

- (id)getTextSize {
  return ASUITextViewLabelImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASUITextViewLabelImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASUITextViewLabelImpl_nativeSetTextSizeWithInt_(self, value);
}

- (id)getEllipsize {
  return ASUITextViewLabelImpl_getEllipsize(self);
}

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue {
  ASUITextViewLabelImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
}

- (jint)nativeGetFontSize {
  return ASUITextViewLabelImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASUITextViewLabelImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASUITextViewLabelImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASUITextViewLabelImpl_nativeSetFontStyleWithInt_(self, style);
}

+ (NSString *)toUpperCaseWithNSString:(NSString *)text {
  return ASUITextViewLabelImpl_toUpperCaseWithNSString_(text);
}

- (void)setVerticalAligmentCenter {
  ASUITextViewLabelImpl_setVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASUITextViewLabelImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASUITextViewLabelImpl_setVerticalAligmentTop(self);
}

- (void)setHorizontalAligmentCenter {
  ASUITextViewLabelImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASUITextViewLabelImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentRightInternal {
  ASUITextViewLabelImpl_setHorizontalAligmentRightInternal(self);
}

- (void)setHorizontalAligmentLeft {
  ASUITextViewLabelImpl_setHorizontalAligmentLeft(self);
}

- (void)setHorizontalAligmentLeftInternal {
  ASUITextViewLabelImpl_setHorizontalAligmentLeftInternal(self);
}

- (jint)getTextAlignment {
  return ASUITextViewLabelImpl_getTextAlignment(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASUITextViewLabelImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASUITextViewLabelImpl_nativeSetVerticalAligmentTop(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASUITextViewLabelImpl_nativeSetVerticalAligmentCenter(self);
}

- (jint)getBorderPadding {
  return paddingTop_ + paddingBottom_;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASUITextViewLabelImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASUITextViewLabelImpl_getBorderWidth(self);
}

- (jboolean)canMarquee {
  return ASUITextViewLabelImpl_canMarquee(self);
}

- (void)cancelNativeTimer {
  ASUITextViewLabelImpl_cancelNativeTimer(self);
}

- (jboolean)isDisposed {
  return ASUITextViewLabelImpl_isDisposed(self);
}

- (void)addDeallocHandler {
  ASUITextViewLabelImpl_addDeallocHandler(self);
}

- (void)schedule {
  ASUITextViewLabelImpl_schedule(self);
}

- (void)onTick:(NSTimer *)timer {
  [self executeOnMainThreadWithJavaLangRunnable:self->marqueeTask_];
}

- (void)executeOnMainThreadWithJavaLangRunnable:(id<JavaLangRunnable>)runnable {
  ASUITextViewLabelImpl_executeOnMainThreadWithJavaLangRunnable_(self, runnable);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASUITextViewLabelImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASUITextViewLabelImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASUITextViewLabelImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASUITextViewLabelImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASUITextViewLabelImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASUITextViewLabelImpl_setDrawableTintWithId_(self, objValue);
}

- (void)setTextColorWithId:(id)objValue {
  ASUITextViewLabelImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASUITextViewLabelImpl_getTextColorState(self);
}

- (void)setGravityWithId:(id)objValue {
  ASUITextViewLabelImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASUITextViewLabelImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASUITextViewLabelImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRawTextAlignment] != 0 || [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRawLayoutDirection] != 0) {
    ASUITextViewLabelImpl_updateTextAlignment(self);
  }
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUITextViewLabelImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (id)getMinHeight {
  return ASUITextViewLabelImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASUITextViewLabelImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASUITextViewLabelImpl_setEmsWithId_(self, objValue);
}

- (jint)getMaxEms {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxEms];
}

- (jint)getMinEms {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASUITextViewLabelImpl_setMinEmsWithId_(self, objValue);
}

- (jint)getMinLines {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMinLines];
}

- (jint)getMaxLines {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASUITextViewLabelImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASUITextViewLabelImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASUITextViewLabelImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASUITextViewLabelImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASUITextViewLabelImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASUITextViewLabelImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASUITextViewLabelImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASUITextViewLabelImpl_setMaxWidthWithId_(self, objValue);
}

- (jint)getMaxWidth {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxWidth];
}

- (jint)getMaxHeight {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASUITextViewLabelImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASUITextViewLabelImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASUITextViewLabelImpl_getWidth(self);
}

- (jint)getHeight {
  return ASUITextViewLabelImpl_getHeight(self);
}

- (jint)getAutoSizeTextTypeWithASMeasurableTextView:(ASMeasurableTextView *)measurableTextView {
  return ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(self, measurableTextView);
}

- (void)setAutoSizeTextTypeInternalWithInt:(jint)autoTextType {
  ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(self, autoTextType);
}

- (jboolean)suggestedSizeFitsInSpaceWithInt:(jint)suggestedSizeInPx
                                  withFloat:(jfloat)width
                                  withFloat:(jfloat)height {
  return ASUITextViewLabelImpl_suggestedSizeFitsInSpaceWithInt_withFloat_withFloat_(self, suggestedSizeInPx, width, height);
}

- (void)setAutoSizePresetSizesWithId:(id)objValue {
  ASUITextViewLabelImpl_setAutoSizePresetSizesWithId_(self, objValue);
}

- (void)addAutoResizeListener {
  ASUITextViewLabelImpl_addAutoResizeListener(self);
}

- (void)removeResizeListener {
  ASUITextViewLabelImpl_removeResizeListener(self);
}

- (jint)computeSizeWithFloat:(jfloat)width {
  return ASUITextViewLabelImpl_computeSizeWithFloat_(self, width);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASUITextViewLabelImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setPasswordWithId:(id)objValue {
  ASUITextViewLabelImpl_setPasswordWithId_(self, objValue);
}

- (void)setMyTextWithId:(id)objValue {
  ASUITextViewLabelImpl_setMyTextWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASUITextViewLabelImpl_setTextAllCapsWithId_(self, objValue);
}

- (jint)calcNumberOfWhiteSpaces {
  return ASUITextViewLabelImpl_calcNumberOfWhiteSpaces(self);
}

- (void)cancelTimer {
  ASUITextViewLabelImpl_cancelTimer(self);
}

- (void)startTimer {
  ASUITextViewLabelImpl_startTimer(self);
}

- (id)getMarqueeRepeatLimit {
  return ASUITextViewLabelImpl_getMarqueeRepeatLimit(self);
}

- (void)setMarqueeRepeatLimitWithId:(id)objValue {
  ASUITextViewLabelImpl_setMarqueeRepeatLimitWithId_(self, objValue);
}

- (void)startOrStopMarqueeWithId:(id)objValue {
  ASUITextViewLabelImpl_startOrStopMarqueeWithId_(self, objValue);
}

- (jint)getLabelWidth {
  return ASUITextViewLabelImpl_getLabelWidth(self);
}

- (jboolean)isLabelMeasured {
  return ASUITextViewLabelImpl_isLabelMeasured(self);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASUITextViewLabelImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASUITextViewLabelImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASUITextViewLabelImpl_setTextStyleWithId_(self, objValue);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASUITextViewLabelImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (jboolean)getIncludeFontPadding {
  return ASUITextViewLabelImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASUITextViewLabelImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASUITextViewLabelImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASUITextViewLabelImpl_getLastBaselineToBottomHeight(self);
}

- (void)setAutoSizeStepGranularityWithId:(id)objValue {
  ASUITextViewLabelImpl_setAutoSizeStepGranularityWithId_(self, objValue);
}

- (void)setAutoMinTextSizeWithId:(id)objValue {
  ASUITextViewLabelImpl_setAutoMinTextSizeWithId_(self, objValue);
}

- (void)setAutoMaxTextSizeWithId:(id)objValue {
  ASUITextViewLabelImpl_setAutoMaxTextSizeWithId_(self, objValue);
}

- (void)setAutoSizeTextTypeWithId:(id)objValue {
  ASUITextViewLabelImpl_setAutoSizeTextTypeWithId_(self, objValue);
}

- (id)getAutoSizeStepGranularity {
  return ASUITextViewLabelImpl_getAutoSizeStepGranularity(self);
}

- (id)getAutoMinTextSize {
  return ASUITextViewLabelImpl_getAutoMinTextSize(self);
}

- (id)getAutoMaxTextSize {
  return ASUITextViewLabelImpl_getAutoMaxTextSize(self);
}

- (id)getAutoSizeTextType {
  return ASUITextViewLabelImpl_getAutoSizeTextType(self);
}

- (void)setErrorMessageWithNSString:(NSString *)message {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([self getBuilder])) setTextWithNSString:message])) setVisibilityWithNSString:message == nil || [message java_isEmpty] ? @"gone" : @"visible"])) executeWithBoolean:true];
}

- (void)setTextFormatWithId:(id)objValue {
  ASUITextViewLabelImpl_setTextFormatWithId_(self, objValue);
}

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).text = (NSString*) value;
}

- (id)getText {
  return ((ASUITextViewLabel*) uiView_).text;
}

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).textColor = (UIColor*) value;
}

- (id)getTextColor {
  return ((ASUITextViewLabel*) uiView_).textColor;
}

- (void)setUsesStandardTextScalingWithId:(id)nativeWidget
                                  withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).usesStandardTextScaling = [(JavaLangBoolean*) value booleanValue];
}

- (id)getUsesStandardTextScaling {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextViewLabel*) uiView_).usesStandardTextScaling];
}

- (void)setIsEditableWithId:(id)nativeWidget
                     withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).editable = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsEditable {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextViewLabel*) uiView_).editable];
}

- (void)setAllowsEditingTextAttributesWithId:(id)nativeWidget
                                      withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).allowsEditingTextAttributes = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsEditingTextAttributes {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextViewLabel*) uiView_).allowsEditingTextAttributes];
}

- (void)setClearsOnInsertionWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).clearsOnInsertion = [(JavaLangBoolean*) value booleanValue];
}

- (id)getClearsOnInsertion {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextViewLabel*) uiView_).clearsOnInsertion];
}

- (void)setIsSelectableWithId:(id)nativeWidget
                       withId:(id)value {
  ((ASUITextViewLabel*) nativeWidget).selectable = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsSelectable {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextViewLabel*) uiView_).selectable];
}

- (id)asNativeWidget {
  return uiView_;
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableTextView *) nil_chk(measurableTextView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASUITextViewLabelImpl_UITextViewLabelBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASUITextViewLabelImpl_UITextViewLabelBean_initWithASUITextViewLabelImpl_(self);
  }
  return bean_;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASUITextViewLabelImpl_UITextViewLabelCommandBuilder_initWithASUITextViewLabelImpl_(self);
  }
  return builder_;
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUITextViewLabelImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (void)createNativeWidgetWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUITextViewLabelImpl_createNativeWidgetWithJavaUtilMap_(self, params);
}

- (void)addMinMaxListener {
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

- (void)setTextColorHighlightWithId:(id)objValue {
  ASUITextViewLabelImpl_setTextColorHighlightWithId_(self, objValue);
}

- (id)getTextColorHighlight {
  return ASUITextViewLabelImpl_getTextColorHighlight(self);
}

- (id)getPaddingLeft {
  return JavaLangInteger_valueOfWithInt_(paddingLeft_);
}

- (void)setPaddingLeftWithId:(id)paddingLeft {
  self->paddingLeft_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingLeft, [JavaLangInteger class]))) intValue];
  ASUITextViewLabelImpl_nativeSetPaddingLeftWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingLeft, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingLeft]);
}

- (id)getPaddingRight {
  return JavaLangInteger_valueOfWithInt_(paddingRight_);
}

- (void)setPaddingRightWithId:(id)paddingRight {
  self->paddingRight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingRight, [JavaLangInteger class]))) intValue];
  ASUITextViewLabelImpl_nativeSetPaddingRightWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingRight, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingRight]);
}

- (id)getPaddingTop {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingTop]);
  }
  return JavaLangInteger_valueOfWithInt_(paddingTop_);
}

- (void)setPaddingTopWithId:(id)paddingTop {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    ASViewImpl_setPaddingTopWithId_withADView_((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]), measurableTextView_);
  }
  else {
    self->paddingTop_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]))) intValue];
    ASUITextViewLabelImpl_nativeSetPaddingTopWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingTop]);
  }
}

- (id)getPaddingBottom {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingBottom]);
  }
  return JavaLangInteger_valueOfWithInt_(paddingBottom_);
}

- (id)getPaddingEnd {
  return ASUITextViewLabelImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASUITextViewLabelImpl_getPaddingStart(self);
}

- (void)setPaddingBottomWithId:(id)paddingBottom {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    ASViewImpl_setPaddingBottomWithId_withADView_((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]), measurableTextView_);
  }
  else {
    self->paddingBottom_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]))) intValue];
    ASUITextViewLabelImpl_nativeSetPaddingBottomWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingBottom]);
  }
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASUITextViewLabelImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASUITextViewLabelImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASUITextViewLabelImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASUITextViewLabelImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASUITextViewLabelImpl_setPaddingWithId_(self, objValue);
}

- (void)updatePadding {
  [self setPaddingLeftWithId:JavaLangInteger_valueOfWithInt_(paddingLeft_)];
  [self setPaddingRightWithId:JavaLangInteger_valueOfWithInt_(paddingRight_)];
  [self setPaddingTopWithId:JavaLangInteger_valueOfWithInt_(paddingTop_)];
  [self setPaddingBottomWithId:JavaLangInteger_valueOfWithInt_(paddingBottom_)];
}

- (void)nativeSetPaddingBottomWithInt:(jint)value {
  ASUITextViewLabelImpl_nativeSetPaddingBottomWithInt_(self, value);
}

- (void)nativeSetPaddingLeftWithInt:(jint)value {
  ASUITextViewLabelImpl_nativeSetPaddingLeftWithInt_(self, value);
}

- (void)nativeSetPaddingRightWithInt:(jint)value {
  ASUITextViewLabelImpl_nativeSetPaddingRightWithInt_(self, value);
}

- (void)nativeSetPaddingTopWithInt:(jint)value {
  ASUITextViewLabelImpl_nativeSetPaddingTopWithInt_(self, value);
}

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode {
  ASUITextViewLabelImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
}

- (JavaLangInteger *)nativeGetLinBreakMode {
  return ASUITextViewLabelImpl_nativeGetLinBreakMode(self);
}

- (void)setJustificationModeWithId:(id)objValue
                      withNSString:(NSString *)strValue {
  ASUITextViewLabelImpl_setJustificationModeWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetTextAligmentWithInt:(jint)textAlignment {
  ASUITextViewLabelImpl_nativeSetTextAligmentWithInt_(self, textAlignment);
}

- (id)getJustificationMode {
  return ASUITextViewLabelImpl_getJustificationMode(self);
}

- (JavaLangInteger *)nativeGetTextAligment {
  return ASUITextViewLabelImpl_nativeGetTextAligment(self);
}

- (void)setSingleLineWithId:(id)objValue {
  ASUITextViewLabelImpl_setSingleLineWithId_(self, objValue);
}

- (void)setNumberOfLinesWithId:(id)asNativeWidget
                       withInt:(jint)numberOfLines {
  ASUITextViewLabelImpl_setNumberOfLinesWithId_withInt_(self, asNativeWidget, numberOfLines);
}

- (id)getSingleLine {
  return ASUITextViewLabelImpl_getSingleLine(self);
}

- (void)setAutoLinkWithId:(id)objValue {
  ASUITextViewLabelImpl_setAutoLinkWithId_(self, objValue);
}

- (void)nativeSetAutoLinkWithInt:(jint)autolinkFlags {
  ASUITextViewLabelImpl_nativeSetAutoLinkWithInt_(self, autolinkFlags);
}

- (id)getAutoLink {
  return ASUITextViewLabelImpl_getAutoLink(self);
}

- (void)setEnabledWithId:(id)objValue {
  ASUITextViewLabelImpl_setEnabledWithId_(self, objValue);
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASUITextViewLabelImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (void)nativeSetScrollHorizontallyWithBoolean:(jboolean)scrollHorizontally {
  ASUITextViewLabelImpl_nativeSetScrollHorizontallyWithBoolean_(self, scrollHorizontally);
}

- (void)setTextColorLinkWithId:(id)objValue {
  ASUITextViewLabelImpl_setTextColorLinkWithId_(self, objValue);
}

- (void)nativesetTextColorLinkWithId:(id)objValue {
  ASUITextViewLabelImpl_nativesetTextColorLinkWithId_(self, objValue);
}

- (void)setLinksClickableWithId:(id)objValue {
  ASUITextViewLabelImpl_setLinksClickableWithId_(self, objValue);
}

- (void)nativeSetLinksClickableWithBoolean:(jboolean)linksClickable {
  ASUITextViewLabelImpl_nativeSetLinksClickableWithBoolean_(self, linksClickable);
}

- (id)getLinksClickable {
  return ASUITextViewLabelImpl_getLinksClickable(self);
}

- (jint)getBaseLine {
  return ASUITextViewLabelImpl_nativeGetBaseLine(self) + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingTop];
}

- (jint)nativeGetBaseLine {
  return ASUITextViewLabelImpl_nativeGetBaseLine(self);
}

- (id)getFont {
  return ASUITextViewLabelImpl_getFont(self);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASUITextViewLabelImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (void)adjustContentSizeWithInt:(jint)width
                         withInt:(jint)height {
  ASUITextViewLabelImpl_adjustContentSizeWithInt_withInt_(self, width, height);
}

- (jboolean)isContentOffsetCorrectionNeededWithId:(id)view {
  return ASUITextViewLabelImpl_isContentOffsetCorrectionNeededWithId_(self, view);
}

- (void)setContentOffsetWithInt:(jint)topCorrect
                         withId:(id)view {
  ASUITextViewLabelImpl_setContentOffsetWithInt_withId_(self, topCorrect, view);
}

- (void)setHintColorWithInt:(jint)currentHintTextColor {
  ASUITextViewLabelImpl_setHintColorWithInt_(self, currentHintTextColor);
}

- (void)syncPlaceholderLabel {
  ASUITextViewLabelImpl_syncPlaceholderLabel(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 13, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 14, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 15, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 18, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 22, 23, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 24, 19, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 25, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 27, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 28, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 34, 32, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 35, 32, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 36, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 37, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 41, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 43, 44, -1, 45, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 46, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 51, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 55, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 56, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 58, 59, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 60, 19, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 61, 62, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 63, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, 64, 65, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 66, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 72, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 73, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 74, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 75, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 77, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 78, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 79, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 82, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 83, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 40, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 85, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 86, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 87, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 88, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 89, 84, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 90, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 91, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 92, 1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 93, 44, -1, 45, -1, -1 },
    { NULL, "V", 0x102, 94, 44, -1, 45, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 95, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 96, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 97, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 98, 16, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 99, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 100, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 101, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 103, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 104, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 105, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 106, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 107, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 108, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 109, 19, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 110, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 111, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 113, 114, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 115, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 116, 19, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 117, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 119, 120, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 122, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 123, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 124, 120, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 125, 126, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 127, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 128, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 129, 130, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 131, 19, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(drawableStateChanged);
  methods[10].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[11].selector = @selector(handleHtmlTextWithNSString:);
  methods[12].selector = @selector(nativeSetTextWithNSString:);
  methods[13].selector = @selector(nativeSetHtmlTextWithId:);
  methods[14].selector = @selector(getMyText);
  methods[15].selector = @selector(getTextSize);
  methods[16].selector = @selector(setMyTextSizeWithId:);
  methods[17].selector = @selector(nativeSetTextSizeWithInt:);
  methods[18].selector = @selector(getEllipsize);
  methods[19].selector = @selector(setEllipsizeWithId:withNSString:);
  methods[20].selector = @selector(nativeGetFontSize);
  methods[21].selector = @selector(nativeGetFontStyle);
  methods[22].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[23].selector = @selector(nativeSetFontStyleWithInt:);
  methods[24].selector = @selector(toUpperCaseWithNSString:);
  methods[25].selector = @selector(setVerticalAligmentCenter);
  methods[26].selector = @selector(setVerticalAligmentBottom);
  methods[27].selector = @selector(setVerticalAligmentTop);
  methods[28].selector = @selector(setHorizontalAligmentCenter);
  methods[29].selector = @selector(setHorizontalAligmentRight);
  methods[30].selector = @selector(setHorizontalAligmentRightInternal);
  methods[31].selector = @selector(setHorizontalAligmentLeft);
  methods[32].selector = @selector(setHorizontalAligmentLeftInternal);
  methods[33].selector = @selector(getTextAlignment);
  methods[34].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[35].selector = @selector(nativeSetVerticalAligmentTop);
  methods[36].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[37].selector = @selector(getBorderPadding);
  methods[38].selector = @selector(getLineHeightPadding);
  methods[39].selector = @selector(getLineHeight);
  methods[40].selector = @selector(getBorderWidth);
  methods[41].selector = @selector(canMarquee);
  methods[42].selector = @selector(cancelNativeTimer);
  methods[43].selector = @selector(isDisposed);
  methods[44].selector = @selector(addDeallocHandler);
  methods[45].selector = @selector(schedule);
  methods[46].selector = @selector(executeOnMainThreadWithJavaLangRunnable:);
  methods[47].selector = @selector(setDrawablePaddingWithId:);
  methods[48].selector = @selector(setDrawableBottomWithId:);
  methods[49].selector = @selector(setDrawableTopWithId:);
  methods[50].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[51].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[52].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[53].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[54].selector = @selector(getImageHeightWithId:);
  methods[55].selector = @selector(getImageWidthWithId:);
  methods[56].selector = @selector(getDrawablePadding);
  methods[57].selector = @selector(setDrawableTintModeWithId:);
  methods[58].selector = @selector(setDrawableTintWithId:);
  methods[59].selector = @selector(setTextColorWithId:);
  methods[60].selector = @selector(getTextColorState);
  methods[61].selector = @selector(setGravityWithId:);
  methods[62].selector = @selector(updateTextAlignment);
  methods[63].selector = @selector(getGravity);
  methods[64].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[65].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[66].selector = @selector(getMinHeight);
  methods[67].selector = @selector(getMinWidth);
  methods[68].selector = @selector(setEmsWithId:);
  methods[69].selector = @selector(getMaxEms);
  methods[70].selector = @selector(getMinEms);
  methods[71].selector = @selector(setMinEmsWithId:);
  methods[72].selector = @selector(getMinLines);
  methods[73].selector = @selector(getMaxLines);
  methods[74].selector = @selector(setMaxEmsWithId:);
  methods[75].selector = @selector(setWidthWithId:);
  methods[76].selector = @selector(setHeightWithId:);
  methods[77].selector = @selector(setMaxLinesWithId:);
  methods[78].selector = @selector(setLinesWithId:);
  methods[79].selector = @selector(setMinLinesWithId:);
  methods[80].selector = @selector(setMaxHeightWithId:);
  methods[81].selector = @selector(setMaxWidthWithId:);
  methods[82].selector = @selector(getMaxWidth);
  methods[83].selector = @selector(getMaxHeight);
  methods[84].selector = @selector(setMinHeightWithId:);
  methods[85].selector = @selector(setMinWidthWithId:);
  methods[86].selector = @selector(getWidth);
  methods[87].selector = @selector(getHeight);
  methods[88].selector = @selector(getAutoSizeTextTypeWithASMeasurableTextView:);
  methods[89].selector = @selector(setAutoSizeTextTypeInternalWithInt:);
  methods[90].selector = @selector(suggestedSizeFitsInSpaceWithInt:withFloat:withFloat:);
  methods[91].selector = @selector(setAutoSizePresetSizesWithId:);
  methods[92].selector = @selector(addAutoResizeListener);
  methods[93].selector = @selector(removeResizeListener);
  methods[94].selector = @selector(computeSizeWithFloat:);
  methods[95].selector = @selector(setMaxLengthWithId:);
  methods[96].selector = @selector(setPasswordWithId:);
  methods[97].selector = @selector(setMyTextWithId:);
  methods[98].selector = @selector(setTextAllCapsWithId:);
  methods[99].selector = @selector(calcNumberOfWhiteSpaces);
  methods[100].selector = @selector(cancelTimer);
  methods[101].selector = @selector(startTimer);
  methods[102].selector = @selector(getMarqueeRepeatLimit);
  methods[103].selector = @selector(setMarqueeRepeatLimitWithId:);
  methods[104].selector = @selector(startOrStopMarqueeWithId:);
  methods[105].selector = @selector(getLabelWidth);
  methods[106].selector = @selector(isLabelMeasured);
  methods[107].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[108].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[109].selector = @selector(setTextStyleWithId:);
  methods[110].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[111].selector = @selector(getIncludeFontPadding);
  methods[112].selector = @selector(getFirstBaselineToTopHeight);
  methods[113].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[114].selector = @selector(getLastBaselineToBottomHeight);
  methods[115].selector = @selector(setAutoSizeStepGranularityWithId:);
  methods[116].selector = @selector(setAutoMinTextSizeWithId:);
  methods[117].selector = @selector(setAutoMaxTextSizeWithId:);
  methods[118].selector = @selector(setAutoSizeTextTypeWithId:);
  methods[119].selector = @selector(getAutoSizeStepGranularity);
  methods[120].selector = @selector(getAutoMinTextSize);
  methods[121].selector = @selector(getAutoMaxTextSize);
  methods[122].selector = @selector(getAutoSizeTextType);
  methods[123].selector = @selector(setErrorMessageWithNSString:);
  methods[124].selector = @selector(setTextFormatWithId:);
  methods[125].selector = @selector(setTextWithId:withId:);
  methods[126].selector = @selector(getText);
  methods[127].selector = @selector(setTextColorWithId:withId:);
  methods[128].selector = @selector(getTextColor);
  methods[129].selector = @selector(setUsesStandardTextScalingWithId:withId:);
  methods[130].selector = @selector(getUsesStandardTextScaling);
  methods[131].selector = @selector(setIsEditableWithId:withId:);
  methods[132].selector = @selector(getIsEditable);
  methods[133].selector = @selector(setAllowsEditingTextAttributesWithId:withId:);
  methods[134].selector = @selector(getAllowsEditingTextAttributes);
  methods[135].selector = @selector(setClearsOnInsertionWithId:withId:);
  methods[136].selector = @selector(getClearsOnInsertion);
  methods[137].selector = @selector(setIsSelectableWithId:withId:);
  methods[138].selector = @selector(getIsSelectable);
  methods[139].selector = @selector(asNativeWidget);
  methods[140].selector = @selector(checkIosVersionWithNSString:);
  methods[141].selector = @selector(setIdWithNSString:);
  methods[142].selector = @selector(requestLayout);
  methods[143].selector = @selector(invalidate);
  methods[144].selector = @selector(getPluginWithNSString:);
  methods[145].selector = @selector(getBean);
  methods[146].selector = @selector(getBuilder);
  methods[147].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[148].selector = @selector(createNativeWidgetWithJavaUtilMap:);
  methods[149].selector = @selector(addMinMaxListener);
  methods[150].selector = @selector(setTextColorHighlightWithId:);
  methods[151].selector = @selector(getTextColorHighlight);
  methods[152].selector = @selector(getPaddingLeft);
  methods[153].selector = @selector(setPaddingLeftWithId:);
  methods[154].selector = @selector(getPaddingRight);
  methods[155].selector = @selector(setPaddingRightWithId:);
  methods[156].selector = @selector(getPaddingTop);
  methods[157].selector = @selector(setPaddingTopWithId:);
  methods[158].selector = @selector(getPaddingBottom);
  methods[159].selector = @selector(getPaddingEnd);
  methods[160].selector = @selector(getPaddingStart);
  methods[161].selector = @selector(setPaddingBottomWithId:);
  methods[162].selector = @selector(setPaddingVerticalWithId:);
  methods[163].selector = @selector(setPaddingHorizontalWithId:);
  methods[164].selector = @selector(setPaddingEndWithId:);
  methods[165].selector = @selector(setPaddingStartWithId:);
  methods[166].selector = @selector(setPaddingWithId:);
  methods[167].selector = @selector(updatePadding);
  methods[168].selector = @selector(nativeSetPaddingBottomWithInt:);
  methods[169].selector = @selector(nativeSetPaddingLeftWithInt:);
  methods[170].selector = @selector(nativeSetPaddingRightWithInt:);
  methods[171].selector = @selector(nativeSetPaddingTopWithInt:);
  methods[172].selector = @selector(nativeSetLineBreakModeWithInt:);
  methods[173].selector = @selector(nativeGetLinBreakMode);
  methods[174].selector = @selector(setJustificationModeWithId:withNSString:);
  methods[175].selector = @selector(nativeSetTextAligmentWithInt:);
  methods[176].selector = @selector(getJustificationMode);
  methods[177].selector = @selector(nativeGetTextAligment);
  methods[178].selector = @selector(setSingleLineWithId:);
  methods[179].selector = @selector(setNumberOfLinesWithId:withInt:);
  methods[180].selector = @selector(getSingleLine);
  methods[181].selector = @selector(setAutoLinkWithId:);
  methods[182].selector = @selector(nativeSetAutoLinkWithInt:);
  methods[183].selector = @selector(getAutoLink);
  methods[184].selector = @selector(setEnabledWithId:);
  methods[185].selector = @selector(setScrollHorizontallyWithId:);
  methods[186].selector = @selector(nativeSetScrollHorizontallyWithBoolean:);
  methods[187].selector = @selector(setTextColorLinkWithId:);
  methods[188].selector = @selector(nativesetTextColorLinkWithId:);
  methods[189].selector = @selector(setLinksClickableWithId:);
  methods[190].selector = @selector(nativeSetLinksClickableWithBoolean:);
  methods[191].selector = @selector(getLinksClickable);
  methods[192].selector = @selector(getBaseLine);
  methods[193].selector = @selector(nativeGetBaseLine);
  methods[194].selector = @selector(getFont);
  methods[195].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[196].selector = @selector(adjustContentSizeWithInt:withInt:);
  methods[197].selector = @selector(isContentOffsetCorrectionNeededWithId:);
  methods[198].selector = @selector(setContentOffsetWithInt:withId:);
  methods[199].selector = @selector(setHintColorWithInt:);
  methods[200].selector = @selector(syncPlaceholderLabel);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 132, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 133, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableTextView_", "LASMeasurableTextView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "ellipsize_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 134, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 135, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASUITextViewLabelImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASUITextViewLabelImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASUITextViewLabelImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASUITextViewLabelImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "timer_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isDisposed_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "dellocHandler_", "LASUITextViewLabelImpl_DellocHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 136, -1 },
    { "postMeasureHandler_", "LASUITextViewLabelImpl_PostMeasureHandler;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "POST_MEASURE_EVENT_", "LNSString;", .constantValue.asLong = 0, 0x12, -1, -1, -1, -1 },
    { "marqueeTask_", "LASUITextViewLabelImpl_MarqueeTask;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeRepeatLimit_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "marqueeCommandConverter_", "LASMarqueeCommandConverter;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 137, -1 },
    { "autoSizeMin_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeMax_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "autoSizeGranular_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASUITextViewLabelImpl_UITextViewLabelBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preVerticalAligment_", "LASBaseMeasurableView_VerticalAligment;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "drawableStateChange", "LNSString;LADDrawable;", "handleHtmlText", "nativeSetText", "nativeSetHtmlText", "LNSObject;", "setMyTextSize", "nativeSetTextSize", "I", "setEllipsize", "LNSObject;LNSString;", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "toUpperCase", "executeOnMainThread", "LJavaLangRunnable;", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "setTextColor", "setGravity", "onRtlPropertiesChanged", "initHtml", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "getAutoSizeTextType", "LASMeasurableTextView;", "setAutoSizeTextTypeInternal", "suggestedSizeFitsInSpace", "IFF", "setAutoSizePresetSizes", "computeSize", "F", "setMaxLength", "setPassword", "setMyText", "setTextAllCaps", "setMarqueeRepeatLimit", "startOrStopMarquee", "setTypeFace", "setFontFamily", "setTextStyle", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setAutoSizeStepGranularity", "setAutoMinTextSize", "setAutoMaxTextSize", "setAutoSizeTextType", "setErrorMessage", "setTextFormat", "setText", "LNSObject;LNSObject;", "setUsesStandardTextScaling", "setIsEditable", "setAllowsEditingTextAttributes", "setClearsOnInsertion", "setIsSelectable", "checkIosVersion", "setId", "getPlugin", "nativeCreate", "createNativeWidget", "setTextColorHighlight", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setPadding", "nativeSetPaddingBottom", "nativeSetPaddingLeft", "nativeSetPaddingRight", "nativeSetPaddingTop", "nativeSetLineBreakMode", "setJustificationMode", "nativeSetTextAligment", "setSingleLine", "setNumberOfLines", "LNSObject;I", "setAutoLink", "nativeSetAutoLink", "setEnabled", "setScrollHorizontally", "nativeSetScrollHorizontally", "Z", "setTextColorLink", "nativesetTextColorLink", "setLinksClickable", "nativeSetLinksClickable", "nativeMakeFrameForChildWidget", "IIII", "adjustContentSize", "isContentOffsetCorrectionNeeded", "setContentOffset", "ILNSObject;", "setHintColor", &ASUITextViewLabelImpl_LOCAL_NAME, &ASUITextViewLabelImpl_GROUP_NAME, &ASUITextViewLabelImpl_ITALIC_FONT_TRAIT, &ASUITextViewLabelImpl_BOLD_FONT_TRAIT, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", "LASUITextViewLabelImpl_AutoSizeTextType;LASUITextViewLabelImpl_Ellipsize;LASUITextViewLabelImpl_MarqueeRepeatLimit;LASUITextViewLabelImpl_JustificationMode;LASUITextViewLabelImpl_AutoLink;LASUITextViewLabelImpl_Font;LASUITextViewLabelImpl_TextStyle;LASUITextViewLabelImpl_DrawableTintMode;LASUITextViewLabelImpl_UITextViewLabelExt;LASUITextViewLabelImpl_DellocHandler;LASUITextViewLabelImpl_PostMeasureHandler;LASUITextViewLabelImpl_MarqueeTask;LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;LASUITextViewLabelImpl_UITextViewLabelBean;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl = { "UITextViewLabelImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 201, 34, -1, 138, -1, -1, -1 };
  return &_ASUITextViewLabelImpl;
}

+ (void)initialize {
  if (self == [ASUITextViewLabelImpl class]) {
    ASUITextViewLabelImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASUITextViewLabelImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASUITextViewLabelImpl)
  }
}

@end

void ASUITextViewLabelImpl_init(ASUITextViewLabelImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASUITextViewLabelImpl_GROUP_NAME, ASUITextViewLabelImpl_LOCAL_NAME);
  self->POST_MEASURE_EVENT_ = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, postMeasure))) description];
  self->autoSizeMin_ = -1;
  self->autoSizeMax_ = -1;
  self->autoSizeGranular_ = -1;
}

ASUITextViewLabelImpl *new_ASUITextViewLabelImpl_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl, init)
}

ASUITextViewLabelImpl *create_ASUITextViewLabelImpl_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl, init)
}

void ASUITextViewLabelImpl_setWidgetOnNativeClass(ASUITextViewLabelImpl *self) {
  ((ASUITextViewLabel*) self.uiView).widget = self;
}

void ASUITextViewLabelImpl_drawableStateChangeWithNSString_withADDrawable_(ASUITextViewLabelImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASUITextViewLabelImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASUITextViewLabelImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASUITextViewLabelImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASUITextViewLabelImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

void ASUITextViewLabelImpl_handleHtmlTextWithNSString_(ASUITextViewLabelImpl *self, NSString *text) {
  ASUITextViewLabelImpl_nativeSetHtmlTextWithId_(self, [((id<ASAttributedString>) nil_chk(ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(text, self->htmlConfig_, self->fragment_))) get]);
}

void ASUITextViewLabelImpl_nativeSetTextWithNSString_(ASUITextViewLabelImpl *self, NSString *text) {
  [((ASUITextViewLabel*)self->uiView_) setText:text];
}

void ASUITextViewLabelImpl_nativeSetHtmlTextWithId_(ASUITextViewLabelImpl *self, id text) {
  [((ASUITextViewLabel*)self->uiView_) setAttributedText : (NSMutableAttributedString*)text];
}

id ASUITextViewLabelImpl_getMyText(ASUITextViewLabelImpl *self) {
  return ((ASUITextViewLabel*)self.uiView).text;
}

id ASUITextViewLabelImpl_getTextSize(ASUITextViewLabelImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUITextViewLabel*)self.uiView).font.pointSize];
}

void ASUITextViewLabelImpl_setMyTextSizeWithId_(ASUITextViewLabelImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASUITextViewLabelImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASUITextViewLabelImpl_nativeSetTextSizeWithInt_(ASUITextViewLabelImpl *self, jint value) {
  [((ASUITextViewLabel*)self.uiView) setFont: [((ASUITextViewLabel*)self.uiView).font fontWithSize: value]];
}

id ASUITextViewLabelImpl_getEllipsize(ASUITextViewLabelImpl *self) {
  if ([((NSString *) nil_chk(self->ellipsize_)) isEqual:@"marquee"]) {
    return JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee));
  }
  return ASUITextViewLabelImpl_nativeGetLinBreakMode(self);
}

void ASUITextViewLabelImpl_setEllipsizeWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue) {
  self->ellipsize_ = strValue;
  jint lineBreakMode = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee)) {
    lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping);
  }
  if (ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self)) {
    if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead);
    }
    else if (lineBreakMode == JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead)) {
      lineBreakMode = JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail);
    }
  }
  ASUITextViewLabelImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
  ASUITextViewLabelImpl_cancelTimer(self);
  if ([((NSString *) nil_chk(strValue)) isEqual:@"marquee"]) {
    ASUITextViewLabelImpl_startTimer(self);
  }
}

jint ASUITextViewLabelImpl_nativeGetFontSize(ASUITextViewLabelImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASUITextViewLabelImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASUITextViewLabelImpl_nativeGetFontStyle(ASUITextViewLabelImpl *self) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASUITextViewLabelImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASUITextViewLabelImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUITextViewLabel*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUITextViewLabel*)label).font = font;
  }
}

void ASUITextViewLabelImpl_nativeSetFontStyleWithInt_(ASUITextViewLabelImpl *self, jint style) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUITextViewLabel*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

NSString *ASUITextViewLabelImpl_toUpperCaseWithNSString_(NSString *text) {
  ASUITextViewLabelImpl_initialize();
  return [((NSString *) nil_chk(text)) java_uppercaseStringWithJRELocale:JavaUtilLocale_getDefault()];
}

void ASUITextViewLabelImpl_setVerticalAligmentCenter(ASUITextViewLabelImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASUITextViewLabelImpl_nativeSetVerticalAligmentCenter(self);
}

void ASUITextViewLabelImpl_setVerticalAligmentBottom(ASUITextViewLabelImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASUITextViewLabelImpl_nativeSetVerticalAligmentBottom(self);
}

void ASUITextViewLabelImpl_setVerticalAligmentTop(ASUITextViewLabelImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASUITextViewLabelImpl_nativeSetVerticalAligmentTop(self);
}

void ASUITextViewLabelImpl_setHorizontalAligmentCenter(ASUITextViewLabelImpl *self) {
  ((ASUITextViewLabel*)self.uiView).textAlignment = NSTextAlignmentCenter;
}

void ASUITextViewLabelImpl_setHorizontalAligmentRight(ASUITextViewLabelImpl *self) {
  ASUITextViewLabelImpl_setHorizontalAligmentRightInternal(self);
}

void ASUITextViewLabelImpl_setHorizontalAligmentRightInternal(ASUITextViewLabelImpl *self) {
  ((ASUITextViewLabel*)self.uiView).textAlignment = NSTextAlignmentRight;
}

void ASUITextViewLabelImpl_setHorizontalAligmentLeft(ASUITextViewLabelImpl *self) {
  ASUITextViewLabelImpl_setHorizontalAligmentLeftInternal(self);
}

void ASUITextViewLabelImpl_setHorizontalAligmentLeftInternal(ASUITextViewLabelImpl *self) {
  ((ASUITextViewLabel*)self.uiView).textAlignment = NSTextAlignmentLeft;
}

jint ASUITextViewLabelImpl_getTextAlignment(ASUITextViewLabelImpl *self) {
  int alignment = (int) ((ASUITextViewLabel*)self.uiView).textAlignment;
  
  if (alignment == NSTextAlignmentCenter) {
    return 2;
  }
  
  if (alignment == NSTextAlignmentLeft) {
    return 0;
  }
  
  if (alignment == NSTextAlignmentRight) {
    return 1;
  }
  
  return 0;
}

void ASUITextViewLabelImpl_nativeSetVerticalAligmentBottom(ASUITextViewLabelImpl *self) {
}

void ASUITextViewLabelImpl_nativeSetVerticalAligmentTop(ASUITextViewLabelImpl *self) {
}

void ASUITextViewLabelImpl_nativeSetVerticalAligmentCenter(ASUITextViewLabelImpl *self) {
}

jint ASUITextViewLabelImpl_getLineHeight(ASUITextViewLabelImpl *self) {
  return ceil(((ASUITextViewLabel*)self.uiView).font.lineHeight);
}

jint ASUITextViewLabelImpl_getBorderWidth(ASUITextViewLabelImpl *self) {
  return 0;
}

jboolean ASUITextViewLabelImpl_canMarquee(ASUITextViewLabelImpl *self) {
  return [nil_chk(ASUITextViewLabelImpl_getSingleLine(self)) isEqual:JreLoadStatic(JavaLangBoolean, TRUE)];
}

void ASUITextViewLabelImpl_cancelNativeTimer(ASUITextViewLabelImpl *self) {
  if (self->timer_ != nil) {
    [(NSTimer*) self->timer_ invalidate];
    self->timer_ = nil;
  }
}

jboolean ASUITextViewLabelImpl_isDisposed(ASUITextViewLabelImpl *self) {
  return self->isDisposed_;
}

void ASUITextViewLabelImpl_addDeallocHandler(ASUITextViewLabelImpl *self) {
  if (self->dellocHandler_ == nil) {
    NSString *type = [((ASEvent_StandardEvents *) nil_chk(JreLoadEnum(ASEvent_StandardEvents, dealloc))) description];
    self->dellocHandler_ = new_ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(self, type);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:type withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->dellocHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASUITextViewLabelImpl_schedule(ASUITextViewLabelImpl *self) {
  if (self->timer_ == nil) {
    self->timer_ = [NSTimer scheduledTimerWithTimeInterval:0.1
    target:self
    selector:@selector(onTick:)
    userInfo:nil
    repeats:YES];
    [[NSRunLoop mainRunLoop] addTimer:self->timer_ forMode:NSRunLoopCommonModes];
  }
}

void ASUITextViewLabelImpl_executeOnMainThreadWithJavaLangRunnable_(ASUITextViewLabelImpl *self, id<JavaLangRunnable> runnable) {
  [((id<JavaLangRunnable>) nil_chk(runnable)) run];
}

void ASUITextViewLabelImpl_setDrawablePaddingWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [self updatePadding];
}

void ASUITextViewLabelImpl_setDrawableBottomWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASUITextViewLabelImpl_setDrawableTopWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASUITextViewLabelImpl_setDrawableRightWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASUITextViewLabelImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASUITextViewLabelImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASUITextViewLabelImpl_setDrawableRightInternalWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASUITextViewLabelImpl_setDrawableLeftWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASUITextViewLabelImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASUITextViewLabelImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASUITextViewLabelImpl_setDrawableLeftInternalWithNSString_withId_(ASUITextViewLabelImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

jint ASUITextViewLabelImpl_getImageHeightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASUITextViewLabelImpl_getImageWidthWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASUITextViewLabelImpl_getDrawablePadding(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawablePadding]);
}

void ASUITextViewLabelImpl_setDrawableTintModeWithId_(ASUITextViewLabelImpl *self, id value) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASUITextViewLabelImpl_setDrawableTintWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

void ASUITextViewLabelImpl_setTextColorWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCurrentTextColor]);
  }
  [self setTextColorWithId:self->uiView_ withId:ASViewImpl_getColorWithId_(objValue)];
}

id ASUITextViewLabelImpl_getTextColorState(ASUITextViewLabelImpl *self) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTextColors];
}

void ASUITextViewLabelImpl_setGravityWithId_(ASUITextViewLabelImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASUITextViewLabelImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASUITextViewLabelImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASUITextViewLabelImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASUITextViewLabelImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASUITextViewLabelImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASUITextViewLabelImpl_updateTextAlignment(ASUITextViewLabelImpl *self) {
  ADLayout_Alignment *minor = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASUITextViewLabelImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASUITextViewLabelImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASUITextViewLabelImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASUITextViewLabelImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASUITextViewLabelImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASUITextViewLabelImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASUITextViewLabelImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASUITextViewLabelImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASUITextViewLabelImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASUITextViewLabelImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASUITextViewLabelImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASUITextViewLabelImpl_getGravity(ASUITextViewLabelImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASUITextViewLabelImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASUITextViewLabelImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASUITextViewLabelImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASUITextViewLabelImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

void ASUITextViewLabelImpl_initHtmlWithJavaUtilMap_(ASUITextViewLabelImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

id ASUITextViewLabelImpl_getMinHeight(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinHeight]);
}

id ASUITextViewLabelImpl_getMinWidth(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinWidth]);
}

void ASUITextViewLabelImpl_setEmsWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_setMinEmsWithId_(self, objValue);
  ASUITextViewLabelImpl_setMaxEmsWithId_(self, objValue);
}

void ASUITextViewLabelImpl_setMinEmsWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setMaxEmsWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setWidthWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_setMinWidthWithId_(self, objValue);
  ASUITextViewLabelImpl_setMaxWidthWithId_(self, objValue);
}

void ASUITextViewLabelImpl_setHeightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_setMinHeightWithId_(self, objValue);
  ASUITextViewLabelImpl_setMaxHeightWithId_(self, objValue);
}

void ASUITextViewLabelImpl_setMaxLinesWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setLinesWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_setMinLinesWithId_(self, objValue);
  ASUITextViewLabelImpl_setMaxLinesWithId_(self, objValue);
}

void ASUITextViewLabelImpl_setMinLinesWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setMaxHeightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setMaxWidthWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setMinHeightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

void ASUITextViewLabelImpl_setMinWidthWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewLabelImpl_addMinMaxListener(self);
}

id ASUITextViewLabelImpl_getWidth(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getWidth]);
}

jint ASUITextViewLabelImpl_getHeight(ASUITextViewLabelImpl *self) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getHeight];
}

jint ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(ASUITextViewLabelImpl *self, ASMeasurableTextView *measurableTextView) {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView)) getAutoSizeTextType];
}

void ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(ASUITextViewLabelImpl *self, jint autoTextType) {
  ASUITextViewLabelImpl_removeResizeListener(self);
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) isAutoSizeTextTypeUniformWithInt:autoTextType]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setUpAutoSizeTextTypeUniformWithInt:self->autoSizeMin_ withInt:self->autoSizeMax_ withInt:self->autoSizeGranular_];
    ASUITextViewLabelImpl_addAutoResizeListener(self);
  }
  else {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) clearAutoSizeTypeConfiguration];
  }
}

jboolean ASUITextViewLabelImpl_suggestedSizeFitsInSpaceWithInt_withFloat_withFloat_(ASUITextViewLabelImpl *self, jint suggestedSizeInPx, jfloat width, jfloat height) {
  ASUITextViewLabelImpl_setMyTextSizeWithId_(self, JavaLangFloat_valueOfWithFloat_(suggestedSizeInPx * 1.0f));
  jint y = ASUITextViewLabelImpl_computeSizeWithFloat_(self, width);
  if (y > height) {
    return false;
  }
  return true;
}

void ASUITextViewLabelImpl_setAutoSizePresetSizesWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setAutoSizeTextTypeUniformWithPresetSizesWithIntArray:(IOSIntArray *) cast_chk(objValue, [IOSIntArray class]) withInt:0];
}

void ASUITextViewLabelImpl_addAutoResizeListener(ASUITextViewLabelImpl *self) {
  if (self->postMeasureHandler_ == nil) {
    self->postMeasureHandler_ = new_ASUITextViewLabelImpl_PostMeasureHandler_initWithASUITextViewLabelImpl_withNSString_(self, self->POST_MEASURE_EVENT_);
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) onWithNSString:self->POST_MEASURE_EVENT_ withASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
  }
}

void ASUITextViewLabelImpl_removeResizeListener(ASUITextViewLabelImpl *self) {
  if (self->postMeasureHandler_ != nil) {
    [((ASEventBus *) nil_chk([((id<ASIFragment>) nil_chk(self->fragment_)) getEventBus])) offWithASEventBusHandlerArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->postMeasureHandler_ } count:1 type:ASEventBusHandler_class_()]];
    self->postMeasureHandler_ = nil;
  }
}

jint ASUITextViewLabelImpl_computeSizeWithFloat_(ASUITextViewLabelImpl *self, jfloat width) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) nativeMeasureHeightWithId:self->uiView_ withInt:JreFpToInt(width)];
}

void ASUITextViewLabelImpl_setMaxLengthWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_maxlength withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"maxLength" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ objValue } count:1 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"maxLength" withId:objValue];
  }
}

void ASUITextViewLabelImpl_setPasswordWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_password withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"password" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"password" withId:objValue];
  }
}

void ASUITextViewLabelImpl_setMyTextWithId_(ASUITextViewLabelImpl *self, id objValue) {
  NSString *text = (NSString *) cast_chk(objValue, [NSString class]);
  if (text == nil) {
    text = @"";
  }
  if (self->html_) {
    ASUITextViewLabelImpl_handleHtmlTextWithNSString_(self, text);
  }
  else {
    ASUITextViewLabelImpl_nativeSetTextWithNSString_(self, text);
  }
}

void ASUITextViewLabelImpl_setTextAllCapsWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if (!self->html_) {
    [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_uppercase withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textAllCaps" } count:1 type:NSString_class_()] withBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue] withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
  }
  else {
    (void) [((id<JavaUtilMap>) nil_chk(self->htmlConfig_)) putWithId:@"textAllCaps" withId:objValue];
  }
}

jint ASUITextViewLabelImpl_calcNumberOfWhiteSpaces(ASUITextViewLabelImpl *self) {
  if (!ASUITextViewLabelImpl_isLabelMeasured(self)) {
    return 0;
  }
  jfloat blankSpaceWidth = [((NSNumber *) nil_chk(((NSNumber *) cast_chk(ASUITextViewLabelImpl_getTextSize(self), [NSNumber class])))) floatValue];
  jint width = JreIntDiv(ASUITextViewLabelImpl_getLabelWidth(self), 3);
  jint numberOfBlankSpaces = JreFpToInt(JavaLangMath_ceilWithDouble_(width / (blankSpaceWidth * 1.0f)));
  return numberOfBlankSpaces;
}

void ASUITextViewLabelImpl_cancelTimer(ASUITextViewLabelImpl *self) {
  ASUITextViewLabelImpl_cancelNativeTimer(self);
  if (self->marqueeTask_ != nil) {
    [self->marqueeTask_ cancel];
  }
  if (self->marqueeCommandConverter_ != nil) {
    [self->marqueeCommandConverter_ updateArgsWithNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(0), JavaLangInteger_valueOfWithInt_(0) } count:2 type:NSObject_class_()]];
  }
}

void ASUITextViewLabelImpl_startTimer(ASUITextViewLabelImpl *self) {
  if (ASUITextViewLabelImpl_canMarquee(self)) {
    ASUITextViewLabelImpl_addDeallocHandler(self);
    if (self->marqueeTask_ != nil) {
      [self->marqueeTask_ restart];
    }
    else {
      NSString *direction = ASViewImpl_isRTLLayoutDirectionWithASIWidget_(self) ? @"reverse" : @"forward";
      self->marqueeTask_ = new_ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(self, direction);
    }
    ASUITextViewLabelImpl_schedule(self);
  }
}

id ASUITextViewLabelImpl_getMarqueeRepeatLimit(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->marqueeRepeatLimit_);
}

void ASUITextViewLabelImpl_setMarqueeRepeatLimitWithId_(ASUITextViewLabelImpl *self, id objValue) {
  self->marqueeRepeatLimit_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

void ASUITextViewLabelImpl_startOrStopMarqueeWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_cancelTimer(self);
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASUITextViewLabelImpl_startTimer(self);
  }
}

jint ASUITextViewLabelImpl_getLabelWidth(ASUITextViewLabelImpl *self) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) isIgnoreDrawableHeight]) {
    return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMeasuredWidth] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingLeft] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingRight];
  }
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMeasuredWidth] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingRight] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingLeft];
}

jboolean ASUITextViewLabelImpl_isLabelMeasured(ASUITextViewLabelImpl *self) {
  return !ASUITextViewLabelImpl_isDisposed(self) && ASUITextViewLabelImpl_getLabelWidth(self) > 0;
}

void ASUITextViewLabelImpl_setTypeFaceWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue) {
  ASUITextViewLabelImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASUITextViewLabelImpl_setFontFamilyWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASUITextViewLabelImpl_nativeGetFontStyle(self);
  jint height = ASUITextViewLabelImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASUITextViewLabelImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASUITextViewLabelImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASUITextViewLabelImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASUITextViewLabelImpl_setTextStyleWithId_(ASUITextViewLabelImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASUITextViewLabelImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASUITextViewLabelImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASUITextViewLabelImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASUITextViewLabelImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASUITextViewLabelImpl_ITALIC_FONT_TRAIT;
    }
    ASUITextViewLabelImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

void ASUITextViewLabelImpl_setFirstBaselineToTopHeightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewLabelImpl_getFont(self));
  jint firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsTop;
  if (ASUITextViewLabelImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    jint paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue]];
  }
}

jboolean ASUITextViewLabelImpl_getIncludeFontPadding(ASUITextViewLabelImpl *self) {
  return false;
}

id ASUITextViewLabelImpl_getFirstBaselineToTopHeight(ASUITextViewLabelImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewLabelImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASUITextViewLabelImpl_setLastBaselineToBottomHeightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewLabelImpl_getFont(self));
  jint lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsBottom;
  if (ASUITextViewLabelImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    jint paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASUITextViewLabelImpl_getLastBaselineToBottomHeight(ASUITextViewLabelImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewLabelImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASUITextViewLabelImpl_setAutoSizeStepGranularityWithId_(ASUITextViewLabelImpl *self, id objValue) {
  self->autoSizeGranular_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(self, ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(self, self->measurableTextView_));
  }
}

void ASUITextViewLabelImpl_setAutoMinTextSizeWithId_(ASUITextViewLabelImpl *self, id objValue) {
  self->autoSizeMin_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(self, ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(self, self->measurableTextView_));
  }
}

void ASUITextViewLabelImpl_setAutoMaxTextSizeWithId_(ASUITextViewLabelImpl *self, id objValue) {
  self->autoSizeMax_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if ([self isInitialised]) {
    ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(self, ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(self, self->measurableTextView_));
  }
}

void ASUITextViewLabelImpl_setAutoSizeTextTypeWithId_(ASUITextViewLabelImpl *self, id objValue) {
  jint autoTextType = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ASUITextViewLabelImpl_setAutoSizeTextTypeInternalWithInt_(self, autoTextType);
}

id ASUITextViewLabelImpl_getAutoSizeStepGranularity(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeGranular_);
}

id ASUITextViewLabelImpl_getAutoMinTextSize(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeMin_);
}

id ASUITextViewLabelImpl_getAutoMaxTextSize(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_(self->autoSizeMax_);
}

id ASUITextViewLabelImpl_getAutoSizeTextType(ASUITextViewLabelImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASUITextViewLabelImpl_getAutoSizeTextTypeWithASMeasurableTextView_(self, self->measurableTextView_));
}

void ASUITextViewLabelImpl_setTextFormatWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"textFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

void ASUITextViewLabelImpl_nativeCreateWithJavaUtilMap_(ASUITextViewLabelImpl *self, id<JavaUtilMap> params) {
  ASUITextViewLabelImpl_initHtmlWithJavaUtilMap_(self, params);
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setIgnoreDrawableHeightWithBoolean:true];
  ASUITextViewLabelImpl_createNativeWidgetWithJavaUtilMap_(self, params);
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"text" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
}

void ASUITextViewLabelImpl_createNativeWidgetWithJavaUtilMap_(ASUITextViewLabelImpl *self, id<JavaUtilMap> params) {
  self.uiView = [ASUITextViewLabel new];
  ((ASUITextViewLabel*) self.uiView).scrollEnabled=NO;
  ((ASUITextViewLabel*) self.uiView).editable=NO;
  ((ASUITextViewLabel*) self.uiView).selectable=NO;
  [((ASUITextViewLabel*) self.uiView) setTextContainerInset:UIEdgeInsetsZero];
  ((ASUITextViewLabel*) self.uiView).textContainer.lineFragmentPadding = 0;
  [((ASUITextViewLabel*) self.uiView) setFont:[UIFont systemFontOfSize:[UIFont labelFontSize]]];
}

void ASUITextViewLabelImpl_addMinMaxListener(ASUITextViewLabelImpl *self) {
}

void ASUITextViewLabelImpl_setTextColorHighlightWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASViewImpl_setTintColorWithId_withId_(self->uiView_, objValue);
}

id ASUITextViewLabelImpl_getTextColorHighlight(ASUITextViewLabelImpl *self) {
  return ASViewImpl_getTintColorWithId_(self->uiView_);
}

id ASUITextViewLabelImpl_getPaddingEnd(ASUITextViewLabelImpl *self) {
  return [self getPaddingRight];
}

id ASUITextViewLabelImpl_getPaddingStart(ASUITextViewLabelImpl *self) {
  return [self getPaddingLeft];
}

void ASUITextViewLabelImpl_setPaddingVerticalWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASUITextViewLabelImpl_setPaddingHorizontalWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASUITextViewLabelImpl_setPaddingEndWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASUITextViewLabelImpl_setPaddingStartWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

void ASUITextViewLabelImpl_setPaddingWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_setPaddingVerticalWithId_(self, objValue);
  ASUITextViewLabelImpl_setPaddingHorizontalWithId_(self, objValue);
}

void ASUITextViewLabelImpl_nativeSetPaddingBottomWithInt_(ASUITextViewLabelImpl *self, jint value) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, value, edgeInsets.right)];
}

void ASUITextViewLabelImpl_nativeSetPaddingLeftWithInt_(ASUITextViewLabelImpl *self, jint value) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(edgeInsets.top, value, edgeInsets.bottom, edgeInsets.right)];
}

void ASUITextViewLabelImpl_nativeSetPaddingRightWithInt_(ASUITextViewLabelImpl *self, jint value) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, edgeInsets.bottom, value)];
}

void ASUITextViewLabelImpl_nativeSetPaddingTopWithInt_(ASUITextViewLabelImpl *self, jint value) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(value, edgeInsets.left, edgeInsets.bottom, edgeInsets.right)];
}

void ASUITextViewLabelImpl_nativeSetLineBreakModeWithInt_(ASUITextViewLabelImpl *self, jint lineBreakMode) {
  ((ASUITextViewLabel*)self->uiView_).textContainer.lineBreakMode =lineBreakMode;
}

JavaLangInteger *ASUITextViewLabelImpl_nativeGetLinBreakMode(ASUITextViewLabelImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint) ((ASUITextViewLabel*)self->uiView_).textContainer.lineBreakMode];
}

void ASUITextViewLabelImpl_setJustificationModeWithId_withNSString_(ASUITextViewLabelImpl *self, id objValue, NSString *strValue) {
  ASUITextViewLabelImpl_nativeSetTextAligmentWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASUITextViewLabelImpl_nativeSetTextAligmentWithInt_(ASUITextViewLabelImpl *self, jint textAlignment) {
  [((ASUITextViewLabel*)self->uiView_) setTextAlignment:textAlignment];
}

id ASUITextViewLabelImpl_getJustificationMode(ASUITextViewLabelImpl *self) {
  return ASUITextViewLabelImpl_nativeGetTextAligment(self);
}

JavaLangInteger *ASUITextViewLabelImpl_nativeGetTextAligment(ASUITextViewLabelImpl *self) {
  return [JavaLangInteger valueOfWithInt:(jint)((ASUITextViewLabel*)self->uiView_).textAlignment];
}

void ASUITextViewLabelImpl_setSingleLineWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if (objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]) {
    ASUITextViewLabelImpl_setNumberOfLinesWithId_withInt_(self, [self asNativeWidget], 1);
  }
  else {
    ASUITextViewLabelImpl_setNumberOfLinesWithId_withInt_(self, [self asNativeWidget], 0);
  }
}

void ASUITextViewLabelImpl_setNumberOfLinesWithId_withInt_(ASUITextViewLabelImpl *self, id asNativeWidget, jint numberOfLines) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) asNativeWidget);
  label.textContainer.maximumNumberOfLines = numberOfLines;
}

id ASUITextViewLabelImpl_getSingleLine(ASUITextViewLabelImpl *self) {
  return [JavaLangBoolean valueOfWithBoolean:((ASUITextViewLabel*)self.uiView).textContainer.maximumNumberOfLines == 1];
}

void ASUITextViewLabelImpl_setAutoLinkWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_nativeSetAutoLinkWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASUITextViewLabelImpl_nativeSetAutoLinkWithInt_(ASUITextViewLabelImpl *self, jint autolinkFlags) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  label.selectable = YES;
  label.dataDetectorTypes = autolinkFlags;
}

id ASUITextViewLabelImpl_getAutoLink(ASUITextViewLabelImpl *self) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  return [JavaLangInteger valueOfWithInt:(jint)label.dataDetectorTypes];
}

void ASUITextViewLabelImpl_setEnabledWithId_(ASUITextViewLabelImpl *self, id objValue) {
  jboolean isEnabled = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
  ASViewImpl_setIsUserInteractionEnabledWithId_withId_(self->uiView_, JavaLangBoolean_valueOfWithBoolean_(isEnabled));
}

void ASUITextViewLabelImpl_setScrollHorizontallyWithId_(ASUITextViewLabelImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setHorizontallyScrollingWithBoolean:objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]];
  ASUITextViewLabelImpl_nativeSetScrollHorizontallyWithBoolean_(self, objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]);
}

void ASUITextViewLabelImpl_nativeSetScrollHorizontallyWithBoolean_(ASUITextViewLabelImpl *self, jboolean scrollHorizontally) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  [label setScrollEnabled:scrollHorizontally];
}

void ASUITextViewLabelImpl_setTextColorLinkWithId_(ASUITextViewLabelImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLinkTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_(((ADTextView_TextPaint *) nil_chk([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaint]))->linkColor_);
  }
  ASUITextViewLabelImpl_nativesetTextColorLinkWithId_(self, ASViewImpl_getColorWithId_(objValue));
}

void ASUITextViewLabelImpl_nativesetTextColorLinkWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  label.linkTextAttributes = @{ NSForegroundColorAttributeName : (UIColor*)objValue };
}

void ASUITextViewLabelImpl_setLinksClickableWithId_(ASUITextViewLabelImpl *self, id objValue) {
  ASUITextViewLabelImpl_nativeSetLinksClickableWithBoolean_(self, objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue]);
}

void ASUITextViewLabelImpl_nativeSetLinksClickableWithBoolean_(ASUITextViewLabelImpl *self, jboolean linksClickable) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  [label setUserInteractionEnabled:linksClickable];
}

id ASUITextViewLabelImpl_getLinksClickable(ASUITextViewLabelImpl *self) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*) self.uiView);
  return [JavaLangBoolean valueOfWithBoolean:label.userInteractionEnabled];
}

jint ASUITextViewLabelImpl_nativeGetBaseLine(ASUITextViewLabelImpl *self) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*)self->uiView_);
  return label.font.ascender;
}

id ASUITextViewLabelImpl_getFont(ASUITextViewLabelImpl *self) {
  ASUITextViewLabel* label = ((ASUITextViewLabel*)self->uiView_);
  return label.font;
}

void ASUITextViewLabelImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUITextViewLabelImpl *self, jint l, jint t, jint r, jint b) {
  ASUITextViewLabelImpl_adjustContentSizeWithInt_withInt_(self, r - l, b - t);
}

void ASUITextViewLabelImpl_adjustContentSizeWithInt_withInt_(ASUITextViewLabelImpl *self, jint width, jint height) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment] == nil && self->preVerticalAligment_ == nil) {
    return;
  }
  if (![((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) isVerticalAlignTop]) {
    if (ASUITextViewLabelImpl_isContentOffsetCorrectionNeededWithId_(self, self->uiView_)) {
      ASRectM *bounds = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getWidgetBoundsWithInt:width withInt:height withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->uiView_ } count:1 type:NSObject_class_()]];
      ASUITextViewLabelImpl_setContentOffsetWithInt_withId_(self, ((ASRectM *) nil_chk(bounds))->y_, self->uiView_);
    }
  }
  else {
    if (self->preVerticalAligment_ == nil || [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment] != self->preVerticalAligment_) {
      ASUITextViewLabelImpl_setContentOffsetWithInt_withId_(self, 0, self->uiView_);
    }
  }
  self->preVerticalAligment_ = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment];
}

jboolean ASUITextViewLabelImpl_isContentOffsetCorrectionNeededWithId_(ASUITextViewLabelImpl *self, id view) {
  ASUITextViewLabel* tv = ((ASUITextViewLabel*)view);
  return  [tv contentSize].height <= [tv bounds].size.height;
}

void ASUITextViewLabelImpl_setContentOffsetWithInt_withId_(ASUITextViewLabelImpl *self, jint topCorrect, id view) {
  ((ASUITextViewLabel*) view).topCorrect = -topCorrect;
  [((ASUITextViewLabel*) view) setContentOffset :(CGPoint){.x = 0, .y = -topCorrect}];
}

void ASUITextViewLabelImpl_setHintColorWithInt_(ASUITextViewLabelImpl *self, jint currentHintTextColor) {
}

void ASUITextViewLabelImpl_syncPlaceholderLabel(ASUITextViewLabelImpl *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl)

@implementation ASUITextViewLabelImpl_AutoSizeTextType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_AutoSizeTextType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_AutoSizeTextType = { "AutoSizeTextType", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_AutoSizeTextType;
}

@end

void ASUITextViewLabelImpl_AutoSizeTextType_init(ASUITextViewLabelImpl_AutoSizeTextType *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"uniform" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
  }
}

ASUITextViewLabelImpl_AutoSizeTextType *new_ASUITextViewLabelImpl_AutoSizeTextType_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_AutoSizeTextType, init)
}

ASUITextViewLabelImpl_AutoSizeTextType *create_ASUITextViewLabelImpl_AutoSizeTextType_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_AutoSizeTextType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_AutoSizeTextType)

@implementation ASUITextViewLabelImpl_Ellipsize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_Ellipsize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_Ellipsize = { "Ellipsize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_Ellipsize;
}

@end

void ASUITextViewLabelImpl_Ellipsize_init(ASUITextViewLabelImpl_Ellipsize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"end" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingTail))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"marquee" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByMarquee))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"middle" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingMiddle))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"start" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSLineBreakByTruncatingHead))];
  }
}

ASUITextViewLabelImpl_Ellipsize *new_ASUITextViewLabelImpl_Ellipsize_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_Ellipsize, init)
}

ASUITextViewLabelImpl_Ellipsize *create_ASUITextViewLabelImpl_Ellipsize_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_Ellipsize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_Ellipsize)

@implementation ASUITextViewLabelImpl_MarqueeRepeatLimit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_MarqueeRepeatLimit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

- (jboolean)supportsIntAlso {
  return true;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  methods[3].selector = @selector(supportsIntAlso);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_MarqueeRepeatLimit = { "MarqueeRepeatLimit", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_MarqueeRepeatLimit;
}

@end

void ASUITextViewLabelImpl_MarqueeRepeatLimit_init(ASUITextViewLabelImpl_MarqueeRepeatLimit *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"marquee_forever" withId:JavaLangInteger_valueOfWithInt_((jint) 0xffffffff)];
  }
}

ASUITextViewLabelImpl_MarqueeRepeatLimit *new_ASUITextViewLabelImpl_MarqueeRepeatLimit_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_MarqueeRepeatLimit, init)
}

ASUITextViewLabelImpl_MarqueeRepeatLimit *create_ASUITextViewLabelImpl_MarqueeRepeatLimit_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_MarqueeRepeatLimit, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_MarqueeRepeatLimit)

@implementation ASUITextViewLabelImpl_JustificationMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_JustificationMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_JustificationMode = { "JustificationMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_JustificationMode;
}

@end

void ASUITextViewLabelImpl_JustificationMode_init(ASUITextViewLabelImpl_JustificationMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"inter_word" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentJustified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, NSTextAlignmentLeft))];
  }
}

ASUITextViewLabelImpl_JustificationMode *new_ASUITextViewLabelImpl_JustificationMode_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_JustificationMode, init)
}

ASUITextViewLabelImpl_JustificationMode *create_ASUITextViewLabelImpl_JustificationMode_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_JustificationMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_JustificationMode)

@implementation ASUITextViewLabelImpl_AutoLink

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_AutoLink_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

- (NSString *)getAllOption {
  return @"all";
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  methods[3].selector = @selector(getAllOption);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_AutoLink = { "AutoLink", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 4, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_AutoLink;
}

@end

void ASUITextViewLabelImpl_AutoLink_init(ASUITextViewLabelImpl_AutoLink *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"all" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIDataDetectorTypeAll))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"email" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIDataDetectorTypeLink))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"map" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIDataDetectorTypeAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIDataDetectorTypeNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"phone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIDataDetectorTypePhoneNumber))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"web" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIDataDetectorTypeLink))];
  }
}

ASUITextViewLabelImpl_AutoLink *new_ASUITextViewLabelImpl_AutoLink_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_AutoLink, init)
}

ASUITextViewLabelImpl_AutoLink *create_ASUITextViewLabelImpl_AutoLink_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_AutoLink, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_AutoLink)

@implementation ASUITextViewLabelImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_Font;
}

@end

void ASUITextViewLabelImpl_Font_init(ASUITextViewLabelImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASUITextViewLabelImpl_Font *new_ASUITextViewLabelImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_Font, init)
}

ASUITextViewLabelImpl_Font *create_ASUITextViewLabelImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_Font)

@implementation ASUITextViewLabelImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_TextStyle;
}

@end

void ASUITextViewLabelImpl_TextStyle_init(ASUITextViewLabelImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASUITextViewLabelImpl_TextStyle *new_ASUITextViewLabelImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_TextStyle, init)
}

ASUITextViewLabelImpl_TextStyle *create_ASUITextViewLabelImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_TextStyle)

@implementation ASUITextViewLabelImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewLabelImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_DrawableTintMode;
}

@end

void ASUITextViewLabelImpl_DrawableTintMode_init(ASUITextViewLabelImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASUITextViewLabelImpl_DrawableTintMode *new_ASUITextViewLabelImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_DrawableTintMode, init)
}

ASUITextViewLabelImpl_DrawableTintMode *create_ASUITextViewLabelImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_DrawableTintMode)

@implementation ASUITextViewLabelImpl_UITextViewLabelExt

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$ {
  ASUITextViewLabelImpl_UITextViewLabelExt_initWithASUITextViewLabelImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASUITextViewLabelImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jboolean)suggestedSizeFitsInSpaceWithInt:(jint)mAutoSizeTextSizeInPx
                                withADRectF:(ADRectF *)availableSpace {
  return ASUITextViewLabelImpl_suggestedSizeFitsInSpaceWithInt_withFloat_withFloat_(this$0_, mAutoSizeTextSizeInPx, [((ADRectF *) nil_chk(availableSpace)) width], [availableSpace height]);
}

- (void)setTextSizeInternalWithInt:(jint)unit
                         withFloat:(jfloat)optimalTextSize
                       withBoolean:(jboolean)b {
  ASUITextViewLabelImpl_setMyTextSizeWithId_(this$0_, JavaLangFloat_valueOfWithFloat_(optimalTextSize));
}

- (jint)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (jint)getLineHeight {
  return ASUITextViewLabelImpl_getLineHeight(this$0_);
}

- (jint)getBorderWidth {
  return ASUITextViewLabelImpl_getBorderWidth(this$0_);
}

- (jint)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  [this$0_ onRtlPropertiesChangedWithInt:layoutDirection];
}

- (void)__javaClone:(ASUITextViewLabelImpl_UITextViewLabelExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 19, 20, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 21, 22, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 16, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewLabelImpl:);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[5].selector = @selector(newInstanceWithASIWidget:);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[7].selector = @selector(getMethods);
  methods[8].selector = @selector(initialized);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[10].selector = @selector(drawableStateChanged);
  methods[11].selector = @selector(offsetTopAndBottomWithInt:);
  methods[12].selector = @selector(offsetLeftAndRightWithInt:);
  methods[13].selector = @selector(setVisibilityWithInt:);
  methods[14].selector = @selector(suggestedSizeFitsInSpaceWithInt:withADRectF:);
  methods[15].selector = @selector(setTextSizeInternalWithInt:withFloat:withBoolean:);
  methods[16].selector = @selector(getBorderPadding);
  methods[17].selector = @selector(getLineHeight);
  methods[18].selector = @selector(getBorderWidth);
  methods[19].selector = @selector(getLineHeightPadding);
  methods[20].selector = @selector(onRtlPropertiesChangedWithInt:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewLabelImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewLabelImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setVisibility", "suggestedSizeFitsInSpace", "ILADRectF;", "setTextSizeInternal", "IFZ", "onRtlPropertiesChanged" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_UITextViewLabelExt = { "UITextViewLabelExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 21, 3, 0, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_UITextViewLabelExt;
}

@end

void ASUITextViewLabelImpl_UITextViewLabelExt_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl_UITextViewLabelExt *self, ASUITextViewLabelImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableTextView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASUITextViewLabelImpl_UITextViewLabelExt *new_ASUITextViewLabelImpl_UITextViewLabelExt_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_UITextViewLabelExt, initWithASUITextViewLabelImpl_, outer$)
}

ASUITextViewLabelImpl_UITextViewLabelExt *create_ASUITextViewLabelImpl_UITextViewLabelExt_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_UITextViewLabelExt, initWithASUITextViewLabelImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_UITextViewLabelExt)

@implementation ASUITextViewLabelImpl_DellocHandler

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$
                                 withNSString:(NSString *)type {
  ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  ASUITextViewLabelImpl_cancelTimer(this$0_);
  this$0_->isDisposed_ = true;
}

- (void)__javaClone:(ASUITextViewLabelImpl_DellocHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewLabelImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewLabelImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewLabelImpl;LNSString;", "doPerform", "LNSObject;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_DellocHandler = { "DellocHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 2, 1, 3, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_DellocHandler;
}

@end

void ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl_DellocHandler *self, ASUITextViewLabelImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASUITextViewLabelImpl_DellocHandler *new_ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_DellocHandler, initWithASUITextViewLabelImpl_withNSString_, outer$, type)
}

ASUITextViewLabelImpl_DellocHandler *create_ASUITextViewLabelImpl_DellocHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_DellocHandler, initWithASUITextViewLabelImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_DellocHandler)

@implementation ASUITextViewLabelImpl_PostMeasureHandler

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$
                                 withNSString:(NSString *)type {
  ASUITextViewLabelImpl_PostMeasureHandler_initWithASUITextViewLabelImpl_withNSString_(self, outer$, type);
  return self;
}

- (void)doPerformWithId:(id)payload {
  if (!onlyOnce_ || [((ASMeasurableTextView *) nil_chk(this$0_->measurableTextView_)) isLayoutRequested]) {
    [((ASMeasurableTextView *) nil_chk(this$0_->measurableTextView_)) autoResizeText];
    onlyOnce_ = true;
  }
}

- (void)__javaClone:(ASUITextViewLabelImpl_PostMeasureHandler *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewLabelImpl:withNSString:);
  methods[1].selector = @selector(doPerformWithId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewLabelImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "onlyOnce_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewLabelImpl;LNSString;", "doPerform", "LNSObject;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_PostMeasureHandler = { "PostMeasureHandler", "com.ashera.layout", ptrTable, methods, fields, 7, 0x0, 2, 2, 3, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_PostMeasureHandler;
}

@end

void ASUITextViewLabelImpl_PostMeasureHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl_PostMeasureHandler *self, ASUITextViewLabelImpl *outer$, NSString *type) {
  self->this$0_ = outer$;
  ASEventBusHandler_initWithNSString_(self, type);
}

ASUITextViewLabelImpl_PostMeasureHandler *new_ASUITextViewLabelImpl_PostMeasureHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *type) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_PostMeasureHandler, initWithASUITextViewLabelImpl_withNSString_, outer$, type)
}

ASUITextViewLabelImpl_PostMeasureHandler *create_ASUITextViewLabelImpl_PostMeasureHandler_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *type) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_PostMeasureHandler, initWithASUITextViewLabelImpl_withNSString_, outer$, type)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_PostMeasureHandler)

@implementation ASUITextViewLabelImpl_MarqueeTask

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$
                                 withNSString:(NSString *)direction {
  ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(self, outer$, direction);
  return self;
}

- (void)cancel {
  cancel_ = true;
}

- (void)restart {
  cancel_ = false;
  slideLength_ = 0;
  cycles_ = 0;
}

- (void)run {
  jint numberOfBlankSpaces = ASUITextViewLabelImpl_calcNumberOfWhiteSpaces(this$0_);
  if (this$0_->marqueeCommandConverter_ == nil) {
    this$0_->marqueeCommandConverter_ = (ASMarqueeCommandConverter *) cast_chk([this$0_ getAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(numberOfBlankSpaces), JavaLangInteger_valueOfWithInt_(0), direction_ } count:3 type:NSObject_class_()]], [ASMarqueeCommandConverter class]);
  }
  slideLength_ = [((ASMarqueeCommandConverter *) nil_chk(this$0_->marqueeCommandConverter_)) getOffset];
  if (numberOfBlankSpaces > 0) {
    NSString *str = (NSString *) cast_chk(ASUITextViewLabelImpl_getMyText(this$0_), [NSString class]);
    if (slideLength_ == [((NSString *) nil_chk(str)) java_length]) {
      slideLength_ = 0;
      cycles_++;
    }
    if ((this$0_->marqueeRepeatLimit_ > 0 && cycles_ >= this$0_->marqueeRepeatLimit_)) {
      ASUITextViewLabelImpl_cancelTimer(this$0_);
      return;
    }
    slideLength_++;
    ASUITextViewLabelImpl_executeOnMainThreadWithJavaLangRunnable_(this$0_, new_ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(self, numberOfBlankSpaces));
  }
  else {
    ASUITextViewLabelImpl_schedule(this$0_);
  }
}

- (void)__javaClone:(ASUITextViewLabelImpl_MarqueeTask *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewLabelImpl:withNSString:);
  methods[1].selector = @selector(cancel);
  methods[2].selector = @selector(restart);
  methods[3].selector = @selector(run);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewLabelImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "slideLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cycles_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "cancel_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "direction_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewLabelImpl;LNSString;", "LASUITextViewLabelImpl;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_MarqueeTask = { "MarqueeTask", "com.ashera.layout", ptrTable, methods, fields, 7, 0x12, 4, 5, 1, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_MarqueeTask;
}

@end

void ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl_MarqueeTask *self, ASUITextViewLabelImpl *outer$, NSString *direction) {
  self->this$0_ = outer$;
  NSObject_init(self);
  self->slideLength_ = 0;
  self->cycles_ = 0;
  self->cancel_ = false;
  self->direction_ = direction;
}

ASUITextViewLabelImpl_MarqueeTask *new_ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *direction) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_MarqueeTask, initWithASUITextViewLabelImpl_withNSString_, outer$, direction)
}

ASUITextViewLabelImpl_MarqueeTask *create_ASUITextViewLabelImpl_MarqueeTask_initWithASUITextViewLabelImpl_withNSString_(ASUITextViewLabelImpl *outer$, NSString *direction) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_MarqueeTask, initWithASUITextViewLabelImpl_withNSString_, outer$, direction)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_MarqueeTask)

@implementation ASUITextViewLabelImpl_MarqueeTask_$Lambda$1

- (void)run {
  if (!this$0_->cancel_) {
    [this$0_->this$0_ applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_marquee withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"ellipsize" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ JavaLangInteger_valueOfWithInt_(val$numberOfBlankSpaces_), JavaLangInteger_valueOfWithInt_(this$0_->slideLength_), this$0_->direction_ } count:3 type:NSObject_class_()]];
    ASUITextViewLabelImpl_schedule(this$0_->this$0_);
  }
}

@end

void ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 *self, ASUITextViewLabelImpl_MarqueeTask *outer$, jint capture$0) {
  self->this$0_ = outer$;
  self->val$numberOfBlankSpaces_ = capture$0;
  NSObject_init(self);
}

ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 *new_ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(ASUITextViewLabelImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_MarqueeTask_$Lambda$1, initWithASUITextViewLabelImpl_MarqueeTask_withInt_, outer$, capture$0)
}

ASUITextViewLabelImpl_MarqueeTask_$Lambda$1 *create_ASUITextViewLabelImpl_MarqueeTask_$Lambda$1_initWithASUITextViewLabelImpl_MarqueeTask_withInt_(ASUITextViewLabelImpl_MarqueeTask *outer$, jint capture$0) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_MarqueeTask_$Lambda$1, initWithASUITextViewLabelImpl_MarqueeTask_withInt_, outer$, capture$0)
}

@implementation ASUITextViewLabelImpl_UITextViewLabelCommandBuilder

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$ {
  ASUITextViewLabelImpl_UITextViewLabelCommandBuilder_initWithASUITextViewLabelImpl_(self, outer$);
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosUsesStandardTextScaling {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosUsesStandardTextScaling"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosUsesStandardTextScaling {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosUsesStandardTextScaling"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosUsesStandardTextScalingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosUsesStandardTextScaling"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosIsEditable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsEditable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosIsEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosAllowsEditingTextAttributes {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosAllowsEditingTextAttributes {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosAllowsEditingTextAttributesWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosClearsOnInsertion {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosClearsOnInsertion {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosClearsOnInsertionWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetIosIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setIosIsSelectableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetTextIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextIsSelectableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetAutoSizeTextType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeTextType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAutoSizeTextType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeTextType"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setAutoSizeTextTypeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeTextType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetAutoSizeMaxTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeMaxTextSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAutoSizeMaxTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeMaxTextSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setAutoSizeMaxTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeMaxTextSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetAutoSizeMinTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeMinTextSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAutoSizeMinTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeMinTextSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setAutoSizeMinTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeMinTextSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetAutoSizeStepGranularity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeStepGranularity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAutoSizeStepGranularity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeStepGranularity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setAutoSizeStepGranularityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizeStepGranularity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setAutoSizePresetSizesWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoSizePresetSizes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMinLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMaxLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMinHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMaxEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMinEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ems"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetEllipsize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getEllipsize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setEllipsizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ellipsize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setStartOrStopMarqueeWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"startOrStopMarquee"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetMarqueeRepeatLimit {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMarqueeRepeatLimit {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMarqueeRepeatLimitWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"marqueeRepeatLimit"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetJustificationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getJustificationMode {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setJustificationModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"justificationMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setSingleLineWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"singleLine"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setPasswordWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"password"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetAutoLink {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoLink"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getAutoLink {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoLink"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setAutoLinkWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoLink"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextAllCapsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAllCaps"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setMaxLengthWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTypefaceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"typeface"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setFontFamilyWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fontFamily"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawablePaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setDrawableTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetLinksClickable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"linksClickable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isLinksClickable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"linksClickable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setLinksClickableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"linksClickable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextColorLinkWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorLink"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setScrollHorizontallyWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollHorizontally"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"editable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetTextColorHighlight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColorHighlight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextColorHighlightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)tryGetTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *)setTextFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 16, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 17, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 32, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 39, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 40, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 41, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 44, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 45, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 46, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 47, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 48, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 49, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 50, 30, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 51, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 52, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 53, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 54, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 55, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 56, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 57, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 58, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 59, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 60, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 61, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 62, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 63, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 64, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 65, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 66, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 67, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 68, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 69, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 70, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 71, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewLabelImpl_UITextViewLabelCommandBuilder;", 0x1, 72, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewLabelImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetIosText);
  methods[3].selector = @selector(getIosText);
  methods[4].selector = @selector(setIosTextWithNSString:);
  methods[5].selector = @selector(tryGetIosTextColor);
  methods[6].selector = @selector(getIosTextColor);
  methods[7].selector = @selector(setIosTextColorWithNSString:);
  methods[8].selector = @selector(tryGetIosUsesStandardTextScaling);
  methods[9].selector = @selector(isIosUsesStandardTextScaling);
  methods[10].selector = @selector(setIosUsesStandardTextScalingWithBoolean:);
  methods[11].selector = @selector(tryGetIosIsEditable);
  methods[12].selector = @selector(isIosIsEditable);
  methods[13].selector = @selector(setIosIsEditableWithBoolean:);
  methods[14].selector = @selector(tryGetIosAllowsEditingTextAttributes);
  methods[15].selector = @selector(isIosAllowsEditingTextAttributes);
  methods[16].selector = @selector(setIosAllowsEditingTextAttributesWithBoolean:);
  methods[17].selector = @selector(tryGetIosClearsOnInsertion);
  methods[18].selector = @selector(isIosClearsOnInsertion);
  methods[19].selector = @selector(setIosClearsOnInsertionWithBoolean:);
  methods[20].selector = @selector(tryGetIosIsSelectable);
  methods[21].selector = @selector(isIosIsSelectable);
  methods[22].selector = @selector(setIosIsSelectableWithBoolean:);
  methods[23].selector = @selector(tryGetTextIsSelectable);
  methods[24].selector = @selector(getTextIsSelectable);
  methods[25].selector = @selector(setTextIsSelectableWithBoolean:);
  methods[26].selector = @selector(tryGetText);
  methods[27].selector = @selector(getText);
  methods[28].selector = @selector(setTextWithNSString:);
  methods[29].selector = @selector(tryGetGravity);
  methods[30].selector = @selector(getGravity);
  methods[31].selector = @selector(setGravityWithNSString:);
  methods[32].selector = @selector(tryGetTextSize);
  methods[33].selector = @selector(getTextSize);
  methods[34].selector = @selector(setTextSizeWithNSString:);
  methods[35].selector = @selector(setPaddingWithNSString:);
  methods[36].selector = @selector(tryGetPaddingBottom);
  methods[37].selector = @selector(getPaddingBottom);
  methods[38].selector = @selector(setPaddingBottomWithNSString:);
  methods[39].selector = @selector(tryGetPaddingRight);
  methods[40].selector = @selector(getPaddingRight);
  methods[41].selector = @selector(setPaddingRightWithNSString:);
  methods[42].selector = @selector(tryGetPaddingLeft);
  methods[43].selector = @selector(getPaddingLeft);
  methods[44].selector = @selector(setPaddingLeftWithNSString:);
  methods[45].selector = @selector(tryGetPaddingStart);
  methods[46].selector = @selector(getPaddingStart);
  methods[47].selector = @selector(setPaddingStartWithNSString:);
  methods[48].selector = @selector(tryGetPaddingEnd);
  methods[49].selector = @selector(getPaddingEnd);
  methods[50].selector = @selector(setPaddingEndWithNSString:);
  methods[51].selector = @selector(tryGetPaddingTop);
  methods[52].selector = @selector(getPaddingTop);
  methods[53].selector = @selector(setPaddingTopWithNSString:);
  methods[54].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[55].selector = @selector(setPaddingVerticalWithNSString:);
  methods[56].selector = @selector(tryGetAutoSizeTextType);
  methods[57].selector = @selector(getAutoSizeTextType);
  methods[58].selector = @selector(setAutoSizeTextTypeWithNSString:);
  methods[59].selector = @selector(tryGetAutoSizeMaxTextSize);
  methods[60].selector = @selector(getAutoSizeMaxTextSize);
  methods[61].selector = @selector(setAutoSizeMaxTextSizeWithNSString:);
  methods[62].selector = @selector(tryGetAutoSizeMinTextSize);
  methods[63].selector = @selector(getAutoSizeMinTextSize);
  methods[64].selector = @selector(setAutoSizeMinTextSizeWithNSString:);
  methods[65].selector = @selector(tryGetAutoSizeStepGranularity);
  methods[66].selector = @selector(getAutoSizeStepGranularity);
  methods[67].selector = @selector(setAutoSizeStepGranularityWithNSString:);
  methods[68].selector = @selector(setAutoSizePresetSizesWithNSString:);
  methods[69].selector = @selector(tryGetMinLines);
  methods[70].selector = @selector(getMinLines);
  methods[71].selector = @selector(setMinLinesWithInt:);
  methods[72].selector = @selector(setLinesWithInt:);
  methods[73].selector = @selector(tryGetMaxLines);
  methods[74].selector = @selector(getMaxLines);
  methods[75].selector = @selector(setMaxLinesWithInt:);
  methods[76].selector = @selector(tryGetMinWidth);
  methods[77].selector = @selector(getMinWidth);
  methods[78].selector = @selector(setMinWidthWithNSString:);
  methods[79].selector = @selector(tryGetMinHeight);
  methods[80].selector = @selector(getMinHeight);
  methods[81].selector = @selector(setMinHeightWithNSString:);
  methods[82].selector = @selector(tryGetMaxWidth);
  methods[83].selector = @selector(getMaxWidth);
  methods[84].selector = @selector(setMaxWidthWithNSString:);
  methods[85].selector = @selector(tryGetMaxHeight);
  methods[86].selector = @selector(getMaxHeight);
  methods[87].selector = @selector(setMaxHeightWithNSString:);
  methods[88].selector = @selector(tryGetHeight);
  methods[89].selector = @selector(getHeight);
  methods[90].selector = @selector(setHeightWithNSString:);
  methods[91].selector = @selector(tryGetWidth);
  methods[92].selector = @selector(getWidth);
  methods[93].selector = @selector(setWidthWithNSString:);
  methods[94].selector = @selector(tryGetMaxEms);
  methods[95].selector = @selector(getMaxEms);
  methods[96].selector = @selector(setMaxEmsWithInt:);
  methods[97].selector = @selector(tryGetMinEms);
  methods[98].selector = @selector(getMinEms);
  methods[99].selector = @selector(setMinEmsWithInt:);
  methods[100].selector = @selector(setEmsWithInt:);
  methods[101].selector = @selector(tryGetEllipsize);
  methods[102].selector = @selector(getEllipsize);
  methods[103].selector = @selector(setEllipsizeWithNSString:);
  methods[104].selector = @selector(setStartOrStopMarqueeWithBoolean:);
  methods[105].selector = @selector(tryGetMarqueeRepeatLimit);
  methods[106].selector = @selector(getMarqueeRepeatLimit);
  methods[107].selector = @selector(setMarqueeRepeatLimitWithNSString:);
  methods[108].selector = @selector(tryGetJustificationMode);
  methods[109].selector = @selector(getJustificationMode);
  methods[110].selector = @selector(setJustificationModeWithNSString:);
  methods[111].selector = @selector(setSingleLineWithBoolean:);
  methods[112].selector = @selector(setPasswordWithBoolean:);
  methods[113].selector = @selector(tryGetAutoLink);
  methods[114].selector = @selector(getAutoLink);
  methods[115].selector = @selector(setAutoLinkWithNSString:);
  methods[116].selector = @selector(setTextAllCapsWithBoolean:);
  methods[117].selector = @selector(setMaxLengthWithInt:);
  methods[118].selector = @selector(setTypefaceWithNSString:);
  methods[119].selector = @selector(setTextStyleWithNSString:);
  methods[120].selector = @selector(setFontFamilyWithNSString:);
  methods[121].selector = @selector(setDrawableLeftWithNSString:);
  methods[122].selector = @selector(setDrawableStartWithNSString:);
  methods[123].selector = @selector(setDrawableRightWithNSString:);
  methods[124].selector = @selector(setDrawableEndWithNSString:);
  methods[125].selector = @selector(setDrawableTopWithNSString:);
  methods[126].selector = @selector(setDrawableBottomWithNSString:);
  methods[127].selector = @selector(tryGetDrawablePadding);
  methods[128].selector = @selector(getDrawablePadding);
  methods[129].selector = @selector(setDrawablePaddingWithNSString:);
  methods[130].selector = @selector(setDrawableTintWithNSString:);
  methods[131].selector = @selector(setDrawableTintModeWithNSString:);
  methods[132].selector = @selector(tryGetLinksClickable);
  methods[133].selector = @selector(isLinksClickable);
  methods[134].selector = @selector(setLinksClickableWithBoolean:);
  methods[135].selector = @selector(setTextColorLinkWithNSString:);
  methods[136].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[137].selector = @selector(setEnabledWithBoolean:);
  methods[138].selector = @selector(setEditableWithBoolean:);
  methods[139].selector = @selector(tryGetFirstBaselineToTopHeight);
  methods[140].selector = @selector(getFirstBaselineToTopHeight);
  methods[141].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[142].selector = @selector(tryGetLastBaselineToBottomHeight);
  methods[143].selector = @selector(getLastBaselineToBottomHeight);
  methods[144].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[145].selector = @selector(tryGetTextColorHighlight);
  methods[146].selector = @selector(getTextColorHighlight);
  methods[147].selector = @selector(setTextColorHighlightWithNSString:);
  methods[148].selector = @selector(tryGetTextColor);
  methods[149].selector = @selector(getTextColor);
  methods[150].selector = @selector(setTextColorWithNSString:);
  methods[151].selector = @selector(setTextFormatWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewLabelImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewLabelImpl;", "execute", "Z", "setIosText", "LNSString;", "setIosTextColor", "setIosUsesStandardTextScaling", "setIosIsEditable", "setIosAllowsEditingTextAttributes", "setIosClearsOnInsertion", "setIosIsSelectable", "setTextIsSelectable", "setText", "setGravity", "setTextSize", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setAutoSizeTextType", "setAutoSizeMaxTextSize", "setAutoSizeMinTextSize", "setAutoSizeStepGranularity", "setAutoSizePresetSizes", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setEllipsize", "setStartOrStopMarquee", "setMarqueeRepeatLimit", "setJustificationMode", "setSingleLine", "setPassword", "setAutoLink", "setTextAllCaps", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setLinksClickable", "setTextColorLink", "setScrollHorizontally", "setEnabled", "setEditable", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setTextColorHighlight", "setTextColor", "setTextFormat", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/UITextViewLabelImpl$UITextViewLabelCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_UITextViewLabelCommandBuilder = { "UITextViewLabelCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 152, 1, 0, -1, -1, 73, -1 };
  return &_ASUITextViewLabelImpl_UITextViewLabelCommandBuilder;
}

@end

void ASUITextViewLabelImpl_UITextViewLabelCommandBuilder_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *self, ASUITextViewLabelImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *new_ASUITextViewLabelImpl_UITextViewLabelCommandBuilder_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_UITextViewLabelCommandBuilder, initWithASUITextViewLabelImpl_, outer$)
}

ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *create_ASUITextViewLabelImpl_UITextViewLabelCommandBuilder_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_UITextViewLabelCommandBuilder, initWithASUITextViewLabelImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_UITextViewLabelCommandBuilder)

@implementation ASUITextViewLabelImpl_UITextViewLabelBean

- (instancetype)initWithASUITextViewLabelImpl:(ASUITextViewLabelImpl *)outer$ {
  ASUITextViewLabelImpl_UITextViewLabelBean_initWithASUITextViewLabelImpl_(self, outer$);
  return self;
}

- (id)getIosText {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosText])) executeWithBoolean:false])) getIosText];
}

- (void)setIosTextWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosTextColor {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosTextColor])) executeWithBoolean:false])) getIosTextColor];
}

- (void)setIosTextColorWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)isIosUsesStandardTextScaling {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosUsesStandardTextScaling])) executeWithBoolean:false])) isIosUsesStandardTextScaling];
}

- (void)setIosUsesStandardTextScalingWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosUsesStandardTextScalingWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsEditable {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosIsEditable])) executeWithBoolean:false])) isIosIsEditable];
}

- (void)setIosIsEditableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosIsEditableWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosAllowsEditingTextAttributes {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosAllowsEditingTextAttributes])) executeWithBoolean:false])) isIosAllowsEditingTextAttributes];
}

- (void)setIosAllowsEditingTextAttributesWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosAllowsEditingTextAttributesWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosClearsOnInsertion {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosClearsOnInsertion])) executeWithBoolean:false])) isIosClearsOnInsertion];
}

- (void)setIosClearsOnInsertionWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosClearsOnInsertionWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsSelectable {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosIsSelectable])) executeWithBoolean:false])) isIosIsSelectable];
}

- (void)setIosIsSelectableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosIsSelectableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTextIsSelectable {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextIsSelectable])) executeWithBoolean:false])) getTextIsSelectable];
}

- (void)setTextIsSelectableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextIsSelectableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getText {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetText])) executeWithBoolean:false])) getText];
}

- (void)setTextWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextSize {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextSize])) executeWithBoolean:false])) getTextSize];
}

- (void)setTextSizeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (id)getAutoSizeTextType {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAutoSizeTextType])) executeWithBoolean:false])) getAutoSizeTextType];
}

- (void)setAutoSizeTextTypeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoSizeTextTypeWithNSString:value])) executeWithBoolean:true];
}

- (id)getAutoSizeMaxTextSize {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAutoSizeMaxTextSize])) executeWithBoolean:false])) getAutoSizeMaxTextSize];
}

- (void)setAutoSizeMaxTextSizeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoSizeMaxTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (id)getAutoSizeMinTextSize {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAutoSizeMinTextSize])) executeWithBoolean:false])) getAutoSizeMinTextSize];
}

- (void)setAutoSizeMinTextSizeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoSizeMinTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (id)getAutoSizeStepGranularity {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAutoSizeStepGranularity])) executeWithBoolean:false])) getAutoSizeStepGranularity];
}

- (void)setAutoSizeStepGranularityWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoSizeStepGranularityWithNSString:value])) executeWithBoolean:true];
}

- (void)setAutoSizePresetSizesWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoSizePresetSizesWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinLines {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinLines])) executeWithBoolean:false])) getMinLines];
}

- (void)setMinLinesWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinLinesWithInt:value])) executeWithBoolean:true];
}

- (void)setLinesWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMaxLines {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxLines])) executeWithBoolean:false])) getMaxLines];
}

- (void)setMaxLinesWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMinWidth {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinWidth])) executeWithBoolean:false])) getMinWidth];
}

- (void)setMinWidthWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinHeight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinHeight])) executeWithBoolean:false])) getMinHeight];
}

- (void)setMinHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getHeight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHeight])) executeWithBoolean:false])) getHeight];
}

- (void)setHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getWidth {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWidth])) executeWithBoolean:false])) getWidth];
}

- (void)setWidthWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxEms {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxEms])) executeWithBoolean:false])) getMaxEms];
}

- (void)setMaxEmsWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMinEms {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinEms])) executeWithBoolean:false])) getMinEms];
}

- (void)setMinEmsWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEmsWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getEllipsize {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetEllipsize])) executeWithBoolean:false])) getEllipsize];
}

- (void)setEllipsizeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEllipsizeWithNSString:value])) executeWithBoolean:true];
}

- (void)setStartOrStopMarqueeWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setStartOrStopMarqueeWithBoolean:value])) executeWithBoolean:true];
}

- (id)getMarqueeRepeatLimit {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMarqueeRepeatLimit])) executeWithBoolean:false])) getMarqueeRepeatLimit];
}

- (void)setMarqueeRepeatLimitWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMarqueeRepeatLimitWithNSString:value])) executeWithBoolean:true];
}

- (id)getJustificationMode {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetJustificationMode])) executeWithBoolean:false])) getJustificationMode];
}

- (void)setJustificationModeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setJustificationModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setSingleLineWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSingleLineWithBoolean:value])) executeWithBoolean:true];
}

- (void)setPasswordWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPasswordWithBoolean:value])) executeWithBoolean:true];
}

- (id)getAutoLink {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetAutoLink])) executeWithBoolean:false])) getAutoLink];
}

- (void)setAutoLinkWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoLinkWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextAllCapsWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextAllCapsWithBoolean:value])) executeWithBoolean:true];
}

- (void)setMaxLengthWithInt:(jint)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLengthWithInt:value])) executeWithBoolean:true];
}

- (void)setTypefaceWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTypefaceWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextStyleWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFontFamilyWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFontFamilyWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableLeftWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableLeftWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableStartWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableRightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableRightWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableEndWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTopWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableBottomWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getDrawablePadding {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDrawablePadding])) executeWithBoolean:false])) getDrawablePadding];
}

- (void)setDrawablePaddingWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawablePaddingWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintModeWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintModeWithNSString:value])) executeWithBoolean:true];
}

- (id)isLinksClickable {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLinksClickable])) executeWithBoolean:false])) isLinksClickable];
}

- (void)setLinksClickableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLinksClickableWithBoolean:value])) executeWithBoolean:true];
}

- (void)setTextColorLinkWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorLinkWithNSString:value])) executeWithBoolean:true];
}

- (void)setScrollHorizontallyWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollHorizontallyWithBoolean:value])) executeWithBoolean:true];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (void)setEditableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEditableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getFirstBaselineToTopHeight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetFirstBaselineToTopHeight])) executeWithBoolean:false])) getFirstBaselineToTopHeight];
}

- (void)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFirstBaselineToTopHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getLastBaselineToBottomHeight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLastBaselineToBottomHeight])) executeWithBoolean:false])) getLastBaselineToBottomHeight];
}

- (void)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLastBaselineToBottomHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextColorHighlight {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColorHighlight])) executeWithBoolean:false])) getTextColorHighlight];
}

- (void)setTextColorHighlightWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorHighlightWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextColor {
  return [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColor])) executeWithBoolean:false])) getTextColor];
}

- (void)setTextColorWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextFormatWithNSString:(NSString *)value {
  (void) [((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([((ASUITextViewLabelImpl_UITextViewLabelCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextFormatWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 16, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 29, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 47, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 29, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewLabelImpl:);
  methods[1].selector = @selector(getIosText);
  methods[2].selector = @selector(setIosTextWithNSString:);
  methods[3].selector = @selector(getIosTextColor);
  methods[4].selector = @selector(setIosTextColorWithNSString:);
  methods[5].selector = @selector(isIosUsesStandardTextScaling);
  methods[6].selector = @selector(setIosUsesStandardTextScalingWithBoolean:);
  methods[7].selector = @selector(isIosIsEditable);
  methods[8].selector = @selector(setIosIsEditableWithBoolean:);
  methods[9].selector = @selector(isIosAllowsEditingTextAttributes);
  methods[10].selector = @selector(setIosAllowsEditingTextAttributesWithBoolean:);
  methods[11].selector = @selector(isIosClearsOnInsertion);
  methods[12].selector = @selector(setIosClearsOnInsertionWithBoolean:);
  methods[13].selector = @selector(isIosIsSelectable);
  methods[14].selector = @selector(setIosIsSelectableWithBoolean:);
  methods[15].selector = @selector(getTextIsSelectable);
  methods[16].selector = @selector(setTextIsSelectableWithBoolean:);
  methods[17].selector = @selector(getText);
  methods[18].selector = @selector(setTextWithNSString:);
  methods[19].selector = @selector(getGravity);
  methods[20].selector = @selector(setGravityWithNSString:);
  methods[21].selector = @selector(getTextSize);
  methods[22].selector = @selector(setTextSizeWithNSString:);
  methods[23].selector = @selector(setPaddingWithNSString:);
  methods[24].selector = @selector(getPaddingBottom);
  methods[25].selector = @selector(setPaddingBottomWithNSString:);
  methods[26].selector = @selector(getPaddingRight);
  methods[27].selector = @selector(setPaddingRightWithNSString:);
  methods[28].selector = @selector(getPaddingLeft);
  methods[29].selector = @selector(setPaddingLeftWithNSString:);
  methods[30].selector = @selector(getPaddingStart);
  methods[31].selector = @selector(setPaddingStartWithNSString:);
  methods[32].selector = @selector(getPaddingEnd);
  methods[33].selector = @selector(setPaddingEndWithNSString:);
  methods[34].selector = @selector(getPaddingTop);
  methods[35].selector = @selector(setPaddingTopWithNSString:);
  methods[36].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[37].selector = @selector(setPaddingVerticalWithNSString:);
  methods[38].selector = @selector(getAutoSizeTextType);
  methods[39].selector = @selector(setAutoSizeTextTypeWithNSString:);
  methods[40].selector = @selector(getAutoSizeMaxTextSize);
  methods[41].selector = @selector(setAutoSizeMaxTextSizeWithNSString:);
  methods[42].selector = @selector(getAutoSizeMinTextSize);
  methods[43].selector = @selector(setAutoSizeMinTextSizeWithNSString:);
  methods[44].selector = @selector(getAutoSizeStepGranularity);
  methods[45].selector = @selector(setAutoSizeStepGranularityWithNSString:);
  methods[46].selector = @selector(setAutoSizePresetSizesWithNSString:);
  methods[47].selector = @selector(getMinLines);
  methods[48].selector = @selector(setMinLinesWithInt:);
  methods[49].selector = @selector(setLinesWithInt:);
  methods[50].selector = @selector(getMaxLines);
  methods[51].selector = @selector(setMaxLinesWithInt:);
  methods[52].selector = @selector(getMinWidth);
  methods[53].selector = @selector(setMinWidthWithNSString:);
  methods[54].selector = @selector(getMinHeight);
  methods[55].selector = @selector(setMinHeightWithNSString:);
  methods[56].selector = @selector(getMaxWidth);
  methods[57].selector = @selector(setMaxWidthWithNSString:);
  methods[58].selector = @selector(getMaxHeight);
  methods[59].selector = @selector(setMaxHeightWithNSString:);
  methods[60].selector = @selector(getHeight);
  methods[61].selector = @selector(setHeightWithNSString:);
  methods[62].selector = @selector(getWidth);
  methods[63].selector = @selector(setWidthWithNSString:);
  methods[64].selector = @selector(getMaxEms);
  methods[65].selector = @selector(setMaxEmsWithInt:);
  methods[66].selector = @selector(getMinEms);
  methods[67].selector = @selector(setMinEmsWithInt:);
  methods[68].selector = @selector(setEmsWithInt:);
  methods[69].selector = @selector(getEllipsize);
  methods[70].selector = @selector(setEllipsizeWithNSString:);
  methods[71].selector = @selector(setStartOrStopMarqueeWithBoolean:);
  methods[72].selector = @selector(getMarqueeRepeatLimit);
  methods[73].selector = @selector(setMarqueeRepeatLimitWithNSString:);
  methods[74].selector = @selector(getJustificationMode);
  methods[75].selector = @selector(setJustificationModeWithNSString:);
  methods[76].selector = @selector(setSingleLineWithBoolean:);
  methods[77].selector = @selector(setPasswordWithBoolean:);
  methods[78].selector = @selector(getAutoLink);
  methods[79].selector = @selector(setAutoLinkWithNSString:);
  methods[80].selector = @selector(setTextAllCapsWithBoolean:);
  methods[81].selector = @selector(setMaxLengthWithInt:);
  methods[82].selector = @selector(setTypefaceWithNSString:);
  methods[83].selector = @selector(setTextStyleWithNSString:);
  methods[84].selector = @selector(setFontFamilyWithNSString:);
  methods[85].selector = @selector(setDrawableLeftWithNSString:);
  methods[86].selector = @selector(setDrawableStartWithNSString:);
  methods[87].selector = @selector(setDrawableRightWithNSString:);
  methods[88].selector = @selector(setDrawableEndWithNSString:);
  methods[89].selector = @selector(setDrawableTopWithNSString:);
  methods[90].selector = @selector(setDrawableBottomWithNSString:);
  methods[91].selector = @selector(getDrawablePadding);
  methods[92].selector = @selector(setDrawablePaddingWithNSString:);
  methods[93].selector = @selector(setDrawableTintWithNSString:);
  methods[94].selector = @selector(setDrawableTintModeWithNSString:);
  methods[95].selector = @selector(isLinksClickable);
  methods[96].selector = @selector(setLinksClickableWithBoolean:);
  methods[97].selector = @selector(setTextColorLinkWithNSString:);
  methods[98].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[99].selector = @selector(setEnabledWithBoolean:);
  methods[100].selector = @selector(setEditableWithBoolean:);
  methods[101].selector = @selector(getFirstBaselineToTopHeight);
  methods[102].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[103].selector = @selector(getLastBaselineToBottomHeight);
  methods[104].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  methods[105].selector = @selector(getTextColorHighlight);
  methods[106].selector = @selector(setTextColorHighlightWithNSString:);
  methods[107].selector = @selector(getTextColor);
  methods[108].selector = @selector(setTextColorWithNSString:);
  methods[109].selector = @selector(setTextFormatWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewLabelImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewLabelImpl;", "setIosText", "LNSString;", "setIosTextColor", "setIosUsesStandardTextScaling", "Z", "setIosIsEditable", "setIosAllowsEditingTextAttributes", "setIosClearsOnInsertion", "setIosIsSelectable", "setTextIsSelectable", "setText", "setGravity", "setTextSize", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setAutoSizeTextType", "setAutoSizeMaxTextSize", "setAutoSizeMinTextSize", "setAutoSizeStepGranularity", "setAutoSizePresetSizes", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setEllipsize", "setStartOrStopMarquee", "setMarqueeRepeatLimit", "setJustificationMode", "setSingleLine", "setPassword", "setAutoLink", "setTextAllCaps", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setLinksClickable", "setTextColorLink", "setScrollHorizontally", "setEnabled", "setEditable", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "setTextColorHighlight", "setTextColor", "setTextFormat" };
  static const J2ObjcClassInfo _ASUITextViewLabelImpl_UITextViewLabelBean = { "UITextViewLabelBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 110, 1, 0, -1, -1, -1, -1 };
  return &_ASUITextViewLabelImpl_UITextViewLabelBean;
}

@end

void ASUITextViewLabelImpl_UITextViewLabelBean_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl_UITextViewLabelBean *self, ASUITextViewLabelImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASUITextViewLabelImpl_UITextViewLabelBean *new_ASUITextViewLabelImpl_UITextViewLabelBean_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUITextViewLabelImpl_UITextViewLabelBean, initWithASUITextViewLabelImpl_, outer$)
}

ASUITextViewLabelImpl_UITextViewLabelBean *create_ASUITextViewLabelImpl_UITextViewLabelBean_initWithASUITextViewLabelImpl_(ASUITextViewLabelImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUITextViewLabelImpl_UITextViewLabelBean, initWithASUITextViewLabelImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewLabelImpl_UITextViewLabelBean)
