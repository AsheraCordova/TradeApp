//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-widget_library\widget_library\src\com\ashera\utils\StringUtils.java
//

#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "StringUtils.h"
#include "java/lang/Boolean.h"
#include "java/lang/Character.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/util/List.h"

@class JavaLangBoolean;


@interface ASStringUtils ()

+ (JavaLangBoolean *)convertToBooleanWithNSString:(NSString *)value;

@end

__attribute__((unused)) static JavaLangBoolean *ASStringUtils_convertToBooleanWithNSString_(NSString *value);

@implementation ASStringUtils

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASStringUtils_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (NSString *)unescapeJavaStringWithNSString:(NSString *)st {
  return ASStringUtils_unescapeJavaStringWithNSString_(st);
}

+ (NSString *)trimStringWithNSString:(NSString *)myString {
  return ASStringUtils_trimStringWithNSString_(myString);
}

+ (NSString *)floatToStringWithFloat:(jfloat)f {
  return ASStringUtils_floatToStringWithFloat_(f);
}

+ (NSString *)joinWithNSString:(NSString *)separator
              withJavaUtilList:(id<JavaUtilList>)input {
  return ASStringUtils_joinWithNSString_withJavaUtilList_(separator, input);
}

+ (JavaLangBoolean *)getBooleanWithId:(id)payLoad {
  return ASStringUtils_getBooleanWithId_(payLoad);
}

+ (JavaLangBoolean *)convertToBooleanWithNSString:(NSString *)value {
  return ASStringUtils_convertToBooleanWithNSString_(value);
}

+ (IOSObjectArray *)splitWithNSString:(NSString *)formGroupId
                         withNSString:(NSString *)seperator {
  return ASStringUtils_splitWithNSString_withNSString_(formGroupId, seperator);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 3, 4, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x9, 5, 6, -1, 7, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0x9, 8, 9, -1, -1, -1, -1 },
    { NULL, "LJavaLangBoolean;", 0xa, 10, 1, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x9, 11, 12, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(unescapeJavaStringWithNSString:);
  methods[2].selector = @selector(trimStringWithNSString:);
  methods[3].selector = @selector(floatToStringWithFloat:);
  methods[4].selector = @selector(joinWithNSString:withJavaUtilList:);
  methods[5].selector = @selector(getBooleanWithId:);
  methods[6].selector = @selector(convertToBooleanWithNSString:);
  methods[7].selector = @selector(splitWithNSString:withNSString:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "unescapeJavaString", "LNSString;", "trimString", "floatToString", "F", "join", "LNSString;LJavaUtilList;", "(Ljava/lang/String;Ljava/util/List<Ljava/lang/String;>;)Ljava/lang/String;", "getBoolean", "LNSObject;", "convertToBoolean", "split", "LNSString;LNSString;" };
  static const J2ObjcClassInfo _ASStringUtils = { "StringUtils", "com.ashera.utils", ptrTable, methods, NULL, 7, 0x1, 8, 0, -1, -1, -1, -1, -1 };
  return &_ASStringUtils;
}

@end

void ASStringUtils_init(ASStringUtils *self) {
  NSObject_init(self);
}

ASStringUtils *new_ASStringUtils_init() {
  J2OBJC_NEW_IMPL(ASStringUtils, init)
}

ASStringUtils *create_ASStringUtils_init() {
  J2OBJC_CREATE_IMPL(ASStringUtils, init)
}

NSString *ASStringUtils_unescapeJavaStringWithNSString_(NSString *st) {
  ASStringUtils_initialize();
  if (st == nil) {
    return nil;
  }
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_initWithInt_([st java_length]);
  for (jint i = 0; i < [st java_length]; i++) {
    jchar ch = [st charAtWithInt:i];
    if (ch == '\\') {
      jchar nextChar = (i == [st java_length] - 1) ? '\\' : [st charAtWithInt:i + 1];
      if (nextChar >= '0' && nextChar <= '7') {
        NSString *code = JreStrcat("C", nextChar);
        i++;
        if ((i < [st java_length] - 1) && [st charAtWithInt:i + 1] >= '0' && [st charAtWithInt:i + 1] <= '7') {
          JreStrAppend(&code, "C", [st charAtWithInt:i + 1]);
          i++;
          if ((i < [st java_length] - 1) && [st charAtWithInt:i + 1] >= '0' && [st charAtWithInt:i + 1] <= '7') {
            JreStrAppend(&code, "C", [st charAtWithInt:i + 1]);
            i++;
          }
        }
        [sb appendWithChar:(jchar) JavaLangInteger_parseIntWithNSString_withInt_(code, 8)];
        continue;
      }
      {
        jint code;
        switch (nextChar) {
          case '\\':
          ch = '\\';
          break;
          case 'b':
          ch = 0x0008;
          break;
          case 'f':
          ch = 0x000c;
          break;
          case 'n':
          ch = 0x000a;
          break;
          case 'r':
          ch = 0x000d;
          break;
          case 't':
          ch = 0x0009;
          break;
          case '"':
          ch = '"';
          break;
          case '\'':
          ch = '\'';
          break;
          case 'u':
          if (i >= [st java_length] - 5) {
            ch = 'u';
            break;
          }
          code = JavaLangInteger_parseIntWithNSString_withInt_(JreStrcat("CCCC", [st charAtWithInt:i + 2], [st charAtWithInt:i + 3], [st charAtWithInt:i + 4], [st charAtWithInt:i + 5]), 16);
          [sb appendWithCharArray:JavaLangCharacter_toCharsWithInt_(code)];
          i += 5;
          continue;
        }
      }
      i++;
    }
    [sb appendWithChar:ch];
  }
  return [sb description];
}

NSString *ASStringUtils_trimStringWithNSString_(NSString *myString) {
  ASStringUtils_initialize();
  if (myString == nil) {
    return nil;
  }
  NSString *allRemoved = [myString java_replaceAll:@"^\\s+|\\s+$" withReplacement:@""];
  return allRemoved;
}

NSString *ASStringUtils_floatToStringWithFloat_(jfloat f) {
  ASStringUtils_initialize();
  jint i = JreFpToInt(f);
  return (f == i ? NSString_java_valueOfInt_(i) : NSString_java_valueOfFloat_(f));
}

NSString *ASStringUtils_joinWithNSString_withJavaUtilList_(NSString *separator, id<JavaUtilList> input) {
  ASStringUtils_initialize();
  if (input == nil || [input size] <= 0) return @"";
  JavaLangStringBuilder *sb = create_JavaLangStringBuilder_init();
  for (jint i = 0; i < [input size]; i++) {
    [sb appendWithNSString:[input getWithInt:i]];
    if (i != [input size] - 1) {
      [sb appendWithNSString:separator];
    }
  }
  return [sb description];
}

JavaLangBoolean *ASStringUtils_getBooleanWithId_(id payLoad) {
  ASStringUtils_initialize();
  if (payLoad == nil) {
    return JreLoadStatic(JavaLangBoolean, FALSE);
  }
  if ([payLoad isKindOfClass:[JavaLangBoolean class]]) {
    return (JavaLangBoolean *) payLoad;
  }
  NSString *string = [payLoad description];
  JavaLangBoolean *result = ASStringUtils_convertToBooleanWithNSString_(string);
  return result;
}

JavaLangBoolean *ASStringUtils_convertToBooleanWithNSString_(NSString *value) {
  ASStringUtils_initialize();
  JavaLangBoolean *returnValue = JreLoadStatic(JavaLangBoolean, FALSE);
  if ([@"1" java_equalsIgnoreCase:value] || [@"yes" java_equalsIgnoreCase:value] || [@"true" java_equalsIgnoreCase:value] || [@"on" java_equalsIgnoreCase:value]) returnValue = JreLoadStatic(JavaLangBoolean, TRUE);
  return returnValue;
}

IOSObjectArray *ASStringUtils_splitWithNSString_withNSString_(NSString *formGroupId, NSString *seperator) {
  ASStringUtils_initialize();
  return [((NSString *) nil_chk(formGroupId)) java_split:seperator];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASStringUtils)
