//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-ios-widgets\ios_widget_library\src\main\java\com\ashera\layout\UITextViewImpl.java
//

#include "AbstractBitFlagConverter.h"
#include "AbstractEnumToIntConverter.h"
#include "AttributedString.h"
#include "BaseMeasurableView.h"
#include "BaseWidget.h"
#include "Color.h"
#include "ColorStateList.h"
#include "CommonConverters.h"
#include "ConverterFactory.h"
#include "Drawable.h"
#include "Editable.h"
#include "EventCommand.h"
#include "EventCommandFactory.h"
#include "EventExpressionParser.h"
#include "FontDescriptor.h"
#include "FontMetricsDescriptor.h"
#include "FormElement.h"
#include "GravityConverter.h"
#include "Html.h"
#include "IActivity.h"
#include "IAttributable.h"
#include "IConverter.h"
#include "IFragment.h"
#include "ILifeCycleDecorator.h"
#include "IListener.h"
#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "IWidget.h"
#include "IWidgetLifeCycleListener.h"
#include "IdGenerator.h"
#include "J2ObjC_source.h"
#include "KeyEvent.h"
#include "Layout.h"
#include "LayoutNativeVars.h"
#include "MeasurableTextView.h"
#include "MeasureEvent.h"
#include "OnLayoutEvent.h"
#include "PluginInvoker.h"
#include "RectM.h"
#include "ResourceBundleUtils.h"
#include "SimpleWrapableView.h"
#include "TextDirectionHeuristic.h"
#include "TextView.h"
#include "TextWatcher.h"
#include "UITextViewImpl.h"
#include "View.h"
#include "ViewGroupImpl.h"
#include "ViewImpl.h"
#include "WidgetAttribute.h"
#include "WidgetFactory.h"
#include "java/lang/Boolean.h"
#include "java/lang/CharSequence.h"
#include "java/lang/Character.h"
#include "java/lang/Float.h"
#include "java/lang/Integer.h"
#include "java/lang/Math.h"
#include "java/lang/StringBuilder.h"
#include "java/lang/UnsupportedOperationException.h"
#include "java/text/DecimalFormatSymbols.h"
#include "java/util/Arrays.h"
#include "java/util/HashMap.h"
#include "java/util/List.h"
#include "java/util/Locale.h"
#include "java/util/Map.h"
#include "java/util/regex/Matcher.h"
#include "java/util/regex/Pattern.h"

#include "java/lang/Integer.h"
#include "java/lang/Float.h"
#include "java/lang/Boolean.h"
#include <UIKit/UIKit.h>
#include "HasLifeCycleDecorators.h"
#include "ASUIScrollView.h"
#include "ASUIView.h"

#include "ASUITextView.h"

@class JavaUtilLocale;
@class JavaUtilRegexPattern;
@protocol JavaLangCharSequence;
@protocol JavaUtilList;
@protocol JavaUtilMap;


#pragma clang diagnostic ignored "-Wincomplete-implementation"

@interface ASUITextViewImpl () {
 @public
  id<JavaUtilMap> fontDescriptors_;
  jboolean html_;
  jboolean escapeHtml_;
  id<JavaUtilMap> htmlConfig_;
  jfloat mSpacingAdd_;
  jfloat mSpacingMult_;
  JavaUtilLocale *locale_;
  ADColorStateList *drawableTint_;
  jint paddingLeft_;
  jint paddingRight_;
  jint paddingTop_;
  jint paddingBottom_;
  ASBaseMeasurableView_VerticalAligment *preVerticalAligment_;
  id originalTintColor_;
  jint maxLength_;
  JavaUtilRegexPattern *numericPattern_;
  id editorAction_;
  id onFocusChange_;
  jboolean selectAllOnFocus_;
  jboolean selectOnceOnFocus_;
  jboolean scrollHorizontally_;
  id onAfterTextChange_;
  id onBeforeTextChange_;
  id onTextChange_;
  jint start_;
  jint end_;
  jint count_;
  jint after_;
  NSString *str_;
  jboolean textAllCaps_;
  ASUITextViewImpl_UITextViewCommandBuilder *builder_;
  ASUITextViewImpl_UITextViewBean *bean_;
  ASSimpleWrapableView *simpleWrapableView_;
  id placeholderLabel_;
  jboolean callMeasureOnChange_;
  jint lineSpacing_;
}

- (void)setWidgetOnNativeClass;

- (void)setGravityWithId:(id)objValue;

- (void)updateTextAlignment;

- (id)getGravity;

- (id)getMinHeight;

- (id)getMinWidth;

- (void)setEmsWithId:(id)objValue;

- (void)setMinEmsWithId:(id)objValue;

- (void)setMaxEmsWithId:(id)objValue;

- (void)setWidthWithId:(id)objValue;

- (void)setHeightWithId:(id)objValue;

- (void)setMaxLinesWithId:(id)objValue;

- (void)setLinesWithId:(id)objValue;

- (void)setMinLinesWithId:(id)objValue;

- (void)setMaxHeightWithId:(id)objValue;

- (void)setMaxWidthWithId:(id)objValue;

- (void)setMinHeightWithId:(id)objValue;

- (void)setMinWidthWithId:(id)objValue;

- (id)getWidth;

- (jint)getHeight;

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue;

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)setTextStyleWithId:(id)objValue;

- (void)setFirstBaselineToTopHeightWithId:(id)objValue;

- (jboolean)getIncludeFontPadding;

- (id)getFirstBaselineToTopHeight;

- (void)setLastBaselineToBottomHeightWithId:(id)objValue;

- (id)getLastBaselineToBottomHeight;

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params OBJC_METHOD_FAMILY_NONE;

- (void)setLineSpacingMultiplierWithId:(id)objValue;

- (void)setLineSpacingExtraWithId:(id)objValue;

- (id)getLineSpacingMultiplier;

- (id)getLineSpacingExtra;

- (NSString *)getDigitString;

- (NSString *)getSignedChars;

- (NSString *)getDecimalChars;

- (void)setNumericWithId:(id)objValue;

- (void)setDigitsWithId:(id)objValue;

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr;

- (void)handleHtmlTextWithNSString:(NSString *)text;

- (void)nativeSetTextWithNSString:(NSString *)text;

- (void)nativeSetHtmlTextWithId:(id)text;

- (id)getMyText;

- (id)getTextSize;

- (void)setMyTextSizeWithId:(id)objValue;

- (void)nativeSetTextSizeWithInt:(jint)value;

- (void)setVerticalAligmentCenter;

- (void)setVerticalAligmentBottom;

- (void)setVerticalAligmentTop;

- (void)setHorizontalAligmentCenter;

- (void)setHorizontalAligmentRight;

- (void)setHorizontalAligmentRightInternal;

- (void)setHorizontalAligmentLeft;

- (void)setHorizontalAligmentLeftInternal;

- (jint)getTextAlignment;

- (void)nativeSetVerticalAligmentBottom;

- (void)nativeSetVerticalAligmentTop;

- (void)nativeSetVerticalAligmentCenter;

- (void)setDrawablePaddingWithId:(id)objValue;

- (void)setDrawableBottomWithId:(id)objValue;

- (void)setDrawableTopWithId:(id)objValue;

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue;

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue;

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue;

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue;

- (jint)getImageHeightWithId:(id)objValue;

- (jint)getImageWidthWithId:(id)objValue;

- (id)getDrawablePadding;

- (void)setDrawableTintModeWithId:(id)value;

- (void)setDrawableTintWithId:(id)objValue;

- (jint)nativeGetFontSize;

- (jint)nativeGetFontStyle;

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor;

- (void)nativeSetFontStyleWithInt:(jint)style;

- (void)setTextColorWithId:(id)objValue;

- (id)getTextColorState;

- (jint)getLineHeight;

- (jint)getBorderWidth;

- (id)getPaddingEnd;

- (id)getPaddingStart;

- (void)setPaddingVerticalWithId:(id)objValue;

- (void)setPaddingHorizontalWithId:(id)objValue;

- (void)setPaddingEndWithId:(id)objValue;

- (void)setPaddingStartWithId:(id)objValue;

- (void)setPaddingWithId:(id)objValue;

- (void)nativeSetPaddingBottomWithInt:(jint)value;

- (void)nativeSetPaddingLeftWithInt:(jint)value;

- (void)nativeSetPaddingRightWithInt:(jint)value;

- (void)nativeSetPaddingTopWithInt:(jint)value;

- (void)adjustContentSizeWithInt:(jint)width
                         withInt:(jint)height;

- (jboolean)isContentOffsetCorrectionNeededWithId:(id)view;

- (void)setContentOffsetWithInt:(jint)topCorrect
                         withId:(id)view;

- (void)setTextColorHighlightWithId:(id)objValue;

- (id)getTextColorHighlight;

- (void)nativeTriggerChangeHandlersWithNSString:(NSString *)text;

- (void)nativeTriggerBeforeChangeHandlersWithNSString:(NSString *)text;

- (void)setCursorVisibleWithId:(id)objValue;

- (id)nativeGetTintColorWithBoolean:(jboolean)clearColor;

- (void)setCapitalizeWithId:(id)objValue;

- (void)nativeSetCapitalizeWithInt:(jint)capitalizeType;

- (void)setAutoTextWithId:(id)objValue;

- (void)nativeSetCorrectionTypeWithInt:(jint)capitalizeType;

- (jboolean)getCursorVisible;

- (void)setMaxLengthWithId:(id)objValue;

- (IOSObjectArray *)getDigitStrings;

- (NSString *)getLocaleValueFromRSWithNSString:(NSString *)defaultSymbol
                                  withNSString:(NSString *)key;

- (NSString *)getPlusString;

- (NSString *)getMinusString;

- (NSString *)getDecimalCharacter;

- (jboolean)numericPatternMatchesWithNSString:(NSString *)str;

- (void)removeNumericListener;

- (void)addNumericListenerWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

- (void)setPhoneNumberWithId:(id)objValue;

- (void)nativeSetPhoneNumberWithBoolean:(jboolean)value;

- (id)getFont;

- (void)setInputTypeWithId:(id)objValue;

- (void)nativeSetKeyboardTypeWithInt:(jint)value;

- (id)getInputType;

- (jint)nativeGetKeyboardType;

- (void)setImeOptionsWithId:(id)objValue
               withNSString:(NSString *)strValue;

- (void)nativeSetImeOptionsWithInt:(jint)imeOptions;

- (jint)nativeGetImeOptions;

- (id)getImeOptions;

- (void)setOnEditorActionWithId:(id)objValue;

- (void)setOnEditorActionListener;

- (void)setInputAccessoryViewDoneButtonWithId:(id)objValue;

- (void)nativeSetInputAccessoryViewDoneButtonWithNSString:(NSString *)title;

- (void)setOnFocusWithId:(id)objValue;

- (void)sendPressStartEvent;

- (void)sendPressEndEvent;

- (void)setSelectAllOnFocusWithId:(id)objValue;

- (void)setSelectAllWithId:(id)objValue;

- (jboolean)isFirstResponder;

- (void)becomeFirstResponder;

- (void)nativeSetSelectAllWithFloat:(jfloat)delay;

- (void)setSingleLineWithId:(id)objValue;

- (id)getSingleLine;

- (void)setScrollHorizontallyWithId:(id)objValue;

- (void)nativeAddTapGesture;

- (void)nativeSetScrollEnabledWithId:(id)scrollView
                         withBoolean:(jboolean)scrollEnabled;

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors;

- (void)handleOnBeforeTextChangeWithNSString:(NSString *)s
                                     withInt:(jint)start
                                     withInt:(jint)count
                                     withInt:(jint)after;

- (void)handleOnAfterTextChange;

- (void)handleOnTextChange;

- (void)setOnAfterTextChangeWithId:(id)objValue;

- (void)setBeforeOnTextChangeWithId:(id)objValue;

- (void)setOnTextChangeWithId:(id)objValue;

- (void)setTextAllCapsWithId:(id)objValue;

- (void)forceRedraw;

- (void)nativeSetContentSizeWithId:(id)uiView
                           withInt:(jint)contentWidth
                           withInt:(jint)height;

- (void)remeasure;

- (void)updateScrollViewContentOffset;

- (void)setInputViewWithId:(id)objValue;

- (void)setNativeInputViewWithId:(id)objValue;

- (void)setPickerView;

- (void)setDatePicker;

- (void)setErrorWithNSString:(NSString *)message;

- (void)setHintTextFormatWithId:(id)objValue;

- (void)createSimpleWrapableView;

- (jboolean)hasScrollView;

- (jboolean)isViewWrapped;

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b;

- (void)invalidateWrapViewHolder;

- (id)getScrollView;

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params;

- (id)nativeCreateViewWithInt:(jint)viewType;

- (void)createPlaceHolderWithNSString:(NSString *)text;

- (void)updatePlaceHolderVisibility;

- (void)syncPlaceholderLabel;

- (void)setHintWithId:(id)objValue;

- (void)setHintColorWithId:(id)objValue;

- (id)getHint;

- (NSString *)nativeGetHint;

- (void)nativeSetHintColorWithId:(id)objValue;

- (void)updateBoundsWithInt:(jint)topPadding
                    withInt:(jint)bottomPadding
                     withId:(id)parent
                     withId:(id)child;

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b;

- (void)addMinMaxListener;

- (jboolean)isEllipsized;

- (void)nativeSetEnabledWithBoolean:(jboolean)isEnabled;

- (id)getEllipsize;

- (void)nativeSetMaxLinesWithInt:(jint)lines;

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue;

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode;

- (jint)nativeGetLineBreakMode;

- (void)setLineSpacing;

- (void)nativeSetLayoutManagerDelegate;

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator;

- (void)nativeAddTextFieldDidChange;

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl, fontDescriptors_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, htmlConfig_, id<JavaUtilMap>)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, locale_, JavaUtilLocale *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, drawableTint_, ADColorStateList *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, preVerticalAligment_, ASBaseMeasurableView_VerticalAligment *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, originalTintColor_, id)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, numericPattern_, JavaUtilRegexPattern *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, editorAction_, id)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, onFocusChange_, id)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, onAfterTextChange_, id)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, onBeforeTextChange_, id)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, onTextChange_, id)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, str_, NSString *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, builder_, ASUITextViewImpl_UITextViewCommandBuilder *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, bean_, ASUITextViewImpl_UITextViewBean *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, simpleWrapableView_, ASSimpleWrapableView *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl, placeholderLabel_, id)

inline NSString *ASUITextViewImpl_get_FOREGROUND_REGEX(void);
static NSString *ASUITextViewImpl_FOREGROUND_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUITextViewImpl, FOREGROUND_REGEX, NSString *)

inline NSString *ASUITextViewImpl_get_VIEW_HOLDER_REGEX(void);
static NSString *ASUITextViewImpl_VIEW_HOLDER_REGEX = @"none";
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUITextViewImpl, VIEW_HOLDER_REGEX, NSString *)

inline NSString *ASUITextViewImpl_get_WIDGET_REGEX(void);
static NSString *ASUITextViewImpl_WIDGET_REGEX;
J2OBJC_STATIC_FIELD_OBJ_FINAL(ASUITextViewImpl, WIDGET_REGEX, NSString *)

inline id<JavaUtilList> ASUITextViewImpl_get_regexSpecialCharacters(void);
inline id<JavaUtilList> ASUITextViewImpl_set_regexSpecialCharacters(id<JavaUtilList> value);
static id<JavaUtilList> ASUITextViewImpl_regexSpecialCharacters;
J2OBJC_STATIC_FIELD_OBJ(ASUITextViewImpl, regexSpecialCharacters, id<JavaUtilList>)

inline jint ASUITextViewImpl_get_TEXT_ALIGN_CENTER(void);
#define ASUITextViewImpl_TEXT_ALIGN_CENTER 2
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewImpl, TEXT_ALIGN_CENTER, jint)

inline jint ASUITextViewImpl_get_TEXT_ALIGN_LEFT(void);
#define ASUITextViewImpl_TEXT_ALIGN_LEFT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewImpl, TEXT_ALIGN_LEFT, jint)

inline jint ASUITextViewImpl_get_TEXT_ALIGN_RIGHT(void);
#define ASUITextViewImpl_TEXT_ALIGN_RIGHT 1
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewImpl, TEXT_ALIGN_RIGHT, jint)

inline jint ASUITextViewImpl_get_ITALIC_FONT_TRAIT(void);
inline jint ASUITextViewImpl_set_ITALIC_FONT_TRAIT(jint value);
inline jint *ASUITextViewImpl_getRef_ITALIC_FONT_TRAIT(void);
static jint ASUITextViewImpl_ITALIC_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASUITextViewImpl, ITALIC_FONT_TRAIT, jint)

inline jint ASUITextViewImpl_get_BOLD_FONT_TRAIT(void);
inline jint ASUITextViewImpl_set_BOLD_FONT_TRAIT(jint value);
inline jint *ASUITextViewImpl_getRef_BOLD_FONT_TRAIT(void);
static jint ASUITextViewImpl_BOLD_FONT_TRAIT;
J2OBJC_STATIC_FIELD_PRIMITIVE(ASUITextViewImpl, BOLD_FONT_TRAIT, jint)

inline jint ASUITextViewImpl_get_NORMAL_FONT_TRAIT(void);
#define ASUITextViewImpl_NORMAL_FONT_TRAIT 0
J2OBJC_STATIC_FIELD_CONSTANT(ASUITextViewImpl, NORMAL_FONT_TRAIT, jint)

__attribute__((unused)) static void ASUITextViewImpl_setWidgetOnNativeClass(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setGravityWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_updateTextAlignment(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getGravity(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getMinHeight(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getMinWidth(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setEmsWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMinEmsWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMaxEmsWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setWidthWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setHeightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMaxLinesWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setLinesWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMinLinesWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMaxHeightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMaxWidthWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMinHeightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setMinWidthWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getWidth(ASUITextViewImpl *self);

__attribute__((unused)) static jint ASUITextViewImpl_getHeight(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setTypeFaceWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_setFontFamilyWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_setTextStyleWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setFirstBaselineToTopHeightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static jboolean ASUITextViewImpl_getIncludeFontPadding(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getFirstBaselineToTopHeight(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setLastBaselineToBottomHeightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getLastBaselineToBottomHeight(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_initHtmlWithJavaUtilMap_(ASUITextViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static void ASUITextViewImpl_setLineSpacingMultiplierWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setLineSpacingExtraWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getLineSpacingMultiplier(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getLineSpacingExtra(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_getDigitString(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_getSignedChars(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_getDecimalChars(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setNumericWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDigitsWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(ASUITextViewImpl *self, NSString *type, ADDrawable *dr);

__attribute__((unused)) static void ASUITextViewImpl_handleHtmlTextWithNSString_(ASUITextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetTextWithNSString_(ASUITextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetHtmlTextWithId_(ASUITextViewImpl *self, id text);

__attribute__((unused)) static id ASUITextViewImpl_getMyText(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getTextSize(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setMyTextSizeWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetTextSizeWithInt_(ASUITextViewImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewImpl_setVerticalAligmentCenter(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setVerticalAligmentBottom(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setVerticalAligmentTop(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setHorizontalAligmentCenter(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setHorizontalAligmentRight(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setHorizontalAligmentRightInternal(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setHorizontalAligmentLeft(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setHorizontalAligmentLeftInternal(ASUITextViewImpl *self);

__attribute__((unused)) static jint ASUITextViewImpl_getTextAlignment(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetVerticalAligmentBottom(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetVerticalAligmentTop(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetVerticalAligmentCenter(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setDrawablePaddingWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableBottomWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableTopWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableRightWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableRightInternalWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableLeftWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableLeftInternalWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue);

__attribute__((unused)) static jint ASUITextViewImpl_getImageHeightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static jint ASUITextViewImpl_getImageWidthWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getDrawablePadding(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableTintModeWithId_(ASUITextViewImpl *self, id value);

__attribute__((unused)) static void ASUITextViewImpl_setDrawableTintWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static jint ASUITextViewImpl_nativeGetFontSize(ASUITextViewImpl *self);

__attribute__((unused)) static jint ASUITextViewImpl_nativeGetFontStyle(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASUITextViewImpl *self, jint height, ASFontDescriptor *fontDescriptor);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetFontStyleWithInt_(ASUITextViewImpl *self, jint style);

__attribute__((unused)) static void ASUITextViewImpl_setTextColorWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getTextColorState(ASUITextViewImpl *self);

__attribute__((unused)) static jint ASUITextViewImpl_getLineHeight(ASUITextViewImpl *self);

__attribute__((unused)) static jint ASUITextViewImpl_getBorderWidth(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getPaddingEnd(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getPaddingStart(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setPaddingVerticalWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setPaddingHorizontalWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setPaddingEndWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setPaddingStartWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setPaddingWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetPaddingBottomWithInt_(ASUITextViewImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetPaddingLeftWithInt_(ASUITextViewImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetPaddingRightWithInt_(ASUITextViewImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetPaddingTopWithInt_(ASUITextViewImpl *self, jint value);

__attribute__((unused)) static void ASUITextViewImpl_adjustContentSizeWithInt_withInt_(ASUITextViewImpl *self, jint width, jint height);

__attribute__((unused)) static jboolean ASUITextViewImpl_isContentOffsetCorrectionNeededWithId_(ASUITextViewImpl *self, id view);

__attribute__((unused)) static void ASUITextViewImpl_setContentOffsetWithInt_withId_(ASUITextViewImpl *self, jint topCorrect, id view);

__attribute__((unused)) static void ASUITextViewImpl_setTextColorHighlightWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getTextColorHighlight(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeTriggerChangeHandlersWithNSString_(ASUITextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(ASUITextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewImpl_setCursorVisibleWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_nativeGetTintColorWithBoolean_(ASUITextViewImpl *self, jboolean clearColor);

__attribute__((unused)) static void ASUITextViewImpl_setCapitalizeWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetCapitalizeWithInt_(ASUITextViewImpl *self, jint capitalizeType);

__attribute__((unused)) static void ASUITextViewImpl_setAutoTextWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetCorrectionTypeWithInt_(ASUITextViewImpl *self, jint capitalizeType);

__attribute__((unused)) static jboolean ASUITextViewImpl_getCursorVisible(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setMaxLengthWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static IOSObjectArray *ASUITextViewImpl_getDigitStrings(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(ASUITextViewImpl *self, NSString *defaultSymbol, NSString *key);

__attribute__((unused)) static NSString *ASUITextViewImpl_getPlusString(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_getMinusString(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_getDecimalCharacter(ASUITextViewImpl *self);

__attribute__((unused)) static jboolean ASUITextViewImpl_numericPatternMatchesWithNSString_(ASUITextViewImpl *self, NSString *str);

__attribute__((unused)) static void ASUITextViewImpl_removeNumericListener(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(ASUITextViewImpl *self, JavaUtilRegexPattern *pattern);

__attribute__((unused)) static void ASUITextViewImpl_setPhoneNumberWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetPhoneNumberWithBoolean_(ASUITextViewImpl *self, jboolean value);

__attribute__((unused)) static id ASUITextViewImpl_getFont(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setInputTypeWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetKeyboardTypeWithInt_(ASUITextViewImpl *self, jint value);

__attribute__((unused)) static id ASUITextViewImpl_getInputType(ASUITextViewImpl *self);

__attribute__((unused)) static jint ASUITextViewImpl_nativeGetKeyboardType(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setImeOptionsWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetImeOptionsWithInt_(ASUITextViewImpl *self, jint imeOptions);

__attribute__((unused)) static jint ASUITextViewImpl_nativeGetImeOptions(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getImeOptions(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setOnEditorActionWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setOnEditorActionListener(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setInputAccessoryViewDoneButtonWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(ASUITextViewImpl *self, NSString *title);

__attribute__((unused)) static void ASUITextViewImpl_setOnFocusWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_sendPressStartEvent(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_sendPressEndEvent(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setSelectAllOnFocusWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setSelectAllWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static jboolean ASUITextViewImpl_isFirstResponder(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_becomeFirstResponder(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetSelectAllWithFloat_(ASUITextViewImpl *self, jfloat delay);

__attribute__((unused)) static void ASUITextViewImpl_setSingleLineWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getSingleLine(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setScrollHorizontallyWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeAddTapGesture(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(ASUITextViewImpl *self, id scrollView, jboolean scrollEnabled);

__attribute__((unused)) static void ASUITextViewImpl_setTextColorLinkWithADColorStateList_(ASUITextViewImpl *self, ADColorStateList *linkTextColors);

__attribute__((unused)) static void ASUITextViewImpl_handleOnBeforeTextChangeWithNSString_withInt_withInt_withInt_(ASUITextViewImpl *self, NSString *s, jint start, jint count, jint after);

__attribute__((unused)) static void ASUITextViewImpl_handleOnAfterTextChange(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_handleOnTextChange(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setOnAfterTextChangeWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setBeforeOnTextChangeWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setOnTextChangeWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setTextAllCapsWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_forceRedraw(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(ASUITextViewImpl *self, id uiView, jint contentWidth, jint height);

__attribute__((unused)) static void ASUITextViewImpl_remeasure(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_updateScrollViewContentOffset(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setInputViewWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setNativeInputViewWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setPickerView(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setDatePicker(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setErrorWithNSString_(ASUITextViewImpl *self, NSString *message);

__attribute__((unused)) static void ASUITextViewImpl_setHintTextFormatWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_createSimpleWrapableView(ASUITextViewImpl *self);

__attribute__((unused)) static jboolean ASUITextViewImpl_hasScrollView(ASUITextViewImpl *self);

__attribute__((unused)) static jboolean ASUITextViewImpl_isViewWrapped(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASUITextViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASUITextViewImpl_invalidateWrapViewHolder(ASUITextViewImpl *self);

__attribute__((unused)) static id ASUITextViewImpl_getScrollView(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeCreateWithJavaUtilMap_(ASUITextViewImpl *self, id<JavaUtilMap> params);

__attribute__((unused)) static id ASUITextViewImpl_nativeCreateViewWithInt_(ASUITextViewImpl *self, jint viewType);

__attribute__((unused)) static void ASUITextViewImpl_createPlaceHolderWithNSString_(ASUITextViewImpl *self, NSString *text);

__attribute__((unused)) static void ASUITextViewImpl_updatePlaceHolderVisibility(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_syncPlaceholderLabel(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setHintWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_setHintColorWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static id ASUITextViewImpl_getHint(ASUITextViewImpl *self);

__attribute__((unused)) static NSString *ASUITextViewImpl_nativeGetHint(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetHintColorWithId_(ASUITextViewImpl *self, id objValue);

__attribute__((unused)) static void ASUITextViewImpl_updateBoundsWithInt_withInt_withId_withId_(ASUITextViewImpl *self, jint topPadding, jint bottomPadding, id parent, id child);

__attribute__((unused)) static void ASUITextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUITextViewImpl *self, jint l, jint t, jint r, jint b);

__attribute__((unused)) static void ASUITextViewImpl_addMinMaxListener(ASUITextViewImpl *self);

__attribute__((unused)) static jboolean ASUITextViewImpl_isEllipsized(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetEnabledWithBoolean_(ASUITextViewImpl *self, jboolean isEnabled);

__attribute__((unused)) static id ASUITextViewImpl_getEllipsize(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetMaxLinesWithInt_(ASUITextViewImpl *self, jint lines);

__attribute__((unused)) static void ASUITextViewImpl_setEllipsizeWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetLineBreakModeWithInt_(ASUITextViewImpl *self, jint lineBreakMode);

__attribute__((unused)) static jint ASUITextViewImpl_nativeGetLineBreakMode(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_setLineSpacing(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_nativeSetLayoutManagerDelegate(ASUITextViewImpl *self);

__attribute__((unused)) static void ASUITextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASUITextViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator);

__attribute__((unused)) static void ASUITextViewImpl_nativeAddTextFieldDidChange(ASUITextViewImpl *self);

@interface ASUITextViewImpl_InputView () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_InputView, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_DrawableTintMode () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_DrawableTintMode, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_Font () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_Font, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_TextStyle () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_TextStyle, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_Capitalize () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_Capitalize, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_Numeric () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_Numeric, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_InputType () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_InputType, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_ImeOptions () {
 @public
  id<JavaUtilMap> mapping_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_ImeOptions, mapping_, id<JavaUtilMap>)

@interface ASUITextViewImpl_UITextViewExt () {
 @public
  __unsafe_unretained ASUITextViewImpl *this$0_;
  ASMeasureEvent *measureFinished_;
  ASOnLayoutEvent *onLayoutEvent_;
}

@end

J2OBJC_FIELD_SETTER(ASUITextViewImpl_UITextViewExt, measureFinished_, ASMeasureEvent *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_UITextViewExt, onLayoutEvent_, ASOnLayoutEvent *)

@interface ASUITextViewImpl_OnEditorActionListener : NSObject < ADTextView_OnEditorActionListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (jboolean)onEditorActionWithADTextView:(ADTextView *)v
                                 withInt:(jint)actionId
                          withADKeyEvent:(ADKeyEvent *)event;

- (id<JavaUtilMap>)getOnEditorActionEventObjWithADTextView:(ADTextView *)v
                                                   withInt:(jint)actionId
                                            withADKeyEvent:(ADKeyEvent *)event;

@end

J2OBJC_EMPTY_STATIC_INIT(ASUITextViewImpl_OnEditorActionListener)

J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnEditorActionListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnEditorActionListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnEditorActionListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnEditorActionListener, action_, NSString *)

__attribute__((unused)) static void ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(ASUITextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASUITextViewImpl_OnEditorActionListener *new_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewImpl_OnEditorActionListener *create_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(ASUITextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASUITextViewImpl_OnEditorActionListener *new_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewImpl_OnEditorActionListener *create_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASUITextViewImpl_OnEditorActionListener)

@interface ASUITextViewImpl_OnFocusChangeListener : NSObject < ADView_OnFocusChangeListener, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)onFocusChangeWithADView:(ADView *)v
                    withBoolean:(jboolean)hasFocus;

- (id<JavaUtilMap>)getOnFocusChangeEventObjWithADView:(ADView *)v
                                          withBoolean:(jboolean)hasFocus;

@end

J2OBJC_EMPTY_STATIC_INIT(ASUITextViewImpl_OnFocusChangeListener)

J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnFocusChangeListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnFocusChangeListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnFocusChangeListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_OnFocusChangeListener, action_, NSString *)

__attribute__((unused)) static void ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(ASUITextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASUITextViewImpl_OnFocusChangeListener *new_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewImpl_OnFocusChangeListener *create_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(ASUITextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASUITextViewImpl_OnFocusChangeListener *new_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewImpl_OnFocusChangeListener *create_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASUITextViewImpl_OnFocusChangeListener)

@interface ASUITextViewImpl_TextChangedListener : NSObject < ADTextWatcher, ASIListener > {
 @public
  id<ASIWidget> w_;
  ADView *view_;
  NSString *strValue_;
  NSString *action_;
}

- (NSString *)getAction;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue;

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action;

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s;

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after;

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count;

- (id<JavaUtilMap>)getOnTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                           withInt:(jint)start
                                                           withInt:(jint)before
                                                           withInt:(jint)count;

- (id<JavaUtilMap>)getOnbeforeTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                                 withInt:(jint)start
                                                                 withInt:(jint)count
                                                                 withInt:(jint)after;

- (id<JavaUtilMap>)getOnafterTextChangeEventObjWithADEditable:(id<ADEditable>)s;

@end

J2OBJC_EMPTY_STATIC_INIT(ASUITextViewImpl_TextChangedListener)

J2OBJC_FIELD_SETTER(ASUITextViewImpl_TextChangedListener, w_, id<ASIWidget>)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_TextChangedListener, view_, ADView *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_TextChangedListener, strValue_, NSString *)
J2OBJC_FIELD_SETTER(ASUITextViewImpl_TextChangedListener, action_, NSString *)

__attribute__((unused)) static void ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(ASUITextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static ASUITextViewImpl_TextChangedListener *new_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewImpl_TextChangedListener *create_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue);

__attribute__((unused)) static void ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(ASUITextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action);

__attribute__((unused)) static ASUITextViewImpl_TextChangedListener *new_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) NS_RETURNS_RETAINED;

__attribute__((unused)) static ASUITextViewImpl_TextChangedListener *create_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action);

J2OBJC_TYPE_LITERAL_HEADER(ASUITextViewImpl_TextChangedListener)

@interface ASUITextViewImpl_UITextViewCommandBuilder () {
 @public
  ASUITextViewImpl *this$0_;
}

@end

@interface ASUITextViewImpl_UITextViewBean () {
 @public
  ASUITextViewImpl *this$0_;
}

@end

J2OBJC_INITIALIZED_DEFN(ASUITextViewImpl)

NSString *ASUITextViewImpl_LOCAL_NAME = @"UITextView";
NSString *ASUITextViewImpl_GROUP_NAME = @"EditText";

@implementation ASUITextViewImpl

@synthesize uiView = uiView_;

- (void)loadAttributesWithNSString:(NSString *)attributeName {
  ASViewImpl_register__WithNSString_(attributeName);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosText"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosTextColor"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosUsesStandardTextScaling"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsEditable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosAllowsEditingTextAttributes"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosClearsOnInsertion"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosIsSelectable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textIsSelectable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"text"])) withTypeWithNSString:@"resourcestring"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"gravity"])) withTypeWithNSString:@"gravity"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textSize"])) withTypeWithNSString:@"dimensionsp"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lineSpacingExtra"])) withTypeWithNSString:@"dimensionfloat"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lineSpacingMultiplier"])) withTypeWithNSString:@"float"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHint"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hint"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:900])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onEditorAction"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onFocusChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onbeforeTextChange"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"onafterTextChange"])) withTypeWithNSString:@"string"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.inputView", new_ASUITextViewImpl_InputView_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInputView"])) withTypeWithNSString:@"UITextView.inputView"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"hintTextFormat"])) withTypeWithNSString:@"resourcestring"])) withOrderWithInt:-1]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"padding"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingBottom"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingRight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingLeft"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingStart"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingEnd"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingTop"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingHorizontal"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"paddingVertical"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableLeft"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableStart"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableRight"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableEnd"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTop"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableBottom"])) withTypeWithNSString:@"drawable"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT_N_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawablePadding"])) withTypeWithNSString:@"dimension"])) withOrderWithInt:1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTint"])) withTypeWithNSString:@"colorstate"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.drawableTintMode", new_ASUITextViewImpl_DrawableTintMode_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"drawableTintMode"])) withTypeWithNSString:@"UITextView.drawableTintMode"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_INVALIDATE]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"enabled"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColorHighlight"])) withTypeWithNSString:@"color"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLines"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxWidth"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxHeight"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"height"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"width"])) withTypeWithNSString:@"dimension"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"minEms"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"ems"])) withTypeWithNSString:@"int"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"editable"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"maxLength"])) withTypeWithNSString:@"int"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.font", new_ASUITextViewImpl_Font_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"typeface"])) withTypeWithNSString:@"UITextView.font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.textStyle", new_ASUITextViewImpl_TextStyle_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textStyle"])) withTypeWithNSString:@"UITextView.textStyle"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"fontFamily"])) withTypeWithNSString:@"font"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"autoText"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.capitalize", new_ASUITextViewImpl_Capitalize_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"capitalize"])) withTypeWithNSString:@"UITextView.capitalize"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"cursorVisible"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.numeric", new_ASUITextViewImpl_Numeric_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"numeric"])) withTypeWithNSString:@"UITextView.numeric"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"digits"])) withTypeWithNSString:@"string"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"phoneNumber"])) withTypeWithNSString:@"boolean"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.inputType", new_ASUITextViewImpl_InputType_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"inputType"])) withTypeWithNSString:@"UITextView.inputType"]);
  ASConverterFactory_register__WithNSString_withASIConverter_(@"UITextView.imeOptions", new_ASUITextViewImpl_ImeOptions_init());
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"imeOptions"])) withTypeWithNSString:@"UITextView.imeOptions"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectAllOnFocus"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"selectAll"])) withTypeWithNSString:@"boolean"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"scrollHorizontally"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"singleLine"])) withTypeWithNSString:@"boolean"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"iosInputAccessoryViewDoneButton"])) withTypeWithNSString:@"resourcestring"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textColor"])) withTypeWithNSString:@"colorstate"]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"textAllCaps"])) withTypeWithNSString:@"boolean"])) withOrderWithInt:-1])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"firstBaselineToTopHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
  ASWidgetFactory_registerAttributeWithNSString_withASWidgetAttribute_Builder_(localName_, [((ASWidgetAttribute_Builder *) nil_chk([((ASWidgetAttribute_Builder *) nil_chk([new_ASWidgetAttribute_Builder_init() withNameWithNSString:@"lastBaselineToBottomHeight"])) withTypeWithNSString:@"dimension"])) withUiFlagWithInt:ASIWidget_UPDATE_UI_REQUEST_LAYOUT]);
}

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [((ASUITextViewImpl_UITextViewExt *) nil_chk(((ASUITextViewImpl_UITextViewExt *) cast_chk(measurableTextView_, [ASUITextViewImpl_UITextViewExt class])))) updateMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASIWidget>)newInstance {
  return new_ASUITextViewImpl_init();
}

- (void)createWithASIFragment:(id<ASIFragment>)fragment
              withJavaUtilMap:(id<JavaUtilMap>)params {
  [super createWithASIFragment:fragment withJavaUtilMap:params];
  measurableTextView_ = new_ASUITextViewImpl_UITextViewExt_initWithASUITextViewImpl_(self);
  ASUITextViewImpl_createSimpleWrapableView(self);
  ASUITextViewImpl_nativeCreateWithJavaUtilMap_(self, params);
  ASViewImpl_registerCommandConveterWithASIWidget_(self);
  ASUITextViewImpl_setWidgetOnNativeClass(self);
}

- (void)setWidgetOnNativeClass {
  ASUITextViewImpl_setWidgetOnNativeClass(self);
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue
                withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  ASViewImpl_setAttributeWithASIWidget_withASSimpleWrapableView_withASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, simpleWrapableView_, key, strValue, objValue, decorator);
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"iosUsesStandardTextScaling", @"iosIsEditable", @"iosAllowsEditingTextAttributes", @"iosClearsOnInsertion", @"textIsSelectable", @"iosIsSelectable", @"text", @"gravity", @"textSize", @"lineSpacingExtra", @"lineSpacingMultiplier", @"textColorHint", @"hint", @"onEditorAction", @"onFocusChange", @"onTextChange", @"onbeforeTextChange", @"onafterTextChange", @"iosInputView", @"hintTextFormat", @"padding", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"paddingHorizontal", @"paddingVertical", @"drawableLeft", @"drawableStart", @"drawableRight", @"drawableEnd", @"drawableTop", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode", @"enabled", @"textColorHighlight", @"minLines", @"lines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"ems", @"editable", @"maxLength", @"typeface", @"textStyle", @"fontFamily", @"autoText", @"capitalize", @"cursorVisible", @"numeric", @"digits", @"phoneNumber", @"inputType", @"imeOptions", @"selectAllOnFocus", @"selectAll", @"scrollHorizontally", @"singleLine", @"iosInputAccessoryViewDoneButton", @"textColor", @"textAllCaps", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight" }, 76)) {
    case 0:
    {
      [self setTextWithId:nativeWidget withId:objValue];
    }
    break;
    case 1:
    {
      [self setTextColorWithId:nativeWidget withId:objValue];
    }
    break;
    case 2:
    {
      if ([self checkIosVersionWithNSString:@"13.0"]) {
        [self setUsesStandardTextScalingWithId:nativeWidget withId:objValue];
      }
    }
    break;
    case 3:
    {
      [self setIsEditableWithId:nativeWidget withId:objValue];
    }
    break;
    case 4:
    {
      [self setAllowsEditingTextAttributesWithId:nativeWidget withId:objValue];
    }
    break;
    case 5:
    {
      [self setClearsOnInsertionWithId:nativeWidget withId:objValue];
    }
    break;
    case 6:
    case 7:
    {
      [self setIsSelectableWithId:nativeWidget withId:objValue];
    }
    break;
    case 8:
    {
      [self setMyTextWithId:objValue];
    }
    break;
    case 9:
    {
      ASUITextViewImpl_setGravityWithId_(self, objValue);
    }
    break;
    case 10:
    {
      ASUITextViewImpl_setMyTextSizeWithId_(self, objValue);
    }
    break;
    case 11:
    {
      ASUITextViewImpl_setLineSpacingExtraWithId_(self, objValue);
    }
    break;
    case 12:
    {
      ASUITextViewImpl_setLineSpacingMultiplierWithId_(self, objValue);
    }
    break;
    case 13:
    {
      ASUITextViewImpl_setHintColorWithId_(self, objValue);
    }
    break;
    case 14:
    {
      ASUITextViewImpl_setHintWithId_(self, objValue);
    }
    break;
    case 15:
    {
      ASUITextViewImpl_setOnEditorActionWithId_(self, objValue);
    }
    break;
    case 16:
    {
      ASUITextViewImpl_setOnFocusWithId_(self, objValue);
    }
    break;
    case 17:
    {
      ASUITextViewImpl_setOnTextChangeWithId_(self, objValue);
    }
    break;
    case 18:
    {
      ASUITextViewImpl_setBeforeOnTextChangeWithId_(self, objValue);
    }
    break;
    case 19:
    {
      ASUITextViewImpl_setOnAfterTextChangeWithId_(self, objValue);
    }
    break;
    case 20:
    {
      ASUITextViewImpl_setInputViewWithId_(self, objValue);
    }
    break;
    case 21:
    {
      ASUITextViewImpl_setHintTextFormatWithId_(self, objValue);
    }
    break;
    case 22:
    {
      ASUITextViewImpl_setPaddingWithId_(self, objValue);
    }
    break;
    case 23:
    {
      [self setPaddingBottomWithId:objValue];
    }
    break;
    case 24:
    {
      [self setPaddingRightWithId:objValue];
    }
    break;
    case 25:
    {
      [self setPaddingLeftWithId:objValue];
    }
    break;
    case 26:
    {
      ASUITextViewImpl_setPaddingStartWithId_(self, objValue);
    }
    break;
    case 27:
    {
      ASUITextViewImpl_setPaddingEndWithId_(self, objValue);
    }
    break;
    case 28:
    {
      [self setPaddingTopWithId:objValue];
    }
    break;
    case 29:
    {
      ASUITextViewImpl_setPaddingHorizontalWithId_(self, objValue);
    }
    break;
    case 30:
    {
      ASUITextViewImpl_setPaddingVerticalWithId_(self, objValue);
    }
    break;
    case 31:
    {
      ASUITextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", objValue);
    }
    break;
    case 32:
    {
      ASUITextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableStart", objValue);
    }
    break;
    case 33:
    {
      ASUITextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", objValue);
    }
    break;
    case 34:
    {
      ASUITextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableEnd", objValue);
    }
    break;
    case 35:
    {
      ASUITextViewImpl_setDrawableTopWithId_(self, objValue);
    }
    break;
    case 36:
    {
      ASUITextViewImpl_setDrawableBottomWithId_(self, objValue);
    }
    break;
    case 37:
    {
      ASUITextViewImpl_setDrawablePaddingWithId_(self, objValue);
    }
    break;
    case 38:
    {
      ASUITextViewImpl_setDrawableTintWithId_(self, objValue);
    }
    break;
    case 39:
    {
      ASUITextViewImpl_setDrawableTintModeWithId_(self, objValue);
    }
    break;
    case 40:
    {
      [self setEnabledWithId:objValue];
    }
    break;
    case 41:
    {
      ASUITextViewImpl_setTextColorHighlightWithId_(self, objValue);
    }
    break;
    case 42:
    {
      ASUITextViewImpl_setMinLinesWithId_(self, objValue);
    }
    break;
    case 43:
    {
      ASUITextViewImpl_setLinesWithId_(self, objValue);
    }
    break;
    case 44:
    {
      ASUITextViewImpl_setMaxLinesWithId_(self, objValue);
    }
    break;
    case 45:
    {
      ASUITextViewImpl_setMinWidthWithId_(self, objValue);
    }
    break;
    case 46:
    {
      ASUITextViewImpl_setMinHeightWithId_(self, objValue);
    }
    break;
    case 47:
    {
      ASUITextViewImpl_setMaxWidthWithId_(self, objValue);
    }
    break;
    case 48:
    {
      ASUITextViewImpl_setMaxHeightWithId_(self, objValue);
    }
    break;
    case 49:
    {
      ASUITextViewImpl_setHeightWithId_(self, objValue);
    }
    break;
    case 50:
    {
      ASUITextViewImpl_setWidthWithId_(self, objValue);
    }
    break;
    case 51:
    {
      ASUITextViewImpl_setMaxEmsWithId_(self, objValue);
    }
    break;
    case 52:
    {
      ASUITextViewImpl_setMinEmsWithId_(self, objValue);
    }
    break;
    case 53:
    {
      ASUITextViewImpl_setEmsWithId_(self, objValue);
    }
    break;
    case 54:
    {
      [self setEnabledWithId:objValue];
    }
    break;
    case 55:
    {
      ASUITextViewImpl_setMaxLengthWithId_(self, objValue);
    }
    break;
    case 56:
    {
      ASUITextViewImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 57:
    {
      ASUITextViewImpl_setTextStyleWithId_(self, objValue);
    }
    break;
    case 58:
    {
      ASUITextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 59:
    {
      ASUITextViewImpl_setAutoTextWithId_(self, objValue);
    }
    break;
    case 60:
    {
      ASUITextViewImpl_setCapitalizeWithId_(self, objValue);
    }
    break;
    case 61:
    {
      ASUITextViewImpl_setCursorVisibleWithId_(self, objValue);
    }
    break;
    case 62:
    {
      ASUITextViewImpl_setNumericWithId_(self, objValue);
    }
    break;
    case 63:
    {
      ASUITextViewImpl_setDigitsWithId_(self, objValue);
    }
    break;
    case 64:
    {
      ASUITextViewImpl_setPhoneNumberWithId_(self, objValue);
    }
    break;
    case 65:
    {
      ASUITextViewImpl_setInputTypeWithId_(self, objValue);
    }
    break;
    case 66:
    {
      ASUITextViewImpl_setImeOptionsWithId_withNSString_(self, objValue, strValue);
    }
    break;
    case 67:
    {
      ASUITextViewImpl_setSelectAllOnFocusWithId_(self, objValue);
    }
    break;
    case 68:
    {
      ASUITextViewImpl_setSelectAllWithId_(self, objValue);
    }
    break;
    case 69:
    {
      ASUITextViewImpl_setScrollHorizontallyWithId_(self, objValue);
    }
    break;
    case 70:
    {
      ASUITextViewImpl_setSingleLineWithId_(self, objValue);
    }
    break;
    case 71:
    {
      ASUITextViewImpl_setInputAccessoryViewDoneButtonWithId_(self, objValue);
    }
    break;
    case 72:
    {
      ASUITextViewImpl_setTextColorWithId_(self, objValue);
    }
    break;
    case 73:
    {
      ASUITextViewImpl_setTextAllCapsWithId_(self, objValue);
    }
    break;
    case 74:
    {
      ASUITextViewImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
    }
    break;
    case 75:
    {
      ASUITextViewImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
    }
    break;
    default:
    break;
  }
  ASUITextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
              withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  id nativeWidget = [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView];
  id attributeValue = ASViewImpl_getAttributeWithASIWidget_withId_withASWidgetAttribute_withASILifeCycleDecorator_(self, nativeWidget, key, decorator);
  if (attributeValue != nil) {
    return attributeValue;
  }
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"iosText", @"iosTextColor", @"iosUsesStandardTextScaling", @"iosIsEditable", @"iosAllowsEditingTextAttributes", @"iosClearsOnInsertion", @"textIsSelectable", @"iosIsSelectable", @"text", @"gravity", @"textSize", @"lineSpacingExtra", @"lineSpacingMultiplier", @"hint", @"paddingBottom", @"paddingRight", @"paddingLeft", @"paddingStart", @"paddingEnd", @"paddingTop", @"drawablePadding", @"textColorHighlight", @"minLines", @"maxLines", @"minWidth", @"minHeight", @"maxWidth", @"maxHeight", @"height", @"width", @"maxEms", @"minEms", @"cursorVisible", @"inputType", @"imeOptions", @"textColor", @"firstBaselineToTopHeight", @"lastBaselineToBottomHeight" }, 38)) {
    case 0:
    {
      return [self getText];
    }
    case 1:
    {
      return [self getTextColor];
    }
    case 2:
    {
      if ([self checkIosVersionWithNSString:@"13.0"]) {
        return [self getUsesStandardTextScaling];
      }
      break;
    }
    case 3:
    {
      return [self getIsEditable];
    }
    case 4:
    {
      return [self getAllowsEditingTextAttributes];
    }
    case 5:
    {
      return [self getClearsOnInsertion];
    }
    case 6:
    case 7:
    {
      return [self getIsSelectable];
    }
    case 8:
    {
      return ASUITextViewImpl_getMyText(self);
    }
    case 9:
    {
      return ASUITextViewImpl_getGravity(self);
    }
    case 10:
    {
      return ASUITextViewImpl_getTextSize(self);
    }
    case 11:
    {
      return ASUITextViewImpl_getLineSpacingExtra(self);
    }
    case 12:
    {
      return ASUITextViewImpl_getLineSpacingMultiplier(self);
    }
    case 13:
    {
      return ASUITextViewImpl_getHint(self);
    }
    case 14:
    {
      return [self getPaddingBottom];
    }
    case 15:
    {
      return [self getPaddingRight];
    }
    case 16:
    {
      return [self getPaddingLeft];
    }
    case 17:
    {
      return ASUITextViewImpl_getPaddingStart(self);
    }
    case 18:
    {
      return ASUITextViewImpl_getPaddingEnd(self);
    }
    case 19:
    {
      return [self getPaddingTop];
    }
    case 20:
    {
      return ASUITextViewImpl_getDrawablePadding(self);
    }
    case 21:
    {
      return ASUITextViewImpl_getTextColorHighlight(self);
    }
    case 22:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinLines]);
    }
    case 23:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxLines]);
    }
    case 24:
    {
      return ASUITextViewImpl_getMinWidth(self);
    }
    case 25:
    {
      return ASUITextViewImpl_getMinHeight(self);
    }
    case 26:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxWidth]);
    }
    case 27:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxHeight]);
    }
    case 28:
    {
      return JavaLangInteger_valueOfWithInt_(ASUITextViewImpl_getHeight(self));
    }
    case 29:
    {
      return ASUITextViewImpl_getWidth(self);
    }
    case 30:
    {
      return JavaLangInteger_valueOfWithInt_([self getMaxEms]);
    }
    case 31:
    {
      return JavaLangInteger_valueOfWithInt_([self getMinEms]);
    }
    case 32:
    {
      return JavaLangBoolean_valueOfWithBoolean_(ASUITextViewImpl_getCursorVisible(self));
    }
    case 33:
    {
      return ASUITextViewImpl_getInputType(self);
    }
    case 34:
    {
      return ASUITextViewImpl_getImeOptions(self);
    }
    case 35:
    {
      return ASUITextViewImpl_getTextColorState(self);
    }
    case 36:
    {
      return ASUITextViewImpl_getFirstBaselineToTopHeight(self);
    }
    case 37:
    {
      return ASUITextViewImpl_getLastBaselineToBottomHeight(self);
    }
  }
  return nil;
}

- (id)asWidget {
  return measurableTextView_;
}

- (void)setGravityWithId:(id)objValue {
  ASUITextViewImpl_setGravityWithId_(self, objValue);
}

- (void)updateTextAlignment {
  ASUITextViewImpl_updateTextAlignment(self);
}

- (id)getGravity {
  return ASUITextViewImpl_getGravity(self);
}

- (void)onRtlPropertiesChangedWithInt:(jint)layoutDirection {
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRawTextAlignment] != 0 || [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRawLayoutDirection] != 0) {
    ASUITextViewImpl_updateTextAlignment(self);
  }
}

- (id)getMinHeight {
  return ASUITextViewImpl_getMinHeight(self);
}

- (id)getMinWidth {
  return ASUITextViewImpl_getMinWidth(self);
}

- (void)setEmsWithId:(id)objValue {
  ASUITextViewImpl_setEmsWithId_(self, objValue);
}

- (jint)getMaxEms {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxEms];
}

- (jint)getMinEms {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMinEms];
}

- (void)setMinEmsWithId:(id)objValue {
  ASUITextViewImpl_setMinEmsWithId_(self, objValue);
}

- (jint)getMinLines {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMinLines];
}

- (jint)getMaxLines {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxLines];
}

- (void)setMaxEmsWithId:(id)objValue {
  ASUITextViewImpl_setMaxEmsWithId_(self, objValue);
}

- (void)setWidthWithId:(id)objValue {
  ASUITextViewImpl_setWidthWithId_(self, objValue);
}

- (void)setHeightWithId:(id)objValue {
  ASUITextViewImpl_setHeightWithId_(self, objValue);
}

- (void)setMaxLinesWithId:(id)objValue {
  ASUITextViewImpl_setMaxLinesWithId_(self, objValue);
}

- (void)setLinesWithId:(id)objValue {
  ASUITextViewImpl_setLinesWithId_(self, objValue);
}

- (void)setMinLinesWithId:(id)objValue {
  ASUITextViewImpl_setMinLinesWithId_(self, objValue);
}

- (void)setMaxHeightWithId:(id)objValue {
  ASUITextViewImpl_setMaxHeightWithId_(self, objValue);
}

- (void)setMaxWidthWithId:(id)objValue {
  ASUITextViewImpl_setMaxWidthWithId_(self, objValue);
}

- (jint)getMaxWidth {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxWidth];
}

- (jint)getMaxHeight {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getMaxHeight];
}

- (void)setMinHeightWithId:(id)objValue {
  ASUITextViewImpl_setMinHeightWithId_(self, objValue);
}

- (void)setMinWidthWithId:(id)objValue {
  ASUITextViewImpl_setMinWidthWithId_(self, objValue);
}

- (id)getWidth {
  return ASUITextViewImpl_getWidth(self);
}

- (jint)getHeight {
  return ASUITextViewImpl_getHeight(self);
}

- (void)setTypeFaceWithId:(id)objValue
             withNSString:(NSString *)strValue {
  ASUITextViewImpl_setTypeFaceWithId_withNSString_(self, objValue, strValue);
}

- (void)setFontFamilyWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASUITextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

- (void)setTextStyleWithId:(id)objValue {
  ASUITextViewImpl_setTextStyleWithId_(self, objValue);
}

- (void)setFirstBaselineToTopHeightWithId:(id)objValue {
  ASUITextViewImpl_setFirstBaselineToTopHeightWithId_(self, objValue);
}

- (jboolean)getIncludeFontPadding {
  return ASUITextViewImpl_getIncludeFontPadding(self);
}

- (id)getFirstBaselineToTopHeight {
  return ASUITextViewImpl_getFirstBaselineToTopHeight(self);
}

- (void)setLastBaselineToBottomHeightWithId:(id)objValue {
  ASUITextViewImpl_setLastBaselineToBottomHeightWithId_(self, objValue);
}

- (id)getLastBaselineToBottomHeight {
  return ASUITextViewImpl_getLastBaselineToBottomHeight(self);
}

- (void)initHtmlWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUITextViewImpl_initHtmlWithJavaUtilMap_(self, params);
}

- (void)setLineSpacingMultiplierWithId:(id)objValue {
  ASUITextViewImpl_setLineSpacingMultiplierWithId_(self, objValue);
}

- (void)setLineSpacingExtraWithId:(id)objValue {
  ASUITextViewImpl_setLineSpacingExtraWithId_(self, objValue);
}

- (id)getLineSpacingMultiplier {
  return ASUITextViewImpl_getLineSpacingMultiplier(self);
}

- (id)getLineSpacingExtra {
  return ASUITextViewImpl_getLineSpacingExtra(self);
}

- (NSString *)getDigitString {
  return ASUITextViewImpl_getDigitString(self);
}

- (NSString *)getSignedChars {
  return ASUITextViewImpl_getSignedChars(self);
}

- (NSString *)getDecimalChars {
  return ASUITextViewImpl_getDecimalChars(self);
}

- (void)setNumericWithId:(id)objValue {
  ASUITextViewImpl_setNumericWithId_(self, objValue);
}

- (void)setDigitsWithId:(id)objValue {
  ASUITextViewImpl_setDigitsWithId_(self, objValue);
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"bottom", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getBottomDrawable]);
  ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"left", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLeftDrawable]);
  ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"right", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getRightDrawable]);
  ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, @"top", [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTopDrawable]);
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getTextColors])) isStateful]) {
    ASUITextViewImpl_setTextColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCurrentTextColor]));
  }
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getHintTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getHintTextColors])) isStateful]) {
    ASUITextViewImpl_setHintColorWithId_(self, JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCurrentHintTextColor]));
    ASUITextViewImpl_syncPlaceholderLabel(self);
  }
  if (drawableTint_ != nil && [drawableTint_ isStateful]) {
    ASUITextViewImpl_setDrawableTintWithId_(self, drawableTint_);
    [self invalidate];
  }
  if ([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors] != nil && [((ADColorStateList *) nil_chk([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors])) isStateful]) {
    ASUITextViewImpl_setTextColorLinkWithADColorStateList_(self, [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getLinkTextColors]);
  }
}

- (void)drawableStateChangeWithNSString:(NSString *)type
                         withADDrawable:(ADDrawable *)dr {
  ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(self, type, dr);
}

- (void)handleHtmlTextWithNSString:(NSString *)text {
  ASUITextViewImpl_handleHtmlTextWithNSString_(self, text);
}

- (void)nativeSetTextWithNSString:(NSString *)text {
  ASUITextViewImpl_nativeSetTextWithNSString_(self, text);
}

- (void)nativeSetHtmlTextWithId:(id)text {
  ASUITextViewImpl_nativeSetHtmlTextWithId_(self, text);
}

- (id)getMyText {
  return ASUITextViewImpl_getMyText(self);
}

- (id)getTextSize {
  return ASUITextViewImpl_getTextSize(self);
}

- (void)setMyTextSizeWithId:(id)objValue {
  ASUITextViewImpl_setMyTextSizeWithId_(self, objValue);
}

- (void)nativeSetTextSizeWithInt:(jint)value {
  ASUITextViewImpl_nativeSetTextSizeWithInt_(self, value);
}

- (void)setVerticalAligmentCenter {
  ASUITextViewImpl_setVerticalAligmentCenter(self);
}

- (void)setVerticalAligmentBottom {
  ASUITextViewImpl_setVerticalAligmentBottom(self);
}

- (void)setVerticalAligmentTop {
  ASUITextViewImpl_setVerticalAligmentTop(self);
}

- (void)setHorizontalAligmentCenter {
  ASUITextViewImpl_setHorizontalAligmentCenter(self);
}

- (void)setHorizontalAligmentRight {
  ASUITextViewImpl_setHorizontalAligmentRight(self);
}

- (void)setHorizontalAligmentRightInternal {
  ASUITextViewImpl_setHorizontalAligmentRightInternal(self);
}

- (void)setHorizontalAligmentLeft {
  ASUITextViewImpl_setHorizontalAligmentLeft(self);
}

- (void)setHorizontalAligmentLeftInternal {
  ASUITextViewImpl_setHorizontalAligmentLeftInternal(self);
}

- (jint)getTextAlignment {
  return ASUITextViewImpl_getTextAlignment(self);
}

- (void)nativeSetVerticalAligmentBottom {
  ASUITextViewImpl_nativeSetVerticalAligmentBottom(self);
}

- (void)nativeSetVerticalAligmentTop {
  ASUITextViewImpl_nativeSetVerticalAligmentTop(self);
}

- (void)nativeSetVerticalAligmentCenter {
  ASUITextViewImpl_nativeSetVerticalAligmentCenter(self);
}

- (void)setDrawablePaddingWithId:(id)objValue {
  ASUITextViewImpl_setDrawablePaddingWithId_(self, objValue);
}

- (void)setDrawableBottomWithId:(id)objValue {
  ASUITextViewImpl_setDrawableBottomWithId_(self, objValue);
}

- (void)setDrawableTopWithId:(id)objValue {
  ASUITextViewImpl_setDrawableTopWithId_(self, objValue);
}

- (void)setDrawableRightWithNSString:(NSString *)originalAttr
                              withId:(id)objValue {
  ASUITextViewImpl_setDrawableRightWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableRightInternalWithNSString:(NSString *)originalAttr
                                      withId:(id)objValue {
  ASUITextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftWithNSString:(NSString *)originalAttr
                             withId:(id)objValue {
  ASUITextViewImpl_setDrawableLeftWithNSString_withId_(self, originalAttr, objValue);
}

- (void)setDrawableLeftInternalWithNSString:(NSString *)originalAttr
                                     withId:(id)objValue {
  ASUITextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
}

- (jint)getImageHeightWithId:(id)objValue {
  return ASUITextViewImpl_getImageHeightWithId_(self, objValue);
}

- (jint)getImageWidthWithId:(id)objValue {
  return ASUITextViewImpl_getImageWidthWithId_(self, objValue);
}

- (id)getDrawablePadding {
  return ASUITextViewImpl_getDrawablePadding(self);
}

- (void)setDrawableTintModeWithId:(id)value {
  ASUITextViewImpl_setDrawableTintModeWithId_(self, value);
}

- (void)setDrawableTintWithId:(id)objValue {
  ASUITextViewImpl_setDrawableTintWithId_(self, objValue);
}

- (jint)nativeGetFontSize {
  return ASUITextViewImpl_nativeGetFontSize(self);
}

- (jint)nativeGetFontStyle {
  return ASUITextViewImpl_nativeGetFontStyle(self);
}

- (void)nativeSetCustomFontWithInt:(jint)height
              withASFontDescriptor:(ASFontDescriptor *)fontDescriptor {
  ASUITextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

- (void)nativeSetFontStyleWithInt:(jint)style {
  ASUITextViewImpl_nativeSetFontStyleWithInt_(self, style);
}

- (void)setTextColorWithId:(id)objValue {
  ASUITextViewImpl_setTextColorWithId_(self, objValue);
}

- (id)getTextColorState {
  return ASUITextViewImpl_getTextColorState(self);
}

- (jint)getBorderPadding {
  return paddingTop_ + paddingBottom_;
}

- (jint)getLineHeightPadding {
  return 0;
}

- (jint)getLineHeight {
  return ASUITextViewImpl_getLineHeight(self);
}

- (jint)getBorderWidth {
  return ASUITextViewImpl_getBorderWidth(self);
}

- (id)getPaddingLeft {
  return JavaLangInteger_valueOfWithInt_(paddingLeft_);
}

- (void)setPaddingLeftWithId:(id)paddingLeft {
  self->paddingLeft_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingLeft, [JavaLangInteger class]))) intValue];
  ASUITextViewImpl_nativeSetPaddingLeftWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingLeft, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingLeft]);
}

- (id)getPaddingRight {
  return JavaLangInteger_valueOfWithInt_(paddingRight_);
}

- (void)setPaddingRightWithId:(id)paddingRight {
  self->paddingRight_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingRight, [JavaLangInteger class]))) intValue];
  ASUITextViewImpl_nativeSetPaddingRightWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingRight, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingRight]);
}

- (id)getPaddingTop {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingTop]);
  }
  return JavaLangInteger_valueOfWithInt_(paddingTop_);
}

- (void)setPaddingTopWithId:(id)paddingTop {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    ASViewImpl_setPaddingTopWithId_withADView_((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]), measurableTextView_);
  }
  else {
    self->paddingTop_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]))) intValue];
    ASUITextViewImpl_nativeSetPaddingTopWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingTop, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingTop]);
  }
}

- (id)getPaddingBottom {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(measurableTextView_)) getPaddingBottom]);
  }
  return JavaLangInteger_valueOfWithInt_(paddingBottom_);
}

- (id)getPaddingEnd {
  return ASUITextViewImpl_getPaddingEnd(self);
}

- (id)getPaddingStart {
  return ASUITextViewImpl_getPaddingStart(self);
}

- (void)setPaddingBottomWithId:(id)paddingBottom {
  if ([self hasFeatureWithNSString:@"enableFeatures" withNSString:@"cropToPadding"]) {
    ASViewImpl_setPaddingBottomWithId_withADView_((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]), measurableTextView_);
  }
  else {
    self->paddingBottom_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]))) intValue];
    ASUITextViewImpl_nativeSetPaddingBottomWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(paddingBottom, [JavaLangInteger class]))) intValue] + [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getCompoundPaddingBottom]);
  }
}

- (void)setPaddingVerticalWithId:(id)objValue {
  ASUITextViewImpl_setPaddingVerticalWithId_(self, objValue);
}

- (void)setPaddingHorizontalWithId:(id)objValue {
  ASUITextViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

- (void)setPaddingEndWithId:(id)objValue {
  ASUITextViewImpl_setPaddingEndWithId_(self, objValue);
}

- (void)setPaddingStartWithId:(id)objValue {
  ASUITextViewImpl_setPaddingStartWithId_(self, objValue);
}

- (void)setPaddingWithId:(id)objValue {
  ASUITextViewImpl_setPaddingWithId_(self, objValue);
}

- (void)updatePadding {
  [self setPaddingLeftWithId:JavaLangInteger_valueOfWithInt_(paddingLeft_)];
  [self setPaddingRightWithId:JavaLangInteger_valueOfWithInt_(paddingRight_)];
  [self setPaddingTopWithId:JavaLangInteger_valueOfWithInt_(paddingTop_)];
  [self setPaddingBottomWithId:JavaLangInteger_valueOfWithInt_(paddingBottom_)];
}

- (void)nativeSetPaddingBottomWithInt:(jint)value {
  ASUITextViewImpl_nativeSetPaddingBottomWithInt_(self, value);
}

- (void)nativeSetPaddingLeftWithInt:(jint)value {
  ASUITextViewImpl_nativeSetPaddingLeftWithInt_(self, value);
}

- (void)nativeSetPaddingRightWithInt:(jint)value {
  ASUITextViewImpl_nativeSetPaddingRightWithInt_(self, value);
}

- (void)nativeSetPaddingTopWithInt:(jint)value {
  ASUITextViewImpl_nativeSetPaddingTopWithInt_(self, value);
}

- (void)adjustContentSizeWithInt:(jint)width
                         withInt:(jint)height {
  ASUITextViewImpl_adjustContentSizeWithInt_withInt_(self, width, height);
}

- (jboolean)isContentOffsetCorrectionNeededWithId:(id)view {
  return ASUITextViewImpl_isContentOffsetCorrectionNeededWithId_(self, view);
}

- (void)setContentOffsetWithInt:(jint)topCorrect
                         withId:(id)view {
  ASUITextViewImpl_setContentOffsetWithInt_withId_(self, topCorrect, view);
}

- (void)setTextColorHighlightWithId:(id)objValue {
  ASUITextViewImpl_setTextColorHighlightWithId_(self, objValue);
}

- (id)getTextColorHighlight {
  return ASUITextViewImpl_getTextColorHighlight(self);
}

- (void)setMyTextWithId:(id)text {
  NSString *mytext = (NSString *) cast_chk(text, [NSString class]);
  if (maxLength_ != -1 && [((NSString *) nil_chk(mytext)) java_length] > maxLength_) {
    mytext = [((NSString *) nil_chk(mytext)) java_substring:0 endIndex:maxLength_];
  }
  if (textAllCaps_) {
    mytext = [((NSString *) nil_chk(mytext)) uppercaseString];
  }
  ASUITextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(self, (NSString *) cast_chk([self getText], [NSString class]));
  ASUITextViewImpl_nativeSetTextWithNSString_(self, mytext);
  ASUITextViewImpl_nativeTriggerChangeHandlersWithNSString_(self, (NSString *) cast_chk([self getText], [NSString class]));
}

- (void)nativeTriggerChangeHandlersWithNSString:(NSString *)text {
  ASUITextViewImpl_nativeTriggerChangeHandlersWithNSString_(self, text);
}

- (void)nativeTriggerBeforeChangeHandlersWithNSString:(NSString *)text {
  ASUITextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(self, text);
}

- (void)setCursorVisibleWithId:(id)objValue {
  ASUITextViewImpl_setCursorVisibleWithId_(self, objValue);
}

- (id)nativeGetTintColorWithBoolean:(jboolean)clearColor {
  return ASUITextViewImpl_nativeGetTintColorWithBoolean_(self, clearColor);
}

- (void)setCapitalizeWithId:(id)objValue {
  ASUITextViewImpl_setCapitalizeWithId_(self, objValue);
}

- (void)nativeSetCapitalizeWithInt:(jint)capitalizeType {
  ASUITextViewImpl_nativeSetCapitalizeWithInt_(self, capitalizeType);
}

- (void)setAutoTextWithId:(id)objValue {
  ASUITextViewImpl_setAutoTextWithId_(self, objValue);
}

- (void)nativeSetCorrectionTypeWithInt:(jint)capitalizeType {
  ASUITextViewImpl_nativeSetCorrectionTypeWithInt_(self, capitalizeType);
}

- (jboolean)getCursorVisible {
  return ASUITextViewImpl_getCursorVisible(self);
}

- (void)setMaxLengthWithId:(id)objValue {
  ASUITextViewImpl_setMaxLengthWithId_(self, objValue);
}

- (void)setEnabledWithId:(id)objValue {
  jboolean isEnabled = objValue != nil && [(JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]) booleanValue];
  ASUITextViewImpl_nativeSetEnabledWithBoolean_(self, isEnabled);
}

- (IOSObjectArray *)getDigitStrings {
  return ASUITextViewImpl_getDigitStrings(self);
}

- (NSString *)getLocaleValueFromRSWithNSString:(NSString *)defaultSymbol
                                  withNSString:(NSString *)key {
  return ASUITextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(self, defaultSymbol, key);
}

- (NSString *)getPlusString {
  return ASUITextViewImpl_getPlusString(self);
}

- (NSString *)getMinusString {
  return ASUITextViewImpl_getMinusString(self);
}

- (NSString *)getDecimalCharacter {
  return ASUITextViewImpl_getDecimalCharacter(self);
}

- (jboolean)numericPatternMatchesWithNSString:(NSString *)str {
  return ASUITextViewImpl_numericPatternMatchesWithNSString_(self, str);
}

- (void)removeNumericListener {
  ASUITextViewImpl_removeNumericListener(self);
}

- (void)addNumericListenerWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern {
  ASUITextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(self, pattern);
}

-(BOOL) checkIfInputIsValid:(NSString *)string :(NSRange) range{
  if (maxLength_ > 1) {
    return ((ASUITextView*) uiView_).text.length + (string.length - range.length) <= maxLength_;
  }
  if (numericPattern_ != nil) {
    return [self numericPatternMatchesWithNSString: string];
  }
  return YES;
}

- (void)setPhoneNumberWithId:(id)objValue {
  ASUITextViewImpl_setPhoneNumberWithId_(self, objValue);
}

- (void)nativeSetPhoneNumberWithBoolean:(jboolean)value {
  ASUITextViewImpl_nativeSetPhoneNumberWithBoolean_(self, value);
}

- (id)getFont {
  return ASUITextViewImpl_getFont(self);
}

- (void)setInputTypeWithId:(id)objValue {
  ASUITextViewImpl_setInputTypeWithId_(self, objValue);
}

- (void)nativeSetKeyboardTypeWithInt:(jint)value {
  ASUITextViewImpl_nativeSetKeyboardTypeWithInt_(self, value);
}

- (id)getInputType {
  return ASUITextViewImpl_getInputType(self);
}

- (jint)nativeGetKeyboardType {
  return ASUITextViewImpl_nativeGetKeyboardType(self);
}

- (void)setImeOptionsWithId:(id)objValue
               withNSString:(NSString *)strValue {
  ASUITextViewImpl_setImeOptionsWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetImeOptionsWithInt:(jint)imeOptions {
  ASUITextViewImpl_nativeSetImeOptionsWithInt_(self, imeOptions);
}

- (jint)nativeGetImeOptions {
  return ASUITextViewImpl_nativeGetImeOptions(self);
}

- (id)getImeOptions {
  return ASUITextViewImpl_getImeOptions(self);
}

- (void)setOnEditorActionWithId:(id)objValue {
  ASUITextViewImpl_setOnEditorActionWithId_(self, objValue);
}

- (void)setOnEditorActionListener {
  ASUITextViewImpl_setOnEditorActionListener(self);
}

-(BOOL)textField:(UITextView*)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{
  BOOL result = YES;
  if (textAllCaps_) {
    NSRange lowercaseCharRange = [string rangeOfCharacterFromSet:[NSCharacterSet lowercaseLetterCharacterSet]];
    if (lowercaseCharRange.location != NSNotFound) {
      if (textField.text.length == 0) {
        textField.text = [textField.text stringByReplacingCharactersInRange:range withString:[string uppercaseString]];
      } else {
        UITextPosition *beginning = textField.beginningOfDocument;
        UITextPosition *start = [textField positionFromPosition:beginning offset:range.location];
        UITextPosition *end = [textField positionFromPosition:start offset:range.length];
        UITextRange *textRange = [textField textRangeFromPosition:start toPosition:end];
        
        [textField replaceRange:textRange withText:[string uppercaseString]];
      }
      result = NO;
    }
  }
  [self handleOnBeforeTextChangeWithNSString: string withInt:range.location withInt: range.length withInt:string.length];
  return [self checkIfInputIsValid: string :range] && result;
}
- (BOOL)textFieldShouldReturn:(UITextView*)textField {
  // Execute any additional code
  if (self->editorAction_ != nil) {
    [self setOnEditorActionListener];
  }
  return YES;
}

- (void)setInputAccessoryViewDoneButtonWithId:(id)objValue {
  ASUITextViewImpl_setInputAccessoryViewDoneButtonWithId_(self, objValue);
}

- (void)nativeSetInputAccessoryViewDoneButtonWithNSString:(NSString *)title {
  ASUITextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(self, title);
}

-(void)doneButtonPressed:(id)sender withEvent:(UIEvent *) event{
  [self textFieldShouldReturn: ((ASUITextView*)self.uiView)];
}
- (void)textViewDidBeginEditing:(UITextView*)textField{
  if (self->selectAllOnFocus_) {
    [self nativeSetSelectAllWithFloat: 0];
  }
  
  if (self->selectOnceOnFocus_) {
    self->selectOnceOnFocus_ = FALSE;
    [self nativeSetSelectAllWithFloat: 0.5];
  }
  
  [self sendPressStartEvent];
}

- (void)textViewDidEndEditing:(UITextView*)textField{
  [self sendPressEndEvent];
}

- (void) nativeSetSelectAllActual:(UITextView *)tv  {
  [tv setSelectedTextRange:[tv textRangeFromPosition:tv.beginningOfDocument toPosition:tv.endOfDocument]];
}

- (void)setOnFocusWithId:(id)objValue {
  ASUITextViewImpl_setOnFocusWithId_(self, objValue);
}

- (void)sendPressStartEvent {
  ASUITextViewImpl_sendPressStartEvent(self);
}

- (void)sendPressEndEvent {
  ASUITextViewImpl_sendPressEndEvent(self);
}

- (void)setSelectAllOnFocusWithId:(id)objValue {
  ASUITextViewImpl_setSelectAllOnFocusWithId_(self, objValue);
}

- (void)setSelectAllWithId:(id)objValue {
  ASUITextViewImpl_setSelectAllWithId_(self, objValue);
}

- (jboolean)isFirstResponder {
  return ASUITextViewImpl_isFirstResponder(self);
}

- (void)becomeFirstResponder {
  ASUITextViewImpl_becomeFirstResponder(self);
}

- (void)nativeSetSelectAllWithFloat:(jfloat)delay {
  ASUITextViewImpl_nativeSetSelectAllWithFloat_(self, delay);
}

- (void)setSingleLineWithId:(id)objValue {
  ASUITextViewImpl_setSingleLineWithId_(self, objValue);
}

- (id)getSingleLine {
  return ASUITextViewImpl_getSingleLine(self);
}

- (void)setScrollHorizontallyWithId:(id)objValue {
  ASUITextViewImpl_setScrollHorizontallyWithId_(self, objValue);
}

- (void)nativeAddTapGesture {
  ASUITextViewImpl_nativeAddTapGesture(self);
}

- (void)handleTap:(UITapGestureRecognizer *)gesture {
  ASUITextView* textView = ((ASUITextView*)self.uiView);
  if (![textView isFirstResponder]) {
    [textView becomeFirstResponder];
  }
  
  CGPoint point = [gesture locationInView:textView];
  UITextPosition *closestPosition = [textView closestPositionToPoint:point];
  if (closestPosition) {
    textView.selectedTextRange = [textView textRangeFromPosition:closestPosition toPosition:closestPosition];
  }
}

- (void)nativeSetScrollEnabledWithId:(id)scrollView
                         withBoolean:(jboolean)scrollEnabled {
  ASUITextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(self, scrollView, scrollEnabled);
}

- (void)setTextColorLinkWithADColorStateList:(ADColorStateList *)linkTextColors {
  ASUITextViewImpl_setTextColorLinkWithADColorStateList_(self, linkTextColors);
}

- (void)handleOnBeforeTextChangeWithNSString:(NSString *)s
                                     withInt:(jint)start
                                     withInt:(jint)count
                                     withInt:(jint)after {
  ASUITextViewImpl_handleOnBeforeTextChangeWithNSString_withInt_withInt_withInt_(self, s, start, count, after);
}

- (id<ADTextWatcher>)getTextChangedListenerWithId:(id)objValue {
  id<ADTextWatcher> textWatcher = nil;
  if ([objValue isKindOfClass:[NSString class]]) {
    textWatcher = new_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(self, (NSString *) objValue);
  }
  else {
    textWatcher = (id<ADTextWatcher>) cast_check(objValue, ADTextWatcher_class_());
  }
  return textWatcher;
}

- (void)handleOnAfterTextChange {
  ASUITextViewImpl_handleOnAfterTextChange(self);
}

- (void)handleOnTextChange {
  ASUITextViewImpl_handleOnTextChange(self);
}

- (void)setOnAfterTextChangeWithId:(id)objValue {
  ASUITextViewImpl_setOnAfterTextChangeWithId_(self, objValue);
}

- (void)setBeforeOnTextChangeWithId:(id)objValue {
  ASUITextViewImpl_setBeforeOnTextChangeWithId_(self, objValue);
}

- (void)setOnTextChangeWithId:(id)objValue {
  ASUITextViewImpl_setOnTextChangeWithId_(self, objValue);
}

- (void)setTextAllCapsWithId:(id)objValue {
  ASUITextViewImpl_setTextAllCapsWithId_(self, objValue);
}

- (void)forceRedraw {
  ASUITextViewImpl_forceRedraw(self);
}

- (void)nativeSetContentSizeWithId:(id)uiView
                           withInt:(jint)contentWidth
                           withInt:(jint)height {
  ASUITextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(self, uiView, contentWidth, height);
}

- (void)remeasure {
  ASUITextViewImpl_remeasure(self);
}

- (void)updateScrollViewContentOffset {
  ASUITextViewImpl_updateScrollViewContentOffset(self);
}

- (void)setInputViewWithId:(id)objValue {
  ASUITextViewImpl_setInputViewWithId_(self, objValue);
}

- (void)setNativeInputViewWithId:(id)objValue {
  ASUITextViewImpl_setNativeInputViewWithId_(self, objValue);
}

- (void)setPickerView {
  ASUITextViewImpl_setPickerView(self);
}

- (void)setDatePicker {
  ASUITextViewImpl_setDatePicker(self);
}

- (NSString *)getTextEntered {
  return (NSString *) cast_chk(ASUITextViewImpl_getMyText(self), [NSString class]);
}

- (jboolean)isViewVisible {
  return [((ASMeasurableTextView *) nil_chk(measurableTextView_)) getVisibility] == ADView_VISIBLE;
}

- (void)focus {
  ASUITextViewImpl_becomeFirstResponder(self);
}

- (void)setErrorWithNSString:(NSString *)message {
  ASUITextViewImpl_setErrorWithNSString_(self, message);
}

- (void)resetError {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASUITextViewImpl_setErrorWithNSString_(self, nil);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, @"");
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getNormalStyle]);
  }
}

- (void)showErrorWithNSString:(NSString *)message {
  jint validationErrorDisplayType = [self getValidationErrorDisplayType];
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_POPUP) != 0) {
    ASUITextViewImpl_setErrorWithNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_LABEL) != 0) {
    ASViewImpl_setMessageOnLabelWithASIWidget_withNSString_(self, message);
  }
  if ((validationErrorDisplayType & ASFormElement_ERROR_DISPLAY_TYPE_STYLE) != 0) {
    ASViewImpl_setStyleWithASIWidget_withId_(self, [self getErrorStyle]);
  }
}

- (void)setHintTextFormatWithId:(id)objValue {
  ASUITextViewImpl_setHintTextFormatWithId_(self, objValue);
}

- (void)setTextWithId:(id)nativeWidget
               withId:(id)value {
  ((ASUITextView*) nativeWidget).text = (NSString*) value;
}

- (id)getText {
  return ((ASUITextView*) uiView_).text;
}

- (void)setTextColorWithId:(id)nativeWidget
                    withId:(id)value {
  ((ASUITextView*) nativeWidget).textColor = (UIColor*) value;
}

- (id)getTextColor {
  return ((ASUITextView*) uiView_).textColor;
}

- (void)setUsesStandardTextScalingWithId:(id)nativeWidget
                                  withId:(id)value {
  ((ASUITextView*) nativeWidget).usesStandardTextScaling = [(JavaLangBoolean*) value booleanValue];
}

- (id)getUsesStandardTextScaling {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextView*) uiView_).usesStandardTextScaling];
}

- (void)setIsEditableWithId:(id)nativeWidget
                     withId:(id)value {
  ((ASUITextView*) nativeWidget).editable = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsEditable {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextView*) uiView_).editable];
}

- (void)setAllowsEditingTextAttributesWithId:(id)nativeWidget
                                      withId:(id)value {
  ((ASUITextView*) nativeWidget).allowsEditingTextAttributes = [(JavaLangBoolean*) value booleanValue];
}

- (id)getAllowsEditingTextAttributes {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextView*) uiView_).allowsEditingTextAttributes];
}

- (void)setClearsOnInsertionWithId:(id)nativeWidget
                            withId:(id)value {
  ((ASUITextView*) nativeWidget).clearsOnInsertion = [(JavaLangBoolean*) value booleanValue];
}

- (id)getClearsOnInsertion {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextView*) uiView_).clearsOnInsertion];
}

- (void)setIsSelectableWithId:(id)nativeWidget
                       withId:(id)value {
  ((ASUITextView*) nativeWidget).selectable = [(JavaLangBoolean*) value booleanValue];
}

- (id)getIsSelectable {
  return [JavaLangBoolean valueOfWithBoolean :((ASUITextView*) uiView_).selectable];
}

- (jboolean)checkIosVersionWithNSString:(NSString *)v {
  return ([[[UIDevice currentDevice] systemVersion] compare:v options:NSNumericSearch] == NSOrderedDescending);
}

- (void)setIdWithNSString:(NSString *)id_ {
  if (id_ != nil && ![id_ isEqual:@""]) {
    [super setIdWithNSString:id_];
    [((ASMeasurableTextView *) nil_chk(measurableTextView_)) setIdWithInt:ASIdGenerator_getIdWithNSString_(id_)];
  }
}

- (void)requestLayout {
  if ([self isInitialised]) {
    ASViewImpl_requestLayoutWithASIWidget_withId_(self, [self asNativeWidget]);
  }
}

- (void)invalidate {
  if ([self isInitialised]) {
    ASViewImpl_invalidateWithASIWidget_withId_(self, [self asNativeWidget]);
    if (ASUITextViewImpl_isViewWrapped(self)) {
      ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getWrappedView]);
      if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] != nil) {
        ASViewImpl_invalidateWithASIWidget_withId_(self, [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground]);
      }
    }
  }
}

- (id)getPluginWithNSString:(NSString *)plugin {
  return [((id<ASIAttributable>) nil_chk(ASWidgetFactory_getAttributableWithNSString_(plugin))) newInstanceWithASIWidget:self];
}

- (ASUITextViewImpl_UITextViewBean *)getBean {
  if (bean_ == nil) {
    bean_ = new_ASUITextViewImpl_UITextViewBean_initWithASUITextViewImpl_(self);
  }
  return bean_;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)getBuilder {
  if (builder_ == nil) {
    builder_ = new_ASUITextViewImpl_UITextViewCommandBuilder_initWithASUITextViewImpl_(self);
  }
  return builder_;
}

- (void)createSimpleWrapableView {
  ASUITextViewImpl_createSimpleWrapableView(self);
}

- (jboolean)hasScrollView {
  return ASUITextViewImpl_hasScrollView(self);
}

- (jboolean)isViewWrapped {
  return ASUITextViewImpl_isViewWrapped(self);
}

- (void)addForegroundIfNeeded {
  if (ASUITextViewImpl_isViewWrapped(self) && ![((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) isDisableForeground]) {
    if ([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground] == nil) {
      id foreground = [self nativeAddForeGroundWithASIWidget:self];
      ASViewGroupImpl_nativeAddViewWithId_withId_([((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget], foreground);
      [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) setForegroundWithId:foreground];
    }
  }
}

- (id)getForeground {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) getForeground];
}

- (void)setForegroundFrameWithInt:(jint)l
                          withInt:(jint)t
                          withInt:(jint)r
                          withInt:(jint)b {
  ASUITextViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (id)asNativeWidget {
  return [((ASSimpleWrapableView *) nil_chk(simpleWrapableView_)) asNativeWidget];
}

- (void)invalidateWrapViewHolder {
  ASUITextViewImpl_invalidateWrapViewHolder(self);
}

- (id)createWrapperViewWithId:(id)wrapperParent
                      withInt:(jint)viewtype {
  uiView_ = ASUITextViewImpl_nativeCreateViewWithInt_(self, viewtype);
  ASViewGroupImpl_nativeAddViewWithId_withId_(ASViewImpl_getFirstChildOrSelfWithId_(wrapperParent), uiView_);
  return uiView_;
}

- (id)createWrapperViewHolderWithInt:(jint)viewType {
  return [self createWrapperViewHolderNativeWithInt:viewType];
}

- (id)nativeAddForeGroundWithASIWidget:(id<ASIWidget>)w {
  ASUIView* uiView = [ASUIView new];
  uiView.widget = w;
  uiView.commandRegex  = ASUITextViewImpl_FOREGROUND_REGEX;
  uiView.backgroundColor = [UIColor clearColor];
  return uiView;
}

- (id)createWrapperViewHolderNativeWithInt:(jint)viewType {
  if (viewType == 1) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.commandRegex  = ASUITextViewImpl_VIEW_HOLDER_REGEX;
    uiView.backgroundColor = [UIColor clearColor];
    
    return uiView;
  }
  
  if (viewType == 2 || viewType == 3) {
    ASUIView* uiView = [ASUIView new];
    uiView.widget = self;
    uiView.backgroundColor = [UIColor clearColor];
    uiView.commandRegex  = ASUITextViewImpl_VIEW_HOLDER_REGEX;
    
    ASUIScrollView* scrollview = [ASUIScrollView new];
    scrollview.scrollEnabled=YES;
    scrollview.bounces=NO;
    scrollview.preventAutoScroll=YES;
    scrollview.delaysContentTouches=YES;
    scrollview.userInteractionEnabled=YES;
    scrollview.widget = self;
    scrollview.backgroundColor = [UIColor clearColor];
    scrollview.commandRegex  = @"none";
    [uiView addSubview:scrollview];
    return uiView;
  }
  
  return nil;
}

- (id)getScrollView {
  return ASUITextViewImpl_getScrollView(self);
}

- (void)nativeCreateWithJavaUtilMap:(id<JavaUtilMap>)params {
  ASUITextViewImpl_nativeCreateWithJavaUtilMap_(self, params);
}

- (id)nativeCreateViewWithInt:(jint)viewType {
  return ASUITextViewImpl_nativeCreateViewWithInt_(self, viewType);
}

- (void)createPlaceHolderWithNSString:(NSString *)text {
  ASUITextViewImpl_createPlaceHolderWithNSString_(self, text);
}

- (void)updatePlaceHolderVisibility {
  ASUITextViewImpl_updatePlaceHolderVisibility(self);
}

- (void)syncPlaceholderLabel {
  ASUITextViewImpl_syncPlaceholderLabel(self);
}

- (void)setHintWithId:(id)objValue {
  ASUITextViewImpl_setHintWithId_(self, objValue);
}

- (void)setHintColorWithId:(id)objValue {
  ASUITextViewImpl_setHintColorWithId_(self, objValue);
}

- (id)getHint {
  return ASUITextViewImpl_getHint(self);
}

- (NSString *)nativeGetHint {
  return ASUITextViewImpl_nativeGetHint(self);
}

- (void)nativeSetHintColorWithId:(id)objValue {
  ASUITextViewImpl_nativeSetHintColorWithId_(self, objValue);
}

-(void)textViewDidChange:(UITextView *)textView{
  [self handleOnTextChange];
  [self handleOnAfterTextChange];
  [self updatePlaceHolderVisibility];
  [self adjustContentSizeWithInt:textView.frame.size.width withInt:textView.frame.size.height];
  if (callMeasureOnChange_) {
    [self remeasure];
  }
}
- (BOOL)textView:(UITextView *)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString *)text {
  return [self textField:textView shouldChangeCharactersInRange:range replacementString:text];
}

- (CGFloat)layoutManager:(NSLayoutManager *)layoutManager lineSpacingAfterGlyphAtIndex:(NSUInteger)glyphIndex withProposedLineFragmentRect:(CGRect)rect {
  return lineSpacing_; // For really wide spacing; pick your own value
}

- (void)updateBoundsWithInt:(jint)topPadding
                    withInt:(jint)bottomPadding
                     withId:(id)parent
                     withId:(id)child {
  ASUITextViewImpl_updateBoundsWithInt_withInt_withId_withId_(self, topPadding, bottomPadding, parent, child);
}

- (void)nativeMakeFrameForChildWidgetWithInt:(jint)l
                                     withInt:(jint)t
                                     withInt:(jint)r
                                     withInt:(jint)b {
  ASUITextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(self, l, t, r, b);
}

- (void)addMinMaxListener {
  ASUITextViewImpl_addMinMaxListener(self);
}

- (jboolean)isEllipsized {
  return ASUITextViewImpl_isEllipsized(self);
}

- (void)nativeSetEnabledWithBoolean:(jboolean)isEnabled {
  ASUITextViewImpl_nativeSetEnabledWithBoolean_(self, isEnabled);
}

- (id)getEllipsize {
  return ASUITextViewImpl_getEllipsize(self);
}

- (void)nativeSetMaxLinesWithInt:(jint)lines {
  ASUITextViewImpl_nativeSetMaxLinesWithInt_(self, lines);
}

- (void)setEllipsizeWithId:(id)objValue
              withNSString:(NSString *)strValue {
  ASUITextViewImpl_setEllipsizeWithId_withNSString_(self, objValue, strValue);
}

- (void)nativeSetLineBreakModeWithInt:(jint)lineBreakMode {
  ASUITextViewImpl_nativeSetLineBreakModeWithInt_(self, lineBreakMode);
}

- (jint)nativeGetLineBreakMode {
  return ASUITextViewImpl_nativeGetLineBreakMode(self);
}

- (void)setLineSpacing {
  ASUITextViewImpl_setLineSpacing(self);
}

- (void)nativeSetLayoutManagerDelegate {
  ASUITextViewImpl_nativeSetLayoutManagerDelegate(self);
}

- (void)postSetAttributeWithASWidgetAttribute:(ASWidgetAttribute *)key
                                 withNSString:(NSString *)strValue
                                       withId:(id)objValue
                    withASILifeCycleDecorator:(id<ASILifeCycleDecorator>)decorator {
  ASUITextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(self, key, strValue, objValue, decorator);
}

- (jint)measureWidth {
  jint width = [((ASMeasurableTextView *) nil_chk(measurableTextView_)) nativeMeasureWidthWithId:uiView_];
  if (placeholderLabel_ != nil) {
    jint miniumumWidth = [((ASMeasurableTextView *) nil_chk(measurableTextView_)) nativeMeasureWidthWithId:placeholderLabel_];
    if (width < miniumumWidth) {
      width = miniumumWidth;
    }
  }
  return width;
}

- (jint)measureHeightWithInt:(jint)width {
  jint height = [((ASMeasurableTextView *) nil_chk(measurableTextView_)) nativeMeasureHeightWithId:uiView_ withInt:width];
  if (placeholderLabel_ != nil) {
    jint miniumumHeight = [((ASMeasurableTextView *) nil_chk(measurableTextView_)) nativeMeasureHeightWithId:placeholderLabel_ withInt:width];
    if (height < miniumumHeight) {
      height = miniumumHeight;
    }
  }
  return height;
}

- (void)nativeAddTextFieldDidChange {
  ASUITextViewImpl_nativeAddTextFieldDidChange(self);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LASIWidget;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, 6, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 9, 10, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 11, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 15, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 16, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 17, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 18, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 19, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 20, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 21, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 22, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 23, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 25, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 29, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 30, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 31, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 32, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 33, 34, -1, 35, -1, -1 },
    { NULL, "V", 0x2, 36, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 37, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 38, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 39, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 40, 41, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 42, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 43, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 44, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 45, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 46, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 47, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 48, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 49, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 50, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 52, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 53, 51, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 54, 51, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 55, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x102, 56, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 57, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 58, 12, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 59, 60, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 61, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 62, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 67, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 68, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 69, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 70, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 71, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 72, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 73, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 74, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 75, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 76, 3, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, 77, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 78, 79, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 80, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 81, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 82, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 83, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 84, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, 85, 86, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 87, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 88, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 89, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 90, 14, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 91, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 92, 12, -1, -1, -1, -1 },
    { NULL, "[LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, 93, 94, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, 95, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 96, 97, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 98, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 99, 86, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 100, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 101, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 102, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 103, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 104, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 105, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 106, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 107, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 108, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 109, 12, -1, -1, -1, -1 },
    { NULL, "Z", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 110, 111, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 112, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 113, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 114, 115, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 116, 117, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 118, 119, -1, -1, -1, -1 },
    { NULL, "LADTextWatcher;", 0x1, 120, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 121, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 122, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 123, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 124, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 125, 126, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 127, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 128, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 129, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 130, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 131, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 132, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 62, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 134, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 135, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 136, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 137, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x101, 138, 133, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x101, 139, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 140, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 141, 1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewBean;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 142, 143, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 144, 145, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 146, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 147, 148, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x101, 149, 14, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 150, 34, -1, 35, -1, -1 },
    { NULL, "LNSObject;", 0x102, 151, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 152, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 153, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 154, 12, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 155, 12, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 156, 157, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 158, 143, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 159, 86, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 160, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 161, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x102, 162, 14, -1, -1, -1, -1 },
    { NULL, "I", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x102, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 163, 8, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 164, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(loadAttributesWithNSString:);
  methods[1].selector = @selector(init);
  methods[2].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[3].selector = @selector(newInstance);
  methods[4].selector = @selector(createWithASIFragment:withJavaUtilMap:);
  methods[5].selector = @selector(setWidgetOnNativeClass);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[7].selector = @selector(getAttributeWithASWidgetAttribute:withASILifeCycleDecorator:);
  methods[8].selector = @selector(asWidget);
  methods[9].selector = @selector(setGravityWithId:);
  methods[10].selector = @selector(updateTextAlignment);
  methods[11].selector = @selector(getGravity);
  methods[12].selector = @selector(onRtlPropertiesChangedWithInt:);
  methods[13].selector = @selector(getMinHeight);
  methods[14].selector = @selector(getMinWidth);
  methods[15].selector = @selector(setEmsWithId:);
  methods[16].selector = @selector(getMaxEms);
  methods[17].selector = @selector(getMinEms);
  methods[18].selector = @selector(setMinEmsWithId:);
  methods[19].selector = @selector(getMinLines);
  methods[20].selector = @selector(getMaxLines);
  methods[21].selector = @selector(setMaxEmsWithId:);
  methods[22].selector = @selector(setWidthWithId:);
  methods[23].selector = @selector(setHeightWithId:);
  methods[24].selector = @selector(setMaxLinesWithId:);
  methods[25].selector = @selector(setLinesWithId:);
  methods[26].selector = @selector(setMinLinesWithId:);
  methods[27].selector = @selector(setMaxHeightWithId:);
  methods[28].selector = @selector(setMaxWidthWithId:);
  methods[29].selector = @selector(getMaxWidth);
  methods[30].selector = @selector(getMaxHeight);
  methods[31].selector = @selector(setMinHeightWithId:);
  methods[32].selector = @selector(setMinWidthWithId:);
  methods[33].selector = @selector(getWidth);
  methods[34].selector = @selector(getHeight);
  methods[35].selector = @selector(setTypeFaceWithId:withNSString:);
  methods[36].selector = @selector(setFontFamilyWithId:withNSString:);
  methods[37].selector = @selector(setTextStyleWithId:);
  methods[38].selector = @selector(setFirstBaselineToTopHeightWithId:);
  methods[39].selector = @selector(getIncludeFontPadding);
  methods[40].selector = @selector(getFirstBaselineToTopHeight);
  methods[41].selector = @selector(setLastBaselineToBottomHeightWithId:);
  methods[42].selector = @selector(getLastBaselineToBottomHeight);
  methods[43].selector = @selector(initHtmlWithJavaUtilMap:);
  methods[44].selector = @selector(setLineSpacingMultiplierWithId:);
  methods[45].selector = @selector(setLineSpacingExtraWithId:);
  methods[46].selector = @selector(getLineSpacingMultiplier);
  methods[47].selector = @selector(getLineSpacingExtra);
  methods[48].selector = @selector(getDigitString);
  methods[49].selector = @selector(getSignedChars);
  methods[50].selector = @selector(getDecimalChars);
  methods[51].selector = @selector(setNumericWithId:);
  methods[52].selector = @selector(setDigitsWithId:);
  methods[53].selector = @selector(drawableStateChanged);
  methods[54].selector = @selector(drawableStateChangeWithNSString:withADDrawable:);
  methods[55].selector = @selector(handleHtmlTextWithNSString:);
  methods[56].selector = @selector(nativeSetTextWithNSString:);
  methods[57].selector = @selector(nativeSetHtmlTextWithId:);
  methods[58].selector = @selector(getMyText);
  methods[59].selector = @selector(getTextSize);
  methods[60].selector = @selector(setMyTextSizeWithId:);
  methods[61].selector = @selector(nativeSetTextSizeWithInt:);
  methods[62].selector = @selector(setVerticalAligmentCenter);
  methods[63].selector = @selector(setVerticalAligmentBottom);
  methods[64].selector = @selector(setVerticalAligmentTop);
  methods[65].selector = @selector(setHorizontalAligmentCenter);
  methods[66].selector = @selector(setHorizontalAligmentRight);
  methods[67].selector = @selector(setHorizontalAligmentRightInternal);
  methods[68].selector = @selector(setHorizontalAligmentLeft);
  methods[69].selector = @selector(setHorizontalAligmentLeftInternal);
  methods[70].selector = @selector(getTextAlignment);
  methods[71].selector = @selector(nativeSetVerticalAligmentBottom);
  methods[72].selector = @selector(nativeSetVerticalAligmentTop);
  methods[73].selector = @selector(nativeSetVerticalAligmentCenter);
  methods[74].selector = @selector(setDrawablePaddingWithId:);
  methods[75].selector = @selector(setDrawableBottomWithId:);
  methods[76].selector = @selector(setDrawableTopWithId:);
  methods[77].selector = @selector(setDrawableRightWithNSString:withId:);
  methods[78].selector = @selector(setDrawableRightInternalWithNSString:withId:);
  methods[79].selector = @selector(setDrawableLeftWithNSString:withId:);
  methods[80].selector = @selector(setDrawableLeftInternalWithNSString:withId:);
  methods[81].selector = @selector(getImageHeightWithId:);
  methods[82].selector = @selector(getImageWidthWithId:);
  methods[83].selector = @selector(getDrawablePadding);
  methods[84].selector = @selector(setDrawableTintModeWithId:);
  methods[85].selector = @selector(setDrawableTintWithId:);
  methods[86].selector = @selector(nativeGetFontSize);
  methods[87].selector = @selector(nativeGetFontStyle);
  methods[88].selector = @selector(nativeSetCustomFontWithInt:withASFontDescriptor:);
  methods[89].selector = @selector(nativeSetFontStyleWithInt:);
  methods[90].selector = @selector(setTextColorWithId:);
  methods[91].selector = @selector(getTextColorState);
  methods[92].selector = @selector(getBorderPadding);
  methods[93].selector = @selector(getLineHeightPadding);
  methods[94].selector = @selector(getLineHeight);
  methods[95].selector = @selector(getBorderWidth);
  methods[96].selector = @selector(getPaddingLeft);
  methods[97].selector = @selector(setPaddingLeftWithId:);
  methods[98].selector = @selector(getPaddingRight);
  methods[99].selector = @selector(setPaddingRightWithId:);
  methods[100].selector = @selector(getPaddingTop);
  methods[101].selector = @selector(setPaddingTopWithId:);
  methods[102].selector = @selector(getPaddingBottom);
  methods[103].selector = @selector(getPaddingEnd);
  methods[104].selector = @selector(getPaddingStart);
  methods[105].selector = @selector(setPaddingBottomWithId:);
  methods[106].selector = @selector(setPaddingVerticalWithId:);
  methods[107].selector = @selector(setPaddingHorizontalWithId:);
  methods[108].selector = @selector(setPaddingEndWithId:);
  methods[109].selector = @selector(setPaddingStartWithId:);
  methods[110].selector = @selector(setPaddingWithId:);
  methods[111].selector = @selector(updatePadding);
  methods[112].selector = @selector(nativeSetPaddingBottomWithInt:);
  methods[113].selector = @selector(nativeSetPaddingLeftWithInt:);
  methods[114].selector = @selector(nativeSetPaddingRightWithInt:);
  methods[115].selector = @selector(nativeSetPaddingTopWithInt:);
  methods[116].selector = @selector(adjustContentSizeWithInt:withInt:);
  methods[117].selector = @selector(isContentOffsetCorrectionNeededWithId:);
  methods[118].selector = @selector(setContentOffsetWithInt:withId:);
  methods[119].selector = @selector(setTextColorHighlightWithId:);
  methods[120].selector = @selector(getTextColorHighlight);
  methods[121].selector = @selector(setMyTextWithId:);
  methods[122].selector = @selector(nativeTriggerChangeHandlersWithNSString:);
  methods[123].selector = @selector(nativeTriggerBeforeChangeHandlersWithNSString:);
  methods[124].selector = @selector(setCursorVisibleWithId:);
  methods[125].selector = @selector(nativeGetTintColorWithBoolean:);
  methods[126].selector = @selector(setCapitalizeWithId:);
  methods[127].selector = @selector(nativeSetCapitalizeWithInt:);
  methods[128].selector = @selector(setAutoTextWithId:);
  methods[129].selector = @selector(nativeSetCorrectionTypeWithInt:);
  methods[130].selector = @selector(getCursorVisible);
  methods[131].selector = @selector(setMaxLengthWithId:);
  methods[132].selector = @selector(setEnabledWithId:);
  methods[133].selector = @selector(getDigitStrings);
  methods[134].selector = @selector(getLocaleValueFromRSWithNSString:withNSString:);
  methods[135].selector = @selector(getPlusString);
  methods[136].selector = @selector(getMinusString);
  methods[137].selector = @selector(getDecimalCharacter);
  methods[138].selector = @selector(numericPatternMatchesWithNSString:);
  methods[139].selector = @selector(removeNumericListener);
  methods[140].selector = @selector(addNumericListenerWithJavaUtilRegexPattern:);
  methods[141].selector = @selector(setPhoneNumberWithId:);
  methods[142].selector = @selector(nativeSetPhoneNumberWithBoolean:);
  methods[143].selector = @selector(getFont);
  methods[144].selector = @selector(setInputTypeWithId:);
  methods[145].selector = @selector(nativeSetKeyboardTypeWithInt:);
  methods[146].selector = @selector(getInputType);
  methods[147].selector = @selector(nativeGetKeyboardType);
  methods[148].selector = @selector(setImeOptionsWithId:withNSString:);
  methods[149].selector = @selector(nativeSetImeOptionsWithInt:);
  methods[150].selector = @selector(nativeGetImeOptions);
  methods[151].selector = @selector(getImeOptions);
  methods[152].selector = @selector(setOnEditorActionWithId:);
  methods[153].selector = @selector(setOnEditorActionListener);
  methods[154].selector = @selector(setInputAccessoryViewDoneButtonWithId:);
  methods[155].selector = @selector(nativeSetInputAccessoryViewDoneButtonWithNSString:);
  methods[156].selector = @selector(setOnFocusWithId:);
  methods[157].selector = @selector(sendPressStartEvent);
  methods[158].selector = @selector(sendPressEndEvent);
  methods[159].selector = @selector(setSelectAllOnFocusWithId:);
  methods[160].selector = @selector(setSelectAllWithId:);
  methods[161].selector = @selector(isFirstResponder);
  methods[162].selector = @selector(becomeFirstResponder);
  methods[163].selector = @selector(nativeSetSelectAllWithFloat:);
  methods[164].selector = @selector(setSingleLineWithId:);
  methods[165].selector = @selector(getSingleLine);
  methods[166].selector = @selector(setScrollHorizontallyWithId:);
  methods[167].selector = @selector(nativeAddTapGesture);
  methods[168].selector = @selector(nativeSetScrollEnabledWithId:withBoolean:);
  methods[169].selector = @selector(setTextColorLinkWithADColorStateList:);
  methods[170].selector = @selector(handleOnBeforeTextChangeWithNSString:withInt:withInt:withInt:);
  methods[171].selector = @selector(getTextChangedListenerWithId:);
  methods[172].selector = @selector(handleOnAfterTextChange);
  methods[173].selector = @selector(handleOnTextChange);
  methods[174].selector = @selector(setOnAfterTextChangeWithId:);
  methods[175].selector = @selector(setBeforeOnTextChangeWithId:);
  methods[176].selector = @selector(setOnTextChangeWithId:);
  methods[177].selector = @selector(setTextAllCapsWithId:);
  methods[178].selector = @selector(forceRedraw);
  methods[179].selector = @selector(nativeSetContentSizeWithId:withInt:withInt:);
  methods[180].selector = @selector(remeasure);
  methods[181].selector = @selector(updateScrollViewContentOffset);
  methods[182].selector = @selector(setInputViewWithId:);
  methods[183].selector = @selector(setNativeInputViewWithId:);
  methods[184].selector = @selector(setPickerView);
  methods[185].selector = @selector(setDatePicker);
  methods[186].selector = @selector(getTextEntered);
  methods[187].selector = @selector(isViewVisible);
  methods[188].selector = @selector(focus);
  methods[189].selector = @selector(setErrorWithNSString:);
  methods[190].selector = @selector(resetError);
  methods[191].selector = @selector(showErrorWithNSString:);
  methods[192].selector = @selector(setHintTextFormatWithId:);
  methods[193].selector = @selector(setTextWithId:withId:);
  methods[194].selector = @selector(getText);
  methods[195].selector = @selector(setTextColorWithId:withId:);
  methods[196].selector = @selector(getTextColor);
  methods[197].selector = @selector(setUsesStandardTextScalingWithId:withId:);
  methods[198].selector = @selector(getUsesStandardTextScaling);
  methods[199].selector = @selector(setIsEditableWithId:withId:);
  methods[200].selector = @selector(getIsEditable);
  methods[201].selector = @selector(setAllowsEditingTextAttributesWithId:withId:);
  methods[202].selector = @selector(getAllowsEditingTextAttributes);
  methods[203].selector = @selector(setClearsOnInsertionWithId:withId:);
  methods[204].selector = @selector(getClearsOnInsertion);
  methods[205].selector = @selector(setIsSelectableWithId:withId:);
  methods[206].selector = @selector(getIsSelectable);
  methods[207].selector = @selector(checkIosVersionWithNSString:);
  methods[208].selector = @selector(setIdWithNSString:);
  methods[209].selector = @selector(requestLayout);
  methods[210].selector = @selector(invalidate);
  methods[211].selector = @selector(getPluginWithNSString:);
  methods[212].selector = @selector(getBean);
  methods[213].selector = @selector(getBuilder);
  methods[214].selector = @selector(createSimpleWrapableView);
  methods[215].selector = @selector(hasScrollView);
  methods[216].selector = @selector(isViewWrapped);
  methods[217].selector = @selector(addForegroundIfNeeded);
  methods[218].selector = @selector(getForeground);
  methods[219].selector = @selector(setForegroundFrameWithInt:withInt:withInt:withInt:);
  methods[220].selector = @selector(asNativeWidget);
  methods[221].selector = @selector(invalidateWrapViewHolder);
  methods[222].selector = @selector(createWrapperViewWithId:withInt:);
  methods[223].selector = @selector(createWrapperViewHolderWithInt:);
  methods[224].selector = @selector(nativeAddForeGroundWithASIWidget:);
  methods[225].selector = @selector(createWrapperViewHolderNativeWithInt:);
  methods[226].selector = @selector(getScrollView);
  methods[227].selector = @selector(nativeCreateWithJavaUtilMap:);
  methods[228].selector = @selector(nativeCreateViewWithInt:);
  methods[229].selector = @selector(createPlaceHolderWithNSString:);
  methods[230].selector = @selector(updatePlaceHolderVisibility);
  methods[231].selector = @selector(syncPlaceholderLabel);
  methods[232].selector = @selector(setHintWithId:);
  methods[233].selector = @selector(setHintColorWithId:);
  methods[234].selector = @selector(getHint);
  methods[235].selector = @selector(nativeGetHint);
  methods[236].selector = @selector(nativeSetHintColorWithId:);
  methods[237].selector = @selector(updateBoundsWithInt:withInt:withId:withId:);
  methods[238].selector = @selector(nativeMakeFrameForChildWidgetWithInt:withInt:withInt:withInt:);
  methods[239].selector = @selector(addMinMaxListener);
  methods[240].selector = @selector(isEllipsized);
  methods[241].selector = @selector(nativeSetEnabledWithBoolean:);
  methods[242].selector = @selector(getEllipsize);
  methods[243].selector = @selector(nativeSetMaxLinesWithInt:);
  methods[244].selector = @selector(setEllipsizeWithId:withNSString:);
  methods[245].selector = @selector(nativeSetLineBreakModeWithInt:);
  methods[246].selector = @selector(nativeGetLineBreakMode);
  methods[247].selector = @selector(setLineSpacing);
  methods[248].selector = @selector(nativeSetLayoutManagerDelegate);
  methods[249].selector = @selector(postSetAttributeWithASWidgetAttribute:withNSString:withId:withASILifeCycleDecorator:);
  methods[250].selector = @selector(measureWidth);
  methods[251].selector = @selector(measureHeightWithInt:);
  methods[252].selector = @selector(nativeAddTextFieldDidChange);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "FOREGROUND_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 165, -1, -1 },
    { "VIEW_HOLDER_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 166, -1, -1 },
    { "WIDGET_REGEX", "LNSString;", .constantValue.asLong = 0, 0x1a, -1, 167, -1, -1 },
    { "LOCAL_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 168, -1, -1 },
    { "GROUP_NAME", "LNSString;", .constantValue.asLong = 0, 0x19, -1, 169, -1, -1 },
    { "uiView_", "LNSObject;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "measurableTextView_", "LASMeasurableTextView;", .constantValue.asLong = 0, 0x4, -1, -1, -1, -1 },
    { "fontDescriptors_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 170, -1 },
    { "html_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "escapeHtml_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "htmlConfig_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 171, -1 },
    { "mSpacingAdd_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mSpacingMult_", "F", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "locale_", "LJavaUtilLocale;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "regexSpecialCharacters", "LJavaUtilList;", .constantValue.asLong = 0, 0xa, -1, 172, 173, -1 },
    { "TEXT_ALIGN_CENTER", "I", .constantValue.asInt = ASUITextViewImpl_TEXT_ALIGN_CENTER, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_LEFT", "I", .constantValue.asInt = ASUITextViewImpl_TEXT_ALIGN_LEFT, 0x1a, -1, -1, -1, -1 },
    { "TEXT_ALIGN_RIGHT", "I", .constantValue.asInt = ASUITextViewImpl_TEXT_ALIGN_RIGHT, 0x1a, -1, -1, -1, -1 },
    { "drawableTint_", "LADColorStateList;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "ITALIC_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 174, -1, -1 },
    { "BOLD_FONT_TRAIT", "I", .constantValue.asLong = 0, 0xa, -1, 175, -1, -1 },
    { "NORMAL_FONT_TRAIT", "I", .constantValue.asInt = ASUITextViewImpl_NORMAL_FONT_TRAIT, 0x1a, -1, -1, -1, -1 },
    { "paddingLeft_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingRight_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingTop_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "paddingBottom_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "preVerticalAligment_", "LASBaseMeasurableView_VerticalAligment;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "originalTintColor_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "maxLength_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "numericPattern_", "LJavaUtilRegexPattern;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "editorAction_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onFocusChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectAllOnFocus_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "selectOnceOnFocus_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "scrollHorizontally_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onAfterTextChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onBeforeTextChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onTextChange_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "start_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "end_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "count_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "after_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "str_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "textAllCaps_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "builder_", "LASUITextViewImpl_UITextViewCommandBuilder;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "bean_", "LASUITextViewImpl_UITextViewBean;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "simpleWrapableView_", "LASSimpleWrapableView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "placeholderLabel_", "LNSObject;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "hintColor_", "LNSObject;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "callMeasureOnChange_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "lineSpacing_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "loadAttributes", "LNSString;", "updateMeasuredDimension", "II", "create", "LASIFragment;LJavaUtilMap;", "(Lcom/ashera/core/IFragment;Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;LASILifeCycleDecorator;", "getAttribute", "LASWidgetAttribute;LASILifeCycleDecorator;", "setGravity", "LNSObject;", "onRtlPropertiesChanged", "I", "setEms", "setMinEms", "setMaxEms", "setWidth", "setHeight", "setMaxLines", "setLines", "setMinLines", "setMaxHeight", "setMaxWidth", "setMinHeight", "setMinWidth", "setTypeFace", "LNSObject;LNSString;", "setFontFamily", "setTextStyle", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "initHtml", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;)V", "setLineSpacingMultiplier", "setLineSpacingExtra", "setNumeric", "setDigits", "drawableStateChange", "LNSString;LADDrawable;", "handleHtmlText", "nativeSetText", "nativeSetHtmlText", "setMyTextSize", "nativeSetTextSize", "setDrawablePadding", "setDrawableBottom", "setDrawableTop", "setDrawableRight", "LNSString;LNSObject;", "setDrawableRightInternal", "setDrawableLeft", "setDrawableLeftInternal", "getImageHeight", "getImageWidth", "setDrawableTintMode", "setDrawableTint", "nativeSetCustomFont", "ILASFontDescriptor;", "nativeSetFontStyle", "setTextColor", "setPaddingLeft", "setPaddingRight", "setPaddingTop", "setPaddingBottom", "setPaddingVertical", "setPaddingHorizontal", "setPaddingEnd", "setPaddingStart", "setPadding", "nativeSetPaddingBottom", "nativeSetPaddingLeft", "nativeSetPaddingRight", "nativeSetPaddingTop", "adjustContentSize", "isContentOffsetCorrectionNeeded", "setContentOffset", "ILNSObject;", "setTextColorHighlight", "setMyText", "nativeTriggerChangeHandlers", "nativeTriggerBeforeChangeHandlers", "setCursorVisible", "nativeGetTintColor", "Z", "setCapitalize", "nativeSetCapitalize", "setAutoText", "nativeSetCorrectionType", "setMaxLength", "setEnabled", "getLocaleValueFromRS", "LNSString;LNSString;", "numericPatternMatches", "addNumericListener", "LJavaUtilRegexPattern;", "setPhoneNumber", "nativeSetPhoneNumber", "setInputType", "nativeSetKeyboardType", "setImeOptions", "nativeSetImeOptions", "setOnEditorAction", "setInputAccessoryViewDoneButton", "nativeSetInputAccessoryViewDoneButton", "setOnFocus", "setSelectAllOnFocus", "setSelectAll", "nativeSetSelectAll", "F", "setSingleLine", "setScrollHorizontally", "nativeSetScrollEnabled", "LNSObject;Z", "setTextColorLink", "LADColorStateList;", "handleOnBeforeTextChange", "LNSString;III", "getTextChangedListener", "setOnAfterTextChange", "setBeforeOnTextChange", "setOnTextChange", "setTextAllCaps", "nativeSetContentSize", "LNSObject;II", "setInputView", "setNativeInputView", "setError", "showError", "setHintTextFormat", "setText", "LNSObject;LNSObject;", "setUsesStandardTextScaling", "setIsEditable", "setAllowsEditingTextAttributes", "setClearsOnInsertion", "setIsSelectable", "checkIosVersion", "setId", "getPlugin", "setForegroundFrame", "IIII", "createWrapperView", "LNSObject;I", "createWrapperViewHolder", "nativeAddForeGround", "LASIWidget;", "createWrapperViewHolderNative", "nativeCreate", "nativeCreateView", "createPlaceHolder", "setHint", "setHintColor", "nativeSetHintColor", "updateBounds", "IILNSObject;LNSObject;", "nativeMakeFrameForChildWidget", "nativeSetEnabled", "nativeSetMaxLines", "setEllipsize", "nativeSetLineBreakMode", "postSetAttribute", "measureHeight", &ASUITextViewImpl_FOREGROUND_REGEX, &ASUITextViewImpl_VIEW_HOLDER_REGEX, &ASUITextViewImpl_WIDGET_REGEX, &ASUITextViewImpl_LOCAL_NAME, &ASUITextViewImpl_GROUP_NAME, "Ljava/util/Map<Ljava/lang/String;Lcom/ashera/model/FontDescriptor;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", &ASUITextViewImpl_regexSpecialCharacters, "Ljava/util/List<Ljava/lang/String;>;", &ASUITextViewImpl_ITALIC_FONT_TRAIT, &ASUITextViewImpl_BOLD_FONT_TRAIT, "LASUITextViewImpl_InputView;LASUITextViewImpl_DrawableTintMode;LASUITextViewImpl_Font;LASUITextViewImpl_TextStyle;LASUITextViewImpl_Capitalize;LASUITextViewImpl_Numeric;LASUITextViewImpl_InputType;LASUITextViewImpl_ImeOptions;LASUITextViewImpl_UITextViewExt;LASUITextViewImpl_OnEditorActionListener;LASUITextViewImpl_OnFocusChangeListener;LASUITextViewImpl_TextChangedListener;LASUITextViewImpl_UITextViewCommandBuilder;LASUITextViewImpl_UITextViewBean;" };
  static const J2ObjcClassInfo _ASUITextViewImpl = { "UITextViewImpl", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 253, 51, -1, 176, -1, -1, -1 };
  return &_ASUITextViewImpl;
}

+ (void)initialize {
  if (self == [ASUITextViewImpl class]) {
    ASUITextViewImpl_regexSpecialCharacters = JavaUtilArrays_asListWithNSObjectArray_([IOSObjectArray newArrayWithObjects:(id[]){ @"\\", @".", @"+", @"*", @"?", @"[", @"^", @"]", @"$", @"(", @")", @"{", @"}", @"=", @"!", @"<", @">", @"|", @":", @"-" } count:20 type:NSString_class_()]);
    ASUITextViewImpl_ITALIC_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitItalic);
    ASUITextViewImpl_BOLD_FONT_TRAIT = JreLoadStatic(ASLayoutNativeVars, UIFontDescriptorTraitBold);
    J2OBJC_SET_INITIALIZED(ASUITextViewImpl)
  }
}

@end

void ASUITextViewImpl_init(ASUITextViewImpl *self) {
  ASBaseWidget_initWithNSString_withNSString_(self, ASUITextViewImpl_GROUP_NAME, ASUITextViewImpl_LOCAL_NAME);
  self->locale_ = JavaUtilLocale_getDefault();
  self->maxLength_ = -1;
  self->textAllCaps_ = false;
}

ASUITextViewImpl *new_ASUITextViewImpl_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl, init)
}

ASUITextViewImpl *create_ASUITextViewImpl_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl, init)
}

void ASUITextViewImpl_setWidgetOnNativeClass(ASUITextViewImpl *self) {
  ((ASUITextView*) self.uiView).widget = self;
}

void ASUITextViewImpl_setGravityWithId_(ASUITextViewImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setGravityWithInt:value];
  jint major = value & ASGravityConverter_VERTICAL_GRAVITY_MASK;
  ASUITextViewImpl_updateTextAlignment(self);
  switch (major) {
    case ASGravityConverter_TOP:
    ASUITextViewImpl_setVerticalAligmentTop(self);
    break;
    case ASGravityConverter_BOTTOM:
    ASUITextViewImpl_setVerticalAligmentBottom(self);
    break;
    case ASGravityConverter_CENTER_VERTICAL:
    ASUITextViewImpl_setVerticalAligmentCenter(self);
    break;
    default:
    ASUITextViewImpl_setVerticalAligmentTop(self);
    break;
  }
}

void ASUITextViewImpl_updateTextAlignment(ASUITextViewImpl *self) {
  ADLayout_Alignment *minor = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getAlignmentOfLayout];
  jboolean isRtl = false;
  jboolean hasTextDirection = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRawTextDirection] != 0;
  if (hasTextDirection) {
    id<ADTextDirectionHeuristic> heuristic = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTextDirectionHeuristic];
    NSString *text = (NSString *) cast_chk(ASUITextViewImpl_getMyText(self), [NSString class]);
    isRtl = [((id<ADTextDirectionHeuristic>) nil_chk(heuristic)) isRtlWithJavaLangCharSequence:text withInt:0 withInt:[((NSString *) nil_chk(text)) java_length]];
  }
  switch ([minor ordinal]) {
    case ADLayout_Alignment_Enum_ALIGN_LEFT:
    ASUITextViewImpl_setHorizontalAligmentLeft(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_NORMAL:
    if (hasTextDirection) {
      if (isRtl) {
        ASUITextViewImpl_setHorizontalAligmentRight(self);
      }
      else {
        ASUITextViewImpl_setHorizontalAligmentLeft(self);
      }
    }
    else {
      ASUITextViewImpl_setHorizontalAligmentLeft(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_RIGHT:
    ASUITextViewImpl_setHorizontalAligmentRight(self);
    break;
    case ADLayout_Alignment_Enum_ALIGN_OPPOSITE:
    if (hasTextDirection) {
      if (isRtl) {
        ASUITextViewImpl_setHorizontalAligmentLeft(self);
      }
      else {
        ASUITextViewImpl_setHorizontalAligmentRight(self);
      }
    }
    else {
      ASUITextViewImpl_setHorizontalAligmentRight(self);
    }
    break;
    case ADLayout_Alignment_Enum_ALIGN_CENTER:
    ASUITextViewImpl_setHorizontalAligmentCenter(self);
    break;
    default:
    ASUITextViewImpl_setHorizontalAligmentLeft(self);
    break;
  }
}

id ASUITextViewImpl_getGravity(ASUITextViewImpl *self) {
  ASBaseMeasurableView_VerticalAligment *verticalAligment = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment];
  if (verticalAligment == nil) {
    verticalAligment = JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top);
  }
  jint gravityVertical = 0;
  switch ([verticalAligment ordinal]) {
    case ASBaseMeasurableView_VerticalAligment_Enum_top:
    gravityVertical = ASGravityConverter_TOP;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_middle:
    gravityVertical = ASGravityConverter_CENTER_VERTICAL;
    break;
    case ASBaseMeasurableView_VerticalAligment_Enum_bottom:
    gravityVertical = ASGravityConverter_BOTTOM;
    break;
    default:
    break;
  }
  jint aligment = ASUITextViewImpl_getTextAlignment(self);
  jint gravitHorizontal = 0;
  switch (aligment) {
    case ASUITextViewImpl_TEXT_ALIGN_CENTER:
    gravitHorizontal = ASGravityConverter_CENTER_HORIZONTAL;
    break;
    case ASUITextViewImpl_TEXT_ALIGN_LEFT:
    gravitHorizontal = ASGravityConverter_LEFT;
    break;
    case ASUITextViewImpl_TEXT_ALIGN_RIGHT:
    gravitHorizontal = ASGravityConverter_RIGHT;
    break;
    default:
    break;
  }
  jint gravity = gravitHorizontal | gravityVertical;
  return JavaLangInteger_valueOfWithInt_(gravity);
}

id ASUITextViewImpl_getMinHeight(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinHeight]);
}

id ASUITextViewImpl_getMinWidth(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinWidth]);
}

void ASUITextViewImpl_setEmsWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_setMinEmsWithId_(self, objValue);
  ASUITextViewImpl_setMaxEmsWithId_(self, objValue);
}

void ASUITextViewImpl_setMinEmsWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setMaxEmsWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxEmsWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setWidthWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_setMinWidthWithId_(self, objValue);
  ASUITextViewImpl_setMaxWidthWithId_(self, objValue);
}

void ASUITextViewImpl_setHeightWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_setMinHeightWithId_(self, objValue);
  ASUITextViewImpl_setMaxHeightWithId_(self, objValue);
}

void ASUITextViewImpl_setMaxLinesWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setLinesWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_setMinLinesWithId_(self, objValue);
  ASUITextViewImpl_setMaxLinesWithId_(self, objValue);
}

void ASUITextViewImpl_setMinLinesWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinLinesWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setMaxHeightWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setMaxWidthWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setMinHeightWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinHeightWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

void ASUITextViewImpl_setMinWidthWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinWidthWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  ASUITextViewImpl_addMinMaxListener(self);
}

id ASUITextViewImpl_getWidth(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getWidth]);
}

jint ASUITextViewImpl_getHeight(ASUITextViewImpl *self) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getHeight];
}

void ASUITextViewImpl_setTypeFaceWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue) {
  ASUITextViewImpl_setFontFamilyWithId_withNSString_(self, objValue, strValue);
}

void ASUITextViewImpl_setFontFamilyWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    objValue = ASPluginInvoker_convertFromWithASIConverter_withJavaUtilMap_withId_withASIFragment_(ASConverterFactory_getWithNSString_(ASCommonConverters_font), nil, strValue, self->fragment_);
  }
  self->fontDescriptors_ = (id<JavaUtilMap>) cast_check(objValue, JavaUtilMap_class_());
  jint style = ASUITextViewImpl_nativeGetFontStyle(self);
  jint height = ASUITextViewImpl_nativeGetFontSize(self);
  NSString *weight = @"400";
  if ((style & ASUITextViewImpl_BOLD_FONT_TRAIT) != 0) {
    weight = @"700";
  }
  NSString *fontStyle = @"normal";
  if ((style & ASUITextViewImpl_ITALIC_FONT_TRAIT) != 0) {
    fontStyle = @"italic";
  }
  ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
  ASUITextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
}

void ASUITextViewImpl_setTextStyleWithId_(ASUITextViewImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  if (self->fontDescriptors_ != nil) {
    jint height = ASUITextViewImpl_nativeGetFontSize(self);
    NSString *weight = @"400";
    if ((value & (jint) 0x1) != 0) {
      weight = @"700";
    }
    NSString *fontStyle = @"normal";
    if ((value & (jint) 0x2) != 0) {
      fontStyle = @"italic";
    }
    ASFontDescriptor *fontDescriptor = [((id<JavaUtilMap>) nil_chk(self->fontDescriptors_)) getWithId:JreStrcat("$C$", fontStyle, '_', weight)];
    ASUITextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(self, height, fontDescriptor);
  }
  else {
    jint style = ASUITextViewImpl_NORMAL_FONT_TRAIT;
    if ((value & (jint) 0x1) != 0) {
      style = style | ASUITextViewImpl_BOLD_FONT_TRAIT;
    }
    if ((value & (jint) 0x2) != 0) {
      style = style | ASUITextViewImpl_ITALIC_FONT_TRAIT;
    }
    ASUITextViewImpl_nativeSetFontStyleWithInt_(self, style);
  }
}

void ASUITextViewImpl_setFirstBaselineToTopHeightWithId_(ASUITextViewImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewImpl_getFont(self));
  jint firstBaselineToTopHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsTop;
  if (ASUITextViewImpl_getIncludeFontPadding(self)) {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_;
  }
  else {
    fontMetricsTop = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->ascent_;
  }
  if (firstBaselineToTopHeight > JavaLangMath_absWithInt_(fontMetricsTop)) {
    jint paddingTop = firstBaselineToTopHeight - (-fontMetricsTop);
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:paddingTop withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue]];
  }
}

jboolean ASUITextViewImpl_getIncludeFontPadding(ASUITextViewImpl *self) {
  return false;
}

id ASUITextViewImpl_getFirstBaselineToTopHeight(ASUITextViewImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] - ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->top_);
}

void ASUITextViewImpl_setLastBaselineToBottomHeightWithId_(ASUITextViewImpl *self, id objValue) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewImpl_getFont(self));
  jint lastBaselineToBottomHeight = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  jint fontMetricsBottom;
  if (ASUITextViewImpl_getIncludeFontPadding(self)) {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_;
  }
  else {
    fontMetricsBottom = ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->descent_;
  }
  if (lastBaselineToBottomHeight > JavaLangMath_absWithInt_(fontMetricsBottom)) {
    jint paddingBottom = lastBaselineToBottomHeight - fontMetricsBottom;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setPaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingLeft], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingTop], [JavaLangInteger class]))) intValue] withInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingRight], [JavaLangInteger class]))) intValue] withInt:paddingBottom];
  }
}

id ASUITextViewImpl_getLastBaselineToBottomHeight(ASUITextViewImpl *self) {
  ASFontMetricsDescriptor *fontMetrics = ASPluginInvoker_getFontMetricsWithId_(ASUITextViewImpl_getFont(self));
  return JavaLangInteger_valueOfWithInt_([((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk([self getPaddingBottom], [JavaLangInteger class]))) intValue] + ((ASFontMetricsDescriptor *) nil_chk(fontMetrics))->bottom_);
}

void ASUITextViewImpl_initHtmlWithJavaUtilMap_(ASUITextViewImpl *self, id<JavaUtilMap> params) {
  if ([((id<JavaUtilMap>) nil_chk(params)) containsKeyWithId:@"html"]) {
    self->html_ = [nil_chk([params getWithId:@"html"]) isEqual:@"true"];
    if (self->html_) {
      self->htmlConfig_ = new_JavaUtilHashMap_init();
    }
    else {
      if (self->escapeHtml_) {
        [self applyAttributeCommandWithNSString:@"text" withNSString:ASCommonConverters_command_escapehtml withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithLength:0 type:NSObject_class_()]];
      }
    }
  }
}

void ASUITextViewImpl_setLineSpacingMultiplierWithId_(ASUITextViewImpl *self, id objValue) {
  self->mSpacingMult_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
  ASUITextViewImpl_setLineSpacing(self);
}

void ASUITextViewImpl_setLineSpacingExtraWithId_(ASUITextViewImpl *self, id objValue) {
  self->mSpacingAdd_ = [((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class]))) floatValue];
  ASUITextViewImpl_setLineSpacing(self);
}

id ASUITextViewImpl_getLineSpacingMultiplier(ASUITextViewImpl *self) {
  return JavaLangFloat_valueOfWithFloat_(self->mSpacingMult_);
}

id ASUITextViewImpl_getLineSpacingExtra(ASUITextViewImpl *self) {
  return JavaLangFloat_valueOfWithFloat_(self->mSpacingAdd_);
}

NSString *ASUITextViewImpl_getDigitString(ASUITextViewImpl *self) {
  NSString *defaultDigits = @"0123456789";
  IOSObjectArray *digits = ASUITextViewImpl_getDigitStrings(self);
  JavaLangStringBuilder *stringBuilder = new_JavaLangStringBuilder_init();
  for (jint i = 0; i < 10; i++) {
    if ([((NSString *) nil_chk(IOSObjectArray_Get(nil_chk(digits), i))) java_length] > 1) {
      return defaultDigits;
    }
    (void) [stringBuilder appendWithId:JavaLangCharacter_valueOfWithChar_([((NSString *) nil_chk(IOSObjectArray_Get(digits, i))) charAtWithInt:0])];
  }
  return [stringBuilder description];
}

NSString *ASUITextViewImpl_getSignedChars(ASUITextViewImpl *self) {
  NSString *defaultSignedChars = @"\\+\\-";
  NSString *minusString = ASUITextViewImpl_getMinusString(self);
  NSString *plusString = ASUITextViewImpl_getPlusString(self);
  if ([((NSString *) nil_chk(minusString)) java_length] > 1 || [((NSString *) nil_chk(plusString)) java_length] > 1) {
    return defaultSignedChars;
  }
  NSString *minus = minusString;
  NSString *plus = plusString;
  if ([((id<JavaUtilList>) nil_chk(ASUITextViewImpl_regexSpecialCharacters)) containsWithId:minus]) {
    minus = JreStrcat("C$", '\\', minus);
  }
  if ([((id<JavaUtilList>) nil_chk(ASUITextViewImpl_regexSpecialCharacters)) containsWithId:plus]) {
    plus = JreStrcat("C$", '\\', plus);
  }
  return JreStrcat("$$", plus, minus);
}

NSString *ASUITextViewImpl_getDecimalChars(ASUITextViewImpl *self) {
  NSString *defaultDecimalChars = @"\\.";
  NSString *separatorString = ASUITextViewImpl_getDecimalCharacter(self);
  if ([((NSString *) nil_chk(separatorString)) java_length] > 1) {
    return defaultDecimalChars;
  }
  NSString *decimal = separatorString;
  if ([((id<JavaUtilList>) nil_chk(ASUITextViewImpl_regexSpecialCharacters)) containsWithId:decimal]) {
    decimal = JreStrcat("C$", '\\', decimal);
  }
  return decimal;
}

void ASUITextViewImpl_setNumericWithId_(ASUITextViewImpl *self, id objValue) {
  jint value = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
  ASUITextViewImpl_removeNumericListener(self);
  JavaLangStringBuilder *regex = new_JavaLangStringBuilder_init();
  NSString *digits = ASUITextViewImpl_getDigitString(self);
  if ((value & (jint) 0x3) != 1) {
    NSString *signedChars = ASUITextViewImpl_getSignedChars(self);
    (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]?", [IOSObjectArray newArrayWithObjects:(id[]){ signedChars } count:1 type:NSObject_class_()])];
  }
  if ((value & (jint) 0x5) != 1) {
    NSString *decimalChars = ASUITextViewImpl_getDecimalChars(self);
    (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]*[%s]?[%s]*", [IOSObjectArray newArrayWithObjects:(id[]){ digits, decimalChars, digits } count:3 type:NSObject_class_()])];
  }
  else {
    (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]*", [IOSObjectArray newArrayWithObjects:(id[]){ digits } count:1 type:NSObject_class_()])];
  }
  if ([regex java_length] > 0) {
    JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_([regex description]);
    ASUITextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(self, pattern);
  }
}

void ASUITextViewImpl_setDigitsWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_removeNumericListener(self);
  JavaLangStringBuilder *regex = new_JavaLangStringBuilder_init();
  NSString *digits = (NSString *) cast_chk(objValue, [NSString class]);
  (void) [regex appendWithNSString:NSString_java_formatWithNSString_withNSObjectArray_(@"[%s]*", [IOSObjectArray newArrayWithObjects:(id[]){ digits } count:1 type:NSObject_class_()])];
  if ([regex java_length] > 0) {
    JavaUtilRegexPattern *pattern = JavaUtilRegexPattern_compileWithNSString_([regex description]);
    ASUITextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(self, pattern);
  }
}

void ASUITextViewImpl_drawableStateChangeWithNSString_withADDrawable_(ASUITextViewImpl *self, NSString *type, ADDrawable *dr) {
  IOSIntArray *state = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawableState];
  if (dr != nil && [dr isStateful] && [dr setStateWithIntArray:state]) {
    switch (JreIndexOfStr(type, (id[]){ @"bottom", @"top", @"left", @"right" }, 4)) {
      case 0:
      ASUITextViewImpl_setDrawableBottomWithId_(self, dr);
      break;
      case 1:
      ASUITextViewImpl_setDrawableTopWithId_(self, dr);
      break;
      case 2:
      ASUITextViewImpl_setDrawableLeftWithNSString_withId_(self, @"drawableLeft", dr);
      break;
      case 3:
      ASUITextViewImpl_setDrawableRightWithNSString_withId_(self, @"drawableRight", dr);
      break;
      default:
      break;
    }
  }
  [self invalidate];
}

void ASUITextViewImpl_handleHtmlTextWithNSString_(ASUITextViewImpl *self, NSString *text) {
  ASUITextViewImpl_nativeSetHtmlTextWithId_(self, [((id<ASAttributedString>) nil_chk(ASHtml_fromHtmlWithNSString_withJavaUtilMap_withASIFragment_(text, self->htmlConfig_, self->fragment_))) get]);
}

void ASUITextViewImpl_nativeSetTextWithNSString_(ASUITextViewImpl *self, NSString *text) {
  [((ASUITextView*)self->uiView_) setText:text];
}

void ASUITextViewImpl_nativeSetHtmlTextWithId_(ASUITextViewImpl *self, id text) {
  [((ASUITextView*)self->uiView_) setAttributedText : (NSMutableAttributedString*)text];
}

id ASUITextViewImpl_getMyText(ASUITextViewImpl *self) {
  return ((ASUITextView*)self.uiView).text;
}

id ASUITextViewImpl_getTextSize(ASUITextViewImpl *self) {
  return [JavaLangFloat valueOfWithFloat:((ASUITextView*)self.uiView).font.pointSize];
}

void ASUITextViewImpl_setMyTextSizeWithId_(ASUITextViewImpl *self, id objValue) {
  jfloat fontSize = [((JavaLangFloat *) nil_chk(((JavaLangFloat *) cast_chk(objValue, [JavaLangFloat class])))) floatValue] * [((id<ASIActivity>) nil_chk([((id<ASIFragment>) nil_chk([self getFragment])) getRootActivity])) getScaleFactor];
  ASUITextViewImpl_nativeSetTextSizeWithInt_(self, JreFpToInt(fontSize));
}

void ASUITextViewImpl_nativeSetTextSizeWithInt_(ASUITextViewImpl *self, jint value) {
  [((ASUITextView*)self.uiView) setFont: [((ASUITextView*)self.uiView).font fontWithSize: value]];
}

void ASUITextViewImpl_setVerticalAligmentCenter(ASUITextViewImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, middle)];
  ASUITextViewImpl_nativeSetVerticalAligmentCenter(self);
}

void ASUITextViewImpl_setVerticalAligmentBottom(ASUITextViewImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, bottom)];
  ASUITextViewImpl_nativeSetVerticalAligmentBottom(self);
}

void ASUITextViewImpl_setVerticalAligmentTop(ASUITextViewImpl *self) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setVerticalAligmentWithASBaseMeasurableView_VerticalAligment:JreLoadEnum(ASBaseMeasurableView_VerticalAligment, top)];
  ASUITextViewImpl_nativeSetVerticalAligmentTop(self);
}

void ASUITextViewImpl_setHorizontalAligmentCenter(ASUITextViewImpl *self) {
  ((ASUITextView*)self.uiView).textAlignment = NSTextAlignmentCenter;
}

void ASUITextViewImpl_setHorizontalAligmentRight(ASUITextViewImpl *self) {
  ASUITextViewImpl_setHorizontalAligmentRightInternal(self);
}

void ASUITextViewImpl_setHorizontalAligmentRightInternal(ASUITextViewImpl *self) {
  ((ASUITextView*)self.uiView).textAlignment = NSTextAlignmentRight;
}

void ASUITextViewImpl_setHorizontalAligmentLeft(ASUITextViewImpl *self) {
  ASUITextViewImpl_setHorizontalAligmentLeftInternal(self);
}

void ASUITextViewImpl_setHorizontalAligmentLeftInternal(ASUITextViewImpl *self) {
  ((ASUITextView*)self.uiView).textAlignment = NSTextAlignmentLeft;
}

jint ASUITextViewImpl_getTextAlignment(ASUITextViewImpl *self) {
  int alignment = (int) ((ASUITextView*)self.uiView).textAlignment;
  
  if (alignment == NSTextAlignmentCenter) {
    return 2;
  }
  
  if (alignment == NSTextAlignmentLeft) {
    return 0;
  }
  
  if (alignment == NSTextAlignmentRight) {
    return 1;
  }
  
  return 0;
}

void ASUITextViewImpl_nativeSetVerticalAligmentBottom(ASUITextViewImpl *self) {
}

void ASUITextViewImpl_nativeSetVerticalAligmentTop(ASUITextViewImpl *self) {
}

void ASUITextViewImpl_nativeSetVerticalAligmentCenter(ASUITextViewImpl *self) {
}

void ASUITextViewImpl_setDrawablePaddingWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setDrawablePaddingWithInt:[((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]];
  [self updatePadding];
}

void ASUITextViewImpl_setDrawableBottomWithId_(ASUITextViewImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setBottomDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setBottomDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"bottom" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASUITextViewImpl_setDrawableTopWithId_(ASUITextViewImpl *self, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTopDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTopDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"top" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASUITextViewImpl_setDrawableRightWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue) {
  if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
    ASUITextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
  }
  else {
    ASUITextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
  }
}

void ASUITextViewImpl_setDrawableRightInternalWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setRightDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setRightDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"right" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

void ASUITextViewImpl_setDrawableLeftWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue) {
  if (objValue != nil) {
    if (ASViewImpl_isRTLLayoutWithASIWidget_(self)) {
      ASUITextViewImpl_setDrawableRightInternalWithNSString_withId_(self, originalAttr, objValue);
    }
    else {
      ASUITextViewImpl_setDrawableLeftInternalWithNSString_withId_(self, originalAttr, objValue);
    }
  }
}

void ASUITextViewImpl_setDrawableLeftInternalWithNSString_withId_(ASUITextViewImpl *self, NSString *originalAttr, id objValue) {
  if ([@"@null" isEqual:objValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLeftDrawableWithADDrawable:nil];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:false withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
  }
  else if (objValue != nil && [objValue isKindOfClass:[ADDrawable class]]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLeftDrawableWithADDrawable:(ADDrawable *) cast_chk(objValue, [ADDrawable class])];
    [self applyAttributeCommandWithNSString:originalAttr withNSString:@"drawDrawableIcon" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){  } count:0 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"left" } count:1 type:NSObject_class_()]];
    [self updatePadding];
  }
}

jint ASUITextViewImpl_getImageHeightWithId_(ASUITextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.height;
  }
  
  return 0;
}

jint ASUITextViewImpl_getImageWidthWithId_(ASUITextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[UIImage class]]) {
    UIImage* image = ((UIImage*) objValue);
    return image.size.width;
  }
  
  return 0;
}

id ASUITextViewImpl_getDrawablePadding(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawablePadding]);
}

void ASUITextViewImpl_setDrawableTintModeWithId_(ASUITextViewImpl *self, id value) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTintMode", value } count:2 type:NSObject_class_()]];
  }
}

void ASUITextViewImpl_setDrawableTintWithId_(ASUITextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    self->drawableTint_ = colorStateList;
    objValue = JavaLangInteger_valueOfWithInt_([((ADColorStateList *) nil_chk(self->drawableTint_)) getColorForStateWithIntArray:[((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getDrawableState] withInt:ADColor_RED]);
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getLeftDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableLeft" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableStart" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getRightDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableRight" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
    [self applyAttributeCommandWithNSString:@"drawableEnd" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTopDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableTop" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getBottomDrawable] != nil) {
    [self applyAttributeCommandWithNSString:@"drawableBottom" withNSString:@"cgTintColor" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableTint", ASViewImpl_getColorWithId_(objValue) } count:2 type:NSObject_class_()]];
  }
}

jint ASUITextViewImpl_nativeGetFontSize(ASUITextViewImpl *self) {
  return JreFpToInt(JavaLangMath_ceilWithDouble_([((JavaLangFloat *) nil_chk((JavaLangFloat *) cast_chk(ASUITextViewImpl_getTextSize(self), [JavaLangFloat class]))) floatValue]));
}

jint ASUITextViewImpl_nativeGetFontStyle(ASUITextViewImpl *self) {
  ASUITextView* label = ((ASUITextView*)self->uiView_);
  return label.font.fontDescriptor.symbolicTraits;
}

void ASUITextViewImpl_nativeSetCustomFontWithInt_withASFontDescriptor_(ASUITextViewImpl *self, jint height, ASFontDescriptor *fontDescriptor) {
  ASUITextView* label = ((ASUITextView*)self->uiView_);
  UIFont* font = [UIFont fontWithName:[fontDescriptor getName] size:height];
  if (font == nil) {
    [NSException raise:@"InitNotImplemented" format:@"%@", [NSString stringWithFormat:@"Failed to load the %@ font. Make sure the font file is included in the project and the font name is spelled correctly.", [fontDescriptor getName]]];
  }
  if ([fontDescriptor getStyle] != 0) {
    UIFontDescriptor* fontD = [font.fontDescriptor fontDescriptorWithSymbolicTraits:[fontDescriptor getStyle]];
    ((ASUITextView*)label).font = [UIFont fontWithDescriptor:fontD size:0];
  } else {
    ((ASUITextView*)label).font = font;
  }
}

void ASUITextViewImpl_nativeSetFontStyleWithInt_(ASUITextViewImpl *self, jint style) {
  ASUITextView* label = ((ASUITextView*)self->uiView_);
  UIFontDescriptor* fontD = [label.font.fontDescriptor fontDescriptorWithSymbolicTraits:style];
  ((ASUITextView*)label).font = [UIFont fontWithDescriptor:fontD size:0];
}

void ASUITextViewImpl_setTextColorWithId_(ASUITextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCurrentTextColor]);
  }
  [self setTextColorWithId:self->uiView_ withId:ASViewImpl_getColorWithId_(objValue)];
}

id ASUITextViewImpl_getTextColorState(ASUITextViewImpl *self) {
  return [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getTextColors];
}

jint ASUITextViewImpl_getLineHeight(ASUITextViewImpl *self) {
  return ceil(((ASUITextView*)self.uiView).font.lineHeight);
}

jint ASUITextViewImpl_getBorderWidth(ASUITextViewImpl *self) {
  return 0;
}

id ASUITextViewImpl_getPaddingEnd(ASUITextViewImpl *self) {
  return [self getPaddingRight];
}

id ASUITextViewImpl_getPaddingStart(ASUITextViewImpl *self) {
  return [self getPaddingLeft];
}

void ASUITextViewImpl_setPaddingVerticalWithId_(ASUITextViewImpl *self, id objValue) {
  [self setPaddingTopWithId:objValue];
  [self setPaddingBottomWithId:objValue];
}

void ASUITextViewImpl_setPaddingHorizontalWithId_(ASUITextViewImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
  [self setPaddingRightWithId:objValue];
}

void ASUITextViewImpl_setPaddingEndWithId_(ASUITextViewImpl *self, id objValue) {
  [self setPaddingRightWithId:objValue];
}

void ASUITextViewImpl_setPaddingStartWithId_(ASUITextViewImpl *self, id objValue) {
  [self setPaddingLeftWithId:objValue];
}

void ASUITextViewImpl_setPaddingWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_setPaddingVerticalWithId_(self, objValue);
  ASUITextViewImpl_setPaddingHorizontalWithId_(self, objValue);
}

void ASUITextViewImpl_nativeSetPaddingBottomWithInt_(ASUITextViewImpl *self, jint value) {
  ASUITextView* label = ((ASUITextView*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, value, edgeInsets.right)];
}

void ASUITextViewImpl_nativeSetPaddingLeftWithInt_(ASUITextViewImpl *self, jint value) {
  ASUITextView* label = ((ASUITextView*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(edgeInsets.top, value, edgeInsets.bottom, edgeInsets.right)];
}

void ASUITextViewImpl_nativeSetPaddingRightWithInt_(ASUITextViewImpl *self, jint value) {
  ASUITextView* label = ((ASUITextView*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(edgeInsets.top, edgeInsets.left, edgeInsets.bottom, value)];
}

void ASUITextViewImpl_nativeSetPaddingTopWithInt_(ASUITextViewImpl *self, jint value) {
  ASUITextView* label = ((ASUITextView*) self.uiView);
  UIEdgeInsets edgeInsets = label.textContainerInset;
  [label setTextContainerInset:UIEdgeInsetsMake(value, edgeInsets.left, edgeInsets.bottom, edgeInsets.right)];
}

void ASUITextViewImpl_adjustContentSizeWithInt_withInt_(ASUITextViewImpl *self, jint width, jint height) {
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment] == nil && self->preVerticalAligment_ == nil) {
    return;
  }
  if (![((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) isVerticalAlignTop]) {
    if (ASUITextViewImpl_isContentOffsetCorrectionNeededWithId_(self, self->uiView_)) {
      ASRectM *bounds = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getWidgetBoundsWithInt:width withInt:height withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->uiView_ } count:1 type:NSObject_class_()]];
      ASUITextViewImpl_setContentOffsetWithInt_withId_(self, ((ASRectM *) nil_chk(bounds))->y_, self->uiView_);
    }
  }
  else {
    if (self->preVerticalAligment_ == nil || [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment] != self->preVerticalAligment_) {
      ASUITextViewImpl_setContentOffsetWithInt_withId_(self, 0, self->uiView_);
    }
  }
  self->preVerticalAligment_ = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getVerticalAligment];
}

jboolean ASUITextViewImpl_isContentOffsetCorrectionNeededWithId_(ASUITextViewImpl *self, id view) {
  ASUITextView* tv = ((ASUITextView*)view);
  return  [tv contentSize].height <= [tv bounds].size.height;
}

void ASUITextViewImpl_setContentOffsetWithInt_withId_(ASUITextViewImpl *self, jint topCorrect, id view) {
  ((ASUITextView*) view).topCorrect = -topCorrect;
  [((ASUITextView*) view) setContentOffset :(CGPoint){.x = 0, .y = -topCorrect}];
}

void ASUITextViewImpl_setTextColorHighlightWithId_(ASUITextViewImpl *self, id objValue) {
  ASViewImpl_setTintColorWithId_withId_(self->uiView_, objValue);
}

id ASUITextViewImpl_getTextColorHighlight(ASUITextViewImpl *self) {
  return ASViewImpl_getTintColorWithId_(self->uiView_);
}

void ASUITextViewImpl_nativeTriggerChangeHandlersWithNSString_(ASUITextViewImpl *self, NSString *text) {
  [self handleOnTextChange];
  [self handleOnAfterTextChange];
}

void ASUITextViewImpl_nativeTriggerBeforeChangeHandlersWithNSString_(ASUITextViewImpl *self, NSString *text) {
  [self handleOnBeforeTextChangeWithNSString: text withInt:0 withInt: 0 withInt:text.length];
}

void ASUITextViewImpl_setCursorVisibleWithId_(ASUITextViewImpl *self, id objValue) {
  ASViewImpl_setTintColorWithId_withId_(self->uiView_, ASUITextViewImpl_nativeGetTintColorWithBoolean_(self, ![((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]));
}

id ASUITextViewImpl_nativeGetTintColorWithBoolean_(ASUITextViewImpl *self, jboolean clearColor) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  
  if (self->originalTintColor_ == nil) {
    self->originalTintColor_ = tv.tintColor;
  }
  
  if (clearColor) {
    if (CGColorEqualToColor(tv.tintColor.CGColor, [UIColor clearColor].CGColor)) {
      self->originalTintColor_ = tv.tintColor;
    }
    
    return [UIColor clearColor];
  }
  return self->originalTintColor_;
}

void ASUITextViewImpl_setCapitalizeWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_nativeSetCapitalizeWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASUITextViewImpl_nativeSetCapitalizeWithInt_(ASUITextViewImpl *self, jint capitalizeType) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  tv.autocapitalizationType = capitalizeType;
}

void ASUITextViewImpl_setAutoTextWithId_(ASUITextViewImpl *self, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    ASUITextViewImpl_nativeSetCorrectionTypeWithInt_(self, JreLoadStatic(ASLayoutNativeVars, UITextAutocorrectionTypeYes));
  }
  else {
    ASUITextViewImpl_nativeSetCorrectionTypeWithInt_(self, JreLoadStatic(ASLayoutNativeVars, UITextAutocorrectionTypeNo));
  }
}

void ASUITextViewImpl_nativeSetCorrectionTypeWithInt_(ASUITextViewImpl *self, jint capitalizeType) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  tv.autocorrectionType = capitalizeType;
}

jboolean ASUITextViewImpl_getCursorVisible(ASUITextViewImpl *self) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  return CGColorEqualToColor(tv.tintColor.CGColor, [UIColor clearColor].CGColor);
}

void ASUITextViewImpl_setMaxLengthWithId_(ASUITextViewImpl *self, id objValue) {
  self->maxLength_ = [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue];
}

IOSObjectArray *ASUITextViewImpl_getDigitStrings(ASUITextViewImpl *self) {
  NSString *symbol = ASUITextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(self, @"0,1,2,3,4,5,6,7,8,9", @"locale_digits_string");
  return [((NSString *) nil_chk(symbol)) java_split:@","];
}

NSString *ASUITextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(ASUITextViewImpl *self, NSString *defaultSymbol, NSString *key) {
  NSString *symbol = ASResourceBundleUtils_getStringWithNSString_withNSString_withASIFragment_(@"values/strings", key, self->fragment_);
  if (symbol == nil) {
    symbol = defaultSymbol;
  }
  return symbol;
}

NSString *ASUITextViewImpl_getPlusString(ASUITextViewImpl *self) {
  NSString *symbol = ASUITextViewImpl_getLocaleValueFromRSWithNSString_withNSString_(self, @"+", @"locale_plus_sign");
  return symbol;
}

NSString *ASUITextViewImpl_getMinusString(ASUITextViewImpl *self) {
  JavaTextDecimalFormatSymbols *symbols = new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(self->locale_);
  return JreStrcat("C", [symbols getMinusSign]);
}

NSString *ASUITextViewImpl_getDecimalCharacter(ASUITextViewImpl *self) {
  JavaTextDecimalFormatSymbols *symbols = new_JavaTextDecimalFormatSymbols_initWithJavaUtilLocale_(self->locale_);
  return JreStrcat("C", [symbols getDecimalSeparator]);
}

jboolean ASUITextViewImpl_numericPatternMatchesWithNSString_(ASUITextViewImpl *self, NSString *str) {
  return [((JavaUtilRegexMatcher *) nil_chk([((JavaUtilRegexPattern *) nil_chk(self->numericPattern_)) matcherWithJavaLangCharSequence:str])) matches];
}

void ASUITextViewImpl_removeNumericListener(ASUITextViewImpl *self) {
  self->numericPattern_ = nil;
}

void ASUITextViewImpl_addNumericListenerWithJavaUtilRegexPattern_(ASUITextViewImpl *self, JavaUtilRegexPattern *pattern) {
  self->numericPattern_ = pattern;
}

void ASUITextViewImpl_setPhoneNumberWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_nativeSetPhoneNumberWithBoolean_(self, [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]);
}

void ASUITextViewImpl_nativeSetPhoneNumberWithBoolean_(ASUITextViewImpl *self, jboolean value) {
  if (value) {
    [((ASUITextView*)self.uiView) setKeyboardType: UIKeyboardTypePhonePad];
  } else {
    [((ASUITextView*)self.uiView) setKeyboardType: UIKeyboardTypeDefault];
  }
}

id ASUITextViewImpl_getFont(ASUITextViewImpl *self) {
  return ((ASUITextView*)self.uiView).font;
}

void ASUITextViewImpl_setInputTypeWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_nativeSetKeyboardTypeWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASUITextViewImpl_nativeSetKeyboardTypeWithInt_(ASUITextViewImpl *self, jint value) {
  [((ASUITextView*)self.uiView) setKeyboardType: value];
}

id ASUITextViewImpl_getInputType(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASUITextViewImpl_nativeGetKeyboardType(self));
}

jint ASUITextViewImpl_nativeGetKeyboardType(ASUITextViewImpl *self) {
  return ((ASUITextView*)self.uiView).keyboardType;
}

void ASUITextViewImpl_setImeOptionsWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue) {
  ASUITextViewImpl_nativeSetImeOptionsWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
}

void ASUITextViewImpl_nativeSetImeOptionsWithInt_(ASUITextViewImpl *self, jint imeOptions) {
  [((ASUITextView*)self->uiView_) setReturnKeyType:imeOptions];
}

jint ASUITextViewImpl_nativeGetImeOptions(ASUITextViewImpl *self) {
  return ((ASUITextView*)self->uiView_).returnKeyType;
}

id ASUITextViewImpl_getImeOptions(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASUITextViewImpl_nativeGetImeOptions(self));
}

void ASUITextViewImpl_setOnEditorActionWithId_(ASUITextViewImpl *self, id objValue) {
  self->editorAction_ = objValue;
}

void ASUITextViewImpl_setOnEditorActionListener(ASUITextViewImpl *self) {
  id<ADTextView_OnEditorActionListener> onEditorActionListener;
  if ([self->editorAction_ isKindOfClass:[NSString class]]) {
    onEditorActionListener = new_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(self, (NSString *) self->editorAction_);
  }
  else {
    onEditorActionListener = (id<ADTextView_OnEditorActionListener>) cast_check(self->editorAction_, ADTextView_OnEditorActionListener_class_());
  }
  [((id<ADTextView_OnEditorActionListener>) nil_chk(onEditorActionListener)) onEditorActionWithADTextView:self->measurableTextView_ withInt:0 withADKeyEvent:new_ADKeyEvent_init()];
}

void ASUITextViewImpl_setInputAccessoryViewDoneButtonWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
}

void ASUITextViewImpl_nativeSetInputAccessoryViewDoneButtonWithNSString_(ASUITextViewImpl *self, NSString *title) {
  UIToolbar* keyboardToolbar = [[UIToolbar alloc] init];
  [keyboardToolbar sizeToFit];
  UIBarButtonItem *flexBarButton = [[UIBarButtonItem alloc]
  initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
  target:nil action:nil];
  UIBarButtonItem* doneBarButton = [[UIBarButtonItem alloc] initWithTitle:title style:UIBarButtonItemStylePlain
  target:self
  action:@selector(doneButtonPressed:withEvent:)];
  doneBarButton.style = UIBarButtonItemStylePlain;
  keyboardToolbar.items = @[flexBarButton, doneBarButton];
  ((ASUITextView*)self.uiView).inputAccessoryView = keyboardToolbar;
}

void ASUITextViewImpl_setOnFocusWithId_(ASUITextViewImpl *self, id objValue) {
  self->onFocusChange_ = objValue;
}

void ASUITextViewImpl_sendPressStartEvent(ASUITextViewImpl *self) {
  if (self->onFocusChange_ != nil) {
    id<ADView_OnFocusChangeListener> focusChangeListener;
    if ([self->onFocusChange_ isKindOfClass:[NSString class]]) {
      focusChangeListener = new_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(self, (NSString *) self->onFocusChange_);
    }
    else {
      focusChangeListener = (id<ADView_OnFocusChangeListener>) cast_check(self->onFocusChange_, ADView_OnFocusChangeListener_class_());
    }
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setFocusedWithBoolean:true];
    [focusChangeListener onFocusChangeWithADView:self->measurableTextView_ withBoolean:true];
  }
}

void ASUITextViewImpl_sendPressEndEvent(ASUITextViewImpl *self) {
  if (self->onFocusChange_ != nil) {
    id<ADView_OnFocusChangeListener> focusChangeListener;
    if ([self->onFocusChange_ isKindOfClass:[NSString class]]) {
      focusChangeListener = new_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(self, (NSString *) self->onFocusChange_);
    }
    else {
      focusChangeListener = (id<ADView_OnFocusChangeListener>) cast_check(self->onFocusChange_, ADView_OnFocusChangeListener_class_());
    }
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setFocusedWithBoolean:false];
    [focusChangeListener onFocusChangeWithADView:self->measurableTextView_ withBoolean:false];
  }
}

void ASUITextViewImpl_setSelectAllOnFocusWithId_(ASUITextViewImpl *self, id objValue) {
  self->selectAllOnFocus_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASUITextViewImpl_setSelectAllWithId_(ASUITextViewImpl *self, id objValue) {
  if ([self isInitialised] && [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    if (ASUITextViewImpl_isFirstResponder(self)) {
      ASUITextViewImpl_nativeSetSelectAllWithFloat_(self, 0);
    }
    else {
      self->selectOnceOnFocus_ = true;
      ASUITextViewImpl_becomeFirstResponder(self);
    }
  }
}

jboolean ASUITextViewImpl_isFirstResponder(ASUITextViewImpl *self) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  return [tv isFirstResponder];
}

void ASUITextViewImpl_becomeFirstResponder(ASUITextViewImpl *self) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  [tv becomeFirstResponder];
}

void ASUITextViewImpl_nativeSetSelectAllWithFloat_(ASUITextViewImpl *self, jfloat delay) {
  ASUITextView* tv = ((ASUITextView*)self.uiView);
  [self performSelector:@selector(nativeSetSelectAllActual:) withObject:tv afterDelay:delay];
}

void ASUITextViewImpl_setSingleLineWithId_(ASUITextViewImpl *self, id objValue) {
  if ([((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]) {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setLinesWithInt:1];
  }
  else {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMaxLinesWithInt:JavaLangInteger_MAX_VALUE];
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setMinLinesWithInt:-1];
  }
}

id ASUITextViewImpl_getSingleLine(ASUITextViewImpl *self) {
  return JavaLangBoolean_valueOfWithBoolean_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMaxLines] == 1 && [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMinLines] == 1);
}

void ASUITextViewImpl_setScrollHorizontallyWithId_(ASUITextViewImpl *self, id objValue) {
  if (ASUITextViewImpl_hasScrollView(self)) {
    self->scrollHorizontally_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
    ASUITextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(self, ASUITextViewImpl_getScrollView(self), self->scrollHorizontally_);
    ASUITextViewImpl_nativeAddTapGesture(self);
    ASUITextViewImpl_addMinMaxListener(self);
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setCompoundHorizontalPaddingConsumedWithBoolean:self->scrollHorizontally_];
  }
  else {
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setHorizontallyScrollingWithBoolean:[((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue]];
  }
}

void ASUITextViewImpl_nativeAddTapGesture(ASUITextViewImpl *self) {
  UITapGestureRecognizer* tapGesture = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(handleTap:)];
  tapGesture.delegate = self;
  [((ASUITextView*)self.uiView) addGestureRecognizer:tapGesture];
}

void ASUITextViewImpl_nativeSetScrollEnabledWithId_withBoolean_(ASUITextViewImpl *self, id scrollView, jboolean scrollEnabled) {
  ((ASUIScrollView*)scrollView).scrollEnabled = scrollEnabled;
}

void ASUITextViewImpl_setTextColorLinkWithADColorStateList_(ASUITextViewImpl *self, ADColorStateList *linkTextColors) {
}

void ASUITextViewImpl_handleOnBeforeTextChangeWithNSString_withInt_withInt_withInt_(ASUITextViewImpl *self, NSString *s, jint start, jint count, jint after) {
  self->start_ = start;
  self->count_ = count;
  self->after_ = after;
  self->str_ = s;
  if (self->onBeforeTextChange_ != nil) {
    id<ADTextWatcher> textChangedListener = [self getTextChangedListenerWithId:self->onBeforeTextChange_];
    [((id<ADTextWatcher>) nil_chk(textChangedListener)) beforeTextChangedWithJavaLangCharSequence:(NSString *) cast_chk([self getText], [NSString class]) withInt:start withInt:count withInt:after];
  }
}

void ASUITextViewImpl_handleOnAfterTextChange(ASUITextViewImpl *self) {
  if (self->onAfterTextChange_ != nil) {
    id<ADTextWatcher> textChangedListener = [self getTextChangedListenerWithId:self->onAfterTextChange_];
    [((id<ADTextWatcher>) nil_chk(textChangedListener)) afterTextChangedWithADEditable:nil];
  }
}

void ASUITextViewImpl_handleOnTextChange(ASUITextViewImpl *self) {
  if (self->onTextChange_ != nil) {
    id<ADTextWatcher> textChangedListener = [self getTextChangedListenerWithId:self->onTextChange_];
    [((id<ADTextWatcher>) nil_chk(textChangedListener)) onTextChangedWithJavaLangCharSequence:(NSString *) cast_chk([self getText], [NSString class]) withInt:self->start_ withInt:self->after_ - [((NSString *) nil_chk(self->str_)) java_length] withInt:[((NSString *) nil_chk(self->str_)) java_length]];
  }
}

void ASUITextViewImpl_setOnAfterTextChangeWithId_(ASUITextViewImpl *self, id objValue) {
  self->onAfterTextChange_ = objValue;
  if (self->onAfterTextChange_ != nil) {
    ASUITextViewImpl_nativeAddTextFieldDidChange(self);
  }
}

void ASUITextViewImpl_setBeforeOnTextChangeWithId_(ASUITextViewImpl *self, id objValue) {
  self->onBeforeTextChange_ = objValue;
}

void ASUITextViewImpl_setOnTextChangeWithId_(ASUITextViewImpl *self, id objValue) {
  self->onTextChange_ = objValue;
  if (self->onTextChange_ != nil) {
    ASUITextViewImpl_nativeAddTextFieldDidChange(self);
  }
}

void ASUITextViewImpl_setTextAllCapsWithId_(ASUITextViewImpl *self, id objValue) {
  self->textAllCaps_ = [((JavaLangBoolean *) nil_chk((JavaLangBoolean *) cast_chk(objValue, [JavaLangBoolean class]))) booleanValue];
}

void ASUITextViewImpl_forceRedraw(ASUITextViewImpl *self) {
  NSString * text = ((ASUITextView*) self->uiView_).text;
  [((ASUITextView*) self->uiView_) setText:@""];
  [((ASUITextView*) self->uiView_) setText:text];
}

void ASUITextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(ASUITextViewImpl *self, id uiView, jint contentWidth, jint height) {
  ((UIScrollView*) uiView).contentSize = CGSizeMake(contentWidth, height);
}

void ASUITextViewImpl_remeasure(ASUITextViewImpl *self) {
  if (ASUITextViewImpl_hasScrollView(self)) {
    ASUITextViewImpl_updateScrollViewContentOffset(self);
  }
  if ([((id<ASIFragment>) nil_chk(self->fragment_)) isViewLoaded]) {
    ASViewImpl_requestLayoutWithASIWidget_(self);
    [((id<ASIFragment>) nil_chk(self->fragment_)) remeasure];
  }
}

void ASUITextViewImpl_updateScrollViewContentOffset(ASUITextViewImpl *self) {
  ASUIScrollView* scrollView = ((ASUIScrollView*) [self getScrollView]);
  int x =   [((ASUITextView*)self.uiView) caretRectForPosition:((ASUITextView*)self.uiView).selectedTextRange.start].origin.x;
  int y = scrollView.contentOffset.x;
  
  if (x > y + scrollView.frame.size.width) {
    [scrollView setContentOffset:CGPointMake(x, scrollView.contentOffset.y) animated:NO];
  }
}

void ASUITextViewImpl_setInputViewWithId_(ASUITextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[JavaLangInteger class]]) {
    jint inputView = [((JavaLangInteger *) nil_chk((JavaLangInteger *) objValue)) intValue];
    switch (inputView) {
      case 1:
      ASUITextViewImpl_setPickerView(self);
      break;
      default:
      break;
    }
  }
  else {
    if (objValue != nil) {
      ASUITextViewImpl_setNativeInputViewWithId_(self, objValue);
    }
  }
}

void ASUITextViewImpl_setNativeInputViewWithId_(ASUITextViewImpl *self, id objValue) {
  [((ASUITextView*)self.uiView) setInputView:(UIView*) objValue];
}

void ASUITextViewImpl_setPickerView(ASUITextViewImpl *self) {
  UIPickerView * picker = [UIPickerView new];
  picker.showsSelectionIndicator = YES;
  [((ASUITextView*)self.uiView) setInputView:picker];
}

void ASUITextViewImpl_setDatePicker(ASUITextViewImpl *self) {
  UIDatePicker *datepicker = [UIDatePicker new];
  [datepicker setDatePickerMode:UIDatePickerModeDate];
  [((ASUITextView*)self.uiView) setInputView:datepicker];
}

void ASUITextViewImpl_setErrorWithNSString_(ASUITextViewImpl *self, NSString *message) {
}

void ASUITextViewImpl_setHintTextFormatWithId_(ASUITextViewImpl *self, id objValue) {
  [self applyAttributeCommandWithNSString:@"hint" withNSString:ASCommonConverters_command_textformatter withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hintTextFormat" } count:1 type:NSString_class_()] withBoolean:true withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ (NSString *) cast_chk(objValue, [NSString class]) } count:1 type:NSObject_class_()]];
}

void ASUITextViewImpl_createSimpleWrapableView(ASUITextViewImpl *self) {
  jboolean wrapViewFeature = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"decorator"];
  jint viewType = -1;
  if (wrapViewFeature) {
    jboolean hscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"hscroll"];
    jboolean vscroll = [self hasFeatureWithNSString:@"enableFeatures" withNSString:@"vscroll"];
    viewType = 1;
    if (hscroll) viewType = 2;
    if (vscroll) viewType = 3;
  }
  self->simpleWrapableView_ = new_ASSimpleWrapableView_initWithASIWidget_withInt_(self, viewType);
}

jboolean ASUITextViewImpl_hasScrollView(ASUITextViewImpl *self) {
  return ASUITextViewImpl_isViewWrapped(self) && ([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 2 || [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getViewtype] == 3);
}

jboolean ASUITextViewImpl_isViewWrapped(ASUITextViewImpl *self) {
  return [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) isViewWrapped];
}

void ASUITextViewImpl_setForegroundFrameWithInt_withInt_withInt_withInt_(ASUITextViewImpl *self, jint l, jint t, jint r, jint b) {
  id foreground = [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getForeground];
  if (foreground != nil) {
    ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_(foreground, 0, 0, r - l, b - t);
  }
}

void ASUITextViewImpl_invalidateWrapViewHolder(ASUITextViewImpl *self) {
  if (ASUITextViewImpl_isViewWrapped(self)) {
    ASViewImpl_nativeInvalidateWithId_([((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder]);
  }
}

id ASUITextViewImpl_getScrollView(ASUITextViewImpl *self) {
  UIView* uiview = (UIView*)[self->simpleWrapableView_ getWrapperViewHolder];
  return uiview.subviews[0];
}

void ASUITextViewImpl_nativeCreateWithJavaUtilMap_(ASUITextViewImpl *self, id<JavaUtilMap> params) {
  [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) setDisableForegroundWithBoolean:true];
  [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setIgnoreDrawableHeightWithBoolean:true];
  [self registerForAttributeCommandChainWithNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"hint" } count:1 type:NSString_class_()]];
  [self registerForAttributeCommandChainWithPhaseWithNSString:@"predraw" withNSStringArray:[IOSObjectArray newArrayWithObjects:(id[]){ @"drawableStart", @"drawableEnd", @"drawableLeft", @"drawableTop", @"drawableRight", @"drawableBottom", @"drawablePadding", @"drawableTint", @"drawableTintMode" } count:9 type:NSString_class_()]];
}

id ASUITextViewImpl_nativeCreateViewWithInt_(ASUITextViewImpl *self, jint viewType) {
  ASUITextView* textview  = [ASUITextView new];
  textview.delegate = self;
  textview.textContainerInset = UIEdgeInsetsZero;
  textview.textContainer.lineBreakMode = NSLineBreakByClipping;
  [textview setFont:[UIFont systemFontOfSize:[UIFont labelFontSize]]];
  
  return textview;
}

void ASUITextViewImpl_createPlaceHolderWithNSString_(ASUITextViewImpl *self, NSString *text) {
  ASUITextView* textview = ((ASUITextView*) self.uiView);
  UITextView* placeholderLabel = (UITextView*)self->placeholderLabel_;
  if (placeholderLabel == nil) {
    placeholderLabel = [ASUITextView new];
    placeholderLabel.scrollEnabled=NO;
    placeholderLabel.editable=NO;
    placeholderLabel.selectable=NO;
    placeholderLabel.userInteractionEnabled=NO;
    placeholderLabel.backgroundColor = [UIColor clearColor];
    [((ASUITextView*) self.uiView).superview addSubview:placeholderLabel];
    self->placeholderLabel_ = placeholderLabel;
  }
  
  placeholderLabel.text = text;
  [self syncPlaceholderLabel];
}

void ASUITextViewImpl_updatePlaceHolderVisibility(ASUITextViewImpl *self) {
  ASUITextView* textview = ((ASUITextView*) self.uiView);
  UITextView* placeholderLabel = (UITextView*)self->placeholderLabel_;
  if (placeholderLabel != nil) {
    placeholderLabel.hidden = ![textview.text java_isEmpty];
  }
}

void ASUITextViewImpl_syncPlaceholderLabel(ASUITextViewImpl *self) {
  ASUITextView* textview = ((ASUITextView*) self.uiView);
  UITextView* placeholderLabel = (UITextView*)self->placeholderLabel_;
  if (placeholderLabel != nil) {
    placeholderLabel.textAlignment = textview.textAlignment;
    placeholderLabel.textContainerInset= textview.textContainerInset;
    placeholderLabel.textColor = self->hintColor_ == nil ? [UIColor lightGrayColor] : (UIColor*) self->hintColor_;
    placeholderLabel.font = ((ASUITextView*) self.uiView).font;
    placeholderLabel.hidden = ![textview.text java_isEmpty];
  }
}

void ASUITextViewImpl_setHintWithId_(ASUITextViewImpl *self, id objValue) {
  if (ASUITextViewImpl_isViewWrapped(self)) {
    ASUITextViewImpl_createPlaceHolderWithNSString_(self, (NSString *) cast_chk(objValue, [NSString class]));
  }
}

void ASUITextViewImpl_setHintColorWithId_(ASUITextViewImpl *self, id objValue) {
  if ([objValue isKindOfClass:[ADColorStateList class]]) {
    ADColorStateList *colorStateList = (ADColorStateList *) objValue;
    [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) setHintTextColorWithADColorStateList:colorStateList];
    objValue = JavaLangInteger_valueOfWithInt_([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCurrentHintTextColor]);
  }
  self->hintColor_ = ASViewImpl_getColorWithId_(objValue);
  ASUITextViewImpl_nativeSetHintColorWithId_(self, self->hintColor_);
}

id ASUITextViewImpl_getHint(ASUITextViewImpl *self) {
  return ASUITextViewImpl_nativeGetHint(self);
}

NSString *ASUITextViewImpl_nativeGetHint(ASUITextViewImpl *self) {
  ASUITextView* textview = ((ASUITextView*) self.uiView);
  UITextView* placeholderLabel = (UITextView*)self->placeholderLabel_;
  if (placeholderLabel != nil) {
    return placeholderLabel.text;
  }
  return nil;
}

void ASUITextViewImpl_nativeSetHintColorWithId_(ASUITextViewImpl *self, id objValue) {
  ASUITextView* textview = ((ASUITextView*) self.uiView);
  UITextView* placeholderLabel = (UITextView*)self->placeholderLabel_;
  if (placeholderLabel != nil) {
    placeholderLabel.textColor = (UIColor*) objValue;
  }
}

void ASUITextViewImpl_updateBoundsWithInt_withInt_withId_withId_(ASUITextViewImpl *self, jint topPadding, jint bottomPadding, id parent, id child) {
  UIView* pview = ((UIView*) parent);
  UIView* childview = ((UIView*) child);
  if (childview != nil) {
    childview.frame = CGRectMake(0, topPadding, pview.frame.size.width, pview.frame.size.height - topPadding - bottomPadding);
  }
}

void ASUITextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(ASUITextViewImpl *self, jint l, jint t, jint r, jint b) {
  if (ASUITextViewImpl_isViewWrapped(self)) {
    if (ASUITextViewImpl_hasScrollView(self)) {
      jint textWidth = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) nativeMeasureWidthWithId:self->uiView_];
      jint horizontalPadding = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingLeft] + [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingRight];
      if (textWidth < (r - l - horizontalPadding)) {
        textWidth = r - l - horizontalPadding;
      }
      ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(self->uiView_, 0, 0, textWidth, b - t);
      ASViewImpl_updateBoundsWithId_withInt_withInt_withInt_withInt_(ASUITextViewImpl_getScrollView(self), [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingLeft], 0, r - l - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingRight] - [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getCompoundPaddingLeft], b - t);
      ASUITextViewImpl_nativeSetContentSizeWithId_withInt_withInt_(self, ASUITextViewImpl_getScrollView(self), textWidth + 10, b - t);
    }
    else {
      ASUITextViewImpl_updateBoundsWithInt_withInt_withId_withId_(self, [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingTop], [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingBottom], [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder], self->uiView_);
    }
  }
  if (self->placeholderLabel_ != nil) {
    ASRectM *bounds = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getWidgetBoundsWithInt:r - l withInt:b - t withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ self->placeholderLabel_ } count:1 type:NSObject_class_()]];
    ASUITextViewImpl_updateBoundsWithInt_withInt_withId_withId_(self, [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingTop], [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getPaddingBottom], [((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrapperViewHolder], self->placeholderLabel_);
    ASUITextViewImpl_setContentOffsetWithInt_withId_(self, ((ASRectM *) nil_chk(bounds))->y_, self->placeholderLabel_);
  }
  ASUITextViewImpl_adjustContentSizeWithInt_withInt_(self, r - l, b - t);
}

void ASUITextViewImpl_addMinMaxListener(ASUITextViewImpl *self) {
  self->callMeasureOnChange_ = true;
  jint maxLines = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMaxLines];
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMaxLines] != -1 && maxLines != JavaLangInteger_MAX_VALUE && ASUITextViewImpl_isEllipsized(self)) {
    ASUITextViewImpl_nativeSetMaxLinesWithInt_(self, maxLines);
  }
}

jboolean ASUITextViewImpl_isEllipsized(ASUITextViewImpl *self) {
  return ASUITextViewImpl_nativeGetLineBreakMode(self) != JreLoadStatic(ASLayoutNativeVars, NSLineBreakByClipping);
}

void ASUITextViewImpl_nativeSetEnabledWithBoolean_(ASUITextViewImpl *self, jboolean isEnabled) {
  [self setIsEditableWithId:[((ASSimpleWrapableView *) nil_chk(self->simpleWrapableView_)) getWrappedView] withId:JavaLangBoolean_valueOfWithBoolean_(isEnabled)];
}

id ASUITextViewImpl_getEllipsize(ASUITextViewImpl *self) {
  return JavaLangInteger_valueOfWithInt_(ASUITextViewImpl_nativeGetLineBreakMode(self));
}

void ASUITextViewImpl_nativeSetMaxLinesWithInt_(ASUITextViewImpl *self, jint lines) {
  ((UITextView*)self->uiView_).textContainer.maximumNumberOfLines = lines;
}

void ASUITextViewImpl_setEllipsizeWithId_withNSString_(ASUITextViewImpl *self, id objValue, NSString *strValue) {
  ASUITextViewImpl_nativeSetLineBreakModeWithInt_(self, [((JavaLangInteger *) nil_chk((JavaLangInteger *) cast_chk(objValue, [JavaLangInteger class]))) intValue]);
  jint maxLines = [((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMaxLines];
  if ([((ASMeasurableTextView *) nil_chk(self->measurableTextView_)) getMaxLines] != -1 && maxLines != JavaLangInteger_MAX_VALUE && ASUITextViewImpl_isEllipsized(self)) {
    ASUITextViewImpl_nativeSetMaxLinesWithInt_(self, maxLines);
  }
}

void ASUITextViewImpl_nativeSetLineBreakModeWithInt_(ASUITextViewImpl *self, jint lineBreakMode) {
  ((UITextView*)self->uiView_).textContainer.lineBreakMode = lineBreakMode;
}

jint ASUITextViewImpl_nativeGetLineBreakMode(ASUITextViewImpl *self) {
  return (jint) ((UITextView*)self->uiView_).textContainer.lineBreakMode;
}

void ASUITextViewImpl_setLineSpacing(ASUITextViewImpl *self) {
  ASUITextViewImpl_nativeSetLayoutManagerDelegate(self);
  self->lineSpacing_ = JavaLangMath_roundWithFloat_((self->mSpacingAdd_ + (self->mSpacingMult_ * ASUITextViewImpl_getLineHeight(self))));
}

void ASUITextViewImpl_nativeSetLayoutManagerDelegate(ASUITextViewImpl *self) {
  ((UITextView*)self->uiView_).layoutManager.delegate = self;
}

void ASUITextViewImpl_postSetAttributeWithASWidgetAttribute_withNSString_withId_withASILifeCycleDecorator_(ASUITextViewImpl *self, ASWidgetAttribute *key, NSString *strValue, id objValue, id<ASILifeCycleDecorator> decorator) {
  switch (JreIndexOfStr([((ASWidgetAttribute *) nil_chk(key)) getAttributeName], (id[]){ @"lineSpacingExtra", @"lineSpacingMultiplier", @"textAllCaps", @"maxLength" }, 4)) {
    case 0:
    case 1:
    if ([self isInitialised]) {
      ASUITextViewImpl_forceRedraw(self);
    }
    break;
    case 2:
    case 3:
    if ([self isInitialised]) {
      [self setMyTextWithId:[self getText]];
    }
    default:
    break;
  }
  if ([self isInitialised]) {
    ASUITextViewImpl_syncPlaceholderLabel(self);
  }
}

void ASUITextViewImpl_nativeAddTextFieldDidChange(ASUITextViewImpl *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl)

@implementation ASUITextViewImpl_InputView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_InputView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_InputView = { "InputView", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_InputView;
}

@end

void ASUITextViewImpl_InputView_init(ASUITextViewImpl_InputView *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"picker" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"datepicker" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASUITextViewImpl_InputView *new_ASUITextViewImpl_InputView_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_InputView, init)
}

ASUITextViewImpl_InputView *create_ASUITextViewImpl_InputView_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_InputView, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_InputView)

@implementation ASUITextViewImpl_DrawableTintMode

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_DrawableTintMode_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_DrawableTintMode = { "DrawableTintMode", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_DrawableTintMode;
}

@end

void ASUITextViewImpl_DrawableTintMode_init(ASUITextViewImpl_DrawableTintMode *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"add" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeOverlay))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"multiply" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeMultiply))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"screen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeScreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_atop" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceAtop))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_in" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeSourceIn))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"src_over" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, kCGBlendModeNormal))];
  }
}

ASUITextViewImpl_DrawableTintMode *new_ASUITextViewImpl_DrawableTintMode_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_DrawableTintMode, init)
}

ASUITextViewImpl_DrawableTintMode *create_ASUITextViewImpl_DrawableTintMode_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_DrawableTintMode, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_DrawableTintMode)

@implementation ASUITextViewImpl_Font

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_Font_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_Font = { "Font", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_Font;
}

@end

void ASUITextViewImpl_Font_init(ASUITextViewImpl_Font *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"monospace" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sans" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"serif" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
  }
}

ASUITextViewImpl_Font *new_ASUITextViewImpl_Font_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_Font, init)
}

ASUITextViewImpl_Font *create_ASUITextViewImpl_Font_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_Font, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_Font)

@implementation ASUITextViewImpl_TextStyle

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_TextStyle_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_TextStyle = { "TextStyle", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_TextStyle;
}

@end

void ASUITextViewImpl_TextStyle_init(ASUITextViewImpl_TextStyle *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"bold" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"italic" withId:JavaLangInteger_valueOfWithInt_((jint) 0x2)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x0)];
  }
}

ASUITextViewImpl_TextStyle *new_ASUITextViewImpl_TextStyle_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_TextStyle, init)
}

ASUITextViewImpl_TextStyle *create_ASUITextViewImpl_TextStyle_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_TextStyle, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_TextStyle)

@implementation ASUITextViewImpl_Capitalize

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_Capitalize_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_Capitalize = { "Capitalize", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_Capitalize;
}

@end

void ASUITextViewImpl_Capitalize_init(ASUITextViewImpl_Capitalize *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"words" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeWords))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"sentences" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeSentences))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"characters" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UITextAutocapitalizationTypeAllCharacters))];
  }
}

ASUITextViewImpl_Capitalize *new_ASUITextViewImpl_Capitalize_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_Capitalize, init)
}

ASUITextViewImpl_Capitalize *create_ASUITextViewImpl_Capitalize_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_Capitalize, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_Capitalize)

@implementation ASUITextViewImpl_Numeric

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_Numeric_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_Numeric = { "Numeric", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_Numeric;
}

@end

void ASUITextViewImpl_Numeric_init(ASUITextViewImpl_Numeric *self) {
  ASAbstractBitFlagConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"decimal" withId:JavaLangInteger_valueOfWithInt_((jint) 0x5)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"integer" withId:JavaLangInteger_valueOfWithInt_((jint) 0x1)];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"signed" withId:JavaLangInteger_valueOfWithInt_((jint) 0x3)];
  }
}

ASUITextViewImpl_Numeric *new_ASUITextViewImpl_Numeric_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_Numeric, init)
}

ASUITextViewImpl_Numeric *create_ASUITextViewImpl_Numeric_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_Numeric, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_Numeric)

@implementation ASUITextViewImpl_InputType

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_InputType_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_InputType = { "InputType", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_InputType;
}

@end

void ASUITextViewImpl_InputType_init(ASUITextViewImpl_InputType *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"date" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeDate))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"datetime" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeDatetime))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"none" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"number" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumber))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"numberDecimal" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumberDecimal))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"numberPassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumberPassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"numberSigned" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeNumberSigned))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"phone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypePhone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"text" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeText))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textAutoComplete" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextAutoComplete))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textAutoCorrect" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextAutoCorrect))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textCapCharacters" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextCapCharacters))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textCapSentences" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextCapSentences))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textCapWords" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextCapWords))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textEmailAddress" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextEmailAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textEmailSubject" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextEmailSubject))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textFilter" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextFilter))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textImeMultiLine" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextImeMultiLine))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textLongMessage" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextLongMessage))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textMultiLine" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextMultiLine))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textNoSuggestions" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextNoSuggestions))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPersonName" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPersonName))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPhonetic" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPhonetic))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textPostalAddress" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextPostalAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textShortMessage" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextShortMessage))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textUri" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextUri))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textVisiblePassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextVisiblePassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textWebEditText" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextWebEditText))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textWebEmailAddress" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextWebEmailAddress))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"textWebPassword" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTextWebPassword))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"time" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIKeyboardTypeTime))];
  }
}

ASUITextViewImpl_InputType *new_ASUITextViewImpl_InputType_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_InputType, init)
}

ASUITextViewImpl_InputType *create_ASUITextViewImpl_InputType_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_InputType, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_InputType)

@implementation ASUITextViewImpl_ImeOptions

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ASUITextViewImpl_ImeOptions_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (id<JavaUtilMap>)getMapping {
  return mapping_;
}

- (JavaLangInteger *)getDefault {
  return JavaLangInteger_valueOfWithInt_(0);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "LJavaLangInteger;", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getMapping);
  methods[2].selector = @selector(getDefault);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mapping_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 1, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Integer;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_ImeOptions = { "ImeOptions", "com.ashera.layout", ptrTable, methods, fields, 7, 0x18, 3, 1, 2, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_ImeOptions;
}

@end

void ASUITextViewImpl_ImeOptions_init(ASUITextViewImpl_ImeOptions *self) {
  ASAbstractEnumToIntConverter_init(self);
  self->mapping_ = new_JavaUtilHashMap_init();
  {
    (void) [self->mapping_ putWithId:@"actionDone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionDone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionGo" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionGo))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionNext" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionNext))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionNone" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionNone))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionPrevious" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionPrevious))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionSearch" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionSearch))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionSend" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionSend))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"actionUnspecified" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeActionUnspecified))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagForceAscii" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagForceAscii))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNavigateNext" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNavigateNext))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNavigatePrevious" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNavigatePrevious))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoAccessoryAction" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoAccessoryAction))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoEnterAction" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoEnterAction))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoExtractUi" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoExtractUi))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoFullscreen" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoFullscreen))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"flagNoPersonalizedLearning" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeFlagNoPersonalizedLearning))];
    (void) [((id<JavaUtilMap>) nil_chk(self->mapping_)) putWithId:@"normal" withId:JavaLangInteger_valueOfWithInt_(JreLoadStatic(ASLayoutNativeVars, UIReturnKeyTypeNormal))];
  }
}

ASUITextViewImpl_ImeOptions *new_ASUITextViewImpl_ImeOptions_init() {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_ImeOptions, init)
}

ASUITextViewImpl_ImeOptions *create_ASUITextViewImpl_ImeOptions_init() {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_ImeOptions, init)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_ImeOptions)

@implementation ASUITextViewImpl_UITextViewExt

- (instancetype)initWithASUITextViewImpl:(ASUITextViewImpl *)outer$ {
  ASUITextViewImpl_UITextViewExt_initWithASUITextViewImpl_(self, outer$);
  return self;
}

- (void)onMeasureWithInt:(jint)widthMeasureSpec
                 withInt:(jint)heightMeasureSpec {
  [super onMeasureWithInt:widthMeasureSpec withInt:heightMeasureSpec];
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setWidthWithInt:[self getMeasuredWidth]];
    [((ASMeasureEvent *) nil_chk(measureFinished_)) setHeightWithInt:[self getMeasuredHeight]];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, measureFinished) withASWidgetEvent:measureFinished_];
  }
}

- (void)onLayoutWithBoolean:(jboolean)changed
                    withInt:(jint)l
                    withInt:(jint)t
                    withInt:(jint)r
                    withInt:(jint)b {
  [super onLayoutWithBoolean:changed withInt:l withInt:t withInt:r withInt:b];
  ASViewImpl_setDrawableBoundsWithASIWidget_withInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], l, t, r, b);
  ASUITextViewImpl_nativeMakeFrameForChildWidgetWithInt_withInt_withInt_withInt_(this$0_, l, t, r, b);
  [this$0_ replayBufferedEvents];
  ASViewImpl_redrawDrawablesWithASIWidget_(this$0_);
  id<ASIWidgetLifeCycleListener> listener = [this$0_ getListener];
  if (listener != nil) {
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setBWithInt:b];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setLWithInt:l];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setRWithInt:r];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setTWithInt:t];
    [((ASOnLayoutEvent *) nil_chk(onLayoutEvent_)) setChangedWithBoolean:changed];
    [listener eventOccurredWithASIWidgetLifeCycleListener_EventId:JreLoadEnum(ASIWidgetLifeCycleListener_EventId, onLayout) withASWidgetEvent:onLayoutEvent_];
  }
  if ([this$0_ isInvalidateOnFrameChange] && [this$0_ isInitialised]) {
    [this$0_ invalidate];
  }
}

- (void)executeWithNSString:(NSString *)method
          withNSObjectArray:(IOSObjectArray *)canvas {
}

- (void)updateMeasuredDimensionWithInt:(jint)width
                               withInt:(jint)height {
  [self setMeasuredDimensionWithInt:width withInt:height];
}

- (id<ASILifeCycleDecorator>)newInstanceWithASIWidget:(id<ASIWidget>)widget {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)setAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute
                             withNSString:(NSString *)strValue
                                   withId:(id)objValue {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id<JavaUtilList>)getMethods {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)initialized {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (id)getAttributeWithASWidgetAttribute:(ASWidgetAttribute *)widgetAttribute {
  @throw new_JavaLangUnsupportedOperationException_init();
}

- (void)drawableStateChanged {
  [super drawableStateChanged];
  ASViewImpl_drawableStateChangedWithASIWidget_(this$0_);
}

- (void)offsetTopAndBottomWithInt:(jint)offset {
  [super offsetTopAndBottomWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)offsetLeftAndRightWithInt:(jint)offset {
  [super offsetLeftAndRightWithInt:offset];
  ASViewImpl_nativeMakeFrameWithId_withInt_withInt_withInt_withInt_([this$0_ asNativeWidget], [self getLeft], [self getTop], [self getRight], [self getBottom]);
}

- (void)setVisibilityWithInt:(jint)visibility {
  [super setVisibilityWithInt:visibility];
  ASViewImpl_nativeSetVisibilityWithId_withBoolean_([this$0_ asNativeWidget], visibility != ADView_VISIBLE);
}

- (jint)getBorderPadding {
  return [this$0_ getBorderPadding];
}

- (jint)getLineHeight {
  return ASUITextViewImpl_getLineHeight(this$0_);
}

- (jint)getBorderWidth {
  return ASUITextViewImpl_getBorderWidth(this$0_);
}

- (jint)getLineHeightPadding {
  return [this$0_ getLineHeightPadding];
}

- (void)__javaClone:(ASUITextViewImpl_UITextViewExt *)original {
  [super __javaClone:original];
  JreRelease(this$0_);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x4, 3, 4, -1, -1, -1, -1 },
    { NULL, "V", 0x81, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASILifeCycleDecorator;", 0x1, 8, 9, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 11, -1, -1, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 12, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, 13, 14, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 16, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewImpl:);
  methods[1].selector = @selector(onMeasureWithInt:withInt:);
  methods[2].selector = @selector(onLayoutWithBoolean:withInt:withInt:withInt:withInt:);
  methods[3].selector = @selector(executeWithNSString:withNSObjectArray:);
  methods[4].selector = @selector(updateMeasuredDimensionWithInt:withInt:);
  methods[5].selector = @selector(newInstanceWithASIWidget:);
  methods[6].selector = @selector(setAttributeWithASWidgetAttribute:withNSString:withId:);
  methods[7].selector = @selector(getMethods);
  methods[8].selector = @selector(initialized);
  methods[9].selector = @selector(getAttributeWithASWidgetAttribute:);
  methods[10].selector = @selector(drawableStateChanged);
  methods[11].selector = @selector(offsetTopAndBottomWithInt:);
  methods[12].selector = @selector(offsetLeftAndRightWithInt:);
  methods[13].selector = @selector(setVisibilityWithInt:);
  methods[14].selector = @selector(getBorderPadding);
  methods[15].selector = @selector(getLineHeight);
  methods[16].selector = @selector(getBorderWidth);
  methods[17].selector = @selector(getLineHeightPadding);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
    { "measureFinished_", "LASMeasureEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "onLayoutEvent_", "LASOnLayoutEvent;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewImpl;", "onMeasure", "II", "onLayout", "ZIIII", "execute", "LNSString;[LNSObject;", "updateMeasuredDimension", "newInstance", "LASIWidget;", "setAttribute", "LASWidgetAttribute;LNSString;LNSObject;", "()Ljava/util/List<Ljava/lang/String;>;", "getAttribute", "LASWidgetAttribute;", "offsetTopAndBottom", "I", "offsetLeftAndRight", "setVisibility" };
  static const J2ObjcClassInfo _ASUITextViewImpl_UITextViewExt = { "UITextViewExt", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 18, 3, 0, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_UITextViewExt;
}

@end

void ASUITextViewImpl_UITextViewExt_initWithASUITextViewImpl_(ASUITextViewImpl_UITextViewExt *self, ASUITextViewImpl *outer$) {
  self->this$0_ = outer$;
  ASMeasurableTextView_initWithASIWidget_(self, outer$);
  self->measureFinished_ = new_ASMeasureEvent_init();
  self->onLayoutEvent_ = new_ASOnLayoutEvent_init();
}

ASUITextViewImpl_UITextViewExt *new_ASUITextViewImpl_UITextViewExt_initWithASUITextViewImpl_(ASUITextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_UITextViewExt, initWithASUITextViewImpl_, outer$)
}

ASUITextViewImpl_UITextViewExt *create_ASUITextViewImpl_UITextViewExt_initWithASUITextViewImpl_(ASUITextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_UITextViewExt, initWithASUITextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_UITextViewExt)

@implementation ASUITextViewImpl_OnEditorActionListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (jboolean)onEditorActionWithADTextView:(ADTextView *)v
                                 withInt:(jint)actionId
                          withADKeyEvent:(ADKeyEvent *)event {
  jboolean result = true;
  if (action_ == nil || [action_ isEqual:@"onEditorAction"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onEditorAction"];
    id<JavaUtilMap> obj = [self getOnEditorActionEventObjWithADTextView:v withInt:actionId withADKeyEvent:event];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        id commandResult = [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangInteger_valueOfWithInt_(actionId), event } count:3 type:NSObject_class_()]];
        if (commandResult != nil) {
          result = [(JavaLangBoolean *) cast_chk(commandResult, [JavaLangBoolean class]) booleanValue];
        }
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return result;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return result;
}

- (id<JavaUtilMap>)getOnEditorActionEventObjWithADTextView:(ADTextView *)v
                                                   withInt:(jint)actionId
                                            withADKeyEvent:(ADKeyEvent *)event {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"editoraction"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"actionId", JavaLangInteger_valueOfWithInt_(actionId));
  ASViewImpl_addEventInfoWithJavaUtilMap_withADKeyEvent_(obj, event);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onEditorAction" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onEditorActionWithADTextView:withInt:withADKeyEvent:);
  methods[4].selector = @selector(getOnEditorActionEventObjWithADTextView:withInt:withADKeyEvent:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onEditorAction", "LADTextView;ILADKeyEvent;", "getOnEditorActionEventObj", "(Lr/android/widget/TextView;ILr/android/view/KeyEvent;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_OnEditorActionListener = { "OnEditorActionListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_OnEditorActionListener;
}

@end

void ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(ASUITextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASUITextViewImpl_OnEditorActionListener *new_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_, w, strValue)
}

ASUITextViewImpl_OnEditorActionListener *create_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(ASUITextViewImpl_OnEditorActionListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASUITextViewImpl_OnEditorActionListener *new_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASUITextViewImpl_OnEditorActionListener *create_ASUITextViewImpl_OnEditorActionListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_OnEditorActionListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_OnEditorActionListener)

@implementation ASUITextViewImpl_OnFocusChangeListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)onFocusChangeWithADView:(ADView *)v
                    withBoolean:(jboolean)hasFocus {
  if (action_ == nil || [action_ isEqual:@"onFocusChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onFocusChange"];
    id<JavaUtilMap> obj = [self getOnFocusChangeEventObjWithADView:v withBoolean:hasFocus];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ v, JavaLangBoolean_valueOfWithBoolean_(hasFocus) } count:2 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnFocusChangeEventObjWithADView:(ADView *)v
                                          withBoolean:(jboolean)hasFocus {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"focuschange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"hasFocus", JavaLangBoolean_valueOfWithBoolean_(hasFocus));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onFocusChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 4, 3, -1, 5, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(onFocusChangeWithADView:withBoolean:);
  methods[4].selector = @selector(getOnFocusChangeEventObjWithADView:withBoolean:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "onFocusChange", "LADView;Z", "getOnFocusChangeEventObj", "(Lr/android/view/View;Z)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_OnFocusChangeListener = { "OnFocusChangeListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 5, 4, 6, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_OnFocusChangeListener;
}

@end

void ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(ASUITextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASUITextViewImpl_OnFocusChangeListener *new_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

ASUITextViewImpl_OnFocusChangeListener *create_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(ASUITextViewImpl_OnFocusChangeListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASUITextViewImpl_OnFocusChangeListener *new_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASUITextViewImpl_OnFocusChangeListener *create_ASUITextViewImpl_OnFocusChangeListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_OnFocusChangeListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_OnFocusChangeListener)

@implementation ASUITextViewImpl_TextChangedListener

- (NSString *)getAction {
  return action_;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue {
  ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(self, w, strValue);
  return self;
}

- (instancetype)initWithASIWidget:(id<ASIWidget>)w
                     withNSString:(NSString *)strValue
                     withNSString:(NSString *)action {
  ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(self, w, strValue, action);
  return self;
}

- (void)afterTextChangedWithADEditable:(id<ADEditable>)s {
  if (action_ == nil || [action_ isEqual:@"onafterTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onafterTextChange"];
    id<JavaUtilMap> obj = [self getOnafterTextChangeEventObjWithADEditable:s];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s } count:1 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)beforeTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                          withInt:(jint)start
                                          withInt:(jint)count
                                          withInt:(jint)after {
  if (action_ == nil || [action_ isEqual:@"onbeforeTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onbeforeTextChange"];
    id<JavaUtilMap> obj = [self getOnbeforeTextChangeEventObjWithJavaLangCharSequence:s withInt:start withInt:count withInt:after];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s, JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(count), JavaLangInteger_valueOfWithInt_(after) } count:4 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (void)onTextChangedWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                      withInt:(jint)start
                                      withInt:(jint)before
                                      withInt:(jint)count {
  if (action_ == nil || [action_ isEqual:@"onTextChange"]) {
    [((id<ASIWidget>) nil_chk(w_)) syncModelFromUiToPojoWithNSString:@"onTextChange"];
    id<JavaUtilMap> obj = [self getOnTextChangeEventObjWithJavaLangCharSequence:s withInt:start withInt:before withInt:count];
    NSString *commandName = (NSString *) cast_chk([((id<JavaUtilMap>) nil_chk(obj)) getWithId:ASEventExpressionParser_KEY_COMMAND_NAME], [NSString class]);
    NSString *commandType = (NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_COMMAND_TYPE], [NSString class]);
    switch (JreIndexOfStr(commandType, (id[]){ @"+", @":" }, 2)) {
      case 0:
      case 1:
      if (ASEventCommandFactory_hasCommandWithNSString_(commandName)) {
        (void) [((id<ASEventCommand>) nil_chk(ASEventCommandFactory_getCommandWithNSString_(commandName))) executeCommandWithASIWidget:w_ withJavaUtilMap:obj withNSObjectArray:[IOSObjectArray newArrayWithObjects:(id[]){ s, JavaLangInteger_valueOfWithInt_(start), JavaLangInteger_valueOfWithInt_(before), JavaLangInteger_valueOfWithInt_(count) } count:4 type:NSObject_class_()]];
      }
      if ([((NSString *) nil_chk(commandType)) isEqual:@":"]) {
        return;
      }
      break;
      default:
      break;
    }
    if ([obj containsKeyWithId:@"refreshUiFromModel"]) {
      id widgets = [obj removeWithId:@"refreshUiFromModel"];
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, widgets, true);
    }
    if ([((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds] != nil) {
      ASViewImpl_refreshUiFromModelWithASIWidget_withId_withBoolean_(w_, [((id<ASIWidget>) nil_chk(w_)) getModelUiToPojoEventIds], true);
    }
    if (strValue_ != nil && ![strValue_ java_isEmpty]) {
      id<ASIActivity> activity = [((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getRootActivity];
      [((id<ASIActivity>) nil_chk(activity)) sendEventMessageWithJavaUtilMap:obj];
    }
  }
  return;
}

- (id<JavaUtilMap>)getOnTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                           withInt:(jint)start
                                                           withInt:(jint)before
                                                           withInt:(jint)count {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"textchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"s", NSString_java_valueOf_(s));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"start", JavaLangInteger_valueOfWithInt_(start));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"before", JavaLangInteger_valueOfWithInt_(before));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"count", JavaLangInteger_valueOfWithInt_(count));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnbeforeTextChangeEventObjWithJavaLangCharSequence:(id<JavaLangCharSequence>)s
                                                                 withInt:(jint)start
                                                                 withInt:(jint)count
                                                                 withInt:(jint)after {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"beforetextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"s", NSString_java_valueOf_(s));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"start", JavaLangInteger_valueOfWithInt_(start));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"count", JavaLangInteger_valueOfWithInt_(count));
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"after", JavaLangInteger_valueOfWithInt_(after));
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onbeforeTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

- (id<JavaUtilMap>)getOnafterTextChangeEventObjWithADEditable:(id<ADEditable>)s {
  id<JavaUtilMap> obj = ASPluginInvoker_getJSONCompatMap();
  (void) [((id<JavaUtilMap>) nil_chk(obj)) putWithId:@"action" withId:@"action"];
  (void) [obj putWithId:@"eventType" withId:@"aftertextchange"];
  (void) [obj putWithId:@"fragmentId" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getFragmentId]];
  (void) [obj putWithId:@"actionUrl" withId:[((id<ASIFragment>) nil_chk([((id<ASIWidget>) nil_chk(w_)) getFragment])) getActionUrl]];
  ASPluginInvoker_putJSONSafeObjectIntoMapWithJavaUtilMap_withNSString_withId_(obj, @"id", [((id<ASIWidget>) nil_chk(w_)) getId]);
  (void) ASEventExpressionParser_parseEventExpressionWithNSString_withJavaUtilMap_(strValue_, obj);
  [((id<ASIWidget>) nil_chk(w_)) updateModelToEventMapWithJavaUtilMap:obj withNSString:@"onafterTextChange" withNSString:(NSString *) cast_chk([obj getWithId:ASEventExpressionParser_KEY_EVENT_ARGS], [NSString class])];
  return obj;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LNSString;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 7, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 9, 5, -1, 8, -1, -1 },
    { NULL, "LJavaUtilMap;", 0x1, 10, 3, -1, 11, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(getAction);
  methods[1].selector = @selector(initWithASIWidget:withNSString:);
  methods[2].selector = @selector(initWithASIWidget:withNSString:withNSString:);
  methods[3].selector = @selector(afterTextChangedWithADEditable:);
  methods[4].selector = @selector(beforeTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[5].selector = @selector(onTextChangedWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[6].selector = @selector(getOnTextChangeEventObjWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[7].selector = @selector(getOnbeforeTextChangeEventObjWithJavaLangCharSequence:withInt:withInt:withInt:);
  methods[8].selector = @selector(getOnafterTextChangeEventObjWithADEditable:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "w_", "LASIWidget;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "view_", "LADView;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "strValue_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "action_", "LNSString;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASIWidget;LNSString;", "LASIWidget;LNSString;LNSString;", "afterTextChanged", "LADEditable;", "beforeTextChanged", "LJavaLangCharSequence;III", "onTextChanged", "getOnTextChangeEventObj", "(Ljava/lang/CharSequence;III)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "getOnbeforeTextChangeEventObj", "getOnafterTextChangeEventObj", "(Lr/android/text/Editable;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Object;>;", "LASUITextViewImpl;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_TextChangedListener = { "TextChangedListener", "com.ashera.layout", ptrTable, methods, fields, 7, 0xa, 9, 4, 12, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_TextChangedListener;
}

@end

void ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(ASUITextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
}

ASUITextViewImpl_TextChangedListener *new_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_TextChangedListener, initWithASIWidget_withNSString_, w, strValue)
}

ASUITextViewImpl_TextChangedListener *create_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_(id<ASIWidget> w, NSString *strValue) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_TextChangedListener, initWithASIWidget_withNSString_, w, strValue)
}

void ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(ASUITextViewImpl_TextChangedListener *self, id<ASIWidget> w, NSString *strValue, NSString *action) {
  NSObject_init(self);
  self->w_ = w;
  self->strValue_ = strValue;
  self->action_ = action;
}

ASUITextViewImpl_TextChangedListener *new_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_TextChangedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

ASUITextViewImpl_TextChangedListener *create_ASUITextViewImpl_TextChangedListener_initWithASIWidget_withNSString_withNSString_(id<ASIWidget> w, NSString *strValue, NSString *action) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_TextChangedListener, initWithASIWidget_withNSString_withNSString_, w, strValue, action)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_TextChangedListener)

@implementation ASUITextViewImpl_UITextViewCommandBuilder

- (instancetype)initWithASUITextViewImpl:(ASUITextViewImpl *)outer$ {
  ASUITextViewImpl_UITextViewCommandBuilder_initWithASUITextViewImpl_(self, outer$);
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)executeWithBoolean:(jboolean)setter {
  if (setter) {
    [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_SETTER_METHOD];
    [((id<ASIFragment>) nil_chk([this$0_ getFragment])) remeasure];
  }
  [this$0_ executeCommandWithJavaUtilMap:command_ withASIWidget_CommandCallBack:nil withInt:ASIWidget_COMMAND_EXEC_GETTER_METHOD];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getIosTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosTextColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosUsesStandardTextScaling {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosUsesStandardTextScaling"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosUsesStandardTextScaling {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosUsesStandardTextScaling"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosUsesStandardTextScalingWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosUsesStandardTextScaling"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosIsEditable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsEditable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosIsEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsEditable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosAllowsEditingTextAttributes {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosAllowsEditingTextAttributes {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosAllowsEditingTextAttributesWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosAllowsEditingTextAttributes"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosClearsOnInsertion {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosClearsOnInsertion {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosClearsOnInsertionWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosClearsOnInsertion"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetIosIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isIosIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosIsSelectableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetTextIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextIsSelectable {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosIsSelectable"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextIsSelectableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textIsSelectable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getText {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"text"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getGravity {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setGravityWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"gravity"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextSize {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextSizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textSize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetLineSpacingExtra {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lineSpacingExtra"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLineSpacingExtra {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lineSpacingExtra"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setLineSpacingExtraWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lineSpacingExtra"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetLineSpacingMultiplier {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lineSpacingMultiplier"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLineSpacingMultiplier {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lineSpacingMultiplier"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setLineSpacingMultiplierWithFloat:(jfloat)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lineSpacingMultiplier"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangFloat_valueOfWithFloat_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextColorHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHint {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setHintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setOnEditorActionWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onEditorAction"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setOnFocusChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onFocusChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setOnTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setOnbeforeTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onbeforeTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setOnafterTextChangeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"onafterTextChange"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosInputViewWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInputView"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setHintTextFormatWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"hintTextFormat"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"padding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingBottom {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingRight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingLeft {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingStart {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingEnd {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getPaddingTop {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingHorizontalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingHorizontal"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPaddingVerticalWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"paddingVertical"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableLeftWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableLeft"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableStartWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableStart"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableRightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableRight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableEndWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableEnd"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableTopWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTop"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableBottomWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableBottom"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getDrawablePadding {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawablePaddingWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawablePadding"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableTintWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTint"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDrawableTintModeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"drawableTintMode"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setEnabledWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"enabled"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetTextColorHighlight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColorHighlight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextColorHighlightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColorHighlight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMinLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxLines {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMaxLinesWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLines"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMinWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMinHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMaxWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxWidth"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMaxHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"height"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getWidth {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setWidthWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"width"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMaxEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMaxEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getMinEms {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMinEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"minEms"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setEmsWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"ems"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setEditableWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"editable"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setMaxLengthWithInt:(jint)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"maxLength"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangInteger_valueOfWithInt_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTypefaceWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"typeface"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextStyleWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textStyle"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setFontFamilyWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"fontFamily"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setAutoTextWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"autoText"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setCapitalizeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"capitalize"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetCursorVisible {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cursorVisible"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)isCursorVisible {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cursorVisible"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setCursorVisibleWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"cursorVisible"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setNumericWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"numeric"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setDigitsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"digits"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setPhoneNumberWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"phoneNumber"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetInputType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"inputType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getInputType {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"inputType"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setInputTypeWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"inputType"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetImeOptions {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imeOptions"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getImeOptions {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imeOptions"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setImeOptionsWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"imeOptions"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)selectAllOnFocusWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selectAllOnFocus"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)selectAllWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"selectAll"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setScrollHorizontallyWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"scrollHorizontally"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setSingleLineWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"singleLine"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setIosInputAccessoryViewDoneButtonWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"iosInputAccessoryViewDoneButton"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getTextColor {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextColorWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textColor"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setTextAllCapsWithBoolean:(jboolean)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"textAllCaps"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:JavaLangBoolean_valueOfWithBoolean_(value)];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getFirstBaselineToTopHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"firstBaselineToTopHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)tryGetLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"getter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderGet" withId:JavaLangInteger_valueOfWithInt_(++orderGet_)];
  return self;
}

- (id)getLastBaselineToBottomHeight {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  return [((id<JavaUtilMap>) nil_chk(attrs)) getWithId:@"commandReturnValue"];
}

- (ASUITextViewImpl_UITextViewCommandBuilder *)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  id<JavaUtilMap> attrs = [self initCommandWithNSString:@"lastBaselineToBottomHeight"];
  (void) [((id<JavaUtilMap>) nil_chk(attrs)) putWithId:@"type" withId:@"attribute"];
  (void) [attrs putWithId:@"setter" withId:JavaLangBoolean_valueOfWithBoolean_(true)];
  (void) [attrs putWithId:@"orderSet" withId:JavaLangInteger_valueOfWithInt_(++orderSet_)];
  (void) [attrs putWithId:@"value" withId:value];
  return self;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 3, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 5, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 6, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 7, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 8, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 9, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 10, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 12, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 13, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 14, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 15, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 16, 17, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 18, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 19, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 20, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 21, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 22, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 23, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 24, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 25, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 26, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 27, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 28, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 29, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 30, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 31, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 32, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 33, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 34, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 35, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 36, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 37, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 38, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 39, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 40, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 41, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 42, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 43, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 44, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 46, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 47, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 49, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 50, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 51, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 52, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 53, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 54, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 55, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 56, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 57, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 58, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 59, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 60, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 61, 48, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 62, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 63, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 64, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 65, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 66, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 67, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 68, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 69, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 70, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 71, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 72, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 73, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 74, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 75, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 76, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 77, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 78, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 79, 2, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 80, 4, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LASUITextViewImpl_UITextViewCommandBuilder;", 0x1, 81, 4, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewImpl:);
  methods[1].selector = @selector(executeWithBoolean:);
  methods[2].selector = @selector(tryGetIosText);
  methods[3].selector = @selector(getIosText);
  methods[4].selector = @selector(setIosTextWithNSString:);
  methods[5].selector = @selector(tryGetIosTextColor);
  methods[6].selector = @selector(getIosTextColor);
  methods[7].selector = @selector(setIosTextColorWithNSString:);
  methods[8].selector = @selector(tryGetIosUsesStandardTextScaling);
  methods[9].selector = @selector(isIosUsesStandardTextScaling);
  methods[10].selector = @selector(setIosUsesStandardTextScalingWithBoolean:);
  methods[11].selector = @selector(tryGetIosIsEditable);
  methods[12].selector = @selector(isIosIsEditable);
  methods[13].selector = @selector(setIosIsEditableWithBoolean:);
  methods[14].selector = @selector(tryGetIosAllowsEditingTextAttributes);
  methods[15].selector = @selector(isIosAllowsEditingTextAttributes);
  methods[16].selector = @selector(setIosAllowsEditingTextAttributesWithBoolean:);
  methods[17].selector = @selector(tryGetIosClearsOnInsertion);
  methods[18].selector = @selector(isIosClearsOnInsertion);
  methods[19].selector = @selector(setIosClearsOnInsertionWithBoolean:);
  methods[20].selector = @selector(tryGetIosIsSelectable);
  methods[21].selector = @selector(isIosIsSelectable);
  methods[22].selector = @selector(setIosIsSelectableWithBoolean:);
  methods[23].selector = @selector(tryGetTextIsSelectable);
  methods[24].selector = @selector(getTextIsSelectable);
  methods[25].selector = @selector(setTextIsSelectableWithBoolean:);
  methods[26].selector = @selector(tryGetText);
  methods[27].selector = @selector(getText);
  methods[28].selector = @selector(setTextWithNSString:);
  methods[29].selector = @selector(tryGetGravity);
  methods[30].selector = @selector(getGravity);
  methods[31].selector = @selector(setGravityWithNSString:);
  methods[32].selector = @selector(tryGetTextSize);
  methods[33].selector = @selector(getTextSize);
  methods[34].selector = @selector(setTextSizeWithNSString:);
  methods[35].selector = @selector(tryGetLineSpacingExtra);
  methods[36].selector = @selector(getLineSpacingExtra);
  methods[37].selector = @selector(setLineSpacingExtraWithNSString:);
  methods[38].selector = @selector(tryGetLineSpacingMultiplier);
  methods[39].selector = @selector(getLineSpacingMultiplier);
  methods[40].selector = @selector(setLineSpacingMultiplierWithFloat:);
  methods[41].selector = @selector(setTextColorHintWithNSString:);
  methods[42].selector = @selector(tryGetHint);
  methods[43].selector = @selector(getHint);
  methods[44].selector = @selector(setHintWithNSString:);
  methods[45].selector = @selector(setOnEditorActionWithNSString:);
  methods[46].selector = @selector(setOnFocusChangeWithNSString:);
  methods[47].selector = @selector(setOnTextChangeWithNSString:);
  methods[48].selector = @selector(setOnbeforeTextChangeWithNSString:);
  methods[49].selector = @selector(setOnafterTextChangeWithNSString:);
  methods[50].selector = @selector(setIosInputViewWithNSString:);
  methods[51].selector = @selector(setHintTextFormatWithNSString:);
  methods[52].selector = @selector(setPaddingWithNSString:);
  methods[53].selector = @selector(tryGetPaddingBottom);
  methods[54].selector = @selector(getPaddingBottom);
  methods[55].selector = @selector(setPaddingBottomWithNSString:);
  methods[56].selector = @selector(tryGetPaddingRight);
  methods[57].selector = @selector(getPaddingRight);
  methods[58].selector = @selector(setPaddingRightWithNSString:);
  methods[59].selector = @selector(tryGetPaddingLeft);
  methods[60].selector = @selector(getPaddingLeft);
  methods[61].selector = @selector(setPaddingLeftWithNSString:);
  methods[62].selector = @selector(tryGetPaddingStart);
  methods[63].selector = @selector(getPaddingStart);
  methods[64].selector = @selector(setPaddingStartWithNSString:);
  methods[65].selector = @selector(tryGetPaddingEnd);
  methods[66].selector = @selector(getPaddingEnd);
  methods[67].selector = @selector(setPaddingEndWithNSString:);
  methods[68].selector = @selector(tryGetPaddingTop);
  methods[69].selector = @selector(getPaddingTop);
  methods[70].selector = @selector(setPaddingTopWithNSString:);
  methods[71].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[72].selector = @selector(setPaddingVerticalWithNSString:);
  methods[73].selector = @selector(setDrawableLeftWithNSString:);
  methods[74].selector = @selector(setDrawableStartWithNSString:);
  methods[75].selector = @selector(setDrawableRightWithNSString:);
  methods[76].selector = @selector(setDrawableEndWithNSString:);
  methods[77].selector = @selector(setDrawableTopWithNSString:);
  methods[78].selector = @selector(setDrawableBottomWithNSString:);
  methods[79].selector = @selector(tryGetDrawablePadding);
  methods[80].selector = @selector(getDrawablePadding);
  methods[81].selector = @selector(setDrawablePaddingWithNSString:);
  methods[82].selector = @selector(setDrawableTintWithNSString:);
  methods[83].selector = @selector(setDrawableTintModeWithNSString:);
  methods[84].selector = @selector(setEnabledWithBoolean:);
  methods[85].selector = @selector(tryGetTextColorHighlight);
  methods[86].selector = @selector(getTextColorHighlight);
  methods[87].selector = @selector(setTextColorHighlightWithNSString:);
  methods[88].selector = @selector(tryGetMinLines);
  methods[89].selector = @selector(getMinLines);
  methods[90].selector = @selector(setMinLinesWithInt:);
  methods[91].selector = @selector(setLinesWithInt:);
  methods[92].selector = @selector(tryGetMaxLines);
  methods[93].selector = @selector(getMaxLines);
  methods[94].selector = @selector(setMaxLinesWithInt:);
  methods[95].selector = @selector(tryGetMinWidth);
  methods[96].selector = @selector(getMinWidth);
  methods[97].selector = @selector(setMinWidthWithNSString:);
  methods[98].selector = @selector(tryGetMinHeight);
  methods[99].selector = @selector(getMinHeight);
  methods[100].selector = @selector(setMinHeightWithNSString:);
  methods[101].selector = @selector(tryGetMaxWidth);
  methods[102].selector = @selector(getMaxWidth);
  methods[103].selector = @selector(setMaxWidthWithNSString:);
  methods[104].selector = @selector(tryGetMaxHeight);
  methods[105].selector = @selector(getMaxHeight);
  methods[106].selector = @selector(setMaxHeightWithNSString:);
  methods[107].selector = @selector(tryGetHeight);
  methods[108].selector = @selector(getHeight);
  methods[109].selector = @selector(setHeightWithNSString:);
  methods[110].selector = @selector(tryGetWidth);
  methods[111].selector = @selector(getWidth);
  methods[112].selector = @selector(setWidthWithNSString:);
  methods[113].selector = @selector(tryGetMaxEms);
  methods[114].selector = @selector(getMaxEms);
  methods[115].selector = @selector(setMaxEmsWithInt:);
  methods[116].selector = @selector(tryGetMinEms);
  methods[117].selector = @selector(getMinEms);
  methods[118].selector = @selector(setMinEmsWithInt:);
  methods[119].selector = @selector(setEmsWithInt:);
  methods[120].selector = @selector(setEditableWithBoolean:);
  methods[121].selector = @selector(setMaxLengthWithInt:);
  methods[122].selector = @selector(setTypefaceWithNSString:);
  methods[123].selector = @selector(setTextStyleWithNSString:);
  methods[124].selector = @selector(setFontFamilyWithNSString:);
  methods[125].selector = @selector(setAutoTextWithBoolean:);
  methods[126].selector = @selector(setCapitalizeWithNSString:);
  methods[127].selector = @selector(tryGetCursorVisible);
  methods[128].selector = @selector(isCursorVisible);
  methods[129].selector = @selector(setCursorVisibleWithBoolean:);
  methods[130].selector = @selector(setNumericWithNSString:);
  methods[131].selector = @selector(setDigitsWithNSString:);
  methods[132].selector = @selector(setPhoneNumberWithBoolean:);
  methods[133].selector = @selector(tryGetInputType);
  methods[134].selector = @selector(getInputType);
  methods[135].selector = @selector(setInputTypeWithNSString:);
  methods[136].selector = @selector(tryGetImeOptions);
  methods[137].selector = @selector(getImeOptions);
  methods[138].selector = @selector(setImeOptionsWithNSString:);
  methods[139].selector = @selector(selectAllOnFocusWithBoolean:);
  methods[140].selector = @selector(selectAllWithBoolean:);
  methods[141].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[142].selector = @selector(setSingleLineWithBoolean:);
  methods[143].selector = @selector(setIosInputAccessoryViewDoneButtonWithNSString:);
  methods[144].selector = @selector(tryGetTextColor);
  methods[145].selector = @selector(getTextColor);
  methods[146].selector = @selector(setTextColorWithNSString:);
  methods[147].selector = @selector(setTextAllCapsWithBoolean:);
  methods[148].selector = @selector(tryGetFirstBaselineToTopHeight);
  methods[149].selector = @selector(getFirstBaselineToTopHeight);
  methods[150].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[151].selector = @selector(tryGetLastBaselineToBottomHeight);
  methods[152].selector = @selector(getLastBaselineToBottomHeight);
  methods[153].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewImpl;", "execute", "Z", "setIosText", "LNSString;", "setIosTextColor", "setIosUsesStandardTextScaling", "setIosIsEditable", "setIosAllowsEditingTextAttributes", "setIosClearsOnInsertion", "setIosIsSelectable", "setTextIsSelectable", "setText", "setGravity", "setTextSize", "setLineSpacingExtra", "setLineSpacingMultiplier", "F", "setTextColorHint", "setHint", "setOnEditorAction", "setOnFocusChange", "setOnTextChange", "setOnbeforeTextChange", "setOnafterTextChange", "setIosInputView", "setHintTextFormat", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setEnabled", "setTextColorHighlight", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setAutoText", "setCapitalize", "setCursorVisible", "setNumeric", "setDigits", "setPhoneNumber", "setInputType", "setImeOptions", "selectAllOnFocus", "selectAll", "setScrollHorizontally", "setSingleLine", "setIosInputAccessoryViewDoneButton", "setTextColor", "setTextAllCaps", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight", "Lcom/ashera/layout/ViewImpl$ViewCommandBuilder<Lcom/ashera/layout/UITextViewImpl$UITextViewCommandBuilder;>;" };
  static const J2ObjcClassInfo _ASUITextViewImpl_UITextViewCommandBuilder = { "UITextViewCommandBuilder", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 154, 1, 0, -1, -1, 82, -1 };
  return &_ASUITextViewImpl_UITextViewCommandBuilder;
}

@end

void ASUITextViewImpl_UITextViewCommandBuilder_initWithASUITextViewImpl_(ASUITextViewImpl_UITextViewCommandBuilder *self, ASUITextViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewCommandBuilder_init(self);
}

ASUITextViewImpl_UITextViewCommandBuilder *new_ASUITextViewImpl_UITextViewCommandBuilder_initWithASUITextViewImpl_(ASUITextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_UITextViewCommandBuilder, initWithASUITextViewImpl_, outer$)
}

ASUITextViewImpl_UITextViewCommandBuilder *create_ASUITextViewImpl_UITextViewCommandBuilder_initWithASUITextViewImpl_(ASUITextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_UITextViewCommandBuilder, initWithASUITextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_UITextViewCommandBuilder)

@implementation ASUITextViewImpl_UITextViewBean

- (instancetype)initWithASUITextViewImpl:(ASUITextViewImpl *)outer$ {
  ASUITextViewImpl_UITextViewBean_initWithASUITextViewImpl_(self, outer$);
  return self;
}

- (id)getIosText {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosText])) executeWithBoolean:false])) getIosText];
}

- (void)setIosTextWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getIosTextColor {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosTextColor])) executeWithBoolean:false])) getIosTextColor];
}

- (void)setIosTextColorWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosTextColorWithNSString:value])) executeWithBoolean:true];
}

- (id)isIosUsesStandardTextScaling {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosUsesStandardTextScaling])) executeWithBoolean:false])) isIosUsesStandardTextScaling];
}

- (void)setIosUsesStandardTextScalingWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosUsesStandardTextScalingWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsEditable {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosIsEditable])) executeWithBoolean:false])) isIosIsEditable];
}

- (void)setIosIsEditableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosIsEditableWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosAllowsEditingTextAttributes {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosAllowsEditingTextAttributes])) executeWithBoolean:false])) isIosAllowsEditingTextAttributes];
}

- (void)setIosAllowsEditingTextAttributesWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosAllowsEditingTextAttributesWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosClearsOnInsertion {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosClearsOnInsertion])) executeWithBoolean:false])) isIosClearsOnInsertion];
}

- (void)setIosClearsOnInsertionWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosClearsOnInsertionWithBoolean:value])) executeWithBoolean:true];
}

- (id)isIosIsSelectable {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetIosIsSelectable])) executeWithBoolean:false])) isIosIsSelectable];
}

- (void)setIosIsSelectableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosIsSelectableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTextIsSelectable {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextIsSelectable])) executeWithBoolean:false])) getTextIsSelectable];
}

- (void)setTextIsSelectableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextIsSelectableWithBoolean:value])) executeWithBoolean:true];
}

- (id)getText {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetText])) executeWithBoolean:false])) getText];
}

- (void)setTextWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextWithNSString:value])) executeWithBoolean:true];
}

- (id)getGravity {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetGravity])) executeWithBoolean:false])) getGravity];
}

- (void)setGravityWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setGravityWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextSize {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextSize])) executeWithBoolean:false])) getTextSize];
}

- (void)setTextSizeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextSizeWithNSString:value])) executeWithBoolean:true];
}

- (id)getLineSpacingExtra {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLineSpacingExtra])) executeWithBoolean:false])) getLineSpacingExtra];
}

- (void)setLineSpacingExtraWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLineSpacingExtraWithNSString:value])) executeWithBoolean:true];
}

- (id)getLineSpacingMultiplier {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLineSpacingMultiplier])) executeWithBoolean:false])) getLineSpacingMultiplier];
}

- (void)setLineSpacingMultiplierWithFloat:(jfloat)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLineSpacingMultiplierWithFloat:value])) executeWithBoolean:true];
}

- (void)setTextColorHintWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorHintWithNSString:value])) executeWithBoolean:true];
}

- (id)getHint {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHint])) executeWithBoolean:false])) getHint];
}

- (void)setHintWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnEditorActionWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnEditorActionWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnFocusChangeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnFocusChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnTextChangeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnbeforeTextChangeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnbeforeTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setOnafterTextChangeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setOnafterTextChangeWithNSString:value])) executeWithBoolean:true];
}

- (void)setIosInputViewWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosInputViewWithNSString:value])) executeWithBoolean:true];
}

- (void)setHintTextFormatWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHintTextFormatWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingBottom {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingBottom])) executeWithBoolean:false])) getPaddingBottom];
}

- (void)setPaddingBottomWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingRight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingRight])) executeWithBoolean:false])) getPaddingRight];
}

- (void)setPaddingRightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingRightWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingLeft {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingLeft])) executeWithBoolean:false])) getPaddingLeft];
}

- (void)setPaddingLeftWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingLeftWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingStart {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingStart])) executeWithBoolean:false])) getPaddingStart];
}

- (void)setPaddingStartWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingStartWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingEnd {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingEnd])) executeWithBoolean:false])) getPaddingEnd];
}

- (void)setPaddingEndWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingEndWithNSString:value])) executeWithBoolean:true];
}

- (id)getPaddingTop {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetPaddingTop])) executeWithBoolean:false])) getPaddingTop];
}

- (void)setPaddingTopWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingHorizontalWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingHorizontalWithNSString:value])) executeWithBoolean:true];
}

- (void)setPaddingVerticalWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPaddingVerticalWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableLeftWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableLeftWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableStartWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableStartWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableRightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableRightWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableEndWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableEndWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTopWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTopWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableBottomWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableBottomWithNSString:value])) executeWithBoolean:true];
}

- (id)getDrawablePadding {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetDrawablePadding])) executeWithBoolean:false])) getDrawablePadding];
}

- (void)setDrawablePaddingWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawablePaddingWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintWithNSString:value])) executeWithBoolean:true];
}

- (void)setDrawableTintModeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDrawableTintModeWithNSString:value])) executeWithBoolean:true];
}

- (void)setEnabledWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEnabledWithBoolean:value])) executeWithBoolean:true];
}

- (id)getTextColorHighlight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColorHighlight])) executeWithBoolean:false])) getTextColorHighlight];
}

- (void)setTextColorHighlightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorHighlightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinLines {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinLines])) executeWithBoolean:false])) getMinLines];
}

- (void)setMinLinesWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinLinesWithInt:value])) executeWithBoolean:true];
}

- (void)setLinesWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMaxLines {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxLines])) executeWithBoolean:false])) getMaxLines];
}

- (void)setMaxLinesWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLinesWithInt:value])) executeWithBoolean:true];
}

- (id)getMinWidth {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinWidth])) executeWithBoolean:false])) getMinWidth];
}

- (void)setMinWidthWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMinHeight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinHeight])) executeWithBoolean:false])) getMinHeight];
}

- (void)setMinHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxWidth {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxWidth])) executeWithBoolean:false])) getMaxWidth];
}

- (void)setMaxWidthWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxHeight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxHeight])) executeWithBoolean:false])) getMaxHeight];
}

- (void)setMaxHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getHeight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetHeight])) executeWithBoolean:false])) getHeight];
}

- (void)setHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getWidth {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetWidth])) executeWithBoolean:false])) getWidth];
}

- (void)setWidthWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setWidthWithNSString:value])) executeWithBoolean:true];
}

- (id)getMaxEms {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMaxEms])) executeWithBoolean:false])) getMaxEms];
}

- (void)setMaxEmsWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxEmsWithInt:value])) executeWithBoolean:true];
}

- (id)getMinEms {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetMinEms])) executeWithBoolean:false])) getMinEms];
}

- (void)setMinEmsWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMinEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEmsWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEmsWithInt:value])) executeWithBoolean:true];
}

- (void)setEditableWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setEditableWithBoolean:value])) executeWithBoolean:true];
}

- (void)setMaxLengthWithInt:(jint)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setMaxLengthWithInt:value])) executeWithBoolean:true];
}

- (void)setTypefaceWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTypefaceWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextStyleWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextStyleWithNSString:value])) executeWithBoolean:true];
}

- (void)setFontFamilyWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFontFamilyWithNSString:value])) executeWithBoolean:true];
}

- (void)setAutoTextWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setAutoTextWithBoolean:value])) executeWithBoolean:true];
}

- (void)setCapitalizeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCapitalizeWithNSString:value])) executeWithBoolean:true];
}

- (id)isCursorVisible {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetCursorVisible])) executeWithBoolean:false])) isCursorVisible];
}

- (void)setCursorVisibleWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setCursorVisibleWithBoolean:value])) executeWithBoolean:true];
}

- (void)setNumericWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setNumericWithNSString:value])) executeWithBoolean:true];
}

- (void)setDigitsWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setDigitsWithNSString:value])) executeWithBoolean:true];
}

- (void)setPhoneNumberWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setPhoneNumberWithBoolean:value])) executeWithBoolean:true];
}

- (id)getInputType {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetInputType])) executeWithBoolean:false])) getInputType];
}

- (void)setInputTypeWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setInputTypeWithNSString:value])) executeWithBoolean:true];
}

- (id)getImeOptions {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetImeOptions])) executeWithBoolean:false])) getImeOptions];
}

- (void)setImeOptionsWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setImeOptionsWithNSString:value])) executeWithBoolean:true];
}

- (void)selectAllOnFocusWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) selectAllOnFocusWithBoolean:value])) executeWithBoolean:true];
}

- (void)selectAllWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) selectAllWithBoolean:value])) executeWithBoolean:true];
}

- (void)setScrollHorizontallyWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setScrollHorizontallyWithBoolean:value])) executeWithBoolean:true];
}

- (void)setSingleLineWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setSingleLineWithBoolean:value])) executeWithBoolean:true];
}

- (void)setIosInputAccessoryViewDoneButtonWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setIosInputAccessoryViewDoneButtonWithNSString:value])) executeWithBoolean:true];
}

- (id)getTextColor {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetTextColor])) executeWithBoolean:false])) getTextColor];
}

- (void)setTextColorWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextColorWithNSString:value])) executeWithBoolean:true];
}

- (void)setTextAllCapsWithBoolean:(jboolean)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setTextAllCapsWithBoolean:value])) executeWithBoolean:true];
}

- (id)getFirstBaselineToTopHeight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetFirstBaselineToTopHeight])) executeWithBoolean:false])) getFirstBaselineToTopHeight];
}

- (void)setFirstBaselineToTopHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setFirstBaselineToTopHeightWithNSString:value])) executeWithBoolean:true];
}

- (id)getLastBaselineToBottomHeight {
  return [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) tryGetLastBaselineToBottomHeight])) executeWithBoolean:false])) getLastBaselineToBottomHeight];
}

- (void)setLastBaselineToBottomHeightWithNSString:(NSString *)value {
  (void) [((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([((ASUITextViewImpl_UITextViewCommandBuilder *) nil_chk([this$0_ getBuilder])) reset])) setLastBaselineToBottomHeightWithNSString:value])) executeWithBoolean:true];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 8, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 9, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 12, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 13, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 15, 16, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 17, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 18, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 19, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 20, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 21, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 22, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 24, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 26, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 28, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 30, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 33, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 35, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 36, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 37, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 38, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 39, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 40, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 41, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 42, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 43, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 44, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 45, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 46, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 48, 47, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 49, 47, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 50, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 51, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 52, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 53, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 54, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 55, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 56, 47, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 57, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 58, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 59, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 60, 47, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 61, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 62, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 63, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 64, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 65, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 66, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 67, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 68, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 69, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 70, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 71, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 72, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 73, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 74, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 75, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 76, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 77, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 78, 5, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 79, 2, -1, -1, -1, -1 },
    { NULL, "LNSObject;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 80, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithASUITextViewImpl:);
  methods[1].selector = @selector(getIosText);
  methods[2].selector = @selector(setIosTextWithNSString:);
  methods[3].selector = @selector(getIosTextColor);
  methods[4].selector = @selector(setIosTextColorWithNSString:);
  methods[5].selector = @selector(isIosUsesStandardTextScaling);
  methods[6].selector = @selector(setIosUsesStandardTextScalingWithBoolean:);
  methods[7].selector = @selector(isIosIsEditable);
  methods[8].selector = @selector(setIosIsEditableWithBoolean:);
  methods[9].selector = @selector(isIosAllowsEditingTextAttributes);
  methods[10].selector = @selector(setIosAllowsEditingTextAttributesWithBoolean:);
  methods[11].selector = @selector(isIosClearsOnInsertion);
  methods[12].selector = @selector(setIosClearsOnInsertionWithBoolean:);
  methods[13].selector = @selector(isIosIsSelectable);
  methods[14].selector = @selector(setIosIsSelectableWithBoolean:);
  methods[15].selector = @selector(getTextIsSelectable);
  methods[16].selector = @selector(setTextIsSelectableWithBoolean:);
  methods[17].selector = @selector(getText);
  methods[18].selector = @selector(setTextWithNSString:);
  methods[19].selector = @selector(getGravity);
  methods[20].selector = @selector(setGravityWithNSString:);
  methods[21].selector = @selector(getTextSize);
  methods[22].selector = @selector(setTextSizeWithNSString:);
  methods[23].selector = @selector(getLineSpacingExtra);
  methods[24].selector = @selector(setLineSpacingExtraWithNSString:);
  methods[25].selector = @selector(getLineSpacingMultiplier);
  methods[26].selector = @selector(setLineSpacingMultiplierWithFloat:);
  methods[27].selector = @selector(setTextColorHintWithNSString:);
  methods[28].selector = @selector(getHint);
  methods[29].selector = @selector(setHintWithNSString:);
  methods[30].selector = @selector(setOnEditorActionWithNSString:);
  methods[31].selector = @selector(setOnFocusChangeWithNSString:);
  methods[32].selector = @selector(setOnTextChangeWithNSString:);
  methods[33].selector = @selector(setOnbeforeTextChangeWithNSString:);
  methods[34].selector = @selector(setOnafterTextChangeWithNSString:);
  methods[35].selector = @selector(setIosInputViewWithNSString:);
  methods[36].selector = @selector(setHintTextFormatWithNSString:);
  methods[37].selector = @selector(setPaddingWithNSString:);
  methods[38].selector = @selector(getPaddingBottom);
  methods[39].selector = @selector(setPaddingBottomWithNSString:);
  methods[40].selector = @selector(getPaddingRight);
  methods[41].selector = @selector(setPaddingRightWithNSString:);
  methods[42].selector = @selector(getPaddingLeft);
  methods[43].selector = @selector(setPaddingLeftWithNSString:);
  methods[44].selector = @selector(getPaddingStart);
  methods[45].selector = @selector(setPaddingStartWithNSString:);
  methods[46].selector = @selector(getPaddingEnd);
  methods[47].selector = @selector(setPaddingEndWithNSString:);
  methods[48].selector = @selector(getPaddingTop);
  methods[49].selector = @selector(setPaddingTopWithNSString:);
  methods[50].selector = @selector(setPaddingHorizontalWithNSString:);
  methods[51].selector = @selector(setPaddingVerticalWithNSString:);
  methods[52].selector = @selector(setDrawableLeftWithNSString:);
  methods[53].selector = @selector(setDrawableStartWithNSString:);
  methods[54].selector = @selector(setDrawableRightWithNSString:);
  methods[55].selector = @selector(setDrawableEndWithNSString:);
  methods[56].selector = @selector(setDrawableTopWithNSString:);
  methods[57].selector = @selector(setDrawableBottomWithNSString:);
  methods[58].selector = @selector(getDrawablePadding);
  methods[59].selector = @selector(setDrawablePaddingWithNSString:);
  methods[60].selector = @selector(setDrawableTintWithNSString:);
  methods[61].selector = @selector(setDrawableTintModeWithNSString:);
  methods[62].selector = @selector(setEnabledWithBoolean:);
  methods[63].selector = @selector(getTextColorHighlight);
  methods[64].selector = @selector(setTextColorHighlightWithNSString:);
  methods[65].selector = @selector(getMinLines);
  methods[66].selector = @selector(setMinLinesWithInt:);
  methods[67].selector = @selector(setLinesWithInt:);
  methods[68].selector = @selector(getMaxLines);
  methods[69].selector = @selector(setMaxLinesWithInt:);
  methods[70].selector = @selector(getMinWidth);
  methods[71].selector = @selector(setMinWidthWithNSString:);
  methods[72].selector = @selector(getMinHeight);
  methods[73].selector = @selector(setMinHeightWithNSString:);
  methods[74].selector = @selector(getMaxWidth);
  methods[75].selector = @selector(setMaxWidthWithNSString:);
  methods[76].selector = @selector(getMaxHeight);
  methods[77].selector = @selector(setMaxHeightWithNSString:);
  methods[78].selector = @selector(getHeight);
  methods[79].selector = @selector(setHeightWithNSString:);
  methods[80].selector = @selector(getWidth);
  methods[81].selector = @selector(setWidthWithNSString:);
  methods[82].selector = @selector(getMaxEms);
  methods[83].selector = @selector(setMaxEmsWithInt:);
  methods[84].selector = @selector(getMinEms);
  methods[85].selector = @selector(setMinEmsWithInt:);
  methods[86].selector = @selector(setEmsWithInt:);
  methods[87].selector = @selector(setEditableWithBoolean:);
  methods[88].selector = @selector(setMaxLengthWithInt:);
  methods[89].selector = @selector(setTypefaceWithNSString:);
  methods[90].selector = @selector(setTextStyleWithNSString:);
  methods[91].selector = @selector(setFontFamilyWithNSString:);
  methods[92].selector = @selector(setAutoTextWithBoolean:);
  methods[93].selector = @selector(setCapitalizeWithNSString:);
  methods[94].selector = @selector(isCursorVisible);
  methods[95].selector = @selector(setCursorVisibleWithBoolean:);
  methods[96].selector = @selector(setNumericWithNSString:);
  methods[97].selector = @selector(setDigitsWithNSString:);
  methods[98].selector = @selector(setPhoneNumberWithBoolean:);
  methods[99].selector = @selector(getInputType);
  methods[100].selector = @selector(setInputTypeWithNSString:);
  methods[101].selector = @selector(getImeOptions);
  methods[102].selector = @selector(setImeOptionsWithNSString:);
  methods[103].selector = @selector(selectAllOnFocusWithBoolean:);
  methods[104].selector = @selector(selectAllWithBoolean:);
  methods[105].selector = @selector(setScrollHorizontallyWithBoolean:);
  methods[106].selector = @selector(setSingleLineWithBoolean:);
  methods[107].selector = @selector(setIosInputAccessoryViewDoneButtonWithNSString:);
  methods[108].selector = @selector(getTextColor);
  methods[109].selector = @selector(setTextColorWithNSString:);
  methods[110].selector = @selector(setTextAllCapsWithBoolean:);
  methods[111].selector = @selector(getFirstBaselineToTopHeight);
  methods[112].selector = @selector(setFirstBaselineToTopHeightWithNSString:);
  methods[113].selector = @selector(getLastBaselineToBottomHeight);
  methods[114].selector = @selector(setLastBaselineToBottomHeightWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LASUITextViewImpl;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LASUITextViewImpl;", "setIosText", "LNSString;", "setIosTextColor", "setIosUsesStandardTextScaling", "Z", "setIosIsEditable", "setIosAllowsEditingTextAttributes", "setIosClearsOnInsertion", "setIosIsSelectable", "setTextIsSelectable", "setText", "setGravity", "setTextSize", "setLineSpacingExtra", "setLineSpacingMultiplier", "F", "setTextColorHint", "setHint", "setOnEditorAction", "setOnFocusChange", "setOnTextChange", "setOnbeforeTextChange", "setOnafterTextChange", "setIosInputView", "setHintTextFormat", "setPadding", "setPaddingBottom", "setPaddingRight", "setPaddingLeft", "setPaddingStart", "setPaddingEnd", "setPaddingTop", "setPaddingHorizontal", "setPaddingVertical", "setDrawableLeft", "setDrawableStart", "setDrawableRight", "setDrawableEnd", "setDrawableTop", "setDrawableBottom", "setDrawablePadding", "setDrawableTint", "setDrawableTintMode", "setEnabled", "setTextColorHighlight", "setMinLines", "I", "setLines", "setMaxLines", "setMinWidth", "setMinHeight", "setMaxWidth", "setMaxHeight", "setHeight", "setWidth", "setMaxEms", "setMinEms", "setEms", "setEditable", "setMaxLength", "setTypeface", "setTextStyle", "setFontFamily", "setAutoText", "setCapitalize", "setCursorVisible", "setNumeric", "setDigits", "setPhoneNumber", "setInputType", "setImeOptions", "selectAllOnFocus", "selectAll", "setScrollHorizontally", "setSingleLine", "setIosInputAccessoryViewDoneButton", "setTextColor", "setTextAllCaps", "setFirstBaselineToTopHeight", "setLastBaselineToBottomHeight" };
  static const J2ObjcClassInfo _ASUITextViewImpl_UITextViewBean = { "UITextViewBean", "com.ashera.layout", ptrTable, methods, fields, 7, 0x1, 115, 1, 0, -1, -1, -1, -1 };
  return &_ASUITextViewImpl_UITextViewBean;
}

@end

void ASUITextViewImpl_UITextViewBean_initWithASUITextViewImpl_(ASUITextViewImpl_UITextViewBean *self, ASUITextViewImpl *outer$) {
  self->this$0_ = outer$;
  ASViewImpl_ViewBean_initWithASIWidget_(self, outer$);
}

ASUITextViewImpl_UITextViewBean *new_ASUITextViewImpl_UITextViewBean_initWithASUITextViewImpl_(ASUITextViewImpl *outer$) {
  J2OBJC_NEW_IMPL(ASUITextViewImpl_UITextViewBean, initWithASUITextViewImpl_, outer$)
}

ASUITextViewImpl_UITextViewBean *create_ASUITextViewImpl_UITextViewBean_initWithASUITextViewImpl_(ASUITextViewImpl *outer$) {
  J2OBJC_CREATE_IMPL(ASUITextViewImpl_UITextViewBean, initWithASUITextViewImpl_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ASUITextViewImpl_UITextViewBean)
