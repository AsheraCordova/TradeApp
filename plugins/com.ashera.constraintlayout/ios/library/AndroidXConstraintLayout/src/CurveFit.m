//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXConstraintLayout\src\main\java\androidx\constraintlayout\core\motion\utils\CurveFit.java
//

#include "ArcCurveFit.h"
#include "CurveFit.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "LinearCurveFit.h"
#include "MonotonicCurveFit.h"
#include "java/lang/System.h"


@implementation ADXCurveFit

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXCurveFit_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (ADXCurveFit *)getWithInt:(jint)type
            withDoubleArray:(IOSDoubleArray *)time
           withDoubleArray2:(IOSObjectArray *)y {
  return ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(type, time, y);
}

+ (ADXCurveFit *)getArcWithIntArray:(IOSIntArray *)arcModes
                    withDoubleArray:(IOSDoubleArray *)time
                   withDoubleArray2:(IOSObjectArray *)y {
  return ADXCurveFit_getArcWithIntArray_withDoubleArray_withDoubleArray2_(arcModes, time, y);
}

- (void)getPosWithDouble:(jdouble)t
         withDoubleArray:(IOSDoubleArray *)v {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (void)getPosWithDouble:(jdouble)t
          withFloatArray:(IOSFloatArray *)v {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getPosWithDouble:(jdouble)t
                    withInt:(jint)j {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (void)getSlopeWithDouble:(jdouble)t
           withDoubleArray:(IOSDoubleArray *)v {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
}

- (jdouble)getSlopeWithDouble:(jdouble)t
                      withInt:(jint)j {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

- (IOSDoubleArray *)getTimePoints {
  // can't call an abstract method
  [self doesNotRecognizeSelector:_cmd];
  return 0;
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXCurveFit;", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "LADXCurveFit;", 0x9, 2, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 4, 6, -1, -1, -1, -1 },
    { NULL, "D", 0x401, 4, 7, -1, -1, -1, -1 },
    { NULL, "V", 0x401, 8, 5, -1, -1, -1, -1 },
    { NULL, "D", 0x401, 8, 7, -1, -1, -1, -1 },
    { NULL, "[D", 0x401, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(getWithInt:withDoubleArray:withDoubleArray2:);
  methods[2].selector = @selector(getArcWithIntArray:withDoubleArray:withDoubleArray2:);
  methods[3].selector = @selector(getPosWithDouble:withDoubleArray:);
  methods[4].selector = @selector(getPosWithDouble:withFloatArray:);
  methods[5].selector = @selector(getPosWithDouble:withInt:);
  methods[6].selector = @selector(getSlopeWithDouble:withDoubleArray:);
  methods[7].selector = @selector(getSlopeWithDouble:withInt:);
  methods[8].selector = @selector(getTimePoints);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "SPLINE", "I", .constantValue.asInt = ADXCurveFit_SPLINE, 0x19, -1, -1, -1, -1 },
    { "LINEAR", "I", .constantValue.asInt = ADXCurveFit_LINEAR, 0x19, -1, -1, -1, -1 },
    { "CONSTANT", "I", .constantValue.asInt = ADXCurveFit_CONSTANT, 0x19, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "get", "I[D[[D", "getArc", "[I[D[[D", "getPos", "D[D", "D[F", "DI", "getSlope", "LADXCurveFit_Constant;" };
  static const J2ObjcClassInfo _ADXCurveFit = { "CurveFit", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x401, 9, 3, -1, 9, -1, -1, -1 };
  return &_ADXCurveFit;
}

@end

void ADXCurveFit_init(ADXCurveFit *self) {
  NSObject_init(self);
}

ADXCurveFit *ADXCurveFit_getWithInt_withDoubleArray_withDoubleArray2_(jint type, IOSDoubleArray *time, IOSObjectArray *y) {
  ADXCurveFit_initialize();
  if (((IOSDoubleArray *) nil_chk(time))->size_ == 1) {
    type = ADXCurveFit_CONSTANT;
  }
  switch (type) {
    case ADXCurveFit_SPLINE:
    return create_ADXMonotonicCurveFit_initWithDoubleArray_withDoubleArray2_(time, y);
    case ADXCurveFit_CONSTANT:
    return create_ADXCurveFit_Constant_initWithDouble_withDoubleArray_(IOSDoubleArray_Get(time, 0), IOSObjectArray_Get(nil_chk(y), 0));
    default:
    return create_ADXLinearCurveFit_initWithDoubleArray_withDoubleArray2_(time, y);
  }
}

ADXCurveFit *ADXCurveFit_getArcWithIntArray_withDoubleArray_withDoubleArray2_(IOSIntArray *arcModes, IOSDoubleArray *time, IOSObjectArray *y) {
  ADXCurveFit_initialize();
  return create_ADXArcCurveFit_initWithIntArray_withDoubleArray_withDoubleArray2_(arcModes, time, y);
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCurveFit)

@implementation ADXCurveFit_Constant

- (instancetype)initWithDouble:(jdouble)time
               withDoubleArray:(IOSDoubleArray *)value {
  ADXCurveFit_Constant_initWithDouble_withDoubleArray_(self, time, value);
  return self;
}

- (void)getPosWithDouble:(jdouble)t
         withDoubleArray:(IOSDoubleArray *)v {
  JavaLangSystem_arraycopyWithId_withInt_withId_withInt_withInt_(mValue_, 0, v, 0, ((IOSDoubleArray *) nil_chk(mValue_))->size_);
}

- (void)getPosWithDouble:(jdouble)t
          withFloatArray:(IOSFloatArray *)v {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(mValue_))->size_; i++) {
    *IOSFloatArray_GetRef(nil_chk(v), i) = (jfloat) IOSDoubleArray_Get(mValue_, i);
  }
}

- (jdouble)getPosWithDouble:(jdouble)t
                    withInt:(jint)j {
  return IOSDoubleArray_Get(nil_chk(mValue_), j);
}

- (void)getSlopeWithDouble:(jdouble)t
           withDoubleArray:(IOSDoubleArray *)v {
  for (jint i = 0; i < ((IOSDoubleArray *) nil_chk(mValue_))->size_; i++) {
    *IOSDoubleArray_GetRef(nil_chk(v), i) = 0;
  }
}

- (jdouble)getSlopeWithDouble:(jdouble)t
                      withInt:(jint)j {
  return 0;
}

- (IOSDoubleArray *)getTimePoints {
  return [IOSDoubleArray arrayWithDoubles:(jdouble[]){ mTime_ } count:1];
}

- (void)dealloc {
  RELEASE_(mValue_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 1, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 0, -1, -1, -1, -1 },
    { NULL, "D", 0x1, 4, 3, -1, -1, -1, -1 },
    { NULL, "[D", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithDouble:withDoubleArray:);
  methods[1].selector = @selector(getPosWithDouble:withDoubleArray:);
  methods[2].selector = @selector(getPosWithDouble:withFloatArray:);
  methods[3].selector = @selector(getPosWithDouble:withInt:);
  methods[4].selector = @selector(getSlopeWithDouble:withDoubleArray:);
  methods[5].selector = @selector(getSlopeWithDouble:withInt:);
  methods[6].selector = @selector(getTimePoints);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "mTime_", "D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mValue_", "[D", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "D[D", "getPos", "D[F", "DI", "getSlope", "LADXCurveFit;" };
  static const J2ObjcClassInfo _ADXCurveFit_Constant = { "Constant", "androidx.constraintlayout.core.motion.utils", ptrTable, methods, fields, 7, 0x8, 7, 2, 5, -1, -1, -1, -1 };
  return &_ADXCurveFit_Constant;
}

@end

void ADXCurveFit_Constant_initWithDouble_withDoubleArray_(ADXCurveFit_Constant *self, jdouble time, IOSDoubleArray *value) {
  ADXCurveFit_init(self);
  self->mTime_ = time;
  JreStrongAssign(&self->mValue_, value);
}

ADXCurveFit_Constant *new_ADXCurveFit_Constant_initWithDouble_withDoubleArray_(jdouble time, IOSDoubleArray *value) {
  J2OBJC_NEW_IMPL(ADXCurveFit_Constant, initWithDouble_withDoubleArray_, time, value)
}

ADXCurveFit_Constant *create_ADXCurveFit_Constant_initWithDouble_withDoubleArray_(jdouble time, IOSDoubleArray *value) {
  J2OBJC_CREATE_IMPL(ADXCurveFit_Constant, initWithDouble_withDoubleArray_, time, value)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXCurveFit_Constant)
