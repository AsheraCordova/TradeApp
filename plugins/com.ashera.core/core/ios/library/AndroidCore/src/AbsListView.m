//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroid\src\main\java\r\android\widget\AbsListView.java
//

#include "AbsListView.h"
#include "AdapterView.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "ListAdapter.h"
#include "LongSparseArray.h"
#include "SparseBooleanArray.h"
#include "View.h"
#include "java/lang/Integer.h"


@interface ADAbsListView () {
 @public
  jint mLastTouchMode_;
  jint mTranscriptMode_;
  jint mCacheColorHint_;
  jint mFastScrollStyle_;
  jint mTouchSlop_AbsListView_;
  jint mMinimumVelocity_;
  jint mMaximumVelocity_;
  jint mNestedYOffset_;
  jint mActivePointerId_;
  jint mFirstPositionDistanceGuess_;
  jint mLastPositionDistanceGuess_;
  jint mDirection_;
  jint mLastHandledItemCount_;
}

- (void)updateOnScreenCheckedViews;

@end

inline jint ADAbsListView_get_CHECK_POSITION_SEARCH_DISTANCE(void);
#define ADAbsListView_CHECK_POSITION_SEARCH_DISTANCE 20
J2OBJC_STATIC_FIELD_CONSTANT(ADAbsListView, CHECK_POSITION_SEARCH_DISTANCE, jint)

inline jint ADAbsListView_get_TOUCH_MODE_UNKNOWN(void);
#define ADAbsListView_TOUCH_MODE_UNKNOWN -1
J2OBJC_STATIC_FIELD_CONSTANT(ADAbsListView, TOUCH_MODE_UNKNOWN, jint)

inline jint ADAbsListView_get_TOUCH_MODE_ON(void);
#define ADAbsListView_TOUCH_MODE_ON 0
J2OBJC_STATIC_FIELD_CONSTANT(ADAbsListView, TOUCH_MODE_ON, jint)

inline jint ADAbsListView_get_TOUCH_MODE_OFF(void);
#define ADAbsListView_TOUCH_MODE_OFF 1
J2OBJC_STATIC_FIELD_CONSTANT(ADAbsListView, TOUCH_MODE_OFF, jint)

inline jint ADAbsListView_get_INVALID_POINTER(void);
#define ADAbsListView_INVALID_POINTER -1
J2OBJC_STATIC_FIELD_CONSTANT(ADAbsListView, INVALID_POINTER, jint)

__attribute__((unused)) static void ADAbsListView_updateOnScreenCheckedViews(ADAbsListView *self);

@interface ADAbsListView_OnScrollListener : NSObject

@end

@implementation ADAbsListView

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADAbsListView_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (void)setAdapterWithADListAdapter:(id<ADListAdapter>)adapter {
  if (adapter != nil) {
    mAdapterHasStableIds_ = [((id<ADListAdapter>) nil_chk(mAdapter_)) hasStableIds];
    if (mChoiceMode_ != ADAbsListView_CHOICE_MODE_NONE && mAdapterHasStableIds_ && mCheckedIdStates_ == nil) {
      JreStrongAssignAndConsume(&mCheckedIdStates_, new_ADLongSparseArray_init());
    }
  }
  [self clearChoices];
}

- (jint)getCheckedItemCount {
  return mCheckedItemCount_;
}

- (jboolean)isItemCheckedWithInt:(jint)position {
  if (mChoiceMode_ != ADAbsListView_CHOICE_MODE_NONE && mCheckStates_ != nil) {
    return [mCheckStates_ getWithInt:position];
  }
  return false;
}

- (jint)getCheckedItemPosition {
  if (mChoiceMode_ == ADAbsListView_CHOICE_MODE_SINGLE && mCheckStates_ != nil && [mCheckStates_ size] == 1) {
    return [mCheckStates_ keyAtWithInt:0];
  }
  return ADAdapterView_INVALID_POSITION;
}

- (ADSparseBooleanArray *)getCheckedItemPositions {
  if (mChoiceMode_ != ADAbsListView_CHOICE_MODE_NONE) {
    return mCheckStates_;
  }
  return nil;
}

- (IOSLongArray *)getCheckedItemIds {
  if (mChoiceMode_ == ADAbsListView_CHOICE_MODE_NONE || mCheckedIdStates_ == nil || mAdapter_ == nil) {
    return [IOSLongArray arrayWithLength:0];
  }
  ADLongSparseArray *idStates = mCheckedIdStates_;
  jint count = [idStates size];
  IOSLongArray *ids = [IOSLongArray arrayWithLength:count];
  for (jint i = 0; i < count; i++) {
    *IOSLongArray_GetRef(ids, i) = [idStates keyAtWithInt:i];
  }
  return ids;
}

- (void)clearChoices {
  if (mCheckStates_ != nil) {
    [mCheckStates_ clear];
  }
  if (mCheckedIdStates_ != nil) {
    [mCheckedIdStates_ clear];
  }
  mCheckedItemCount_ = 0;
}

- (jboolean)performItemClickWithADView:(ADView *)view
                               withInt:(jint)position
                              withLong:(jlong)id_ {
  jboolean handled = false;
  jboolean dispatchItemClick = true;
  if (mChoiceMode_ != ADAbsListView_CHOICE_MODE_NONE) {
    handled = true;
    jboolean checkedStateChanged = false;
    if (mChoiceMode_ == ADAbsListView_CHOICE_MODE_MULTIPLE || (mChoiceMode_ == ADAbsListView_CHOICE_MODE_MULTIPLE_MODAL && mChoiceActionMode_ != nil)) {
      jboolean checked = ![((ADSparseBooleanArray *) nil_chk(mCheckStates_)) getWithInt:position withBoolean:false];
      [((ADSparseBooleanArray *) nil_chk(mCheckStates_)) putWithInt:position withBoolean:checked];
      if (mCheckedIdStates_ != nil && [((id<ADListAdapter>) nil_chk(mAdapter_)) hasStableIds]) {
        if (checked) {
          [mCheckedIdStates_ putWithLong:[((id<ADListAdapter>) nil_chk(mAdapter_)) getItemIdWithInt:position] withId:JavaLangInteger_valueOfWithInt_(position)];
        }
        else {
          [mCheckedIdStates_ delete__WithLong:[((id<ADListAdapter>) nil_chk(mAdapter_)) getItemIdWithInt:position]];
        }
      }
      if (checked) {
        mCheckedItemCount_++;
      }
      else {
        mCheckedItemCount_--;
      }
      if (mChoiceActionMode_ != nil) {
        [((ADAbsListView_MultiChoiceModeWrapper *) nil_chk(mMultiChoiceModeCallback_)) onItemCheckedStateChangedWithADAbsListView_ActionMode:mChoiceActionMode_ withInt:position withLong:id_ withBoolean:checked];
        dispatchItemClick = false;
      }
      checkedStateChanged = true;
    }
    else if (mChoiceMode_ == ADAbsListView_CHOICE_MODE_SINGLE) {
      jboolean checked = ![((ADSparseBooleanArray *) nil_chk(mCheckStates_)) getWithInt:position withBoolean:false];
      if (checked) {
        [((ADSparseBooleanArray *) nil_chk(mCheckStates_)) clear];
        [((ADSparseBooleanArray *) nil_chk(mCheckStates_)) putWithInt:position withBoolean:true];
        if (mCheckedIdStates_ != nil && [((id<ADListAdapter>) nil_chk(mAdapter_)) hasStableIds]) {
          [mCheckedIdStates_ clear];
          [((ADLongSparseArray *) nil_chk(mCheckedIdStates_)) putWithLong:[((id<ADListAdapter>) nil_chk(mAdapter_)) getItemIdWithInt:position] withId:JavaLangInteger_valueOfWithInt_(position)];
        }
        mCheckedItemCount_ = 1;
      }
      else if ([((ADSparseBooleanArray *) nil_chk(mCheckStates_)) size] == 0 || ![((ADSparseBooleanArray *) nil_chk(mCheckStates_)) valueAtWithInt:0]) {
        mCheckedItemCount_ = 0;
      }
      checkedStateChanged = true;
    }
    if (checkedStateChanged) {
      ADAbsListView_updateOnScreenCheckedViews(self);
    }
  }
  if (dispatchItemClick) {
    handled |= [super performItemClickWithADView:view withInt:position withLong:id_];
  }
  return handled;
}

- (jint)getChoiceMode {
  return mChoiceMode_;
}

- (void)setChoiceModeWithInt:(jint)choiceMode {
  mChoiceMode_ = choiceMode;
  if (mChoiceActionMode_ != nil) {
    [mChoiceActionMode_ finish];
    JreStrongAssign(&mChoiceActionMode_, nil);
  }
  if (mChoiceMode_ != ADAbsListView_CHOICE_MODE_NONE) {
    if (mCheckStates_ == nil) {
      JreStrongAssignAndConsume(&mCheckStates_, new_ADSparseBooleanArray_initWithInt_(0));
    }
    if (mCheckedIdStates_ == nil && mAdapter_ != nil && [mAdapter_ hasStableIds]) {
      JreStrongAssignAndConsume(&mCheckedIdStates_, new_ADLongSparseArray_initWithInt_(0));
    }
    if (mChoiceMode_ == ADAbsListView_CHOICE_MODE_MULTIPLE_MODAL) {
      [self clearChoices];
      [self setLongClickableWithBoolean:true];
    }
  }
}

- (void)updateOnScreenCheckedViews {
  ADAbsListView_updateOnScreenCheckedViews(self);
}

- (void)dealloc {
  RELEASE_(mChoiceActionMode_);
  RELEASE_(mMultiChoiceModeCallback_);
  RELEASE_(mCheckStates_);
  RELEASE_(mCheckedIdStates_);
  RELEASE_(mAdapter_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 0, 1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 2, 3, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADSparseBooleanArray;", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "[J", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x1, 4, 5, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 6, 3, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(setAdapterWithADListAdapter:);
  methods[2].selector = @selector(getCheckedItemCount);
  methods[3].selector = @selector(isItemCheckedWithInt:);
  methods[4].selector = @selector(getCheckedItemPosition);
  methods[5].selector = @selector(getCheckedItemPositions);
  methods[6].selector = @selector(getCheckedItemIds);
  methods[7].selector = @selector(clearChoices);
  methods[8].selector = @selector(performItemClickWithADView:withInt:withLong:);
  methods[9].selector = @selector(getChoiceMode);
  methods[10].selector = @selector(setChoiceModeWithInt:);
  methods[11].selector = @selector(updateOnScreenCheckedViews);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "TRANSCRIPT_MODE_DISABLED", "I", .constantValue.asInt = ADAbsListView_TRANSCRIPT_MODE_DISABLED, 0x19, -1, -1, -1, -1 },
    { "TRANSCRIPT_MODE_NORMAL", "I", .constantValue.asInt = ADAbsListView_TRANSCRIPT_MODE_NORMAL, 0x19, -1, -1, -1, -1 },
    { "TRANSCRIPT_MODE_ALWAYS_SCROLL", "I", .constantValue.asInt = ADAbsListView_TRANSCRIPT_MODE_ALWAYS_SCROLL, 0x19, -1, -1, -1, -1 },
    { "TOUCH_MODE_REST", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_REST, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_DOWN", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_DOWN, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_TAP", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_TAP, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_DONE_WAITING", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_DONE_WAITING, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_SCROLL", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_SCROLL, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_FLING", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_FLING, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_OVERSCROLL", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_OVERSCROLL, 0x18, -1, -1, -1, -1 },
    { "TOUCH_MODE_OVERFLING", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_OVERFLING, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_NORMAL", "I", .constantValue.asInt = ADAbsListView_LAYOUT_NORMAL, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_FORCE_TOP", "I", .constantValue.asInt = ADAbsListView_LAYOUT_FORCE_TOP, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_SET_SELECTION", "I", .constantValue.asInt = ADAbsListView_LAYOUT_SET_SELECTION, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_FORCE_BOTTOM", "I", .constantValue.asInt = ADAbsListView_LAYOUT_FORCE_BOTTOM, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_SPECIFIC", "I", .constantValue.asInt = ADAbsListView_LAYOUT_SPECIFIC, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_SYNC", "I", .constantValue.asInt = ADAbsListView_LAYOUT_SYNC, 0x18, -1, -1, -1, -1 },
    { "LAYOUT_MOVE_SELECTION", "I", .constantValue.asInt = ADAbsListView_LAYOUT_MOVE_SELECTION, 0x18, -1, -1, -1, -1 },
    { "CHOICE_MODE_NONE", "I", .constantValue.asInt = ADAbsListView_CHOICE_MODE_NONE, 0x19, -1, -1, -1, -1 },
    { "CHOICE_MODE_SINGLE", "I", .constantValue.asInt = ADAbsListView_CHOICE_MODE_SINGLE, 0x19, -1, -1, -1, -1 },
    { "CHOICE_MODE_MULTIPLE", "I", .constantValue.asInt = ADAbsListView_CHOICE_MODE_MULTIPLE, 0x19, -1, -1, -1, -1 },
    { "CHOICE_MODE_MULTIPLE_MODAL", "I", .constantValue.asInt = ADAbsListView_CHOICE_MODE_MULTIPLE_MODAL, 0x19, -1, -1, -1, -1 },
    { "mChoiceMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mChoiceActionMode_", "LADAbsListView_ActionMode;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMultiChoiceModeCallback_", "LADAbsListView_MultiChoiceModeWrapper;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCheckedItemCount_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCheckStates_", "LADSparseBooleanArray;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mCheckedIdStates_", "LADLongSparseArray;", .constantValue.asLong = 0, 0x0, -1, -1, 7, -1 },
    { "mLayoutMode_AbsListView_", "I", .constantValue.asLong = 0, 0x0, 8, -1, -1, -1 },
    { "mAdapter_", "LADListAdapter;", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mAdapterHasStableIds_", "Z", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSelectorPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSelectionLeftPadding_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSelectionTopPadding_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSelectionRightPadding_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSelectionBottomPadding_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mWidthMeasureSpec_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMotionPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMotionViewOriginalTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMotionViewNewTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMotionX_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMotionY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mTouchMode_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mLastY_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mMotionCorrection_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mSelectedTop_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mResurrectToPosition_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOverscrollMax_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "OVERSCROLL_LIMIT_DIVISOR", "I", .constantValue.asInt = ADAbsListView_OVERSCROLL_LIMIT_DIVISOR, 0x18, -1, -1, -1, -1 },
    { "CHECK_POSITION_SEARCH_DISTANCE", "I", .constantValue.asInt = ADAbsListView_CHECK_POSITION_SEARCH_DISTANCE, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_MODE_UNKNOWN", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_UNKNOWN, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_MODE_ON", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_ON, 0x1a, -1, -1, -1, -1 },
    { "TOUCH_MODE_OFF", "I", .constantValue.asInt = ADAbsListView_TOUCH_MODE_OFF, 0x1a, -1, -1, -1, -1 },
    { "mLastTouchMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTranscriptMode_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mCacheColorHint_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mFastScrollStyle_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mTouchSlop_AbsListView_", "I", .constantValue.asLong = 0, 0x2, 9, -1, -1, -1 },
    { "mMinimumVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mMaximumVelocity_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mNestedYOffset_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mActivePointerId_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "INVALID_POINTER", "I", .constantValue.asInt = ADAbsListView_INVALID_POINTER, 0x1a, -1, -1, -1, -1 },
    { "mOverscrollDistance_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mOverflingDistance_", "I", .constantValue.asLong = 0, 0x0, -1, -1, -1, -1 },
    { "mFirstPositionDistanceGuess_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastPositionDistanceGuess_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mDirection_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "mLastHandledItemCount_", "I", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "setAdapter", "LADListAdapter;", "isItemChecked", "I", "performItemClick", "LADView;IJ", "setChoiceMode", "Lr/android/util/LongSparseArray<Ljava/lang/Integer;>;", "mLayoutMode", "mTouchSlop", "LADAbsListView_ActionMode;LADAbsListView_MultiChoiceModeWrapper;LADAbsListView_OnScrollListener;", "Lr/android/widget/AdapterView<Lr/android/widget/ListAdapter;>;" };
  static const J2ObjcClassInfo _ADAbsListView = { "AbsListView", "r.android.widget", ptrTable, methods, fields, 7, 0x401, 12, 69, -1, 10, -1, 11, -1 };
  return &_ADAbsListView;
}

@end

void ADAbsListView_init(ADAbsListView *self) {
  ADAdapterView_init(self);
  self->mChoiceMode_ = ADAbsListView_CHOICE_MODE_NONE;
  self->mLayoutMode_AbsListView_ = ADAbsListView_LAYOUT_NORMAL;
  self->mSelectorPosition_ = ADAdapterView_INVALID_POSITION;
  self->mSelectionLeftPadding_ = 0;
  self->mSelectionTopPadding_ = 0;
  self->mSelectionRightPadding_ = 0;
  self->mSelectionBottomPadding_ = 0;
  self->mWidthMeasureSpec_ = 0;
  self->mTouchMode_ = ADAbsListView_TOUCH_MODE_REST;
  self->mSelectedTop_ = 0;
  self->mResurrectToPosition_ = ADAdapterView_INVALID_POSITION;
  self->mLastTouchMode_ = ADAbsListView_TOUCH_MODE_UNKNOWN;
  self->mNestedYOffset_ = 0;
  self->mActivePointerId_ = ADAbsListView_INVALID_POINTER;
  self->mDirection_ = 0;
}

void ADAbsListView_updateOnScreenCheckedViews(ADAbsListView *self) {
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAbsListView)

@implementation ADAbsListView_ActionMode

- (instancetype)initWithADAbsListView:(ADAbsListView *)outer$ {
  ADAbsListView_ActionMode_initWithADAbsListView_(self, outer$);
  return self;
}

- (void)invalidate {
}

- (void)finish {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x0, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADAbsListView:);
  methods[1].selector = @selector(invalidate);
  methods[2].selector = @selector(finish);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADAbsListView;" };
  static const J2ObjcClassInfo _ADAbsListView_ActionMode = { "ActionMode", "r.android.widget", ptrTable, methods, NULL, 7, 0x0, 3, 0, 0, -1, -1, -1, -1 };
  return &_ADAbsListView_ActionMode;
}

@end

void ADAbsListView_ActionMode_initWithADAbsListView_(ADAbsListView_ActionMode *self, ADAbsListView *outer$) {
  NSObject_init(self);
}

ADAbsListView_ActionMode *new_ADAbsListView_ActionMode_initWithADAbsListView_(ADAbsListView *outer$) {
  J2OBJC_NEW_IMPL(ADAbsListView_ActionMode, initWithADAbsListView_, outer$)
}

ADAbsListView_ActionMode *create_ADAbsListView_ActionMode_initWithADAbsListView_(ADAbsListView *outer$) {
  J2OBJC_CREATE_IMPL(ADAbsListView_ActionMode, initWithADAbsListView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAbsListView_ActionMode)

@implementation ADAbsListView_MultiChoiceModeWrapper

- (instancetype)initWithADAbsListView:(ADAbsListView *)outer$ {
  ADAbsListView_MultiChoiceModeWrapper_initWithADAbsListView_(self, outer$);
  return self;
}

- (void)onItemCheckedStateChangedWithADAbsListView_ActionMode:(ADAbsListView_ActionMode *)mode
                                                      withInt:(jint)position
                                                     withLong:(jlong)id_
                                                  withBoolean:(jboolean)checked {
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADAbsListView:);
  methods[1].selector = @selector(onItemCheckedStateChangedWithADAbsListView_ActionMode:withInt:withLong:withBoolean:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "LADAbsListView;", "onItemCheckedStateChanged", "LADAbsListView_ActionMode;IJZ" };
  static const J2ObjcClassInfo _ADAbsListView_MultiChoiceModeWrapper = { "MultiChoiceModeWrapper", "r.android.widget", ptrTable, methods, NULL, 7, 0x0, 2, 0, 0, -1, -1, -1, -1 };
  return &_ADAbsListView_MultiChoiceModeWrapper;
}

@end

void ADAbsListView_MultiChoiceModeWrapper_initWithADAbsListView_(ADAbsListView_MultiChoiceModeWrapper *self, ADAbsListView *outer$) {
  NSObject_init(self);
}

ADAbsListView_MultiChoiceModeWrapper *new_ADAbsListView_MultiChoiceModeWrapper_initWithADAbsListView_(ADAbsListView *outer$) {
  J2OBJC_NEW_IMPL(ADAbsListView_MultiChoiceModeWrapper, initWithADAbsListView_, outer$)
}

ADAbsListView_MultiChoiceModeWrapper *create_ADAbsListView_MultiChoiceModeWrapper_initWithADAbsListView_(ADAbsListView *outer$) {
  J2OBJC_CREATE_IMPL(ADAbsListView_MultiChoiceModeWrapper, initWithADAbsListView_, outer$)
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADAbsListView_MultiChoiceModeWrapper)

@implementation ADAbsListView_OnScrollListener

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "V", 0x401, 0, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(onScrollWithADAbsListView:withInt:withInt:withInt:);
  #pragma clang diagnostic pop
  static const void *ptrTable[] = { "onScroll", "LADAbsListView;III", "LADAbsListView;" };
  static const J2ObjcClassInfo _ADAbsListView_OnScrollListener = { "OnScrollListener", "r.android.widget", ptrTable, methods, NULL, 7, 0x609, 1, 0, 2, -1, -1, -1, -1 };
  return &_ADAbsListView_OnScrollListener;
}

@end

J2OBJC_INTERFACE_TYPE_LITERAL_SOURCE(ADAbsListView_OnScrollListener)
