//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: D:\Java\git\core-javafx-widget\SWTAndroidXRecyclerView\src\main\java\com\xwray\groupie\Section.java
//

#include "DiffCallback.h"
#include "DiffUtil.h"
#include "GroupUtils.h"
#include "J2ObjC_source.h"
#include "ListUpdateCallback.h"
#include "NestedGroup.h"
#include "RVGroup.h"
#include "Section.h"
#include "java/lang/IndexOutOfBoundsException.h"
#include "java/lang/NullPointerException.h"
#include "java/util/ArrayList.h"
#include "java/util/Collection.h"
#include "java/util/List.h"

@class JavaUtilArrayList;


@interface ADXSection () {
 @public
  id<ADXRVGroup> header_;
  id<ADXRVGroup> footer_;
  id<ADXRVGroup> placeholder_;
  JavaUtilArrayList *children_;
  jboolean hideWhenEmpty_;
  jboolean isHeaderAndFooterVisible_;
  jboolean isPlaceholderVisible_;
  id<ADXListUpdateCallback> listUpdateCallback_;
}

- (void)showPlaceholder;

- (void)hidePlaceholder;

- (void)hideDecorations;

- (void)showHeadersAndFooters;

- (jint)getBodyItemCount;

- (jint)getItemCountWithoutFooter;

- (jint)getHeaderCount;

- (jint)getHeaderItemCount;

- (jint)getFooterItemCount;

- (jint)getFooterCount;

- (jint)getPlaceholderCount;

- (jboolean)isHeaderShown;

- (jboolean)isFooterShown;

- (jboolean)isPlaceholderShown;

- (void)notifyHeaderItemsChangedWithInt:(jint)previousHeaderItemCount;

- (void)notifyFooterItemsChangedWithInt:(jint)previousFooterItemCount;

- (jint)getPlaceholderItemCount;

@end

J2OBJC_FIELD_SETTER(ADXSection, header_, id<ADXRVGroup>)
J2OBJC_FIELD_SETTER(ADXSection, footer_, id<ADXRVGroup>)
J2OBJC_FIELD_SETTER(ADXSection, placeholder_, id<ADXRVGroup>)
J2OBJC_FIELD_SETTER(ADXSection, children_, JavaUtilArrayList *)
J2OBJC_FIELD_SETTER(ADXSection, listUpdateCallback_, id<ADXListUpdateCallback>)

__attribute__((unused)) static void ADXSection_showPlaceholder(ADXSection *self);

__attribute__((unused)) static void ADXSection_hidePlaceholder(ADXSection *self);

__attribute__((unused)) static void ADXSection_hideDecorations(ADXSection *self);

__attribute__((unused)) static void ADXSection_showHeadersAndFooters(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getBodyItemCount(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getItemCountWithoutFooter(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getHeaderCount(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getHeaderItemCount(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getFooterItemCount(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getFooterCount(ADXSection *self);

__attribute__((unused)) static jint ADXSection_getPlaceholderCount(ADXSection *self);

__attribute__((unused)) static jboolean ADXSection_isHeaderShown(ADXSection *self);

__attribute__((unused)) static jboolean ADXSection_isFooterShown(ADXSection *self);

__attribute__((unused)) static jboolean ADXSection_isPlaceholderShown(ADXSection *self);

__attribute__((unused)) static void ADXSection_notifyHeaderItemsChangedWithInt_(ADXSection *self, jint previousHeaderItemCount);

__attribute__((unused)) static void ADXSection_notifyFooterItemsChangedWithInt_(ADXSection *self, jint previousFooterItemCount);

__attribute__((unused)) static jint ADXSection_getPlaceholderItemCount(ADXSection *self);

@interface ADXSection_1 : NSObject < ADXListUpdateCallback > {
 @public
  ADXSection *this$0_;
}

- (instancetype)initWithADXSection:(ADXSection *)outer$;

- (void)onInsertedWithInt:(jint)position
                  withInt:(jint)count;

- (void)onRemovedWithInt:(jint)position
                 withInt:(jint)count;

- (void)onMovedWithInt:(jint)fromPosition
               withInt:(jint)toPosition;

- (void)onChangedWithInt:(jint)position
                 withInt:(jint)count
                  withId:(id)payload;

@end

J2OBJC_EMPTY_STATIC_INIT(ADXSection_1)

__attribute__((unused)) static void ADXSection_1_initWithADXSection_(ADXSection_1 *self, ADXSection *outer$);

__attribute__((unused)) static ADXSection_1 *new_ADXSection_1_initWithADXSection_(ADXSection *outer$) NS_RETURNS_RETAINED;

__attribute__((unused)) static ADXSection_1 *create_ADXSection_1_initWithADXSection_(ADXSection *outer$);

@implementation ADXSection

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  ADXSection_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

- (instancetype)initWithADXRVGroup:(id<ADXRVGroup>)header {
  ADXSection_initWithADXRVGroup_(self, header);
  return self;
}

- (instancetype)initWithJavaUtilCollection:(id<JavaUtilCollection>)children {
  ADXSection_initWithJavaUtilCollection_(self, children);
  return self;
}

- (instancetype)initWithADXRVGroup:(id<ADXRVGroup>)header
            withJavaUtilCollection:(id<JavaUtilCollection>)children {
  ADXSection_initWithADXRVGroup_withJavaUtilCollection_(self, header, children);
  return self;
}

- (void)addWithInt:(jint)position
    withADXRVGroup:(id<ADXRVGroup>)group {
  [super addWithInt:position withADXRVGroup:group];
  [((JavaUtilArrayList *) nil_chk(children_)) addWithInt:position withId:group];
  jint notifyPosition = ADXSection_getHeaderItemCount(self) + ADXGroupUtils_getItemCountWithJavaUtilCollection_([children_ subListWithInt:0 withInt:position]);
  [self notifyItemRangeInsertedWithInt:notifyPosition withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  [self refreshEmptyState];
}

- (void)addAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty]) return;
  [super addAllWithJavaUtilCollection:groups];
  jint position = ADXSection_getItemCountWithoutFooter(self);
  [((JavaUtilArrayList *) nil_chk(self->children_)) addAllWithJavaUtilCollection:groups];
  [self notifyItemRangeInsertedWithInt:position withInt:ADXGroupUtils_getItemCountWithJavaUtilCollection_(groups)];
  [self refreshEmptyState];
}

- (void)addAllWithInt:(jint)position
withJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty]) {
    return;
  }
  [super addAllWithInt:position withJavaUtilCollection:groups];
  [((JavaUtilArrayList *) nil_chk(self->children_)) addAllWithInt:position withJavaUtilCollection:groups];
  jint notifyPosition = ADXSection_getHeaderItemCount(self) + ADXGroupUtils_getItemCountWithJavaUtilCollection_([children_ subListWithInt:0 withInt:position]);
  [self notifyItemRangeInsertedWithInt:notifyPosition withInt:ADXGroupUtils_getItemCountWithJavaUtilCollection_(groups)];
  [self refreshEmptyState];
}

- (void)addWithADXRVGroup:(id<ADXRVGroup>)group {
  [super addWithADXRVGroup:group];
  jint position = ADXSection_getItemCountWithoutFooter(self);
  [((JavaUtilArrayList *) nil_chk(children_)) addWithId:group];
  [self notifyItemRangeInsertedWithInt:position withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  [self refreshEmptyState];
}

- (void)removeWithADXRVGroup:(id<ADXRVGroup>)group {
  [super removeWithADXRVGroup:group];
  jint position = [self getItemCountBeforeGroupWithADXRVGroup:group];
  [((JavaUtilArrayList *) nil_chk(children_)) removeWithId:group];
  [self notifyItemRangeRemovedWithInt:position withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  [self refreshEmptyState];
}

- (void)removeAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty]) {
    return;
  }
  [super removeAllWithJavaUtilCollection:groups];
  for (id<ADXRVGroup> __strong group in groups) {
    jint position = [self getItemCountBeforeGroupWithADXRVGroup:group];
    [((JavaUtilArrayList *) nil_chk(children_)) removeWithId:group];
    [self notifyItemRangeRemovedWithInt:position withInt:[((id<ADXRVGroup>) nil_chk(group)) getItemCount]];
  }
  [self refreshEmptyState];
}

- (void)replaceAllWithJavaUtilCollection:(id<JavaUtilCollection>)groups {
  if ([((id<JavaUtilCollection>) nil_chk(groups)) isEmpty]) {
    return;
  }
  [super replaceAllWithJavaUtilCollection:groups];
  [((JavaUtilArrayList *) nil_chk(children_)) clear];
  [children_ addAllWithJavaUtilCollection:groups];
  [self notifyDataSetInvalidated];
  [self refreshEmptyState];
}

- (id<JavaUtilList>)getGroups {
  return create_JavaUtilArrayList_initWithJavaUtilCollection_(self->children_);
}

- (void)clear {
  if ([((JavaUtilArrayList *) nil_chk(children_)) isEmpty]) {
    return;
  }
  [self removeAllWithJavaUtilCollection:create_JavaUtilArrayList_initWithJavaUtilCollection_(children_)];
}

- (void)updateWithJavaUtilCollection:(id<JavaUtilCollection>)newBodyGroups {
  [self updateWithJavaUtilCollection:newBodyGroups withBoolean:true];
}

- (void)updateWithJavaUtilCollection:(id<JavaUtilCollection>)newBodyGroups
                         withBoolean:(jboolean)detectMoves {
  id<JavaUtilList> oldBodyGroups = create_JavaUtilArrayList_initWithJavaUtilCollection_(children_);
  ADXDiffUtil_DiffResult *diffResult = ADXDiffUtil_calculateDiffWithADXDiffUtil_Callback_withBoolean_(create_ADXDiffCallback_initPackagePrivateWithJavaUtilCollection_withJavaUtilCollection_(oldBodyGroups, newBodyGroups), detectMoves);
  [self updateWithJavaUtilCollection:newBodyGroups withADXDiffUtil_DiffResult:diffResult];
}

- (void)updateWithJavaUtilCollection:(id<JavaUtilCollection>)newBodyGroups
          withADXDiffUtil_DiffResult:(ADXDiffUtil_DiffResult *)diffResult {
  [super removeAllWithJavaUtilCollection:children_];
  [((JavaUtilArrayList *) nil_chk(children_)) clear];
  [children_ addAllWithJavaUtilCollection:newBodyGroups];
  [super addAllWithJavaUtilCollection:newBodyGroups];
  [((ADXDiffUtil_DiffResult *) nil_chk(diffResult)) dispatchUpdatesToWithADXListUpdateCallback:listUpdateCallback_];
  [self refreshEmptyState];
}

- (void)setPlaceholderWithADXRVGroup:(id<ADXRVGroup>)placeholder {
  if (placeholder == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Placeholder can't be null.  Please use removePlaceholder() instead!");
  if (self->placeholder_ != nil) {
    [self removePlaceholder];
  }
  JreStrongAssign(&self->placeholder_, placeholder);
  [self refreshEmptyState];
}

- (void)removePlaceholder {
  ADXSection_hidePlaceholder(self);
  JreStrongAssign(&self->placeholder_, nil);
}

- (void)showPlaceholder {
  ADXSection_showPlaceholder(self);
}

- (void)hidePlaceholder {
  ADXSection_hidePlaceholder(self);
}

- (jboolean)isEmpty {
  return [((JavaUtilArrayList *) nil_chk(children_)) isEmpty] || ADXGroupUtils_getItemCountWithJavaUtilCollection_(children_) == 0;
}

- (void)hideDecorations {
  ADXSection_hideDecorations(self);
}

- (void)refreshEmptyState {
  jboolean isEmpty = [self isEmpty];
  if (isEmpty) {
    if (hideWhenEmpty_) {
      ADXSection_hideDecorations(self);
    }
    else {
      ADXSection_showPlaceholder(self);
      ADXSection_showHeadersAndFooters(self);
    }
  }
  else {
    ADXSection_hidePlaceholder(self);
    ADXSection_showHeadersAndFooters(self);
  }
}

- (void)showHeadersAndFooters {
  ADXSection_showHeadersAndFooters(self);
}

- (jint)getBodyItemCount {
  return ADXSection_getBodyItemCount(self);
}

- (jint)getItemCountWithoutFooter {
  return ADXSection_getItemCountWithoutFooter(self);
}

- (jint)getHeaderCount {
  return ADXSection_getHeaderCount(self);
}

- (jint)getHeaderItemCount {
  return ADXSection_getHeaderItemCount(self);
}

- (jint)getFooterItemCount {
  return ADXSection_getFooterItemCount(self);
}

- (jint)getFooterCount {
  return ADXSection_getFooterCount(self);
}

- (jint)getPlaceholderCount {
  return ADXSection_getPlaceholderCount(self);
}

- (id<ADXRVGroup>)getGroupWithInt:(jint)position {
  if (ADXSection_isHeaderShown(self) && position == 0) return header_;
  position -= ADXSection_getHeaderCount(self);
  if (ADXSection_isPlaceholderShown(self) && position == 0) return placeholder_;
  position -= ADXSection_getPlaceholderCount(self);
  if (position == [((JavaUtilArrayList *) nil_chk(children_)) size]) {
    if (ADXSection_isFooterShown(self)) {
      return footer_;
    }
    else {
      @throw create_JavaLangIndexOutOfBoundsException_initWithNSString_(JreStrcat("$I$I$", @"Wanted group at position ", position, @" but there are only ", [self getGroupCount], @" groups"));
    }
  }
  else {
    return [children_ getWithInt:position];
  }
}

- (jint)getGroupCount {
  return ADXSection_getHeaderCount(self) + ADXSection_getFooterCount(self) + ADXSection_getPlaceholderCount(self) + [((JavaUtilArrayList *) nil_chk(children_)) size];
}

- (jint)getPositionWithADXRVGroup:(id<ADXRVGroup>)group {
  jint count = 0;
  if (ADXSection_isHeaderShown(self)) {
    if (group == header_) return count;
  }
  count += ADXSection_getHeaderCount(self);
  if (ADXSection_isPlaceholderShown(self)) {
    if (group == placeholder_) return count;
  }
  count += ADXSection_getPlaceholderCount(self);
  jint index = [((JavaUtilArrayList *) nil_chk(children_)) indexOfWithId:group];
  if (index >= 0) return count + index;
  count += [children_ size];
  if (ADXSection_isFooterShown(self)) {
    if (footer_ == group) {
      return count;
    }
  }
  return -1;
}

- (jboolean)isHeaderShown {
  return ADXSection_isHeaderShown(self);
}

- (jboolean)isFooterShown {
  return ADXSection_isFooterShown(self);
}

- (jboolean)isPlaceholderShown {
  return ADXSection_isPlaceholderShown(self);
}

- (void)setHeaderWithADXRVGroup:(id<ADXRVGroup>)header {
  if (header == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Header can't be null.  Please use removeHeader() instead!");
  if (self->header_ != nil) {
    [self->header_ unregisterGroupDataObserverWithADXGroupDataObserver:self];
  }
  jint previousHeaderItemCount = ADXSection_getHeaderItemCount(self);
  JreStrongAssign(&self->header_, header);
  [header registerGroupDataObserverWithADXGroupDataObserver:self];
  ADXSection_notifyHeaderItemsChangedWithInt_(self, previousHeaderItemCount);
}

- (void)removeHeader {
  if (self->header_ == nil) {
    return;
  }
  [self->header_ unregisterGroupDataObserverWithADXGroupDataObserver:self];
  jint previousHeaderItemCount = ADXSection_getHeaderItemCount(self);
  JreStrongAssign(&self->header_, nil);
  ADXSection_notifyHeaderItemsChangedWithInt_(self, previousHeaderItemCount);
}

- (void)notifyHeaderItemsChangedWithInt:(jint)previousHeaderItemCount {
  ADXSection_notifyHeaderItemsChangedWithInt_(self, previousHeaderItemCount);
}

- (void)setFooterWithADXRVGroup:(id<ADXRVGroup>)footer {
  if (footer == nil) @throw create_JavaLangNullPointerException_initWithNSString_(@"Footer can't be null.  Please use removeFooter() instead!");
  if (self->footer_ != nil) {
    [self->footer_ unregisterGroupDataObserverWithADXGroupDataObserver:self];
  }
  jint previousFooterItemCount = ADXSection_getFooterItemCount(self);
  JreStrongAssign(&self->footer_, footer);
  [footer registerGroupDataObserverWithADXGroupDataObserver:self];
  ADXSection_notifyFooterItemsChangedWithInt_(self, previousFooterItemCount);
}

- (void)removeFooter {
  if (self->footer_ == nil) {
    return;
  }
  [self->footer_ unregisterGroupDataObserverWithADXGroupDataObserver:self];
  jint previousFooterItemCount = ADXSection_getFooterItemCount(self);
  JreStrongAssign(&self->footer_, nil);
  ADXSection_notifyFooterItemsChangedWithInt_(self, previousFooterItemCount);
}

- (void)notifyFooterItemsChangedWithInt:(jint)previousFooterItemCount {
  ADXSection_notifyFooterItemsChangedWithInt_(self, previousFooterItemCount);
}

- (void)setHideWhenEmptyWithBoolean:(jboolean)hide {
  if (hideWhenEmpty_ == hide) return;
  hideWhenEmpty_ = hide;
  [self refreshEmptyState];
}

- (void)onItemInsertedWithADXRVGroup:(id<ADXRVGroup>)group
                             withInt:(jint)position {
  [super onItemInsertedWithADXRVGroup:group withInt:position];
  [self refreshEmptyState];
}

- (void)onItemRemovedWithADXRVGroup:(id<ADXRVGroup>)group
                            withInt:(jint)position {
  [super onItemRemovedWithADXRVGroup:group withInt:position];
  [self refreshEmptyState];
}

- (void)onItemRangeInsertedWithADXRVGroup:(id<ADXRVGroup>)group
                                  withInt:(jint)positionStart
                                  withInt:(jint)itemCount {
  [super onItemRangeInsertedWithADXRVGroup:group withInt:positionStart withInt:itemCount];
  [self refreshEmptyState];
}

- (void)onItemRangeRemovedWithADXRVGroup:(id<ADXRVGroup>)group
                                 withInt:(jint)positionStart
                                 withInt:(jint)itemCount {
  [super onItemRangeRemovedWithADXRVGroup:group withInt:positionStart withInt:itemCount];
  [self refreshEmptyState];
}

- (jint)getPlaceholderItemCount {
  return ADXSection_getPlaceholderItemCount(self);
}

- (void)dealloc {
  RELEASE_(header_);
  RELEASE_(footer_);
  RELEASE_(placeholder_);
  RELEASE_(children_);
  RELEASE_(listUpdateCallback_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 0, -1, -1, -1, -1 },
    { NULL, NULL, 0x1, -1, 1, -1, 2, -1, -1 },
    { NULL, NULL, 0x1, -1, 3, -1, 4, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 7, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 7, 8, -1, 9, -1, -1 },
    { NULL, "V", 0x1, 5, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 10, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 11, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 12, 1, -1, 2, -1, -1 },
    { NULL, "LJavaUtilList;", 0x1, -1, -1, -1, 13, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 14, 1, -1, 2, -1, -1 },
    { NULL, "V", 0x1, 14, 15, -1, 16, -1, -1 },
    { NULL, "V", 0x1, 14, 17, -1, 18, -1, -1 },
    { NULL, "V", 0x1, 19, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x4, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "LADXRVGroup;", 0x1, 20, 21, -1, -1, -1, -1 },
    { NULL, "I", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "I", 0x1, 22, 0, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 23, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 24, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 25, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, -1, -1, -1, -1, -1, -1 },
    { NULL, "V", 0x2, 26, 21, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 27, 28, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 29, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 31, 30, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 32, 33, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 34, 33, -1, -1, -1, -1 },
    { NULL, "I", 0x2, -1, -1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(initWithADXRVGroup:);
  methods[2].selector = @selector(initWithJavaUtilCollection:);
  methods[3].selector = @selector(initWithADXRVGroup:withJavaUtilCollection:);
  methods[4].selector = @selector(addWithInt:withADXRVGroup:);
  methods[5].selector = @selector(addAllWithJavaUtilCollection:);
  methods[6].selector = @selector(addAllWithInt:withJavaUtilCollection:);
  methods[7].selector = @selector(addWithADXRVGroup:);
  methods[8].selector = @selector(removeWithADXRVGroup:);
  methods[9].selector = @selector(removeAllWithJavaUtilCollection:);
  methods[10].selector = @selector(replaceAllWithJavaUtilCollection:);
  methods[11].selector = @selector(getGroups);
  methods[12].selector = @selector(clear);
  methods[13].selector = @selector(updateWithJavaUtilCollection:);
  methods[14].selector = @selector(updateWithJavaUtilCollection:withBoolean:);
  methods[15].selector = @selector(updateWithJavaUtilCollection:withADXDiffUtil_DiffResult:);
  methods[16].selector = @selector(setPlaceholderWithADXRVGroup:);
  methods[17].selector = @selector(removePlaceholder);
  methods[18].selector = @selector(showPlaceholder);
  methods[19].selector = @selector(hidePlaceholder);
  methods[20].selector = @selector(isEmpty);
  methods[21].selector = @selector(hideDecorations);
  methods[22].selector = @selector(refreshEmptyState);
  methods[23].selector = @selector(showHeadersAndFooters);
  methods[24].selector = @selector(getBodyItemCount);
  methods[25].selector = @selector(getItemCountWithoutFooter);
  methods[26].selector = @selector(getHeaderCount);
  methods[27].selector = @selector(getHeaderItemCount);
  methods[28].selector = @selector(getFooterItemCount);
  methods[29].selector = @selector(getFooterCount);
  methods[30].selector = @selector(getPlaceholderCount);
  methods[31].selector = @selector(getGroupWithInt:);
  methods[32].selector = @selector(getGroupCount);
  methods[33].selector = @selector(getPositionWithADXRVGroup:);
  methods[34].selector = @selector(isHeaderShown);
  methods[35].selector = @selector(isFooterShown);
  methods[36].selector = @selector(isPlaceholderShown);
  methods[37].selector = @selector(setHeaderWithADXRVGroup:);
  methods[38].selector = @selector(removeHeader);
  methods[39].selector = @selector(notifyHeaderItemsChangedWithInt:);
  methods[40].selector = @selector(setFooterWithADXRVGroup:);
  methods[41].selector = @selector(removeFooter);
  methods[42].selector = @selector(notifyFooterItemsChangedWithInt:);
  methods[43].selector = @selector(setHideWhenEmptyWithBoolean:);
  methods[44].selector = @selector(onItemInsertedWithADXRVGroup:withInt:);
  methods[45].selector = @selector(onItemRemovedWithADXRVGroup:withInt:);
  methods[46].selector = @selector(onItemRangeInsertedWithADXRVGroup:withInt:withInt:);
  methods[47].selector = @selector(onItemRangeRemovedWithADXRVGroup:withInt:withInt:);
  methods[48].selector = @selector(getPlaceholderItemCount);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "header_", "LADXRVGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "footer_", "LADXRVGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "placeholder_", "LADXRVGroup;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "children_", "LJavaUtilArrayList;", .constantValue.asLong = 0, 0x12, -1, -1, 35, -1 },
    { "hideWhenEmpty_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isHeaderAndFooterVisible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "isPlaceholderVisible_", "Z", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
    { "listUpdateCallback_", "LADXListUpdateCallback;", .constantValue.asLong = 0, 0x2, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXRVGroup;", "LJavaUtilCollection;", "(Ljava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;)V", "LADXRVGroup;LJavaUtilCollection;", "(Lcom/xwray/groupie/RVGroup;Ljava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;)V", "add", "ILADXRVGroup;", "addAll", "ILJavaUtilCollection;", "(ILjava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;)V", "remove", "removeAll", "replaceAll", "()Ljava/util/List<Lcom/xwray/groupie/RVGroup;>;", "update", "LJavaUtilCollection;Z", "(Ljava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;Z)V", "LJavaUtilCollection;LADXDiffUtil_DiffResult;", "(Ljava/util/Collection<+Lcom/xwray/groupie/RVGroup;>;Landroidx/recyclerview/widget/DiffUtil$DiffResult;)V", "setPlaceholder", "getGroup", "I", "getPosition", "setHeader", "notifyHeaderItemsChanged", "setFooter", "notifyFooterItemsChanged", "setHideWhenEmpty", "Z", "onItemInserted", "LADXRVGroup;I", "onItemRemoved", "onItemRangeInserted", "LADXRVGroup;II", "onItemRangeRemoved", "Ljava/util/ArrayList<Lcom/xwray/groupie/RVGroup;>;" };
  static const J2ObjcClassInfo _ADXSection = { "Section", "com.xwray.groupie", ptrTable, methods, fields, 7, 0x1, 49, 8, -1, -1, -1, -1, -1 };
  return &_ADXSection;
}

@end

void ADXSection_init(ADXSection *self) {
  ADXSection_initWithADXRVGroup_withJavaUtilCollection_(self, nil, create_JavaUtilArrayList_init());
}

ADXSection *new_ADXSection_init() {
  J2OBJC_NEW_IMPL(ADXSection, init)
}

ADXSection *create_ADXSection_init() {
  J2OBJC_CREATE_IMPL(ADXSection, init)
}

void ADXSection_initWithADXRVGroup_(ADXSection *self, id<ADXRVGroup> header) {
  ADXSection_initWithADXRVGroup_withJavaUtilCollection_(self, header, create_JavaUtilArrayList_init());
}

ADXSection *new_ADXSection_initWithADXRVGroup_(id<ADXRVGroup> header) {
  J2OBJC_NEW_IMPL(ADXSection, initWithADXRVGroup_, header)
}

ADXSection *create_ADXSection_initWithADXRVGroup_(id<ADXRVGroup> header) {
  J2OBJC_CREATE_IMPL(ADXSection, initWithADXRVGroup_, header)
}

void ADXSection_initWithJavaUtilCollection_(ADXSection *self, id<JavaUtilCollection> children) {
  ADXSection_initWithADXRVGroup_withJavaUtilCollection_(self, nil, children);
}

ADXSection *new_ADXSection_initWithJavaUtilCollection_(id<JavaUtilCollection> children) {
  J2OBJC_NEW_IMPL(ADXSection, initWithJavaUtilCollection_, children)
}

ADXSection *create_ADXSection_initWithJavaUtilCollection_(id<JavaUtilCollection> children) {
  J2OBJC_CREATE_IMPL(ADXSection, initWithJavaUtilCollection_, children)
}

void ADXSection_initWithADXRVGroup_withJavaUtilCollection_(ADXSection *self, id<ADXRVGroup> header, id<JavaUtilCollection> children) {
  ADXNestedGroup_init(self);
  JreStrongAssignAndConsume(&self->children_, new_JavaUtilArrayList_init());
  self->hideWhenEmpty_ = false;
  self->isHeaderAndFooterVisible_ = true;
  self->isPlaceholderVisible_ = false;
  JreStrongAssignAndConsume(&self->listUpdateCallback_, new_ADXSection_1_initWithADXSection_(self));
  JreStrongAssign(&self->header_, header);
  if (header != nil) {
    [header registerGroupDataObserverWithADXGroupDataObserver:self];
  }
  [self addAllWithJavaUtilCollection:children];
}

ADXSection *new_ADXSection_initWithADXRVGroup_withJavaUtilCollection_(id<ADXRVGroup> header, id<JavaUtilCollection> children) {
  J2OBJC_NEW_IMPL(ADXSection, initWithADXRVGroup_withJavaUtilCollection_, header, children)
}

ADXSection *create_ADXSection_initWithADXRVGroup_withJavaUtilCollection_(id<ADXRVGroup> header, id<JavaUtilCollection> children) {
  J2OBJC_CREATE_IMPL(ADXSection, initWithADXRVGroup_withJavaUtilCollection_, header, children)
}

void ADXSection_showPlaceholder(ADXSection *self) {
  if (self->isPlaceholderVisible_ || self->placeholder_ == nil) return;
  self->isPlaceholderVisible_ = true;
  [self notifyItemRangeInsertedWithInt:ADXSection_getHeaderItemCount(self) withInt:[((id<ADXRVGroup>) nil_chk(self->placeholder_)) getItemCount]];
}

void ADXSection_hidePlaceholder(ADXSection *self) {
  if (!self->isPlaceholderVisible_ || self->placeholder_ == nil) return;
  self->isPlaceholderVisible_ = false;
  [self notifyItemRangeRemovedWithInt:ADXSection_getHeaderItemCount(self) withInt:[((id<ADXRVGroup>) nil_chk(self->placeholder_)) getItemCount]];
}

void ADXSection_hideDecorations(ADXSection *self) {
  if (!self->isHeaderAndFooterVisible_ && !self->isPlaceholderVisible_) return;
  jint count = ADXSection_getHeaderItemCount(self) + ADXSection_getPlaceholderItemCount(self) + ADXSection_getFooterItemCount(self);
  self->isHeaderAndFooterVisible_ = false;
  self->isPlaceholderVisible_ = false;
  [self notifyItemRangeRemovedWithInt:0 withInt:count];
}

void ADXSection_showHeadersAndFooters(ADXSection *self) {
  if (self->isHeaderAndFooterVisible_) return;
  self->isHeaderAndFooterVisible_ = true;
  [self notifyItemRangeInsertedWithInt:0 withInt:ADXSection_getHeaderItemCount(self)];
  [self notifyItemRangeInsertedWithInt:ADXSection_getItemCountWithoutFooter(self) withInt:ADXSection_getFooterItemCount(self)];
}

jint ADXSection_getBodyItemCount(ADXSection *self) {
  return self->isPlaceholderVisible_ ? ADXSection_getPlaceholderItemCount(self) : ADXGroupUtils_getItemCountWithJavaUtilCollection_(self->children_);
}

jint ADXSection_getItemCountWithoutFooter(ADXSection *self) {
  return ADXSection_getBodyItemCount(self) + ADXSection_getHeaderItemCount(self);
}

jint ADXSection_getHeaderCount(ADXSection *self) {
  return self->header_ == nil || !self->isHeaderAndFooterVisible_ ? 0 : 1;
}

jint ADXSection_getHeaderItemCount(ADXSection *self) {
  return ADXSection_getHeaderCount(self) == 0 ? 0 : [((id<ADXRVGroup>) nil_chk(self->header_)) getItemCount];
}

jint ADXSection_getFooterItemCount(ADXSection *self) {
  return ADXSection_getFooterCount(self) == 0 ? 0 : [((id<ADXRVGroup>) nil_chk(self->footer_)) getItemCount];
}

jint ADXSection_getFooterCount(ADXSection *self) {
  return self->footer_ == nil || !self->isHeaderAndFooterVisible_ ? 0 : 1;
}

jint ADXSection_getPlaceholderCount(ADXSection *self) {
  return self->isPlaceholderVisible_ ? 1 : 0;
}

jboolean ADXSection_isHeaderShown(ADXSection *self) {
  return ADXSection_getHeaderCount(self) > 0;
}

jboolean ADXSection_isFooterShown(ADXSection *self) {
  return ADXSection_getFooterCount(self) > 0;
}

jboolean ADXSection_isPlaceholderShown(ADXSection *self) {
  return ADXSection_getPlaceholderCount(self) > 0;
}

void ADXSection_notifyHeaderItemsChangedWithInt_(ADXSection *self, jint previousHeaderItemCount) {
  jint newHeaderItemCount = ADXSection_getHeaderItemCount(self);
  if (previousHeaderItemCount > 0) {
    [self notifyItemRangeRemovedWithInt:0 withInt:previousHeaderItemCount];
  }
  if (newHeaderItemCount > 0) {
    [self notifyItemRangeInsertedWithInt:0 withInt:newHeaderItemCount];
  }
}

void ADXSection_notifyFooterItemsChangedWithInt_(ADXSection *self, jint previousFooterItemCount) {
  jint newFooterItemCount = ADXSection_getFooterItemCount(self);
  if (previousFooterItemCount > 0) {
    [self notifyItemRangeRemovedWithInt:ADXSection_getItemCountWithoutFooter(self) withInt:previousFooterItemCount];
  }
  if (newFooterItemCount > 0) {
    [self notifyItemRangeInsertedWithInt:ADXSection_getItemCountWithoutFooter(self) withInt:newFooterItemCount];
  }
}

jint ADXSection_getPlaceholderItemCount(ADXSection *self) {
  if (self->isPlaceholderVisible_ && self->placeholder_ != nil) {
    return [self->placeholder_ getItemCount];
  }
  return 0;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(ADXSection)

@implementation ADXSection_1

- (instancetype)initWithADXSection:(ADXSection *)outer$ {
  ADXSection_1_initWithADXSection_(self, outer$);
  return self;
}

- (void)onInsertedWithInt:(jint)position
                  withInt:(jint)count {
  [this$0_ notifyItemRangeInsertedWithInt:ADXSection_getHeaderItemCount(this$0_) + position withInt:count];
}

- (void)onRemovedWithInt:(jint)position
                 withInt:(jint)count {
  [this$0_ notifyItemRangeRemovedWithInt:ADXSection_getHeaderItemCount(this$0_) + position withInt:count];
}

- (void)onMovedWithInt:(jint)fromPosition
               withInt:(jint)toPosition {
  jint headerItemCount = ADXSection_getHeaderItemCount(this$0_);
  [this$0_ notifyItemMovedWithInt:headerItemCount + fromPosition withInt:headerItemCount + toPosition];
}

- (void)onChangedWithInt:(jint)position
                 withInt:(jint)count
                  withId:(id)payload {
  [this$0_ notifyItemRangeChangedWithInt:ADXSection_getHeaderItemCount(this$0_) + position withInt:count withId:payload];
}

- (void)dealloc {
  RELEASE_(this$0_);
  [super dealloc];
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x0, -1, 0, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 1, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 3, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 4, 2, -1, -1, -1, -1 },
    { NULL, "V", 0x1, 5, 6, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  #pragma clang diagnostic ignored "-Wundeclared-selector"
  methods[0].selector = @selector(initWithADXSection:);
  methods[1].selector = @selector(onInsertedWithInt:withInt:);
  methods[2].selector = @selector(onRemovedWithInt:withInt:);
  methods[3].selector = @selector(onMovedWithInt:withInt:);
  methods[4].selector = @selector(onChangedWithInt:withInt:withId:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "this$0_", "LADXSection;", .constantValue.asLong = 0, 0x1012, -1, -1, -1, -1 },
  };
  static const void *ptrTable[] = { "LADXSection;", "onInserted", "II", "onRemoved", "onMoved", "onChanged", "IILNSObject;" };
  static const J2ObjcClassInfo _ADXSection_1 = { "", "com.xwray.groupie", ptrTable, methods, fields, 7, 0x8010, 5, 1, 0, -1, -1, -1, -1 };
  return &_ADXSection_1;
}

@end

void ADXSection_1_initWithADXSection_(ADXSection_1 *self, ADXSection *outer$) {
  JreStrongAssign(&self->this$0_, outer$);
  NSObject_init(self);
}

ADXSection_1 *new_ADXSection_1_initWithADXSection_(ADXSection *outer$) {
  J2OBJC_NEW_IMPL(ADXSection_1, initWithADXSection_, outer$)
}

ADXSection_1 *create_ADXSection_1_initWithADXSection_(ADXSection *outer$) {
  J2OBJC_CREATE_IMPL(ADXSection_1, initWithADXSection_, outer$)
}
